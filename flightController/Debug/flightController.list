
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08013a90  08013a90  00014a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014240  08014240  00016308  2**0
                  CONTENTS
  4 .ARM          00000008  08014240  08014240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014248  08014248  00016308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014248  08014248  00015248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801424c  0801424c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  08014250  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020f4  20000308  08014558  00016308  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023fc  08014558  000163fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016308  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026fcb  00000000  00000000  00016338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006082  00000000  00000000  0003d303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002100  00000000  00000000  00043388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001970  00000000  00000000  00045488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211de  00000000  00000000  00046df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d3e0  00000000  00000000  00067fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae5e6  00000000  00000000  000953b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014399c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c10  00000000  00000000  001439e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0014d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000308 	.word	0x20000308
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013a74 	.word	0x08013a74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000030c 	.word	0x2000030c
 80001dc:	08013a74 	.word	0x08013a74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t) TASK_FLIGHTCONTROLLER_STARTUP_PRIORITY), &FlightController_StartUp_Handle);
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	2302      	movs	r3, #2
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f9c:	4928      	ldr	r1, [pc, #160]	@ (8001040 <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000f9e:	4829      	ldr	r0, [pc, #164]	@ (8001044 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fa0:	f00d f8bc 	bl	800e11c <xTaskCreate>
 8000fa4:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d00b      	beq.n	8000fc4 <FreeRTOS_CreateStartUpTasks+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fb0:	f383 8811 	msr	BASEPRI, r3
 8000fb4:	f3bf 8f6f 	isb	sy
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <FreeRTOS_CreateStartUpTasks+0x4e>
        vTaskDelete(FlightController_StartUp_Handle);
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00d f9d5 	bl	800e380 <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t) TASK_FLIGHTCONTROLLER_ONOFFBUTTON_PRIORITY), &FlightController_OnOffButton_Handle);
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2303      	movs	r3, #3
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe4:	4919      	ldr	r1, [pc, #100]	@ (800104c <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000fe6:	481a      	ldr	r0, [pc, #104]	@ (8001050 <FreeRTOS_CreateStartUpTasks+0xc8>)
 8000fe8:	f00d f898 	bl	800e11c <xTaskCreate>
 8000fec:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d00b      	beq.n	800100c <FreeRTOS_CreateStartUpTasks+0x84>
	__asm volatile
 8000ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 8000ffc:	f3bf 8f6f 	isb	sy
 8001000:	f3bf 8f4f 	dsb	sy
 8001004:	607b      	str	r3, [r7, #4]
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <FreeRTOS_CreateStartUpTasks+0x80>

    if (FlightController_OnOffButton_Handle == NULL) {
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d104      	bne.n	800101e <FreeRTOS_CreateStartUpTasks+0x96>
        vTaskDelete(FlightController_OnOffButton_Handle);
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f00d f9b1 	bl	800e380 <vTaskDelete>
    }

    /* Timer1: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	2201      	movs	r2, #1
 8001026:	2164      	movs	r1, #100	@ 0x64
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <FreeRTOS_CreateStartUpTasks+0xd0>)
 800102a:	f00e f81d 	bl	800f068 <xTimerCreate>
 800102e:	4603      	mov	r3, r0
 8001030:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <FreeRTOS_CreateStartUpTasks+0xd4>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000328 	.word	0x20000328
 8001040:	08013a90 	.word	0x08013a90
 8001044:	080013e5 	.word	0x080013e5
 8001048:	2000033c 	.word	0x2000033c
 800104c:	08013aac 	.word	0x08013aac
 8001050:	08001d69 	.word	0x08001d69
 8001054:	0800245d 	.word	0x0800245d
 8001058:	08013acc 	.word	0x08013acc
 800105c:	20000350 	.word	0x20000350

08001060 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	@ 0x30
 8001064:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_ControlSystem */
    ret = xTaskCreate(FlightController_ControlSystem, "FlightController_ControlSystem", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t) TASK_FLIGHTCONTROLLER_CONTROLSYSTEM_PRIORITY), &FlightController_ControlSystem_Handle);
 8001066:	4b92      	ldr	r3, [pc, #584]	@ (80012b0 <FreeRTOS_CreateTasks+0x250>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2304      	movs	r3, #4
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001074:	498f      	ldr	r1, [pc, #572]	@ (80012b4 <FreeRTOS_CreateTasks+0x254>)
 8001076:	4890      	ldr	r0, [pc, #576]	@ (80012b8 <FreeRTOS_CreateTasks+0x258>)
 8001078:	f00d f850 	bl	800e11c <xTaskCreate>
 800107c:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	2b01      	cmp	r3, #1
 8001082:	d00b      	beq.n	800109c <FreeRTOS_CreateTasks+0x3c>
	__asm volatile
 8001084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001088:	f383 8811 	msr	BASEPRI, r3
 800108c:	f3bf 8f6f 	isb	sy
 8001090:	f3bf 8f4f 	dsb	sy
 8001094:	623b      	str	r3, [r7, #32]
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_ControlSystem_Handle == NULL) {
 800109c:	4b84      	ldr	r3, [pc, #528]	@ (80012b0 <FreeRTOS_CreateTasks+0x250>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d104      	bne.n	80010ae <FreeRTOS_CreateTasks+0x4e>
        vTaskDelete(FlightController_ControlSystem_Handle);
 80010a4:	4b82      	ldr	r3, [pc, #520]	@ (80012b0 <FreeRTOS_CreateTasks+0x250>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00d f969 	bl	800e380 <vTaskDelete>
    }

    /* Task 2: FlightController_Read_FSA8S */
    ret = xTaskCreate(FlightController_Read_FSA8S, "FlightController_Read_FSA8S", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t) TASK_FLIGHTCONTROLLER_READ_FSA8S_PRIORITY), &FlightController_Read_FSA8S_Handle);
 80010ae:	4b83      	ldr	r3, [pc, #524]	@ (80012bc <FreeRTOS_CreateTasks+0x25c>)
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2304      	movs	r3, #4
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2300      	movs	r3, #0
 80010b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010bc:	4980      	ldr	r1, [pc, #512]	@ (80012c0 <FreeRTOS_CreateTasks+0x260>)
 80010be:	4881      	ldr	r0, [pc, #516]	@ (80012c4 <FreeRTOS_CreateTasks+0x264>)
 80010c0:	f00d f82c 	bl	800e11c <xTaskCreate>
 80010c4:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d00b      	beq.n	80010e4 <FreeRTOS_CreateTasks+0x84>
	__asm volatile
 80010cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	61fb      	str	r3, [r7, #28]
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <FreeRTOS_CreateTasks+0x80>

    if (FlightController_Read_FSA8S_Handle == NULL) {
 80010e4:	4b75      	ldr	r3, [pc, #468]	@ (80012bc <FreeRTOS_CreateTasks+0x25c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <FreeRTOS_CreateTasks+0x96>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 80010ec:	4b73      	ldr	r3, [pc, #460]	@ (80012bc <FreeRTOS_CreateTasks+0x25c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00d f945 	bl	800e380 <vTaskDelete>
    }

    /* Task 3: FlightController_Read_GY87 */
    ret = xTaskCreate(FlightController_Read_GY87, "FlightController_Read_GY87", (6 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t) TASK_FLIGHTCONTROLLER_READ_GY87_PRIORITY), &FlightController_Read_GY87_Handle);
 80010f6:	4b74      	ldr	r3, [pc, #464]	@ (80012c8 <FreeRTOS_CreateTasks+0x268>)
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	2304      	movs	r3, #4
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001104:	4971      	ldr	r1, [pc, #452]	@ (80012cc <FreeRTOS_CreateTasks+0x26c>)
 8001106:	4872      	ldr	r0, [pc, #456]	@ (80012d0 <FreeRTOS_CreateTasks+0x270>)
 8001108:	f00d f808 	bl	800e11c <xTaskCreate>
 800110c:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	2b01      	cmp	r3, #1
 8001112:	d00b      	beq.n	800112c <FreeRTOS_CreateTasks+0xcc>
	__asm volatile
 8001114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001118:	f383 8811 	msr	BASEPRI, r3
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	61bb      	str	r3, [r7, #24]
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <FreeRTOS_CreateTasks+0xc8>

    if (FlightController_Read_GY87_Handle == NULL) {
 800112c:	4b66      	ldr	r3, [pc, #408]	@ (80012c8 <FreeRTOS_CreateTasks+0x268>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <FreeRTOS_CreateTasks+0xde>
        vTaskDelete(FlightController_Read_GY87_Handle);
 8001134:	4b64      	ldr	r3, [pc, #400]	@ (80012c8 <FreeRTOS_CreateTasks+0x268>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f00d f921 	bl	800e380 <vTaskDelete>
    }

    /* Task 4: FlightController_Write_ESCs */
    ret = xTaskCreate(FlightController_Write_ESCs, "FlightController_Write_ESCs", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t) TASK_FLIGHTCONTROLLER_WRITE_ESCS_PRIORITY), &FlightController_Write_ESCs_Handle);
 800113e:	4b65      	ldr	r3, [pc, #404]	@ (80012d4 <FreeRTOS_CreateTasks+0x274>)
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2304      	movs	r3, #4
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800114c:	4962      	ldr	r1, [pc, #392]	@ (80012d8 <FreeRTOS_CreateTasks+0x278>)
 800114e:	4863      	ldr	r0, [pc, #396]	@ (80012dc <FreeRTOS_CreateTasks+0x27c>)
 8001150:	f00c ffe4 	bl	800e11c <xTaskCreate>
 8001154:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001158:	2b01      	cmp	r3, #1
 800115a:	d00b      	beq.n	8001174 <FreeRTOS_CreateTasks+0x114>
	__asm volatile
 800115c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001160:	f383 8811 	msr	BASEPRI, r3
 8001164:	f3bf 8f6f 	isb	sy
 8001168:	f3bf 8f4f 	dsb	sy
 800116c:	617b      	str	r3, [r7, #20]
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <FreeRTOS_CreateTasks+0x110>

    if (FlightController_Write_ESCs_Handle == NULL) {
 8001174:	4b57      	ldr	r3, [pc, #348]	@ (80012d4 <FreeRTOS_CreateTasks+0x274>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <FreeRTOS_CreateTasks+0x126>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 800117c:	4b55      	ldr	r3, [pc, #340]	@ (80012d4 <FreeRTOS_CreateTasks+0x274>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00d f8fd 	bl	800e380 <vTaskDelete>
    }

    /* Task 5: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t) TASK_FLIGHTCONTROLLER_BATTERYLEVEL_PRIORITY), &FlightController_BatteryLevel_Handle);
 8001186:	4b56      	ldr	r3, [pc, #344]	@ (80012e0 <FreeRTOS_CreateTasks+0x280>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2303      	movs	r3, #3
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001194:	4953      	ldr	r1, [pc, #332]	@ (80012e4 <FreeRTOS_CreateTasks+0x284>)
 8001196:	4854      	ldr	r0, [pc, #336]	@ (80012e8 <FreeRTOS_CreateTasks+0x288>)
 8001198:	f00c ffc0 	bl	800e11c <xTaskCreate>
 800119c:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d00b      	beq.n	80011bc <FreeRTOS_CreateTasks+0x15c>
	__asm volatile
 80011a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	613b      	str	r3, [r7, #16]
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <FreeRTOS_CreateTasks+0x158>

    if (FlightController_BatteryLevel_Handle == NULL) {
 80011bc:	4b48      	ldr	r3, [pc, #288]	@ (80012e0 <FreeRTOS_CreateTasks+0x280>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <FreeRTOS_CreateTasks+0x16e>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 80011c4:	4b46      	ldr	r3, [pc, #280]	@ (80012e0 <FreeRTOS_CreateTasks+0x280>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00d f8d9 	bl	800e380 <vTaskDelete>
    }

    /* Task 6: FlightController_BatteryAlarm */
    ret = xTaskCreate(FlightController_BatteryAlarm, "FlightController_BatteryAlarm", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t) TASK_FLIGHTCONTROLLER_BATTERYALARM_PRIORITY), &FlightController_BatteryAlarm_Handle);
 80011ce:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <FreeRTOS_CreateTasks+0x28c>)
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2303      	movs	r3, #3
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011dc:	4944      	ldr	r1, [pc, #272]	@ (80012f0 <FreeRTOS_CreateTasks+0x290>)
 80011de:	4845      	ldr	r0, [pc, #276]	@ (80012f4 <FreeRTOS_CreateTasks+0x294>)
 80011e0:	f00c ff9c 	bl	800e11c <xTaskCreate>
 80011e4:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d00b      	beq.n	8001204 <FreeRTOS_CreateTasks+0x1a4>
	__asm volatile
 80011ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011f0:	f383 8811 	msr	BASEPRI, r3
 80011f4:	f3bf 8f6f 	isb	sy
 80011f8:	f3bf 8f4f 	dsb	sy
 80011fc:	60fb      	str	r3, [r7, #12]
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <FreeRTOS_CreateTasks+0x1a0>

    if (FlightController_BatteryAlarm_Handle == NULL) {
 8001204:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <FreeRTOS_CreateTasks+0x28c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d104      	bne.n	8001216 <FreeRTOS_CreateTasks+0x1b6>
        vTaskDelete(FlightController_BatteryAlarm_Handle);
 800120c:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <FreeRTOS_CreateTasks+0x28c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f00d f8b5 	bl	800e380 <vTaskDelete>
    }

    /* Task 7: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t) TASK_FLIGHTCONTROLLER_HEARTBEATLIGHT_PRIORITY), &FlightController_HeartbeatLight_Handle);
 8001216:	4b38      	ldr	r3, [pc, #224]	@ (80012f8 <FreeRTOS_CreateTasks+0x298>)
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	2303      	movs	r3, #3
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2300      	movs	r3, #0
 8001220:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001224:	4935      	ldr	r1, [pc, #212]	@ (80012fc <FreeRTOS_CreateTasks+0x29c>)
 8001226:	4836      	ldr	r0, [pc, #216]	@ (8001300 <FreeRTOS_CreateTasks+0x2a0>)
 8001228:	f00c ff78 	bl	800e11c <xTaskCreate>
 800122c:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	2b01      	cmp	r3, #1
 8001232:	d00b      	beq.n	800124c <FreeRTOS_CreateTasks+0x1ec>
	__asm volatile
 8001234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	60bb      	str	r3, [r7, #8]
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <FreeRTOS_CreateTasks+0x1e8>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <FreeRTOS_CreateTasks+0x298>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d104      	bne.n	800125e <FreeRTOS_CreateTasks+0x1fe>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 8001254:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <FreeRTOS_CreateTasks+0x298>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f00d f891 	bl	800e380 <vTaskDelete>
    }

    /* Task 8: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t) TASK_FLIGHTCONTROLLER_FLIGHTLIGHTS_PRIORITY), &FlightController_FlightLights_Handle);
 800125e:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <FreeRTOS_CreateTasks+0x2a4>)
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	2303      	movs	r3, #3
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2300      	movs	r3, #0
 8001268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800126c:	4926      	ldr	r1, [pc, #152]	@ (8001308 <FreeRTOS_CreateTasks+0x2a8>)
 800126e:	4827      	ldr	r0, [pc, #156]	@ (800130c <FreeRTOS_CreateTasks+0x2ac>)
 8001270:	f00c ff54 	bl	800e11c <xTaskCreate>
 8001274:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	2b01      	cmp	r3, #1
 800127a:	d00b      	beq.n	8001294 <FreeRTOS_CreateTasks+0x234>
	__asm volatile
 800127c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001280:	f383 8811 	msr	BASEPRI, r3
 8001284:	f3bf 8f6f 	isb	sy
 8001288:	f3bf 8f4f 	dsb	sy
 800128c:	607b      	str	r3, [r7, #4]
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <FreeRTOS_CreateTasks+0x230>

    if (FlightController_FlightLights_Handle == NULL) {
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <FreeRTOS_CreateTasks+0x2a4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <FreeRTOS_CreateTasks+0x246>
        vTaskDelete(FlightController_FlightLights_Handle);
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <FreeRTOS_CreateTasks+0x2a4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00d f86d 	bl	800e380 <vTaskDelete>
    }
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000032c 	.word	0x2000032c
 80012b4:	08013adc 	.word	0x08013adc
 80012b8:	08001469 	.word	0x08001469
 80012bc:	20000330 	.word	0x20000330
 80012c0:	08013afc 	.word	0x08013afc
 80012c4:	08001b21 	.word	0x08001b21
 80012c8:	20000334 	.word	0x20000334
 80012cc:	08013b18 	.word	0x08013b18
 80012d0:	08001b81 	.word	0x08001b81
 80012d4:	20000338 	.word	0x20000338
 80012d8:	08013b34 	.word	0x08013b34
 80012dc:	08001cc1 	.word	0x08001cc1
 80012e0:	20000340 	.word	0x20000340
 80012e4:	08013b50 	.word	0x08013b50
 80012e8:	08001dc9 	.word	0x08001dc9
 80012ec:	20000344 	.word	0x20000344
 80012f0:	08013b70 	.word	0x08013b70
 80012f4:	08001ea5 	.word	0x08001ea5
 80012f8:	20000348 	.word	0x20000348
 80012fc:	08013b90 	.word	0x08013b90
 8001300:	08001f51 	.word	0x08001f51
 8001304:	2000034c 	.word	0x2000034c
 8001308:	08013bb0 	.word	0x08013bb0
 800130c:	08001f8d 	.word	0x08001f8d

08001310 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b083      	sub	sp, #12
 8001314:	af02      	add	r7, sp, #8

    /* Timer2: BatteryLevelAlarm */
    Timer2_Handle = xTimerCreate("BatteryLevelAlarm", pdMS_TO_TICKS(200), pdTRUE, (void *)0, Timer2_Callback);
 8001316:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <FreeRTOS_CreateTimers+0xb0>)
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	2201      	movs	r2, #1
 800131e:	21c8      	movs	r1, #200	@ 0xc8
 8001320:	4828      	ldr	r0, [pc, #160]	@ (80013c4 <FreeRTOS_CreateTimers+0xb4>)
 8001322:	f00d fea1 	bl	800f068 <xTimerCreate>
 8001326:	4603      	mov	r3, r0
 8001328:	4a27      	ldr	r2, [pc, #156]	@ (80013c8 <FreeRTOS_CreateTimers+0xb8>)
 800132a:	6013      	str	r3, [r2, #0]
    if (NULL != Timer2_Handle) {
 800132c:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <FreeRTOS_CreateTimers+0xb8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <FreeRTOS_CreateTimers+0x3c>
        /* Start timer */
        xTimerStart(Timer2_Handle, 0);
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <FreeRTOS_CreateTimers+0xb8>)
 8001336:	681c      	ldr	r4, [r3, #0]
 8001338:	f00d fa90 	bl	800e85c <xTaskGetTickCount>
 800133c:	4602      	mov	r2, r0
 800133e:	2300      	movs	r3, #0
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	2101      	movs	r1, #1
 8001346:	4620      	mov	r0, r4
 8001348:	f00d feec 	bl	800f124 <xTimerGenericCommand>
    }

    /* Timer3: FlightLights */
    Timer3_Handle = xTimerCreate("FlightLights", pdMS_TO_TICKS(100), pdTRUE, (void *)0, Timer3_Callback);
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <FreeRTOS_CreateTimers+0xbc>)
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	2201      	movs	r2, #1
 8001354:	2164      	movs	r1, #100	@ 0x64
 8001356:	481e      	ldr	r0, [pc, #120]	@ (80013d0 <FreeRTOS_CreateTimers+0xc0>)
 8001358:	f00d fe86 	bl	800f068 <xTimerCreate>
 800135c:	4603      	mov	r3, r0
 800135e:	4a1d      	ldr	r2, [pc, #116]	@ (80013d4 <FreeRTOS_CreateTimers+0xc4>)
 8001360:	6013      	str	r3, [r2, #0]
    if (NULL != Timer3_Handle) {
 8001362:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <FreeRTOS_CreateTimers+0xc4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <FreeRTOS_CreateTimers+0x72>
        /* Start timer */
        xTimerStart(Timer3_Handle, 0);
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <FreeRTOS_CreateTimers+0xc4>)
 800136c:	681c      	ldr	r4, [r3, #0]
 800136e:	f00d fa75 	bl	800e85c <xTaskGetTickCount>
 8001372:	4602      	mov	r2, r0
 8001374:	2300      	movs	r3, #0
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2300      	movs	r3, #0
 800137a:	2101      	movs	r1, #1
 800137c:	4620      	mov	r0, r4
 800137e:	f00d fed1 	bl	800f124 <xTimerGenericCommand>
    }

    /* Timer4: ControlSystem */
    Timer4_Handle = xTimerCreate("ControlSystem", pdMS_TO_TICKS(100), pdTRUE, (void *)0, Timer4_Callback);
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <FreeRTOS_CreateTimers+0xc8>)
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2300      	movs	r3, #0
 8001388:	2201      	movs	r2, #1
 800138a:	2164      	movs	r1, #100	@ 0x64
 800138c:	4813      	ldr	r0, [pc, #76]	@ (80013dc <FreeRTOS_CreateTimers+0xcc>)
 800138e:	f00d fe6b 	bl	800f068 <xTimerCreate>
 8001392:	4603      	mov	r3, r0
 8001394:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <FreeRTOS_CreateTimers+0xd0>)
 8001396:	6013      	str	r3, [r2, #0]
    if (NULL != Timer4_Handle) {
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <FreeRTOS_CreateTimers+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00b      	beq.n	80013b8 <FreeRTOS_CreateTimers+0xa8>
        /* Start timer */
        xTimerStart(Timer4_Handle, 0);
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <FreeRTOS_CreateTimers+0xd0>)
 80013a2:	681c      	ldr	r4, [r3, #0]
 80013a4:	f00d fa5a 	bl	800e85c <xTaskGetTickCount>
 80013a8:	4602      	mov	r2, r0
 80013aa:	2300      	movs	r3, #0
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2300      	movs	r3, #0
 80013b0:	2101      	movs	r1, #1
 80013b2:	4620      	mov	r0, r4
 80013b4:	f00d feb6 	bl	800f124 <xTimerGenericCommand>
    }
}
 80013b8:	bf00      	nop
 80013ba:	3704      	adds	r7, #4
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}
 80013c0:	0800251d 	.word	0x0800251d
 80013c4:	08013bd0 	.word	0x08013bd0
 80013c8:	20000354 	.word	0x20000354
 80013cc:	08002579 	.word	0x08002579
 80013d0:	08013be4 	.word	0x08013be4
 80013d4:	20000358 	.word	0x20000358
 80013d8:	080025d5 	.word	0x080025d5
 80013dc:	08013bf4 	.word	0x08013bf4
 80013e0:	2000035c 	.word	0x2000035c

080013e4 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80013ec:	2314      	movs	r3, #20
 80013ee:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED on */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013f6:	4813      	ldr	r0, [pc, #76]	@ (8001444 <FlightController_StartUp+0x60>)
 80013f8:	f004 fbb2 	bl	8005b60 <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_running) {
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <FlightController_StartUp+0x64>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d01a      	beq.n	800143a <FlightController_StartUp+0x56>

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001404:	f7ff fe2c 	bl	8001060 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 8001408:	f7ff ff82 	bl	8001310 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 800140c:	480f      	ldr	r0, [pc, #60]	@ (800144c <FlightController_StartUp+0x68>)
 800140e:	f002 f97d 	bl	800370c <FSA8S_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	4a0e      	ldr	r2, [pc, #56]	@ (8001450 <FlightController_StartUp+0x6c>)
 8001416:	6013      	str	r3, [r2, #0]
            hgy87 = GY87_Init(&hi2c1);
 8001418:	480e      	ldr	r0, [pc, #56]	@ (8001454 <FlightController_StartUp+0x70>)
 800141a:	f002 fdbd 	bl	8003f98 <GY87_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <FlightController_StartUp+0x74>)
 8001422:	6013      	str	r3, [r2, #0]
            hesc = ESC_Init(&htim3);
 8001424:	480d      	ldr	r0, [pc, #52]	@ (800145c <FlightController_StartUp+0x78>)
 8001426:	f001 ffef 	bl	8003408 <ESC_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	4a0c      	ldr	r2, [pc, #48]	@ (8001460 <FlightController_StartUp+0x7c>)
 800142e:	6013      	str	r3, [r2, #0]

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <FlightController_StartUp+0x80>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f00c ffa3 	bl	800e380 <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f00d f830 	bl	800e4a0 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001440:	e7d6      	b.n	80013f0 <FlightController_StartUp+0xc>
 8001442:	bf00      	nop
 8001444:	40020800 	.word	0x40020800
 8001448:	20000324 	.word	0x20000324
 800144c:	20000b44 	.word	0x20000b44
 8001450:	20000364 	.word	0x20000364
 8001454:	20000aa8 	.word	0x20000aa8
 8001458:	20000368 	.word	0x20000368
 800145c:	20000afc 	.word	0x20000afc
 8001460:	2000036c 	.word	0x2000036c
 8001464:	20000328 	.word	0x20000328

08001468 <FlightController_ControlSystem>:
    }
}

void FlightController_ControlSystem(void * ptr) {
 8001468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800146c:	b0d8      	sub	sp, #352	@ 0x160
 800146e:	af06      	add	r7, sp, #24
 8001470:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001474:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001478:	6018      	str	r0, [r3, #0]
    uint8_t loggingStr[200];
#endif

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_CONTROL_SYSTEM
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
 800147a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800147e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
#endif

    /* Define variables */
#if 1 == CONTROL_SYSTEM_MODE
    /* References */
    float inputValue_throttle			= 0;
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    /* Desired references */
    float desiredValue_rollRate			= 0;
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    float desiredValue_pitchRate		= 0;
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    float desiredValue_yawRate			= 0;
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    /* Errors */
    float errorValue_rollRate			= 0;
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    float errorValue_pitchRate			= 0;
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    float errorValue_yawRate			= 0;
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    /* Previously stored errors */
    float previousErrorValue_rollRate	= 0;
 80014ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
    float previousErrorValue_pitchRate	= 0;
 80014c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    float previousErrorValue_yawRate	= 0;
 80014d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
    /* Previously stored terms */
    float previousIterm_rollRate		= 0;
 80014e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
    float previousIterm_pitchRate		= 0;
 80014f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
    float previousIterm_yawRate			= 0;
 8001500:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001504:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
    /* PID gains */
    float kP_rollRate					=  0.60;
 800150e:	4b78      	ldr	r3, [pc, #480]	@ (80016f0 <FlightController_ControlSystem+0x288>)
 8001510:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    float kP_pitchRate					=  0.60;
 8001514:	4b76      	ldr	r3, [pc, #472]	@ (80016f0 <FlightController_ControlSystem+0x288>)
 8001516:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    float kP_yawRate					=  2.00;
 800151a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800151e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    float kI_rollRate					=  3.50;
 8001522:	4b74      	ldr	r3, [pc, #464]	@ (80016f4 <FlightController_ControlSystem+0x28c>)
 8001524:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    float kI_pitchRate					=  3.50;
 8001528:	4b72      	ldr	r3, [pc, #456]	@ (80016f4 <FlightController_ControlSystem+0x28c>)
 800152a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    float kI_yawRate					= 12.00;
 800152e:	4b72      	ldr	r3, [pc, #456]	@ (80016f8 <FlightController_ControlSystem+0x290>)
 8001530:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    float kD_rollRate					=  0.03;
 8001534:	4b71      	ldr	r3, [pc, #452]	@ (80016fc <FlightController_ControlSystem+0x294>)
 8001536:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    float kD_pitchRate					=  0.03;
 800153a:	4b70      	ldr	r3, [pc, #448]	@ (80016fc <FlightController_ControlSystem+0x294>)
 800153c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    float kD_yawRate					=  0.00;
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    /* PID outputs */
    float pidOutputValue_rollRate		= 0;
 8001548:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800154c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
    float pidOutputValue_pitchRate		= 0;
 8001556:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800155a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
    float pidOutputValue_yawRate		= 0;
 8001564:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001568:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
    /* Motors inputs */
    float motorSpeed1					= 0;
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    float motorSpeed2					= 0;
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    float motorSpeed3					= 0;
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    float motorSpeed4					= 0;
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    	} else if(1 == CONTROL_SYSTEM_MODE) {

#if 1 == CONTROL_SYSTEM_MODE

        	/* Check if ESCs are enabled (Switch B on radio controller) */
        	if (500 <= FSA8S_channelValues[5]) {
 8001592:	4b5b      	ldr	r3, [pc, #364]	@ (8001700 <FlightController_ControlSystem+0x298>)
 8001594:	895b      	ldrh	r3, [r3, #10]
 8001596:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800159a:	d303      	bcc.n	80015a4 <FlightController_ControlSystem+0x13c>
        		ESC_isEnabled = true;
 800159c:	4b59      	ldr	r3, [pc, #356]	@ (8001704 <FlightController_ControlSystem+0x29c>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	e002      	b.n	80015aa <FlightController_ControlSystem+0x142>
        	} else {
        		ESC_isEnabled = false;
 80015a4:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <FlightController_ControlSystem+0x29c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
        	}

			/* Read inputs from radio controller */
			inputValue_throttle = FSA8S_channelValues[2];
 80015aa:	4b55      	ldr	r3, [pc, #340]	@ (8001700 <FlightController_ControlSystem+0x298>)
 80015ac:	889b      	ldrh	r3, [r3, #4]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b6:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144
			/* Adjust and limit throttle input */
			if(800 < inputValue_throttle) {
 80015ba:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 80015be:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001708 <FlightController_ControlSystem+0x2a0>
 80015c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	dd02      	ble.n	80015d2 <FlightController_ControlSystem+0x16a>
				inputValue_throttle = 800;
 80015cc:	4b4f      	ldr	r3, [pc, #316]	@ (800170c <FlightController_ControlSystem+0x2a4>)
 80015ce:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
			}
			/* Calculate desired rates by mapping radio controller values to rates */
			desiredValue_rollRate = 0.15 * (FSA8S_channelValues[0] - 500);
 80015d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001700 <FlightController_ControlSystem+0x298>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffaa 	bl	8000534 <__aeabi_i2d>
 80015e0:	a341      	add	r3, pc, #260	@ (adr r3, 80016e8 <FlightController_ControlSystem+0x280>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7ff f80f 	bl	8000608 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fb01 	bl	8000bf8 <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
			desiredValue_pitchRate = 0.15 * (FSA8S_channelValues[1] - 500);
 80015fc:	4b40      	ldr	r3, [pc, #256]	@ (8001700 <FlightController_ControlSystem+0x298>)
 80015fe:	885b      	ldrh	r3, [r3, #2]
 8001600:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff95 	bl	8000534 <__aeabi_i2d>
 800160a:	a337      	add	r3, pc, #220	@ (adr r3, 80016e8 <FlightController_ControlSystem+0x280>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7fe fffa 	bl	8000608 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff faec 	bl	8000bf8 <__aeabi_d2f>
 8001620:	4603      	mov	r3, r0
 8001622:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
			desiredValue_yawRate = 0.15 * (FSA8S_channelValues[3] - 500);
 8001626:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <FlightController_ControlSystem+0x298>)
 8001628:	88db      	ldrh	r3, [r3, #6]
 800162a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff80 	bl	8000534 <__aeabi_i2d>
 8001634:	a32c      	add	r3, pc, #176	@ (adr r3, 80016e8 <FlightController_ControlSystem+0x280>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe ffe5 	bl	8000608 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fad7 	bl	8000bf8 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    		/* Turn off motors in case ESCs are disabled */
    		if(false == ESC_isEnabled) {
 8001650:	4b2c      	ldr	r3, [pc, #176]	@ (8001704 <FlightController_ControlSystem+0x29c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	f083 0301 	eor.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01d      	beq.n	800169a <FlightController_ControlSystem+0x232>

    			/* Turn off motors */
    			ESC_speeds[0] = 0;
 800165e:	4b2c      	ldr	r3, [pc, #176]	@ (8001710 <FlightController_ControlSystem+0x2a8>)
 8001660:	2200      	movs	r2, #0
 8001662:	801a      	strh	r2, [r3, #0]
    			ESC_speeds[1] = 0;
 8001664:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <FlightController_ControlSystem+0x2a8>)
 8001666:	2200      	movs	r2, #0
 8001668:	805a      	strh	r2, [r3, #2]
    			ESC_speeds[2] = 0;
 800166a:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <FlightController_ControlSystem+0x2a8>)
 800166c:	2200      	movs	r2, #0
 800166e:	809a      	strh	r2, [r3, #4]
    			ESC_speeds[3] = 0;
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <FlightController_ControlSystem+0x2a8>)
 8001672:	2200      	movs	r2, #0
 8001674:	80da      	strh	r2, [r3, #6]

    			/* Reset previously stored PID errors and terms values */
    			PID_Reset_Mode1(&previousErrorValue_rollRate, &previousErrorValue_pitchRate, &previousErrorValue_yawRate, &previousIterm_rollRate, &previousIterm_pitchRate, &previousIterm_yawRate);
 8001676:	f107 041c 	add.w	r4, r7, #28
 800167a:	f107 0220 	add.w	r2, r7, #32
 800167e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001682:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	4623      	mov	r3, r4
 8001694:	f000 febc 	bl	8002410 <PID_Reset_Mode1>
 8001698:	e23b      	b.n	8001b12 <FlightController_ControlSystem+0x6aa>
    		} else {

				/* Check if timer has expired */
				if (1) {

					if(inputValue_throttle < 50){
 800169a:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 800169e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001714 <FlightController_ControlSystem+0x2ac>
 80016a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	d535      	bpl.n	8001718 <FlightController_ControlSystem+0x2b0>

						/* Turn off motors */
						ESC_speeds[0] = 0;
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <FlightController_ControlSystem+0x2a8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	801a      	strh	r2, [r3, #0]
						ESC_speeds[1] = 0;
 80016b2:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <FlightController_ControlSystem+0x2a8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	805a      	strh	r2, [r3, #2]
						ESC_speeds[2] = 0;
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <FlightController_ControlSystem+0x2a8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	809a      	strh	r2, [r3, #4]
						ESC_speeds[3] = 0;
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <FlightController_ControlSystem+0x2a8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	80da      	strh	r2, [r3, #6]

						/* Reset previously stored PID errors and terms values */
						PID_Reset_Mode1(&previousErrorValue_rollRate, &previousErrorValue_pitchRate, &previousErrorValue_yawRate, &previousIterm_rollRate, &previousIterm_pitchRate, &previousIterm_yawRate);
 80016c4:	f107 041c 	add.w	r4, r7, #28
 80016c8:	f107 0220 	add.w	r2, r7, #32
 80016cc:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80016d0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4623      	mov	r3, r4
 80016e2:	f000 fe95 	bl	8002410 <PID_Reset_Mode1>
 80016e6:	e19c      	b.n	8001a22 <FlightController_ControlSystem+0x5ba>
 80016e8:	33333333 	.word	0x33333333
 80016ec:	3fc33333 	.word	0x3fc33333
 80016f0:	3f19999a 	.word	0x3f19999a
 80016f4:	40600000 	.word	0x40600000
 80016f8:	41400000 	.word	0x41400000
 80016fc:	3cf5c28f 	.word	0x3cf5c28f
 8001700:	20000370 	.word	0x20000370
 8001704:	2000039c 	.word	0x2000039c
 8001708:	44480000 	.word	0x44480000
 800170c:	44480000 	.word	0x44480000
 8001710:	200003a0 	.word	0x200003a0
 8001714:	42480000 	.word	0x42480000

					} else {

						/* Calculate rates errors */
						errorValue_rollRate = desiredValue_rollRate - GY87_gyroscopeValues->rotationRateRoll;
 8001718:	4be5      	ldr	r3, [pc, #916]	@ (8001ab0 <FlightController_ControlSystem+0x648>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001720:	ed97 7a48 	vldr	s14, [r7, #288]	@ 0x120
 8001724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001728:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
						errorValue_pitchRate = desiredValue_pitchRate - GY87_gyroscopeValues->rotationRatePitch;
 800172c:	4be0      	ldr	r3, [pc, #896]	@ (8001ab0 <FlightController_ControlSystem+0x648>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	edd3 7a03 	vldr	s15, [r3, #12]
 8001734:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
						errorValue_yawRate = desiredValue_yawRate - GY87_gyroscopeValues->rotationRateYaw;
 8001740:	4bdb      	ldr	r3, [pc, #876]	@ (8001ab0 <FlightController_ControlSystem+0x648>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	edd3 7a04 	vldr	s15, [r3, #16]
 8001748:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 800174c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001750:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138

						/* Calculate PID output for roll */
						PID_Equation_Mode1(&pidOutputValue_rollRate, &previousErrorValue_rollRate, &previousIterm_rollRate, errorValue_rollRate, kP_rollRate, kI_rollRate, kD_rollRate, previousErrorValue_rollRate, previousIterm_rollRate);
 8001754:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001758:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001764:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	f107 021c 	add.w	r2, r7, #28
 8001770:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	eef0 2a47 	vmov.f32	s5, s14
 800177c:	eeb0 2a67 	vmov.f32	s4, s15
 8001780:	edd7 1a3f 	vldr	s3, [r7, #252]	@ 0xfc
 8001784:	ed97 1a42 	vldr	s2, [r7, #264]	@ 0x108
 8001788:	edd7 0a45 	vldr	s1, [r7, #276]	@ 0x114
 800178c:	ed97 0a50 	vldr	s0, [r7, #320]	@ 0x140
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fd7d 	bl	8002290 <PID_Equation_Mode1>

						/* Calculate PID output for pitch */
						PID_Equation_Mode1(&pidOutputValue_pitchRate, &previousErrorValue_pitchRate, &previousIterm_pitchRate, errorValue_pitchRate, kP_pitchRate, kI_pitchRate, kD_pitchRate, previousErrorValue_pitchRate, previousIterm_pitchRate);
 8001796:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800179a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017aa:	ed93 7a00 	vldr	s14, [r3]
 80017ae:	f107 0218 	add.w	r2, r7, #24
 80017b2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	eef0 2a47 	vmov.f32	s5, s14
 80017be:	eeb0 2a67 	vmov.f32	s4, s15
 80017c2:	edd7 1a3e 	vldr	s3, [r7, #248]	@ 0xf8
 80017c6:	ed97 1a41 	vldr	s2, [r7, #260]	@ 0x104
 80017ca:	edd7 0a44 	vldr	s1, [r7, #272]	@ 0x110
 80017ce:	ed97 0a4f 	vldr	s0, [r7, #316]	@ 0x13c
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fd5c 	bl	8002290 <PID_Equation_Mode1>

						/* Calculate PID output for yaw */
						PID_Equation_Mode1(&pidOutputValue_yawRate, &previousErrorValue_yawRate, &previousIterm_yawRate, errorValue_yawRate, kP_yawRate, kI_yawRate, kD_yawRate, previousErrorValue_yawRate, previousIterm_yawRate);
 80017d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	f107 0214 	add.w	r2, r7, #20
 80017f4:	f107 0120 	add.w	r1, r7, #32
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	eef0 2a47 	vmov.f32	s5, s14
 8001800:	eeb0 2a67 	vmov.f32	s4, s15
 8001804:	edd7 1a3d 	vldr	s3, [r7, #244]	@ 0xf4
 8001808:	ed97 1a40 	vldr	s2, [r7, #256]	@ 0x100
 800180c:	edd7 0a43 	vldr	s1, [r7, #268]	@ 0x10c
 8001810:	ed97 0a4e 	vldr	s0, [r7, #312]	@ 0x138
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fd3b 	bl	8002290 <PID_Equation_Mode1>

						/* Calculate motors speed */
						motorSpeed1 = 0.1 * (inputValue_throttle - pidOutputValue_rollRate - pidOutputValue_pitchRate - pidOutputValue_yawRate);
 800181a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800181e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ed97 7a51 	vldr	s14, [r7, #324]	@ 0x144
 800182a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800182e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001832:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800183e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001842:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184e:	ee17 0a90 	vmov	r0, s15
 8001852:	f7fe fe81 	bl	8000558 <__aeabi_f2d>
 8001856:	a394      	add	r3, pc, #592	@ (adr r3, 8001aa8 <FlightController_ControlSystem+0x640>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fed4 	bl	8000608 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f9c6 	bl	8000bf8 <__aeabi_d2f>
 800186c:	4603      	mov	r3, r0
 800186e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
						motorSpeed2 = 0.1 * (inputValue_throttle - pidOutputValue_rollRate + pidOutputValue_pitchRate + pidOutputValue_yawRate);
 8001872:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001876:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ed97 7a51 	vldr	s14, [r7, #324]	@ 0x144
 8001882:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001886:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800188a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001896:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800189a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a6:	ee17 0a90 	vmov	r0, s15
 80018aa:	f7fe fe55 	bl	8000558 <__aeabi_f2d>
 80018ae:	a37e      	add	r3, pc, #504	@ (adr r3, 8001aa8 <FlightController_ControlSystem+0x640>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fea8 	bl	8000608 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f99a 	bl	8000bf8 <__aeabi_d2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
						motorSpeed3 = 0.1 * (inputValue_throttle + pidOutputValue_rollRate + pidOutputValue_pitchRate - pidOutputValue_yawRate);
 80018ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018d2:	ed93 7a00 	vldr	s14, [r3]
 80018d6:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 80018da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018f2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fe:	ee17 0a90 	vmov	r0, s15
 8001902:	f7fe fe29 	bl	8000558 <__aeabi_f2d>
 8001906:	a368      	add	r3, pc, #416	@ (adr r3, 8001aa8 <FlightController_ControlSystem+0x640>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	f7fe fe7c 	bl	8000608 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f96e 	bl	8000bf8 <__aeabi_d2f>
 800191c:	4603      	mov	r3, r0
 800191e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
						motorSpeed4 = 0.1 * (inputValue_throttle + pidOutputValue_rollRate - pidOutputValue_pitchRate + pidOutputValue_yawRate);
 8001922:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001926:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8001932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001936:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800193a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001946:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800194a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001956:	ee17 0a90 	vmov	r0, s15
 800195a:	f7fe fdfd 	bl	8000558 <__aeabi_f2d>
 800195e:	a352      	add	r3, pc, #328	@ (adr r3, 8001aa8 <FlightController_ControlSystem+0x640>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe fe50 	bl	8000608 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f942 	bl	8000bf8 <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

						/* Adjust and limit motors speed */
						if(ESC_MAXIMUM_SPEED < motorSpeed1) motorSpeed1 = ESC_MAXIMUM_SPEED;
 800197a:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 800197e:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001ab4 <FlightController_ControlSystem+0x64c>
 8001982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	dd02      	ble.n	8001992 <FlightController_ControlSystem+0x52a>
 800198c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <FlightController_ControlSystem+0x650>)
 800198e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
						if(ESC_MAXIMUM_SPEED < motorSpeed2) motorSpeed2 = ESC_MAXIMUM_SPEED;
 8001992:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8001996:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ab4 <FlightController_ControlSystem+0x64c>
 800199a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	dd02      	ble.n	80019aa <FlightController_ControlSystem+0x542>
 80019a4:	4b44      	ldr	r3, [pc, #272]	@ (8001ab8 <FlightController_ControlSystem+0x650>)
 80019a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
						if(ESC_MAXIMUM_SPEED < motorSpeed3) motorSpeed3 = ESC_MAXIMUM_SPEED;
 80019aa:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 80019ae:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001ab4 <FlightController_ControlSystem+0x64c>
 80019b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	dd02      	ble.n	80019c2 <FlightController_ControlSystem+0x55a>
 80019bc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab8 <FlightController_ControlSystem+0x650>)
 80019be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
						if(ESC_MAXIMUM_SPEED < motorSpeed4) motorSpeed4 = ESC_MAXIMUM_SPEED;
 80019c2:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 80019c6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001ab4 <FlightController_ControlSystem+0x64c>
 80019ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	dd02      	ble.n	80019da <FlightController_ControlSystem+0x572>
 80019d4:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <FlightController_ControlSystem+0x650>)
 80019d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

						/* Set motors speed */
						ESC_speeds[0] = (uint16_t) motorSpeed1;
 80019da:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 80019de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e2:	ee17 3a90 	vmov	r3, s15
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b34      	ldr	r3, [pc, #208]	@ (8001abc <FlightController_ControlSystem+0x654>)
 80019ea:	801a      	strh	r2, [r3, #0]
						ESC_speeds[1] = (uint16_t) motorSpeed2;
 80019ec:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 80019f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f4:	ee17 3a90 	vmov	r3, s15
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b30      	ldr	r3, [pc, #192]	@ (8001abc <FlightController_ControlSystem+0x654>)
 80019fc:	805a      	strh	r2, [r3, #2]
						ESC_speeds[2] = (uint16_t) motorSpeed3;
 80019fe:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8001a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a06:	ee17 3a90 	vmov	r3, s15
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <FlightController_ControlSystem+0x654>)
 8001a0e:	809a      	strh	r2, [r3, #4]
						ESC_speeds[3] = (uint16_t) motorSpeed4;
 8001a10:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8001a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a18:	ee17 3a90 	vmov	r3, s15
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <FlightController_ControlSystem+0x654>)
 8001a20:	80da      	strh	r2, [r3, #6]

					}

	    			/* Reset Timer4 flag */
	    			Timer4_flag = false;
 8001a22:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <FlightController_ControlSystem+0x658>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]

				}

				/* Log control system values */
#ifdef MAIN_APP_USE_LOGGING_CONTROL_SYSTEM
				sprintf((char *)loggingStr, (const char *)"CS Mode1 | Motors are enabled? %d\r\n", ESC_isEnabled);
 8001a28:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <FlightController_ControlSystem+0x65c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a32:	4925      	ldr	r1, [pc, #148]	@ (8001ac8 <FlightController_ControlSystem+0x660>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00f fc25 	bl	8011284 <siprintf>
				LOG(loggingStr, LOG_INFORMATION);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 ff13 	bl	800486c <LOG>
				sprintf((char *)loggingStr, (const char *)"CS Mode1 | desVal_rollRate: %.2f [°/s], desVal_pitchRate: %.2f [°/s], desVal_yawRate: %.2f [°/s], desVal_throttle: %.2f\r\n", desiredValue_rollRate, desiredValue_pitchRate, desiredValue_yawRate, inputValue_throttle);
 8001a46:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8001a4a:	f7fe fd85 	bl	8000558 <__aeabi_f2d>
 8001a4e:	4682      	mov	sl, r0
 8001a50:	468b      	mov	fp, r1
 8001a52:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001a56:	f7fe fd7f 	bl	8000558 <__aeabi_f2d>
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	460d      	mov	r5, r1
 8001a5e:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8001a62:	f7fe fd79 	bl	8000558 <__aeabi_f2d>
 8001a66:	4680      	mov	r8, r0
 8001a68:	4689      	mov	r9, r1
 8001a6a:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8001a6e:	f7fe fd73 	bl	8000558 <__aeabi_f2d>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a7e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001a82:	e9cd 4500 	strd	r4, r5, [sp]
 8001a86:	4652      	mov	r2, sl
 8001a88:	465b      	mov	r3, fp
 8001a8a:	4910      	ldr	r1, [pc, #64]	@ (8001acc <FlightController_ControlSystem+0x664>)
 8001a8c:	f00f fbfa 	bl	8011284 <siprintf>
				LOG(loggingStr, LOG_INFORMATION);
 8001a90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 fee8 	bl	800486c <LOG>
				sprintf((char *)loggingStr, (const char *)"CS Mode1 | errorVal_rollRate: %.2f [°/s], errorVal_pitchRate: %.2f [°/s], errorVal_yawRate: %.2f [°/s]\r\n\n", errorValue_rollRate, errorValue_pitchRate, errorValue_yawRate);
 8001a9c:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 8001aa0:	e016      	b.n	8001ad0 <FlightController_ControlSystem+0x668>
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	9999999a 	.word	0x9999999a
 8001aac:	3fb99999 	.word	0x3fb99999
 8001ab0:	20000388 	.word	0x20000388
 8001ab4:	42a00000 	.word	0x42a00000
 8001ab8:	42a00000 	.word	0x42a00000
 8001abc:	200003a0 	.word	0x200003a0
 8001ac0:	20000363 	.word	0x20000363
 8001ac4:	2000039c 	.word	0x2000039c
 8001ac8:	08013c04 	.word	0x08013c04
 8001acc:	08013c28 	.word	0x08013c28
 8001ad0:	f7fe fd42 	bl	8000558 <__aeabi_f2d>
 8001ad4:	4680      	mov	r8, r0
 8001ad6:	4689      	mov	r9, r1
 8001ad8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001adc:	f7fe fd3c 	bl	8000558 <__aeabi_f2d>
 8001ae0:	4604      	mov	r4, r0
 8001ae2:	460d      	mov	r5, r1
 8001ae4:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001ae8:	f7fe fd36 	bl	8000558 <__aeabi_f2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001af4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001af8:	e9cd 4500 	strd	r4, r5, [sp]
 8001afc:	4642      	mov	r2, r8
 8001afe:	464b      	mov	r3, r9
 8001b00:	4906      	ldr	r1, [pc, #24]	@ (8001b1c <FlightController_ControlSystem+0x6b4>)
 8001b02:	f00f fbbf 	bl	8011284 <siprintf>
				LOG(loggingStr, LOG_INFORMATION);
 8001b06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fead 	bl	800486c <LOG>
    	} else if(3 == CONTROL_SYSTEM_MODE) {

    	}

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001b12:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8001b16:	f00c fcc3 	bl	800e4a0 <vTaskDelay>
    	if(0 == CONTROL_SYSTEM_MODE) {
 8001b1a:	e53a      	b.n	8001592 <FlightController_ControlSystem+0x12a>
 8001b1c:	08013ca8 	.word	0x08013ca8

08001b20 <FlightController_Read_FSA8S>:
    }
}

void FlightController_Read_FSA8S(void * ptr) {
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b089      	sub	sp, #36	@ 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

    FSA8S_CHANNEL_t channels[FSA8S_CHANNELS] = {CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7, CHANNEL_8, CHANNEL_9, CHANNEL_10};
 8001b28:	4a12      	ldr	r2, [pc, #72]	@ (8001b74 <FlightController_Read_FSA8S+0x54>)
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b30:	c303      	stmia	r3!, {r0, r1}
 8001b32:	801a      	strh	r2, [r3, #0]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FSA8S
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001b34:	2314      	movs	r3, #20
 8001b36:	61bb      	str	r3, [r7, #24]
#endif

    while (1) {

        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	77fb      	strb	r3, [r7, #31]
 8001b3c:	e013      	b.n	8001b66 <FlightController_Read_FSA8S+0x46>
            /* Read channels */
            FSA8S_channelValues[i] = FSA8S_ReadChannel(rc_controller, channels[i]);
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <FlightController_Read_FSA8S+0x58>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	7ffb      	ldrb	r3, [r7, #31]
 8001b44:	3320      	adds	r3, #32
 8001b46:	443b      	add	r3, r7
 8001b48:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001b4c:	7ffc      	ldrb	r4, [r7, #31]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f001 fe35 	bl	80037c0 <FSA8S_ReadChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <FlightController_Read_FSA8S+0x5c>)
 8001b5c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001b60:	7ffb      	ldrb	r3, [r7, #31]
 8001b62:	3301      	adds	r3, #1
 8001b64:	77fb      	strb	r3, [r7, #31]
 8001b66:	7ffb      	ldrb	r3, [r7, #31]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d9e8      	bls.n	8001b3e <FlightController_Read_FSA8S+0x1e>
            LOG(loggingStr, LOG_INFORMATION);
#endif
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001b6c:	69b8      	ldr	r0, [r7, #24]
 8001b6e:	f00c fc97 	bl	800e4a0 <vTaskDelay>
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001b72:	e7e1      	b.n	8001b38 <FlightController_Read_FSA8S+0x18>
 8001b74:	08013d18 	.word	0x08013d18
 8001b78:	20000364 	.word	0x20000364
 8001b7c:	20000370 	.word	0x20000370

08001b80 <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void * ptr) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
#if defined MAIN_APP_USE_LOGGING_GY87_GYROSCOPE || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER_ANGLES || defined MAIN_APP_USE_LOGGING_GY87_TEMPERATURE ||                                         \
    defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER_HEADING || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_TEMPERATURE || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_PRESSURE ||                       \
    defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_ALTITUDE
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001b88:	2314      	movs	r3, #20
 8001b8a:	60bb      	str	r3, [r7, #8]
#endif

    bool_t gyroscopeCalibrationIsDone = false;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
    bool_t accelerometerCalibrationIsDone = false;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73bb      	strb	r3, [r7, #14]

    /* Allocate dynamic memory for the MPU6050 gyroscope values */
    GY87_gyroscopeValues = pvPortMalloc(sizeof(GY87_gyroscopeValues));
 8001b94:	2004      	movs	r0, #4
 8001b96:	f00e f869 	bl	800fc6c <pvPortMalloc>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a41      	ldr	r2, [pc, #260]	@ (8001ca4 <FlightController_Read_GY87+0x124>)
 8001b9e:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_gyroscopeValues) {
 8001ba0:	4b40      	ldr	r3, [pc, #256]	@ (8001ca4 <FlightController_Read_GY87+0x124>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d104      	bne.n	8001bb2 <FlightController_Read_GY87+0x32>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_gyroscopeValues);
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <FlightController_Read_GY87+0x124>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00e f86f 	bl	800fc90 <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 accelerometer values */
    GY87_accelerometerValues = pvPortMalloc(sizeof(GY87_accelerometerValues));
 8001bb2:	2004      	movs	r0, #4
 8001bb4:	f00e f85a 	bl	800fc6c <pvPortMalloc>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca8 <FlightController_Read_GY87+0x128>)
 8001bbc:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_accelerometerValues) {
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca8 <FlightController_Read_GY87+0x128>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d104      	bne.n	8001bd0 <FlightController_Read_GY87+0x50>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_accelerometerValues);
 8001bc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <FlightController_Read_GY87+0x128>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f00e f860 	bl	800fc90 <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 magnetometer values */
    GY87_magnetometerValues = pvPortMalloc(sizeof(GY87_magnetometerValues));
 8001bd0:	2004      	movs	r0, #4
 8001bd2:	f00e f84b 	bl	800fc6c <pvPortMalloc>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a34      	ldr	r2, [pc, #208]	@ (8001cac <FlightController_Read_GY87+0x12c>)
 8001bda:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_magnetometerValues) {
 8001bdc:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <FlightController_Read_GY87+0x12c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d104      	bne.n	8001bee <FlightController_Read_GY87+0x6e>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_magnetometerValues);
 8001be4:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <FlightController_Read_GY87+0x12c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f00e f851 	bl	800fc90 <vPortFree>
    }

    while (1) {

        /* Check if gyroscope and accelerometer calibrations were done */
        if (gyroscopeCalibrationIsDone && accelerometerCalibrationIsDone) {
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d038      	beq.n	8001c66 <FlightController_Read_GY87+0xe6>
 8001bf4:	7bbb      	ldrb	r3, [r7, #14]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d035      	beq.n	8001c66 <FlightController_Read_GY87+0xe6>

            /* Read GY87 gyroscope values */
            GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <FlightController_Read_GY87+0x130>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a29      	ldr	r2, [pc, #164]	@ (8001ca4 <FlightController_Read_GY87+0x124>)
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 fa61 	bl	80040cc <GY87_ReadGyroscope>
            sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope ROLL: %.2f [°/s] PITCH: %.2f [°/s] YAW: %.2f [°/s]\r\n", GY87_gyroscopeValues->rotationRateRoll, GY87_gyroscopeValues->rotationRatePitch, GY87_gyroscopeValues->rotationRateYaw);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 accelerometer values */
            GY87_ReadAccelerometer(hgy87, GY87_accelerometerValues);
 8001c0a:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <FlightController_Read_GY87+0x130>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a26      	ldr	r2, [pc, #152]	@ (8001ca8 <FlightController_Read_GY87+0x128>)
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f002 fb6f 	bl	80042f8 <GY87_ReadAccelerometer>
            sprintf((char *)loggingStr, (const char *)"GY87 Accelerometer ROLL: %.2f [°] PITCH: %.2f [°]\r\n", GY87_accelerometerValues->angleRoll, GY87_accelerometerValues->anglePitch);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 temperature value */
            GY87_temperature = GY87_ReadTemperatureSensor(hgy87);
 8001c1a:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <FlightController_Read_GY87+0x130>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 fc9e 	bl	8004560 <GY87_ReadTemperatureSensor>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <FlightController_Read_GY87+0x134>)
 8001c2a:	801a      	strh	r2, [r3, #0]
            sprintf((char *)loggingStr, (const char *)"GY87 Temperature: %d [°C]\r\n", GY87_temperature);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 magnetometer values */
            GY87_ReadMagnetometer(hgy87, GY87_magnetometerValues);
 8001c2c:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <FlightController_Read_GY87+0x130>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1e      	ldr	r2, [pc, #120]	@ (8001cac <FlightController_Read_GY87+0x12c>)
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 fcc0 	bl	80045bc <GY87_ReadMagnetometer>
            sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer X: %.3f [G] Y: %.3f [G] Z: %.3f [G]\r\n", GY87_magnetometerValues->magneticFieldX, GY87_magnetometerValues->magneticFieldY, GY87_magnetometerValues->magneticFieldZ);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 magnetometer heading */
            GY87_magnetometerHeadingValue = GY87_ReadMagnetometerHeading(hgy87);
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <FlightController_Read_GY87+0x130>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 fd4d 	bl	80046e0 <GY87_ReadMagnetometerHeading>
 8001c46:	eef0 7a40 	vmov.f32	s15, s0
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <FlightController_Read_GY87+0x138>)
 8001c4c:	edc3 7a00 	vstr	s15, [r3]
            sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer Heading: %.2f [°]\r\n", GY87_magnetometerHeadingValue);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 barometer temperature value */
            GY87_barometerTemperatureValue = GY87_ReadBarometerTemperature(hgy87);
 8001c50:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <FlightController_Read_GY87+0x130>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fdb5 	bl	80047c4 <GY87_ReadBarometerTemperature>
 8001c5a:	eef0 7a40 	vmov.f32	s15, s0
 8001c5e:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <FlightController_Read_GY87+0x13c>)
 8001c60:	edc3 7a00 	vstr	s15, [r3]
 8001c64:	e019      	b.n	8001c9a <FlightController_Read_GY87+0x11a>
#endif

        } else {

            /* Calibrate gyroscope measurements */
            if (false == gyroscopeCalibrationIsDone) {
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <FlightController_Read_GY87+0x100>

                gyroscopeCalibrationIsDone = GY87_CalibrateGyroscope(hgy87);
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <FlightController_Read_GY87+0x130>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 f9c6 	bl	8004008 <GY87_CalibrateGyroscope>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73fb      	strb	r3, [r7, #15]
            }

            /* Calibrate accelerometer measurements */
            if (false == accelerometerCalibrationIsDone) {
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	f083 0301 	eor.w	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <FlightController_Read_GY87+0x11a>

                accelerometerCalibrationIsDone = GY87_CalibrateAccelerometer(hgy87);
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <FlightController_Read_GY87+0x130>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 facd 	bl	8004230 <GY87_CalibrateAccelerometer>
 8001c96:	4603      	mov	r3, r0
 8001c98:	73bb      	strb	r3, [r7, #14]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	f00c fc00 	bl	800e4a0 <vTaskDelay>
        if (gyroscopeCalibrationIsDone && accelerometerCalibrationIsDone) {
 8001ca0:	e7a5      	b.n	8001bee <FlightController_Read_GY87+0x6e>
 8001ca2:	bf00      	nop
 8001ca4:	20000388 	.word	0x20000388
 8001ca8:	2000038c 	.word	0x2000038c
 8001cac:	20000390 	.word	0x20000390
 8001cb0:	20000368 	.word	0x20000368
 8001cb4:	20000384 	.word	0x20000384
 8001cb8:	20000394 	.word	0x20000394
 8001cbc:	20000398 	.word	0x20000398

08001cc0 <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void * ptr) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_ESC
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001cc8:	2314      	movs	r3, #20
 8001cca:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 8001ccc:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <FlightController_Write_ESCs+0xa0>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b23      	ldr	r3, [pc, #140]	@ (8001d60 <FlightController_Write_ESCs+0xa0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	791b      	ldrb	r3, [r3, #4]
 8001cd6:	4923      	ldr	r1, [pc, #140]	@ (8001d64 <FlightController_Write_ESCs+0xa4>)
 8001cd8:	8809      	ldrh	r1, [r1, #0]
 8001cda:	ee07 1a90 	vmov	s15, r1
 8001cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f001 fbd1 	bl	8003490 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[1]);
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <FlightController_Write_ESCs+0xa0>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <FlightController_Write_ESCs+0xa0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	795b      	ldrb	r3, [r3, #5]
 8001cf8:	491a      	ldr	r1, [pc, #104]	@ (8001d64 <FlightController_Write_ESCs+0xa4>)
 8001cfa:	8849      	ldrh	r1, [r1, #2]
 8001cfc:	ee07 1a90 	vmov	s15, r1
 8001d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f001 fbc0 	bl	8003490 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[2]);
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <FlightController_Write_ESCs+0xa0>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <FlightController_Write_ESCs+0xa0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	799b      	ldrb	r3, [r3, #6]
 8001d1a:	4912      	ldr	r1, [pc, #72]	@ (8001d64 <FlightController_Write_ESCs+0xa4>)
 8001d1c:	8889      	ldrh	r1, [r1, #4]
 8001d1e:	ee07 1a90 	vmov	s15, r1
 8001d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d26:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	f001 fbaf 	bl	8003490 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[3]);
 8001d32:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <FlightController_Write_ESCs+0xa0>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <FlightController_Write_ESCs+0xa0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	79db      	ldrb	r3, [r3, #7]
 8001d3c:	4909      	ldr	r1, [pc, #36]	@ (8001d64 <FlightController_Write_ESCs+0xa4>)
 8001d3e:	88c9      	ldrh	r1, [r1, #6]
 8001d40:	ee07 1a90 	vmov	s15, r1
 8001d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d48:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f001 fb9e 	bl	8003490 <ESC_SetSpeed>
        sprintf((char *)loggingStr, (const char *)"PWM Channel 4 Speed: %d\r\n\n", ESC_speeds[3]);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f00c fba3 	bl	800e4a0 <vTaskDelay>
        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 8001d5a:	bf00      	nop
 8001d5c:	e7b6      	b.n	8001ccc <FlightController_Write_ESCs+0xc>
 8001d5e:	bf00      	nop
 8001d60:	2000036c 	.word	0x2000036c
 8001d64:	200003a0 	.word	0x200003a0

08001d68 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001d70:	2314      	movs	r3, #20
 8001d72:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001d74:	2120      	movs	r1, #32
 8001d76:	4810      	ldr	r0, [pc, #64]	@ (8001db8 <FlightController_OnOffButton+0x50>)
 8001d78:	f003 feda 	bl	8005b30 <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d115      	bne.n	8001dae <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <FlightController_OnOffButton+0x54>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f083 0301 	eor.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00e      	beq.n	8001dae <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <FlightController_OnOffButton+0x58>)
 8001d92:	681c      	ldr	r4, [r3, #0]
 8001d94:	f00c fd62 	bl	800e85c <xTaskGetTickCount>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2101      	movs	r1, #1
 8001da2:	4620      	mov	r0, r4
 8001da4:	f00d f9be 	bl	800f124 <xTimerGenericCommand>
                Timer1_running = true;
 8001da8:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <FlightController_OnOffButton+0x54>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f00c fb76 	bl	800e4a0 <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001db4:	e7de      	b.n	8001d74 <FlightController_OnOffButton+0xc>
 8001db6:	bf00      	nop
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	20000360 	.word	0x20000360
 8001dc0:	20000350 	.word	0x20000350
 8001dc4:	00000000 	.word	0x00000000

08001dc8 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
#ifdef MAIN_APP_USE_LOGGING_FLIGHT_CONTROLLER_BATTERY_LEVEL
    uint8_t loggingStr[30];
#endif

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(1000);
 8001dd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd4:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 8001dd6:	4830      	ldr	r0, [pc, #192]	@ (8001e98 <FlightController_BatteryLevel+0xd0>)
 8001dd8:	f002 feaa 	bl	8004b30 <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001ddc:	2101      	movs	r1, #1
 8001dde:	482e      	ldr	r0, [pc, #184]	@ (8001e98 <FlightController_BatteryLevel+0xd0>)
 8001de0:	f002 ff5a 	bl	8004c98 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 8001de4:	482c      	ldr	r0, [pc, #176]	@ (8001e98 <FlightController_BatteryLevel+0xd0>)
 8001de6:	f002 ffe2 	bl	8004dae <HAL_ADC_GetValue>
 8001dea:	4603      	mov	r3, r0
 8001dec:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevelValue = (adcValue * 3.3) / 4096;
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb9f 	bl	8000534 <__aeabi_i2d>
 8001df6:	a322      	add	r3, pc, #136	@ (adr r3, 8001e80 <FlightController_BatteryLevel+0xb8>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fc04 	bl	8000608 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <FlightController_BatteryLevel+0xd4>)
 8001e0e:	f7fe fd25 	bl	800085c <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7fe feed 	bl	8000bf8 <__aeabi_d2f>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea0 <FlightController_BatteryLevel+0xd8>)
 8001e22:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevelValue = FlightController_batteryLevelValue * 1.046046;
 8001e24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <FlightController_BatteryLevel+0xd8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb95 	bl	8000558 <__aeabi_f2d>
 8001e2e:	a316      	add	r3, pc, #88	@ (adr r3, 8001e88 <FlightController_BatteryLevel+0xc0>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fbe8 	bl	8000608 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe feda 	bl	8000bf8 <__aeabi_d2f>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a16      	ldr	r2, [pc, #88]	@ (8001ea0 <FlightController_BatteryLevel+0xd8>)
 8001e48:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevelValue = FlightController_batteryLevelValue * 3.363636;
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <FlightController_BatteryLevel+0xd8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb82 	bl	8000558 <__aeabi_f2d>
 8001e54:	a30e      	add	r3, pc, #56	@ (adr r3, 8001e90 <FlightController_BatteryLevel+0xc8>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbd5 	bl	8000608 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f7fe fec7 	bl	8000bf8 <__aeabi_d2f>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea0 <FlightController_BatteryLevel+0xd8>)
 8001e6e:	6013      	str	r3, [r2, #0]
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f [V]\r\n\n", FlightController_batteryLevelValue);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f00c fb15 	bl	800e4a0 <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 8001e76:	bf00      	nop
 8001e78:	e7ad      	b.n	8001dd6 <FlightController_BatteryLevel+0xe>
 8001e7a:	bf00      	nop
 8001e7c:	f3af 8000 	nop.w
 8001e80:	66666666 	.word	0x66666666
 8001e84:	400a6666 	.word	0x400a6666
 8001e88:	bb01c92e 	.word	0xbb01c92e
 8001e8c:	3ff0bc9a 	.word	0x3ff0bc9a
 8001e90:	fdbd2fa1 	.word	0xfdbd2fa1
 8001e94:	400ae8b9 	.word	0x400ae8b9
 8001e98:	20000a60 	.word	0x20000a60
 8001e9c:	40b00000 	.word	0x40b00000
 8001ea0:	20000008 	.word	0x20000008

08001ea4 <FlightController_BatteryAlarm>:
    }
}

void FlightController_BatteryAlarm(void * ptr) {
 8001ea4:	b5b0      	push	{r4, r5, r7, lr}
 8001ea6:	b08e      	sub	sp, #56	@ 0x38
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

    uint8_t alarmSequence[] = {1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001eac:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <FlightController_BatteryAlarm+0x9c>)
 8001eae:	f107 0408 	add.w	r4, r7, #8
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ec0:	e884 0003 	stmia.w	r4, {r0, r1}
    uint8_t alarmSequenceSize = sizeof(alarmSequence);
 8001ec4:	2328      	movs	r3, #40	@ 0x28
 8001ec6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t alarmSequenceCursor = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001ed0:	2314      	movs	r3, #20
 8001ed2:	633b      	str	r3, [r7, #48]	@ 0x30

    while (1) {

        if (FlightController_batteryLevelValue < BATTERY_ALARM_THRESHOLD) {
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <FlightController_BatteryAlarm+0xa0>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 8001ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d521      	bpl.n	8001f2c <FlightController_BatteryAlarm+0x88>

            if (Timer2_flag) {
 8001ee8:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <FlightController_BatteryAlarm+0xa4>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d023      	beq.n	8001f38 <FlightController_BatteryAlarm+0x94>
                /* If timer expired */

                /* Parse alarm sequence */
                alarmSequenceCursor++;
 8001ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                if (alarmSequenceSize <= alarmSequenceCursor) {
 8001efa:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001efe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d802      	bhi.n	8001f0c <FlightController_BatteryAlarm+0x68>
                    alarmSequenceCursor = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                }

                /* Write to buzzer */
                HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, alarmSequence[alarmSequenceCursor]);
 8001f0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f10:	3338      	adds	r3, #56	@ 0x38
 8001f12:	443b      	add	r3, r7
 8001f14:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f1e:	480b      	ldr	r0, [pc, #44]	@ (8001f4c <FlightController_BatteryAlarm+0xa8>)
 8001f20:	f003 fe1e 	bl	8005b60 <HAL_GPIO_WritePin>

                /* Reset Timer2 flag */
                Timer2_flag = false;
 8001f24:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <FlightController_BatteryAlarm+0xa4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e005      	b.n	8001f38 <FlightController_BatteryAlarm+0x94>
            }

        } else {

            HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f32:	4806      	ldr	r0, [pc, #24]	@ (8001f4c <FlightController_BatteryAlarm+0xa8>)
 8001f34:	f003 fe14 	bl	8005b60 <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001f38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f3a:	f00c fab1 	bl	800e4a0 <vTaskDelay>
        if (FlightController_batteryLevelValue < BATTERY_ALARM_THRESHOLD) {
 8001f3e:	e7c9      	b.n	8001ed4 <FlightController_BatteryAlarm+0x30>
 8001f40:	08013d24 	.word	0x08013d24
 8001f44:	20000008 	.word	0x20000008
 8001f48:	20000361 	.word	0x20000361
 8001f4c:	40020000 	.word	0x40020000

08001f50 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 8001f5c:	23fa      	movs	r3, #250	@ 0xfa
 8001f5e:	60bb      	str	r3, [r7, #8]

    while (1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f68:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <FlightController_HeartbeatLight+0x38>)
 8001f6a:	f003 fdf9 	bl	8005b60 <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <FlightController_HeartbeatLight+0x2a>

            ledState = GPIO_PIN_SET;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e001      	b.n	8001f7e <FlightController_HeartbeatLight+0x2e>
        } else {

            ledState = GPIO_PIN_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001f7e:	68b8      	ldr	r0, [r7, #8]
 8001f80:	f00c fa8e 	bl	800e4a0 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001f84:	e7ec      	b.n	8001f60 <FlightController_HeartbeatLight+0x10>
 8001f86:	bf00      	nop
 8001f88:	40020800 	.word	0x40020800

08001f8c <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b09c      	sub	sp, #112	@ 0x70
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

    /* Define flight lights sequences */
    uint8_t flightLightsSequenceA1[] = {1, 0, 0, 0, 0, 0, 0, 0};
 8001f94:	4ab2      	ldr	r2, [pc, #712]	@ (8002260 <FlightController_FlightLights+0x2d4>)
 8001f96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f9e:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA3[] = {1, 0, 0, 0, 0, 0, 0, 0};
 8001fa2:	4aaf      	ldr	r2, [pc, #700]	@ (8002260 <FlightController_FlightLights+0x2d4>)
 8001fa4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001fa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fac:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA2[] = {0, 0, 1, 0, 0, 0, 0, 0};
 8001fb0:	4aac      	ldr	r2, [pc, #688]	@ (8002264 <FlightController_FlightLights+0x2d8>)
 8001fb2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fba:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA4[] = {0, 0, 1, 0, 0, 0, 0, 0};
 8001fbe:	4aa9      	ldr	r2, [pc, #676]	@ (8002264 <FlightController_FlightLights+0x2d8>)
 8001fc0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fc8:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequenceB1[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8001fcc:	4aa6      	ldr	r2, [pc, #664]	@ (8002268 <FlightController_FlightLights+0x2dc>)
 8001fce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fd6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB3[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8001fda:	4aa3      	ldr	r2, [pc, #652]	@ (8002268 <FlightController_FlightLights+0x2dc>)
 8001fdc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fe4:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB2[] = {0, 0, 0, 0, 1, 0, 1, 0};
 8001fe8:	4aa0      	ldr	r2, [pc, #640]	@ (800226c <FlightController_FlightLights+0x2e0>)
 8001fea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ff2:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB4[] = {0, 0, 0, 0, 1, 0, 1, 0};
 8001ff6:	4a9d      	ldr	r2, [pc, #628]	@ (800226c <FlightController_FlightLights+0x2e0>)
 8001ff8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002000:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequenceC1[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8002004:	4a98      	ldr	r2, [pc, #608]	@ (8002268 <FlightController_FlightLights+0x2dc>)
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800200e:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC3[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8002012:	4a95      	ldr	r2, [pc, #596]	@ (8002268 <FlightController_FlightLights+0x2dc>)
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800201c:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC2[] = {0, 0, 0, 0, 1, 0, 0, 0};
 8002020:	4a93      	ldr	r2, [pc, #588]	@ (8002270 <FlightController_FlightLights+0x2e4>)
 8002022:	f107 0310 	add.w	r3, r7, #16
 8002026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800202a:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC4[] = {0, 0, 0, 0, 1, 0, 0, 0};
 800202e:	4a90      	ldr	r2, [pc, #576]	@ (8002270 <FlightController_FlightLights+0x2e4>)
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002038:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequence = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t flightLightsSequenceSize = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    uint8_t flightLightsSequenceCursor = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800204e:	2314      	movs	r3, #20
 8002050:	66bb      	str	r3, [r7, #104]	@ 0x68

    while (1) {

        /* Turn on/off flight lights (Switch D on radio controller) */
        if (500 <= FSA8S_channelValues[9]) {
 8002052:	4b88      	ldr	r3, [pc, #544]	@ (8002274 <FlightController_FlightLights+0x2e8>)
 8002054:	8a5b      	ldrh	r3, [r3, #18]
 8002056:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800205a:	f0c0 80e5 	bcc.w	8002228 <FlightController_FlightLights+0x29c>

            /* Set flight light sequence (Switch C on radio controller) */
            if (250 >= FSA8S_channelValues[8]) {
 800205e:	4b85      	ldr	r3, [pc, #532]	@ (8002274 <FlightController_FlightLights+0x2e8>)
 8002060:	8a1b      	ldrh	r3, [r3, #16]
 8002062:	2bfa      	cmp	r3, #250	@ 0xfa
 8002064:	d803      	bhi.n	800206e <FlightController_FlightLights+0xe2>

                flightLightsSequence = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800206c:	e016      	b.n	800209c <FlightController_FlightLights+0x110>

            } else if (250 < FSA8S_channelValues[8] && 750 >= FSA8S_channelValues[8]) {
 800206e:	4b81      	ldr	r3, [pc, #516]	@ (8002274 <FlightController_FlightLights+0x2e8>)
 8002070:	8a1b      	ldrh	r3, [r3, #16]
 8002072:	2bfa      	cmp	r3, #250	@ 0xfa
 8002074:	d909      	bls.n	800208a <FlightController_FlightLights+0xfe>
 8002076:	4b7f      	ldr	r3, [pc, #508]	@ (8002274 <FlightController_FlightLights+0x2e8>)
 8002078:	8a1b      	ldrh	r3, [r3, #16]
 800207a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800207e:	4293      	cmp	r3, r2
 8002080:	d803      	bhi.n	800208a <FlightController_FlightLights+0xfe>

                flightLightsSequence = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002088:	e008      	b.n	800209c <FlightController_FlightLights+0x110>

            } else if (750 < FSA8S_channelValues[8]) {
 800208a:	4b7a      	ldr	r3, [pc, #488]	@ (8002274 <FlightController_FlightLights+0x2e8>)
 800208c:	8a1b      	ldrh	r3, [r3, #16]
 800208e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002092:	4293      	cmp	r3, r2
 8002094:	d902      	bls.n	800209c <FlightController_FlightLights+0x110>

                flightLightsSequence = 2;
 8002096:	2302      	movs	r3, #2
 8002098:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            }

            /* Set flight light sequence speed (Potentiometer B on radio controller) */
            Timer3_AutoReloadTime = 200 + FSA8S_channelValues[7] / 5;
 800209c:	4b75      	ldr	r3, [pc, #468]	@ (8002274 <FlightController_FlightLights+0x2e8>)
 800209e:	89db      	ldrh	r3, [r3, #14]
 80020a0:	4a75      	ldr	r2, [pc, #468]	@ (8002278 <FlightController_FlightLights+0x2ec>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	33c8      	adds	r3, #200	@ 0xc8
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	4b73      	ldr	r3, [pc, #460]	@ (800227c <FlightController_FlightLights+0x2f0>)
 80020b0:	801a      	strh	r2, [r3, #0]

            /* Check if timer has expired */
            if (Timer3_flag) {
 80020b2:	4b73      	ldr	r3, [pc, #460]	@ (8002280 <FlightController_FlightLights+0x2f4>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80cd 	beq.w	8002256 <FlightController_FlightLights+0x2ca>

                /* Parse flight lights sequences */
                flightLightsSequenceCursor++;
 80020bc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80020c0:	3301      	adds	r3, #1
 80020c2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                if (flightLightsSequenceSize <= flightLightsSequenceCursor) {
 80020c6:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80020ca:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d802      	bhi.n	80020d8 <FlightController_FlightLights+0x14c>
                    flightLightsSequenceCursor = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                }

                /* Write to flight lights */
                if (flightLightsSequence == 0) {
 80020d8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d132      	bne.n	8002146 <FlightController_FlightLights+0x1ba>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceA1);
 80020e0:	2308      	movs	r3, #8
 80020e2:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceA1[flightLightsSequenceCursor]);
 80020e6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80020ea:	3370      	adds	r3, #112	@ 0x70
 80020ec:	443b      	add	r3, r7
 80020ee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80020f2:	461a      	mov	r2, r3
 80020f4:	2104      	movs	r1, #4
 80020f6:	4863      	ldr	r0, [pc, #396]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 80020f8:	f003 fd32 	bl	8005b60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceA2[flightLightsSequenceCursor]);
 80020fc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002100:	3370      	adds	r3, #112	@ 0x70
 8002102:	443b      	add	r3, r7
 8002104:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002108:	461a      	mov	r2, r3
 800210a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800210e:	485d      	ldr	r0, [pc, #372]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 8002110:	f003 fd26 	bl	8005b60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceA3[flightLightsSequenceCursor]);
 8002114:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002118:	3370      	adds	r3, #112	@ 0x70
 800211a:	443b      	add	r3, r7
 800211c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002120:	461a      	mov	r2, r3
 8002122:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002126:	4857      	ldr	r0, [pc, #348]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 8002128:	f003 fd1a 	bl	8005b60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceA4[flightLightsSequenceCursor]);
 800212c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002130:	3370      	adds	r3, #112	@ 0x70
 8002132:	443b      	add	r3, r7
 8002134:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002138:	461a      	mov	r2, r3
 800213a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800213e:	4852      	ldr	r0, [pc, #328]	@ (8002288 <FlightController_FlightLights+0x2fc>)
 8002140:	f003 fd0e 	bl	8005b60 <HAL_GPIO_WritePin>
 8002144:	e06c      	b.n	8002220 <FlightController_FlightLights+0x294>

                } else if (flightLightsSequence == 1) {
 8002146:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800214a:	2b01      	cmp	r3, #1
 800214c:	d132      	bne.n	80021b4 <FlightController_FlightLights+0x228>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceB1);
 800214e:	2308      	movs	r3, #8
 8002150:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceB1[flightLightsSequenceCursor]);
 8002154:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002158:	3370      	adds	r3, #112	@ 0x70
 800215a:	443b      	add	r3, r7
 800215c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002160:	461a      	mov	r2, r3
 8002162:	2104      	movs	r1, #4
 8002164:	4847      	ldr	r0, [pc, #284]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 8002166:	f003 fcfb 	bl	8005b60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceB2[flightLightsSequenceCursor]);
 800216a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800216e:	3370      	adds	r3, #112	@ 0x70
 8002170:	443b      	add	r3, r7
 8002172:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8002176:	461a      	mov	r2, r3
 8002178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800217c:	4841      	ldr	r0, [pc, #260]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 800217e:	f003 fcef 	bl	8005b60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceB3[flightLightsSequenceCursor]);
 8002182:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002186:	3370      	adds	r3, #112	@ 0x70
 8002188:	443b      	add	r3, r7
 800218a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800218e:	461a      	mov	r2, r3
 8002190:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002194:	483b      	ldr	r0, [pc, #236]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 8002196:	f003 fce3 	bl	8005b60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceB4[flightLightsSequenceCursor]);
 800219a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800219e:	3370      	adds	r3, #112	@ 0x70
 80021a0:	443b      	add	r3, r7
 80021a2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80021a6:	461a      	mov	r2, r3
 80021a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021ac:	4836      	ldr	r0, [pc, #216]	@ (8002288 <FlightController_FlightLights+0x2fc>)
 80021ae:	f003 fcd7 	bl	8005b60 <HAL_GPIO_WritePin>
 80021b2:	e035      	b.n	8002220 <FlightController_FlightLights+0x294>

                } else if (flightLightsSequence == 2) {
 80021b4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d131      	bne.n	8002220 <FlightController_FlightLights+0x294>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceC1);
 80021bc:	2308      	movs	r3, #8
 80021be:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceC1[flightLightsSequenceCursor]);
 80021c2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021c6:	3370      	adds	r3, #112	@ 0x70
 80021c8:	443b      	add	r3, r7
 80021ca:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80021ce:	461a      	mov	r2, r3
 80021d0:	2104      	movs	r1, #4
 80021d2:	482c      	ldr	r0, [pc, #176]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 80021d4:	f003 fcc4 	bl	8005b60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceC2[flightLightsSequenceCursor]);
 80021d8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021dc:	3370      	adds	r3, #112	@ 0x70
 80021de:	443b      	add	r3, r7
 80021e0:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021ea:	4826      	ldr	r0, [pc, #152]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 80021ec:	f003 fcb8 	bl	8005b60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceC3[flightLightsSequenceCursor]);
 80021f0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021f4:	3370      	adds	r3, #112	@ 0x70
 80021f6:	443b      	add	r3, r7
 80021f8:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80021fc:	461a      	mov	r2, r3
 80021fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002202:	4820      	ldr	r0, [pc, #128]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 8002204:	f003 fcac 	bl	8005b60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceC4[flightLightsSequenceCursor]);
 8002208:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800220c:	3370      	adds	r3, #112	@ 0x70
 800220e:	443b      	add	r3, r7
 8002210:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002214:	461a      	mov	r2, r3
 8002216:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800221a:	481b      	ldr	r0, [pc, #108]	@ (8002288 <FlightController_FlightLights+0x2fc>)
 800221c:	f003 fca0 	bl	8005b60 <HAL_GPIO_WritePin>
                }

                /* Reset Timer3 flag */
                Timer3_flag = false;
 8002220:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <FlightController_FlightLights+0x2f4>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e016      	b.n	8002256 <FlightController_FlightLights+0x2ca>
            }

        } else {

            /* Turn off flight lights */
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2104      	movs	r1, #4
 800222c:	4815      	ldr	r0, [pc, #84]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 800222e:	f003 fc97 	bl	8005b60 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002238:	4812      	ldr	r0, [pc, #72]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 800223a:	f003 fc91 	bl	8005b60 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002244:	480f      	ldr	r0, [pc, #60]	@ (8002284 <FlightController_FlightLights+0x2f8>)
 8002246:	f003 fc8b 	bl	8005b60 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002250:	480d      	ldr	r0, [pc, #52]	@ (8002288 <FlightController_FlightLights+0x2fc>)
 8002252:	f003 fc85 	bl	8005b60 <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8002256:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002258:	f00c f922 	bl	800e4a0 <vTaskDelay>
        if (500 <= FSA8S_channelValues[9]) {
 800225c:	e6f9      	b.n	8002052 <FlightController_FlightLights+0xc6>
 800225e:	bf00      	nop
 8002260:	08013d4c 	.word	0x08013d4c
 8002264:	08013d54 	.word	0x08013d54
 8002268:	08013d5c 	.word	0x08013d5c
 800226c:	08013d64 	.word	0x08013d64
 8002270:	08013d6c 	.word	0x08013d6c
 8002274:	20000370 	.word	0x20000370
 8002278:	cccccccd 	.word	0xcccccccd
 800227c:	20000002 	.word	0x20000002
 8002280:	20000362 	.word	0x20000362
 8002284:	40020400 	.word	0x40020400
 8002288:	40020800 	.word	0x40020800
 800228c:	00000000 	.word	0x00000000

08002290 <PID_Equation_Mode1>:
    }
}

void PID_Equation_Mode1(float * PID_Output, float * newPreviousErrorValue, float * Iterm, float errorValue, float kP, float kI, float kD, float lastPreviousErrorValue, float previousIterm) {
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b08c      	sub	sp, #48	@ 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6278      	str	r0, [r7, #36]	@ 0x24
 8002298:	6239      	str	r1, [r7, #32]
 800229a:	61fa      	str	r2, [r7, #28]
 800229c:	ed87 0a06 	vstr	s0, [r7, #24]
 80022a0:	edc7 0a05 	vstr	s1, [r7, #20]
 80022a4:	ed87 1a04 	vstr	s2, [r7, #16]
 80022a8:	edc7 1a03 	vstr	s3, [r7, #12]
 80022ac:	ed87 2a02 	vstr	s4, [r7, #8]
 80022b0:	edc7 2a01 	vstr	s5, [r7, #4]

	float Pterm;
	float Dterm;

	/* Calculate proportional term */
	Pterm = kP * errorValue;
 80022b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80022b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* Calculate integral term */
	*Iterm = previousIterm + kI * (errorValue + lastPreviousErrorValue) * 0.004 / 2;
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7fe f947 	bl	8000558 <__aeabi_f2d>
 80022ca:	4604      	mov	r4, r0
 80022cc:	460d      	mov	r5, r1
 80022ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80022d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80022d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022da:	edd7 7a04 	vldr	s15, [r7, #16]
 80022de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e2:	ee17 0a90 	vmov	r0, s15
 80022e6:	f7fe f937 	bl	8000558 <__aeabi_f2d>
 80022ea:	a343      	add	r3, pc, #268	@ (adr r3, 80023f8 <PID_Equation_Mode1+0x168>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe f98a 	bl	8000608 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002304:	f7fe faaa 	bl	800085c <__aeabi_ddiv>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4620      	mov	r0, r4
 800230e:	4629      	mov	r1, r5
 8002310:	f7fd ffc4 	bl	800029c <__adddf3>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	f7fe fc6c 	bl	8000bf8 <__aeabi_d2f>
 8002320:	4602      	mov	r2, r0
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	601a      	str	r2, [r3, #0]
	/* Limit integral term to avoid integral wind-up */
	if(*Iterm > 400) {
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002400 <PID_Equation_Mode1+0x170>
 8002330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002338:	dd03      	ble.n	8002342 <PID_Equation_Mode1+0xb2>
		*Iterm = 400;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4a31      	ldr	r2, [pc, #196]	@ (8002404 <PID_Equation_Mode1+0x174>)
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e00c      	b.n	800235c <PID_Equation_Mode1+0xcc>
	} else if(*Iterm < -400) {
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002408 <PID_Equation_Mode1+0x178>
 800234c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	d502      	bpl.n	800235c <PID_Equation_Mode1+0xcc>
		*Iterm = -400;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4a2c      	ldr	r2, [pc, #176]	@ (800240c <PID_Equation_Mode1+0x17c>)
 800235a:	601a      	str	r2, [r3, #0]
	}

	/* Calculate derivative term */
	Dterm = kD * (errorValue - lastPreviousErrorValue) / 0.004;
 800235c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002360:	edd7 7a02 	vldr	s15, [r7, #8]
 8002364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002368:	edd7 7a03 	vldr	s15, [r7, #12]
 800236c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002370:	ee17 0a90 	vmov	r0, s15
 8002374:	f7fe f8f0 	bl	8000558 <__aeabi_f2d>
 8002378:	a31f      	add	r3, pc, #124	@ (adr r3, 80023f8 <PID_Equation_Mode1+0x168>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	f7fe fa6d 	bl	800085c <__aeabi_ddiv>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f7fe fc35 	bl	8000bf8 <__aeabi_d2f>
 800238e:	4603      	mov	r3, r0
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Calculate PID output */
	*PID_Output = Pterm + *Iterm + Dterm;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800239c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80023a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	edc3 7a00 	vstr	s15, [r3]
	/* Limit PID output to avoid integral wind-up */
	if(*PID_Output > 400) {
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002400 <PID_Equation_Mode1+0x170>
 80023b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	dd03      	ble.n	80023ca <PID_Equation_Mode1+0x13a>
		*PID_Output = 400;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002404 <PID_Equation_Mode1+0x174>)
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e00c      	b.n	80023e4 <PID_Equation_Mode1+0x154>
	} else if(*PID_Output < -400) {
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002408 <PID_Equation_Mode1+0x178>
 80023d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	d502      	bpl.n	80023e4 <PID_Equation_Mode1+0x154>
		*PID_Output = -400;
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	4a0a      	ldr	r2, [pc, #40]	@ (800240c <PID_Equation_Mode1+0x17c>)
 80023e2:	601a      	str	r2, [r3, #0]
	}

	/* Update previous error value */
	*newPreviousErrorValue = errorValue;
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	3730      	adds	r7, #48	@ 0x30
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bdb0      	pop	{r4, r5, r7, pc}
 80023f2:	bf00      	nop
 80023f4:	f3af 8000 	nop.w
 80023f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80023fc:	3f70624d 	.word	0x3f70624d
 8002400:	43c80000 	.word	0x43c80000
 8002404:	43c80000 	.word	0x43c80000
 8002408:	c3c80000 	.word	0xc3c80000
 800240c:	c3c80000 	.word	0xc3c80000

08002410 <PID_Reset_Mode1>:

void PID_Reset_Mode1(float * previousErrorValue_rollRate, float * previousErrorValue_pitchRate, float * previousErrorValue_yawRate, float * previousIterm_rollRate, float * previousIterm_pitchRate, float * previousIterm_yawRate) {
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]

	/* Reset previously stored PID errors and terms values */
	*previousErrorValue_rollRate 	= 0;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
	*previousErrorValue_pitchRate	= 0;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
	*previousErrorValue_yawRate		= 0;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
	*previousIterm_rollRate			= 0;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
	*previousIterm_pitchRate		= 0;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
	*previousIterm_yawRate			= 0;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <Timer1_Callback>:

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f00d f96f 	bl	800f748 <pvTimerGetTimerID>
 800246a:	4603      	mov	r3, r0
 800246c:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f00c fea6 	bl	800f1c0 <xTimerGetPeriod>
 8002474:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3301      	adds	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (PW_ON_OFF_DRIVER_TIME / xTimerPeriod)) {
 800247c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d333      	bcc.n	80024f4 <Timer1_Callback+0x98>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 800248c:	2120      	movs	r1, #32
 800248e:	481e      	ldr	r0, [pc, #120]	@ (8002508 <Timer1_Callback+0xac>)
 8002490:	f003 fb4e 	bl	8005b30 <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d124      	bne.n	80024e4 <Timer1_Callback+0x88>

            if (!FlightController_running) {
 800249a:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <Timer1_Callback+0xb0>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	f083 0301 	eor.w	r3, r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <Timer1_Callback+0x5e>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 80024a8:	2201      	movs	r2, #1
 80024aa:	2110      	movs	r1, #16
 80024ac:	4816      	ldr	r0, [pc, #88]	@ (8002508 <Timer1_Callback+0xac>)
 80024ae:	f003 fb57 	bl	8005b60 <HAL_GPIO_WritePin>

                FlightController_running = true;
 80024b2:	4b16      	ldr	r3, [pc, #88]	@ (800250c <Timer1_Callback+0xb0>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e014      	b.n	80024e4 <Timer1_Callback+0x88>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <Timer1_Callback+0xb4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f00c f824 	bl	800e50c <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024ca:	4812      	ldr	r0, [pc, #72]	@ (8002514 <Timer1_Callback+0xb8>)
 80024cc:	f003 fb48 	bl	8005b60 <HAL_GPIO_WritePin>

                FlightController_running = false;
 80024d0:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <Timer1_Callback+0xb0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2110      	movs	r1, #16
 80024da:	480b      	ldr	r0, [pc, #44]	@ (8002508 <Timer1_Callback+0xac>)
 80024dc:	f003 fb40 	bl	8005b60 <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 80024e0:	f002 ffab 	bl	800543a <HAL_NVIC_SystemReset>
            }
        }

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 80024e4:	2100      	movs	r1, #0
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f00d f94f 	bl	800f78a <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <Timer1_Callback+0xbc>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 80024f2:	e004      	b.n	80024fe <Timer1_Callback+0xa2>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f00d f946 	bl	800f78a <vTimerSetTimerID>
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40020400 	.word	0x40020400
 800250c:	20000324 	.word	0x20000324
 8002510:	20000348 	.word	0x20000348
 8002514:	40020800 	.word	0x40020800
 8002518:	20000360 	.word	0x20000360

0800251c <Timer2_Callback>:

void Timer2_Callback(TimerHandle_t xTimer) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f00d f90f 	bl	800f748 <pvTimerGetTimerID>
 800252a:	4603      	mov	r3, r0
 800252c:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f00c fe46 	bl	800f1c0 <xTimerGetPeriod>
 8002534:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3301      	adds	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (Timer2_AutoReloadTime / xTimerPeriod)) {
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <Timer2_Callback+0x54>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	429a      	cmp	r2, r3
 800254c:	d307      	bcc.n	800255e <Timer2_Callback+0x42>

        /* Set Timer2 flag to true */
        Timer2_flag = true;
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <Timer2_Callback+0x58>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8002554:	2100      	movs	r1, #0
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f00d f917 	bl	800f78a <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 800255c:	e004      	b.n	8002568 <Timer2_Callback+0x4c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f00d f911 	bl	800f78a <vTimerSetTimerID>
}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000000 	.word	0x20000000
 8002574:	20000361 	.word	0x20000361

08002578 <Timer3_Callback>:

void Timer3_Callback(TimerHandle_t xTimer) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f00d f8e1 	bl	800f748 <pvTimerGetTimerID>
 8002586:	4603      	mov	r3, r0
 8002588:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f00c fe18 	bl	800f1c0 <xTimerGetPeriod>
 8002590:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3301      	adds	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (Timer3_AutoReloadTime / xTimerPeriod)) {
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <Timer3_Callback+0x54>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d307      	bcc.n	80025ba <Timer3_Callback+0x42>

        /* Set Timer3 flag to true */
        Timer3_flag = true;
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <Timer3_Callback+0x58>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 80025b0:	2100      	movs	r1, #0
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f00d f8e9 	bl	800f78a <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 80025b8:	e004      	b.n	80025c4 <Timer3_Callback+0x4c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4619      	mov	r1, r3
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f00d f8e3 	bl	800f78a <vTimerSetTimerID>
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000002 	.word	0x20000002
 80025d0:	20000362 	.word	0x20000362

080025d4 <Timer4_Callback>:

void Timer4_Callback(TimerHandle_t xTimer) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f00d f8b3 	bl	800f748 <pvTimerGetTimerID>
 80025e2:	4603      	mov	r3, r0
 80025e4:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f00c fdea 	bl	800f1c0 <xTimerGetPeriod>
 80025ec:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3301      	adds	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (Timer4_AutoReloadTime / xTimerPeriod)) {
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <Timer4_Callback+0x54>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	429a      	cmp	r2, r3
 8002604:	d307      	bcc.n	8002616 <Timer4_Callback+0x42>

        /* Set Timer3 flag to true */
        Timer4_flag = true;
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <Timer4_Callback+0x58>)
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 800260c:	2100      	movs	r1, #0
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f00d f8bb 	bl	800f78a <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8002614:	e004      	b.n	8002620 <Timer4_Callback+0x4c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f00d f8b5 	bl	800f78a <vTimerSetTimerID>
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000004 	.word	0x20000004
 800262c:	20000363 	.word	0x20000363

08002630 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0

    /* Welcome message */
    // LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 8002634:	f7fe fca8 	bl	8000f88 <FreeRTOS_CreateStartUpTasks>
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4a07      	ldr	r2, [pc, #28]	@ (8002668 <vApplicationGetIdleTaskMemory+0x2c>)
 800264c:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4a06      	ldr	r2, [pc, #24]	@ (800266c <vApplicationGetIdleTaskMemory+0x30>)
 8002652:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2280      	movs	r2, #128	@ 0x80
 8002658:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	200003a8 	.word	0x200003a8
 800266c:	20000404 	.word	0x20000404

08002670 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a07      	ldr	r2, [pc, #28]	@ (800269c <vApplicationGetTimerTaskMemory+0x2c>)
 8002680:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4a06      	ldr	r2, [pc, #24]	@ (80026a0 <vApplicationGetTimerTaskMemory+0x30>)
 8002686:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800268e:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	20000604 	.word	0x20000604
 80026a0:	20000660 	.word	0x20000660

080026a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026aa:	f002 f967 	bl	800497c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ae:	f000 f827 	bl	8002700 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026b2:	f000 f9cd 	bl	8002a50 <MX_GPIO_Init>
  MX_DMA_Init();
 80026b6:	f000 f9b1 	bl	8002a1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80026ba:	f000 f985 	bl	80029c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80026be:	f000 f8db 	bl	8002878 <MX_I2C1_Init>
  MX_TIM3_Init();
 80026c2:	f000 f907 	bl	80028d4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80026c6:	f000 f885 	bl	80027d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 80026ca:	f7ff ffb1 	bl	8002630 <FlightController_Init>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80026ce:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <main+0x54>)
 80026d0:	1d3c      	adds	r4, r7, #4
 80026d2:	461d      	mov	r5, r3
 80026d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f00a febc 	bl	800d462 <osThreadCreate>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4a03      	ldr	r2, [pc, #12]	@ (80026fc <main+0x58>)
 80026ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80026f0:	f00a feb0 	bl	800d454 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <main+0x50>
 80026f8:	08013d80 	.word	0x08013d80
 80026fc:	20000be8 	.word	0x20000be8

08002700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b094      	sub	sp, #80	@ 0x50
 8002704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002706:	f107 0320 	add.w	r3, r7, #32
 800270a:	2230      	movs	r2, #48	@ 0x30
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f00e fe1b 	bl	801134a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <SystemClock_Config+0xcc>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	4a27      	ldr	r2, [pc, #156]	@ (80027cc <SystemClock_Config+0xcc>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002732:	6413      	str	r3, [r2, #64]	@ 0x40
 8002734:	4b25      	ldr	r3, [pc, #148]	@ (80027cc <SystemClock_Config+0xcc>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	4b22      	ldr	r3, [pc, #136]	@ (80027d0 <SystemClock_Config+0xd0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800274c:	4a20      	ldr	r2, [pc, #128]	@ (80027d0 <SystemClock_Config+0xd0>)
 800274e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b1e      	ldr	r3, [pc, #120]	@ (80027d0 <SystemClock_Config+0xd0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002760:	2301      	movs	r3, #1
 8002762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800276a:	2302      	movs	r3, #2
 800276c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800276e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002774:	2319      	movs	r3, #25
 8002776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002778:	2390      	movs	r3, #144	@ 0x90
 800277a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800277c:	2302      	movs	r3, #2
 800277e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002780:	2303      	movs	r3, #3
 8002782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002784:	f107 0320 	add.w	r3, r7, #32
 8002788:	4618      	mov	r0, r3
 800278a:	f005 fc3f 	bl	800800c <HAL_RCC_OscConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002794:	f000 fa00 	bl	8002b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002798:	230f      	movs	r3, #15
 800279a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279c:	2302      	movs	r3, #2
 800279e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	2102      	movs	r1, #2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f005 fea1 	bl	80084fc <HAL_RCC_ClockConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80027c0:	f000 f9ea 	bl	8002b98 <Error_Handler>
  }
}
 80027c4:	bf00      	nop
 80027c6:	3750      	adds	r7, #80	@ 0x50
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40007000 	.word	0x40007000

080027d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027da:	463b      	mov	r3, r7
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027e6:	4b21      	ldr	r3, [pc, #132]	@ (800286c <MX_ADC1_Init+0x98>)
 80027e8:	4a21      	ldr	r2, [pc, #132]	@ (8002870 <MX_ADC1_Init+0x9c>)
 80027ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027ec:	4b1f      	ldr	r3, [pc, #124]	@ (800286c <MX_ADC1_Init+0x98>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027f2:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <MX_ADC1_Init+0x98>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80027f8:	4b1c      	ldr	r3, [pc, #112]	@ (800286c <MX_ADC1_Init+0x98>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027fe:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <MX_ADC1_Init+0x98>)
 8002800:	2200      	movs	r2, #0
 8002802:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002804:	4b19      	ldr	r3, [pc, #100]	@ (800286c <MX_ADC1_Init+0x98>)
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800280c:	4b17      	ldr	r3, [pc, #92]	@ (800286c <MX_ADC1_Init+0x98>)
 800280e:	2200      	movs	r2, #0
 8002810:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002812:	4b16      	ldr	r3, [pc, #88]	@ (800286c <MX_ADC1_Init+0x98>)
 8002814:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <MX_ADC1_Init+0xa0>)
 8002816:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002818:	4b14      	ldr	r3, [pc, #80]	@ (800286c <MX_ADC1_Init+0x98>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800281e:	4b13      	ldr	r3, [pc, #76]	@ (800286c <MX_ADC1_Init+0x98>)
 8002820:	2201      	movs	r2, #1
 8002822:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002824:	4b11      	ldr	r3, [pc, #68]	@ (800286c <MX_ADC1_Init+0x98>)
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800282c:	4b0f      	ldr	r3, [pc, #60]	@ (800286c <MX_ADC1_Init+0x98>)
 800282e:	2201      	movs	r2, #1
 8002830:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002832:	480e      	ldr	r0, [pc, #56]	@ (800286c <MX_ADC1_Init+0x98>)
 8002834:	f002 f938 	bl	8004aa8 <HAL_ADC_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800283e:	f000 f9ab 	bl	8002b98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002842:	2300      	movs	r3, #0
 8002844:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002846:	2301      	movs	r3, #1
 8002848:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800284e:	463b      	mov	r3, r7
 8002850:	4619      	mov	r1, r3
 8002852:	4806      	ldr	r0, [pc, #24]	@ (800286c <MX_ADC1_Init+0x98>)
 8002854:	f002 fab8 	bl	8004dc8 <HAL_ADC_ConfigChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800285e:	f000 f99b 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000a60 	.word	0x20000a60
 8002870:	40012000 	.word	0x40012000
 8002874:	0f000001 	.word	0x0f000001

08002878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <MX_I2C1_Init+0x50>)
 800287e:	4a13      	ldr	r2, [pc, #76]	@ (80028cc <MX_I2C1_Init+0x54>)
 8002880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002882:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <MX_I2C1_Init+0x50>)
 8002884:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <MX_I2C1_Init+0x58>)
 8002886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002888:	4b0f      	ldr	r3, [pc, #60]	@ (80028c8 <MX_I2C1_Init+0x50>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800288e:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <MX_I2C1_Init+0x50>)
 8002890:	2200      	movs	r2, #0
 8002892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002894:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <MX_I2C1_Init+0x50>)
 8002896:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800289a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800289c:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <MX_I2C1_Init+0x50>)
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028a2:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <MX_I2C1_Init+0x50>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028a8:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <MX_I2C1_Init+0x50>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <MX_I2C1_Init+0x50>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028b4:	4804      	ldr	r0, [pc, #16]	@ (80028c8 <MX_I2C1_Init+0x50>)
 80028b6:	f003 f96d 	bl	8005b94 <HAL_I2C_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028c0:	f000 f96a 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000aa8 	.word	0x20000aa8
 80028cc:	40005400 	.word	0x40005400
 80028d0:	000186a0 	.word	0x000186a0

080028d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	@ 0x28
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028da:	f107 0320 	add.w	r3, r7, #32
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
 80028f0:	611a      	str	r2, [r3, #16]
 80028f2:	615a      	str	r2, [r3, #20]
 80028f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028f6:	4b32      	ldr	r3, [pc, #200]	@ (80029c0 <MX_TIM3_Init+0xec>)
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <MX_TIM3_Init+0xf0>)
 80028fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 80028fc:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <MX_TIM3_Init+0xec>)
 80028fe:	2214      	movs	r2, #20
 8002900:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002902:	4b2f      	ldr	r3, [pc, #188]	@ (80029c0 <MX_TIM3_Init+0xec>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002908:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <MX_TIM3_Init+0xec>)
 800290a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800290e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002910:	4b2b      	ldr	r3, [pc, #172]	@ (80029c0 <MX_TIM3_Init+0xec>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002916:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <MX_TIM3_Init+0xec>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800291c:	4828      	ldr	r0, [pc, #160]	@ (80029c0 <MX_TIM3_Init+0xec>)
 800291e:	f005 ffcd 	bl	80088bc <HAL_TIM_PWM_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002928:	f000 f936 	bl	8002b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002934:	f107 0320 	add.w	r3, r7, #32
 8002938:	4619      	mov	r1, r3
 800293a:	4821      	ldr	r0, [pc, #132]	@ (80029c0 <MX_TIM3_Init+0xec>)
 800293c:	f006 fbb2 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002946:	f000 f927 	bl	8002b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800294a:	2360      	movs	r3, #96	@ 0x60
 800294c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	2200      	movs	r2, #0
 800295e:	4619      	mov	r1, r3
 8002960:	4817      	ldr	r0, [pc, #92]	@ (80029c0 <MX_TIM3_Init+0xec>)
 8002962:	f006 f8ab 	bl	8008abc <HAL_TIM_PWM_ConfigChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800296c:	f000 f914 	bl	8002b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	2204      	movs	r2, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4812      	ldr	r0, [pc, #72]	@ (80029c0 <MX_TIM3_Init+0xec>)
 8002978:	f006 f8a0 	bl	8008abc <HAL_TIM_PWM_ConfigChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002982:	f000 f909 	bl	8002b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	2208      	movs	r2, #8
 800298a:	4619      	mov	r1, r3
 800298c:	480c      	ldr	r0, [pc, #48]	@ (80029c0 <MX_TIM3_Init+0xec>)
 800298e:	f006 f895 	bl	8008abc <HAL_TIM_PWM_ConfigChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002998:	f000 f8fe 	bl	8002b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	220c      	movs	r2, #12
 80029a0:	4619      	mov	r1, r3
 80029a2:	4807      	ldr	r0, [pc, #28]	@ (80029c0 <MX_TIM3_Init+0xec>)
 80029a4:	f006 f88a 	bl	8008abc <HAL_TIM_PWM_ConfigChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80029ae:	f000 f8f3 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029b2:	4803      	ldr	r0, [pc, #12]	@ (80029c0 <MX_TIM3_Init+0xec>)
 80029b4:	f000 f9d2 	bl	8002d5c <HAL_TIM_MspPostInit>

}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	@ 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000afc 	.word	0x20000afc
 80029c4:	40000400 	.word	0x40000400

080029c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029cc:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <MX_USART2_UART_Init+0x50>)
 80029d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029da:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80029ec:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029ee:	2204      	movs	r2, #4
 80029f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f2:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029fe:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <MX_USART2_UART_Init+0x4c>)
 8002a00:	f006 fbbe 	bl	8009180 <HAL_UART_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a0a:	f000 f8c5 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000b44 	.word	0x20000b44
 8002a18:	40004400 	.word	0x40004400

08002a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <MX_DMA_Init+0x30>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <MX_DMA_Init+0x30>)
 8002a2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <MX_DMA_Init+0x30>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]

}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800

08002a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	@ 0x28
 8002a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4b42      	ldr	r3, [pc, #264]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	4a41      	ldr	r2, [pc, #260]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a76:	4b3f      	ldr	r3, [pc, #252]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a92:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	4b34      	ldr	r3, [pc, #208]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a33      	ldr	r2, [pc, #204]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	4b2d      	ldr	r3, [pc, #180]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aca:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <MX_GPIO_Init+0x124>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED4_Pin, GPIO_PIN_RESET);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002adc:	4826      	ldr	r0, [pc, #152]	@ (8002b78 <MX_GPIO_Init+0x128>)
 8002ade:	f003 f83f 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f241 1114 	movw	r1, #4372	@ 0x1114
 8002ae8:	4824      	ldr	r0, [pc, #144]	@ (8002b7c <MX_GPIO_Init+0x12c>)
 8002aea:	f003 f839 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002af4:	4822      	ldr	r0, [pc, #136]	@ (8002b80 <MX_GPIO_Init+0x130>)
 8002af6:	f003 f833 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED4_Pin;
 8002afa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	4819      	ldr	r0, [pc, #100]	@ (8002b78 <MX_GPIO_Init+0x128>)
 8002b14:	f002 fe88 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin;
 8002b18:	f241 1314 	movw	r3, #4372	@ 0x1114
 8002b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4812      	ldr	r0, [pc, #72]	@ (8002b7c <MX_GPIO_Init+0x12c>)
 8002b32:	f002 fe79 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480c      	ldr	r0, [pc, #48]	@ (8002b80 <MX_GPIO_Init+0x130>)
 8002b50:	f002 fe6a 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
  GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 8002b54:	2320      	movs	r3, #32
 8002b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	4619      	mov	r1, r3
 8002b66:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <MX_GPIO_Init+0x12c>)
 8002b68:	f002 fe5e 	bl	8005828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b6c:	bf00      	nop
 8002b6e:	3728      	adds	r7, #40	@ 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020800 	.word	0x40020800
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40020000 	.word	0x40020000

08002b84 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002b8c:	f00d f892 	bl	800fcb4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 8002b90:	2001      	movs	r0, #1
 8002b92:	f00a fcb2 	bl	800d4fa <osDelay>
 8002b96:	e7fb      	b.n	8002b90 <StartDefaultTask+0xc>

08002b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <HAL_MspInit+0x54>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	4a11      	ldr	r2, [pc, #68]	@ (8002bfc <HAL_MspInit+0x54>)
 8002bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002bfc <HAL_MspInit+0x54>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_MspInit+0x54>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <HAL_MspInit+0x54>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bda:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <HAL_MspInit+0x54>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	210f      	movs	r1, #15
 8002bea:	f06f 0001 	mvn.w	r0, #1
 8002bee:	f002 fbfa 	bl	80053e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800

08002c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	@ 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <HAL_ADC_MspInit+0x7c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d127      	bne.n	8002c72 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	4a15      	ldr	r2, [pc, #84]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c32:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a0e      	ldr	r2, [pc, #56]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <HAL_ADC_MspInit+0x84>)
 8002c6e:	f002 fddb 	bl	8005828 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c72:	bf00      	nop
 8002c74:	3728      	adds	r7, #40	@ 0x28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40012000 	.word	0x40012000
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020000 	.word	0x40020000

08002c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	@ 0x28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a19      	ldr	r2, [pc, #100]	@ (8002d0c <HAL_I2C_MspInit+0x84>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d12b      	bne.n	8002d02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	4a17      	ldr	r2, [pc, #92]	@ (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cba:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cc6:	23c0      	movs	r3, #192	@ 0xc0
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cca:	2312      	movs	r3, #18
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	480c      	ldr	r0, [pc, #48]	@ (8002d14 <HAL_I2C_MspInit+0x8c>)
 8002ce2:	f002 fda1 	bl	8005828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	4a08      	ldr	r2, [pc, #32]	@ (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d02:	bf00      	nop
 8002d04:	3728      	adds	r7, #40	@ 0x28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40005400 	.word	0x40005400
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40020400 	.word	0x40020400

08002d18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0b      	ldr	r2, [pc, #44]	@ (8002d54 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10d      	bne.n	8002d46 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_TIM_PWM_MspInit+0x40>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	4a09      	ldr	r2, [pc, #36]	@ (8002d58 <HAL_TIM_PWM_MspInit+0x40>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3a:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <HAL_TIM_PWM_MspInit+0x40>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40023800 	.word	0x40023800

08002d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a21      	ldr	r2, [pc, #132]	@ (8002e00 <HAL_TIM_MspPostInit+0xa4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d13b      	bne.n	8002df6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	4b20      	ldr	r3, [pc, #128]	@ (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a1f      	ldr	r2, [pc, #124]	@ (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b19      	ldr	r3, [pc, #100]	@ (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a18      	ldr	r2, [pc, #96]	@ (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002db6:	23c0      	movs	r3, #192	@ 0xc0
 8002db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	4619      	mov	r1, r3
 8002dd0:	480d      	ldr	r0, [pc, #52]	@ (8002e08 <HAL_TIM_MspPostInit+0xac>)
 8002dd2:	f002 fd29 	bl	8005828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002de6:	2302      	movs	r3, #2
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dea:	f107 0314 	add.w	r3, r7, #20
 8002dee:	4619      	mov	r1, r3
 8002df0:	4806      	ldr	r0, [pc, #24]	@ (8002e0c <HAL_TIM_MspPostInit+0xb0>)
 8002df2:	f002 fd19 	bl	8005828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002df6:	bf00      	nop
 8002df8:	3728      	adds	r7, #40	@ 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020400 	.word	0x40020400

08002e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	@ 0x28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a31      	ldr	r2, [pc, #196]	@ (8002ef4 <HAL_UART_MspInit+0xe4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d15b      	bne.n	8002eea <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	4b30      	ldr	r3, [pc, #192]	@ (8002ef8 <HAL_UART_MspInit+0xe8>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef8 <HAL_UART_MspInit+0xe8>)
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <HAL_UART_MspInit+0xe8>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <HAL_UART_MspInit+0xe8>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	4a28      	ldr	r2, [pc, #160]	@ (8002ef8 <HAL_UART_MspInit+0xe8>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e5e:	4b26      	ldr	r3, [pc, #152]	@ (8002ef8 <HAL_UART_MspInit+0xe8>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e6a:	230c      	movs	r3, #12
 8002e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e7a:	2307      	movs	r3, #7
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4619      	mov	r1, r3
 8002e84:	481d      	ldr	r0, [pc, #116]	@ (8002efc <HAL_UART_MspInit+0xec>)
 8002e86:	f002 fccf 	bl	8005828 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f04 <HAL_UART_MspInit+0xf4>)
 8002e8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002e92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e96:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e98:	4b19      	ldr	r3, [pc, #100]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ea4:	4b16      	ldr	r3, [pc, #88]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eaa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eac:	4b14      	ldr	r3, [pc, #80]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eb2:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ebe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002ec2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002ec6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ece:	480c      	ldr	r0, [pc, #48]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002ed0:	f002 fac4 	bl	800545c <HAL_DMA_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002eda:	f7ff fe5d 	bl	8002b98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a07      	ldr	r2, [pc, #28]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002ee2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ee4:	4a06      	ldr	r2, [pc, #24]	@ (8002f00 <HAL_UART_MspInit+0xf0>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eea:	bf00      	nop
 8002eec:	3728      	adds	r7, #40	@ 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40004400 	.word	0x40004400
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020000 	.word	0x40020000
 8002f00:	20000b88 	.word	0x20000b88
 8002f04:	40026088 	.word	0x40026088

08002f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <NMI_Handler+0x4>

08002f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <HardFault_Handler+0x4>

08002f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <MemManage_Handler+0x4>

08002f20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <BusFault_Handler+0x4>

08002f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <UsageFault_Handler+0x4>

08002f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f42:	f001 fd6d 	bl	8004a20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002f46:	f00c fdff 	bl	800fb48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002f54:	4802      	ldr	r0, [pc, #8]	@ (8002f60 <OTG_FS_IRQHandler+0x10>)
 8002f56:	f003 ff2c 	bl	8006db2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20001b84 	.word	0x20001b84

08002f64 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
    return 1;
 8002f68:	2301      	movs	r3, #1
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_kill>:

int _kill(int pid, int sig) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002f7e:	f00e fa55 	bl	801142c <__errno>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2216      	movs	r2, #22
 8002f86:	601a      	str	r2, [r3, #0]
    return -1;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_exit>:

void _exit(int status) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ffe7 	bl	8002f74 <_kill>
    while (1) {
 8002fa6:	bf00      	nop
 8002fa8:	e7fd      	b.n	8002fa6 <_exit+0x12>

08002faa <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e00a      	b.n	8002fd2 <_read+0x28>
        *ptr++ = __io_getchar();
 8002fbc:	f3af 8000 	nop.w
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	60ba      	str	r2, [r7, #8]
 8002fc8:	b2ca      	uxtb	r2, r1
 8002fca:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	dbf0      	blt.n	8002fbc <_read+0x12>
    }

    return len;
 8002fda:	687b      	ldr	r3, [r7, #4]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	e009      	b.n	800300a <_write+0x26>
        __io_putchar(*ptr++);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	60ba      	str	r2, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3301      	adds	r3, #1
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	dbf1      	blt.n	8002ff6 <_write+0x12>
    }
    return len;
 8003012:	687b      	ldr	r3, [r7, #4]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_close>:

int _close(int file) {
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_fstat>:

int _fstat(int file, struct stat * st) {
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003044:	605a      	str	r2, [r3, #4]
    return 0;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <_isatty>:

int _isatty(int file) {
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 800305c:	2301      	movs	r3, #1
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800308c:	4a14      	ldr	r2, [pc, #80]	@ (80030e0 <_sbrk+0x5c>)
 800308e:	4b15      	ldr	r3, [pc, #84]	@ (80030e4 <_sbrk+0x60>)
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8003098:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <_sbrk+0x64>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80030a0:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <_sbrk+0x64>)
 80030a2:	4a12      	ldr	r2, [pc, #72]	@ (80030ec <_sbrk+0x68>)
 80030a4:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80030a6:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <_sbrk+0x64>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d207      	bcs.n	80030c4 <_sbrk+0x40>
        errno = ENOMEM;
 80030b4:	f00e f9ba 	bl	801142c <__errno>
 80030b8:	4603      	mov	r3, r0
 80030ba:	220c      	movs	r2, #12
 80030bc:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030c2:	e009      	b.n	80030d8 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 80030c4:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <_sbrk+0x64>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 80030ca:	4b07      	ldr	r3, [pc, #28]	@ (80030e8 <_sbrk+0x64>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	4a05      	ldr	r2, [pc, #20]	@ (80030e8 <_sbrk+0x64>)
 80030d4:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 80030d6:	68fb      	ldr	r3, [r7, #12]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20010000 	.word	0x20010000
 80030e4:	00000400 	.word	0x00000400
 80030e8:	20000bec 	.word	0x20000bec
 80030ec:	20002400 	.word	0x20002400

080030f0 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80030f4:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <SystemInit+0x20>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fa:	4a05      	ldr	r2, [pc, #20]	@ (8003110 <SystemInit+0x20>)
 80030fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003114:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800314c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003118:	480d      	ldr	r0, [pc, #52]	@ (8003150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800311a:	490e      	ldr	r1, [pc, #56]	@ (8003154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800311c:	4a0e      	ldr	r2, [pc, #56]	@ (8003158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800311e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003120:	e002      	b.n	8003128 <LoopCopyDataInit>

08003122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003126:	3304      	adds	r3, #4

08003128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800312a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800312c:	d3f9      	bcc.n	8003122 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800312e:	4a0b      	ldr	r2, [pc, #44]	@ (800315c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003130:	4c0b      	ldr	r4, [pc, #44]	@ (8003160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003134:	e001      	b.n	800313a <LoopFillZerobss>

08003136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003138:	3204      	adds	r2, #4

0800313a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800313a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800313c:	d3fb      	bcc.n	8003136 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800313e:	f7ff ffd7 	bl	80030f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003142:	f00e f979 	bl	8011438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003146:	f7ff faad 	bl	80026a4 <main>
  bx  lr
 800314a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800314c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003154:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8003158:	08014250 	.word	0x08014250
  ldr r2, =_sbss
 800315c:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8003160:	200023fc 	.word	0x200023fc

08003164 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003164:	e7fe      	b.n	8003164 <ADC_IRQHandler>

08003166 <PWM_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc) {
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]

    /* Check first parameter */
    if (NULL == hesc) {
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <PWM_Init+0x12>
        return false;
 8003174:	2300      	movs	r3, #0
 8003176:	e02c      	b.n	80031d2 <PWM_Init+0x6c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_1)) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f005 fbec 	bl	800895c <HAL_TIM_PWM_Start>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <PWM_Init+0x28>
        /* END MODIFY 1 */
        return false;
 800318a:	2300      	movs	r3, #0
 800318c:	e021      	b.n	80031d2 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_2)) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2104      	movs	r1, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f005 fbe1 	bl	800895c <HAL_TIM_PWM_Start>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <PWM_Init+0x3e>
        /* END MODIFY 2 */
        return false;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e016      	b.n	80031d2 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_3)) {
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2108      	movs	r1, #8
 80031aa:	4618      	mov	r0, r3
 80031ac:	f005 fbd6 	bl	800895c <HAL_TIM_PWM_Start>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <PWM_Init+0x54>
        /* END MODIFY 3 */
        return false;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e00b      	b.n	80031d2 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_4)) {
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	210c      	movs	r1, #12
 80031c0:	4618      	mov	r0, r3
 80031c2:	f005 fbcb 	bl	800895c <HAL_TIM_PWM_Start>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <PWM_Init+0x6a>
        /* END MODIFY 4 */
        return false;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <PWM_Init+0x6c>
    }

    return true;
 80031d0:	2301      	movs	r3, #1
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint8_t channel, uint32_t dutyCycle) {
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	460b      	mov	r3, r1
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	72fb      	strb	r3, [r7, #11]

    /* Check parameters */
    if (NULL == hesc) {
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <PWM_SetDutyCycle+0x18>
        return false;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e02d      	b.n	8003250 <PWM_SetDutyCycle+0x74>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 80031f4:	7afb      	ldrb	r3, [r7, #11]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d00a      	beq.n	8003210 <PWM_SetDutyCycle+0x34>
 80031fa:	7afb      	ldrb	r3, [r7, #11]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d007      	beq.n	8003210 <PWM_SetDutyCycle+0x34>
 8003200:	7afb      	ldrb	r3, [r7, #11]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d004      	beq.n	8003210 <PWM_SetDutyCycle+0x34>
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d001      	beq.n	8003210 <PWM_SetDutyCycle+0x34>
        return false;
 800320c:	2300      	movs	r3, #0
 800320e:	e01f      	b.n	8003250 <PWM_SetDutyCycle+0x74>
    }

    /* Set duty cycle */
    if (PWM_CHANNEL_1 == channel) {
 8003210:	7afb      	ldrb	r3, [r7, #11]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d104      	bne.n	8003220 <PWM_SetDutyCycle+0x44>
        /* BEGIN MODIFY 10 */
        TIM3->CCR1 = (uint16_t)dutyCycle;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	b29a      	uxth	r2, r3
 800321a:	4b10      	ldr	r3, [pc, #64]	@ (800325c <PWM_SetDutyCycle+0x80>)
 800321c:	635a      	str	r2, [r3, #52]	@ 0x34
 800321e:	e016      	b.n	800324e <PWM_SetDutyCycle+0x72>
        /* END MODIFY 10 */
    } else if (PWM_CHANNEL_2 == channel) {
 8003220:	7afb      	ldrb	r3, [r7, #11]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d104      	bne.n	8003230 <PWM_SetDutyCycle+0x54>
        /* BEGIN MODIFY 11 */
        TIM3->CCR2 = (uint16_t)dutyCycle;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	b29a      	uxth	r2, r3
 800322a:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <PWM_SetDutyCycle+0x80>)
 800322c:	639a      	str	r2, [r3, #56]	@ 0x38
 800322e:	e00e      	b.n	800324e <PWM_SetDutyCycle+0x72>
        /* END MODIFY 11 */
    } else if (PWM_CHANNEL_3 == channel) {
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d104      	bne.n	8003240 <PWM_SetDutyCycle+0x64>
        /* BEGIN MODIFY 12 */
        TIM3->CCR3 = (uint16_t)dutyCycle;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	b29a      	uxth	r2, r3
 800323a:	4b08      	ldr	r3, [pc, #32]	@ (800325c <PWM_SetDutyCycle+0x80>)
 800323c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800323e:	e006      	b.n	800324e <PWM_SetDutyCycle+0x72>
        /* END MODIFY 12 */
    } else if (PWM_CHANNEL_4 == channel) {
 8003240:	7afb      	ldrb	r3, [r7, #11]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d103      	bne.n	800324e <PWM_SetDutyCycle+0x72>
        /* BEGIN MODIFY 13 */
        TIM3->CCR4 = (uint16_t)dutyCycle;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	b29a      	uxth	r2, r3
 800324a:	4b04      	ldr	r3, [pc, #16]	@ (800325c <PWM_SetDutyCycle+0x80>)
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40
        /* END MODIFY 13 */
    }

    return true;
 800324e:	2301      	movs	r3, #1
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40000400 	.word	0x40000400

08003260 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint32_t * pwmValue) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	ed87 0a01 	vstr	s0, [r7, #4]
 800326a:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (0 > speed || 100 < speed) {
 800326c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003270:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003278:	d408      	bmi.n	800328c <ESC_CalculatePWMDutyCycle+0x2c>
 800327a:	edd7 7a01 	vldr	s15, [r7, #4]
 800327e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80032e8 <ESC_CalculatePWMDutyCycle+0x88>
 8003282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328a:	dd01      	ble.n	8003290 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 800328c:	2300      	movs	r3, #0
 800328e:	e021      	b.n	80032d4 <ESC_CalculatePWMDutyCycle+0x74>
    }

    /* Calculate PWM value */
    *pwmValue = (uint32_t)((MAX_ESC_SPEED - MIN_ESC_SPEED) * (float)(speed / 100) + MIN_ESC_SPEED);
 8003290:	edd7 7a01 	vldr	s15, [r7, #4]
 8003294:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80032e8 <ESC_CalculatePWMDutyCycle+0x88>
 8003298:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800329c:	ee16 0a90 	vmov	r0, s13
 80032a0:	f7fd f95a 	bl	8000558 <__aeabi_f2d>
 80032a4:	a30e      	add	r3, pc, #56	@ (adr r3, 80032e0 <ESC_CalculatePWMDutyCycle+0x80>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f7fd f9ad 	bl	8000608 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	a30a      	add	r3, pc, #40	@ (adr r3, 80032e0 <ESC_CalculatePWMDutyCycle+0x80>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f7fc ffee 	bl	800029c <__adddf3>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	f7fd fc76 	bl	8000bb8 <__aeabi_d2uiz>
 80032cc:	4602      	mov	r2, r0
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	601a      	str	r2, [r3, #0]

    return true;
 80032d2:	2301      	movs	r3, #1
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	f3af 8000 	nop.w
 80032e0:	00000000 	.word	0x00000000
 80032e4:	40a99980 	.word	0x40a99980
 80032e8:	42c80000 	.word	0x42c80000

080032ec <ESC_AutoCalibrate>:

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <ESC_AutoCalibrate+0x12>
        return false;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e080      	b.n	8003400 <ESC_AutoCalibrate+0x114>
#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"Auto-calibrating ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MAX_ESC_SPEED)) {
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	791b      	ldrb	r3, [r3, #4]
 8003302:	f641 1299 	movw	r2, #6553	@ 0x1999
 8003306:	4619      	mov	r1, r3
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff67 	bl	80031dc <PWM_SetDutyCycle>
 800330e:	4603      	mov	r3, r0
 8003310:	f083 0301 	eor.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <ESC_AutoCalibrate+0x32>
        return false;
 800331a:	2300      	movs	r3, #0
 800331c:	e070      	b.n	8003400 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MAX_ESC_SPEED)) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	795b      	ldrb	r3, [r3, #5]
 8003322:	f641 1299 	movw	r2, #6553	@ 0x1999
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff57 	bl	80031dc <PWM_SetDutyCycle>
 800332e:	4603      	mov	r3, r0
 8003330:	f083 0301 	eor.w	r3, r3, #1
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <ESC_AutoCalibrate+0x52>
        return false;
 800333a:	2300      	movs	r3, #0
 800333c:	e060      	b.n	8003400 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MAX_ESC_SPEED)) {
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	799b      	ldrb	r3, [r3, #6]
 8003342:	f641 1299 	movw	r2, #6553	@ 0x1999
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff47 	bl	80031dc <PWM_SetDutyCycle>
 800334e:	4603      	mov	r3, r0
 8003350:	f083 0301 	eor.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <ESC_AutoCalibrate+0x72>
        return false;
 800335a:	2300      	movs	r3, #0
 800335c:	e050      	b.n	8003400 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MAX_ESC_SPEED)) {
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	79db      	ldrb	r3, [r3, #7]
 8003362:	f641 1299 	movw	r2, #6553	@ 0x1999
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff ff37 	bl	80031dc <PWM_SetDutyCycle>
 800336e:	4603      	mov	r3, r0
 8003370:	f083 0301 	eor.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <ESC_AutoCalibrate+0x92>
        return false;
 800337a:	2300      	movs	r3, #0
 800337c:	e040      	b.n	8003400 <ESC_AutoCalibrate+0x114>
    }

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MIN_ESC_SPEED)) {
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	791b      	ldrb	r3, [r3, #4]
 8003382:	f640 42cc 	movw	r2, #3276	@ 0xccc
 8003386:	4619      	mov	r1, r3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ff27 	bl	80031dc <PWM_SetDutyCycle>
 800338e:	4603      	mov	r3, r0
 8003390:	f083 0301 	eor.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <ESC_AutoCalibrate+0xb2>
        return false;
 800339a:	2300      	movs	r3, #0
 800339c:	e030      	b.n	8003400 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MIN_ESC_SPEED)) {
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	795b      	ldrb	r3, [r3, #5]
 80033a2:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80033a6:	4619      	mov	r1, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff17 	bl	80031dc <PWM_SetDutyCycle>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <ESC_AutoCalibrate+0xd2>
        return false;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e020      	b.n	8003400 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MIN_ESC_SPEED)) {
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	799b      	ldrb	r3, [r3, #6]
 80033c2:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80033c6:	4619      	mov	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ff07 	bl	80031dc <PWM_SetDutyCycle>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f083 0301 	eor.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <ESC_AutoCalibrate+0xf2>
        return false;
 80033da:	2300      	movs	r3, #0
 80033dc:	e010      	b.n	8003400 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MIN_ESC_SPEED)) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	79db      	ldrb	r3, [r3, #7]
 80033e2:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fef7 	bl	80031dc <PWM_SetDutyCycle>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f083 0301 	eor.w	r3, r3, #1
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <ESC_AutoCalibrate+0x112>
        return false;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <ESC_AutoCalibrate+0x114>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <ESC_Init+0x12>
        return NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	e036      	b.n	8003488 <ESC_Init+0x80>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 800341a:	2008      	movs	r0, #8
 800341c:	f00c fc26 	bl	800fc6c <pvPortMalloc>
 8003420:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00f      	beq.n	8003448 <ESC_Init+0x40>
        hesc->htim = htim;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]
        hesc->esc1 = PWM_CHANNEL_4;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2204      	movs	r2, #4
 8003432:	711a      	strb	r2, [r3, #4]
        hesc->esc2 = PWM_CHANNEL_2;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2202      	movs	r2, #2
 8003438:	715a      	strb	r2, [r3, #5]
        hesc->esc3 = PWM_CHANNEL_3;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2203      	movs	r2, #3
 800343e:	719a      	strb	r2, [r3, #6]
        hesc->esc4 = PWM_CHANNEL_1;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	71da      	strb	r2, [r3, #7]
 8003446:	e002      	b.n	800344e <ESC_Init+0x46>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f00c fc21 	bl	800fc90 <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc)) {
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7ff fe89 	bl	8003166 <PWM_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	f083 0301 	eor.w	r3, r3, #1
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d004      	beq.n	800346a <ESC_Init+0x62>
        LOG((uint8_t *)"ESCs  couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f00c fc15 	bl	800fc90 <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	e00e      	b.n	8003488 <ESC_Init+0x80>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff ff3e 	bl	80032ec <ESC_AutoCalibrate>
 8003470:	4603      	mov	r3, r0
 8003472:	f083 0301 	eor.w	r3, r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <ESC_Init+0x7e>
        LOG((uint8_t *)"ESCs couldn't be calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f00c fc07 	bl	800fc90 <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <ESC_Init+0x80>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint8_t channel, float speed) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	460b      	mov	r3, r1
 800349a:	ed87 0a01 	vstr	s0, [r7, #4]
 800349e:	72fb      	strb	r3, [r7, #11]

    uint32_t pwmValue;

    /* Check parameters */
    if (NULL == hesc->htim) {
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <ESC_SetSpeed+0x1c>
        return false;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e03d      	b.n	8003528 <ESC_SetSpeed+0x98>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 80034ac:	7afb      	ldrb	r3, [r7, #11]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d00a      	beq.n	80034c8 <ESC_SetSpeed+0x38>
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d007      	beq.n	80034c8 <ESC_SetSpeed+0x38>
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d004      	beq.n	80034c8 <ESC_SetSpeed+0x38>
 80034be:	7afb      	ldrb	r3, [r7, #11]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d001      	beq.n	80034c8 <ESC_SetSpeed+0x38>
        return false;
 80034c4:	2300      	movs	r3, #0
 80034c6:	e02f      	b.n	8003528 <ESC_SetSpeed+0x98>
    }
    if (speed < 0 || speed > 100) {
 80034c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80034cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	d408      	bmi.n	80034e8 <ESC_SetSpeed+0x58>
 80034d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80034da:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003530 <ESC_SetSpeed+0xa0>
 80034de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e6:	dd01      	ble.n	80034ec <ESC_SetSpeed+0x5c>
        return false;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e01d      	b.n	8003528 <ESC_SetSpeed+0x98>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, &pwmValue)) {
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4618      	mov	r0, r3
 80034f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80034f6:	f7ff feb3 	bl	8003260 <ESC_CalculatePWMDutyCycle>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f083 0301 	eor.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <ESC_SetSpeed+0x7a>
        return false;
 8003506:	2300      	movs	r3, #0
 8003508:	e00e      	b.n	8003528 <ESC_SetSpeed+0x98>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, pwmValue)) {
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	7afb      	ldrb	r3, [r7, #11]
 800350e:	4619      	mov	r1, r3
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7ff fe63 	bl	80031dc <PWM_SetDutyCycle>
 8003516:	4603      	mov	r3, r0
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <ESC_SetSpeed+0x96>
        return false;
 8003522:	2300      	movs	r3, #0
 8003524:	e000      	b.n	8003528 <ESC_SetSpeed+0x98>
    };

    return true;
 8003526:	2301      	movs	r3, #1
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	42c80000 	.word	0x42c80000

08003534 <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <IBUS_Init+0x12>
        return false;
 8003542:	2300      	movs	r3, #0
 8003544:	e00e      	b.n	8003564 <IBUS_Init+0x30>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7a1b      	ldrb	r3, [r3, #8]
 8003552:	461a      	mov	r2, r3
 8003554:	f005 fe61 	bl	800921a <HAL_UART_Receive_DMA>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <IBUS_Init+0x2e>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <IBUS_Init+0x30>
    }

    /* iBus initialization was successful */
    return true;
 8003562:	2301      	movs	r3, #1
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <FSA8S_CheckFirstBytes+0x12>
        return false;
 800357a:	2300      	movs	r3, #0
 800357c:	e00d      	b.n	800359a <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b20      	cmp	r3, #32
 8003586:	d107      	bne.n	8003598 <FSA8S_CheckFirstBytes+0x2c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	3301      	adds	r3, #1
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b40      	cmp	r3, #64	@ 0x40
 8003592:	d101      	bne.n	8003598 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8003598:	2300      	movs	r3, #0
    }
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 80035ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035b2:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <FSA8S_Checksum+0x18>
        return false;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e02c      	b.n	8003618 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	7a1b      	ldrb	r3, [r3, #8]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	b21a      	sxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	7a1b      	ldrb	r3, [r3, #8]
 80035d8:	3b02      	subs	r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b21b      	sxth	r3, r3
 80035e0:	4313      	orrs	r3, r2
 80035e2:	b21b      	sxth	r3, r3
 80035e4:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 80035e6:	2300      	movs	r3, #0
 80035e8:	737b      	strb	r3, [r7, #13]
 80035ea:	e00b      	b.n	8003604 <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	7b7b      	ldrb	r3, [r7, #13]
 80035f2:	4413      	add	r3, r2
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	89fb      	ldrh	r3, [r7, #14]
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 80035fe:	7b7b      	ldrb	r3, [r7, #13]
 8003600:	3301      	adds	r3, #1
 8003602:	737b      	strb	r3, [r7, #13]
 8003604:	7b7b      	ldrb	r3, [r7, #13]
 8003606:	2b1d      	cmp	r3, #29
 8003608:	d9f0      	bls.n	80035ec <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 800360a:	897a      	ldrh	r2, [r7, #10]
 800360c:	89fb      	ldrh	r3, [r7, #14]
 800360e:	429a      	cmp	r2, r3
 8003610:	d101      	bne.n	8003616 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 8003616:	2300      	movs	r3, #0
    }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d061      	beq.n	80036f6 <FSA8S_AmendData+0xd2>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 8003632:	2302      	movs	r3, #2
 8003634:	737b      	strb	r3, [r7, #13]
 8003636:	e058      	b.n	80036ea <FSA8S_AmendData+0xc6>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 8003638:	2300      	movs	r3, #0
 800363a:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	7b7b      	ldrb	r3, [r7, #13]
 8003642:	3301      	adds	r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	b21a      	sxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	7b7b      	ldrb	r3, [r7, #13]
 8003652:	440b      	add	r3, r1
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b21b      	sxth	r3, r3
 8003658:	4313      	orrs	r3, r2
 800365a:	b21b      	sxth	r3, r3
 800365c:	b29a      	uxth	r2, r3
 800365e:	7b7b      	ldrb	r3, [r7, #13]
 8003660:	3b02      	subs	r3, #2
 8003662:	0fd9      	lsrs	r1, r3, #31
 8003664:	440b      	add	r3, r1
 8003666:	105b      	asrs	r3, r3, #1
 8003668:	4619      	mov	r1, r3
 800366a:	4b26      	ldr	r3, [pc, #152]	@ (8003704 <FSA8S_AmendData+0xe0>)
 800366c:	5c5b      	ldrb	r3, [r3, r1]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 8003672:	89fb      	ldrh	r3, [r7, #14]
 8003674:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003678:	d308      	bcc.n	800368c <FSA8S_AmendData+0x68>
 800367a:	89fb      	ldrh	r3, [r7, #14]
 800367c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003680:	d804      	bhi.n	800368c <FSA8S_AmendData+0x68>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 8003682:	89fb      	ldrh	r3, [r7, #14]
 8003684:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003688:	81fb      	strh	r3, [r7, #14]
 800368a:	e001      	b.n	8003690 <FSA8S_AmendData+0x6c>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 800368c:	2300      	movs	r3, #0
 800368e:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 8003690:	89fb      	ldrh	r3, [r7, #14]
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800369a:	7b7b      	ldrb	r3, [r7, #13]
 800369c:	3b02      	subs	r3, #2
 800369e:	0fda      	lsrs	r2, r3, #31
 80036a0:	4413      	add	r3, r2
 80036a2:	105b      	asrs	r3, r3, #1
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b17      	ldr	r3, [pc, #92]	@ (8003704 <FSA8S_AmendData+0xe0>)
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b2:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8003708 <FSA8S_AmendData+0xe4>
 80036b6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80036ba:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8003708 <FSA8S_AmendData+0xe4>
 80036be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	7b7b      	ldrb	r3, [r7, #13]
 80036cc:	3b02      	subs	r3, #2
 80036ce:	0fd9      	lsrs	r1, r3, #31
 80036d0:	440b      	add	r3, r1
 80036d2:	105b      	asrs	r3, r3, #1
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036dc:	ee17 2a90 	vmov	r2, s15
 80036e0:	b292      	uxth	r2, r2
 80036e2:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 80036e4:	7b7b      	ldrb	r3, [r7, #13]
 80036e6:	3302      	adds	r3, #2
 80036e8:	737b      	strb	r3, [r7, #13]
 80036ea:	7b7a      	ldrb	r2, [r7, #13]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7a1b      	ldrb	r3, [r3, #8]
 80036f0:	3b02      	subs	r3, #2
 80036f2:	429a      	cmp	r2, r3
 80036f4:	dba0      	blt.n	8003638 <FSA8S_AmendData+0x14>
        }
    }
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000010 	.word	0x20000010
 8003708:	447a0000 	.word	0x447a0000

0800370c <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <FSA8S_Init+0x12>
        return NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	e04a      	b.n	80037b4 <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 800371e:	4b27      	ldr	r3, [pc, #156]	@ (80037bc <FSA8S_Init+0xb0>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <FSA8S_Init+0x1e>
        return NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	e044      	b.n	80037b4 <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 800372a:	2014      	movs	r0, #20
 800372c:	f00c fa9e 	bl	800fc6c <pvPortMalloc>
 8003730:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 8003732:	2020      	movs	r0, #32
 8003734:	f00c fa9a 	bl	800fc6c <pvPortMalloc>
 8003738:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 800373a:	201c      	movs	r0, #28
 800373c:	f00c fa96 	bl	800fc6c <pvPortMalloc>
 8003740:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00f      	beq.n	8003768 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2220      	movs	r2, #32
 8003758:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	220e      	movs	r2, #14
 8003764:	741a      	strb	r2, [r3, #16]
 8003766:	e00c      	b.n	8003782 <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	f00c fa8f 	bl	800fc90 <vPortFree>
        vPortFree(hibus->data);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	4618      	mov	r0, r3
 8003778:	f00c fa8a 	bl	800fc90 <vPortFree>
        vPortFree(hibus);
 800377c:	6978      	ldr	r0, [r7, #20]
 800377e:	f00c fa87 	bl	800fc90 <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f7ff fed6 	bl	8003534 <IBUS_Init>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 800378e:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <FSA8S_Init+0xb0>)
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
        return hibus;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	e00d      	b.n	80037b4 <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4618      	mov	r0, r3
 800379e:	f00c fa77 	bl	800fc90 <vPortFree>
        vPortFree(hibus->data);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f00c fa72 	bl	800fc90 <vPortFree>
        vPortFree(hibus);
 80037ac:	6978      	ldr	r0, [r7, #20]
 80037ae:	f00c fa6f 	bl	800fc90 <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 80037b2:	2300      	movs	r3, #0
    }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000bf0 	.word	0x20000bf0

080037c0 <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e029      	b.n	800382a <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <FSA8S_ReadChannel+0x22>
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	2b0e      	cmp	r3, #14
 80037e0:	d901      	bls.n	80037e6 <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e021      	b.n	800382a <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 80037e6:	bf00      	nop
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff febf 	bl	800356c <FSA8S_CheckFirstBytes>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f083 0301 	eor.w	r3, r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f6      	bne.n	80037e8 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fed3 	bl	80035a6 <FSA8S_Checksum>
 8003800:	4603      	mov	r3, r0
 8003802:	f083 0301 	eor.w	r3, r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 800380c:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 800380e:	e7ea      	b.n	80037e6 <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 8003810:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ff06 	bl	8003624 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8003822:	3b01      	subs	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	881b      	ldrh	r3, [r3, #0]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af02      	add	r7, sp, #8
 8003838:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <I2C_Init+0x12>
        return false;
 8003840:	2300      	movs	r3, #0
 8003842:	e010      	b.n	8003866 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6858      	ldr	r0, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7a19      	ldrb	r1, [r3, #8]
 800384c:	f107 030f 	add.w	r3, r7, #15
 8003850:	2201      	movs	r2, #1
 8003852:	9200      	str	r2, [sp, #0]
 8003854:	2275      	movs	r2, #117	@ 0x75
 8003856:	f000 f80a 	bl	800386e <I2C_Read>

    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	2b68      	cmp	r3, #104	@ 0x68
 800385e:	d101      	bne.n	8003864 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8003864:	2300      	movs	r3, #0
    }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 800386e:	b580      	push	{r7, lr}
 8003870:	b088      	sub	sp, #32
 8003872:	af04      	add	r7, sp, #16
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	72fb      	strb	r3, [r7, #11]
 800387c:	4613      	mov	r3, r2
 800387e:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <I2C_Read+0x1c>
        return false;
 8003886:	2300      	movs	r3, #0
 8003888:	e019      	b.n	80038be <I2C_Read+0x50>
    }
    if (NULL == data) {
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <I2C_Read+0x26>
        return false;
 8003890:	2300      	movs	r3, #0
 8003892:	e014      	b.n	80038be <I2C_Read+0x50>
    }

    /* Read I2C device data by passing a data register */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8003894:	7afb      	ldrb	r3, [r7, #11]
 8003896:	b299      	uxth	r1, r3
 8003898:	7abb      	ldrb	r3, [r7, #10]
 800389a:	b29a      	uxth	r2, r3
 800389c:	7e3b      	ldrb	r3, [r7, #24]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2064      	movs	r0, #100	@ 0x64
 80038a2:	9002      	str	r0, [sp, #8]
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2301      	movs	r3, #1
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f002 fbaf 	bl	8006010 <HAL_I2C_Mem_Read>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <I2C_Read+0x4e>
        /* END MODIFY 1 */
        /* Data couldn't be read */
        return false;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <I2C_Read+0x50>
    } else {
        /* Data read successfully */
        return true;
 80038bc:	2301      	movs	r3, #1
    }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b088      	sub	sp, #32
 80038ca:	af04      	add	r7, sp, #16
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	72fb      	strb	r3, [r7, #11]
 80038d4:	4613      	mov	r3, r2
 80038d6:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <I2C_Write+0x1c>
        return false;
 80038de:	2300      	movs	r3, #0
 80038e0:	e018      	b.n	8003914 <I2C_Write+0x4e>
    }
    if (NULL == data) {
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <I2C_Write+0x26>
        return false;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e013      	b.n	8003914 <I2C_Write+0x4e>
    }

    /* Write to I2C device register */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 80038ec:	7afb      	ldrb	r3, [r7, #11]
 80038ee:	b299      	uxth	r1, r3
 80038f0:	7abb      	ldrb	r3, [r7, #10]
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	2364      	movs	r3, #100	@ 0x64
 80038f6:	9302      	str	r3, [sp, #8]
 80038f8:	2301      	movs	r3, #1
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2301      	movs	r3, #1
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f002 fa8a 	bl	8005e1c <HAL_I2C_Mem_Write>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <I2C_Write+0x4c>
        /* END MODIFY 2 */
        /* Data couldn't be written */
        return false;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 8003912:	2301      	movs	r3, #1
    }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 8003924:	2014      	movs	r0, #20
 8003926:	f00c f9a1 	bl	800fc6c <pvPortMalloc>
 800392a:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 800392c:	2004      	movs	r0, #4
 800392e:	f00c f99d 	bl	800fc6c <pvPortMalloc>
 8003932:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <GY87_InstanceInit+0x24>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4618      	mov	r0, r3
 8003946:	f00c f9a3 	bl	800fc90 <vPortFree>
        vPortFree(hgy87);
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f00c f9a0 	bl	800fc90 <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	e01b      	b.n	800398c <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8003954:	4b0f      	ldr	r3, [pc, #60]	@ (8003994 <GY87_InstanceInit+0x78>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	22d0      	movs	r2, #208	@ 0xd0
 8003966:	721a      	strb	r2, [r3, #8]
 8003968:	e009      	b.n	800397e <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <GY87_InstanceInit+0x78>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2202      	movs	r2, #2
 8003976:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	22d1      	movs	r2, #209	@ 0xd1
 800397c:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000bf1 	.word	0x20000bf1

08003998 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af02      	add	r7, sp, #8
 800399e:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 80039a0:	2340      	movs	r3, #64	@ 0x40
 80039a2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6858      	ldr	r0, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	7a19      	ldrb	r1, [r3, #8]
 80039ac:	f107 030f 	add.w	r3, r7, #15
 80039b0:	2200      	movs	r2, #0
 80039b2:	9200      	str	r2, [sp, #0]
 80039b4:	226b      	movs	r2, #107	@ 0x6b
 80039b6:	f000 fabb 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b086      	sub	sp, #24
 80039c6:	af02      	add	r7, sp, #8
 80039c8:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6858      	ldr	r0, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	7a19      	ldrb	r1, [r3, #8]
 80039d6:	f107 030f 	add.w	r3, r7, #15
 80039da:	2201      	movs	r2, #1
 80039dc:	9200      	str	r2, [sp, #0]
 80039de:	226b      	movs	r2, #107	@ 0x6b
 80039e0:	f000 faa6 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6858      	ldr	r0, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	7a19      	ldrb	r1, [r3, #8]
 8003a00:	f107 030f 	add.w	r3, r7, #15
 8003a04:	2201      	movs	r2, #1
 8003a06:	9200      	str	r2, [sp, #0]
 8003a08:	2219      	movs	r2, #25
 8003a0a:	f000 fa91 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <MPU6050_EnableDLPF>:

static void MPU6050_EnableDLPF(GY87_HandleTypeDef_t * hgy87) {
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b086      	sub	sp, #24
 8003a1a:	af02      	add	r7, sp, #8
 8003a1c:	6078      	str	r0, [r7, #4]

    /* Enable digital low pass filter */
    uint8_t regData;

    regData = MPU_6050_BIT_CONFIG_DLPF_CFG_5;
 8003a1e:	2305      	movs	r3, #5
 8003a20:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_CONFIG, &regData, MPU6050_SET_BIT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6858      	ldr	r0, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7a19      	ldrb	r1, [r3, #8]
 8003a2a:	f107 030f 	add.w	r3, r7, #15
 8003a2e:	2201      	movs	r2, #1
 8003a30:	9200      	str	r2, [sp, #0]
 8003a32:	221a      	movs	r2, #26
 8003a34:	f000 fa7c 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_1; // Full range
 8003a48:	2308      	movs	r3, #8
 8003a4a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6858      	ldr	r0, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7a19      	ldrb	r1, [r3, #8]
 8003a54:	f107 030f 	add.w	r3, r7, #15
 8003a58:	2201      	movs	r2, #1
 8003a5a:	9200      	str	r2, [sp, #0]
 8003a5c:	221b      	movs	r2, #27
 8003a5e:	f000 fa67 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af02      	add	r7, sp, #8
 8003a70:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_2; // Full range
 8003a72:	2310      	movs	r3, #16
 8003a74:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6858      	ldr	r0, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7a19      	ldrb	r1, [r3, #8]
 8003a7e:	f107 030f 	add.w	r3, r7, #15
 8003a82:	2201      	movs	r2, #1
 8003a84:	9200      	str	r2, [sp, #0]
 8003a86:	221c      	movs	r2, #28
 8003a88:	f000 fa52 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6858      	ldr	r0, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7a19      	ldrb	r1, [r3, #8]
 8003aa8:	f107 030f 	add.w	r3, r7, #15
 8003aac:	2201      	movs	r2, #1
 8003aae:	9200      	str	r2, [sp, #0]
 8003ab0:	226a      	movs	r2, #106	@ 0x6a
 8003ab2:	f000 fa3d 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6858      	ldr	r0, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	7a19      	ldrb	r1, [r3, #8]
 8003ad2:	f107 030f 	add.w	r3, r7, #15
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	9200      	str	r2, [sp, #0]
 8003ada:	226a      	movs	r2, #106	@ 0x6a
 8003adc:	f000 fa28 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8003af0:	2302      	movs	r3, #2
 8003af2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6858      	ldr	r0, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7a19      	ldrb	r1, [r3, #8]
 8003afc:	f107 030f 	add.w	r3, r7, #15
 8003b00:	2201      	movs	r2, #1
 8003b02:	9200      	str	r2, [sp, #0]
 8003b04:	2237      	movs	r2, #55	@ 0x37
 8003b06:	f000 fa13 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af02      	add	r7, sp, #8
 8003b18:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6858      	ldr	r0, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	7a19      	ldrb	r1, [r3, #8]
 8003b26:	f107 030f 	add.w	r3, r7, #15
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	9200      	str	r2, [sp, #0]
 8003b2e:	2237      	movs	r2, #55	@ 0x37
 8003b30:	f000 f9fe 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = MPU_6050_BIT_I2C_MST_CTRL_CLK_13;
 8003b44:	230d      	movs	r3, #13
 8003b46:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6858      	ldr	r0, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7a19      	ldrb	r1, [r3, #8]
 8003b50:	f107 030f 	add.w	r3, r7, #15
 8003b54:	2201      	movs	r2, #1
 8003b56:	9200      	str	r2, [sp, #0]
 8003b58:	2224      	movs	r2, #36	@ 0x24
 8003b5a:	f000 f9e9 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af02      	add	r7, sp, #8
 8003b6c:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = 0x80 | QMC5883L_AUX_VAL_I2C_ADDR;
 8003b6e:	238d      	movs	r3, #141	@ 0x8d
 8003b70:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6858      	ldr	r0, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	7a19      	ldrb	r1, [r3, #8]
 8003b7a:	f107 030f 	add.w	r3, r7, #15
 8003b7e:	2201      	movs	r2, #1
 8003b80:	9200      	str	r2, [sp, #0]
 8003b82:	2225      	movs	r2, #37	@ 0x25
 8003b84:	f000 f9d4 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6858      	ldr	r0, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7a19      	ldrb	r1, [r3, #8]
 8003b94:	f107 030f 	add.w	r3, r7, #15
 8003b98:	2201      	movs	r2, #1
 8003b9a:	9200      	str	r2, [sp, #0]
 8003b9c:	2226      	movs	r2, #38	@ 0x26
 8003b9e:	f000 f9c7 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8003ba2:	2386      	movs	r3, #134	@ 0x86
 8003ba4:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6858      	ldr	r0, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	7a19      	ldrb	r1, [r3, #8]
 8003bae:	f107 030f 	add.w	r3, r7, #15
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	9200      	str	r2, [sp, #0]
 8003bb6:	2227      	movs	r2, #39	@ 0x27
 8003bb8:	f000 f9ba 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <MPU6050_Configure_BMP180>:

static void MPU6050_Configure_BMP180(GY87_HandleTypeDef_t * hgy87) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

    /* Configure slave BMP180 barometer in MPU6050 */
    uint8_t regData;

    /* Set slave BMP180 barometer device address (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0x80 | BMP180_AUX_VAL_I2C_ADDR;
 8003bcc:	23f7      	movs	r3, #247	@ 0xf7
 8003bce:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_ADDR, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_ADDR, &regData);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6858      	ldr	r0, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	7a19      	ldrb	r1, [r3, #8]
 8003bd8:	f107 030f 	add.w	r3, r7, #15
 8003bdc:	2228      	movs	r2, #40	@ 0x28
 8003bde:	f000 f994 	bl	8003f0a <MPU6050_WriteRegister>

    /* Set slave BMP180 barometer registers addresses to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0xF6;
 8003be2:	23f6      	movs	r3, #246	@ 0xf6
 8003be4:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_REG, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_REG, &regData);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6858      	ldr	r0, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	7a19      	ldrb	r1, [r3, #8]
 8003bee:	f107 030f 	add.w	r3, r7, #15
 8003bf2:	2229      	movs	r2, #41	@ 0x29
 8003bf4:	f000 f989 	bl	8003f0a <MPU6050_WriteRegister>

    /* Set slave BMP180 barometer number of registers to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0x80 | 0x03;
 8003bf8:	2383      	movs	r3, #131	@ 0x83
 8003bfa:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6858      	ldr	r0, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7a19      	ldrb	r1, [r3, #8]
 8003c04:	f107 030f 	add.w	r3, r7, #15
 8003c08:	222a      	movs	r2, #42	@ 0x2a
 8003c0a:	f000 f97e 	bl	8003f0a <MPU6050_WriteRegister>
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <GY87_Configure>:

static bool_t GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff feba 	bl	8003998 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fecc 	bl	80039c2 <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fede 	bl	80039ec <MPU6050_SetSampleDivider>

    /* Enable digital low pass filter */
    MPU6050_EnableDLPF(hgy87);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fef0 	bl	8003a16 <MPU6050_EnableDLPF>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ff02 	bl	8003a40 <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ff14 	bl	8003a6a <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff ff3b 	bl	8003abe <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ff4d 	bl	8003ae8 <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f82d 	bl	8003cae <QMC5883L_TestConnection>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f083 0301 	eor.w	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <GY87_Configure+0x4e>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer not detected.\r\n\n", LOG_ERROR);
#endif
        return false;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e020      	b.n	8003ca6 <GY87_Configure+0x90>
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f852 	bl	8003d0e <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!BMP180_TestConnection(hgy87)) {
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f837 	bl	8003cde <BMP180_TestConnection>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f083 0301 	eor.w	r3, r3, #1
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <GY87_Configure+0x6a>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"BMP180 barometer not detected.\r\n\n", LOG_ERROR);
#endif
        return false;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e012      	b.n	8003ca6 <GY87_Configure+0x90>
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hgy87);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f871 	bl	8003d68 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ff43 	bl	8003b12 <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff01 	bl	8003a94 <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ff52 	bl	8003b3c <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff64 	bl	8003b66 <MPU6050_Configure_QMC5883l>

    /* Configure slave BMP180 barometer in MPU6050 */
    MPU6050_Configure_BMP180(hgy87);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff ff90 	bl	8003bc4 <MPU6050_Configure_BMP180>

    return true;
 8003ca4:	2301      	movs	r3, #1
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af02      	add	r7, sp, #8
 8003cb4:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6858      	ldr	r0, [r3, #4]
 8003cba:	f107 030f 	add.w	r3, r7, #15
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	9200      	str	r2, [sp, #0]
 8003cc2:	220d      	movs	r2, #13
 8003cc4:	211a      	movs	r1, #26
 8003cc6:	f000 f90b 	bl	8003ee0 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	2bff      	cmp	r3, #255	@ 0xff
 8003cce:	d001      	beq.n	8003cd4 <QMC5883L_TestConnection+0x26>
        return false;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 8003cd4:	2301      	movs	r3, #1
    }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <BMP180_TestConnection>:

static bool_t BMP180_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af02      	add	r7, sp, #8
 8003ce4:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, BMP180_REG_ID, &regData, sizeof(regData));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6858      	ldr	r0, [r3, #4]
 8003cea:	f107 030f 	add.w	r3, r7, #15
 8003cee:	2201      	movs	r2, #1
 8003cf0:	9200      	str	r2, [sp, #0]
 8003cf2:	22d0      	movs	r2, #208	@ 0xd0
 8003cf4:	21ee      	movs	r1, #238	@ 0xee
 8003cf6:	f000 f8f3 	bl	8003ee0 <MPU6050_ReadRegister>

    if (BMP180_AUX_VAL_ID != regData) {
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b55      	cmp	r3, #85	@ 0x55
 8003cfe:	d001      	beq.n	8003d04 <BMP180_TestConnection+0x26>
        return false;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <BMP180_TestConnection+0x28>
    } else {
        return true;
 8003d04:	2301      	movs	r3, #1
    }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af02      	add	r7, sp, #8
 8003d14:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6858      	ldr	r0, [r3, #4]
 8003d1e:	f107 030f 	add.w	r3, r7, #15
 8003d22:	2201      	movs	r2, #1
 8003d24:	9200      	str	r2, [sp, #0]
 8003d26:	220b      	movs	r2, #11
 8003d28:	211a      	movs	r1, #26
 8003d2a:	f000 f901 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 8003d2e:	231d      	movs	r3, #29
 8003d30:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6858      	ldr	r0, [r3, #4]
 8003d36:	f107 030f 	add.w	r3, r7, #15
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	9200      	str	r2, [sp, #0]
 8003d3e:	2209      	movs	r2, #9
 8003d40:	211a      	movs	r1, #26
 8003d42:	f000 f8f5 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6858      	ldr	r0, [r3, #4]
 8003d4e:	f107 030f 	add.w	r3, r7, #15
 8003d52:	2201      	movs	r2, #1
 8003d54:	9200      	str	r2, [sp, #0]
 8003d56:	220a      	movs	r2, #10
 8003d58:	211a      	movs	r1, #26
 8003d5a:	f000 f8e9 	bl	8003f30 <MPU6050_WriteRegisterBitmasked>
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <BMP180_Configure>:

static void BMP180_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	6078      	str	r0, [r7, #4]

    /* Configure BMP180 barometer */
    uint8_t regData;
    uint8_t temperatureRawData[2] = {0};
 8003d70:	2300      	movs	r3, #0
 8003d72:	81bb      	strh	r3, [r7, #12]

    /* Read calibration data */
    BMP180_ReadCalibrationData(hgy87);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f82b 	bl	8003dd0 <BMP180_ReadCalibrationData>

    /* Read uncompensated temperature */
    regData = 0x2E;
 8003d7a:	232e      	movs	r3, #46	@ 0x2e
 8003d7c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6858      	ldr	r0, [r3, #4]
 8003d82:	f107 030f 	add.w	r3, r7, #15
 8003d86:	22f4      	movs	r2, #244	@ 0xf4
 8003d88:	21ee      	movs	r1, #238	@ 0xee
 8003d8a:	f000 f8be 	bl	8003f0a <MPU6050_WriteRegister>
    // vTaskDelay(pdMS_TO_TICKS(5));
    // HAL_Delay(5);
#else
    // HAL_Delay(5);
#endif
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF6, temperatureRawData, 2 * sizeof(uint8_t));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6858      	ldr	r0, [r3, #4]
 8003d92:	f107 030c 	add.w	r3, r7, #12
 8003d96:	2202      	movs	r2, #2
 8003d98:	9200      	str	r2, [sp, #0]
 8003d9a:	22f6      	movs	r2, #246	@ 0xf6
 8003d9c:	21ee      	movs	r1, #238	@ 0xee
 8003d9e:	f000 f89f 	bl	8003ee0 <MPU6050_ReadRegister>
    BMP180_CalibrationData.UT = (temperatureRawData[0] << 8) | temperatureRawData[1];
 8003da2:	7b3b      	ldrb	r3, [r7, #12]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	7b7a      	ldrb	r2, [r7, #13]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	4a08      	ldr	r2, [pc, #32]	@ (8003dcc <BMP180_Configure+0x64>)
 8003dac:	61d3      	str	r3, [r2, #28]

    /* Write register to read uncompensated pressure in the future */
    regData = 0x34 | (BMP180_OVERSAMPLING << 6);
 8003dae:	23b4      	movs	r3, #180	@ 0xb4
 8003db0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6858      	ldr	r0, [r3, #4]
 8003db6:	f107 030f 	add.w	r3, r7, #15
 8003dba:	22f4      	movs	r2, #244	@ 0xf4
 8003dbc:	21ee      	movs	r1, #238	@ 0xee
 8003dbe:	f000 f8a4 	bl	8003f0a <MPU6050_WriteRegister>
//    LOG(loggingStr, LOG_DEBUGGING);
//
//    sprintf((char *)loggingStr, (const char *)"BMP180_Configure(): UP = %d P\r\n", uncompensatedPressure);
//    LOG(loggingStr, LOG_DEBUGGING);
    /* DEBUGGING DELETE */
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000bf4 	.word	0x20000bf4

08003dd0 <BMP180_ReadCalibrationData>:

static void BMP180_ReadCalibrationData(GY87_HandleTypeDef_t * hgy87) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	@ 0x28
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]

    uint8_t callibrationData[22] = {0};
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	821a      	strh	r2, [r3, #16]
    uint16_t startRegisterAddress = 0xAA;
 8003dec:	23aa      	movs	r3, #170	@ 0xaa
 8003dee:	83fb      	strh	r3, [r7, #30]

    /* Read calibration data */
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, startRegisterAddress, callibrationData, sizeof(callibrationData));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6858      	ldr	r0, [r3, #4]
 8003df4:	8bfb      	ldrh	r3, [r7, #30]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	f107 0308 	add.w	r3, r7, #8
 8003dfc:	2116      	movs	r1, #22
 8003dfe:	9100      	str	r1, [sp, #0]
 8003e00:	21ee      	movs	r1, #238	@ 0xee
 8003e02:	f000 f86d 	bl	8003ee0 <MPU6050_ReadRegister>

    BMP180_CalibrationData.AC1 = ((callibrationData[0] << 8) | callibrationData[1]);
 8003e06:	7a3b      	ldrb	r3, [r7, #8]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	b21a      	sxth	r2, r3
 8003e0c:	7a7b      	ldrb	r3, [r7, #9]
 8003e0e:	b21b      	sxth	r3, r3
 8003e10:	4313      	orrs	r3, r2
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	4b31      	ldr	r3, [pc, #196]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003e16:	801a      	strh	r2, [r3, #0]
    BMP180_CalibrationData.AC2 = ((callibrationData[2] << 8) | callibrationData[3]);
 8003e18:	7abb      	ldrb	r3, [r7, #10]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	b21a      	sxth	r2, r3
 8003e1e:	7afb      	ldrb	r3, [r7, #11]
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b21a      	sxth	r2, r3
 8003e26:	4b2d      	ldr	r3, [pc, #180]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003e28:	805a      	strh	r2, [r3, #2]
    BMP180_CalibrationData.AC3 = ((callibrationData[4] << 8) | callibrationData[5]);
 8003e2a:	7b3b      	ldrb	r3, [r7, #12]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	b21a      	sxth	r2, r3
 8003e30:	7b7b      	ldrb	r3, [r7, #13]
 8003e32:	b21b      	sxth	r3, r3
 8003e34:	4313      	orrs	r3, r2
 8003e36:	b21a      	sxth	r2, r3
 8003e38:	4b28      	ldr	r3, [pc, #160]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003e3a:	809a      	strh	r2, [r3, #4]
    BMP180_CalibrationData.AC4 = ((callibrationData[6] << 8) | callibrationData[7]);
 8003e3c:	7bbb      	ldrb	r3, [r7, #14]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	b21a      	sxth	r2, r3
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	4b23      	ldr	r3, [pc, #140]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003e4e:	80da      	strh	r2, [r3, #6]
    BMP180_CalibrationData.AC5 = ((callibrationData[8] << 8) | callibrationData[9]);
 8003e50:	7c3b      	ldrb	r3, [r7, #16]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	b21a      	sxth	r2, r3
 8003e56:	7c7b      	ldrb	r3, [r7, #17]
 8003e58:	b21b      	sxth	r3, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b21b      	sxth	r3, r3
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003e62:	811a      	strh	r2, [r3, #8]
    BMP180_CalibrationData.AC6 = ((callibrationData[10] << 8) | callibrationData[11]);
 8003e64:	7cbb      	ldrb	r3, [r7, #18]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	b21a      	sxth	r2, r3
 8003e6a:	7cfb      	ldrb	r3, [r7, #19]
 8003e6c:	b21b      	sxth	r3, r3
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003e76:	815a      	strh	r2, [r3, #10]
    BMP180_CalibrationData.B1 = ((callibrationData[12] << 8) | callibrationData[13]);
 8003e78:	7d3b      	ldrb	r3, [r7, #20]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	b21a      	sxth	r2, r3
 8003e7e:	7d7b      	ldrb	r3, [r7, #21]
 8003e80:	b21b      	sxth	r3, r3
 8003e82:	4313      	orrs	r3, r2
 8003e84:	b21a      	sxth	r2, r3
 8003e86:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003e88:	819a      	strh	r2, [r3, #12]
    BMP180_CalibrationData.B2 = ((callibrationData[14] << 8) | callibrationData[15]);
 8003e8a:	7dbb      	ldrb	r3, [r7, #22]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	b21a      	sxth	r2, r3
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
 8003e92:	b21b      	sxth	r3, r3
 8003e94:	4313      	orrs	r3, r2
 8003e96:	b21a      	sxth	r2, r3
 8003e98:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003e9a:	81da      	strh	r2, [r3, #14]
    BMP180_CalibrationData.MB = ((callibrationData[16] << 8) | callibrationData[17]);
 8003e9c:	7e3b      	ldrb	r3, [r7, #24]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	b21a      	sxth	r2, r3
 8003ea2:	7e7b      	ldrb	r3, [r7, #25]
 8003ea4:	b21b      	sxth	r3, r3
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	b21a      	sxth	r2, r3
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003eac:	829a      	strh	r2, [r3, #20]
    BMP180_CalibrationData.MC = ((callibrationData[18] << 8) | callibrationData[19]);
 8003eae:	7ebb      	ldrb	r3, [r7, #26]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	b21a      	sxth	r2, r3
 8003eb4:	7efb      	ldrb	r3, [r7, #27]
 8003eb6:	b21b      	sxth	r3, r3
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	b21a      	sxth	r2, r3
 8003ebc:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003ebe:	82da      	strh	r2, [r3, #22]
    BMP180_CalibrationData.MD = ((callibrationData[20] << 8) | callibrationData[21]);
 8003ec0:	7f3b      	ldrb	r3, [r7, #28]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	b21a      	sxth	r2, r3
 8003ec6:	7f7b      	ldrb	r3, [r7, #29]
 8003ec8:	b21b      	sxth	r3, r3
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	b21a      	sxth	r2, r3
 8003ece:	4b03      	ldr	r3, [pc, #12]	@ (8003edc <BMP180_ReadCalibrationData+0x10c>)
 8003ed0:	831a      	strh	r2, [r3, #24]
}
 8003ed2:	bf00      	nop
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000bf4 	.word	0x20000bf4

08003ee0 <MPU6050_ReadRegister>:
    /* DEBUGGING DELETE */

    return uncompensatedPressure;
}

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	72fb      	strb	r3, [r7, #11]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 8003ef2:	7aba      	ldrb	r2, [r7, #10]
 8003ef4:	7af9      	ldrb	r1, [r7, #11]
 8003ef6:	7e3b      	ldrb	r3, [r7, #24]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff fcb6 	bl	800386e <I2C_Read>
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	72fb      	strb	r3, [r7, #11]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 8003f1c:	7aba      	ldrb	r2, [r7, #10]
 8003f1e:	7af9      	ldrb	r1, [r7, #11]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff fccf 	bl	80038c6 <I2C_Write>
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	72fb      	strb	r3, [r7, #11]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 8003f42:	f107 0317 	add.w	r3, r7, #23
 8003f46:	7aba      	ldrb	r2, [r7, #10]
 8003f48:	7af9      	ldrb	r1, [r7, #11]
 8003f4a:	2001      	movs	r0, #1
 8003f4c:	9000      	str	r0, [sp, #0]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff ffc6 	bl	8003ee0 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 8003f54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	75bb      	strb	r3, [r7, #22]
 8003f68:	e00a      	b.n	8003f80 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	b25b      	sxtb	r3, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	b25a      	sxtb	r2, r3
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	4013      	ands	r3, r2
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8003f80:	f107 0316 	add.w	r3, r7, #22
 8003f84:	7aba      	ldrb	r2, [r7, #10]
 8003f86:	7af9      	ldrb	r1, [r7, #11]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff ffbe 	bl	8003f0a <MPU6050_WriteRegister>
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <GY87_Init+0x12>
        return NULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e028      	b.n	8003ffc <GY87_Init+0x64>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 8003faa:	4b16      	ldr	r3, [pc, #88]	@ (8004004 <GY87_Init+0x6c>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d101      	bne.n	8003fb6 <GY87_Init+0x1e>
        return NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e022      	b.n	8003ffc <GY87_Init+0x64>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fcb0 	bl	800391c <GY87_InstanceInit>
 8003fbc:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01a      	beq.n	8003ffa <GY87_Init+0x62>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff fc34 	bl	8003832 <I2C_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <GY87_Init+0x4e>
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f7ff fe20 	bl	8003c16 <GY87_Configure>

            instancesNumber++;
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <GY87_Init+0x6c>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <GY87_Init+0x6c>)
 8003fe0:	701a      	strb	r2, [r3, #0]

            return hgy87;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	e00a      	b.n	8003ffc <GY87_Init+0x64>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f00b fe50 	bl	800fc90 <vPortFree>
            vPortFree(hgy87);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f00b fe4d 	bl	800fc90 <vPortFree>
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
#endif
            return NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <GY87_Init+0x64>

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
#endif
        return NULL;
 8003ffa:	2300      	movs	r3, #0
    }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000bf1 	.word	0x20000bf1

08004008 <GY87_CalibrateGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

bool_t GY87_CalibrateGyroscope(GY87_HandleTypeDef_t * hgy87) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	@ 0x30
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

    /* Declare structure to read the gyroscope values */
    GY87_gyroscopeValues_t gyroscopeValues;

    /* Declare variables to accumulate measurements */
    float ratesRoll = 0;
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float ratesPitch = 0;
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float ratesYaw = 0;
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check parameter and calculate calibration value */
    if (NULL != hgy87) {
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d044      	beq.n	80040b2 <GY87_CalibrateGyroscope+0xaa>

        /* Calibrate gyroscope measurements */
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8004028:	2300      	movs	r3, #0
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	e020      	b.n	8004070 <GY87_CalibrateGyroscope+0x68>

            /* Read gyroscope values */
            GY87_ReadGyroscope(hgy87, &gyroscopeValues);
 800402e:	f107 030c 	add.w	r3, r7, #12
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f849 	bl	80040cc <GY87_ReadGyroscope>

            /* Accumulate measurements */
            ratesRoll += gyroscopeValues.rotationRateRoll;
 800403a:	edd7 7a05 	vldr	s15, [r7, #20]
 800403e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004046:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            ratesPitch += gyroscopeValues.rotationRatePitch;
 800404a:	edd7 7a06 	vldr	s15, [r7, #24]
 800404e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004056:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            ratesYaw += gyroscopeValues.rotationRateYaw;
 800405a:	edd7 7a07 	vldr	s15, [r7, #28]
 800405e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004066:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	3301      	adds	r3, #1
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004076:	dbda      	blt.n	800402e <GY87_CalibrateGyroscope+0x26>
        }

        gyroscopeCalibrationRoll = ratesRoll / GY87_CALIBRATION_ITERATIONS;
 8004078:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800407c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80040bc <GY87_CalibrateGyroscope+0xb4>
 8004080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004084:	4b0e      	ldr	r3, [pc, #56]	@ (80040c0 <GY87_CalibrateGyroscope+0xb8>)
 8004086:	edc3 7a00 	vstr	s15, [r3]
        gyroscopeCalibrationPitch = ratesPitch / GY87_CALIBRATION_ITERATIONS;
 800408a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800408e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80040bc <GY87_CalibrateGyroscope+0xb4>
 8004092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004096:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <GY87_CalibrateGyroscope+0xbc>)
 8004098:	edc3 7a00 	vstr	s15, [r3]
        gyroscopeCalibrationYaw = ratesYaw / GY87_CALIBRATION_ITERATIONS;
 800409c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80040a0:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80040bc <GY87_CalibrateGyroscope+0xb4>
 80040a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040a8:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <GY87_CalibrateGyroscope+0xc0>)
 80040aa:	edc3 7a00 	vstr	s15, [r3]

#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"Gyroscope calibration done.\r\n\n", LOG_INFORMATION);
#endif

        return true;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <GY87_CalibrateGyroscope+0xac>

    } else {

        return false;
 80040b2:	2300      	movs	r3, #0
    }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3730      	adds	r7, #48	@ 0x30
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	44fa0000 	.word	0x44fa0000
 80040c0:	20000c18 	.word	0x20000c18
 80040c4:	20000c1c 	.word	0x20000c1c
 80040c8:	20000c20 	.word	0x20000c20

080040cc <GY87_ReadGyroscope>:

void GY87_ReadGyroscope(GY87_HandleTypeDef_t * hgy87, GY87_gyroscopeValues_t * gyroscopeValues) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_0500;
 80040d6:	2341      	movs	r3, #65	@ 0x41
 80040d8:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != gyroscopeValues) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8086 	beq.w	80041ee <GY87_ReadGyroscope+0x122>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8082 	beq.w	80041ee <GY87_ReadGyroscope+0x122>

        /* Read gyroscope raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6858      	ldr	r0, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	7a19      	ldrb	r1, [r3, #8]
 80040f2:	f107 030c 	add.w	r3, r7, #12
 80040f6:	2202      	movs	r2, #2
 80040f8:	9200      	str	r2, [sp, #0]
 80040fa:	2243      	movs	r2, #67	@ 0x43
 80040fc:	f7ff fef0 	bl	8003ee0 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8004100:	7b3b      	ldrb	r3, [r7, #12]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	b21a      	sxth	r2, r3
 8004106:	7b7b      	ldrb	r3, [r7, #13]
 8004108:	b21b      	sxth	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b21a      	sxth	r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	801a      	strh	r2, [r3, #0]
        /* Calculate gyroscope rotation rate along X axis (roll) */
        gyroscopeValues->rotationRateRoll = ((float)gyroscopeValues->rawValueX / scaleFactor) - gyroscopeCalibrationRoll;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004120:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004124:	ee07 3a90 	vmov	s15, r3
 8004128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800412c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004130:	4b3c      	ldr	r3, [pc, #240]	@ (8004224 <GY87_ReadGyroscope+0x158>)
 8004132:	edd3 7a00 	vldr	s15, [r3]
 8004136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Read gyroscope raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6858      	ldr	r0, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	7a19      	ldrb	r1, [r3, #8]
 8004148:	f107 030c 	add.w	r3, r7, #12
 800414c:	2202      	movs	r2, #2
 800414e:	9200      	str	r2, [sp, #0]
 8004150:	2245      	movs	r2, #69	@ 0x45
 8004152:	f7ff fec5 	bl	8003ee0 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8004156:	7b3b      	ldrb	r3, [r7, #12]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	b21a      	sxth	r2, r3
 800415c:	7b7b      	ldrb	r3, [r7, #13]
 800415e:	b21b      	sxth	r3, r3
 8004160:	4313      	orrs	r3, r2
 8004162:	b21a      	sxth	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	805a      	strh	r2, [r3, #2]
        /* Calculate gyroscope rotation rate along Y axis (pitch) */
        gyroscopeValues->rotationRatePitch = ((float)gyroscopeValues->rawValueY / scaleFactor) - gyroscopeCalibrationPitch;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004186:	4b28      	ldr	r3, [pc, #160]	@ (8004228 <GY87_ReadGyroscope+0x15c>)
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	edc3 7a03 	vstr	s15, [r3, #12]

        /* Read gyroscope raw value for Z axis  */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6858      	ldr	r0, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	7a19      	ldrb	r1, [r3, #8]
 800419e:	f107 030c 	add.w	r3, r7, #12
 80041a2:	2202      	movs	r2, #2
 80041a4:	9200      	str	r2, [sp, #0]
 80041a6:	2247      	movs	r2, #71	@ 0x47
 80041a8:	f7ff fe9a 	bl	8003ee0 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 80041ac:	7b3b      	ldrb	r3, [r7, #12]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	b21a      	sxth	r2, r3
 80041b2:	7b7b      	ldrb	r3, [r7, #13]
 80041b4:	b21b      	sxth	r3, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	b21a      	sxth	r2, r3
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	809a      	strh	r2, [r3, #4]
        /* Calculate gyroscope rotation rate along Z axis (yaw)  */
        gyroscopeValues->rotationRateYaw = ((float)gyroscopeValues->rawValueZ / scaleFactor) - gyroscopeCalibrationYaw;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80041cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041d0:	ee07 3a90 	vmov	s15, r3
 80041d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041dc:	4b13      	ldr	r3, [pc, #76]	@ (800422c <GY87_ReadGyroscope+0x160>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	edc3 7a04 	vstr	s15, [r3, #16]
 80041ec:	e015      	b.n	800421a <GY87_ReadGyroscope+0x14e>

    } else {

        /* Wrong parameters */
        gyroscopeValues->rawValueX = 0;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2200      	movs	r2, #0
 80041f2:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->rawValueY = 0;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->rawValueZ = 0;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2200      	movs	r2, #0
 80041fe:	809a      	strh	r2, [r3, #4]
        gyroscopeValues->rotationRateRoll = 0;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	609a      	str	r2, [r3, #8]
        gyroscopeValues->rotationRatePitch = 0;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	60da      	str	r2, [r3, #12]
        gyroscopeValues->rotationRateYaw = 0;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	611a      	str	r2, [r3, #16]
    }
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000c18 	.word	0x20000c18
 8004228:	20000c1c 	.word	0x20000c1c
 800422c:	20000c20 	.word	0x20000c20

08004230 <GY87_CalibrateAccelerometer>:

bool_t GY87_CalibrateAccelerometer(GY87_HandleTypeDef_t * hgy87) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b08e      	sub	sp, #56	@ 0x38
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

    /* Declare structure to read the accelerometer values */
    GY87_accelerometerValues_t accelerometerValues;

    /* Declare variables to accumulate measurements */
    float linearAccelerationsX = 0;
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	637b      	str	r3, [r7, #52]	@ 0x34
    float linearAccelerationsY = 0;
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	633b      	str	r3, [r7, #48]	@ 0x30
    float linearAccelerationsZ = 0;
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Check parameter and calculate calibration value */
    if (NULL != hgy87) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d044      	beq.n	80042da <GY87_CalibrateAccelerometer+0xaa>

        /* Calibrate gyroscope measurements */
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8004250:	2300      	movs	r3, #0
 8004252:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004254:	e020      	b.n	8004298 <GY87_CalibrateAccelerometer+0x68>

            /* Read gyroscope values */
            GY87_ReadAccelerometer(hgy87, &accelerometerValues);
 8004256:	f107 030c 	add.w	r3, r7, #12
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f84b 	bl	80042f8 <GY87_ReadAccelerometer>

            /* Accumulate measurements */
            linearAccelerationsX += accelerometerValues.linearAccelerationX;
 8004262:	edd7 7a05 	vldr	s15, [r7, #20]
 8004266:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800426a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800426e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            linearAccelerationsY += accelerometerValues.linearAccelerationY;
 8004272:	edd7 7a06 	vldr	s15, [r7, #24]
 8004276:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800427a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            linearAccelerationsZ += accelerometerValues.linearAccelerationZ;
 8004282:	edd7 7a07 	vldr	s15, [r7, #28]
 8004286:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800428a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800428e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8004292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004294:	3301      	adds	r3, #1
 8004296:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800429e:	dbda      	blt.n	8004256 <GY87_CalibrateAccelerometer+0x26>
        }

        accelerometerCalibrationX = linearAccelerationsX / GY87_CALIBRATION_ITERATIONS;
 80042a0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80042a4:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80042e4 <GY87_CalibrateAccelerometer+0xb4>
 80042a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042ac:	4b0e      	ldr	r3, [pc, #56]	@ (80042e8 <GY87_CalibrateAccelerometer+0xb8>)
 80042ae:	edc3 7a00 	vstr	s15, [r3]
        accelerometerCalibrationY = linearAccelerationsY / GY87_CALIBRATION_ITERATIONS;
 80042b2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80042b6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80042e4 <GY87_CalibrateAccelerometer+0xb4>
 80042ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042be:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <GY87_CalibrateAccelerometer+0xbc>)
 80042c0:	edc3 7a00 	vstr	s15, [r3]
        accelerometerCalibrationZ = linearAccelerationsZ / GY87_CALIBRATION_ITERATIONS;
 80042c4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80042c8:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80042e4 <GY87_CalibrateAccelerometer+0xb4>
 80042cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042d0:	4b07      	ldr	r3, [pc, #28]	@ (80042f0 <GY87_CalibrateAccelerometer+0xc0>)
 80042d2:	edc3 7a00 	vstr	s15, [r3]

#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"Accelerometer calibration done.\r\n\n", LOG_INFORMATION);
#endif

        return true;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <GY87_CalibrateAccelerometer+0xac>

    } else {

        return false;
 80042da:	2300      	movs	r3, #0
    }
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3738      	adds	r7, #56	@ 0x38
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	44fa0000 	.word	0x44fa0000
 80042e8:	20000c24 	.word	0x20000c24
 80042ec:	20000c28 	.word	0x20000c28
 80042f0:	20000c2c 	.word	0x20000c2c
 80042f4:	00000000 	.word	0x00000000

080042f8 <GY87_ReadAccelerometer>:

void GY87_ReadAccelerometer(GY87_HandleTypeDef_t * hgy87, GY87_accelerometerValues_t * accelerometerValues) {
 80042f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042fc:	b08a      	sub	sp, #40	@ 0x28
 80042fe:	af02      	add	r7, sp, #8
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_FS_08;
 8004304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004308:	83fb      	strh	r3, [r7, #30]

    float accX, accY, accZ;

    /* Check parameters */
    if (NULL != hgy87 && NULL != accelerometerValues) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8101 	beq.w	8004514 <GY87_ReadAccelerometer+0x21c>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80fd 	beq.w	8004514 <GY87_ReadAccelerometer+0x21c>

        /* Read accelerometer raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6858      	ldr	r0, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	7a19      	ldrb	r1, [r3, #8]
 8004322:	f107 030c 	add.w	r3, r7, #12
 8004326:	2202      	movs	r2, #2
 8004328:	9200      	str	r2, [sp, #0]
 800432a:	223b      	movs	r2, #59	@ 0x3b
 800432c:	f7ff fdd8 	bl	8003ee0 <MPU6050_ReadRegister>
        accelerometerValues->rawValueX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8004330:	7b3b      	ldrb	r3, [r7, #12]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	b21a      	sxth	r2, r3
 8004336:	7b7b      	ldrb	r3, [r7, #13]
 8004338:	b21b      	sxth	r3, r3
 800433a:	4313      	orrs	r3, r2
 800433c:	b21a      	sxth	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	801a      	strh	r2, [r3, #0]
        /* Calculate accelerometer linear acceleration along X axis */
        accX = accelerometerValues->linearAccelerationX = ((float)accelerometerValues->rawValueX / scaleFactor) - accelerometerCalibrationX;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004350:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800435c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004360:	4b7d      	ldr	r3, [pc, #500]	@ (8004558 <GY87_ReadAccelerometer+0x260>)
 8004362:	edd3 7a00 	vldr	s15, [r3]
 8004366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	edc3 7a02 	vstr	s15, [r3, #8]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	61bb      	str	r3, [r7, #24]

        /* Read accelerometer raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6858      	ldr	r0, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	7a19      	ldrb	r1, [r3, #8]
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	2202      	movs	r2, #2
 8004384:	9200      	str	r2, [sp, #0]
 8004386:	223d      	movs	r2, #61	@ 0x3d
 8004388:	f7ff fdaa 	bl	8003ee0 <MPU6050_ReadRegister>
        accelerometerValues->rawValueY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 800438c:	7b3b      	ldrb	r3, [r7, #12]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	b21a      	sxth	r2, r3
 8004392:	7b7b      	ldrb	r3, [r7, #13]
 8004394:	b21b      	sxth	r3, r3
 8004396:	4313      	orrs	r3, r2
 8004398:	b21a      	sxth	r2, r3
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	805a      	strh	r2, [r3, #2]
        /* Calculate accelerometer linear acceleration along Y axis */
        accY = accelerometerValues->linearAccelerationY = ((float)accelerometerValues->rawValueY / scaleFactor) - accelerometerCalibrationY;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043a4:	ee07 3a90 	vmov	s15, r3
 80043a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043bc:	4b67      	ldr	r3, [pc, #412]	@ (800455c <GY87_ReadAccelerometer+0x264>)
 80043be:	edd3 7a00 	vldr	s15, [r3]
 80043c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	edc3 7a03 	vstr	s15, [r3, #12]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	617b      	str	r3, [r7, #20]

        /* Read accelerometer raw value for Z axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6858      	ldr	r0, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	7a19      	ldrb	r1, [r3, #8]
 80043da:	f107 030c 	add.w	r3, r7, #12
 80043de:	2202      	movs	r2, #2
 80043e0:	9200      	str	r2, [sp, #0]
 80043e2:	223f      	movs	r2, #63	@ 0x3f
 80043e4:	f7ff fd7c 	bl	8003ee0 <MPU6050_ReadRegister>
        accelerometerValues->rawValueZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 80043e8:	7b3b      	ldrb	r3, [r7, #12]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	b21a      	sxth	r2, r3
 80043ee:	7b7b      	ldrb	r3, [r7, #13]
 80043f0:	b21b      	sxth	r3, r3
 80043f2:	4313      	orrs	r3, r2
 80043f4:	b21a      	sxth	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	809a      	strh	r2, [r3, #4]
        /* Calculate accelerometer linear acceleration along Z axis */
        accZ = accelerometerValues->linearAccelerationZ = ((float)accelerometerValues->rawValueZ / scaleFactor);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004400:	ee07 3a90 	vmov	s15, r3
 8004404:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004408:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800440c:	ee07 3a90 	vmov	s15, r3
 8004410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	edc3 7a04 	vstr	s15, [r3, #16]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	613b      	str	r3, [r7, #16]

        /* Calculate roll and pitch angles using an approximation with linear accelerations */
        accelerometerValues->angleRoll = atan(accY / sqrt(accX * accX + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 8004424:	6978      	ldr	r0, [r7, #20]
 8004426:	f7fc f897 	bl	8000558 <__aeabi_f2d>
 800442a:	4680      	mov	r8, r0
 800442c:	4689      	mov	r9, r1
 800442e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004432:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004436:	edd7 7a04 	vldr	s15, [r7, #16]
 800443a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800443e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004442:	ee17 0a90 	vmov	r0, s15
 8004446:	f7fc f887 	bl	8000558 <__aeabi_f2d>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	ec43 2b10 	vmov	d0, r2, r3
 8004452:	f00e ff9f 	bl	8013394 <sqrt>
 8004456:	ec53 2b10 	vmov	r2, r3, d0
 800445a:	4640      	mov	r0, r8
 800445c:	4649      	mov	r1, r9
 800445e:	f7fc f9fd 	bl	800085c <__aeabi_ddiv>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	ec43 2b17 	vmov	d7, r2, r3
 800446a:	eeb0 0a47 	vmov.f32	s0, s14
 800446e:	eef0 0a67 	vmov.f32	s1, s15
 8004472:	f00e ffbd 	bl	80133f0 <atan>
 8004476:	ec51 0b10 	vmov	r0, r1, d0
 800447a:	a335      	add	r3, pc, #212	@ (adr r3, 8004550 <GY87_ReadAccelerometer+0x258>)
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f7fc f8c2 	bl	8000608 <__aeabi_dmul>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	f7fc fbb4 	bl	8000bf8 <__aeabi_d2f>
 8004490:	4602      	mov	r2, r0
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	615a      	str	r2, [r3, #20]
        accelerometerValues->anglePitch = -atan(accX / sqrt(accY * accY + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 8004496:	69b8      	ldr	r0, [r7, #24]
 8004498:	f7fc f85e 	bl	8000558 <__aeabi_f2d>
 800449c:	4680      	mov	r8, r0
 800449e:	4689      	mov	r9, r1
 80044a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80044a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80044a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80044ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80044b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b4:	ee17 0a90 	vmov	r0, s15
 80044b8:	f7fc f84e 	bl	8000558 <__aeabi_f2d>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	ec43 2b10 	vmov	d0, r2, r3
 80044c4:	f00e ff66 	bl	8013394 <sqrt>
 80044c8:	ec53 2b10 	vmov	r2, r3, d0
 80044cc:	4640      	mov	r0, r8
 80044ce:	4649      	mov	r1, r9
 80044d0:	f7fc f9c4 	bl	800085c <__aeabi_ddiv>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	ec43 2b17 	vmov	d7, r2, r3
 80044dc:	eeb0 0a47 	vmov.f32	s0, s14
 80044e0:	eef0 0a67 	vmov.f32	s1, s15
 80044e4:	f00e ff84 	bl	80133f0 <atan>
 80044e8:	ec53 2b10 	vmov	r2, r3, d0
 80044ec:	4614      	mov	r4, r2
 80044ee:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80044f2:	a317      	add	r3, pc, #92	@ (adr r3, 8004550 <GY87_ReadAccelerometer+0x258>)
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	4620      	mov	r0, r4
 80044fa:	4629      	mov	r1, r5
 80044fc:	f7fc f884 	bl	8000608 <__aeabi_dmul>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	f7fc fb76 	bl	8000bf8 <__aeabi_d2f>
 800450c:	4602      	mov	r2, r0
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	619a      	str	r2, [r3, #24]
 8004512:	e015      	b.n	8004540 <GY87_ReadAccelerometer+0x248>

    } else {
        /* Wrong parameters */
        accelerometerValues->rawValueX = 0;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	801a      	strh	r2, [r3, #0]
        accelerometerValues->rawValueY = 0;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2200      	movs	r2, #0
 800451e:	805a      	strh	r2, [r3, #2]
        accelerometerValues->rawValueZ = 0;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	809a      	strh	r2, [r3, #4]
        accelerometerValues->linearAccelerationX = 0;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	609a      	str	r2, [r3, #8]
        accelerometerValues->linearAccelerationY = 0;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	60da      	str	r2, [r3, #12]
        accelerometerValues->linearAccelerationZ = 0;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	611a      	str	r2, [r3, #16]
    }
}
 800453e:	bf00      	nop
 8004540:	bf00      	nop
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800454a:	bf00      	nop
 800454c:	f3af 8000 	nop.w
 8004550:	1a63c1f8 	.word	0x1a63c1f8
 8004554:	404ca5dc 	.word	0x404ca5dc
 8004558:	20000c24 	.word	0x20000c24
 800455c:	20000c28 	.word	0x20000c28

08004560 <GY87_ReadTemperatureSensor>:

int16_t GY87_ReadTemperatureSensor(GY87_HandleTypeDef_t * hgy87) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af02      	add	r7, sp, #8
 8004566:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 8004568:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 800456c:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 800456e:	2324      	movs	r3, #36	@ 0x24
 8004570:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hgy87) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <GY87_ReadTemperatureSensor+0x1c>
        return 0;
 8004578:	2300      	movs	r3, #0
 800457a:	e01b      	b.n	80045b4 <GY87_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6858      	ldr	r0, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7a19      	ldrb	r1, [r3, #8]
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	2202      	movs	r2, #2
 800458a:	9200      	str	r2, [sp, #0]
 800458c:	2241      	movs	r2, #65	@ 0x41
 800458e:	f7ff fca7 	bl	8003ee0 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 8004592:	7a3b      	ldrb	r3, [r7, #8]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	b21a      	sxth	r2, r3
 8004598:	7a7b      	ldrb	r3, [r7, #9]
 800459a:	b21b      	sxth	r3, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	b21b      	sxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	89bb      	ldrh	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	b21b      	sxth	r3, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <GY87_ReadMagnetometer>:

void GY87_ReadMagnetometer(GY87_HandleTypeDef_t * hgy87, GY87_magnetometerValues_t * magnetometerValues) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 4096;
 80045c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045ca:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != magnetometerValues) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d075      	beq.n	80046be <GY87_ReadMagnetometer+0x102>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d072      	beq.n	80046be <GY87_ReadMagnetometer+0x102>

        /* Read magnetometer raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6858      	ldr	r0, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7a19      	ldrb	r1, [r3, #8]
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	2202      	movs	r2, #2
 80045e6:	9200      	str	r2, [sp, #0]
 80045e8:	2249      	movs	r2, #73	@ 0x49
 80045ea:	f7ff fc79 	bl	8003ee0 <MPU6050_ReadRegister>
        magnetometerValues->rawValueX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 80045ee:	7b7b      	ldrb	r3, [r7, #13]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	b21a      	sxth	r2, r3
 80045f4:	7b3b      	ldrb	r3, [r7, #12]
 80045f6:	b21b      	sxth	r3, r3
 80045f8:	4313      	orrs	r3, r2
 80045fa:	b21a      	sxth	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	801a      	strh	r2, [r3, #0]
        /* Calculate magnetometer magnetic field along X axis */
        magnetometerValues->magneticFieldX = ((float)magnetometerValues->rawValueX / scaleFactor);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800460e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800461a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Read magnetometer raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6858      	ldr	r0, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	7a19      	ldrb	r1, [r3, #8]
 800462c:	f107 030c 	add.w	r3, r7, #12
 8004630:	2202      	movs	r2, #2
 8004632:	9200      	str	r2, [sp, #0]
 8004634:	224b      	movs	r2, #75	@ 0x4b
 8004636:	f7ff fc53 	bl	8003ee0 <MPU6050_ReadRegister>
        magnetometerValues->rawValueY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 800463a:	7b7b      	ldrb	r3, [r7, #13]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	b21a      	sxth	r2, r3
 8004640:	7b3b      	ldrb	r3, [r7, #12]
 8004642:	b21b      	sxth	r3, r3
 8004644:	4313      	orrs	r3, r2
 8004646:	b21a      	sxth	r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	805a      	strh	r2, [r3, #2]
        /* Calculate magnetometer magnetic field along Y axis */
        magnetometerValues->magneticFieldY = ((float)magnetometerValues->rawValueY / scaleFactor);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800465a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	edc3 7a03 	vstr	s15, [r3, #12]

        /* Read magnetometer raw value for Z axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6858      	ldr	r0, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7a19      	ldrb	r1, [r3, #8]
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	2202      	movs	r2, #2
 800467e:	9200      	str	r2, [sp, #0]
 8004680:	224d      	movs	r2, #77	@ 0x4d
 8004682:	f7ff fc2d 	bl	8003ee0 <MPU6050_ReadRegister>
        magnetometerValues->rawValueZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 8004686:	7b7b      	ldrb	r3, [r7, #13]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	b21a      	sxth	r2, r3
 800468c:	7b3b      	ldrb	r3, [r7, #12]
 800468e:	b21b      	sxth	r3, r3
 8004690:	4313      	orrs	r3, r2
 8004692:	b21a      	sxth	r2, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	809a      	strh	r2, [r3, #4]
        /* Calculate magnetometer magnetic field along Z axis */
        magnetometerValues->magneticFieldZ = ((float)magnetometerValues->rawValueZ / scaleFactor);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	edc3 7a04 	vstr	s15, [r3, #16]
 80046bc:	e00c      	b.n	80046d8 <GY87_ReadMagnetometer+0x11c>

    } else {
        /* Wrong parameters */
        magnetometerValues->magneticFieldX = 0;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	609a      	str	r2, [r3, #8]
        magnetometerValues->magneticFieldY = 0;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	60da      	str	r2, [r3, #12]
        magnetometerValues->magneticFieldZ = 0;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]
    }
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <GY87_ReadMagnetometerHeading>:

float GY87_ReadMagnetometerHeading(GY87_HandleTypeDef_t * hgy87) {
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

    /* Declare variable for compass heading */
    float heading;

    /* Check parameter and calculate heading */
    if (NULL != hgy87) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d053      	beq.n	8004796 <GY87_ReadMagnetometerHeading+0xb6>

        GY87_ReadMagnetometer(hgy87, &magnetometerValues);
 80046ee:	f107 0308 	add.w	r3, r7, #8
 80046f2:	4619      	mov	r1, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ff61 	bl	80045bc <GY87_ReadMagnetometer>

        /* Calculate heading */
        heading = atan2(-magnetometerValues.magneticFieldY, -magnetometerValues.magneticFieldX) * RADIANS_TO_DEGREES_CONST + QMC5883L_MAGNETIC_DECLINATION + QMC5883L_CALIBRATION_OFFSET;
 80046fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80046fe:	eef1 7a67 	vneg.f32	s15, s15
 8004702:	ee17 3a90 	vmov	r3, s15
 8004706:	4618      	mov	r0, r3
 8004708:	f7fb ff26 	bl	8000558 <__aeabi_f2d>
 800470c:	4604      	mov	r4, r0
 800470e:	460d      	mov	r5, r1
 8004710:	edd7 7a04 	vldr	s15, [r7, #16]
 8004714:	eef1 7a67 	vneg.f32	s15, s15
 8004718:	ee17 3a90 	vmov	r3, s15
 800471c:	4618      	mov	r0, r3
 800471e:	f7fb ff1b 	bl	8000558 <__aeabi_f2d>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	ec43 2b11 	vmov	d1, r2, r3
 800472a:	ec45 4b10 	vmov	d0, r4, r5
 800472e:	f00e fe2f 	bl	8013390 <atan2>
 8004732:	ec51 0b10 	vmov	r0, r1, d0
 8004736:	a321      	add	r3, pc, #132	@ (adr r3, 80047bc <GY87_ReadMagnetometerHeading+0xdc>)
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f7fb ff64 	bl	8000608 <__aeabi_dmul>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	f7fb fda4 	bl	800029c <__adddf3>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <GY87_ReadMagnetometerHeading+0xd0>)
 8004762:	f7fb fd9b 	bl	800029c <__adddf3>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	f7fc fa43 	bl	8000bf8 <__aeabi_d2f>
 8004772:	4603      	mov	r3, r0
 8004774:	61fb      	str	r3, [r7, #28]

        /* Check if heading is within 0 and 360 degrees */
        if (heading < 0) {
 8004776:	edd7 7a07 	vldr	s15, [r7, #28]
 800477a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800477e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004782:	d50a      	bpl.n	800479a <GY87_ReadMagnetometerHeading+0xba>
            heading += 360;
 8004784:	edd7 7a07 	vldr	s15, [r7, #28]
 8004788:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80047b4 <GY87_ReadMagnetometerHeading+0xd4>
 800478c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004790:	edc7 7a07 	vstr	s15, [r7, #28]
 8004794:	e001      	b.n	800479a <GY87_ReadMagnetometerHeading+0xba>
        }

    } else {

        heading = -1;
 8004796:	4b08      	ldr	r3, [pc, #32]	@ (80047b8 <GY87_ReadMagnetometerHeading+0xd8>)
 8004798:	61fb      	str	r3, [r7, #28]
    }

    return heading;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	ee07 3a90 	vmov	s15, r3
}
 80047a0:	eeb0 0a67 	vmov.f32	s0, s15
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bdb0      	pop	{r4, r5, r7, pc}
 80047aa:	bf00      	nop
 80047ac:	f3af 8000 	nop.w
 80047b0:	403a0000 	.word	0x403a0000
 80047b4:	43b40000 	.word	0x43b40000
 80047b8:	bf800000 	.word	0xbf800000
 80047bc:	1a63c1f8 	.word	0x1a63c1f8
 80047c0:	404ca5dc 	.word	0x404ca5dc

080047c4 <GY87_ReadBarometerTemperature>:

float GY87_ReadBarometerTemperature(GY87_HandleTypeDef_t * hgy87) {
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

    /* Calculate compensated/true temperature */
    int32_t X1 = ((BMP180_CalibrationData.UT - BMP180_CalibrationData.AC6) * BMP180_CalibrationData.AC5) / (1 << 15);
 80047cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004840 <GY87_ReadBarometerTemperature+0x7c>)
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004840 <GY87_ReadBarometerTemperature+0x7c>)
 80047d2:	8952      	ldrh	r2, [r2, #10]
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004840 <GY87_ReadBarometerTemperature+0x7c>)
 80047d8:	8912      	ldrh	r2, [r2, #8]
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	da02      	bge.n	80047e8 <GY87_ReadBarometerTemperature+0x24>
 80047e2:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80047e6:	337f      	adds	r3, #127	@ 0x7f
 80047e8:	13db      	asrs	r3, r3, #15
 80047ea:	60fb      	str	r3, [r7, #12]
    int32_t X2 = (BMP180_CalibrationData.MC * (1 << 11)) / (X1 + BMP180_CalibrationData.MD);
 80047ec:	4b14      	ldr	r3, [pc, #80]	@ (8004840 <GY87_ReadBarometerTemperature+0x7c>)
 80047ee:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80047f2:	02da      	lsls	r2, r3, #11
 80047f4:	4b12      	ldr	r3, [pc, #72]	@ (8004840 <GY87_ReadBarometerTemperature+0x7c>)
 80047f6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80047fa:	4619      	mov	r1, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	440b      	add	r3, r1
 8004800:	fb92 f3f3 	sdiv	r3, r2, r3
 8004804:	60bb      	str	r3, [r7, #8]
    BMP180_CalibrationData.B5 = X1 + X2;
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4413      	add	r3, r2
 800480c:	4a0c      	ldr	r2, [pc, #48]	@ (8004840 <GY87_ReadBarometerTemperature+0x7c>)
 800480e:	6113      	str	r3, [r2, #16]
    BMP180_CalibrationData.CT = ((BMP180_CalibrationData.B5 + 8) / (1 << 4)) / 10;
 8004810:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <GY87_ReadBarometerTemperature+0x7c>)
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	3308      	adds	r3, #8
 8004816:	4a0b      	ldr	r2, [pc, #44]	@ (8004844 <GY87_ReadBarometerTemperature+0x80>)
 8004818:	fb82 1203 	smull	r1, r2, r2, r3
 800481c:	1192      	asrs	r2, r2, #6
 800481e:	17db      	asrs	r3, r3, #31
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	4a07      	ldr	r2, [pc, #28]	@ (8004840 <GY87_ReadBarometerTemperature+0x7c>)
 8004824:	6213      	str	r3, [r2, #32]
    //
    //    sprintf((char *)loggingStr, (const char *)"GY87_ReadBarometerTemperature(): CT = %d°C\r\n\n", BMP180_CalibrationData.CT);
    //    LOG(loggingStr, LOG_DEBUGGING);
    /* DEBUGGING DELETE */

    return (float)BMP180_CalibrationData.CT;
 8004826:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <GY87_ReadBarometerTemperature+0x7c>)
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004832:	eeb0 0a67 	vmov.f32	s0, s15
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	20000bf4 	.word	0x20000bf4
 8004844:	66666667 	.word	0x66666667

08004848 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

    /* BEGIN MODIFY 1 */
    CDC_Transmit_FS(string, strlen((const char *)string));
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fb fd15 	bl	8000280 <strlen>
 8004856:	4603      	mov	r3, r0
 8004858:	b29b      	uxth	r3, r3
 800485a:	4619      	mov	r1, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f00b fae7 	bl	800fe30 <CDC_Transmit_FS>
    /* END MODIFY 1 */
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b0c2      	sub	sp, #264	@ 0x108
 8004870:	af00      	add	r7, sp, #0
 8004872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800487a:	6018      	str	r0, [r3, #0]
 800487c:	460a      	mov	r2, r1
 800487e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004882:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004886:	701a      	strb	r2, [r3, #0]

    /* Check parameters */
    if (NULL == message) {
 8004888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800488c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <LOG+0x2e>
        return false;
 8004896:	2300      	movs	r3, #0
 8004898:	e063      	b.n	8004962 <LOG+0xf6>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 800489a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800489e:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d901      	bls.n	80048ac <LOG+0x40>
        return false;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e05a      	b.n	8004962 <LOG+0xf6>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 80048ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	3304      	adds	r3, #4
 80048ba:	22fc      	movs	r2, #252	@ 0xfc
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f00c fd43 	bl	801134a <memset>

    if (LOG_INFORMATION == logType) {
 80048c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048c8:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <LOG+0x78>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 80048d2:	4b26      	ldr	r3, [pc, #152]	@ (800496c <LOG+0x100>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	f107 0308 	add.w	r3, r7, #8
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f00c fd3c 	bl	801135a <strcat>
 80048e2:	e02e      	b.n	8004942 <LOG+0xd6>
    } else if (LOG_DEBUGGING == logType) {
 80048e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e8:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d108      	bne.n	8004904 <LOG+0x98>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 80048f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004970 <LOG+0x104>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	f107 0308 	add.w	r3, r7, #8
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f00c fd2c 	bl	801135a <strcat>
 8004902:	e01e      	b.n	8004942 <LOG+0xd6>
    } else if (LOG_WARNING == logType) {
 8004904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004908:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d108      	bne.n	8004924 <LOG+0xb8>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 8004912:	4b18      	ldr	r3, [pc, #96]	@ (8004974 <LOG+0x108>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	f107 0308 	add.w	r3, r7, #8
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f00c fd1c 	bl	801135a <strcat>
 8004922:	e00e      	b.n	8004942 <LOG+0xd6>
    } else if (LOG_ERROR == logType) {
 8004924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004928:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d107      	bne.n	8004942 <LOG+0xd6>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 8004932:	4b11      	ldr	r3, [pc, #68]	@ (8004978 <LOG+0x10c>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	f107 0308 	add.w	r3, r7, #8
 800493a:	4611      	mov	r1, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f00c fd0c 	bl	801135a <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8004942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800494a:	f107 0208 	add.w	r2, r7, #8
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	4610      	mov	r0, r2
 8004952:	f00c fd02 	bl	801135a <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ff74 	bl	8004848 <USB_Write>

    return true;
 8004960:	2301      	movs	r3, #1
}
 8004962:	4618      	mov	r0, r3
 8004964:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000020 	.word	0x20000020
 8004970:	20000024 	.word	0x20000024
 8004974:	20000028 	.word	0x20000028
 8004978:	2000002c 	.word	0x2000002c

0800497c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004980:	4b0e      	ldr	r3, [pc, #56]	@ (80049bc <HAL_Init+0x40>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a0d      	ldr	r2, [pc, #52]	@ (80049bc <HAL_Init+0x40>)
 8004986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800498a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800498c:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <HAL_Init+0x40>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0a      	ldr	r2, [pc, #40]	@ (80049bc <HAL_Init+0x40>)
 8004992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004998:	4b08      	ldr	r3, [pc, #32]	@ (80049bc <HAL_Init+0x40>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a07      	ldr	r2, [pc, #28]	@ (80049bc <HAL_Init+0x40>)
 800499e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049a4:	2003      	movs	r0, #3
 80049a6:	f000 fd13 	bl	80053d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049aa:	200f      	movs	r0, #15
 80049ac:	f000 f808 	bl	80049c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049b0:	f7fe f8fa 	bl	8002ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40023c00 	.word	0x40023c00

080049c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049c8:	4b12      	ldr	r3, [pc, #72]	@ (8004a14 <HAL_InitTick+0x54>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <HAL_InitTick+0x58>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	4619      	mov	r1, r3
 80049d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fd2f 	bl	8005442 <HAL_SYSTICK_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e00e      	b.n	8004a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b0f      	cmp	r3, #15
 80049f2:	d80a      	bhi.n	8004a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049f4:	2200      	movs	r2, #0
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049fc:	f000 fcf3 	bl	80053e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a00:	4a06      	ldr	r2, [pc, #24]	@ (8004a1c <HAL_InitTick+0x5c>)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e000      	b.n	8004a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	2000000c 	.word	0x2000000c
 8004a18:	20000034 	.word	0x20000034
 8004a1c:	20000030 	.word	0x20000030

08004a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a24:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <HAL_IncTick+0x20>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4b06      	ldr	r3, [pc, #24]	@ (8004a44 <HAL_IncTick+0x24>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4413      	add	r3, r2
 8004a30:	4a04      	ldr	r2, [pc, #16]	@ (8004a44 <HAL_IncTick+0x24>)
 8004a32:	6013      	str	r3, [r2, #0]
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000034 	.word	0x20000034
 8004a44:	20000c30 	.word	0x20000c30

08004a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <HAL_GetTick+0x14>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000c30 	.word	0x20000c30

08004a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a68:	f7ff ffee 	bl	8004a48 <HAL_GetTick>
 8004a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a78:	d005      	beq.n	8004a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <HAL_Delay+0x44>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a86:	bf00      	nop
 8004a88:	f7ff ffde 	bl	8004a48 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d8f7      	bhi.n	8004a88 <HAL_Delay+0x28>
  {
  }
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000034 	.word	0x20000034

08004aa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e033      	b.n	8004b26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fe f89a 	bl	8002c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d118      	bne.n	8004b18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004aee:	f023 0302 	bic.w	r3, r3, #2
 8004af2:	f043 0202 	orr.w	r2, r3, #2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa86 	bl	800500c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	f043 0201 	orr.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b16:	e001      	b.n	8004b1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_ADC_Start+0x1a>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e097      	b.n	8004c7a <HAL_ADC_Start+0x14a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d018      	beq.n	8004b92 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b70:	4b45      	ldr	r3, [pc, #276]	@ (8004c88 <HAL_ADC_Start+0x158>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a45      	ldr	r2, [pc, #276]	@ (8004c8c <HAL_ADC_Start+0x15c>)
 8004b76:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7a:	0c9a      	lsrs	r2, r3, #18
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	4413      	add	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004b84:	e002      	b.n	8004b8c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f9      	bne.n	8004b86 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d15f      	bne.n	8004c60 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004bca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bde:	d106      	bne.n	8004bee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be4:	f023 0206 	bic.w	r2, r3, #6
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	645a      	str	r2, [r3, #68]	@ 0x44
 8004bec:	e002      	b.n	8004bf4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bfc:	4b24      	ldr	r3, [pc, #144]	@ (8004c90 <HAL_ADC_Start+0x160>)
 8004bfe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004c08:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d129      	bne.n	8004c78 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	e020      	b.n	8004c78 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a16      	ldr	r2, [pc, #88]	@ (8004c94 <HAL_ADC_Start+0x164>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d11b      	bne.n	8004c78 <HAL_ADC_Start+0x148>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d114      	bne.n	8004c78 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c5c:	609a      	str	r2, [r3, #8]
 8004c5e:	e00b      	b.n	8004c78 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	f043 0210 	orr.w	r2, r3, #16
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c70:	f043 0201 	orr.w	r2, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	2000000c 	.word	0x2000000c
 8004c8c:	431bde83 	.word	0x431bde83
 8004c90:	40012300 	.word	0x40012300
 8004c94:	40012000 	.word	0x40012000

08004c98 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb4:	d113      	bne.n	8004cde <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc4:	d10b      	bne.n	8004cde <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e063      	b.n	8004da6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cde:	f7ff feb3 	bl	8004a48 <HAL_GetTick>
 8004ce2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ce4:	e021      	b.n	8004d2a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cec:	d01d      	beq.n	8004d2a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <HAL_ADC_PollForConversion+0x6c>
 8004cf4:	f7ff fea8 	bl	8004a48 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d212      	bcs.n	8004d2a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d00b      	beq.n	8004d2a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	f043 0204 	orr.w	r2, r3, #4
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e03d      	b.n	8004da6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d1d6      	bne.n	8004ce6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0212 	mvn.w	r2, #18
 8004d40:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d123      	bne.n	8004da4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11f      	bne.n	8004da4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d006      	beq.n	8004d80 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d111      	bne.n	8004da4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0x1c>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e105      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x228>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b09      	cmp	r3, #9
 8004df2:	d925      	bls.n	8004e40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68d9      	ldr	r1, [r3, #12]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	4613      	mov	r3, r2
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	4413      	add	r3, r2
 8004e08:	3b1e      	subs	r3, #30
 8004e0a:	2207      	movs	r2, #7
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	43da      	mvns	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	400a      	ands	r2, r1
 8004e18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68d9      	ldr	r1, [r3, #12]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4403      	add	r3, r0
 8004e32:	3b1e      	subs	r3, #30
 8004e34:	409a      	lsls	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	e022      	b.n	8004e86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6919      	ldr	r1, [r3, #16]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4613      	mov	r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4413      	add	r3, r2
 8004e54:	2207      	movs	r2, #7
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	400a      	ands	r2, r1
 8004e62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6919      	ldr	r1, [r3, #16]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4618      	mov	r0, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4403      	add	r3, r0
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d824      	bhi.n	8004ed8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3b05      	subs	r3, #5
 8004ea0:	221f      	movs	r2, #31
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43da      	mvns	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	400a      	ands	r2, r1
 8004eae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3b05      	subs	r3, #5
 8004eca:	fa00 f203 	lsl.w	r2, r0, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ed6:	e04c      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	d824      	bhi.n	8004f2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	3b23      	subs	r3, #35	@ 0x23
 8004ef2:	221f      	movs	r2, #31
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43da      	mvns	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	400a      	ands	r2, r1
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	4618      	mov	r0, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	3b23      	subs	r3, #35	@ 0x23
 8004f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f28:	e023      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	3b41      	subs	r3, #65	@ 0x41
 8004f3c:	221f      	movs	r2, #31
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43da      	mvns	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	400a      	ands	r2, r1
 8004f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4618      	mov	r0, r3
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	3b41      	subs	r3, #65	@ 0x41
 8004f66:	fa00 f203 	lsl.w	r2, r0, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f72:	4b22      	ldr	r3, [pc, #136]	@ (8004ffc <HAL_ADC_ConfigChannel+0x234>)
 8004f74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a21      	ldr	r2, [pc, #132]	@ (8005000 <HAL_ADC_ConfigChannel+0x238>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d109      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x1cc>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b12      	cmp	r3, #18
 8004f86:	d105      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a19      	ldr	r2, [pc, #100]	@ (8005000 <HAL_ADC_ConfigChannel+0x238>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d123      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x21e>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d003      	beq.n	8004fae <HAL_ADC_ConfigChannel+0x1e6>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b11      	cmp	r3, #17
 8004fac:	d11b      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d111      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004fc2:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <HAL_ADC_ConfigChannel+0x23c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a10      	ldr	r2, [pc, #64]	@ (8005008 <HAL_ADC_ConfigChannel+0x240>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	0c9a      	lsrs	r2, r3, #18
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004fd8:	e002      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f9      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40012300 	.word	0x40012300
 8005000:	40012000 	.word	0x40012000
 8005004:	2000000c 	.word	0x2000000c
 8005008:	431bde83 	.word	0x431bde83

0800500c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005014:	4b79      	ldr	r3, [pc, #484]	@ (80051fc <ADC_Init+0x1f0>)
 8005016:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6859      	ldr	r1, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	021a      	lsls	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6899      	ldr	r1, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	4a58      	ldr	r2, [pc, #352]	@ (8005200 <ADC_Init+0x1f4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d022      	beq.n	80050ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6899      	ldr	r1, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80050d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6899      	ldr	r1, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	e00f      	b.n	800510a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005108:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0202 	bic.w	r2, r2, #2
 8005118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6899      	ldr	r1, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7e1b      	ldrb	r3, [r3, #24]
 8005124:	005a      	lsls	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01b      	beq.n	8005170 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005146:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005156:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6859      	ldr	r1, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	3b01      	subs	r3, #1
 8005164:	035a      	lsls	r2, r3, #13
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	e007      	b.n	8005180 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800517e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800518e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	3b01      	subs	r3, #1
 800519c:	051a      	lsls	r2, r3, #20
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80051b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6899      	ldr	r1, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80051c2:	025a      	lsls	r2, r3, #9
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6899      	ldr	r1, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	029a      	lsls	r2, r3, #10
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40012300 	.word	0x40012300
 8005200:	0f000001 	.word	0x0f000001

08005204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005214:	4b0c      	ldr	r3, [pc, #48]	@ (8005248 <__NVIC_SetPriorityGrouping+0x44>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005220:	4013      	ands	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800522c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005236:	4a04      	ldr	r2, [pc, #16]	@ (8005248 <__NVIC_SetPriorityGrouping+0x44>)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	60d3      	str	r3, [r2, #12]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e000ed00 	.word	0xe000ed00

0800524c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005250:	4b04      	ldr	r3, [pc, #16]	@ (8005264 <__NVIC_GetPriorityGrouping+0x18>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	f003 0307 	and.w	r3, r3, #7
}
 800525a:	4618      	mov	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000ed00 	.word	0xe000ed00

08005268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005276:	2b00      	cmp	r3, #0
 8005278:	db0b      	blt.n	8005292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	f003 021f 	and.w	r2, r3, #31
 8005280:	4907      	ldr	r1, [pc, #28]	@ (80052a0 <__NVIC_EnableIRQ+0x38>)
 8005282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	2001      	movs	r0, #1
 800528a:	fa00 f202 	lsl.w	r2, r0, r2
 800528e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	e000e100 	.word	0xe000e100

080052a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	6039      	str	r1, [r7, #0]
 80052ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	db0a      	blt.n	80052ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	490c      	ldr	r1, [pc, #48]	@ (80052f0 <__NVIC_SetPriority+0x4c>)
 80052be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c2:	0112      	lsls	r2, r2, #4
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	440b      	add	r3, r1
 80052c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052cc:	e00a      	b.n	80052e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	4908      	ldr	r1, [pc, #32]	@ (80052f4 <__NVIC_SetPriority+0x50>)
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	3b04      	subs	r3, #4
 80052dc:	0112      	lsls	r2, r2, #4
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	440b      	add	r3, r1
 80052e2:	761a      	strb	r2, [r3, #24]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000e100 	.word	0xe000e100
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b089      	sub	sp, #36	@ 0x24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f1c3 0307 	rsb	r3, r3, #7
 8005312:	2b04      	cmp	r3, #4
 8005314:	bf28      	it	cs
 8005316:	2304      	movcs	r3, #4
 8005318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3304      	adds	r3, #4
 800531e:	2b06      	cmp	r3, #6
 8005320:	d902      	bls.n	8005328 <NVIC_EncodePriority+0x30>
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3b03      	subs	r3, #3
 8005326:	e000      	b.n	800532a <NVIC_EncodePriority+0x32>
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800532c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43da      	mvns	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	401a      	ands	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005340:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	fa01 f303 	lsl.w	r3, r1, r3
 800534a:	43d9      	mvns	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005350:	4313      	orrs	r3, r2
         );
}
 8005352:	4618      	mov	r0, r3
 8005354:	3724      	adds	r7, #36	@ 0x24
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005364:	f3bf 8f4f 	dsb	sy
}
 8005368:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800536a:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <__NVIC_SystemReset+0x24>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005372:	4904      	ldr	r1, [pc, #16]	@ (8005384 <__NVIC_SystemReset+0x24>)
 8005374:	4b04      	ldr	r3, [pc, #16]	@ (8005388 <__NVIC_SystemReset+0x28>)
 8005376:	4313      	orrs	r3, r2
 8005378:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800537a:	f3bf 8f4f 	dsb	sy
}
 800537e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <__NVIC_SystemReset+0x20>
 8005384:	e000ed00 	.word	0xe000ed00
 8005388:	05fa0004 	.word	0x05fa0004

0800538c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3b01      	subs	r3, #1
 8005398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800539c:	d301      	bcc.n	80053a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800539e:	2301      	movs	r3, #1
 80053a0:	e00f      	b.n	80053c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053a2:	4a0a      	ldr	r2, [pc, #40]	@ (80053cc <SysTick_Config+0x40>)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053aa:	210f      	movs	r1, #15
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053b0:	f7ff ff78 	bl	80052a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053b4:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <SysTick_Config+0x40>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ba:	4b04      	ldr	r3, [pc, #16]	@ (80053cc <SysTick_Config+0x40>)
 80053bc:	2207      	movs	r2, #7
 80053be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	e000e010 	.word	0xe000e010

080053d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ff13 	bl	8005204 <__NVIC_SetPriorityGrouping>
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b086      	sub	sp, #24
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	4603      	mov	r3, r0
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053f8:	f7ff ff28 	bl	800524c <__NVIC_GetPriorityGrouping>
 80053fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	6978      	ldr	r0, [r7, #20]
 8005404:	f7ff ff78 	bl	80052f8 <NVIC_EncodePriority>
 8005408:	4602      	mov	r2, r0
 800540a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff47 	bl	80052a4 <__NVIC_SetPriority>
}
 8005416:	bf00      	nop
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	4603      	mov	r3, r0
 8005426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff ff1b 	bl	8005268 <__NVIC_EnableIRQ>
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800543e:	f7ff ff8f 	bl	8005360 <__NVIC_SystemReset>

08005442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff ff9e 	bl	800538c <SysTick_Config>
 8005450:	4603      	mov	r3, r0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005468:	f7ff faee 	bl	8004a48 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e099      	b.n	80055ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005498:	e00f      	b.n	80054ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800549a:	f7ff fad5 	bl	8004a48 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d908      	bls.n	80054ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2203      	movs	r2, #3
 80054b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e078      	b.n	80055ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e8      	bne.n	800549a <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4b38      	ldr	r3, [pc, #224]	@ (80055b4 <HAL_DMA_Init+0x158>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005510:	2b04      	cmp	r3, #4
 8005512:	d107      	bne.n	8005524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551c:	4313      	orrs	r3, r2
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	2b04      	cmp	r3, #4
 800554c:	d117      	bne.n	800557e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00e      	beq.n	800557e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f8e5 	bl	8005730 <DMA_CheckFifoParam>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2240      	movs	r2, #64	@ 0x40
 8005570:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e016      	b.n	80055ac <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f89c 	bl	80056c4 <DMA_CalcBaseAndBitshift>
 800558c:	4603      	mov	r3, r0
 800558e:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005594:	223f      	movs	r2, #63	@ 0x3f
 8005596:	409a      	lsls	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	f010803f 	.word	0xf010803f

080055b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_DMA_Start_IT+0x26>
 80055da:	2302      	movs	r3, #2
 80055dc:	e040      	b.n	8005660 <HAL_DMA_Start_IT+0xa8>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d12f      	bne.n	8005652 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f82e 	bl	8005668 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005610:	223f      	movs	r2, #63	@ 0x3f
 8005612:	409a      	lsls	r2, r3
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0216 	orr.w	r2, r2, #22
 8005626:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0208 	orr.w	r2, r2, #8
 800563e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e005      	b.n	800565e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_BUSY;
 800565a:	2302      	movs	r3, #2
 800565c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800565e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005684:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b40      	cmp	r3, #64	@ 0x40
 8005694:	d108      	bne.n	80056a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056a6:	e007      	b.n	80056b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	60da      	str	r2, [r3, #12]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	3b10      	subs	r3, #16
 80056d4:	4a14      	ldr	r2, [pc, #80]	@ (8005728 <DMA_CalcBaseAndBitshift+0x64>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056de:	4a13      	ldr	r2, [pc, #76]	@ (800572c <DMA_CalcBaseAndBitshift+0x68>)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (stream_number > 3U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d909      	bls.n	8005706 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	1d1a      	adds	r2, r3, #4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	659a      	str	r2, [r3, #88]	@ 0x58
 8005704:	e007      	b.n	8005716 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	aaaaaaab 	.word	0xaaaaaaab
 800572c:	08013e54 	.word	0x08013e54

08005730 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d11f      	bne.n	800578a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d856      	bhi.n	80057fe <DMA_CheckFifoParam+0xce>
 8005750:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <DMA_CheckFifoParam+0x28>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	08005769 	.word	0x08005769
 800575c:	0800577b 	.word	0x0800577b
 8005760:	08005769 	.word	0x08005769
 8005764:	080057ff 	.word	0x080057ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d046      	beq.n	8005802 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005778:	e043      	b.n	8005802 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005782:	d140      	bne.n	8005806 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005788:	e03d      	b.n	8005806 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005792:	d121      	bne.n	80057d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b03      	cmp	r3, #3
 8005798:	d837      	bhi.n	800580a <DMA_CheckFifoParam+0xda>
 800579a:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <DMA_CheckFifoParam+0x70>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057b1 	.word	0x080057b1
 80057a4:	080057b7 	.word	0x080057b7
 80057a8:	080057b1 	.word	0x080057b1
 80057ac:	080057c9 	.word	0x080057c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
      break;
 80057b4:	e030      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d025      	beq.n	800580e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c6:	e022      	b.n	800580e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057d0:	d11f      	bne.n	8005812 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d6:	e01c      	b.n	8005812 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d903      	bls.n	80057e6 <DMA_CheckFifoParam+0xb6>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d003      	beq.n	80057ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057e4:	e018      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
      break;
 80057ea:	e015      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00e      	beq.n	8005816 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
      break;
 80057fc:	e00b      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
      break;
 80057fe:	bf00      	nop
 8005800:	e00a      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
      break;
 8005802:	bf00      	nop
 8005804:	e008      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
      break;
 8005806:	bf00      	nop
 8005808:	e006      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
      break;
 800580a:	bf00      	nop
 800580c:	e004      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
      break;
 800580e:	bf00      	nop
 8005810:	e002      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
      break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
      break;
 8005816:	bf00      	nop
    }
  }

  return status;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop

08005828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005828:	b480      	push	{r7}
 800582a:	b089      	sub	sp, #36	@ 0x24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800583a:	2300      	movs	r3, #0
 800583c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	e159      	b.n	8005af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005844:	2201      	movs	r2, #1
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4013      	ands	r3, r2
 8005856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	429a      	cmp	r2, r3
 800585e:	f040 8148 	bne.w	8005af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b01      	cmp	r3, #1
 800586c:	d005      	beq.n	800587a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005876:	2b02      	cmp	r3, #2
 8005878:	d130      	bne.n	80058dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	2203      	movs	r2, #3
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	43db      	mvns	r3, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4013      	ands	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058b0:	2201      	movs	r2, #1
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	f003 0201 	and.w	r2, r3, #1
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d017      	beq.n	8005918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	2203      	movs	r2, #3
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	43db      	mvns	r3, r3
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	4013      	ands	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4313      	orrs	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d123      	bne.n	800596c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	08da      	lsrs	r2, r3, #3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3208      	adds	r2, #8
 800592c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	220f      	movs	r2, #15
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4013      	ands	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	08da      	lsrs	r2, r3, #3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3208      	adds	r2, #8
 8005966:	69b9      	ldr	r1, [r7, #24]
 8005968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	2203      	movs	r2, #3
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43db      	mvns	r3, r3
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4013      	ands	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 0203 	and.w	r2, r3, #3
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4313      	orrs	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80a2 	beq.w	8005af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	4b57      	ldr	r3, [pc, #348]	@ (8005b10 <HAL_GPIO_Init+0x2e8>)
 80059b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b6:	4a56      	ldr	r2, [pc, #344]	@ (8005b10 <HAL_GPIO_Init+0x2e8>)
 80059b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80059be:	4b54      	ldr	r3, [pc, #336]	@ (8005b10 <HAL_GPIO_Init+0x2e8>)
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059ca:	4a52      	ldr	r2, [pc, #328]	@ (8005b14 <HAL_GPIO_Init+0x2ec>)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	3302      	adds	r3, #2
 80059d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	220f      	movs	r2, #15
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4013      	ands	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a49      	ldr	r2, [pc, #292]	@ (8005b18 <HAL_GPIO_Init+0x2f0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d019      	beq.n	8005a2a <HAL_GPIO_Init+0x202>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a48      	ldr	r2, [pc, #288]	@ (8005b1c <HAL_GPIO_Init+0x2f4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_GPIO_Init+0x1fe>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a47      	ldr	r2, [pc, #284]	@ (8005b20 <HAL_GPIO_Init+0x2f8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00d      	beq.n	8005a22 <HAL_GPIO_Init+0x1fa>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a46      	ldr	r2, [pc, #280]	@ (8005b24 <HAL_GPIO_Init+0x2fc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d007      	beq.n	8005a1e <HAL_GPIO_Init+0x1f6>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a45      	ldr	r2, [pc, #276]	@ (8005b28 <HAL_GPIO_Init+0x300>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d101      	bne.n	8005a1a <HAL_GPIO_Init+0x1f2>
 8005a16:	2304      	movs	r3, #4
 8005a18:	e008      	b.n	8005a2c <HAL_GPIO_Init+0x204>
 8005a1a:	2307      	movs	r3, #7
 8005a1c:	e006      	b.n	8005a2c <HAL_GPIO_Init+0x204>
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e004      	b.n	8005a2c <HAL_GPIO_Init+0x204>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e002      	b.n	8005a2c <HAL_GPIO_Init+0x204>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <HAL_GPIO_Init+0x204>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	f002 0203 	and.w	r2, r2, #3
 8005a32:	0092      	lsls	r2, r2, #2
 8005a34:	4093      	lsls	r3, r2
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a3c:	4935      	ldr	r1, [pc, #212]	@ (8005b14 <HAL_GPIO_Init+0x2ec>)
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	089b      	lsrs	r3, r3, #2
 8005a42:	3302      	adds	r3, #2
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a4a:	4b38      	ldr	r3, [pc, #224]	@ (8005b2c <HAL_GPIO_Init+0x304>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	43db      	mvns	r3, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4013      	ands	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8005b2c <HAL_GPIO_Init+0x304>)
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a74:	4b2d      	ldr	r3, [pc, #180]	@ (8005b2c <HAL_GPIO_Init+0x304>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	4013      	ands	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a98:	4a24      	ldr	r2, [pc, #144]	@ (8005b2c <HAL_GPIO_Init+0x304>)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a9e:	4b23      	ldr	r3, [pc, #140]	@ (8005b2c <HAL_GPIO_Init+0x304>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b2c <HAL_GPIO_Init+0x304>)
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ac8:	4b18      	ldr	r3, [pc, #96]	@ (8005b2c <HAL_GPIO_Init+0x304>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005aec:	4a0f      	ldr	r2, [pc, #60]	@ (8005b2c <HAL_GPIO_Init+0x304>)
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	3301      	adds	r3, #1
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	f67f aea2 	bls.w	8005844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	3724      	adds	r7, #36	@ 0x24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800
 8005b14:	40013800 	.word	0x40013800
 8005b18:	40020000 	.word	0x40020000
 8005b1c:	40020400 	.word	0x40020400
 8005b20:	40020800 	.word	0x40020800
 8005b24:	40020c00 	.word	0x40020c00
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	40013c00 	.word	0x40013c00

08005b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	887b      	ldrh	r3, [r7, #2]
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
 8005b4c:	e001      	b.n	8005b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	807b      	strh	r3, [r7, #2]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b70:	787b      	ldrb	r3, [r7, #1]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b76:	887a      	ldrh	r2, [r7, #2]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b7c:	e003      	b.n	8005b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	041a      	lsls	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	619a      	str	r2, [r3, #24]
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e12b      	b.n	8005dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fd f864 	bl	8002c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2224      	movs	r2, #36	@ 0x24
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0201 	bic.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bf8:	f002 fe38 	bl	800886c <HAL_RCC_GetPCLK1Freq>
 8005bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4a81      	ldr	r2, [pc, #516]	@ (8005e08 <HAL_I2C_Init+0x274>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d807      	bhi.n	8005c18 <HAL_I2C_Init+0x84>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a80      	ldr	r2, [pc, #512]	@ (8005e0c <HAL_I2C_Init+0x278>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	bf94      	ite	ls
 8005c10:	2301      	movls	r3, #1
 8005c12:	2300      	movhi	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	e006      	b.n	8005c26 <HAL_I2C_Init+0x92>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a7d      	ldr	r2, [pc, #500]	@ (8005e10 <HAL_I2C_Init+0x27c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	bf94      	ite	ls
 8005c20:	2301      	movls	r3, #1
 8005c22:	2300      	movhi	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e0e7      	b.n	8005dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4a78      	ldr	r2, [pc, #480]	@ (8005e14 <HAL_I2C_Init+0x280>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	0c9b      	lsrs	r3, r3, #18
 8005c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8005e08 <HAL_I2C_Init+0x274>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d802      	bhi.n	8005c68 <HAL_I2C_Init+0xd4>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	3301      	adds	r3, #1
 8005c66:	e009      	b.n	8005c7c <HAL_I2C_Init+0xe8>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	4a69      	ldr	r2, [pc, #420]	@ (8005e18 <HAL_I2C_Init+0x284>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	099b      	lsrs	r3, r3, #6
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005c8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	495c      	ldr	r1, [pc, #368]	@ (8005e08 <HAL_I2C_Init+0x274>)
 8005c98:	428b      	cmp	r3, r1
 8005c9a:	d819      	bhi.n	8005cd0 <HAL_I2C_Init+0x13c>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	1e59      	subs	r1, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005caa:	1c59      	adds	r1, r3, #1
 8005cac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005cb0:	400b      	ands	r3, r1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <HAL_I2C_Init+0x138>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1e59      	subs	r1, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cca:	e051      	b.n	8005d70 <HAL_I2C_Init+0x1dc>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	e04f      	b.n	8005d70 <HAL_I2C_Init+0x1dc>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d111      	bne.n	8005cfc <HAL_I2C_Init+0x168>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	1e58      	subs	r0, r3, #1
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6859      	ldr	r1, [r3, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	440b      	add	r3, r1
 8005ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cea:	3301      	adds	r3, #1
 8005cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bf0c      	ite	eq
 8005cf4:	2301      	moveq	r3, #1
 8005cf6:	2300      	movne	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	e012      	b.n	8005d22 <HAL_I2C_Init+0x18e>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	1e58      	subs	r0, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6859      	ldr	r1, [r3, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	0099      	lsls	r1, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d12:	3301      	adds	r3, #1
 8005d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_I2C_Init+0x196>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e022      	b.n	8005d70 <HAL_I2C_Init+0x1dc>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10e      	bne.n	8005d50 <HAL_I2C_Init+0x1bc>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1e58      	subs	r0, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6859      	ldr	r1, [r3, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	440b      	add	r3, r1
 8005d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d44:	3301      	adds	r3, #1
 8005d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d4e:	e00f      	b.n	8005d70 <HAL_I2C_Init+0x1dc>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	1e58      	subs	r0, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6859      	ldr	r1, [r3, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	0099      	lsls	r1, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d66:	3301      	adds	r3, #1
 8005d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	6809      	ldr	r1, [r1, #0]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69da      	ldr	r2, [r3, #28]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6911      	ldr	r1, [r2, #16]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	68d2      	ldr	r2, [r2, #12]
 8005daa:	4311      	orrs	r1, r2
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695a      	ldr	r2, [r3, #20]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	000186a0 	.word	0x000186a0
 8005e0c:	001e847f 	.word	0x001e847f
 8005e10:	003d08ff 	.word	0x003d08ff
 8005e14:	431bde83 	.word	0x431bde83
 8005e18:	10624dd3 	.word	0x10624dd3

08005e1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	4608      	mov	r0, r1
 8005e26:	4611      	mov	r1, r2
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	817b      	strh	r3, [r7, #10]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	813b      	strh	r3, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e36:	f7fe fe07 	bl	8004a48 <HAL_GetTick>
 8005e3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	f040 80d9 	bne.w	8005ffc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	2319      	movs	r3, #25
 8005e50:	2201      	movs	r2, #1
 8005e52:	496d      	ldr	r1, [pc, #436]	@ (8006008 <HAL_I2C_Mem_Write+0x1ec>)
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fc7f 	bl	8006758 <I2C_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e60:	2302      	movs	r3, #2
 8005e62:	e0cc      	b.n	8005ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_I2C_Mem_Write+0x56>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e0c5      	b.n	8005ffe <HAL_I2C_Mem_Write+0x1e2>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d007      	beq.n	8005e98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ea6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2221      	movs	r2, #33	@ 0x21
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2240      	movs	r2, #64	@ 0x40
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a3a      	ldr	r2, [r7, #32]
 8005ec2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4a4d      	ldr	r2, [pc, #308]	@ (800600c <HAL_I2C_Mem_Write+0x1f0>)
 8005ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005eda:	88f8      	ldrh	r0, [r7, #6]
 8005edc:	893a      	ldrh	r2, [r7, #8]
 8005ede:	8979      	ldrh	r1, [r7, #10]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	4603      	mov	r3, r0
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fab6 	bl	800645c <I2C_RequestMemoryWrite>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d052      	beq.n	8005f9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e081      	b.n	8005ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fd00 	bl	8006904 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00d      	beq.n	8005f26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d107      	bne.n	8005f22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e06b      	b.n	8005ffe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2a:	781a      	ldrb	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d11b      	bne.n	8005f9c <HAL_I2C_Mem_Write+0x180>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d017      	beq.n	8005f9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1aa      	bne.n	8005efa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 fcec 	bl	8006986 <I2C_WaitOnBTFFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00d      	beq.n	8005fd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d107      	bne.n	8005fcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e016      	b.n	8005ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	e000      	b.n	8005ffe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ffc:	2302      	movs	r3, #2
  }
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	00100002 	.word	0x00100002
 800600c:	ffff0000 	.word	0xffff0000

08006010 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08c      	sub	sp, #48	@ 0x30
 8006014:	af02      	add	r7, sp, #8
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	4608      	mov	r0, r1
 800601a:	4611      	mov	r1, r2
 800601c:	461a      	mov	r2, r3
 800601e:	4603      	mov	r3, r0
 8006020:	817b      	strh	r3, [r7, #10]
 8006022:	460b      	mov	r3, r1
 8006024:	813b      	strh	r3, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800602a:	f7fe fd0d 	bl	8004a48 <HAL_GetTick>
 800602e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b20      	cmp	r3, #32
 800603a:	f040 8208 	bne.w	800644e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	2319      	movs	r3, #25
 8006044:	2201      	movs	r2, #1
 8006046:	497b      	ldr	r1, [pc, #492]	@ (8006234 <HAL_I2C_Mem_Read+0x224>)
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fb85 	bl	8006758 <I2C_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
 8006056:	e1fb      	b.n	8006450 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_I2C_Mem_Read+0x56>
 8006062:	2302      	movs	r3, #2
 8006064:	e1f4      	b.n	8006450 <HAL_I2C_Mem_Read+0x440>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d007      	beq.n	800608c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800609a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2222      	movs	r2, #34	@ 0x22
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2240      	movs	r2, #64	@ 0x40
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80060bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006238 <HAL_I2C_Mem_Read+0x228>)
 80060cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060ce:	88f8      	ldrh	r0, [r7, #6]
 80060d0:	893a      	ldrh	r2, [r7, #8]
 80060d2:	8979      	ldrh	r1, [r7, #10]
 80060d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d6:	9301      	str	r3, [sp, #4]
 80060d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	4603      	mov	r3, r0
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fa52 	bl	8006588 <I2C_RequestMemoryRead>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e1b0      	b.n	8006450 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d113      	bne.n	800611e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f6:	2300      	movs	r3, #0
 80060f8:	623b      	str	r3, [r7, #32]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	623b      	str	r3, [r7, #32]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	623b      	str	r3, [r7, #32]
 800610a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	e184      	b.n	8006428 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006122:	2b01      	cmp	r3, #1
 8006124:	d11b      	bne.n	800615e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006136:	2300      	movs	r3, #0
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	61fb      	str	r3, [r7, #28]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e164      	b.n	8006428 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006162:	2b02      	cmp	r3, #2
 8006164:	d11b      	bne.n	800619e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006174:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	e144      	b.n	8006428 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061b4:	e138      	b.n	8006428 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	f200 80f1 	bhi.w	80063a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d123      	bne.n	8006210 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fc1b 	bl	8006a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e139      	b.n	8006450 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800620e:	e10b      	b.n	8006428 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006214:	2b02      	cmp	r3, #2
 8006216:	d14e      	bne.n	80062b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	2200      	movs	r2, #0
 8006220:	4906      	ldr	r1, [pc, #24]	@ (800623c <HAL_I2C_Mem_Read+0x22c>)
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fa98 	bl	8006758 <I2C_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d008      	beq.n	8006240 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e10e      	b.n	8006450 <HAL_I2C_Mem_Read+0x440>
 8006232:	bf00      	nop
 8006234:	00100002 	.word	0x00100002
 8006238:	ffff0000 	.word	0xffff0000
 800623c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800624e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626c:	3b01      	subs	r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062b4:	e0b8      	b.n	8006428 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062bc:	2200      	movs	r2, #0
 80062be:	4966      	ldr	r1, [pc, #408]	@ (8006458 <HAL_I2C_Mem_Read+0x448>)
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fa49 	bl	8006758 <I2C_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e0bf      	b.n	8006450 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006318:	2200      	movs	r2, #0
 800631a:	494f      	ldr	r1, [pc, #316]	@ (8006458 <HAL_I2C_Mem_Read+0x448>)
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fa1b 	bl	8006758 <I2C_WaitOnFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e091      	b.n	8006450 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800633a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063a0:	e042      	b.n	8006428 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fb2e 	bl	8006a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e04c      	b.n	8006450 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d118      	bne.n	8006428 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800642c:	2b00      	cmp	r3, #0
 800642e:	f47f aec2 	bne.w	80061b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e000      	b.n	8006450 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800644e:	2302      	movs	r3, #2
  }
}
 8006450:	4618      	mov	r0, r3
 8006452:	3728      	adds	r7, #40	@ 0x28
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	00010004 	.word	0x00010004

0800645c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	4608      	mov	r0, r1
 8006466:	4611      	mov	r1, r2
 8006468:	461a      	mov	r2, r3
 800646a:	4603      	mov	r3, r0
 800646c:	817b      	strh	r3, [r7, #10]
 800646e:	460b      	mov	r3, r1
 8006470:	813b      	strh	r3, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	2200      	movs	r2, #0
 800648e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f960 	bl	8006758 <I2C_WaitOnFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00d      	beq.n	80064ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064ac:	d103      	bne.n	80064b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e05f      	b.n	800657a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ba:	897b      	ldrh	r3, [r7, #10]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	6a3a      	ldr	r2, [r7, #32]
 80064ce:	492d      	ldr	r1, [pc, #180]	@ (8006584 <I2C_RequestMemoryWrite+0x128>)
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f998 	bl	8006806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e04c      	b.n	800657a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f8:	6a39      	ldr	r1, [r7, #32]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 fa02 	bl	8006904 <I2C_WaitOnTXEFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00d      	beq.n	8006522 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650a:	2b04      	cmp	r3, #4
 800650c:	d107      	bne.n	800651e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800651c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e02b      	b.n	800657a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d105      	bne.n	8006534 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006528:	893b      	ldrh	r3, [r7, #8]
 800652a:	b2da      	uxtb	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	611a      	str	r2, [r3, #16]
 8006532:	e021      	b.n	8006578 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006534:	893b      	ldrh	r3, [r7, #8]
 8006536:	0a1b      	lsrs	r3, r3, #8
 8006538:	b29b      	uxth	r3, r3
 800653a:	b2da      	uxtb	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006544:	6a39      	ldr	r1, [r7, #32]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f9dc 	bl	8006904 <I2C_WaitOnTXEFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00d      	beq.n	800656e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	2b04      	cmp	r3, #4
 8006558:	d107      	bne.n	800656a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006568:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e005      	b.n	800657a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800656e:	893b      	ldrh	r3, [r7, #8]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	00010002 	.word	0x00010002

08006588 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b088      	sub	sp, #32
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	4608      	mov	r0, r1
 8006592:	4611      	mov	r1, r2
 8006594:	461a      	mov	r2, r3
 8006596:	4603      	mov	r3, r0
 8006598:	817b      	strh	r3, [r7, #10]
 800659a:	460b      	mov	r3, r1
 800659c:	813b      	strh	r3, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 f8c2 	bl	8006758 <I2C_WaitOnFlagUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00d      	beq.n	80065f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e8:	d103      	bne.n	80065f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e0aa      	b.n	800674c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065f6:	897b      	ldrh	r3, [r7, #10]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	6a3a      	ldr	r2, [r7, #32]
 800660a:	4952      	ldr	r1, [pc, #328]	@ (8006754 <I2C_RequestMemoryRead+0x1cc>)
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f8fa 	bl	8006806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e097      	b.n	800674c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006634:	6a39      	ldr	r1, [r7, #32]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f964 	bl	8006904 <I2C_WaitOnTXEFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00d      	beq.n	800665e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	2b04      	cmp	r3, #4
 8006648:	d107      	bne.n	800665a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e076      	b.n	800674c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d105      	bne.n	8006670 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006664:	893b      	ldrh	r3, [r7, #8]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	611a      	str	r2, [r3, #16]
 800666e:	e021      	b.n	80066b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006670:	893b      	ldrh	r3, [r7, #8]
 8006672:	0a1b      	lsrs	r3, r3, #8
 8006674:	b29b      	uxth	r3, r3
 8006676:	b2da      	uxtb	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800667e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006680:	6a39      	ldr	r1, [r7, #32]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 f93e 	bl	8006904 <I2C_WaitOnTXEFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00d      	beq.n	80066aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	2b04      	cmp	r3, #4
 8006694:	d107      	bne.n	80066a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e050      	b.n	800674c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066aa:	893b      	ldrh	r3, [r7, #8]
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b6:	6a39      	ldr	r1, [r7, #32]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f923 	bl	8006904 <I2C_WaitOnTXEFlagUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00d      	beq.n	80066e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d107      	bne.n	80066dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e035      	b.n	800674c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f82b 	bl	8006758 <I2C_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00d      	beq.n	8006724 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006716:	d103      	bne.n	8006720 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800671e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e013      	b.n	800674c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006724:	897b      	ldrh	r3, [r7, #10]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f043 0301 	orr.w	r3, r3, #1
 800672c:	b2da      	uxtb	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	6a3a      	ldr	r2, [r7, #32]
 8006738:	4906      	ldr	r1, [pc, #24]	@ (8006754 <I2C_RequestMemoryRead+0x1cc>)
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f863 	bl	8006806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	00010002 	.word	0x00010002

08006758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006768:	e025      	b.n	80067b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006770:	d021      	beq.n	80067b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006772:	f7fe f969 	bl	8004a48 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d116      	bne.n	80067b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a2:	f043 0220 	orr.w	r2, r3, #32
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e023      	b.n	80067fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d10d      	bne.n	80067dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	43da      	mvns	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4013      	ands	r3, r2
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bf0c      	ite	eq
 80067d2:	2301      	moveq	r3, #1
 80067d4:	2300      	movne	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	e00c      	b.n	80067f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	43da      	mvns	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4013      	ands	r3, r2
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bf0c      	ite	eq
 80067ee:	2301      	moveq	r3, #1
 80067f0:	2300      	movne	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d0b6      	beq.n	800676a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
 8006812:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006814:	e051      	b.n	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006824:	d123      	bne.n	800686e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006834:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800683e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2220      	movs	r2, #32
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685a:	f043 0204 	orr.w	r2, r3, #4
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e046      	b.n	80068fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006874:	d021      	beq.n	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006876:	f7fe f8e7 	bl	8004a48 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	d302      	bcc.n	800688c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d116      	bne.n	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	f043 0220 	orr.w	r2, r3, #32
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e020      	b.n	80068fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	0c1b      	lsrs	r3, r3, #16
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d10c      	bne.n	80068de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	43da      	mvns	r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4013      	ands	r3, r2
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bf14      	ite	ne
 80068d6:	2301      	movne	r3, #1
 80068d8:	2300      	moveq	r3, #0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	e00b      	b.n	80068f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	43da      	mvns	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4013      	ands	r3, r2
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bf14      	ite	ne
 80068f0:	2301      	movne	r3, #1
 80068f2:	2300      	moveq	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d18d      	bne.n	8006816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006910:	e02d      	b.n	800696e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f8ce 	bl	8006ab4 <I2C_IsAcknowledgeFailed>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e02d      	b.n	800697e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006928:	d021      	beq.n	800696e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692a:	f7fe f88d 	bl	8004a48 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	429a      	cmp	r2, r3
 8006938:	d302      	bcc.n	8006940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d116      	bne.n	800696e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695a:	f043 0220 	orr.w	r2, r3, #32
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e007      	b.n	800697e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006978:	2b80      	cmp	r3, #128	@ 0x80
 800697a:	d1ca      	bne.n	8006912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006992:	e02d      	b.n	80069f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f88d 	bl	8006ab4 <I2C_IsAcknowledgeFailed>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e02d      	b.n	8006a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069aa:	d021      	beq.n	80069f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ac:	f7fe f84c 	bl	8004a48 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d302      	bcc.n	80069c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d116      	bne.n	80069f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069dc:	f043 0220 	orr.w	r2, r3, #32
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e007      	b.n	8006a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d1ca      	bne.n	8006994 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a14:	e042      	b.n	8006a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d119      	bne.n	8006a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0210 	mvn.w	r2, #16
 8006a2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e029      	b.n	8006aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a58:	f7fd fff6 	bl	8004a48 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d302      	bcc.n	8006a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d116      	bne.n	8006a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a88:	f043 0220 	orr.w	r2, r3, #32
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e007      	b.n	8006aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa6:	2b40      	cmp	r3, #64	@ 0x40
 8006aa8:	d1b5      	bne.n	8006a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aca:	d11b      	bne.n	8006b04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ad4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af0:	f043 0204 	orr.w	r2, r3, #4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b14:	b08f      	sub	sp, #60	@ 0x3c
 8006b16:	af0a      	add	r7, sp, #40	@ 0x28
 8006b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e10f      	b.n	8006d44 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f009 fabe 	bl	80100c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2203      	movs	r2, #3
 8006b48:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d102      	bne.n	8006b5e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f003 f95f 	bl	8009e26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	603b      	str	r3, [r7, #0]
 8006b6e:	687e      	ldr	r6, [r7, #4]
 8006b70:	466d      	mov	r5, sp
 8006b72:	f106 0410 	add.w	r4, r6, #16
 8006b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b82:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b86:	1d33      	adds	r3, r6, #4
 8006b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b8a:	6838      	ldr	r0, [r7, #0]
 8006b8c:	f003 f836 	bl	8009bfc <USB_CoreInit>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e0d0      	b.n	8006d44 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f003 f94d 	bl	8009e48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]
 8006bb2:	e04a      	b.n	8006c4a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006bb4:	7bfa      	ldrb	r2, [r7, #15]
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	333d      	adds	r3, #61	@ 0x3d
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006bc8:	7bfa      	ldrb	r2, [r7, #15]
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	333c      	adds	r3, #60	@ 0x3c
 8006bd8:	7bfa      	ldrb	r2, [r7, #15]
 8006bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006bdc:	7bfa      	ldrb	r2, [r7, #15]
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	b298      	uxth	r0, r3
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	3344      	adds	r3, #68	@ 0x44
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006bf4:	7bfa      	ldrb	r2, [r7, #15]
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	3340      	adds	r3, #64	@ 0x40
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c08:	7bfa      	ldrb	r2, [r7, #15]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	3348      	adds	r3, #72	@ 0x48
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c1c:	7bfa      	ldrb	r2, [r7, #15]
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4613      	mov	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	334c      	adds	r3, #76	@ 0x4c
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c30:	7bfa      	ldrb	r2, [r7, #15]
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	3354      	adds	r3, #84	@ 0x54
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	3301      	adds	r3, #1
 8006c48:	73fb      	strb	r3, [r7, #15]
 8006c4a:	7bfa      	ldrb	r2, [r7, #15]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d3af      	bcc.n	8006bb4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]
 8006c58:	e044      	b.n	8006ce4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c5a:	7bfa      	ldrb	r2, [r7, #15]
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c70:	7bfa      	ldrb	r2, [r7, #15]
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8006c82:	7bfa      	ldrb	r2, [r7, #15]
 8006c84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c86:	7bfa      	ldrb	r2, [r7, #15]
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006c98:	2200      	movs	r2, #0
 8006c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c9c:	7bfa      	ldrb	r2, [r7, #15]
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cb2:	7bfa      	ldrb	r2, [r7, #15]
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	4413      	add	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006cc8:	7bfa      	ldrb	r2, [r7, #15]
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
 8006ce4:	7bfa      	ldrb	r2, [r7, #15]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d3b5      	bcc.n	8006c5a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	687e      	ldr	r6, [r7, #4]
 8006cf6:	466d      	mov	r5, sp
 8006cf8:	f106 0410 	add.w	r4, r6, #16
 8006cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d08:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d0c:	1d33      	adds	r3, r6, #4
 8006d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d10:	6838      	ldr	r0, [r7, #0]
 8006d12:	f003 f8e5 	bl	8009ee0 <USB_DevInit>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e00d      	b.n	8006d44 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f004 fa34 	bl	800b1aa <USB_DevDisconnect>

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_PCD_Start+0x1c>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e020      	b.n	8006daa <HAL_PCD_Start+0x5e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d109      	bne.n	8006d8c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d005      	beq.n	8006d8c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f003 f837 	bl	8009e04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f004 f9e4 	bl	800b168 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006db2:	b590      	push	{r4, r7, lr}
 8006db4:	b08d      	sub	sp, #52	@ 0x34
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f004 faa2 	bl	800b312 <USB_GetMode>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f040 848a 	bne.w	80076ea <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f004 fa06 	bl	800b1ec <USB_ReadInterrupts>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8480 	beq.w	80076e8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	0a1b      	lsrs	r3, r3, #8
 8006df2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f004 f9f3 	bl	800b1ec <USB_ReadInterrupts>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d107      	bne.n	8006e20 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695a      	ldr	r2, [r3, #20]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f002 0202 	and.w	r2, r2, #2
 8006e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f004 f9e1 	bl	800b1ec <USB_ReadInterrupts>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	f003 0310 	and.w	r3, r3, #16
 8006e30:	2b10      	cmp	r3, #16
 8006e32:	d161      	bne.n	8006ef8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0210 	bic.w	r2, r2, #16
 8006e42:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	f003 020f 	and.w	r2, r3, #15
 8006e50:	4613      	mov	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4413      	add	r3, r2
 8006e60:	3304      	adds	r3, #4
 8006e62:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	0c5b      	lsrs	r3, r3, #17
 8006e68:	f003 030f 	and.w	r3, r3, #15
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d124      	bne.n	8006eba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d035      	beq.n	8006ee8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	091b      	lsrs	r3, r3, #4
 8006e84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6a38      	ldr	r0, [r7, #32]
 8006e90:	f004 f818 	bl	800aec4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	091b      	lsrs	r3, r3, #4
 8006e9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ea0:	441a      	add	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	6a1a      	ldr	r2, [r3, #32]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	091b      	lsrs	r3, r3, #4
 8006eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eb2:	441a      	add	r2, r3
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	621a      	str	r2, [r3, #32]
 8006eb8:	e016      	b.n	8006ee8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	0c5b      	lsrs	r3, r3, #17
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	2b06      	cmp	r3, #6
 8006ec4:	d110      	bne.n	8006ee8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006ecc:	2208      	movs	r2, #8
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6a38      	ldr	r0, [r7, #32]
 8006ed2:	f003 fff7 	bl	800aec4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	6a1a      	ldr	r2, [r3, #32]
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	091b      	lsrs	r3, r3, #4
 8006ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ee2:	441a      	add	r2, r3
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0210 	orr.w	r2, r2, #16
 8006ef6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f004 f975 	bl	800b1ec <USB_ReadInterrupts>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f0c:	f040 80a7 	bne.w	800705e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f004 f97a 	bl	800b212 <USB_ReadDevAllOutEpInterrupt>
 8006f1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006f20:	e099      	b.n	8007056 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 808e 	beq.w	800704a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	4611      	mov	r1, r2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f004 f99e 	bl	800b27a <USB_ReadDevOutEPInterrupt>
 8006f3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00c      	beq.n	8006f64 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f56:	461a      	mov	r2, r3
 8006f58:	2301      	movs	r3, #1
 8006f5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006f5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fec2 	bl	8007ce8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f003 0308 	and.w	r3, r3, #8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00c      	beq.n	8006f88 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 ff98 	bl	8007eb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d008      	beq.n	8006fa4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d030      	beq.n	8007010 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb6:	2b80      	cmp	r3, #128	@ 0x80
 8006fb8:	d109      	bne.n	8006fce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006fcc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	4413      	add	r3, r2
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	78db      	ldrb	r3, [r3, #3]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d108      	bne.n	8006ffe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f009 f95d 	bl	80102b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700a:	461a      	mov	r2, r3
 800700c:	2302      	movs	r3, #2
 800700e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d008      	beq.n	800702c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007026:	461a      	mov	r2, r3
 8007028:	2320      	movs	r3, #32
 800702a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d009      	beq.n	800704a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007042:	461a      	mov	r2, r3
 8007044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007048:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	3301      	adds	r3, #1
 800704e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	085b      	lsrs	r3, r3, #1
 8007054:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007058:	2b00      	cmp	r3, #0
 800705a:	f47f af62 	bne.w	8006f22 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f004 f8c2 	bl	800b1ec <USB_ReadInterrupts>
 8007068:	4603      	mov	r3, r0
 800706a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800706e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007072:	f040 80db 	bne.w	800722c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f004 f8e3 	bl	800b246 <USB_ReadDevAllInEpInterrupt>
 8007080:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007086:	e0cd      	b.n	8007224 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80c2 	beq.w	8007218 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	4611      	mov	r1, r2
 800709e:	4618      	mov	r0, r3
 80070a0:	f004 f909 	bl	800b2b6 <USB_ReadDevInEPInterrupt>
 80070a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d057      	beq.n	8007160 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	f003 030f 	and.w	r3, r3, #15
 80070b6:	2201      	movs	r2, #1
 80070b8:	fa02 f303 	lsl.w	r3, r2, r3
 80070bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	43db      	mvns	r3, r3
 80070ca:	69f9      	ldr	r1, [r7, #28]
 80070cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070d0:	4013      	ands	r3, r2
 80070d2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e0:	461a      	mov	r2, r3
 80070e2:	2301      	movs	r3, #1
 80070e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d132      	bne.n	8007154 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f2:	4613      	mov	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	334c      	adds	r3, #76	@ 0x4c
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4403      	add	r3, r0
 800710e:	3348      	adds	r3, #72	@ 0x48
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4419      	add	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007118:	4613      	mov	r3, r2
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4403      	add	r3, r0
 8007122:	334c      	adds	r3, #76	@ 0x4c
 8007124:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d113      	bne.n	8007154 <HAL_PCD_IRQHandler+0x3a2>
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007130:	4613      	mov	r3, r2
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	3354      	adds	r3, #84	@ 0x54
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d108      	bne.n	8007154 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800714c:	461a      	mov	r2, r3
 800714e:	2101      	movs	r1, #1
 8007150:	f004 f910 	bl	800b374 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	b2db      	uxtb	r3, r3
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f009 f831 	bl	80101c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d008      	beq.n	800717c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007176:	461a      	mov	r2, r3
 8007178:	2308      	movs	r3, #8
 800717a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f003 0310 	and.w	r3, r3, #16
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007192:	461a      	mov	r2, r3
 8007194:	2310      	movs	r3, #16
 8007196:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d008      	beq.n	80071b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ae:	461a      	mov	r2, r3
 80071b0:	2340      	movs	r3, #64	@ 0x40
 80071b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d023      	beq.n	8007206 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80071be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071c0:	6a38      	ldr	r0, [r7, #32]
 80071c2:	f002 fff1 	bl	800a1a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80071c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071c8:	4613      	mov	r3, r2
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	3338      	adds	r3, #56	@ 0x38
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4413      	add	r3, r2
 80071d6:	3304      	adds	r3, #4
 80071d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	78db      	ldrb	r3, [r3, #3]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d108      	bne.n	80071f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2200      	movs	r2, #0
 80071e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80071e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f009 f874 	bl	80102dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007200:	461a      	mov	r2, r3
 8007202:	2302      	movs	r3, #2
 8007204:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007210:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fcdb 	bl	8007bce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	3301      	adds	r3, #1
 800721c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800721e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007220:	085b      	lsrs	r3, r3, #1
 8007222:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007226:	2b00      	cmp	r3, #0
 8007228:	f47f af2e 	bne.w	8007088 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4618      	mov	r0, r3
 8007232:	f003 ffdb 	bl	800b1ec <USB_ReadInterrupts>
 8007236:	4603      	mov	r3, r0
 8007238:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800723c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007240:	d122      	bne.n	8007288 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007250:	f023 0301 	bic.w	r3, r3, #1
 8007254:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800725c:	2b01      	cmp	r3, #1
 800725e:	d108      	bne.n	8007272 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007268:	2100      	movs	r1, #0
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fec2 	bl	8007ff4 <HAL_PCDEx_LPM_Callback>
 8007270:	e002      	b.n	8007278 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f009 f812 	bl	801029c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695a      	ldr	r2, [r3, #20]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007286:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f003 ffad 	bl	800b1ec <USB_ReadInterrupts>
 8007292:	4603      	mov	r3, r0
 8007294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800729c:	d112      	bne.n	80072c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d102      	bne.n	80072b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f008 ffce 	bl	8010250 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695a      	ldr	r2, [r3, #20]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80072c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f003 ff8f 	bl	800b1ec <USB_ReadInterrupts>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072d8:	f040 80b7 	bne.w	800744a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072ea:	f023 0301 	bic.w	r3, r3, #1
 80072ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2110      	movs	r1, #16
 80072f6:	4618      	mov	r0, r3
 80072f8:	f002 ff56 	bl	800a1a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072fc:	2300      	movs	r3, #0
 80072fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007300:	e046      	b.n	8007390 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800730e:	461a      	mov	r2, r3
 8007310:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007314:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	440a      	add	r2, r1
 800732c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007330:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007334:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007342:	461a      	mov	r2, r3
 8007344:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007348:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800734a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007364:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007368:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007384:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007388:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800738a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738c:	3301      	adds	r3, #1
 800738e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007396:	429a      	cmp	r2, r3
 8007398:	d3b3      	bcc.n	8007302 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073a8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80073ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d016      	beq.n	80073e4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073c6:	f043 030b 	orr.w	r3, r3, #11
 80073ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073dc:	f043 030b 	orr.w	r3, r3, #11
 80073e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80073e2:	e015      	b.n	8007410 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	69fa      	ldr	r2, [r7, #28]
 80073ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80073f6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80073fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800740a:	f043 030b 	orr.w	r3, r3, #11
 800740e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800741e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007422:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007434:	461a      	mov	r2, r3
 8007436:	f003 ff9d 	bl	800b374 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695a      	ldr	r2, [r3, #20]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f003 fecc 	bl	800b1ec <USB_ReadInterrupts>
 8007454:	4603      	mov	r3, r0
 8007456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800745a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800745e:	d124      	bne.n	80074aa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f003 ff62 	bl	800b32e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4618      	mov	r0, r3
 8007470:	f002 ff17 	bl	800a2a2 <USB_GetDevSpeed>
 8007474:	4603      	mov	r3, r0
 8007476:	461a      	mov	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681c      	ldr	r4, [r3, #0]
 8007480:	f001 f9e8 	bl	8008854 <HAL_RCC_GetHCLKFreq>
 8007484:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800748a:	b2db      	uxtb	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	4620      	mov	r0, r4
 8007490:	f002 fc16 	bl	8009cc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f008 febc 	bl	8010212 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695a      	ldr	r2, [r3, #20]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80074a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f003 fe9c 	bl	800b1ec <USB_ReadInterrupts>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f003 0308 	and.w	r3, r3, #8
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	d10a      	bne.n	80074d4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f008 fe99 	bl	80101f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695a      	ldr	r2, [r3, #20]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f002 0208 	and.w	r2, r2, #8
 80074d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4618      	mov	r0, r3
 80074da:	f003 fe87 	bl	800b1ec <USB_ReadInterrupts>
 80074de:	4603      	mov	r3, r0
 80074e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e4:	2b80      	cmp	r3, #128	@ 0x80
 80074e6:	d122      	bne.n	800752e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074f4:	2301      	movs	r3, #1
 80074f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f8:	e014      	b.n	8007524 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074fe:	4613      	mov	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d105      	bne.n	800751e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	b2db      	uxtb	r3, r3
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fb27 	bl	8007b6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	3301      	adds	r3, #1
 8007522:	627b      	str	r3, [r7, #36]	@ 0x24
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800752a:	429a      	cmp	r2, r3
 800752c:	d3e5      	bcc.n	80074fa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f003 fe5a 	bl	800b1ec <USB_ReadInterrupts>
 8007538:	4603      	mov	r3, r0
 800753a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800753e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007542:	d13b      	bne.n	80075bc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007544:	2301      	movs	r3, #1
 8007546:	627b      	str	r3, [r7, #36]	@ 0x24
 8007548:	e02b      	b.n	80075a2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800755e:	4613      	mov	r3, r2
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	3340      	adds	r3, #64	@ 0x40
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d115      	bne.n	800759c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007570:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007572:	2b00      	cmp	r3, #0
 8007574:	da12      	bge.n	800759c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800757a:	4613      	mov	r3, r2
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	440b      	add	r3, r1
 8007584:	333f      	adds	r3, #63	@ 0x3f
 8007586:	2201      	movs	r2, #1
 8007588:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007592:	b2db      	uxtb	r3, r3
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fae8 	bl	8007b6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759e:	3301      	adds	r3, #1
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d3ce      	bcc.n	800754a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695a      	ldr	r2, [r3, #20]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80075ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f003 fe13 	bl	800b1ec <USB_ReadInterrupts>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075d0:	d155      	bne.n	800767e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075d2:	2301      	movs	r3, #1
 80075d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075d6:	e045      	b.n	8007664 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ec:	4613      	mov	r3, r2
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d12e      	bne.n	800765e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007600:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007602:	2b00      	cmp	r3, #0
 8007604:	da2b      	bge.n	800765e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8007612:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007616:	429a      	cmp	r2, r3
 8007618:	d121      	bne.n	800765e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761e:	4613      	mov	r3, r2
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	440b      	add	r3, r1
 8007628:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800762c:	2201      	movs	r2, #1
 800762e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800765a:	6053      	str	r3, [r2, #4]
            break;
 800765c:	e007      	b.n	800766e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	3301      	adds	r3, #1
 8007662:	627b      	str	r3, [r7, #36]	@ 0x24
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800766a:	429a      	cmp	r2, r3
 800766c:	d3b4      	bcc.n	80075d8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695a      	ldr	r2, [r3, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800767c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f003 fdb2 	bl	800b1ec <USB_ReadInterrupts>
 8007688:	4603      	mov	r3, r0
 800768a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800768e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007692:	d10a      	bne.n	80076aa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f008 fe33 	bl	8010300 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695a      	ldr	r2, [r3, #20]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80076a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f003 fd9c 	bl	800b1ec <USB_ReadInterrupts>
 80076b4:	4603      	mov	r3, r0
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d115      	bne.n	80076ea <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f008 fe23 	bl	801031c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6859      	ldr	r1, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	e000      	b.n	80076ea <HAL_PCD_IRQHandler+0x938>
      return;
 80076e8:	bf00      	nop
    }
  }
}
 80076ea:	3734      	adds	r7, #52	@ 0x34
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd90      	pop	{r4, r7, pc}

080076f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_PCD_SetAddress+0x1a>
 8007706:	2302      	movs	r3, #2
 8007708:	e013      	b.n	8007732 <HAL_PCD_SetAddress+0x42>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	78fa      	ldrb	r2, [r7, #3]
 8007716:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	4611      	mov	r1, r2
 8007722:	4618      	mov	r0, r3
 8007724:	f003 fcfa 	bl	800b11c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	4608      	mov	r0, r1
 8007744:	4611      	mov	r1, r2
 8007746:	461a      	mov	r2, r3
 8007748:	4603      	mov	r3, r0
 800774a:	70fb      	strb	r3, [r7, #3]
 800774c:	460b      	mov	r3, r1
 800774e:	803b      	strh	r3, [r7, #0]
 8007750:	4613      	mov	r3, r2
 8007752:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da0f      	bge.n	8007780 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	f003 020f 	and.w	r2, r3, #15
 8007766:	4613      	mov	r3, r2
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	3338      	adds	r3, #56	@ 0x38
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	4413      	add	r3, r2
 8007774:	3304      	adds	r3, #4
 8007776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	705a      	strb	r2, [r3, #1]
 800777e:	e00f      	b.n	80077a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	f003 020f 	and.w	r2, r3, #15
 8007786:	4613      	mov	r3, r2
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	3304      	adds	r3, #4
 8007798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80077ac:	883a      	ldrh	r2, [r7, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	78ba      	ldrb	r2, [r7, #2]
 80077b6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80077ca:	78bb      	ldrb	r3, [r7, #2]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d102      	bne.n	80077d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <HAL_PCD_EP_Open+0xaa>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e00e      	b.n	8007802 <HAL_PCD_EP_Open+0xc8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68f9      	ldr	r1, [r7, #12]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f002 fd7a 	bl	800a2ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8007800:	7afb      	ldrb	r3, [r7, #11]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800781a:	2b00      	cmp	r3, #0
 800781c:	da0f      	bge.n	800783e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	f003 020f 	and.w	r2, r3, #15
 8007824:	4613      	mov	r3, r2
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	3338      	adds	r3, #56	@ 0x38
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	3304      	adds	r3, #4
 8007834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	705a      	strb	r2, [r3, #1]
 800783c:	e00f      	b.n	800785e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	f003 020f 	and.w	r2, r3, #15
 8007844:	4613      	mov	r3, r2
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	4413      	add	r3, r2
 8007854:	3304      	adds	r3, #4
 8007856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	b2da      	uxtb	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_PCD_EP_Close+0x6e>
 8007874:	2302      	movs	r3, #2
 8007876:	e00e      	b.n	8007896 <HAL_PCD_EP_Close+0x8c>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68f9      	ldr	r1, [r7, #12]
 8007886:	4618      	mov	r0, r3
 8007888:	f002 fdb8 	bl	800a3fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b086      	sub	sp, #24
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
 80078aa:	460b      	mov	r3, r1
 80078ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	f003 020f 	and.w	r2, r3, #15
 80078b4:	4613      	mov	r3, r2
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	3304      	adds	r3, #4
 80078c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2200      	movs	r2, #0
 80078d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	2200      	movs	r2, #0
 80078de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078e0:	7afb      	ldrb	r3, [r7, #11]
 80078e2:	f003 030f 	and.w	r3, r3, #15
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d102      	bne.n	80078fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	f003 030f 	and.w	r3, r3, #15
 8007900:	2b00      	cmp	r3, #0
 8007902:	d109      	bne.n	8007918 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	6979      	ldr	r1, [r7, #20]
 8007912:	f003 f897 	bl	800aa44 <USB_EP0StartXfer>
 8007916:	e008      	b.n	800792a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	6979      	ldr	r1, [r7, #20]
 8007926:	f002 fe45 	bl	800a5b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	f003 020f 	and.w	r2, r3, #15
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	4613      	mov	r3, r2
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	4413      	add	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	440b      	add	r3, r1
 8007952:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8007956:	681b      	ldr	r3, [r3, #0]
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	607a      	str	r2, [r7, #4]
 800796e:	603b      	str	r3, [r7, #0]
 8007970:	460b      	mov	r3, r1
 8007972:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	f003 020f 	and.w	r2, r3, #15
 800797a:	4613      	mov	r3, r2
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	3338      	adds	r3, #56	@ 0x38
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	3304      	adds	r3, #4
 800798a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2200      	movs	r2, #0
 800799c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2201      	movs	r2, #1
 80079a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079a4:	7afb      	ldrb	r3, [r7, #11]
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d102      	bne.n	80079be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80079be:	7afb      	ldrb	r3, [r7, #11]
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d109      	bne.n	80079dc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	6979      	ldr	r1, [r7, #20]
 80079d6:	f003 f835 	bl	800aa44 <USB_EP0StartXfer>
 80079da:	e008      	b.n	80079ee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	461a      	mov	r2, r3
 80079e8:	6979      	ldr	r1, [r7, #20]
 80079ea:	f002 fde3 	bl	800a5b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a04:	78fb      	ldrb	r3, [r7, #3]
 8007a06:	f003 020f 	and.w	r2, r3, #15
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d901      	bls.n	8007a16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e050      	b.n	8007ab8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	da0f      	bge.n	8007a3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a1e:	78fb      	ldrb	r3, [r7, #3]
 8007a20:	f003 020f 	and.w	r2, r3, #15
 8007a24:	4613      	mov	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	3338      	adds	r3, #56	@ 0x38
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	4413      	add	r3, r2
 8007a32:	3304      	adds	r3, #4
 8007a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	705a      	strb	r2, [r3, #1]
 8007a3c:	e00d      	b.n	8007a5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a3e:	78fa      	ldrb	r2, [r7, #3]
 8007a40:	4613      	mov	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4413      	add	r3, r2
 8007a50:	3304      	adds	r3, #4
 8007a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	f003 030f 	and.w	r3, r3, #15
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_PCD_EP_SetStall+0x82>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e01e      	b.n	8007ab8 <HAL_PCD_EP_SetStall+0xc0>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68f9      	ldr	r1, [r7, #12]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f003 fa73 	bl	800af74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	f003 030f 	and.w	r3, r3, #15
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	b2d9      	uxtb	r1, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	f003 fc63 	bl	800b374 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	f003 020f 	and.w	r2, r3, #15
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d901      	bls.n	8007ade <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e042      	b.n	8007b64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	da0f      	bge.n	8007b06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ae6:	78fb      	ldrb	r3, [r7, #3]
 8007ae8:	f003 020f 	and.w	r2, r3, #15
 8007aec:	4613      	mov	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	3338      	adds	r3, #56	@ 0x38
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	4413      	add	r3, r2
 8007afa:	3304      	adds	r3, #4
 8007afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	705a      	strb	r2, [r3, #1]
 8007b04:	e00f      	b.n	8007b26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	f003 020f 	and.w	r2, r3, #15
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_PCD_EP_ClrStall+0x86>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e00e      	b.n	8007b64 <HAL_PCD_EP_ClrStall+0xa4>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f003 fa7b 	bl	800b050 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	da0c      	bge.n	8007b9a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	f003 020f 	and.w	r2, r3, #15
 8007b86:	4613      	mov	r3, r2
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	3338      	adds	r3, #56	@ 0x38
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	4413      	add	r3, r2
 8007b94:	3304      	adds	r3, #4
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e00c      	b.n	8007bb4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	f003 020f 	and.w	r2, r3, #15
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	4413      	add	r3, r2
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68f9      	ldr	r1, [r7, #12]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f003 f89a 	bl	800acf4 <USB_EPStopXfer>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b08a      	sub	sp, #40	@ 0x28
 8007bd2:	af02      	add	r7, sp, #8
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	4613      	mov	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	3338      	adds	r3, #56	@ 0x38
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a1a      	ldr	r2, [r3, #32]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d901      	bls.n	8007c06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e06c      	b.n	8007ce0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d902      	bls.n	8007c22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	3303      	adds	r3, #3
 8007c26:	089b      	lsrs	r3, r3, #2
 8007c28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c2a:	e02b      	b.n	8007c84 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	699a      	ldr	r2, [r3, #24]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d902      	bls.n	8007c48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	3303      	adds	r3, #3
 8007c4c:	089b      	lsrs	r3, r3, #2
 8007c4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6919      	ldr	r1, [r3, #16]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	4603      	mov	r3, r0
 8007c66:	6978      	ldr	r0, [r7, #20]
 8007c68:	f003 f8ee 	bl	800ae48 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	441a      	add	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a1a      	ldr	r2, [r3, #32]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	441a      	add	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d809      	bhi.n	8007cae <PCD_WriteEmptyTxFifo+0xe0>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6a1a      	ldr	r2, [r3, #32]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d203      	bcs.n	8007cae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1be      	bne.n	8007c2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d811      	bhi.n	8007cde <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	f003 030f 	and.w	r3, r3, #15
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	43db      	mvns	r3, r3
 8007cd4:	6939      	ldr	r1, [r7, #16]
 8007cd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cda:	4013      	ands	r3, r2
 8007cdc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3720      	adds	r7, #32
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	333c      	adds	r3, #60	@ 0x3c
 8007d00:	3304      	adds	r3, #4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d17b      	bne.n	8007e16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d015      	beq.n	8007d54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	4a61      	ldr	r2, [pc, #388]	@ (8007eb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	f240 80b9 	bls.w	8007ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 80b3 	beq.w	8007ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d50:	6093      	str	r3, [r2, #8]
 8007d52:	e0a7      	b.n	8007ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d009      	beq.n	8007d72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	2320      	movs	r3, #32
 8007d6e:	6093      	str	r3, [r2, #8]
 8007d70:	e098      	b.n	8007ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f040 8093 	bne.w	8007ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	4a4b      	ldr	r2, [pc, #300]	@ (8007eb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d90f      	bls.n	8007da6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007da2:	6093      	str	r3, [r2, #8]
 8007da4:	e07e      	b.n	8007ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	4413      	add	r3, r2
 8007db8:	3304      	adds	r3, #4
 8007dba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	0159      	lsls	r1, r3, #5
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	440b      	add	r3, r1
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dd2:	1ad2      	subs	r2, r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d114      	bne.n	8007e08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007df0:	461a      	mov	r2, r3
 8007df2:	2101      	movs	r1, #1
 8007df4:	f003 fabe 	bl	800b374 <USB_EP0_OutStart>
 8007df8:	e006      	b.n	8007e08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	691a      	ldr	r2, [r3, #16]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	441a      	add	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f008 f9bc 	bl	801018c <HAL_PCD_DataOutStageCallback>
 8007e14:	e046      	b.n	8007ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	4a26      	ldr	r2, [pc, #152]	@ (8007eb4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d124      	bne.n	8007e68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00a      	beq.n	8007e3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e34:	461a      	mov	r2, r3
 8007e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e3a:	6093      	str	r3, [r2, #8]
 8007e3c:	e032      	b.n	8007ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d008      	beq.n	8007e5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e54:	461a      	mov	r2, r3
 8007e56:	2320      	movs	r3, #32
 8007e58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f008 f993 	bl	801018c <HAL_PCD_DataOutStageCallback>
 8007e66:	e01d      	b.n	8007ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d114      	bne.n	8007e98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	4613      	mov	r3, r2
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d108      	bne.n	8007e98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007e90:	461a      	mov	r2, r3
 8007e92:	2100      	movs	r1, #0
 8007e94:	f003 fa6e 	bl	800b374 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f008 f974 	bl	801018c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	4f54300a 	.word	0x4f54300a
 8007eb4:	4f54310a 	.word	0x4f54310a

08007eb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	333c      	adds	r3, #60	@ 0x3c
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4a15      	ldr	r2, [pc, #84]	@ (8007f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d90e      	bls.n	8007f0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d009      	beq.n	8007f0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f04:	461a      	mov	r2, r3
 8007f06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f008 f92b 	bl	8010168 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4a0a      	ldr	r2, [pc, #40]	@ (8007f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d90c      	bls.n	8007f34 <PCD_EP_OutSetupPacket_int+0x7c>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d108      	bne.n	8007f34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	2101      	movs	r1, #1
 8007f30:	f003 fa20 	bl	800b374 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	4f54300a 	.word	0x4f54300a

08007f44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
 8007f50:	4613      	mov	r3, r2
 8007f52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d107      	bne.n	8007f72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007f62:	883b      	ldrh	r3, [r7, #0]
 8007f64:	0419      	lsls	r1, r3, #16
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f70:	e028      	b.n	8007fc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f78:	0c1b      	lsrs	r3, r3, #16
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
 8007f84:	e00d      	b.n	8007fa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	3340      	adds	r3, #64	@ 0x40
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	0c1b      	lsrs	r3, r3, #16
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	4413      	add	r3, r2
 8007f9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	73fb      	strb	r3, [r7, #15]
 8007fa2:	7bfa      	ldrb	r2, [r7, #15]
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d3ec      	bcc.n	8007f86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007fac:	883b      	ldrh	r3, [r7, #0]
 8007fae:	0418      	lsls	r0, r3, #16
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6819      	ldr	r1, [r3, #0]
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	4302      	orrs	r2, r0
 8007fbc:	3340      	adds	r3, #64	@ 0x40
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	440b      	add	r3, r1
 8007fc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b083      	sub	sp, #12
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	887a      	ldrh	r2, [r7, #2]
 8007fe4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e267      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d075      	beq.n	8008116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800802a:	4b88      	ldr	r3, [pc, #544]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f003 030c 	and.w	r3, r3, #12
 8008032:	2b04      	cmp	r3, #4
 8008034:	d00c      	beq.n	8008050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008036:	4b85      	ldr	r3, [pc, #532]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800803e:	2b08      	cmp	r3, #8
 8008040:	d112      	bne.n	8008068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008042:	4b82      	ldr	r3, [pc, #520]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800804a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800804e:	d10b      	bne.n	8008068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008050:	4b7e      	ldr	r3, [pc, #504]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d05b      	beq.n	8008114 <HAL_RCC_OscConfig+0x108>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d157      	bne.n	8008114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e242      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008070:	d106      	bne.n	8008080 <HAL_RCC_OscConfig+0x74>
 8008072:	4b76      	ldr	r3, [pc, #472]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a75      	ldr	r2, [pc, #468]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	e01d      	b.n	80080bc <HAL_RCC_OscConfig+0xb0>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008088:	d10c      	bne.n	80080a4 <HAL_RCC_OscConfig+0x98>
 800808a:	4b70      	ldr	r3, [pc, #448]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a6f      	ldr	r2, [pc, #444]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	4b6d      	ldr	r3, [pc, #436]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a6c      	ldr	r2, [pc, #432]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800809c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	e00b      	b.n	80080bc <HAL_RCC_OscConfig+0xb0>
 80080a4:	4b69      	ldr	r3, [pc, #420]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a68      	ldr	r2, [pc, #416]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80080aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	4b66      	ldr	r3, [pc, #408]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a65      	ldr	r2, [pc, #404]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80080b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d013      	beq.n	80080ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c4:	f7fc fcc0 	bl	8004a48 <HAL_GetTick>
 80080c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ca:	e008      	b.n	80080de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080cc:	f7fc fcbc 	bl	8004a48 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b64      	cmp	r3, #100	@ 0x64
 80080d8:	d901      	bls.n	80080de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e207      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080de:	4b5b      	ldr	r3, [pc, #364]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0f0      	beq.n	80080cc <HAL_RCC_OscConfig+0xc0>
 80080ea:	e014      	b.n	8008116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ec:	f7fc fcac 	bl	8004a48 <HAL_GetTick>
 80080f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080f4:	f7fc fca8 	bl	8004a48 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b64      	cmp	r3, #100	@ 0x64
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e1f3      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008106:	4b51      	ldr	r3, [pc, #324]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f0      	bne.n	80080f4 <HAL_RCC_OscConfig+0xe8>
 8008112:	e000      	b.n	8008116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d063      	beq.n	80081ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008122:	4b4a      	ldr	r3, [pc, #296]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 030c 	and.w	r3, r3, #12
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800812e:	4b47      	ldr	r3, [pc, #284]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008136:	2b08      	cmp	r3, #8
 8008138:	d11c      	bne.n	8008174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800813a:	4b44      	ldr	r3, [pc, #272]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d116      	bne.n	8008174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008146:	4b41      	ldr	r3, [pc, #260]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <HAL_RCC_OscConfig+0x152>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d001      	beq.n	800815e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e1c7      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800815e:	4b3b      	ldr	r3, [pc, #236]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	4937      	ldr	r1, [pc, #220]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800816e:	4313      	orrs	r3, r2
 8008170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008172:	e03a      	b.n	80081ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d020      	beq.n	80081be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800817c:	4b34      	ldr	r3, [pc, #208]	@ (8008250 <HAL_RCC_OscConfig+0x244>)
 800817e:	2201      	movs	r2, #1
 8008180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008182:	f7fc fc61 	bl	8004a48 <HAL_GetTick>
 8008186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800818a:	f7fc fc5d 	bl	8004a48 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e1a8      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800819c:	4b2b      	ldr	r3, [pc, #172]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0f0      	beq.n	800818a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081a8:	4b28      	ldr	r3, [pc, #160]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	4925      	ldr	r1, [pc, #148]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	600b      	str	r3, [r1, #0]
 80081bc:	e015      	b.n	80081ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081be:	4b24      	ldr	r3, [pc, #144]	@ (8008250 <HAL_RCC_OscConfig+0x244>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c4:	f7fc fc40 	bl	8004a48 <HAL_GetTick>
 80081c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ca:	e008      	b.n	80081de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081cc:	f7fc fc3c 	bl	8004a48 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e187      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081de:	4b1b      	ldr	r3, [pc, #108]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1f0      	bne.n	80081cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d036      	beq.n	8008264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d016      	beq.n	800822c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081fe:	4b15      	ldr	r3, [pc, #84]	@ (8008254 <HAL_RCC_OscConfig+0x248>)
 8008200:	2201      	movs	r2, #1
 8008202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008204:	f7fc fc20 	bl	8004a48 <HAL_GetTick>
 8008208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800820a:	e008      	b.n	800821e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800820c:	f7fc fc1c 	bl	8004a48 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	2b02      	cmp	r3, #2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e167      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800821e:	4b0b      	ldr	r3, [pc, #44]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0f0      	beq.n	800820c <HAL_RCC_OscConfig+0x200>
 800822a:	e01b      	b.n	8008264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800822c:	4b09      	ldr	r3, [pc, #36]	@ (8008254 <HAL_RCC_OscConfig+0x248>)
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008232:	f7fc fc09 	bl	8004a48 <HAL_GetTick>
 8008236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008238:	e00e      	b.n	8008258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800823a:	f7fc fc05 	bl	8004a48 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d907      	bls.n	8008258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e150      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
 800824c:	40023800 	.word	0x40023800
 8008250:	42470000 	.word	0x42470000
 8008254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008258:	4b88      	ldr	r3, [pc, #544]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800825a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ea      	bne.n	800823a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 8097 	beq.w	80083a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008272:	2300      	movs	r3, #0
 8008274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008276:	4b81      	ldr	r3, [pc, #516]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10f      	bne.n	80082a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008282:	2300      	movs	r3, #0
 8008284:	60bb      	str	r3, [r7, #8]
 8008286:	4b7d      	ldr	r3, [pc, #500]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828a:	4a7c      	ldr	r2, [pc, #496]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800828c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008290:	6413      	str	r3, [r2, #64]	@ 0x40
 8008292:	4b7a      	ldr	r3, [pc, #488]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800829a:	60bb      	str	r3, [r7, #8]
 800829c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800829e:	2301      	movs	r3, #1
 80082a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082a2:	4b77      	ldr	r3, [pc, #476]	@ (8008480 <HAL_RCC_OscConfig+0x474>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d118      	bne.n	80082e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082ae:	4b74      	ldr	r3, [pc, #464]	@ (8008480 <HAL_RCC_OscConfig+0x474>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a73      	ldr	r2, [pc, #460]	@ (8008480 <HAL_RCC_OscConfig+0x474>)
 80082b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082ba:	f7fc fbc5 	bl	8004a48 <HAL_GetTick>
 80082be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082c0:	e008      	b.n	80082d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082c2:	f7fc fbc1 	bl	8004a48 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d901      	bls.n	80082d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e10c      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008480 <HAL_RCC_OscConfig+0x474>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0f0      	beq.n	80082c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d106      	bne.n	80082f6 <HAL_RCC_OscConfig+0x2ea>
 80082e8:	4b64      	ldr	r3, [pc, #400]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 80082ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ec:	4a63      	ldr	r2, [pc, #396]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 80082ee:	f043 0301 	orr.w	r3, r3, #1
 80082f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80082f4:	e01c      	b.n	8008330 <HAL_RCC_OscConfig+0x324>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	d10c      	bne.n	8008318 <HAL_RCC_OscConfig+0x30c>
 80082fe:	4b5f      	ldr	r3, [pc, #380]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008302:	4a5e      	ldr	r2, [pc, #376]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008304:	f043 0304 	orr.w	r3, r3, #4
 8008308:	6713      	str	r3, [r2, #112]	@ 0x70
 800830a:	4b5c      	ldr	r3, [pc, #368]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800830c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800830e:	4a5b      	ldr	r2, [pc, #364]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	6713      	str	r3, [r2, #112]	@ 0x70
 8008316:	e00b      	b.n	8008330 <HAL_RCC_OscConfig+0x324>
 8008318:	4b58      	ldr	r3, [pc, #352]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800831a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800831c:	4a57      	ldr	r2, [pc, #348]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800831e:	f023 0301 	bic.w	r3, r3, #1
 8008322:	6713      	str	r3, [r2, #112]	@ 0x70
 8008324:	4b55      	ldr	r3, [pc, #340]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008328:	4a54      	ldr	r2, [pc, #336]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800832a:	f023 0304 	bic.w	r3, r3, #4
 800832e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d015      	beq.n	8008364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008338:	f7fc fb86 	bl	8004a48 <HAL_GetTick>
 800833c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800833e:	e00a      	b.n	8008356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008340:	f7fc fb82 	bl	8004a48 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800834e:	4293      	cmp	r3, r2
 8008350:	d901      	bls.n	8008356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e0cb      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008356:	4b49      	ldr	r3, [pc, #292]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0ee      	beq.n	8008340 <HAL_RCC_OscConfig+0x334>
 8008362:	e014      	b.n	800838e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008364:	f7fc fb70 	bl	8004a48 <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800836a:	e00a      	b.n	8008382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800836c:	f7fc fb6c 	bl	8004a48 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800837a:	4293      	cmp	r3, r2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e0b5      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008382:	4b3e      	ldr	r3, [pc, #248]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1ee      	bne.n	800836c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d105      	bne.n	80083a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008394:	4b39      	ldr	r3, [pc, #228]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008398:	4a38      	ldr	r2, [pc, #224]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800839a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800839e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 80a1 	beq.w	80084ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083aa:	4b34      	ldr	r3, [pc, #208]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 030c 	and.w	r3, r3, #12
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d05c      	beq.n	8008470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d141      	bne.n	8008442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083be:	4b31      	ldr	r3, [pc, #196]	@ (8008484 <HAL_RCC_OscConfig+0x478>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083c4:	f7fc fb40 	bl	8004a48 <HAL_GetTick>
 80083c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ca:	e008      	b.n	80083de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083cc:	f7fc fb3c 	bl	8004a48 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e087      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083de:	4b27      	ldr	r3, [pc, #156]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f0      	bne.n	80083cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69da      	ldr	r2, [r3, #28]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	431a      	orrs	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	019b      	lsls	r3, r3, #6
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008400:	085b      	lsrs	r3, r3, #1
 8008402:	3b01      	subs	r3, #1
 8008404:	041b      	lsls	r3, r3, #16
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	061b      	lsls	r3, r3, #24
 800840e:	491b      	ldr	r1, [pc, #108]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008410:	4313      	orrs	r3, r2
 8008412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008414:	4b1b      	ldr	r3, [pc, #108]	@ (8008484 <HAL_RCC_OscConfig+0x478>)
 8008416:	2201      	movs	r2, #1
 8008418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800841a:	f7fc fb15 	bl	8004a48 <HAL_GetTick>
 800841e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008420:	e008      	b.n	8008434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008422:	f7fc fb11 	bl	8004a48 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	2b02      	cmp	r3, #2
 800842e:	d901      	bls.n	8008434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e05c      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008434:	4b11      	ldr	r3, [pc, #68]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0f0      	beq.n	8008422 <HAL_RCC_OscConfig+0x416>
 8008440:	e054      	b.n	80084ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008442:	4b10      	ldr	r3, [pc, #64]	@ (8008484 <HAL_RCC_OscConfig+0x478>)
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008448:	f7fc fafe 	bl	8004a48 <HAL_GetTick>
 800844c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008450:	f7fc fafa 	bl	8004a48 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e045      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008462:	4b06      	ldr	r3, [pc, #24]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f0      	bne.n	8008450 <HAL_RCC_OscConfig+0x444>
 800846e:	e03d      	b.n	80084ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d107      	bne.n	8008488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e038      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
 800847c:	40023800 	.word	0x40023800
 8008480:	40007000 	.word	0x40007000
 8008484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008488:	4b1b      	ldr	r3, [pc, #108]	@ (80084f8 <HAL_RCC_OscConfig+0x4ec>)
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d028      	beq.n	80084e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d121      	bne.n	80084e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d11a      	bne.n	80084e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80084b8:	4013      	ands	r3, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80084be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d111      	bne.n	80084e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ce:	085b      	lsrs	r3, r3, #1
 80084d0:	3b01      	subs	r3, #1
 80084d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d107      	bne.n	80084e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d001      	beq.n	80084ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e000      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	40023800 	.word	0x40023800

080084fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e0cc      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008510:	4b68      	ldr	r3, [pc, #416]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0307 	and.w	r3, r3, #7
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d90c      	bls.n	8008538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800851e:	4b65      	ldr	r3, [pc, #404]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008526:	4b63      	ldr	r3, [pc, #396]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	429a      	cmp	r2, r3
 8008532:	d001      	beq.n	8008538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e0b8      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d020      	beq.n	8008586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008550:	4b59      	ldr	r3, [pc, #356]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	4a58      	ldr	r2, [pc, #352]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008556:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800855a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008568:	4b53      	ldr	r3, [pc, #332]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	4a52      	ldr	r2, [pc, #328]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800856e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008574:	4b50      	ldr	r3, [pc, #320]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	494d      	ldr	r1, [pc, #308]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008582:	4313      	orrs	r3, r2
 8008584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d044      	beq.n	800861c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d107      	bne.n	80085aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800859a:	4b47      	ldr	r3, [pc, #284]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d119      	bne.n	80085da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e07f      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d003      	beq.n	80085ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d107      	bne.n	80085ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085ba:	4b3f      	ldr	r3, [pc, #252]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d109      	bne.n	80085da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e06f      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ca:	4b3b      	ldr	r3, [pc, #236]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e067      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085da:	4b37      	ldr	r3, [pc, #220]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f023 0203 	bic.w	r2, r3, #3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	4934      	ldr	r1, [pc, #208]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085ec:	f7fc fa2c 	bl	8004a48 <HAL_GetTick>
 80085f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085f2:	e00a      	b.n	800860a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085f4:	f7fc fa28 	bl	8004a48 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008602:	4293      	cmp	r3, r2
 8008604:	d901      	bls.n	800860a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e04f      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800860a:	4b2b      	ldr	r3, [pc, #172]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f003 020c 	and.w	r2, r3, #12
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	429a      	cmp	r2, r3
 800861a:	d1eb      	bne.n	80085f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800861c:	4b25      	ldr	r3, [pc, #148]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d20c      	bcs.n	8008644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800862a:	4b22      	ldr	r3, [pc, #136]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008632:	4b20      	ldr	r3, [pc, #128]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	429a      	cmp	r2, r3
 800863e:	d001      	beq.n	8008644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e032      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008650:	4b19      	ldr	r3, [pc, #100]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	4916      	ldr	r1, [pc, #88]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800865e:	4313      	orrs	r3, r2
 8008660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800866e:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	00db      	lsls	r3, r3, #3
 800867c:	490e      	ldr	r1, [pc, #56]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800867e:	4313      	orrs	r3, r2
 8008680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008682:	f000 f821 	bl	80086c8 <HAL_RCC_GetSysClockFreq>
 8008686:	4602      	mov	r2, r0
 8008688:	4b0b      	ldr	r3, [pc, #44]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	091b      	lsrs	r3, r3, #4
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	490a      	ldr	r1, [pc, #40]	@ (80086bc <HAL_RCC_ClockConfig+0x1c0>)
 8008694:	5ccb      	ldrb	r3, [r1, r3]
 8008696:	fa22 f303 	lsr.w	r3, r2, r3
 800869a:	4a09      	ldr	r2, [pc, #36]	@ (80086c0 <HAL_RCC_ClockConfig+0x1c4>)
 800869c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800869e:	4b09      	ldr	r3, [pc, #36]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c8>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fc f98c 	bl	80049c0 <HAL_InitTick>

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	40023c00 	.word	0x40023c00
 80086b8:	40023800 	.word	0x40023800
 80086bc:	08013e3c 	.word	0x08013e3c
 80086c0:	2000000c 	.word	0x2000000c
 80086c4:	20000030 	.word	0x20000030

080086c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086cc:	b090      	sub	sp, #64	@ 0x40
 80086ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d4:	2300      	movs	r3, #0
 80086d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086d8:	2300      	movs	r3, #0
 80086da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086e0:	4b59      	ldr	r3, [pc, #356]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f003 030c 	and.w	r3, r3, #12
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d00d      	beq.n	8008708 <HAL_RCC_GetSysClockFreq+0x40>
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	f200 80a1 	bhi.w	8008834 <HAL_RCC_GetSysClockFreq+0x16c>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <HAL_RCC_GetSysClockFreq+0x34>
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d003      	beq.n	8008702 <HAL_RCC_GetSysClockFreq+0x3a>
 80086fa:	e09b      	b.n	8008834 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086fc:	4b53      	ldr	r3, [pc, #332]	@ (800884c <HAL_RCC_GetSysClockFreq+0x184>)
 80086fe:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008700:	e09b      	b.n	800883a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008702:	4b53      	ldr	r3, [pc, #332]	@ (8008850 <HAL_RCC_GetSysClockFreq+0x188>)
 8008704:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008706:	e098      	b.n	800883a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008708:	4b4f      	ldr	r3, [pc, #316]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008712:	4b4d      	ldr	r3, [pc, #308]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d028      	beq.n	8008770 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800871e:	4b4a      	ldr	r3, [pc, #296]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	099b      	lsrs	r3, r3, #6
 8008724:	2200      	movs	r2, #0
 8008726:	623b      	str	r3, [r7, #32]
 8008728:	627a      	str	r2, [r7, #36]	@ 0x24
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008730:	2100      	movs	r1, #0
 8008732:	4b47      	ldr	r3, [pc, #284]	@ (8008850 <HAL_RCC_GetSysClockFreq+0x188>)
 8008734:	fb03 f201 	mul.w	r2, r3, r1
 8008738:	2300      	movs	r3, #0
 800873a:	fb00 f303 	mul.w	r3, r0, r3
 800873e:	4413      	add	r3, r2
 8008740:	4a43      	ldr	r2, [pc, #268]	@ (8008850 <HAL_RCC_GetSysClockFreq+0x188>)
 8008742:	fba0 1202 	umull	r1, r2, r0, r2
 8008746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008748:	460a      	mov	r2, r1
 800874a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800874c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800874e:	4413      	add	r3, r2
 8008750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008754:	2200      	movs	r2, #0
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	61fa      	str	r2, [r7, #28]
 800875a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800875e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008762:	f7f8 fa99 	bl	8000c98 <__aeabi_uldivmod>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4613      	mov	r3, r2
 800876c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800876e:	e053      	b.n	8008818 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008770:	4b35      	ldr	r3, [pc, #212]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	099b      	lsrs	r3, r3, #6
 8008776:	2200      	movs	r2, #0
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	617a      	str	r2, [r7, #20]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008782:	f04f 0b00 	mov.w	fp, #0
 8008786:	4652      	mov	r2, sl
 8008788:	465b      	mov	r3, fp
 800878a:	f04f 0000 	mov.w	r0, #0
 800878e:	f04f 0100 	mov.w	r1, #0
 8008792:	0159      	lsls	r1, r3, #5
 8008794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008798:	0150      	lsls	r0, r2, #5
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	ebb2 080a 	subs.w	r8, r2, sl
 80087a2:	eb63 090b 	sbc.w	r9, r3, fp
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	f04f 0300 	mov.w	r3, #0
 80087ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80087b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80087b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80087ba:	ebb2 0408 	subs.w	r4, r2, r8
 80087be:	eb63 0509 	sbc.w	r5, r3, r9
 80087c2:	f04f 0200 	mov.w	r2, #0
 80087c6:	f04f 0300 	mov.w	r3, #0
 80087ca:	00eb      	lsls	r3, r5, #3
 80087cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087d0:	00e2      	lsls	r2, r4, #3
 80087d2:	4614      	mov	r4, r2
 80087d4:	461d      	mov	r5, r3
 80087d6:	eb14 030a 	adds.w	r3, r4, sl
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	eb45 030b 	adc.w	r3, r5, fp
 80087e0:	607b      	str	r3, [r7, #4]
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	f04f 0300 	mov.w	r3, #0
 80087ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087ee:	4629      	mov	r1, r5
 80087f0:	028b      	lsls	r3, r1, #10
 80087f2:	4621      	mov	r1, r4
 80087f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087f8:	4621      	mov	r1, r4
 80087fa:	028a      	lsls	r2, r1, #10
 80087fc:	4610      	mov	r0, r2
 80087fe:	4619      	mov	r1, r3
 8008800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008802:	2200      	movs	r2, #0
 8008804:	60bb      	str	r3, [r7, #8]
 8008806:	60fa      	str	r2, [r7, #12]
 8008808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800880c:	f7f8 fa44 	bl	8000c98 <__aeabi_uldivmod>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4613      	mov	r3, r2
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008818:	4b0b      	ldr	r3, [pc, #44]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	0c1b      	lsrs	r3, r3, #16
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	3301      	adds	r3, #1
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008828:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008830:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008832:	e002      	b.n	800883a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008834:	4b05      	ldr	r3, [pc, #20]	@ (800884c <HAL_RCC_GetSysClockFreq+0x184>)
 8008836:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800883a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800883c:	4618      	mov	r0, r3
 800883e:	3740      	adds	r7, #64	@ 0x40
 8008840:	46bd      	mov	sp, r7
 8008842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008846:	bf00      	nop
 8008848:	40023800 	.word	0x40023800
 800884c:	00f42400 	.word	0x00f42400
 8008850:	017d7840 	.word	0x017d7840

08008854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008858:	4b03      	ldr	r3, [pc, #12]	@ (8008868 <HAL_RCC_GetHCLKFreq+0x14>)
 800885a:	681b      	ldr	r3, [r3, #0]
}
 800885c:	4618      	mov	r0, r3
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	2000000c 	.word	0x2000000c

0800886c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008870:	f7ff fff0 	bl	8008854 <HAL_RCC_GetHCLKFreq>
 8008874:	4602      	mov	r2, r0
 8008876:	4b05      	ldr	r3, [pc, #20]	@ (800888c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	0a9b      	lsrs	r3, r3, #10
 800887c:	f003 0307 	and.w	r3, r3, #7
 8008880:	4903      	ldr	r1, [pc, #12]	@ (8008890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008882:	5ccb      	ldrb	r3, [r1, r3]
 8008884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008888:	4618      	mov	r0, r3
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40023800 	.word	0x40023800
 8008890:	08013e4c 	.word	0x08013e4c

08008894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008898:	f7ff ffdc 	bl	8008854 <HAL_RCC_GetHCLKFreq>
 800889c:	4602      	mov	r2, r0
 800889e:	4b05      	ldr	r3, [pc, #20]	@ (80088b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	0b5b      	lsrs	r3, r3, #13
 80088a4:	f003 0307 	and.w	r3, r3, #7
 80088a8:	4903      	ldr	r1, [pc, #12]	@ (80088b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088aa:	5ccb      	ldrb	r3, [r1, r3]
 80088ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	40023800 	.word	0x40023800
 80088b8:	08013e4c 	.word	0x08013e4c

080088bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e041      	b.n	8008952 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d106      	bne.n	80088e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7fa fa18 	bl	8002d18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3304      	adds	r3, #4
 80088f8:	4619      	mov	r1, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	f000 f9a0 	bl	8008c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d109      	bne.n	8008980 <HAL_TIM_PWM_Start+0x24>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b01      	cmp	r3, #1
 8008976:	bf14      	ite	ne
 8008978:	2301      	movne	r3, #1
 800897a:	2300      	moveq	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	e022      	b.n	80089c6 <HAL_TIM_PWM_Start+0x6a>
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b04      	cmp	r3, #4
 8008984:	d109      	bne.n	800899a <HAL_TIM_PWM_Start+0x3e>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b01      	cmp	r3, #1
 8008990:	bf14      	ite	ne
 8008992:	2301      	movne	r3, #1
 8008994:	2300      	moveq	r3, #0
 8008996:	b2db      	uxtb	r3, r3
 8008998:	e015      	b.n	80089c6 <HAL_TIM_PWM_Start+0x6a>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b08      	cmp	r3, #8
 800899e:	d109      	bne.n	80089b4 <HAL_TIM_PWM_Start+0x58>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	bf14      	ite	ne
 80089ac:	2301      	movne	r3, #1
 80089ae:	2300      	moveq	r3, #0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	e008      	b.n	80089c6 <HAL_TIM_PWM_Start+0x6a>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	bf14      	ite	ne
 80089c0:	2301      	movne	r3, #1
 80089c2:	2300      	moveq	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e068      	b.n	8008aa0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d104      	bne.n	80089de <HAL_TIM_PWM_Start+0x82>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2202      	movs	r2, #2
 80089d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089dc:	e013      	b.n	8008a06 <HAL_TIM_PWM_Start+0xaa>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d104      	bne.n	80089ee <HAL_TIM_PWM_Start+0x92>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089ec:	e00b      	b.n	8008a06 <HAL_TIM_PWM_Start+0xaa>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d104      	bne.n	80089fe <HAL_TIM_PWM_Start+0xa2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089fc:	e003      	b.n	8008a06 <HAL_TIM_PWM_Start+0xaa>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2202      	movs	r2, #2
 8008a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fb22 	bl	8009058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a23      	ldr	r2, [pc, #140]	@ (8008aa8 <HAL_TIM_PWM_Start+0x14c>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d107      	bne.n	8008a2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a1d      	ldr	r2, [pc, #116]	@ (8008aa8 <HAL_TIM_PWM_Start+0x14c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d018      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x10e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a40:	d013      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x10e>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a19      	ldr	r2, [pc, #100]	@ (8008aac <HAL_TIM_PWM_Start+0x150>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d00e      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x10e>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a17      	ldr	r2, [pc, #92]	@ (8008ab0 <HAL_TIM_PWM_Start+0x154>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d009      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x10e>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a16      	ldr	r2, [pc, #88]	@ (8008ab4 <HAL_TIM_PWM_Start+0x158>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d004      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x10e>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a14      	ldr	r2, [pc, #80]	@ (8008ab8 <HAL_TIM_PWM_Start+0x15c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d111      	bne.n	8008a8e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f003 0307 	and.w	r3, r3, #7
 8008a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b06      	cmp	r3, #6
 8008a7a:	d010      	beq.n	8008a9e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f042 0201 	orr.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a8c:	e007      	b.n	8008a9e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f042 0201 	orr.w	r2, r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	40010000 	.word	0x40010000
 8008aac:	40000400 	.word	0x40000400
 8008ab0:	40000800 	.word	0x40000800
 8008ab4:	40000c00 	.word	0x40000c00
 8008ab8:	40014000 	.word	0x40014000

08008abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e0ae      	b.n	8008c38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b0c      	cmp	r3, #12
 8008ae6:	f200 809f 	bhi.w	8008c28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008aea:	a201      	add	r2, pc, #4	@ (adr r2, 8008af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b25 	.word	0x08008b25
 8008af4:	08008c29 	.word	0x08008c29
 8008af8:	08008c29 	.word	0x08008c29
 8008afc:	08008c29 	.word	0x08008c29
 8008b00:	08008b65 	.word	0x08008b65
 8008b04:	08008c29 	.word	0x08008c29
 8008b08:	08008c29 	.word	0x08008c29
 8008b0c:	08008c29 	.word	0x08008c29
 8008b10:	08008ba7 	.word	0x08008ba7
 8008b14:	08008c29 	.word	0x08008c29
 8008b18:	08008c29 	.word	0x08008c29
 8008b1c:	08008c29 	.word	0x08008c29
 8008b20:	08008be7 	.word	0x08008be7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f908 	bl	8008d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	699a      	ldr	r2, [r3, #24]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0208 	orr.w	r2, r2, #8
 8008b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699a      	ldr	r2, [r3, #24]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 0204 	bic.w	r2, r2, #4
 8008b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6999      	ldr	r1, [r3, #24]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	691a      	ldr	r2, [r3, #16]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	619a      	str	r2, [r3, #24]
      break;
 8008b62:	e064      	b.n	8008c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 f94e 	bl	8008e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699a      	ldr	r2, [r3, #24]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6999      	ldr	r1, [r3, #24]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	021a      	lsls	r2, r3, #8
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	619a      	str	r2, [r3, #24]
      break;
 8008ba4:	e043      	b.n	8008c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68b9      	ldr	r1, [r7, #8]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 f999 	bl	8008ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69da      	ldr	r2, [r3, #28]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f042 0208 	orr.w	r2, r2, #8
 8008bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0204 	bic.w	r2, r2, #4
 8008bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69d9      	ldr	r1, [r3, #28]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	691a      	ldr	r2, [r3, #16]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	61da      	str	r2, [r3, #28]
      break;
 8008be4:	e023      	b.n	8008c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f9e3 	bl	8008fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69da      	ldr	r2, [r3, #28]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	69d9      	ldr	r1, [r3, #28]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	021a      	lsls	r2, r3, #8
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	61da      	str	r2, [r3, #28]
      break;
 8008c26:	e002      	b.n	8008c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a34      	ldr	r2, [pc, #208]	@ (8008d24 <TIM_Base_SetConfig+0xe4>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00f      	beq.n	8008c78 <TIM_Base_SetConfig+0x38>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5e:	d00b      	beq.n	8008c78 <TIM_Base_SetConfig+0x38>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a31      	ldr	r2, [pc, #196]	@ (8008d28 <TIM_Base_SetConfig+0xe8>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d007      	beq.n	8008c78 <TIM_Base_SetConfig+0x38>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a30      	ldr	r2, [pc, #192]	@ (8008d2c <TIM_Base_SetConfig+0xec>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d003      	beq.n	8008c78 <TIM_Base_SetConfig+0x38>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a2f      	ldr	r2, [pc, #188]	@ (8008d30 <TIM_Base_SetConfig+0xf0>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d108      	bne.n	8008c8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a25      	ldr	r2, [pc, #148]	@ (8008d24 <TIM_Base_SetConfig+0xe4>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d01b      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c98:	d017      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a22      	ldr	r2, [pc, #136]	@ (8008d28 <TIM_Base_SetConfig+0xe8>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d013      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a21      	ldr	r2, [pc, #132]	@ (8008d2c <TIM_Base_SetConfig+0xec>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00f      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a20      	ldr	r2, [pc, #128]	@ (8008d30 <TIM_Base_SetConfig+0xf0>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00b      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8008d34 <TIM_Base_SetConfig+0xf4>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d007      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8008d38 <TIM_Base_SetConfig+0xf8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d003      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d3c <TIM_Base_SetConfig+0xfc>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d108      	bne.n	8008cdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a08      	ldr	r2, [pc, #32]	@ (8008d24 <TIM_Base_SetConfig+0xe4>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d103      	bne.n	8008d10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	691a      	ldr	r2, [r3, #16]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	615a      	str	r2, [r3, #20]
}
 8008d16:	bf00      	nop
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	40010000 	.word	0x40010000
 8008d28:	40000400 	.word	0x40000400
 8008d2c:	40000800 	.word	0x40000800
 8008d30:	40000c00 	.word	0x40000c00
 8008d34:	40014000 	.word	0x40014000
 8008d38:	40014400 	.word	0x40014400
 8008d3c:	40014800 	.word	0x40014800

08008d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	f023 0201 	bic.w	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0303 	bic.w	r3, r3, #3
 8008d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f023 0302 	bic.w	r3, r3, #2
 8008d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a1c      	ldr	r2, [pc, #112]	@ (8008e08 <TIM_OC1_SetConfig+0xc8>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d10c      	bne.n	8008db6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f023 0308 	bic.w	r3, r3, #8
 8008da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f023 0304 	bic.w	r3, r3, #4
 8008db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a13      	ldr	r2, [pc, #76]	@ (8008e08 <TIM_OC1_SetConfig+0xc8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d111      	bne.n	8008de2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	621a      	str	r2, [r3, #32]
}
 8008dfc:	bf00      	nop
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	40010000 	.word	0x40010000

08008e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	f023 0210 	bic.w	r2, r3, #16
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	021b      	lsls	r3, r3, #8
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f023 0320 	bic.w	r3, r3, #32
 8008e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a1e      	ldr	r2, [pc, #120]	@ (8008ee0 <TIM_OC2_SetConfig+0xd4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d10d      	bne.n	8008e88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a15      	ldr	r2, [pc, #84]	@ (8008ee0 <TIM_OC2_SetConfig+0xd4>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d113      	bne.n	8008eb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	695b      	ldr	r3, [r3, #20]
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	621a      	str	r2, [r3, #32]
}
 8008ed2:	bf00      	nop
 8008ed4:	371c      	adds	r7, #28
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	40010000 	.word	0x40010000

08008ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f023 0303 	bic.w	r3, r3, #3
 8008f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	021b      	lsls	r3, r3, #8
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb4 <TIM_OC3_SetConfig+0xd0>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d10d      	bne.n	8008f5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a14      	ldr	r2, [pc, #80]	@ (8008fb4 <TIM_OC3_SetConfig+0xd0>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d113      	bne.n	8008f8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	011b      	lsls	r3, r3, #4
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	621a      	str	r2, [r3, #32]
}
 8008fa8:	bf00      	nop
 8008faa:	371c      	adds	r7, #28
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	40010000 	.word	0x40010000

08008fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	031b      	lsls	r3, r3, #12
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4313      	orrs	r3, r2
 800900e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a10      	ldr	r2, [pc, #64]	@ (8009054 <TIM_OC4_SetConfig+0x9c>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d109      	bne.n	800902c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800901e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	019b      	lsls	r3, r3, #6
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	4313      	orrs	r3, r2
 800902a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	621a      	str	r2, [r3, #32]
}
 8009046:	bf00      	nop
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	40010000 	.word	0x40010000

08009058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f003 031f 	and.w	r3, r3, #31
 800906a:	2201      	movs	r2, #1
 800906c:	fa02 f303 	lsl.w	r3, r2, r3
 8009070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6a1a      	ldr	r2, [r3, #32]
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	43db      	mvns	r3, r3
 800907a:	401a      	ands	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a1a      	ldr	r2, [r3, #32]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f003 031f 	and.w	r3, r3, #31
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	fa01 f303 	lsl.w	r3, r1, r3
 8009090:	431a      	orrs	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	621a      	str	r2, [r3, #32]
}
 8009096:	bf00      	nop
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d101      	bne.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090b8:	2302      	movs	r3, #2
 80090ba:	e050      	b.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a1c      	ldr	r2, [pc, #112]	@ (800916c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d018      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009108:	d013      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a18      	ldr	r2, [pc, #96]	@ (8009170 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d00e      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a16      	ldr	r2, [pc, #88]	@ (8009174 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d009      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a15      	ldr	r2, [pc, #84]	@ (8009178 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d004      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a13      	ldr	r2, [pc, #76]	@ (800917c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d10c      	bne.n	800914c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	4313      	orrs	r3, r2
 8009142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40010000 	.word	0x40010000
 8009170:	40000400 	.word	0x40000400
 8009174:	40000800 	.word	0x40000800
 8009178:	40000c00 	.word	0x40000c00
 800917c:	40014000 	.word	0x40014000

08009180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e03f      	b.n	8009212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7f9 fe32 	bl	8002e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2224      	movs	r2, #36	@ 0x24
 80091b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 faa5 	bl	8009714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	695a      	ldr	r2, [r3, #20]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2220      	movs	r2, #32
 800920c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	4613      	mov	r3, r2
 8009226:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b20      	cmp	r3, #32
 8009232:	d11d      	bne.n	8009270 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <HAL_UART_Receive_DMA+0x26>
 800923a:	88fb      	ldrh	r3, [r7, #6]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e016      	b.n	8009272 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <HAL_UART_Receive_DMA+0x38>
 800924e:	2302      	movs	r3, #2
 8009250:	e00f      	b.n	8009272 <HAL_UART_Receive_DMA+0x58>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	461a      	mov	r2, r3
 8009264:	68b9      	ldr	r1, [r7, #8]
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 f92a 	bl	80094c0 <UART_Start_Receive_DMA>
 800926c:	4603      	mov	r3, r0
 800926e:	e000      	b.n	8009272 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009270:	2302      	movs	r3, #2
  }
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800928e:	b480      	push	{r7}
 8009290:	b083      	sub	sp, #12
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b083      	sub	sp, #12
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092aa:	bf00      	nop
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092c2:	bf00      	nop
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b09c      	sub	sp, #112	@ 0x70
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d172      	bne.n	80093d0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80092ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ec:	2200      	movs	r2, #0
 80092ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	330c      	adds	r3, #12
 80092f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009302:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009306:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	330c      	adds	r3, #12
 800930e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009310:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009312:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009316:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800931e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e5      	bne.n	80092f0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3314      	adds	r3, #20
 800932a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009336:	f023 0301 	bic.w	r3, r3, #1
 800933a:	667b      	str	r3, [r7, #100]	@ 0x64
 800933c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3314      	adds	r3, #20
 8009342:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009344:	647a      	str	r2, [r7, #68]	@ 0x44
 8009346:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800934a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e5      	bne.n	8009324 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3314      	adds	r3, #20
 800935e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009362:	e853 3f00 	ldrex	r3, [r3]
 8009366:	623b      	str	r3, [r7, #32]
   return(result);
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800936e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3314      	adds	r3, #20
 8009376:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009378:	633a      	str	r2, [r7, #48]	@ 0x30
 800937a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800937e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009380:	e841 2300 	strex	r3, r2, [r1]
 8009384:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e5      	bne.n	8009358 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800938c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800938e:	2220      	movs	r2, #32
 8009390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009398:	2b01      	cmp	r3, #1
 800939a:	d119      	bne.n	80093d0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	330c      	adds	r3, #12
 80093a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	e853 3f00 	ldrex	r3, [r3]
 80093aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 0310 	bic.w	r3, r3, #16
 80093b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	330c      	adds	r3, #12
 80093ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80093bc:	61fa      	str	r2, [r7, #28]
 80093be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	69b9      	ldr	r1, [r7, #24]
 80093c2:	69fa      	ldr	r2, [r7, #28]
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	617b      	str	r3, [r7, #20]
   return(result);
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e5      	bne.n	800939c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d106      	bne.n	80093e6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093dc:	4619      	mov	r1, r3
 80093de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80093e0:	f7ff ff69 	bl	80092b6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093e4:	e002      	b.n	80093ec <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80093e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80093e8:	f7ff ff47 	bl	800927a <HAL_UART_RxCpltCallback>
}
 80093ec:	bf00      	nop
 80093ee:	3770      	adds	r7, #112	@ 0x70
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009400:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009406:	2b01      	cmp	r3, #1
 8009408:	d108      	bne.n	800941c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800940e:	085b      	lsrs	r3, r3, #1
 8009410:	b29b      	uxth	r3, r3
 8009412:	4619      	mov	r1, r3
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff ff4e 	bl	80092b6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800941a:	e002      	b.n	8009422 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7ff ff36 	bl	800928e <HAL_UART_RxHalfCpltCallback>
}
 8009422:	bf00      	nop
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b084      	sub	sp, #16
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009446:	2b80      	cmp	r3, #128	@ 0x80
 8009448:	bf0c      	ite	eq
 800944a:	2301      	moveq	r3, #1
 800944c:	2300      	movne	r3, #0
 800944e:	b2db      	uxtb	r3, r3
 8009450:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b21      	cmp	r3, #33	@ 0x21
 800945c:	d108      	bne.n	8009470 <UART_DMAError+0x46>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2200      	movs	r2, #0
 8009468:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800946a:	68b8      	ldr	r0, [r7, #8]
 800946c:	f000 f8c6 	bl	80095fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800947a:	2b40      	cmp	r3, #64	@ 0x40
 800947c:	bf0c      	ite	eq
 800947e:	2301      	moveq	r3, #1
 8009480:	2300      	movne	r3, #0
 8009482:	b2db      	uxtb	r3, r3
 8009484:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b22      	cmp	r3, #34	@ 0x22
 8009490:	d108      	bne.n	80094a4 <UART_DMAError+0x7a>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2200      	movs	r2, #0
 800949c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800949e:	68b8      	ldr	r0, [r7, #8]
 80094a0:	f000 f8d4 	bl	800964c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a8:	f043 0210 	orr.w	r2, r3, #16
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094b0:	68b8      	ldr	r0, [r7, #8]
 80094b2:	f7ff fef6 	bl	80092a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094b6:	bf00      	nop
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b098      	sub	sp, #96	@ 0x60
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	4613      	mov	r3, r2
 80094cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	88fa      	ldrh	r2, [r7, #6]
 80094d8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2222      	movs	r2, #34	@ 0x22
 80094e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ec:	4a40      	ldr	r2, [pc, #256]	@ (80095f0 <UART_Start_Receive_DMA+0x130>)
 80094ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f4:	4a3f      	ldr	r2, [pc, #252]	@ (80095f4 <UART_Start_Receive_DMA+0x134>)
 80094f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094fc:	4a3e      	ldr	r2, [pc, #248]	@ (80095f8 <UART_Start_Receive_DMA+0x138>)
 80094fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009504:	2200      	movs	r2, #0
 8009506:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009508:	f107 0308 	add.w	r3, r7, #8
 800950c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3304      	adds	r3, #4
 8009518:	4619      	mov	r1, r3
 800951a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	88fb      	ldrh	r3, [r7, #6]
 8009520:	f7fc f84a 	bl	80055b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009524:	2300      	movs	r3, #0
 8009526:	613b      	str	r3, [r7, #16]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	613b      	str	r3, [r7, #16]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	613b      	str	r3, [r7, #16]
 8009538:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d019      	beq.n	800957e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	330c      	adds	r3, #12
 8009550:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800955a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800955c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009560:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	330c      	adds	r3, #12
 8009568:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800956a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800956c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009570:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e5      	bne.n	800954a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3314      	adds	r3, #20
 8009584:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009588:	e853 3f00 	ldrex	r3, [r3]
 800958c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800958e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009590:	f043 0301 	orr.w	r3, r3, #1
 8009594:	657b      	str	r3, [r7, #84]	@ 0x54
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3314      	adds	r3, #20
 800959c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800959e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80095a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80095a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e5      	bne.n	800957e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3314      	adds	r3, #20
 80095b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	617b      	str	r3, [r7, #20]
   return(result);
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3314      	adds	r3, #20
 80095d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80095d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80095d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6a39      	ldr	r1, [r7, #32]
 80095d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	61fb      	str	r3, [r7, #28]
   return(result);
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e5      	bne.n	80095b2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3760      	adds	r7, #96	@ 0x60
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	080092cf 	.word	0x080092cf
 80095f4:	080093f5 	.word	0x080093f5
 80095f8:	0800942b 	.word	0x0800942b

080095fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b089      	sub	sp, #36	@ 0x24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	330c      	adds	r3, #12
 800960a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	e853 3f00 	ldrex	r3, [r3]
 8009612:	60bb      	str	r3, [r7, #8]
   return(result);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800961a:	61fb      	str	r3, [r7, #28]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	330c      	adds	r3, #12
 8009622:	69fa      	ldr	r2, [r7, #28]
 8009624:	61ba      	str	r2, [r7, #24]
 8009626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009628:	6979      	ldr	r1, [r7, #20]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	613b      	str	r3, [r7, #16]
   return(result);
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e5      	bne.n	8009604 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2220      	movs	r2, #32
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8009640:	bf00      	nop
 8009642:	3724      	adds	r7, #36	@ 0x24
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b095      	sub	sp, #84	@ 0x54
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009666:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800966a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009674:	643a      	str	r2, [r7, #64]	@ 0x40
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800967a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e5      	bne.n	8009654 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	3314      	adds	r3, #20
 800968e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	e853 3f00 	ldrex	r3, [r3]
 8009696:	61fb      	str	r3, [r7, #28]
   return(result);
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	f023 0301 	bic.w	r3, r3, #1
 800969e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3314      	adds	r3, #20
 80096a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e5      	bne.n	8009688 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d119      	bne.n	80096f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	330c      	adds	r3, #12
 80096ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	e853 3f00 	ldrex	r3, [r3]
 80096d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f023 0310 	bic.w	r3, r3, #16
 80096da:	647b      	str	r3, [r7, #68]	@ 0x44
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	330c      	adds	r3, #12
 80096e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096e4:	61ba      	str	r2, [r7, #24]
 80096e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e8:	6979      	ldr	r1, [r7, #20]
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	e841 2300 	strex	r3, r2, [r1]
 80096f0:	613b      	str	r3, [r7, #16]
   return(result);
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1e5      	bne.n	80096c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009706:	bf00      	nop
 8009708:	3754      	adds	r7, #84	@ 0x54
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
	...

08009714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009718:	b0c0      	sub	sp, #256	@ 0x100
 800971a:	af00      	add	r7, sp, #0
 800971c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800972c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009730:	68d9      	ldr	r1, [r3, #12]
 8009732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	ea40 0301 	orr.w	r3, r0, r1
 800973c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800973e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	431a      	orrs	r2, r3
 800974c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	431a      	orrs	r2, r3
 8009754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	4313      	orrs	r3, r2
 800975c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800976c:	f021 010c 	bic.w	r1, r1, #12
 8009770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800977a:	430b      	orrs	r3, r1
 800977c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800977e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800978a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978e:	6999      	ldr	r1, [r3, #24]
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	ea40 0301 	orr.w	r3, r0, r1
 800979a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800979c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b8f      	ldr	r3, [pc, #572]	@ (80099e0 <UART_SetConfig+0x2cc>)
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d005      	beq.n	80097b4 <UART_SetConfig+0xa0>
 80097a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	4b8d      	ldr	r3, [pc, #564]	@ (80099e4 <UART_SetConfig+0x2d0>)
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d104      	bne.n	80097be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097b4:	f7ff f86e 	bl	8008894 <HAL_RCC_GetPCLK2Freq>
 80097b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80097bc:	e003      	b.n	80097c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097be:	f7ff f855 	bl	800886c <HAL_RCC_GetPCLK1Freq>
 80097c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097d0:	f040 810c 	bne.w	80099ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097d8:	2200      	movs	r2, #0
 80097da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80097de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80097e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80097e6:	4622      	mov	r2, r4
 80097e8:	462b      	mov	r3, r5
 80097ea:	1891      	adds	r1, r2, r2
 80097ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80097ee:	415b      	adcs	r3, r3
 80097f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80097f6:	4621      	mov	r1, r4
 80097f8:	eb12 0801 	adds.w	r8, r2, r1
 80097fc:	4629      	mov	r1, r5
 80097fe:	eb43 0901 	adc.w	r9, r3, r1
 8009802:	f04f 0200 	mov.w	r2, #0
 8009806:	f04f 0300 	mov.w	r3, #0
 800980a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800980e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009816:	4690      	mov	r8, r2
 8009818:	4699      	mov	r9, r3
 800981a:	4623      	mov	r3, r4
 800981c:	eb18 0303 	adds.w	r3, r8, r3
 8009820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009824:	462b      	mov	r3, r5
 8009826:	eb49 0303 	adc.w	r3, r9, r3
 800982a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800982e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800983a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800983e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009842:	460b      	mov	r3, r1
 8009844:	18db      	adds	r3, r3, r3
 8009846:	653b      	str	r3, [r7, #80]	@ 0x50
 8009848:	4613      	mov	r3, r2
 800984a:	eb42 0303 	adc.w	r3, r2, r3
 800984e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009850:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009854:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009858:	f7f7 fa1e 	bl	8000c98 <__aeabi_uldivmod>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4b61      	ldr	r3, [pc, #388]	@ (80099e8 <UART_SetConfig+0x2d4>)
 8009862:	fba3 2302 	umull	r2, r3, r3, r2
 8009866:	095b      	lsrs	r3, r3, #5
 8009868:	011c      	lsls	r4, r3, #4
 800986a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800986e:	2200      	movs	r2, #0
 8009870:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009874:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009878:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800987c:	4642      	mov	r2, r8
 800987e:	464b      	mov	r3, r9
 8009880:	1891      	adds	r1, r2, r2
 8009882:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009884:	415b      	adcs	r3, r3
 8009886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009888:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800988c:	4641      	mov	r1, r8
 800988e:	eb12 0a01 	adds.w	sl, r2, r1
 8009892:	4649      	mov	r1, r9
 8009894:	eb43 0b01 	adc.w	fp, r3, r1
 8009898:	f04f 0200 	mov.w	r2, #0
 800989c:	f04f 0300 	mov.w	r3, #0
 80098a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098ac:	4692      	mov	sl, r2
 80098ae:	469b      	mov	fp, r3
 80098b0:	4643      	mov	r3, r8
 80098b2:	eb1a 0303 	adds.w	r3, sl, r3
 80098b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098ba:	464b      	mov	r3, r9
 80098bc:	eb4b 0303 	adc.w	r3, fp, r3
 80098c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80098c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80098d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80098d8:	460b      	mov	r3, r1
 80098da:	18db      	adds	r3, r3, r3
 80098dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80098de:	4613      	mov	r3, r2
 80098e0:	eb42 0303 	adc.w	r3, r2, r3
 80098e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80098e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80098ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80098ee:	f7f7 f9d3 	bl	8000c98 <__aeabi_uldivmod>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4611      	mov	r1, r2
 80098f8:	4b3b      	ldr	r3, [pc, #236]	@ (80099e8 <UART_SetConfig+0x2d4>)
 80098fa:	fba3 2301 	umull	r2, r3, r3, r1
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	2264      	movs	r2, #100	@ 0x64
 8009902:	fb02 f303 	mul.w	r3, r2, r3
 8009906:	1acb      	subs	r3, r1, r3
 8009908:	00db      	lsls	r3, r3, #3
 800990a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800990e:	4b36      	ldr	r3, [pc, #216]	@ (80099e8 <UART_SetConfig+0x2d4>)
 8009910:	fba3 2302 	umull	r2, r3, r3, r2
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800991c:	441c      	add	r4, r3
 800991e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009922:	2200      	movs	r2, #0
 8009924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009928:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800992c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009930:	4642      	mov	r2, r8
 8009932:	464b      	mov	r3, r9
 8009934:	1891      	adds	r1, r2, r2
 8009936:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009938:	415b      	adcs	r3, r3
 800993a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800993c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009940:	4641      	mov	r1, r8
 8009942:	1851      	adds	r1, r2, r1
 8009944:	6339      	str	r1, [r7, #48]	@ 0x30
 8009946:	4649      	mov	r1, r9
 8009948:	414b      	adcs	r3, r1
 800994a:	637b      	str	r3, [r7, #52]	@ 0x34
 800994c:	f04f 0200 	mov.w	r2, #0
 8009950:	f04f 0300 	mov.w	r3, #0
 8009954:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009958:	4659      	mov	r1, fp
 800995a:	00cb      	lsls	r3, r1, #3
 800995c:	4651      	mov	r1, sl
 800995e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009962:	4651      	mov	r1, sl
 8009964:	00ca      	lsls	r2, r1, #3
 8009966:	4610      	mov	r0, r2
 8009968:	4619      	mov	r1, r3
 800996a:	4603      	mov	r3, r0
 800996c:	4642      	mov	r2, r8
 800996e:	189b      	adds	r3, r3, r2
 8009970:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009974:	464b      	mov	r3, r9
 8009976:	460a      	mov	r2, r1
 8009978:	eb42 0303 	adc.w	r3, r2, r3
 800997c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800998c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009990:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009994:	460b      	mov	r3, r1
 8009996:	18db      	adds	r3, r3, r3
 8009998:	62bb      	str	r3, [r7, #40]	@ 0x28
 800999a:	4613      	mov	r3, r2
 800999c:	eb42 0303 	adc.w	r3, r2, r3
 80099a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80099a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80099aa:	f7f7 f975 	bl	8000c98 <__aeabi_uldivmod>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4b0d      	ldr	r3, [pc, #52]	@ (80099e8 <UART_SetConfig+0x2d4>)
 80099b4:	fba3 1302 	umull	r1, r3, r3, r2
 80099b8:	095b      	lsrs	r3, r3, #5
 80099ba:	2164      	movs	r1, #100	@ 0x64
 80099bc:	fb01 f303 	mul.w	r3, r1, r3
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	3332      	adds	r3, #50	@ 0x32
 80099c6:	4a08      	ldr	r2, [pc, #32]	@ (80099e8 <UART_SetConfig+0x2d4>)
 80099c8:	fba2 2303 	umull	r2, r3, r2, r3
 80099cc:	095b      	lsrs	r3, r3, #5
 80099ce:	f003 0207 	and.w	r2, r3, #7
 80099d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4422      	add	r2, r4
 80099da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099dc:	e106      	b.n	8009bec <UART_SetConfig+0x4d8>
 80099de:	bf00      	nop
 80099e0:	40011000 	.word	0x40011000
 80099e4:	40011400 	.word	0x40011400
 80099e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80099fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80099fe:	4642      	mov	r2, r8
 8009a00:	464b      	mov	r3, r9
 8009a02:	1891      	adds	r1, r2, r2
 8009a04:	6239      	str	r1, [r7, #32]
 8009a06:	415b      	adcs	r3, r3
 8009a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a0e:	4641      	mov	r1, r8
 8009a10:	1854      	adds	r4, r2, r1
 8009a12:	4649      	mov	r1, r9
 8009a14:	eb43 0501 	adc.w	r5, r3, r1
 8009a18:	f04f 0200 	mov.w	r2, #0
 8009a1c:	f04f 0300 	mov.w	r3, #0
 8009a20:	00eb      	lsls	r3, r5, #3
 8009a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a26:	00e2      	lsls	r2, r4, #3
 8009a28:	4614      	mov	r4, r2
 8009a2a:	461d      	mov	r5, r3
 8009a2c:	4643      	mov	r3, r8
 8009a2e:	18e3      	adds	r3, r4, r3
 8009a30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a34:	464b      	mov	r3, r9
 8009a36:	eb45 0303 	adc.w	r3, r5, r3
 8009a3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a4e:	f04f 0200 	mov.w	r2, #0
 8009a52:	f04f 0300 	mov.w	r3, #0
 8009a56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	008b      	lsls	r3, r1, #2
 8009a5e:	4621      	mov	r1, r4
 8009a60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a64:	4621      	mov	r1, r4
 8009a66:	008a      	lsls	r2, r1, #2
 8009a68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009a6c:	f7f7 f914 	bl	8000c98 <__aeabi_uldivmod>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4b60      	ldr	r3, [pc, #384]	@ (8009bf8 <UART_SetConfig+0x4e4>)
 8009a76:	fba3 2302 	umull	r2, r3, r3, r2
 8009a7a:	095b      	lsrs	r3, r3, #5
 8009a7c:	011c      	lsls	r4, r3, #4
 8009a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009a8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009a90:	4642      	mov	r2, r8
 8009a92:	464b      	mov	r3, r9
 8009a94:	1891      	adds	r1, r2, r2
 8009a96:	61b9      	str	r1, [r7, #24]
 8009a98:	415b      	adcs	r3, r3
 8009a9a:	61fb      	str	r3, [r7, #28]
 8009a9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009aa0:	4641      	mov	r1, r8
 8009aa2:	1851      	adds	r1, r2, r1
 8009aa4:	6139      	str	r1, [r7, #16]
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	414b      	adcs	r3, r1
 8009aaa:	617b      	str	r3, [r7, #20]
 8009aac:	f04f 0200 	mov.w	r2, #0
 8009ab0:	f04f 0300 	mov.w	r3, #0
 8009ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ab8:	4659      	mov	r1, fp
 8009aba:	00cb      	lsls	r3, r1, #3
 8009abc:	4651      	mov	r1, sl
 8009abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ac2:	4651      	mov	r1, sl
 8009ac4:	00ca      	lsls	r2, r1, #3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	4642      	mov	r2, r8
 8009ace:	189b      	adds	r3, r3, r2
 8009ad0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ad4:	464b      	mov	r3, r9
 8009ad6:	460a      	mov	r2, r1
 8009ad8:	eb42 0303 	adc.w	r3, r2, r3
 8009adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009aea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	f04f 0300 	mov.w	r3, #0
 8009af4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009af8:	4649      	mov	r1, r9
 8009afa:	008b      	lsls	r3, r1, #2
 8009afc:	4641      	mov	r1, r8
 8009afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b02:	4641      	mov	r1, r8
 8009b04:	008a      	lsls	r2, r1, #2
 8009b06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b0a:	f7f7 f8c5 	bl	8000c98 <__aeabi_uldivmod>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4611      	mov	r1, r2
 8009b14:	4b38      	ldr	r3, [pc, #224]	@ (8009bf8 <UART_SetConfig+0x4e4>)
 8009b16:	fba3 2301 	umull	r2, r3, r3, r1
 8009b1a:	095b      	lsrs	r3, r3, #5
 8009b1c:	2264      	movs	r2, #100	@ 0x64
 8009b1e:	fb02 f303 	mul.w	r3, r2, r3
 8009b22:	1acb      	subs	r3, r1, r3
 8009b24:	011b      	lsls	r3, r3, #4
 8009b26:	3332      	adds	r3, #50	@ 0x32
 8009b28:	4a33      	ldr	r2, [pc, #204]	@ (8009bf8 <UART_SetConfig+0x4e4>)
 8009b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b2e:	095b      	lsrs	r3, r3, #5
 8009b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b34:	441c      	add	r4, r3
 8009b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009b40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009b44:	4642      	mov	r2, r8
 8009b46:	464b      	mov	r3, r9
 8009b48:	1891      	adds	r1, r2, r2
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	415b      	adcs	r3, r3
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b54:	4641      	mov	r1, r8
 8009b56:	1851      	adds	r1, r2, r1
 8009b58:	6039      	str	r1, [r7, #0]
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	414b      	adcs	r3, r1
 8009b5e:	607b      	str	r3, [r7, #4]
 8009b60:	f04f 0200 	mov.w	r2, #0
 8009b64:	f04f 0300 	mov.w	r3, #0
 8009b68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	00cb      	lsls	r3, r1, #3
 8009b70:	4651      	mov	r1, sl
 8009b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b76:	4651      	mov	r1, sl
 8009b78:	00ca      	lsls	r2, r1, #3
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4642      	mov	r2, r8
 8009b82:	189b      	adds	r3, r3, r2
 8009b84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b86:	464b      	mov	r3, r9
 8009b88:	460a      	mov	r2, r1
 8009b8a:	eb42 0303 	adc.w	r3, r2, r3
 8009b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009b9c:	f04f 0200 	mov.w	r2, #0
 8009ba0:	f04f 0300 	mov.w	r3, #0
 8009ba4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009ba8:	4649      	mov	r1, r9
 8009baa:	008b      	lsls	r3, r1, #2
 8009bac:	4641      	mov	r1, r8
 8009bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	008a      	lsls	r2, r1, #2
 8009bb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009bba:	f7f7 f86d 	bl	8000c98 <__aeabi_uldivmod>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf8 <UART_SetConfig+0x4e4>)
 8009bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8009bc8:	095b      	lsrs	r3, r3, #5
 8009bca:	2164      	movs	r1, #100	@ 0x64
 8009bcc:	fb01 f303 	mul.w	r3, r1, r3
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	011b      	lsls	r3, r3, #4
 8009bd4:	3332      	adds	r3, #50	@ 0x32
 8009bd6:	4a08      	ldr	r2, [pc, #32]	@ (8009bf8 <UART_SetConfig+0x4e4>)
 8009bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bdc:	095b      	lsrs	r3, r3, #5
 8009bde:	f003 020f 	and.w	r2, r3, #15
 8009be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4422      	add	r2, r4
 8009bea:	609a      	str	r2, [r3, #8]
}
 8009bec:	bf00      	nop
 8009bee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bf8:	51eb851f 	.word	0x51eb851f

08009bfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	f107 001c 	add.w	r0, r7, #28
 8009c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d122      	bne.n	8009c5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d105      	bne.n	8009c4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f001 fbee 	bl	800b430 <USB_CoreReset>
 8009c54:	4603      	mov	r3, r0
 8009c56:	73fb      	strb	r3, [r7, #15]
 8009c58:	e01a      	b.n	8009c90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f001 fbe2 	bl	800b430 <USB_CoreReset>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d106      	bne.n	8009c84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c82:	e005      	b.n	8009c90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d10b      	bne.n	8009cae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	f043 0206 	orr.w	r2, r3, #6
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f043 0220 	orr.w	r2, r3, #32
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cba:	b004      	add	sp, #16
 8009cbc:	4770      	bx	lr
	...

08009cc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009cce:	79fb      	ldrb	r3, [r7, #7]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d165      	bne.n	8009da0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	4a41      	ldr	r2, [pc, #260]	@ (8009ddc <USB_SetTurnaroundTime+0x11c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d906      	bls.n	8009cea <USB_SetTurnaroundTime+0x2a>
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	4a40      	ldr	r2, [pc, #256]	@ (8009de0 <USB_SetTurnaroundTime+0x120>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d202      	bcs.n	8009cea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009ce4:	230f      	movs	r3, #15
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	e062      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4a3c      	ldr	r2, [pc, #240]	@ (8009de0 <USB_SetTurnaroundTime+0x120>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d306      	bcc.n	8009d00 <USB_SetTurnaroundTime+0x40>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	4a3b      	ldr	r2, [pc, #236]	@ (8009de4 <USB_SetTurnaroundTime+0x124>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d202      	bcs.n	8009d00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009cfa:	230e      	movs	r3, #14
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e057      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4a38      	ldr	r2, [pc, #224]	@ (8009de4 <USB_SetTurnaroundTime+0x124>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d306      	bcc.n	8009d16 <USB_SetTurnaroundTime+0x56>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	4a37      	ldr	r2, [pc, #220]	@ (8009de8 <USB_SetTurnaroundTime+0x128>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d202      	bcs.n	8009d16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009d10:	230d      	movs	r3, #13
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e04c      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4a33      	ldr	r2, [pc, #204]	@ (8009de8 <USB_SetTurnaroundTime+0x128>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d306      	bcc.n	8009d2c <USB_SetTurnaroundTime+0x6c>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	4a32      	ldr	r2, [pc, #200]	@ (8009dec <USB_SetTurnaroundTime+0x12c>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d802      	bhi.n	8009d2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009d26:	230c      	movs	r3, #12
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	e041      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4a2f      	ldr	r2, [pc, #188]	@ (8009dec <USB_SetTurnaroundTime+0x12c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d906      	bls.n	8009d42 <USB_SetTurnaroundTime+0x82>
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4a2e      	ldr	r2, [pc, #184]	@ (8009df0 <USB_SetTurnaroundTime+0x130>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d802      	bhi.n	8009d42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009d3c:	230b      	movs	r3, #11
 8009d3e:	617b      	str	r3, [r7, #20]
 8009d40:	e036      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	4a2a      	ldr	r2, [pc, #168]	@ (8009df0 <USB_SetTurnaroundTime+0x130>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d906      	bls.n	8009d58 <USB_SetTurnaroundTime+0x98>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	4a29      	ldr	r2, [pc, #164]	@ (8009df4 <USB_SetTurnaroundTime+0x134>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d802      	bhi.n	8009d58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009d52:	230a      	movs	r3, #10
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	e02b      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	4a26      	ldr	r2, [pc, #152]	@ (8009df4 <USB_SetTurnaroundTime+0x134>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d906      	bls.n	8009d6e <USB_SetTurnaroundTime+0xae>
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	4a25      	ldr	r2, [pc, #148]	@ (8009df8 <USB_SetTurnaroundTime+0x138>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d202      	bcs.n	8009d6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009d68:	2309      	movs	r3, #9
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e020      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	4a21      	ldr	r2, [pc, #132]	@ (8009df8 <USB_SetTurnaroundTime+0x138>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d306      	bcc.n	8009d84 <USB_SetTurnaroundTime+0xc4>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	4a20      	ldr	r2, [pc, #128]	@ (8009dfc <USB_SetTurnaroundTime+0x13c>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d802      	bhi.n	8009d84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009d7e:	2308      	movs	r3, #8
 8009d80:	617b      	str	r3, [r7, #20]
 8009d82:	e015      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	4a1d      	ldr	r2, [pc, #116]	@ (8009dfc <USB_SetTurnaroundTime+0x13c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d906      	bls.n	8009d9a <USB_SetTurnaroundTime+0xda>
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8009e00 <USB_SetTurnaroundTime+0x140>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d202      	bcs.n	8009d9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009d94:	2307      	movs	r3, #7
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	e00a      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009d9a:	2306      	movs	r3, #6
 8009d9c:	617b      	str	r3, [r7, #20]
 8009d9e:	e007      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d102      	bne.n	8009dac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009da6:	2309      	movs	r3, #9
 8009da8:	617b      	str	r3, [r7, #20]
 8009daa:	e001      	b.n	8009db0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009dac:	2309      	movs	r3, #9
 8009dae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	029b      	lsls	r3, r3, #10
 8009dc4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	371c      	adds	r7, #28
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	00d8acbf 	.word	0x00d8acbf
 8009de0:	00e4e1c0 	.word	0x00e4e1c0
 8009de4:	00f42400 	.word	0x00f42400
 8009de8:	01067380 	.word	0x01067380
 8009dec:	011a499f 	.word	0x011a499f
 8009df0:	01312cff 	.word	0x01312cff
 8009df4:	014ca43f 	.word	0x014ca43f
 8009df8:	016e3600 	.word	0x016e3600
 8009dfc:	01a6ab1f 	.word	0x01a6ab1f
 8009e00:	01e84800 	.word	0x01e84800

08009e04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f043 0201 	orr.w	r2, r3, #1
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	370c      	adds	r7, #12
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f023 0201 	bic.w	r2, r3, #1
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d115      	bne.n	8009e96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e76:	2001      	movs	r0, #1
 8009e78:	f7fa fdf2 	bl	8004a60 <HAL_Delay>
      ms++;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f001 fa45 	bl	800b312 <USB_GetMode>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d01e      	beq.n	8009ecc <USB_SetCurrentMode+0x84>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b31      	cmp	r3, #49	@ 0x31
 8009e92:	d9f0      	bls.n	8009e76 <USB_SetCurrentMode+0x2e>
 8009e94:	e01a      	b.n	8009ecc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d115      	bne.n	8009ec8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	f7fa fdd9 	bl	8004a60 <HAL_Delay>
      ms++;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f001 fa2c 	bl	800b312 <USB_GetMode>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d005      	beq.n	8009ecc <USB_SetCurrentMode+0x84>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2b31      	cmp	r3, #49	@ 0x31
 8009ec4:	d9f0      	bls.n	8009ea8 <USB_SetCurrentMode+0x60>
 8009ec6:	e001      	b.n	8009ecc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e005      	b.n	8009ed8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b32      	cmp	r3, #50	@ 0x32
 8009ed0:	d101      	bne.n	8009ed6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e000      	b.n	8009ed8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ee0:	b084      	sub	sp, #16
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b086      	sub	sp, #24
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009efa:	2300      	movs	r3, #0
 8009efc:	613b      	str	r3, [r7, #16]
 8009efe:	e009      	b.n	8009f14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	3340      	adds	r3, #64	@ 0x40
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	3301      	adds	r3, #1
 8009f12:	613b      	str	r3, [r7, #16]
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	2b0e      	cmp	r3, #14
 8009f18:	d9f2      	bls.n	8009f00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d11c      	bne.n	8009f5a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f2e:	f043 0302 	orr.w	r3, r3, #2
 8009f32:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f44:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f50:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f58:	e00b      	b.n	8009f72 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f6a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f78:	461a      	mov	r2, r3
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f84:	4619      	mov	r1, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	680b      	ldr	r3, [r1, #0]
 8009f90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d10c      	bne.n	8009fb2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d104      	bne.n	8009fa8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f965 	bl	800a270 <USB_SetDevSpeed>
 8009fa6:	e008      	b.n	8009fba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009fa8:	2101      	movs	r1, #1
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f960 	bl	800a270 <USB_SetDevSpeed>
 8009fb0:	e003      	b.n	8009fba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009fb2:	2103      	movs	r1, #3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f95b 	bl	800a270 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009fba:	2110      	movs	r1, #16
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 f8f3 	bl	800a1a8 <USB_FlushTxFifo>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f91f 	bl	800a210 <USB_FlushRxFifo>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fee:	461a      	mov	r2, r3
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a000:	2300      	movs	r3, #0
 800a002:	613b      	str	r3, [r7, #16]
 800a004:	e043      	b.n	800a08e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a018:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a01c:	d118      	bne.n	800a050 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a030:	461a      	mov	r2, r3
 800a032:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	e013      	b.n	800a062 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a046:	461a      	mov	r2, r3
 800a048:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	e008      	b.n	800a062 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	015a      	lsls	r2, r3, #5
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	4413      	add	r3, r2
 800a058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a05c:	461a      	mov	r2, r3
 800a05e:	2300      	movs	r3, #0
 800a060:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a06e:	461a      	mov	r2, r3
 800a070:	2300      	movs	r3, #0
 800a072:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a080:	461a      	mov	r2, r3
 800a082:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a086:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	3301      	adds	r3, #1
 800a08c:	613b      	str	r3, [r7, #16]
 800a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	429a      	cmp	r2, r3
 800a094:	d3b7      	bcc.n	800a006 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a096:	2300      	movs	r3, #0
 800a098:	613b      	str	r3, [r7, #16]
 800a09a:	e043      	b.n	800a124 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0b2:	d118      	bne.n	800a0e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10a      	bne.n	800a0d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a0cc:	6013      	str	r3, [r2, #0]
 800a0ce:	e013      	b.n	800a0f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0dc:	461a      	mov	r2, r3
 800a0de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	e008      	b.n	800a0f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a104:	461a      	mov	r2, r3
 800a106:	2300      	movs	r3, #0
 800a108:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	015a      	lsls	r2, r3, #5
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	4413      	add	r3, r2
 800a112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a116:	461a      	mov	r2, r3
 800a118:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a11c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	3301      	adds	r3, #1
 800a122:	613b      	str	r3, [r7, #16]
 800a124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d3b7      	bcc.n	800a09c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a13a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a13e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a14c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a150:	2b00      	cmp	r3, #0
 800a152:	d105      	bne.n	800a160 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	f043 0210 	orr.w	r2, r3, #16
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	699a      	ldr	r2, [r3, #24]
 800a164:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a4 <USB_DevInit+0x2c4>)
 800a166:	4313      	orrs	r3, r2
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d005      	beq.n	800a17e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	f043 0208 	orr.w	r2, r3, #8
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a17e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a180:	2b01      	cmp	r3, #1
 800a182:	d107      	bne.n	800a194 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a18c:	f043 0304 	orr.w	r3, r3, #4
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a194:	7dfb      	ldrb	r3, [r7, #23]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1a0:	b004      	add	sp, #16
 800a1a2:	4770      	bx	lr
 800a1a4:	803c3800 	.word	0x803c3800

0800a1a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4a13      	ldr	r2, [pc, #76]	@ (800a20c <USB_FlushTxFifo+0x64>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d901      	bls.n	800a1c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e01b      	b.n	800a200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	daf2      	bge.n	800a1b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	019b      	lsls	r3, r3, #6
 800a1d8:	f043 0220 	orr.w	r2, r3, #32
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4a08      	ldr	r2, [pc, #32]	@ (800a20c <USB_FlushTxFifo+0x64>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d901      	bls.n	800a1f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e006      	b.n	800a200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	f003 0320 	and.w	r3, r3, #32
 800a1fa:	2b20      	cmp	r3, #32
 800a1fc:	d0f0      	beq.n	800a1e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	00030d40 	.word	0x00030d40

0800a210 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a218:	2300      	movs	r3, #0
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3301      	adds	r3, #1
 800a220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4a11      	ldr	r2, [pc, #68]	@ (800a26c <USB_FlushRxFifo+0x5c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d901      	bls.n	800a22e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e018      	b.n	800a260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	2b00      	cmp	r3, #0
 800a234:	daf2      	bge.n	800a21c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2210      	movs	r2, #16
 800a23e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	3301      	adds	r3, #1
 800a244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4a08      	ldr	r2, [pc, #32]	@ (800a26c <USB_FlushRxFifo+0x5c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d901      	bls.n	800a252 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e006      	b.n	800a260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	f003 0310 	and.w	r3, r3, #16
 800a25a:	2b10      	cmp	r3, #16
 800a25c:	d0f0      	beq.n	800a240 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	00030d40 	.word	0x00030d40

0800a270 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	68f9      	ldr	r1, [r7, #12]
 800a28c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a290:	4313      	orrs	r3, r2
 800a292:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b087      	sub	sp, #28
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f003 0306 	and.w	r3, r3, #6
 800a2ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d102      	bne.n	800a2c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]
 800a2c6:	e00a      	b.n	800a2de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d002      	beq.n	800a2d4 <USB_GetDevSpeed+0x32>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2b06      	cmp	r3, #6
 800a2d2:	d102      	bne.n	800a2da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	75fb      	strb	r3, [r7, #23]
 800a2d8:	e001      	b.n	800a2de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a2da:	230f      	movs	r3, #15
 800a2dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	371c      	adds	r7, #28
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	785b      	ldrb	r3, [r3, #1]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d13a      	bne.n	800a37e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a30e:	69da      	ldr	r2, [r3, #28]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	f003 030f 	and.w	r3, r3, #15
 800a318:	2101      	movs	r1, #1
 800a31a:	fa01 f303 	lsl.w	r3, r1, r3
 800a31e:	b29b      	uxth	r3, r3
 800a320:	68f9      	ldr	r1, [r7, #12]
 800a322:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a326:	4313      	orrs	r3, r2
 800a328:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d155      	bne.n	800a3ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	791b      	ldrb	r3, [r3, #4]
 800a35a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a35c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	059b      	lsls	r3, r3, #22
 800a362:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a364:	4313      	orrs	r3, r2
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	0151      	lsls	r1, r2, #5
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	440a      	add	r2, r1
 800a36e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a37a:	6013      	str	r3, [r2, #0]
 800a37c:	e036      	b.n	800a3ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a384:	69da      	ldr	r2, [r3, #28]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	f003 030f 	and.w	r3, r3, #15
 800a38e:	2101      	movs	r1, #1
 800a390:	fa01 f303 	lsl.w	r3, r1, r3
 800a394:	041b      	lsls	r3, r3, #16
 800a396:	68f9      	ldr	r1, [r7, #12]
 800a398:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a39c:	4313      	orrs	r3, r2
 800a39e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	015a      	lsls	r2, r3, #5
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d11a      	bne.n	800a3ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	015a      	lsls	r2, r3, #5
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	791b      	ldrb	r3, [r3, #4]
 800a3d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	0151      	lsls	r1, r2, #5
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	440a      	add	r2, r1
 800a3de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
	...

0800a3fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	785b      	ldrb	r3, [r3, #1]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d161      	bne.n	800a4dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	015a      	lsls	r2, r3, #5
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4413      	add	r3, r2
 800a420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a42a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a42e:	d11f      	bne.n	800a470 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	0151      	lsls	r1, r2, #5
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	440a      	add	r2, r1
 800a446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a44a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a44e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	4413      	add	r3, r2
 800a458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	0151      	lsls	r1, r2, #5
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	440a      	add	r2, r1
 800a466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a46a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a46e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	f003 030f 	and.w	r3, r3, #15
 800a480:	2101      	movs	r1, #1
 800a482:	fa01 f303 	lsl.w	r3, r1, r3
 800a486:	b29b      	uxth	r3, r3
 800a488:	43db      	mvns	r3, r3
 800a48a:	68f9      	ldr	r1, [r7, #12]
 800a48c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a490:	4013      	ands	r3, r2
 800a492:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a49a:	69da      	ldr	r2, [r3, #28]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	f003 030f 	and.w	r3, r3, #15
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	43db      	mvns	r3, r3
 800a4ae:	68f9      	ldr	r1, [r7, #12]
 800a4b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	0159      	lsls	r1, r3, #5
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	440b      	add	r3, r1
 800a4ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	4b35      	ldr	r3, [pc, #212]	@ (800a5ac <USB_DeactivateEndpoint+0x1b0>)
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	600b      	str	r3, [r1, #0]
 800a4da:	e060      	b.n	800a59e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4f2:	d11f      	bne.n	800a534 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	0151      	lsls	r1, r2, #5
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	440a      	add	r2, r1
 800a50a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a50e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a512:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	015a      	lsls	r2, r3, #5
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	0151      	lsls	r1, r2, #5
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	440a      	add	r2, r1
 800a52a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a52e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a532:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a53a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	f003 030f 	and.w	r3, r3, #15
 800a544:	2101      	movs	r1, #1
 800a546:	fa01 f303 	lsl.w	r3, r1, r3
 800a54a:	041b      	lsls	r3, r3, #16
 800a54c:	43db      	mvns	r3, r3
 800a54e:	68f9      	ldr	r1, [r7, #12]
 800a550:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a554:	4013      	ands	r3, r2
 800a556:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a55e:	69da      	ldr	r2, [r3, #28]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	f003 030f 	and.w	r3, r3, #15
 800a568:	2101      	movs	r1, #1
 800a56a:	fa01 f303 	lsl.w	r3, r1, r3
 800a56e:	041b      	lsls	r3, r3, #16
 800a570:	43db      	mvns	r3, r3
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a578:	4013      	ands	r3, r2
 800a57a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	0159      	lsls	r1, r3, #5
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	440b      	add	r3, r1
 800a592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a596:	4619      	mov	r1, r3
 800a598:	4b05      	ldr	r3, [pc, #20]	@ (800a5b0 <USB_DeactivateEndpoint+0x1b4>)
 800a59a:	4013      	ands	r3, r2
 800a59c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	ec337800 	.word	0xec337800
 800a5b0:	eff37800 	.word	0xeff37800

0800a5b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08a      	sub	sp, #40	@ 0x28
 800a5b8:	af02      	add	r7, sp, #8
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	785b      	ldrb	r3, [r3, #1]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	f040 815c 	bne.w	800a88e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d132      	bne.n	800a644 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	69ba      	ldr	r2, [r7, #24]
 800a5ee:	0151      	lsls	r1, r2, #5
 800a5f0:	69fa      	ldr	r2, [r7, #28]
 800a5f2:	440a      	add	r2, r1
 800a5f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5f8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a5fc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	0151      	lsls	r1, r2, #5
 800a614:	69fa      	ldr	r2, [r7, #28]
 800a616:	440a      	add	r2, r1
 800a618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a61c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	69ba      	ldr	r2, [r7, #24]
 800a632:	0151      	lsls	r1, r2, #5
 800a634:	69fa      	ldr	r2, [r7, #28]
 800a636:	440a      	add	r2, r1
 800a638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a63c:	0cdb      	lsrs	r3, r3, #19
 800a63e:	04db      	lsls	r3, r3, #19
 800a640:	6113      	str	r3, [r2, #16]
 800a642:	e074      	b.n	800a72e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	015a      	lsls	r2, r3, #5
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	0151      	lsls	r1, r2, #5
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	440a      	add	r2, r1
 800a65a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a65e:	0cdb      	lsrs	r3, r3, #19
 800a660:	04db      	lsls	r3, r3, #19
 800a662:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	69ba      	ldr	r2, [r7, #24]
 800a674:	0151      	lsls	r1, r2, #5
 800a676:	69fa      	ldr	r2, [r7, #28]
 800a678:	440a      	add	r2, r1
 800a67a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a67e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a682:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	015a      	lsls	r2, r3, #5
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	4413      	add	r3, r2
 800a690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a694:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	6999      	ldr	r1, [r3, #24]
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	440b      	add	r3, r1
 800a6a0:	1e59      	subs	r1, r3, #1
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a6aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a6ac:	4b9d      	ldr	r3, [pc, #628]	@ (800a924 <USB_EPStartXfer+0x370>)
 800a6ae:	400b      	ands	r3, r1
 800a6b0:	69b9      	ldr	r1, [r7, #24]
 800a6b2:	0148      	lsls	r0, r1, #5
 800a6b4:	69f9      	ldr	r1, [r7, #28]
 800a6b6:	4401      	add	r1, r0
 800a6b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	015a      	lsls	r2, r3, #5
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6cc:	691a      	ldr	r2, [r3, #16]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6d6:	69b9      	ldr	r1, [r7, #24]
 800a6d8:	0148      	lsls	r0, r1, #5
 800a6da:	69f9      	ldr	r1, [r7, #28]
 800a6dc:	4401      	add	r1, r0
 800a6de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	791b      	ldrb	r3, [r3, #4]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d11f      	bne.n	800a72e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	69ba      	ldr	r2, [r7, #24]
 800a6fe:	0151      	lsls	r1, r2, #5
 800a700:	69fa      	ldr	r2, [r7, #28]
 800a702:	440a      	add	r2, r1
 800a704:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a708:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a70c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	0151      	lsls	r1, r2, #5
 800a720:	69fa      	ldr	r2, [r7, #28]
 800a722:	440a      	add	r2, r1
 800a724:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a728:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a72c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d14b      	bne.n	800a7cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d009      	beq.n	800a750 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	015a      	lsls	r2, r3, #5
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	4413      	add	r3, r2
 800a744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a748:	461a      	mov	r2, r3
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	791b      	ldrb	r3, [r3, #4]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d128      	bne.n	800a7aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a764:	2b00      	cmp	r3, #0
 800a766:	d110      	bne.n	800a78a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	0151      	lsls	r1, r2, #5
 800a77a:	69fa      	ldr	r2, [r7, #28]
 800a77c:	440a      	add	r2, r1
 800a77e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a782:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	e00f      	b.n	800a7aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	69ba      	ldr	r2, [r7, #24]
 800a79a:	0151      	lsls	r1, r2, #5
 800a79c:	69fa      	ldr	r2, [r7, #28]
 800a79e:	440a      	add	r2, r1
 800a7a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	69ba      	ldr	r2, [r7, #24]
 800a7ba:	0151      	lsls	r1, r2, #5
 800a7bc:	69fa      	ldr	r2, [r7, #28]
 800a7be:	440a      	add	r2, r1
 800a7c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a7c8:	6013      	str	r3, [r2, #0]
 800a7ca:	e133      	b.n	800aa34 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	69ba      	ldr	r2, [r7, #24]
 800a7dc:	0151      	lsls	r1, r2, #5
 800a7de:	69fa      	ldr	r2, [r7, #28]
 800a7e0:	440a      	add	r2, r1
 800a7e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a7ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	791b      	ldrb	r3, [r3, #4]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d015      	beq.n	800a820 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 811b 	beq.w	800aa34 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	f003 030f 	and.w	r3, r3, #15
 800a80e:	2101      	movs	r1, #1
 800a810:	fa01 f303 	lsl.w	r3, r1, r3
 800a814:	69f9      	ldr	r1, [r7, #28]
 800a816:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a81a:	4313      	orrs	r3, r2
 800a81c:	634b      	str	r3, [r1, #52]	@ 0x34
 800a81e:	e109      	b.n	800aa34 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d110      	bne.n	800a852 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	69ba      	ldr	r2, [r7, #24]
 800a840:	0151      	lsls	r1, r2, #5
 800a842:	69fa      	ldr	r2, [r7, #28]
 800a844:	440a      	add	r2, r1
 800a846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a84a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	e00f      	b.n	800a872 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	69ba      	ldr	r2, [r7, #24]
 800a862:	0151      	lsls	r1, r2, #5
 800a864:	69fa      	ldr	r2, [r7, #28]
 800a866:	440a      	add	r2, r1
 800a868:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a86c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a870:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	6919      	ldr	r1, [r3, #16]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	781a      	ldrb	r2, [r3, #0]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	b298      	uxth	r0, r3
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	4603      	mov	r3, r0
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f000 fade 	bl	800ae48 <USB_WritePacket>
 800a88c:	e0d2      	b.n	800aa34 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	4413      	add	r3, r2
 800a896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	0151      	lsls	r1, r2, #5
 800a8a0:	69fa      	ldr	r2, [r7, #28]
 800a8a2:	440a      	add	r2, r1
 800a8a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8a8:	0cdb      	lsrs	r3, r3, #19
 800a8aa:	04db      	lsls	r3, r3, #19
 800a8ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	015a      	lsls	r2, r3, #5
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	69ba      	ldr	r2, [r7, #24]
 800a8be:	0151      	lsls	r1, r2, #5
 800a8c0:	69fa      	ldr	r2, [r7, #28]
 800a8c2:	440a      	add	r2, r1
 800a8c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8c8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a8cc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a8d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d126      	bne.n	800a928 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	015a      	lsls	r2, r3, #5
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8e6:	691a      	ldr	r2, [r3, #16]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8f0:	69b9      	ldr	r1, [r7, #24]
 800a8f2:	0148      	lsls	r0, r1, #5
 800a8f4:	69f9      	ldr	r1, [r7, #28]
 800a8f6:	4401      	add	r1, r0
 800a8f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	015a      	lsls	r2, r3, #5
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	4413      	add	r3, r2
 800a908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	69ba      	ldr	r2, [r7, #24]
 800a910:	0151      	lsls	r1, r2, #5
 800a912:	69fa      	ldr	r2, [r7, #28]
 800a914:	440a      	add	r2, r1
 800a916:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a91a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a91e:	6113      	str	r3, [r2, #16]
 800a920:	e03a      	b.n	800a998 <USB_EPStartXfer+0x3e4>
 800a922:	bf00      	nop
 800a924:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	699a      	ldr	r2, [r3, #24]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	4413      	add	r3, r2
 800a932:	1e5a      	subs	r2, r3, #1
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	8afa      	ldrh	r2, [r7, #22]
 800a944:	fb03 f202 	mul.w	r2, r3, r2
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a958:	691a      	ldr	r2, [r3, #16]
 800a95a:	8afb      	ldrh	r3, [r7, #22]
 800a95c:	04d9      	lsls	r1, r3, #19
 800a95e:	4b38      	ldr	r3, [pc, #224]	@ (800aa40 <USB_EPStartXfer+0x48c>)
 800a960:	400b      	ands	r3, r1
 800a962:	69b9      	ldr	r1, [r7, #24]
 800a964:	0148      	lsls	r0, r1, #5
 800a966:	69f9      	ldr	r1, [r7, #28]
 800a968:	4401      	add	r1, r0
 800a96a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a96e:	4313      	orrs	r3, r2
 800a970:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97e:	691a      	ldr	r2, [r3, #16]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a988:	69b9      	ldr	r1, [r7, #24]
 800a98a:	0148      	lsls	r0, r1, #5
 800a98c:	69f9      	ldr	r1, [r7, #28]
 800a98e:	4401      	add	r1, r0
 800a990:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a994:	4313      	orrs	r3, r2
 800a996:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d10d      	bne.n	800a9ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d009      	beq.n	800a9ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	6919      	ldr	r1, [r3, #16]
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b6:	460a      	mov	r2, r1
 800a9b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	791b      	ldrb	r3, [r3, #4]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d128      	bne.n	800aa14 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d110      	bne.n	800a9f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	015a      	lsls	r2, r3, #5
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	4413      	add	r3, r2
 800a9da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	0151      	lsls	r1, r2, #5
 800a9e4:	69fa      	ldr	r2, [r7, #28]
 800a9e6:	440a      	add	r2, r1
 800a9e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a9f0:	6013      	str	r3, [r2, #0]
 800a9f2:	e00f      	b.n	800aa14 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	69ba      	ldr	r2, [r7, #24]
 800aa04:	0151      	lsls	r1, r2, #5
 800aa06:	69fa      	ldr	r2, [r7, #28]
 800aa08:	440a      	add	r2, r1
 800aa0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	0151      	lsls	r1, r2, #5
 800aa26:	69fa      	ldr	r2, [r7, #28]
 800aa28:	440a      	add	r2, r1
 800aa2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aa32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3720      	adds	r7, #32
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	1ff80000 	.word	0x1ff80000

0800aa44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	785b      	ldrb	r3, [r3, #1]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	f040 80ce 	bne.w	800ac02 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d132      	bne.n	800aad4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	0151      	lsls	r1, r2, #5
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	440a      	add	r2, r1
 800aa84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa88:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa8c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	0151      	lsls	r1, r2, #5
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	440a      	add	r2, r1
 800aaa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aab0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	015a      	lsls	r2, r3, #5
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	4413      	add	r3, r2
 800aaba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	0151      	lsls	r1, r2, #5
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	440a      	add	r2, r1
 800aac8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aacc:	0cdb      	lsrs	r3, r3, #19
 800aace:	04db      	lsls	r3, r3, #19
 800aad0:	6113      	str	r3, [r2, #16]
 800aad2:	e04e      	b.n	800ab72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	015a      	lsls	r2, r3, #5
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	4413      	add	r3, r2
 800aadc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	0151      	lsls	r1, r2, #5
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	440a      	add	r2, r1
 800aaea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaee:	0cdb      	lsrs	r3, r3, #19
 800aaf0:	04db      	lsls	r3, r3, #19
 800aaf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	0151      	lsls	r1, r2, #5
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	440a      	add	r2, r1
 800ab0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab0e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ab12:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ab16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	699a      	ldr	r2, [r3, #24]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d903      	bls.n	800ab2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	0151      	lsls	r1, r2, #5
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	440a      	add	r2, r1
 800ab42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab58:	691a      	ldr	r2, [r3, #16]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab62:	6939      	ldr	r1, [r7, #16]
 800ab64:	0148      	lsls	r0, r1, #5
 800ab66:	6979      	ldr	r1, [r7, #20]
 800ab68:	4401      	add	r1, r0
 800ab6a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ab72:	79fb      	ldrb	r3, [r7, #7]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d11e      	bne.n	800abb6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d009      	beq.n	800ab94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	015a      	lsls	r2, r3, #5
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	0151      	lsls	r1, r2, #5
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	440a      	add	r2, r1
 800abaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	e097      	b.n	800ace6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	0151      	lsls	r1, r2, #5
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	440a      	add	r2, r1
 800abcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abd0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800abd4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 8083 	beq.w	800ace6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 030f 	and.w	r3, r3, #15
 800abf0:	2101      	movs	r1, #1
 800abf2:	fa01 f303 	lsl.w	r3, r1, r3
 800abf6:	6979      	ldr	r1, [r7, #20]
 800abf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abfc:	4313      	orrs	r3, r2
 800abfe:	634b      	str	r3, [r1, #52]	@ 0x34
 800ac00:	e071      	b.n	800ace6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	0151      	lsls	r1, r2, #5
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	440a      	add	r2, r1
 800ac18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac1c:	0cdb      	lsrs	r3, r3, #19
 800ac1e:	04db      	lsls	r3, r3, #19
 800ac20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	0151      	lsls	r1, r2, #5
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	440a      	add	r2, r1
 800ac38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac3c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ac40:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ac44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d003      	beq.n	800ac56 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	68da      	ldr	r2, [r3, #12]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	68da      	ldr	r2, [r3, #12]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	015a      	lsls	r2, r3, #5
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	4413      	add	r3, r2
 800ac66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	0151      	lsls	r1, r2, #5
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	440a      	add	r2, r1
 800ac74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac8a:	691a      	ldr	r2, [r3, #16]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac94:	6939      	ldr	r1, [r7, #16]
 800ac96:	0148      	lsls	r0, r1, #5
 800ac98:	6979      	ldr	r1, [r7, #20]
 800ac9a:	4401      	add	r1, r0
 800ac9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aca0:	4313      	orrs	r3, r2
 800aca2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d10d      	bne.n	800acc6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d009      	beq.n	800acc6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	6919      	ldr	r1, [r3, #16]
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	015a      	lsls	r2, r3, #5
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	4413      	add	r3, r2
 800acbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acc2:	460a      	mov	r2, r1
 800acc4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	0151      	lsls	r1, r2, #5
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	440a      	add	r2, r1
 800acdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ace0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ace4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	371c      	adds	r7, #28
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	785b      	ldrb	r3, [r3, #1]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d14a      	bne.n	800ada8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	015a      	lsls	r2, r3, #5
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad2a:	f040 8086 	bne.w	800ae3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	7812      	ldrb	r2, [r2, #0]
 800ad42:	0151      	lsls	r1, r2, #5
 800ad44:	693a      	ldr	r2, [r7, #16]
 800ad46:	440a      	add	r2, r1
 800ad48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	7812      	ldrb	r2, [r2, #0]
 800ad66:	0151      	lsls	r1, r2, #5
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	440a      	add	r2, r1
 800ad6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d902      	bls.n	800ad8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	75fb      	strb	r3, [r7, #23]
          break;
 800ad8a:	e056      	b.n	800ae3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ada0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ada4:	d0e7      	beq.n	800ad76 <USB_EPStopXfer+0x82>
 800ada6:	e048      	b.n	800ae3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	015a      	lsls	r2, r3, #5
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adc0:	d13b      	bne.n	800ae3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	7812      	ldrb	r2, [r2, #0]
 800add6:	0151      	lsls	r1, r2, #5
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	440a      	add	r2, r1
 800addc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ade0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ade4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	7812      	ldrb	r2, [r2, #0]
 800adfa:	0151      	lsls	r1, r2, #5
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	440a      	add	r2, r1
 800ae00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d902      	bls.n	800ae20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ae1e:	e00c      	b.n	800ae3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae38:	d0e7      	beq.n	800ae0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b089      	sub	sp, #36	@ 0x24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	4611      	mov	r1, r2
 800ae54:	461a      	mov	r2, r3
 800ae56:	460b      	mov	r3, r1
 800ae58:	71fb      	strb	r3, [r7, #7]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ae66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d123      	bne.n	800aeb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ae6e:	88bb      	ldrh	r3, [r7, #4]
 800ae70:	3303      	adds	r3, #3
 800ae72:	089b      	lsrs	r3, r3, #2
 800ae74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ae76:	2300      	movs	r3, #0
 800ae78:	61bb      	str	r3, [r7, #24]
 800ae7a:	e018      	b.n	800aeae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae7c:	79fb      	ldrb	r3, [r7, #7]
 800ae7e:	031a      	lsls	r2, r3, #12
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	4413      	add	r3, r2
 800ae84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae88:	461a      	mov	r2, r3
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	3301      	adds	r3, #1
 800ae94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	3301      	adds	r3, #1
 800aea6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	61bb      	str	r3, [r7, #24]
 800aeae:	69ba      	ldr	r2, [r7, #24]
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d3e2      	bcc.n	800ae7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3724      	adds	r7, #36	@ 0x24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b08b      	sub	sp, #44	@ 0x2c
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	4613      	mov	r3, r2
 800aed0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aeda:	88fb      	ldrh	r3, [r7, #6]
 800aedc:	089b      	lsrs	r3, r3, #2
 800aede:	b29b      	uxth	r3, r3
 800aee0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aee2:	88fb      	ldrh	r3, [r7, #6]
 800aee4:	f003 0303 	and.w	r3, r3, #3
 800aee8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aeea:	2300      	movs	r3, #0
 800aeec:	623b      	str	r3, [r7, #32]
 800aeee:	e014      	b.n	800af1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefa:	601a      	str	r2, [r3, #0]
    pDest++;
 800aefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefe:	3301      	adds	r3, #1
 800af00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af04:	3301      	adds	r3, #1
 800af06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0a:	3301      	adds	r3, #1
 800af0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	3301      	adds	r3, #1
 800af12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800af14:	6a3b      	ldr	r3, [r7, #32]
 800af16:	3301      	adds	r3, #1
 800af18:	623b      	str	r3, [r7, #32]
 800af1a:	6a3a      	ldr	r2, [r7, #32]
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d3e6      	bcc.n	800aef0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800af22:	8bfb      	ldrh	r3, [r7, #30]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01e      	beq.n	800af66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800af28:	2300      	movs	r3, #0
 800af2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af32:	461a      	mov	r2, r3
 800af34:	f107 0310 	add.w	r3, r7, #16
 800af38:	6812      	ldr	r2, [r2, #0]
 800af3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	b2db      	uxtb	r3, r3
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	fa22 f303 	lsr.w	r3, r2, r3
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4c:	701a      	strb	r2, [r3, #0]
      i++;
 800af4e:	6a3b      	ldr	r3, [r7, #32]
 800af50:	3301      	adds	r3, #1
 800af52:	623b      	str	r3, [r7, #32]
      pDest++;
 800af54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af56:	3301      	adds	r3, #1
 800af58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800af5a:	8bfb      	ldrh	r3, [r7, #30]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800af60:	8bfb      	ldrh	r3, [r7, #30]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1ea      	bne.n	800af3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800af66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af68:	4618      	mov	r0, r3
 800af6a:	372c      	adds	r7, #44	@ 0x2c
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	785b      	ldrb	r3, [r3, #1]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d12c      	bne.n	800afea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	4413      	add	r3, r2
 800af98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	db12      	blt.n	800afc8 <USB_EPSetStall+0x54>
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00f      	beq.n	800afc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	0151      	lsls	r1, r2, #5
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	440a      	add	r2, r1
 800afbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800afc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	015a      	lsls	r2, r3, #5
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	4413      	add	r3, r2
 800afd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	0151      	lsls	r1, r2, #5
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	440a      	add	r2, r1
 800afde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afe2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	e02b      	b.n	800b042 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	015a      	lsls	r2, r3, #5
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	4413      	add	r3, r2
 800aff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	db12      	blt.n	800b022 <USB_EPSetStall+0xae>
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00f      	beq.n	800b022 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	0151      	lsls	r1, r2, #5
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	440a      	add	r2, r1
 800b018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b01c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b020:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	015a      	lsls	r2, r3, #5
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	4413      	add	r3, r2
 800b02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	0151      	lsls	r1, r2, #5
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	440a      	add	r2, r1
 800b038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b03c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b040:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	785b      	ldrb	r3, [r3, #1]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d128      	bne.n	800b0be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4413      	add	r3, r2
 800b074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	0151      	lsls	r1, r2, #5
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	440a      	add	r2, r1
 800b082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b086:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b08a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	791b      	ldrb	r3, [r3, #4]
 800b090:	2b03      	cmp	r3, #3
 800b092:	d003      	beq.n	800b09c <USB_EPClearStall+0x4c>
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	791b      	ldrb	r3, [r3, #4]
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d138      	bne.n	800b10e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	015a      	lsls	r2, r3, #5
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	0151      	lsls	r1, r2, #5
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	440a      	add	r2, r1
 800b0b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0ba:	6013      	str	r3, [r2, #0]
 800b0bc:	e027      	b.n	800b10e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	015a      	lsls	r2, r3, #5
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	0151      	lsls	r1, r2, #5
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	440a      	add	r2, r1
 800b0d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b0dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	791b      	ldrb	r3, [r3, #4]
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d003      	beq.n	800b0ee <USB_EPClearStall+0x9e>
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	791b      	ldrb	r3, [r3, #4]
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d10f      	bne.n	800b10e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	015a      	lsls	r2, r3, #5
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	0151      	lsls	r1, r2, #5
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	440a      	add	r2, r1
 800b104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b10c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b13a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b13e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	78fb      	ldrb	r3, [r7, #3]
 800b14a:	011b      	lsls	r3, r3, #4
 800b14c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b150:	68f9      	ldr	r1, [r7, #12]
 800b152:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b156:	4313      	orrs	r3, r2
 800b158:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b182:	f023 0303 	bic.w	r3, r3, #3
 800b186:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b196:	f023 0302 	bic.w	r3, r3, #2
 800b19a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3714      	adds	r7, #20
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b085      	sub	sp, #20
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b1c4:	f023 0303 	bic.w	r3, r3, #3
 800b1c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1d8:	f043 0302 	orr.w	r3, r3, #2
 800b1dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	4013      	ands	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b204:	68fb      	ldr	r3, [r7, #12]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b212:	b480      	push	{r7}
 800b214:	b085      	sub	sp, #20
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b22e:	69db      	ldr	r3, [r3, #28]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	4013      	ands	r3, r2
 800b234:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	0c1b      	lsrs	r3, r3, #16
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b246:	b480      	push	{r7}
 800b248:	b085      	sub	sp, #20
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	4013      	ands	r3, r2
 800b268:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	b29b      	uxth	r3, r3
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b085      	sub	sp, #20
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	460b      	mov	r3, r1
 800b284:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b28a:	78fb      	ldrb	r3, [r7, #3]
 800b28c:	015a      	lsls	r2, r3, #5
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	4413      	add	r3, r2
 800b292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b2a8:	68bb      	ldr	r3, [r7, #8]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b087      	sub	sp, #28
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	460b      	mov	r3, r1
 800b2c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b2da:	78fb      	ldrb	r3, [r7, #3]
 800b2dc:	f003 030f 	and.w	r3, r3, #15
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e6:	01db      	lsls	r3, r3, #7
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b2f0:	78fb      	ldrb	r3, [r7, #3]
 800b2f2:	015a      	lsls	r2, r3, #5
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	4013      	ands	r3, r2
 800b302:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b304:	68bb      	ldr	r3, [r7, #8]
}
 800b306:	4618      	mov	r0, r3
 800b308:	371c      	adds	r7, #28
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b312:	b480      	push	{r7}
 800b314:	b083      	sub	sp, #12
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	f003 0301 	and.w	r3, r3, #1
}
 800b322:	4618      	mov	r0, r3
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b32e:	b480      	push	{r7}
 800b330:	b085      	sub	sp, #20
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b348:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b34c:	f023 0307 	bic.w	r3, r3, #7
 800b350:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b364:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b374:	b480      	push	{r7}
 800b376:	b087      	sub	sp, #28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	460b      	mov	r3, r1
 800b37e:	607a      	str	r2, [r7, #4]
 800b380:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	333c      	adds	r3, #60	@ 0x3c
 800b38a:	3304      	adds	r3, #4
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	4a26      	ldr	r2, [pc, #152]	@ (800b42c <USB_EP0_OutStart+0xb8>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d90a      	bls.n	800b3ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3a8:	d101      	bne.n	800b3ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e037      	b.n	800b41e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3dc:	f043 0318 	orr.w	r3, r3, #24
 800b3e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b3f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b3f6:	7afb      	ldrb	r3, [r7, #11]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d10f      	bne.n	800b41c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b402:	461a      	mov	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b416:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b41a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	371c      	adds	r7, #28
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	4f54300a 	.word	0x4f54300a

0800b430 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b438:	2300      	movs	r3, #0
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	3301      	adds	r3, #1
 800b440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	4a13      	ldr	r2, [pc, #76]	@ (800b494 <USB_CoreReset+0x64>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d901      	bls.n	800b44e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e01b      	b.n	800b486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	daf2      	bge.n	800b43c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	f043 0201 	orr.w	r2, r3, #1
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3301      	adds	r3, #1
 800b46a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	4a09      	ldr	r2, [pc, #36]	@ (800b494 <USB_CoreReset+0x64>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d901      	bls.n	800b478 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b474:	2303      	movs	r3, #3
 800b476:	e006      	b.n	800b486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b01      	cmp	r3, #1
 800b482:	d0f0      	beq.n	800b466 <USB_CoreReset+0x36>

  return HAL_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	00030d40 	.word	0x00030d40

0800b498 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b4a4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b4a8:	f005 f8d0 	bl	801064c <USBD_static_malloc>
 800b4ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d109      	bne.n	800b4c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	32b0      	adds	r2, #176	@ 0xb0
 800b4be:	2100      	movs	r1, #0
 800b4c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	e0d4      	b.n	800b672 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b4c8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f005 ff3b 	bl	801134a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	32b0      	adds	r2, #176	@ 0xb0
 800b4de:	68f9      	ldr	r1, [r7, #12]
 800b4e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	32b0      	adds	r2, #176	@ 0xb0
 800b4ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	7c1b      	ldrb	r3, [r3, #16]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d138      	bne.n	800b572 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b500:	4b5e      	ldr	r3, [pc, #376]	@ (800b67c <USBD_CDC_Init+0x1e4>)
 800b502:	7819      	ldrb	r1, [r3, #0]
 800b504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b508:	2202      	movs	r2, #2
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f004 ff7b 	bl	8010406 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b510:	4b5a      	ldr	r3, [pc, #360]	@ (800b67c <USBD_CDC_Init+0x1e4>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	f003 020f 	and.w	r2, r3, #15
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	4613      	mov	r3, r2
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4413      	add	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	440b      	add	r3, r1
 800b524:	3324      	adds	r3, #36	@ 0x24
 800b526:	2201      	movs	r2, #1
 800b528:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b52a:	4b55      	ldr	r3, [pc, #340]	@ (800b680 <USBD_CDC_Init+0x1e8>)
 800b52c:	7819      	ldrb	r1, [r3, #0]
 800b52e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b532:	2202      	movs	r2, #2
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f004 ff66 	bl	8010406 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b53a:	4b51      	ldr	r3, [pc, #324]	@ (800b680 <USBD_CDC_Init+0x1e8>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	f003 020f 	and.w	r2, r3, #15
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	440b      	add	r3, r1
 800b54e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b552:	2201      	movs	r2, #1
 800b554:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b556:	4b4b      	ldr	r3, [pc, #300]	@ (800b684 <USBD_CDC_Init+0x1ec>)
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	f003 020f 	and.w	r2, r3, #15
 800b55e:	6879      	ldr	r1, [r7, #4]
 800b560:	4613      	mov	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4413      	add	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	440b      	add	r3, r1
 800b56a:	3326      	adds	r3, #38	@ 0x26
 800b56c:	2210      	movs	r2, #16
 800b56e:	801a      	strh	r2, [r3, #0]
 800b570:	e035      	b.n	800b5de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b572:	4b42      	ldr	r3, [pc, #264]	@ (800b67c <USBD_CDC_Init+0x1e4>)
 800b574:	7819      	ldrb	r1, [r3, #0]
 800b576:	2340      	movs	r3, #64	@ 0x40
 800b578:	2202      	movs	r2, #2
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f004 ff43 	bl	8010406 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b580:	4b3e      	ldr	r3, [pc, #248]	@ (800b67c <USBD_CDC_Init+0x1e4>)
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	f003 020f 	and.w	r2, r3, #15
 800b588:	6879      	ldr	r1, [r7, #4]
 800b58a:	4613      	mov	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	440b      	add	r3, r1
 800b594:	3324      	adds	r3, #36	@ 0x24
 800b596:	2201      	movs	r2, #1
 800b598:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b59a:	4b39      	ldr	r3, [pc, #228]	@ (800b680 <USBD_CDC_Init+0x1e8>)
 800b59c:	7819      	ldrb	r1, [r3, #0]
 800b59e:	2340      	movs	r3, #64	@ 0x40
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f004 ff2f 	bl	8010406 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b5a8:	4b35      	ldr	r3, [pc, #212]	@ (800b680 <USBD_CDC_Init+0x1e8>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	f003 020f 	and.w	r2, r3, #15
 800b5b0:	6879      	ldr	r1, [r7, #4]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	440b      	add	r3, r1
 800b5bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b5c4:	4b2f      	ldr	r3, [pc, #188]	@ (800b684 <USBD_CDC_Init+0x1ec>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	f003 020f 	and.w	r2, r3, #15
 800b5cc:	6879      	ldr	r1, [r7, #4]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	440b      	add	r3, r1
 800b5d8:	3326      	adds	r3, #38	@ 0x26
 800b5da:	2210      	movs	r2, #16
 800b5dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b5de:	4b29      	ldr	r3, [pc, #164]	@ (800b684 <USBD_CDC_Init+0x1ec>)
 800b5e0:	7819      	ldrb	r1, [r3, #0]
 800b5e2:	2308      	movs	r3, #8
 800b5e4:	2203      	movs	r2, #3
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f004 ff0d 	bl	8010406 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b5ec:	4b25      	ldr	r3, [pc, #148]	@ (800b684 <USBD_CDC_Init+0x1ec>)
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	f003 020f 	and.w	r2, r3, #15
 800b5f4:	6879      	ldr	r1, [r7, #4]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	440b      	add	r3, r1
 800b600:	3324      	adds	r3, #36	@ 0x24
 800b602:	2201      	movs	r2, #1
 800b604:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	33b0      	adds	r3, #176	@ 0xb0
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d101      	bne.n	800b640 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b63c:	2302      	movs	r3, #2
 800b63e:	e018      	b.n	800b672 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	7c1b      	ldrb	r3, [r3, #16]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10a      	bne.n	800b65e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b648:	4b0d      	ldr	r3, [pc, #52]	@ (800b680 <USBD_CDC_Init+0x1e8>)
 800b64a:	7819      	ldrb	r1, [r3, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b652:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f004 ffc4 	bl	80105e4 <USBD_LL_PrepareReceive>
 800b65c:	e008      	b.n	800b670 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b65e:	4b08      	ldr	r3, [pc, #32]	@ (800b680 <USBD_CDC_Init+0x1e8>)
 800b660:	7819      	ldrb	r1, [r3, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b668:	2340      	movs	r3, #64	@ 0x40
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f004 ffba 	bl	80105e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	200000bf 	.word	0x200000bf
 800b680:	200000c0 	.word	0x200000c0
 800b684:	200000c1 	.word	0x200000c1

0800b688 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b694:	4b3a      	ldr	r3, [pc, #232]	@ (800b780 <USBD_CDC_DeInit+0xf8>)
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f004 fed9 	bl	8010452 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b6a0:	4b37      	ldr	r3, [pc, #220]	@ (800b780 <USBD_CDC_DeInit+0xf8>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	f003 020f 	and.w	r2, r3, #15
 800b6a8:	6879      	ldr	r1, [r7, #4]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	4413      	add	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	440b      	add	r3, r1
 800b6b4:	3324      	adds	r3, #36	@ 0x24
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b6ba:	4b32      	ldr	r3, [pc, #200]	@ (800b784 <USBD_CDC_DeInit+0xfc>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f004 fec6 	bl	8010452 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b6c6:	4b2f      	ldr	r3, [pc, #188]	@ (800b784 <USBD_CDC_DeInit+0xfc>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	f003 020f 	and.w	r2, r3, #15
 800b6ce:	6879      	ldr	r1, [r7, #4]
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	4413      	add	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	440b      	add	r3, r1
 800b6da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b6de:	2200      	movs	r2, #0
 800b6e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b6e2:	4b29      	ldr	r3, [pc, #164]	@ (800b788 <USBD_CDC_DeInit+0x100>)
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f004 feb2 	bl	8010452 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b6ee:	4b26      	ldr	r3, [pc, #152]	@ (800b788 <USBD_CDC_DeInit+0x100>)
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	f003 020f 	and.w	r2, r3, #15
 800b6f6:	6879      	ldr	r1, [r7, #4]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	440b      	add	r3, r1
 800b702:	3324      	adds	r3, #36	@ 0x24
 800b704:	2200      	movs	r2, #0
 800b706:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b708:	4b1f      	ldr	r3, [pc, #124]	@ (800b788 <USBD_CDC_DeInit+0x100>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	f003 020f 	and.w	r2, r3, #15
 800b710:	6879      	ldr	r1, [r7, #4]
 800b712:	4613      	mov	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4413      	add	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	440b      	add	r3, r1
 800b71c:	3326      	adds	r3, #38	@ 0x26
 800b71e:	2200      	movs	r2, #0
 800b720:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	32b0      	adds	r2, #176	@ 0xb0
 800b72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d01f      	beq.n	800b774 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	33b0      	adds	r3, #176	@ 0xb0
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	4413      	add	r3, r2
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	32b0      	adds	r2, #176	@ 0xb0
 800b752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b756:	4618      	mov	r0, r3
 800b758:	f004 ff86 	bl	8010668 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	32b0      	adds	r2, #176	@ 0xb0
 800b766:	2100      	movs	r1, #0
 800b768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	200000bf 	.word	0x200000bf
 800b784:	200000c0 	.word	0x200000c0
 800b788:	200000c1 	.word	0x200000c1

0800b78c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	32b0      	adds	r2, #176	@ 0xb0
 800b7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d101      	bne.n	800b7bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e0bf      	b.n	800b93c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d050      	beq.n	800b86a <USBD_CDC_Setup+0xde>
 800b7c8:	2b20      	cmp	r3, #32
 800b7ca:	f040 80af 	bne.w	800b92c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	88db      	ldrh	r3, [r3, #6]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d03a      	beq.n	800b84c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	b25b      	sxtb	r3, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	da1b      	bge.n	800b818 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	33b0      	adds	r3, #176	@ 0xb0
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b7f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	88d2      	ldrh	r2, [r2, #6]
 800b7fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	88db      	ldrh	r3, [r3, #6]
 800b802:	2b07      	cmp	r3, #7
 800b804:	bf28      	it	cs
 800b806:	2307      	movcs	r3, #7
 800b808:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	89fa      	ldrh	r2, [r7, #14]
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f001 fd87 	bl	800d324 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b816:	e090      	b.n	800b93a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	785a      	ldrb	r2, [r3, #1]
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	88db      	ldrh	r3, [r3, #6]
 800b826:	2b3f      	cmp	r3, #63	@ 0x3f
 800b828:	d803      	bhi.n	800b832 <USBD_CDC_Setup+0xa6>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	88db      	ldrh	r3, [r3, #6]
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	e000      	b.n	800b834 <USBD_CDC_Setup+0xa8>
 800b832:	2240      	movs	r2, #64	@ 0x40
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b83a:	6939      	ldr	r1, [r7, #16]
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b842:	461a      	mov	r2, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f001 fd99 	bl	800d37c <USBD_CtlPrepareRx>
      break;
 800b84a:	e076      	b.n	800b93a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	33b0      	adds	r3, #176	@ 0xb0
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4413      	add	r3, r2
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	7850      	ldrb	r0, [r2, #1]
 800b862:	2200      	movs	r2, #0
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	4798      	blx	r3
      break;
 800b868:	e067      	b.n	800b93a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	785b      	ldrb	r3, [r3, #1]
 800b86e:	2b0b      	cmp	r3, #11
 800b870:	d851      	bhi.n	800b916 <USBD_CDC_Setup+0x18a>
 800b872:	a201      	add	r2, pc, #4	@ (adr r2, 800b878 <USBD_CDC_Setup+0xec>)
 800b874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b878:	0800b8a9 	.word	0x0800b8a9
 800b87c:	0800b925 	.word	0x0800b925
 800b880:	0800b917 	.word	0x0800b917
 800b884:	0800b917 	.word	0x0800b917
 800b888:	0800b917 	.word	0x0800b917
 800b88c:	0800b917 	.word	0x0800b917
 800b890:	0800b917 	.word	0x0800b917
 800b894:	0800b917 	.word	0x0800b917
 800b898:	0800b917 	.word	0x0800b917
 800b89c:	0800b917 	.word	0x0800b917
 800b8a0:	0800b8d3 	.word	0x0800b8d3
 800b8a4:	0800b8fd 	.word	0x0800b8fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	2b03      	cmp	r3, #3
 800b8b2:	d107      	bne.n	800b8c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b8b4:	f107 030a 	add.w	r3, r7, #10
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f001 fd31 	bl	800d324 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b8c2:	e032      	b.n	800b92a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 fcbb 	bl	800d242 <USBD_CtlError>
            ret = USBD_FAIL;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	75fb      	strb	r3, [r7, #23]
          break;
 800b8d0:	e02b      	b.n	800b92a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d107      	bne.n	800b8ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b8de:	f107 030d 	add.w	r3, r7, #13
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f001 fd1c 	bl	800d324 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b8ec:	e01d      	b.n	800b92a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f001 fca6 	bl	800d242 <USBD_CtlError>
            ret = USBD_FAIL;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	75fb      	strb	r3, [r7, #23]
          break;
 800b8fa:	e016      	b.n	800b92a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b03      	cmp	r3, #3
 800b906:	d00f      	beq.n	800b928 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f001 fc99 	bl	800d242 <USBD_CtlError>
            ret = USBD_FAIL;
 800b910:	2303      	movs	r3, #3
 800b912:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b914:	e008      	b.n	800b928 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f001 fc92 	bl	800d242 <USBD_CtlError>
          ret = USBD_FAIL;
 800b91e:	2303      	movs	r3, #3
 800b920:	75fb      	strb	r3, [r7, #23]
          break;
 800b922:	e002      	b.n	800b92a <USBD_CDC_Setup+0x19e>
          break;
 800b924:	bf00      	nop
 800b926:	e008      	b.n	800b93a <USBD_CDC_Setup+0x1ae>
          break;
 800b928:	bf00      	nop
      }
      break;
 800b92a:	e006      	b.n	800b93a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b92c:	6839      	ldr	r1, [r7, #0]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f001 fc87 	bl	800d242 <USBD_CtlError>
      ret = USBD_FAIL;
 800b934:	2303      	movs	r3, #3
 800b936:	75fb      	strb	r3, [r7, #23]
      break;
 800b938:	bf00      	nop
  }

  return (uint8_t)ret;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3718      	adds	r7, #24
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	460b      	mov	r3, r1
 800b94e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b956:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	32b0      	adds	r2, #176	@ 0xb0
 800b962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b96a:	2303      	movs	r3, #3
 800b96c:	e065      	b.n	800ba3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	32b0      	adds	r2, #176	@ 0xb0
 800b978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b97e:	78fb      	ldrb	r3, [r7, #3]
 800b980:	f003 020f 	and.w	r2, r3, #15
 800b984:	6879      	ldr	r1, [r7, #4]
 800b986:	4613      	mov	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	4413      	add	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	440b      	add	r3, r1
 800b990:	3318      	adds	r3, #24
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d02f      	beq.n	800b9f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	f003 020f 	and.w	r2, r3, #15
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	440b      	add	r3, r1
 800b9aa:	3318      	adds	r3, #24
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	78fb      	ldrb	r3, [r7, #3]
 800b9b0:	f003 010f 	and.w	r1, r3, #15
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	00db      	lsls	r3, r3, #3
 800b9ba:	440b      	add	r3, r1
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4403      	add	r3, r0
 800b9c0:	3348      	adds	r3, #72	@ 0x48
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b9c8:	fb01 f303 	mul.w	r3, r1, r3
 800b9cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d112      	bne.n	800b9f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b9d2:	78fb      	ldrb	r3, [r7, #3]
 800b9d4:	f003 020f 	and.w	r2, r3, #15
 800b9d8:	6879      	ldr	r1, [r7, #4]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	4413      	add	r3, r2
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	440b      	add	r3, r1
 800b9e4:	3318      	adds	r3, #24
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b9ea:	78f9      	ldrb	r1, [r7, #3]
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f004 fdd6 	bl	80105a2 <USBD_LL_Transmit>
 800b9f6:	e01f      	b.n	800ba38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	33b0      	adds	r3, #176	@ 0xb0
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4413      	add	r3, r2
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d010      	beq.n	800ba38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	33b0      	adds	r3, #176	@ 0xb0
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ba34:	78fa      	ldrb	r2, [r7, #3]
 800ba36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	32b0      	adds	r2, #176	@ 0xb0
 800ba58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	32b0      	adds	r2, #176	@ 0xb0
 800ba68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ba70:	2303      	movs	r3, #3
 800ba72:	e01a      	b.n	800baaa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ba74:	78fb      	ldrb	r3, [r7, #3]
 800ba76:	4619      	mov	r1, r3
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f004 fdd4 	bl	8010626 <USBD_LL_GetRxDataSize>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	33b0      	adds	r3, #176	@ 0xb0
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800baa4:	4611      	mov	r1, r2
 800baa6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	32b0      	adds	r2, #176	@ 0xb0
 800bac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e024      	b.n	800bb1e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	33b0      	adds	r3, #176	@ 0xb0
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d019      	beq.n	800bb1c <USBD_CDC_EP0_RxReady+0x6a>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800baee:	2bff      	cmp	r3, #255	@ 0xff
 800baf0:	d014      	beq.n	800bb1c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	33b0      	adds	r3, #176	@ 0xb0
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4413      	add	r3, r2
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bb0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bb12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	22ff      	movs	r2, #255	@ 0xff
 800bb18:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
	...

0800bb28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bb30:	2182      	movs	r1, #130	@ 0x82
 800bb32:	4818      	ldr	r0, [pc, #96]	@ (800bb94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bb34:	f000 fd4f 	bl	800c5d6 <USBD_GetEpDesc>
 800bb38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bb3a:	2101      	movs	r1, #1
 800bb3c:	4815      	ldr	r0, [pc, #84]	@ (800bb94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bb3e:	f000 fd4a 	bl	800c5d6 <USBD_GetEpDesc>
 800bb42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bb44:	2181      	movs	r1, #129	@ 0x81
 800bb46:	4813      	ldr	r0, [pc, #76]	@ (800bb94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bb48:	f000 fd45 	bl	800c5d6 <USBD_GetEpDesc>
 800bb4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	2210      	movs	r2, #16
 800bb58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d006      	beq.n	800bb6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb68:	711a      	strb	r2, [r3, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d006      	beq.n	800bb82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb7c:	711a      	strb	r2, [r3, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2243      	movs	r2, #67	@ 0x43
 800bb86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bb88:	4b02      	ldr	r3, [pc, #8]	@ (800bb94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3718      	adds	r7, #24
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	2000007c 	.word	0x2000007c

0800bb98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bba0:	2182      	movs	r1, #130	@ 0x82
 800bba2:	4818      	ldr	r0, [pc, #96]	@ (800bc04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bba4:	f000 fd17 	bl	800c5d6 <USBD_GetEpDesc>
 800bba8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bbaa:	2101      	movs	r1, #1
 800bbac:	4815      	ldr	r0, [pc, #84]	@ (800bc04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bbae:	f000 fd12 	bl	800c5d6 <USBD_GetEpDesc>
 800bbb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bbb4:	2181      	movs	r1, #129	@ 0x81
 800bbb6:	4813      	ldr	r0, [pc, #76]	@ (800bc04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bbb8:	f000 fd0d 	bl	800c5d6 <USBD_GetEpDesc>
 800bbbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	2210      	movs	r2, #16
 800bbc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d006      	beq.n	800bbde <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	711a      	strb	r2, [r3, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f042 0202 	orr.w	r2, r2, #2
 800bbdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d006      	beq.n	800bbf2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	711a      	strb	r2, [r3, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f042 0202 	orr.w	r2, r2, #2
 800bbf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2243      	movs	r2, #67	@ 0x43
 800bbf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bbf8:	4b02      	ldr	r3, [pc, #8]	@ (800bc04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	2000007c 	.word	0x2000007c

0800bc08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bc10:	2182      	movs	r1, #130	@ 0x82
 800bc12:	4818      	ldr	r0, [pc, #96]	@ (800bc74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bc14:	f000 fcdf 	bl	800c5d6 <USBD_GetEpDesc>
 800bc18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	4815      	ldr	r0, [pc, #84]	@ (800bc74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bc1e:	f000 fcda 	bl	800c5d6 <USBD_GetEpDesc>
 800bc22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bc24:	2181      	movs	r1, #129	@ 0x81
 800bc26:	4813      	ldr	r0, [pc, #76]	@ (800bc74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bc28:	f000 fcd5 	bl	800c5d6 <USBD_GetEpDesc>
 800bc2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	2210      	movs	r2, #16
 800bc38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d006      	beq.n	800bc4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc48:	711a      	strb	r2, [r3, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d006      	beq.n	800bc62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc5c:	711a      	strb	r2, [r3, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2243      	movs	r2, #67	@ 0x43
 800bc66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bc68:	4b02      	ldr	r3, [pc, #8]	@ (800bc74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	2000007c 	.word	0x2000007c

0800bc78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	220a      	movs	r2, #10
 800bc84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bc86:	4b03      	ldr	r3, [pc, #12]	@ (800bc94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	20000038 	.word	0x20000038

0800bc98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d101      	bne.n	800bcac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	e009      	b.n	800bcc0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	33b0      	adds	r3, #176	@ 0xb0
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	32b0      	adds	r2, #176	@ 0xb0
 800bce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d101      	bne.n	800bcf2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	e008      	b.n	800bd04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	371c      	adds	r7, #28
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	32b0      	adds	r2, #176	@ 0xb0
 800bd24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bd30:	2303      	movs	r3, #3
 800bd32:	e004      	b.n	800bd3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3714      	adds	r7, #20
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
	...

0800bd4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	32b0      	adds	r2, #176	@ 0xb0
 800bd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bd64:	2301      	movs	r3, #1
 800bd66:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	32b0      	adds	r2, #176	@ 0xb0
 800bd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e025      	b.n	800bdca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d11f      	bne.n	800bdc8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bd90:	4b10      	ldr	r3, [pc, #64]	@ (800bdd4 <USBD_CDC_TransmitPacket+0x88>)
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	f003 020f 	and.w	r2, r3, #15
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	4613      	mov	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4403      	add	r3, r0
 800bdaa:	3318      	adds	r3, #24
 800bdac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bdae:	4b09      	ldr	r3, [pc, #36]	@ (800bdd4 <USBD_CDC_TransmitPacket+0x88>)
 800bdb0:	7819      	ldrb	r1, [r3, #0]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f004 fbef 	bl	80105a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	200000bf 	.word	0x200000bf

0800bdd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	32b0      	adds	r2, #176	@ 0xb0
 800bdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	32b0      	adds	r2, #176	@ 0xb0
 800bdfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800be02:	2303      	movs	r3, #3
 800be04:	e018      	b.n	800be38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	7c1b      	ldrb	r3, [r3, #16]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10a      	bne.n	800be24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be0e:	4b0c      	ldr	r3, [pc, #48]	@ (800be40 <USBD_CDC_ReceivePacket+0x68>)
 800be10:	7819      	ldrb	r1, [r3, #0]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f004 fbe1 	bl	80105e4 <USBD_LL_PrepareReceive>
 800be22:	e008      	b.n	800be36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be24:	4b06      	ldr	r3, [pc, #24]	@ (800be40 <USBD_CDC_ReceivePacket+0x68>)
 800be26:	7819      	ldrb	r1, [r3, #0]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be2e:	2340      	movs	r3, #64	@ 0x40
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f004 fbd7 	bl	80105e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	200000c0 	.word	0x200000c0

0800be44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4613      	mov	r3, r2
 800be50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800be58:	2303      	movs	r3, #3
 800be5a:	e01f      	b.n	800be9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d003      	beq.n	800be82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	79fa      	ldrb	r2, [r7, #7]
 800be8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f004 fa51 	bl	8010338 <USBD_LL_Init>
 800be96:	4603      	mov	r3, r0
 800be98:	75fb      	strb	r3, [r7, #23]

  return ret;
 800be9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800beae:	2300      	movs	r3, #0
 800beb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800beb8:	2303      	movs	r3, #3
 800beba:	e025      	b.n	800bf08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	32ae      	adds	r2, #174	@ 0xae
 800bece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00f      	beq.n	800bef8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	32ae      	adds	r2, #174	@ 0xae
 800bee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee8:	f107 020e 	add.w	r2, r7, #14
 800beec:	4610      	mov	r0, r2
 800beee:	4798      	blx	r3
 800bef0:	4602      	mov	r2, r0
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3710      	adds	r7, #16
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f004 fa59 	bl	80103d0 <USBD_LL_Start>
 800bf1e:	4603      	mov	r3, r0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	460b      	mov	r3, r1
 800bf48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d009      	beq.n	800bf6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	78fa      	ldrb	r2, [r7, #3]
 800bf62:	4611      	mov	r1, r2
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	4798      	blx	r3
 800bf68:	4603      	mov	r3, r0
 800bf6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b084      	sub	sp, #16
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	78fa      	ldrb	r2, [r7, #3]
 800bf90:	4611      	mov	r1, r2
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	4798      	blx	r3
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b084      	sub	sp, #16
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f001 f906 	bl	800d1ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bfde:	f003 031f 	and.w	r3, r3, #31
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d01a      	beq.n	800c01c <USBD_LL_SetupStage+0x72>
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d822      	bhi.n	800c030 <USBD_LL_SetupStage+0x86>
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d002      	beq.n	800bff4 <USBD_LL_SetupStage+0x4a>
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d00a      	beq.n	800c008 <USBD_LL_SetupStage+0x5e>
 800bff2:	e01d      	b.n	800c030 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fb5d 	bl	800c6bc <USBD_StdDevReq>
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]
      break;
 800c006:	e020      	b.n	800c04a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c00e:	4619      	mov	r1, r3
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fbc5 	bl	800c7a0 <USBD_StdItfReq>
 800c016:	4603      	mov	r3, r0
 800c018:	73fb      	strb	r3, [r7, #15]
      break;
 800c01a:	e016      	b.n	800c04a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c022:	4619      	mov	r1, r3
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fc27 	bl	800c878 <USBD_StdEPReq>
 800c02a:	4603      	mov	r3, r0
 800c02c:	73fb      	strb	r3, [r7, #15]
      break;
 800c02e:	e00c      	b.n	800c04a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c036:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	4619      	mov	r1, r3
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f004 fa26 	bl	8010490 <USBD_LL_StallEP>
 800c044:	4603      	mov	r3, r0
 800c046:	73fb      	strb	r3, [r7, #15]
      break;
 800c048:	bf00      	nop
  }

  return ret;
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	460b      	mov	r3, r1
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c062:	2300      	movs	r3, #0
 800c064:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c066:	7afb      	ldrb	r3, [r7, #11]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d16e      	bne.n	800c14a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c072:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	f040 8098 	bne.w	800c1b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	689a      	ldr	r2, [r3, #8]
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d913      	bls.n	800c0b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	689a      	ldr	r2, [r3, #8]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	1ad2      	subs	r2, r2, r3
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	68da      	ldr	r2, [r3, #12]
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	bf28      	it	cs
 800c0a6:	4613      	movcs	r3, r2
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	6879      	ldr	r1, [r7, #4]
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f001 f982 	bl	800d3b6 <USBD_CtlContinueRx>
 800c0b2:	e07d      	b.n	800c1b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c0ba:	f003 031f 	and.w	r3, r3, #31
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d014      	beq.n	800c0ec <USBD_LL_DataOutStage+0x98>
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d81d      	bhi.n	800c102 <USBD_LL_DataOutStage+0xae>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <USBD_LL_DataOutStage+0x7c>
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d003      	beq.n	800c0d6 <USBD_LL_DataOutStage+0x82>
 800c0ce:	e018      	b.n	800c102 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	75bb      	strb	r3, [r7, #22]
            break;
 800c0d4:	e018      	b.n	800c108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	4619      	mov	r1, r3
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f000 fa5e 	bl	800c5a2 <USBD_CoreFindIF>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	75bb      	strb	r3, [r7, #22]
            break;
 800c0ea:	e00d      	b.n	800c108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f000 fa60 	bl	800c5bc <USBD_CoreFindEP>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	75bb      	strb	r3, [r7, #22]
            break;
 800c100:	e002      	b.n	800c108 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c102:	2300      	movs	r3, #0
 800c104:	75bb      	strb	r3, [r7, #22]
            break;
 800c106:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c108:	7dbb      	ldrb	r3, [r7, #22]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d119      	bne.n	800c142 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b03      	cmp	r3, #3
 800c118:	d113      	bne.n	800c142 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c11a:	7dba      	ldrb	r2, [r7, #22]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	32ae      	adds	r2, #174	@ 0xae
 800c120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00b      	beq.n	800c142 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c12a:	7dba      	ldrb	r2, [r7, #22]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c132:	7dba      	ldrb	r2, [r7, #22]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	32ae      	adds	r2, #174	@ 0xae
 800c138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f001 f948 	bl	800d3d8 <USBD_CtlSendStatus>
 800c148:	e032      	b.n	800c1b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c14a:	7afb      	ldrb	r3, [r7, #11]
 800c14c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c150:	b2db      	uxtb	r3, r3
 800c152:	4619      	mov	r1, r3
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 fa31 	bl	800c5bc <USBD_CoreFindEP>
 800c15a:	4603      	mov	r3, r0
 800c15c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c15e:	7dbb      	ldrb	r3, [r7, #22]
 800c160:	2bff      	cmp	r3, #255	@ 0xff
 800c162:	d025      	beq.n	800c1b0 <USBD_LL_DataOutStage+0x15c>
 800c164:	7dbb      	ldrb	r3, [r7, #22]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d122      	bne.n	800c1b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b03      	cmp	r3, #3
 800c174:	d117      	bne.n	800c1a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c176:	7dba      	ldrb	r2, [r7, #22]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	32ae      	adds	r2, #174	@ 0xae
 800c17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c180:	699b      	ldr	r3, [r3, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00f      	beq.n	800c1a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c186:	7dba      	ldrb	r2, [r7, #22]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c18e:	7dba      	ldrb	r2, [r7, #22]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	32ae      	adds	r2, #174	@ 0xae
 800c194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	7afa      	ldrb	r2, [r7, #11]
 800c19c:	4611      	mov	r1, r2
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	4798      	blx	r3
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c1a6:	7dfb      	ldrb	r3, [r7, #23]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d001      	beq.n	800c1b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c1ac:	7dfb      	ldrb	r3, [r7, #23]
 800c1ae:	e000      	b.n	800c1b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b086      	sub	sp, #24
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	60f8      	str	r0, [r7, #12]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	607a      	str	r2, [r7, #4]
 800c1c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c1c8:	7afb      	ldrb	r3, [r7, #11]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d16f      	bne.n	800c2ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	3314      	adds	r3, #20
 800c1d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d15a      	bne.n	800c294 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	689a      	ldr	r2, [r3, #8]
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d914      	bls.n	800c214 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	689a      	ldr	r2, [r3, #8]
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	1ad2      	subs	r2, r2, r3
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	6879      	ldr	r1, [r7, #4]
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f001 f8aa 	bl	800d35a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c206:	2300      	movs	r3, #0
 800c208:	2200      	movs	r2, #0
 800c20a:	2100      	movs	r1, #0
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f004 f9e9 	bl	80105e4 <USBD_LL_PrepareReceive>
 800c212:	e03f      	b.n	800c294 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	68da      	ldr	r2, [r3, #12]
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d11c      	bne.n	800c25a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	685a      	ldr	r2, [r3, #4]
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c228:	429a      	cmp	r2, r3
 800c22a:	d316      	bcc.n	800c25a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	685a      	ldr	r2, [r3, #4]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c236:	429a      	cmp	r2, r3
 800c238:	d20f      	bcs.n	800c25a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c23a:	2200      	movs	r2, #0
 800c23c:	2100      	movs	r1, #0
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f001 f88b 	bl	800d35a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c24c:	2300      	movs	r3, #0
 800c24e:	2200      	movs	r2, #0
 800c250:	2100      	movs	r1, #0
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f004 f9c6 	bl	80105e4 <USBD_LL_PrepareReceive>
 800c258:	e01c      	b.n	800c294 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c260:	b2db      	uxtb	r3, r3
 800c262:	2b03      	cmp	r3, #3
 800c264:	d10f      	bne.n	800c286 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d009      	beq.n	800c286 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2200      	movs	r2, #0
 800c276:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c286:	2180      	movs	r1, #128	@ 0x80
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f004 f901 	bl	8010490 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f001 f8b5 	bl	800d3fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d03a      	beq.n	800c314 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f7ff fe42 	bl	800bf28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c2ac:	e032      	b.n	800c314 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c2ae:	7afb      	ldrb	r3, [r7, #11]
 800c2b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f000 f97f 	bl	800c5bc <USBD_CoreFindEP>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2c2:	7dfb      	ldrb	r3, [r7, #23]
 800c2c4:	2bff      	cmp	r3, #255	@ 0xff
 800c2c6:	d025      	beq.n	800c314 <USBD_LL_DataInStage+0x15a>
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d122      	bne.n	800c314 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	2b03      	cmp	r3, #3
 800c2d8:	d11c      	bne.n	800c314 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c2da:	7dfa      	ldrb	r2, [r7, #23]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	32ae      	adds	r2, #174	@ 0xae
 800c2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d014      	beq.n	800c314 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c2ea:	7dfa      	ldrb	r2, [r7, #23]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c2f2:	7dfa      	ldrb	r2, [r7, #23]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	32ae      	adds	r2, #174	@ 0xae
 800c2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	7afa      	ldrb	r2, [r7, #11]
 800c300:	4611      	mov	r1, r2
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	4798      	blx	r3
 800c306:	4603      	mov	r3, r0
 800c308:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c30a:	7dbb      	ldrb	r3, [r7, #22]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d001      	beq.n	800c314 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c310:	7dbb      	ldrb	r3, [r7, #22]
 800c312:	e000      	b.n	800c316 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3718      	adds	r7, #24
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b084      	sub	sp, #16
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c326:	2300      	movs	r3, #0
 800c328:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2201      	movs	r2, #1
 800c32e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c356:	2b00      	cmp	r3, #0
 800c358:	d014      	beq.n	800c384 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00e      	beq.n	800c384 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	6852      	ldr	r2, [r2, #4]
 800c372:	b2d2      	uxtb	r2, r2
 800c374:	4611      	mov	r1, r2
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	4798      	blx	r3
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c380:	2303      	movs	r3, #3
 800c382:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c384:	2340      	movs	r3, #64	@ 0x40
 800c386:	2200      	movs	r2, #0
 800c388:	2100      	movs	r1, #0
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f004 f83b 	bl	8010406 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2240      	movs	r2, #64	@ 0x40
 800c39c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3a0:	2340      	movs	r3, #64	@ 0x40
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	2180      	movs	r1, #128	@ 0x80
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f004 f82d 	bl	8010406 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2240      	movs	r2, #64	@ 0x40
 800c3b6:	621a      	str	r2, [r3, #32]

  return ret;
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c3c2:	b480      	push	{r7}
 800c3c4:	b083      	sub	sp, #12
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	78fa      	ldrb	r2, [r7, #3]
 800c3d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	370c      	adds	r7, #12
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c3e2:	b480      	push	{r7}
 800c3e4:	b083      	sub	sp, #12
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3f0:	b2da      	uxtb	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2204      	movs	r2, #4
 800c3fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr

0800c40e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c40e:	b480      	push	{r7}
 800c410:	b083      	sub	sp, #12
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b04      	cmp	r3, #4
 800c420:	d106      	bne.n	800c430 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c428:	b2da      	uxtb	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	370c      	adds	r7, #12
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr

0800c43e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b082      	sub	sp, #8
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b03      	cmp	r3, #3
 800c450:	d110      	bne.n	800c474 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00b      	beq.n	800c474 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c462:	69db      	ldr	r3, [r3, #28]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d005      	beq.n	800c474 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c46e:	69db      	ldr	r3, [r3, #28]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b082      	sub	sp, #8
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	460b      	mov	r3, r1
 800c488:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	32ae      	adds	r2, #174	@ 0xae
 800c494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d101      	bne.n	800c4a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c49c:	2303      	movs	r3, #3
 800c49e:	e01c      	b.n	800c4da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d115      	bne.n	800c4d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	32ae      	adds	r2, #174	@ 0xae
 800c4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ba:	6a1b      	ldr	r3, [r3, #32]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00b      	beq.n	800c4d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	32ae      	adds	r2, #174	@ 0xae
 800c4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ce:	6a1b      	ldr	r3, [r3, #32]
 800c4d0:	78fa      	ldrb	r2, [r7, #3]
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b082      	sub	sp, #8
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	32ae      	adds	r2, #174	@ 0xae
 800c4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d101      	bne.n	800c504 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c500:	2303      	movs	r3, #3
 800c502:	e01c      	b.n	800c53e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b03      	cmp	r3, #3
 800c50e:	d115      	bne.n	800c53c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	32ae      	adds	r2, #174	@ 0xae
 800c51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00b      	beq.n	800c53c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	32ae      	adds	r2, #174	@ 0xae
 800c52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c534:	78fa      	ldrb	r2, [r7, #3]
 800c536:	4611      	mov	r1, r2
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c546:	b480      	push	{r7}
 800c548:	b083      	sub	sp, #12
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2201      	movs	r2, #1
 800c56c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00e      	beq.n	800c598 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	6852      	ldr	r2, [r2, #4]
 800c586:	b2d2      	uxtb	r2, r2
 800c588:	4611      	mov	r1, r2
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	4798      	blx	r3
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d001      	beq.n	800c598 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c594:	2303      	movs	r3, #3
 800c596:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c598:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b083      	sub	sp, #12
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c5ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c5c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b086      	sub	sp, #24
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	460b      	mov	r3, r1
 800c5e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	885b      	ldrh	r3, [r3, #2]
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	7812      	ldrb	r2, [r2, #0]
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d91f      	bls.n	800c63c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c602:	e013      	b.n	800c62c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c604:	f107 030a 	add.w	r3, r7, #10
 800c608:	4619      	mov	r1, r3
 800c60a:	6978      	ldr	r0, [r7, #20]
 800c60c:	f000 f81b 	bl	800c646 <USBD_GetNextDesc>
 800c610:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	785b      	ldrb	r3, [r3, #1]
 800c616:	2b05      	cmp	r3, #5
 800c618:	d108      	bne.n	800c62c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	789b      	ldrb	r3, [r3, #2]
 800c622:	78fa      	ldrb	r2, [r7, #3]
 800c624:	429a      	cmp	r2, r3
 800c626:	d008      	beq.n	800c63a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c628:	2300      	movs	r3, #0
 800c62a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	885b      	ldrh	r3, [r3, #2]
 800c630:	b29a      	uxth	r2, r3
 800c632:	897b      	ldrh	r3, [r7, #10]
 800c634:	429a      	cmp	r2, r3
 800c636:	d8e5      	bhi.n	800c604 <USBD_GetEpDesc+0x2e>
 800c638:	e000      	b.n	800c63c <USBD_GetEpDesc+0x66>
          break;
 800c63a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c63c:	693b      	ldr	r3, [r7, #16]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c646:	b480      	push	{r7}
 800c648:	b085      	sub	sp, #20
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	7812      	ldrb	r2, [r2, #0]
 800c65c:	4413      	add	r3, r2
 800c65e:	b29a      	uxth	r2, r3
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	461a      	mov	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4413      	add	r3, r2
 800c66e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c670:	68fb      	ldr	r3, [r7, #12]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c67e:	b480      	push	{r7}
 800c680:	b087      	sub	sp, #28
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	3301      	adds	r3, #1
 800c694:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c69c:	8a3b      	ldrh	r3, [r7, #16]
 800c69e:	021b      	lsls	r3, r3, #8
 800c6a0:	b21a      	sxth	r2, r3
 800c6a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	b21b      	sxth	r3, r3
 800c6aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c6ac:	89fb      	ldrh	r3, [r7, #14]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	371c      	adds	r7, #28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
	...

0800c6bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c6d2:	2b40      	cmp	r3, #64	@ 0x40
 800c6d4:	d005      	beq.n	800c6e2 <USBD_StdDevReq+0x26>
 800c6d6:	2b40      	cmp	r3, #64	@ 0x40
 800c6d8:	d857      	bhi.n	800c78a <USBD_StdDevReq+0xce>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00f      	beq.n	800c6fe <USBD_StdDevReq+0x42>
 800c6de:	2b20      	cmp	r3, #32
 800c6e0:	d153      	bne.n	800c78a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	32ae      	adds	r2, #174	@ 0xae
 800c6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	4798      	blx	r3
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c6fc:	e04a      	b.n	800c794 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	785b      	ldrb	r3, [r3, #1]
 800c702:	2b09      	cmp	r3, #9
 800c704:	d83b      	bhi.n	800c77e <USBD_StdDevReq+0xc2>
 800c706:	a201      	add	r2, pc, #4	@ (adr r2, 800c70c <USBD_StdDevReq+0x50>)
 800c708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c70c:	0800c761 	.word	0x0800c761
 800c710:	0800c775 	.word	0x0800c775
 800c714:	0800c77f 	.word	0x0800c77f
 800c718:	0800c76b 	.word	0x0800c76b
 800c71c:	0800c77f 	.word	0x0800c77f
 800c720:	0800c73f 	.word	0x0800c73f
 800c724:	0800c735 	.word	0x0800c735
 800c728:	0800c77f 	.word	0x0800c77f
 800c72c:	0800c757 	.word	0x0800c757
 800c730:	0800c749 	.word	0x0800c749
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fa3c 	bl	800cbb4 <USBD_GetDescriptor>
          break;
 800c73c:	e024      	b.n	800c788 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fba1 	bl	800ce88 <USBD_SetAddress>
          break;
 800c746:	e01f      	b.n	800c788 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fbe0 	bl	800cf10 <USBD_SetConfig>
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]
          break;
 800c754:	e018      	b.n	800c788 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fc83 	bl	800d064 <USBD_GetConfig>
          break;
 800c75e:	e013      	b.n	800c788 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 fcb4 	bl	800d0d0 <USBD_GetStatus>
          break;
 800c768:	e00e      	b.n	800c788 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fce3 	bl	800d138 <USBD_SetFeature>
          break;
 800c772:	e009      	b.n	800c788 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fd07 	bl	800d18a <USBD_ClrFeature>
          break;
 800c77c:	e004      	b.n	800c788 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fd5e 	bl	800d242 <USBD_CtlError>
          break;
 800c786:	bf00      	nop
      }
      break;
 800c788:	e004      	b.n	800c794 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 fd58 	bl	800d242 <USBD_CtlError>
      break;
 800c792:	bf00      	nop
  }

  return ret;
 800c794:	7bfb      	ldrb	r3, [r7, #15]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop

0800c7a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c7b6:	2b40      	cmp	r3, #64	@ 0x40
 800c7b8:	d005      	beq.n	800c7c6 <USBD_StdItfReq+0x26>
 800c7ba:	2b40      	cmp	r3, #64	@ 0x40
 800c7bc:	d852      	bhi.n	800c864 <USBD_StdItfReq+0xc4>
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d001      	beq.n	800c7c6 <USBD_StdItfReq+0x26>
 800c7c2:	2b20      	cmp	r3, #32
 800c7c4:	d14e      	bne.n	800c864 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d840      	bhi.n	800c856 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	889b      	ldrh	r3, [r3, #4]
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d836      	bhi.n	800c84c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	889b      	ldrh	r3, [r3, #4]
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7ff fedb 	bl	800c5a2 <USBD_CoreFindIF>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	2bff      	cmp	r3, #255	@ 0xff
 800c7f4:	d01d      	beq.n	800c832 <USBD_StdItfReq+0x92>
 800c7f6:	7bbb      	ldrb	r3, [r7, #14]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d11a      	bne.n	800c832 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c7fc:	7bba      	ldrb	r2, [r7, #14]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	32ae      	adds	r2, #174	@ 0xae
 800c802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00f      	beq.n	800c82c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c80c:	7bba      	ldrb	r2, [r7, #14]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c814:	7bba      	ldrb	r2, [r7, #14]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	32ae      	adds	r2, #174	@ 0xae
 800c81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	6839      	ldr	r1, [r7, #0]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	4798      	blx	r3
 800c826:	4603      	mov	r3, r0
 800c828:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c82a:	e004      	b.n	800c836 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c82c:	2303      	movs	r3, #3
 800c82e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c830:	e001      	b.n	800c836 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c832:	2303      	movs	r3, #3
 800c834:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	88db      	ldrh	r3, [r3, #6]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d110      	bne.n	800c860 <USBD_StdItfReq+0xc0>
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d10d      	bne.n	800c860 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fdc7 	bl	800d3d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c84a:	e009      	b.n	800c860 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fcf7 	bl	800d242 <USBD_CtlError>
          break;
 800c854:	e004      	b.n	800c860 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fcf2 	bl	800d242 <USBD_CtlError>
          break;
 800c85e:	e000      	b.n	800c862 <USBD_StdItfReq+0xc2>
          break;
 800c860:	bf00      	nop
      }
      break;
 800c862:	e004      	b.n	800c86e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c864:	6839      	ldr	r1, [r7, #0]
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fceb 	bl	800d242 <USBD_CtlError>
      break;
 800c86c:	bf00      	nop
  }

  return ret;
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	889b      	ldrh	r3, [r3, #4]
 800c88a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c894:	2b40      	cmp	r3, #64	@ 0x40
 800c896:	d007      	beq.n	800c8a8 <USBD_StdEPReq+0x30>
 800c898:	2b40      	cmp	r3, #64	@ 0x40
 800c89a:	f200 817f 	bhi.w	800cb9c <USBD_StdEPReq+0x324>
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d02a      	beq.n	800c8f8 <USBD_StdEPReq+0x80>
 800c8a2:	2b20      	cmp	r3, #32
 800c8a4:	f040 817a 	bne.w	800cb9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7ff fe85 	bl	800c5bc <USBD_CoreFindEP>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8b6:	7b7b      	ldrb	r3, [r7, #13]
 800c8b8:	2bff      	cmp	r3, #255	@ 0xff
 800c8ba:	f000 8174 	beq.w	800cba6 <USBD_StdEPReq+0x32e>
 800c8be:	7b7b      	ldrb	r3, [r7, #13]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f040 8170 	bne.w	800cba6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c8c6:	7b7a      	ldrb	r2, [r7, #13]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c8ce:	7b7a      	ldrb	r2, [r7, #13]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	32ae      	adds	r2, #174	@ 0xae
 800c8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f000 8163 	beq.w	800cba6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c8e0:	7b7a      	ldrb	r2, [r7, #13]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	32ae      	adds	r2, #174	@ 0xae
 800c8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	4798      	blx	r3
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c8f6:	e156      	b.n	800cba6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	785b      	ldrb	r3, [r3, #1]
 800c8fc:	2b03      	cmp	r3, #3
 800c8fe:	d008      	beq.n	800c912 <USBD_StdEPReq+0x9a>
 800c900:	2b03      	cmp	r3, #3
 800c902:	f300 8145 	bgt.w	800cb90 <USBD_StdEPReq+0x318>
 800c906:	2b00      	cmp	r3, #0
 800c908:	f000 809b 	beq.w	800ca42 <USBD_StdEPReq+0x1ca>
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d03c      	beq.n	800c98a <USBD_StdEPReq+0x112>
 800c910:	e13e      	b.n	800cb90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d002      	beq.n	800c924 <USBD_StdEPReq+0xac>
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d016      	beq.n	800c950 <USBD_StdEPReq+0xd8>
 800c922:	e02c      	b.n	800c97e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c924:	7bbb      	ldrb	r3, [r7, #14]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00d      	beq.n	800c946 <USBD_StdEPReq+0xce>
 800c92a:	7bbb      	ldrb	r3, [r7, #14]
 800c92c:	2b80      	cmp	r3, #128	@ 0x80
 800c92e:	d00a      	beq.n	800c946 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c930:	7bbb      	ldrb	r3, [r7, #14]
 800c932:	4619      	mov	r1, r3
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f003 fdab 	bl	8010490 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c93a:	2180      	movs	r1, #128	@ 0x80
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f003 fda7 	bl	8010490 <USBD_LL_StallEP>
 800c942:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c944:	e020      	b.n	800c988 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 fc7a 	bl	800d242 <USBD_CtlError>
              break;
 800c94e:	e01b      	b.n	800c988 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	885b      	ldrh	r3, [r3, #2]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10e      	bne.n	800c976 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c958:	7bbb      	ldrb	r3, [r7, #14]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00b      	beq.n	800c976 <USBD_StdEPReq+0xfe>
 800c95e:	7bbb      	ldrb	r3, [r7, #14]
 800c960:	2b80      	cmp	r3, #128	@ 0x80
 800c962:	d008      	beq.n	800c976 <USBD_StdEPReq+0xfe>
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	88db      	ldrh	r3, [r3, #6]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d104      	bne.n	800c976 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c96c:	7bbb      	ldrb	r3, [r7, #14]
 800c96e:	4619      	mov	r1, r3
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f003 fd8d 	bl	8010490 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fd2e 	bl	800d3d8 <USBD_CtlSendStatus>

              break;
 800c97c:	e004      	b.n	800c988 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fc5e 	bl	800d242 <USBD_CtlError>
              break;
 800c986:	bf00      	nop
          }
          break;
 800c988:	e107      	b.n	800cb9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c990:	b2db      	uxtb	r3, r3
 800c992:	2b02      	cmp	r3, #2
 800c994:	d002      	beq.n	800c99c <USBD_StdEPReq+0x124>
 800c996:	2b03      	cmp	r3, #3
 800c998:	d016      	beq.n	800c9c8 <USBD_StdEPReq+0x150>
 800c99a:	e04b      	b.n	800ca34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c99c:	7bbb      	ldrb	r3, [r7, #14]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00d      	beq.n	800c9be <USBD_StdEPReq+0x146>
 800c9a2:	7bbb      	ldrb	r3, [r7, #14]
 800c9a4:	2b80      	cmp	r3, #128	@ 0x80
 800c9a6:	d00a      	beq.n	800c9be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9a8:	7bbb      	ldrb	r3, [r7, #14]
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f003 fd6f 	bl	8010490 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9b2:	2180      	movs	r1, #128	@ 0x80
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f003 fd6b 	bl	8010490 <USBD_LL_StallEP>
 800c9ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c9bc:	e040      	b.n	800ca40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fc3e 	bl	800d242 <USBD_CtlError>
              break;
 800c9c6:	e03b      	b.n	800ca40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	885b      	ldrh	r3, [r3, #2]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d136      	bne.n	800ca3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c9d0:	7bbb      	ldrb	r3, [r7, #14]
 800c9d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d004      	beq.n	800c9e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c9da:	7bbb      	ldrb	r3, [r7, #14]
 800c9dc:	4619      	mov	r1, r3
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f003 fd75 	bl	80104ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 fcf7 	bl	800d3d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c9ea:	7bbb      	ldrb	r3, [r7, #14]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7ff fde4 	bl	800c5bc <USBD_CoreFindEP>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9f8:	7b7b      	ldrb	r3, [r7, #13]
 800c9fa:	2bff      	cmp	r3, #255	@ 0xff
 800c9fc:	d01f      	beq.n	800ca3e <USBD_StdEPReq+0x1c6>
 800c9fe:	7b7b      	ldrb	r3, [r7, #13]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d11c      	bne.n	800ca3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ca04:	7b7a      	ldrb	r2, [r7, #13]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ca0c:	7b7a      	ldrb	r2, [r7, #13]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	32ae      	adds	r2, #174	@ 0xae
 800ca12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d010      	beq.n	800ca3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ca1c:	7b7a      	ldrb	r2, [r7, #13]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	32ae      	adds	r2, #174	@ 0xae
 800ca22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	6839      	ldr	r1, [r7, #0]
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	4798      	blx	r3
 800ca2e:	4603      	mov	r3, r0
 800ca30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ca32:	e004      	b.n	800ca3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 fc03 	bl	800d242 <USBD_CtlError>
              break;
 800ca3c:	e000      	b.n	800ca40 <USBD_StdEPReq+0x1c8>
              break;
 800ca3e:	bf00      	nop
          }
          break;
 800ca40:	e0ab      	b.n	800cb9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	d002      	beq.n	800ca54 <USBD_StdEPReq+0x1dc>
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d032      	beq.n	800cab8 <USBD_StdEPReq+0x240>
 800ca52:	e097      	b.n	800cb84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca54:	7bbb      	ldrb	r3, [r7, #14]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d007      	beq.n	800ca6a <USBD_StdEPReq+0x1f2>
 800ca5a:	7bbb      	ldrb	r3, [r7, #14]
 800ca5c:	2b80      	cmp	r3, #128	@ 0x80
 800ca5e:	d004      	beq.n	800ca6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fbed 	bl	800d242 <USBD_CtlError>
                break;
 800ca68:	e091      	b.n	800cb8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	da0b      	bge.n	800ca8a <USBD_StdEPReq+0x212>
 800ca72:	7bbb      	ldrb	r3, [r7, #14]
 800ca74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca78:	4613      	mov	r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	4413      	add	r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	3310      	adds	r3, #16
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	4413      	add	r3, r2
 800ca86:	3304      	adds	r3, #4
 800ca88:	e00b      	b.n	800caa2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca8a:	7bbb      	ldrb	r3, [r7, #14]
 800ca8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca90:	4613      	mov	r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	4413      	add	r3, r2
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	4413      	add	r3, r2
 800caa0:	3304      	adds	r3, #4
 800caa2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2200      	movs	r2, #0
 800caa8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	2202      	movs	r2, #2
 800caae:	4619      	mov	r1, r3
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fc37 	bl	800d324 <USBD_CtlSendData>
              break;
 800cab6:	e06a      	b.n	800cb8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	da11      	bge.n	800cae4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	f003 020f 	and.w	r2, r3, #15
 800cac6:	6879      	ldr	r1, [r7, #4]
 800cac8:	4613      	mov	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	009b      	lsls	r3, r3, #2
 800cad0:	440b      	add	r3, r1
 800cad2:	3324      	adds	r3, #36	@ 0x24
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d117      	bne.n	800cb0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fbb0 	bl	800d242 <USBD_CtlError>
                  break;
 800cae2:	e054      	b.n	800cb8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cae4:	7bbb      	ldrb	r3, [r7, #14]
 800cae6:	f003 020f 	and.w	r2, r3, #15
 800caea:	6879      	ldr	r1, [r7, #4]
 800caec:	4613      	mov	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	4413      	add	r3, r2
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	440b      	add	r3, r1
 800caf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cafa:	881b      	ldrh	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d104      	bne.n	800cb0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cb00:	6839      	ldr	r1, [r7, #0]
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 fb9d 	bl	800d242 <USBD_CtlError>
                  break;
 800cb08:	e041      	b.n	800cb8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	da0b      	bge.n	800cb2a <USBD_StdEPReq+0x2b2>
 800cb12:	7bbb      	ldrb	r3, [r7, #14]
 800cb14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cb18:	4613      	mov	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4413      	add	r3, r2
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	3310      	adds	r3, #16
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	4413      	add	r3, r2
 800cb26:	3304      	adds	r3, #4
 800cb28:	e00b      	b.n	800cb42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb2a:	7bbb      	ldrb	r3, [r7, #14]
 800cb2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb30:	4613      	mov	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	4413      	add	r3, r2
 800cb40:	3304      	adds	r3, #4
 800cb42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cb44:	7bbb      	ldrb	r3, [r7, #14]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d002      	beq.n	800cb50 <USBD_StdEPReq+0x2d8>
 800cb4a:	7bbb      	ldrb	r3, [r7, #14]
 800cb4c:	2b80      	cmp	r3, #128	@ 0x80
 800cb4e:	d103      	bne.n	800cb58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	2200      	movs	r2, #0
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	e00e      	b.n	800cb76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f003 fcd5 	bl	801050c <USBD_LL_IsStallEP>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d003      	beq.n	800cb70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]
 800cb6e:	e002      	b.n	800cb76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	2200      	movs	r2, #0
 800cb74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2202      	movs	r2, #2
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fbd1 	bl	800d324 <USBD_CtlSendData>
              break;
 800cb82:	e004      	b.n	800cb8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 fb5b 	bl	800d242 <USBD_CtlError>
              break;
 800cb8c:	bf00      	nop
          }
          break;
 800cb8e:	e004      	b.n	800cb9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fb55 	bl	800d242 <USBD_CtlError>
          break;
 800cb98:	bf00      	nop
      }
      break;
 800cb9a:	e005      	b.n	800cba8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fb4f 	bl	800d242 <USBD_CtlError>
      break;
 800cba4:	e000      	b.n	800cba8 <USBD_StdEPReq+0x330>
      break;
 800cba6:	bf00      	nop
  }

  return ret;
 800cba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3710      	adds	r7, #16
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	885b      	ldrh	r3, [r3, #2]
 800cbce:	0a1b      	lsrs	r3, r3, #8
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	2b06      	cmp	r3, #6
 800cbd6:	f200 8128 	bhi.w	800ce2a <USBD_GetDescriptor+0x276>
 800cbda:	a201      	add	r2, pc, #4	@ (adr r2, 800cbe0 <USBD_GetDescriptor+0x2c>)
 800cbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe0:	0800cbfd 	.word	0x0800cbfd
 800cbe4:	0800cc15 	.word	0x0800cc15
 800cbe8:	0800cc55 	.word	0x0800cc55
 800cbec:	0800ce2b 	.word	0x0800ce2b
 800cbf0:	0800ce2b 	.word	0x0800ce2b
 800cbf4:	0800cdcb 	.word	0x0800cdcb
 800cbf8:	0800cdf7 	.word	0x0800cdf7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	7c12      	ldrb	r2, [r2, #16]
 800cc08:	f107 0108 	add.w	r1, r7, #8
 800cc0c:	4610      	mov	r0, r2
 800cc0e:	4798      	blx	r3
 800cc10:	60f8      	str	r0, [r7, #12]
      break;
 800cc12:	e112      	b.n	800ce3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	7c1b      	ldrb	r3, [r3, #16]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10d      	bne.n	800cc38 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc24:	f107 0208 	add.w	r2, r7, #8
 800cc28:	4610      	mov	r0, r2
 800cc2a:	4798      	blx	r3
 800cc2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3301      	adds	r3, #1
 800cc32:	2202      	movs	r2, #2
 800cc34:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cc36:	e100      	b.n	800ce3a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc40:	f107 0208 	add.w	r2, r7, #8
 800cc44:	4610      	mov	r0, r2
 800cc46:	4798      	blx	r3
 800cc48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	2202      	movs	r2, #2
 800cc50:	701a      	strb	r2, [r3, #0]
      break;
 800cc52:	e0f2      	b.n	800ce3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	885b      	ldrh	r3, [r3, #2]
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b05      	cmp	r3, #5
 800cc5c:	f200 80ac 	bhi.w	800cdb8 <USBD_GetDescriptor+0x204>
 800cc60:	a201      	add	r2, pc, #4	@ (adr r2, 800cc68 <USBD_GetDescriptor+0xb4>)
 800cc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc66:	bf00      	nop
 800cc68:	0800cc81 	.word	0x0800cc81
 800cc6c:	0800ccb5 	.word	0x0800ccb5
 800cc70:	0800cce9 	.word	0x0800cce9
 800cc74:	0800cd1d 	.word	0x0800cd1d
 800cc78:	0800cd51 	.word	0x0800cd51
 800cc7c:	0800cd85 	.word	0x0800cd85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00b      	beq.n	800cca4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	7c12      	ldrb	r2, [r2, #16]
 800cc98:	f107 0108 	add.w	r1, r7, #8
 800cc9c:	4610      	mov	r0, r2
 800cc9e:	4798      	blx	r3
 800cca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cca2:	e091      	b.n	800cdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 facb 	bl	800d242 <USBD_CtlError>
            err++;
 800ccac:	7afb      	ldrb	r3, [r7, #11]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	72fb      	strb	r3, [r7, #11]
          break;
 800ccb2:	e089      	b.n	800cdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00b      	beq.n	800ccd8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	7c12      	ldrb	r2, [r2, #16]
 800cccc:	f107 0108 	add.w	r1, r7, #8
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	4798      	blx	r3
 800ccd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccd6:	e077      	b.n	800cdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 fab1 	bl	800d242 <USBD_CtlError>
            err++;
 800cce0:	7afb      	ldrb	r3, [r7, #11]
 800cce2:	3301      	adds	r3, #1
 800cce4:	72fb      	strb	r3, [r7, #11]
          break;
 800cce6:	e06f      	b.n	800cdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00b      	beq.n	800cd0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	7c12      	ldrb	r2, [r2, #16]
 800cd00:	f107 0108 	add.w	r1, r7, #8
 800cd04:	4610      	mov	r0, r2
 800cd06:	4798      	blx	r3
 800cd08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd0a:	e05d      	b.n	800cdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd0c:	6839      	ldr	r1, [r7, #0]
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fa97 	bl	800d242 <USBD_CtlError>
            err++;
 800cd14:	7afb      	ldrb	r3, [r7, #11]
 800cd16:	3301      	adds	r3, #1
 800cd18:	72fb      	strb	r3, [r7, #11]
          break;
 800cd1a:	e055      	b.n	800cdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd22:	691b      	ldr	r3, [r3, #16]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d00b      	beq.n	800cd40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd2e:	691b      	ldr	r3, [r3, #16]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	7c12      	ldrb	r2, [r2, #16]
 800cd34:	f107 0108 	add.w	r1, r7, #8
 800cd38:	4610      	mov	r0, r2
 800cd3a:	4798      	blx	r3
 800cd3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd3e:	e043      	b.n	800cdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fa7d 	bl	800d242 <USBD_CtlError>
            err++;
 800cd48:	7afb      	ldrb	r3, [r7, #11]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd4e:	e03b      	b.n	800cdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd56:	695b      	ldr	r3, [r3, #20]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00b      	beq.n	800cd74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd62:	695b      	ldr	r3, [r3, #20]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	7c12      	ldrb	r2, [r2, #16]
 800cd68:	f107 0108 	add.w	r1, r7, #8
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4798      	blx	r3
 800cd70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd72:	e029      	b.n	800cdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd74:	6839      	ldr	r1, [r7, #0]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 fa63 	bl	800d242 <USBD_CtlError>
            err++;
 800cd7c:	7afb      	ldrb	r3, [r7, #11]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	72fb      	strb	r3, [r7, #11]
          break;
 800cd82:	e021      	b.n	800cdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd8a:	699b      	ldr	r3, [r3, #24]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00b      	beq.n	800cda8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd96:	699b      	ldr	r3, [r3, #24]
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	7c12      	ldrb	r2, [r2, #16]
 800cd9c:	f107 0108 	add.w	r1, r7, #8
 800cda0:	4610      	mov	r0, r2
 800cda2:	4798      	blx	r3
 800cda4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cda6:	e00f      	b.n	800cdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fa49 	bl	800d242 <USBD_CtlError>
            err++;
 800cdb0:	7afb      	ldrb	r3, [r7, #11]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	72fb      	strb	r3, [r7, #11]
          break;
 800cdb6:	e007      	b.n	800cdc8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cdb8:	6839      	ldr	r1, [r7, #0]
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fa41 	bl	800d242 <USBD_CtlError>
          err++;
 800cdc0:	7afb      	ldrb	r3, [r7, #11]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cdc6:	bf00      	nop
      }
      break;
 800cdc8:	e037      	b.n	800ce3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	7c1b      	ldrb	r3, [r3, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d109      	bne.n	800cde6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdda:	f107 0208 	add.w	r2, r7, #8
 800cdde:	4610      	mov	r0, r2
 800cde0:	4798      	blx	r3
 800cde2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cde4:	e029      	b.n	800ce3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cde6:	6839      	ldr	r1, [r7, #0]
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 fa2a 	bl	800d242 <USBD_CtlError>
        err++;
 800cdee:	7afb      	ldrb	r3, [r7, #11]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	72fb      	strb	r3, [r7, #11]
      break;
 800cdf4:	e021      	b.n	800ce3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	7c1b      	ldrb	r3, [r3, #16]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d10d      	bne.n	800ce1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce06:	f107 0208 	add.w	r2, r7, #8
 800ce0a:	4610      	mov	r0, r2
 800ce0c:	4798      	blx	r3
 800ce0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	3301      	adds	r3, #1
 800ce14:	2207      	movs	r2, #7
 800ce16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce18:	e00f      	b.n	800ce3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fa10 	bl	800d242 <USBD_CtlError>
        err++;
 800ce22:	7afb      	ldrb	r3, [r7, #11]
 800ce24:	3301      	adds	r3, #1
 800ce26:	72fb      	strb	r3, [r7, #11]
      break;
 800ce28:	e007      	b.n	800ce3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ce2a:	6839      	ldr	r1, [r7, #0]
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fa08 	bl	800d242 <USBD_CtlError>
      err++;
 800ce32:	7afb      	ldrb	r3, [r7, #11]
 800ce34:	3301      	adds	r3, #1
 800ce36:	72fb      	strb	r3, [r7, #11]
      break;
 800ce38:	bf00      	nop
  }

  if (err != 0U)
 800ce3a:	7afb      	ldrb	r3, [r7, #11]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d11e      	bne.n	800ce7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	88db      	ldrh	r3, [r3, #6]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d016      	beq.n	800ce76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ce48:	893b      	ldrh	r3, [r7, #8]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00e      	beq.n	800ce6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	88da      	ldrh	r2, [r3, #6]
 800ce52:	893b      	ldrh	r3, [r7, #8]
 800ce54:	4293      	cmp	r3, r2
 800ce56:	bf28      	it	cs
 800ce58:	4613      	movcs	r3, r2
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce5e:	893b      	ldrh	r3, [r7, #8]
 800ce60:	461a      	mov	r2, r3
 800ce62:	68f9      	ldr	r1, [r7, #12]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 fa5d 	bl	800d324 <USBD_CtlSendData>
 800ce6a:	e009      	b.n	800ce80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce6c:	6839      	ldr	r1, [r7, #0]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f9e7 	bl	800d242 <USBD_CtlError>
 800ce74:	e004      	b.n	800ce80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 faae 	bl	800d3d8 <USBD_CtlSendStatus>
 800ce7c:	e000      	b.n	800ce80 <USBD_GetDescriptor+0x2cc>
    return;
 800ce7e:	bf00      	nop
  }
}
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop

0800ce88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	889b      	ldrh	r3, [r3, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d131      	bne.n	800cefe <USBD_SetAddress+0x76>
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	88db      	ldrh	r3, [r3, #6]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d12d      	bne.n	800cefe <USBD_SetAddress+0x76>
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	885b      	ldrh	r3, [r3, #2]
 800cea6:	2b7f      	cmp	r3, #127	@ 0x7f
 800cea8:	d829      	bhi.n	800cefe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	885b      	ldrh	r3, [r3, #2]
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ceb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d104      	bne.n	800cecc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cec2:	6839      	ldr	r1, [r7, #0]
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 f9bc 	bl	800d242 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceca:	e01d      	b.n	800cf08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	7bfa      	ldrb	r2, [r7, #15]
 800ced0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
 800ced6:	4619      	mov	r1, r3
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f003 fb43 	bl	8010564 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fa7a 	bl	800d3d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cee4:	7bfb      	ldrb	r3, [r7, #15]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d004      	beq.n	800cef4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2202      	movs	r2, #2
 800ceee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cef2:	e009      	b.n	800cf08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cefc:	e004      	b.n	800cf08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f99e 	bl	800d242 <USBD_CtlError>
  }
}
 800cf06:	bf00      	nop
 800cf08:	bf00      	nop
 800cf0a:	3710      	adds	r7, #16
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	885b      	ldrh	r3, [r3, #2]
 800cf22:	b2da      	uxtb	r2, r3
 800cf24:	4b4e      	ldr	r3, [pc, #312]	@ (800d060 <USBD_SetConfig+0x150>)
 800cf26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cf28:	4b4d      	ldr	r3, [pc, #308]	@ (800d060 <USBD_SetConfig+0x150>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d905      	bls.n	800cf3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 f985 	bl	800d242 <USBD_CtlError>
    return USBD_FAIL;
 800cf38:	2303      	movs	r3, #3
 800cf3a:	e08c      	b.n	800d056 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b02      	cmp	r3, #2
 800cf46:	d002      	beq.n	800cf4e <USBD_SetConfig+0x3e>
 800cf48:	2b03      	cmp	r3, #3
 800cf4a:	d029      	beq.n	800cfa0 <USBD_SetConfig+0x90>
 800cf4c:	e075      	b.n	800d03a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf4e:	4b44      	ldr	r3, [pc, #272]	@ (800d060 <USBD_SetConfig+0x150>)
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d020      	beq.n	800cf98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cf56:	4b42      	ldr	r3, [pc, #264]	@ (800d060 <USBD_SetConfig+0x150>)
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf60:	4b3f      	ldr	r3, [pc, #252]	@ (800d060 <USBD_SetConfig+0x150>)
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7fe ffe9 	bl	800bf3e <USBD_SetClassConfig>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf70:	7bfb      	ldrb	r3, [r7, #15]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d008      	beq.n	800cf88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cf76:	6839      	ldr	r1, [r7, #0]
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 f962 	bl	800d242 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2202      	movs	r2, #2
 800cf82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf86:	e065      	b.n	800d054 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fa25 	bl	800d3d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2203      	movs	r2, #3
 800cf92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cf96:	e05d      	b.n	800d054 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 fa1d 	bl	800d3d8 <USBD_CtlSendStatus>
      break;
 800cf9e:	e059      	b.n	800d054 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cfa0:	4b2f      	ldr	r3, [pc, #188]	@ (800d060 <USBD_SetConfig+0x150>)
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d112      	bne.n	800cfce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2202      	movs	r2, #2
 800cfac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cfb0:	4b2b      	ldr	r3, [pc, #172]	@ (800d060 <USBD_SetConfig+0x150>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cfba:	4b29      	ldr	r3, [pc, #164]	@ (800d060 <USBD_SetConfig+0x150>)
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f7fe ffd8 	bl	800bf76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fa06 	bl	800d3d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cfcc:	e042      	b.n	800d054 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cfce:	4b24      	ldr	r3, [pc, #144]	@ (800d060 <USBD_SetConfig+0x150>)
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d02a      	beq.n	800d032 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7fe ffc6 	bl	800bf76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cfea:	4b1d      	ldr	r3, [pc, #116]	@ (800d060 <USBD_SetConfig+0x150>)
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cff4:	4b1a      	ldr	r3, [pc, #104]	@ (800d060 <USBD_SetConfig+0x150>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7fe ff9f 	bl	800bf3e <USBD_SetClassConfig>
 800d000:	4603      	mov	r3, r0
 800d002:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d004:	7bfb      	ldrb	r3, [r7, #15]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00f      	beq.n	800d02a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 f918 	bl	800d242 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	b2db      	uxtb	r3, r3
 800d018:	4619      	mov	r1, r3
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7fe ffab 	bl	800bf76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2202      	movs	r2, #2
 800d024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d028:	e014      	b.n	800d054 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f9d4 	bl	800d3d8 <USBD_CtlSendStatus>
      break;
 800d030:	e010      	b.n	800d054 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 f9d0 	bl	800d3d8 <USBD_CtlSendStatus>
      break;
 800d038:	e00c      	b.n	800d054 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d03a:	6839      	ldr	r1, [r7, #0]
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f900 	bl	800d242 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d042:	4b07      	ldr	r3, [pc, #28]	@ (800d060 <USBD_SetConfig+0x150>)
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	4619      	mov	r1, r3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7fe ff94 	bl	800bf76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d04e:	2303      	movs	r3, #3
 800d050:	73fb      	strb	r3, [r7, #15]
      break;
 800d052:	bf00      	nop
  }

  return ret;
 800d054:	7bfb      	ldrb	r3, [r7, #15]
}
 800d056:	4618      	mov	r0, r3
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	20000c34 	.word	0x20000c34

0800d064 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	88db      	ldrh	r3, [r3, #6]
 800d072:	2b01      	cmp	r3, #1
 800d074:	d004      	beq.n	800d080 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d076:	6839      	ldr	r1, [r7, #0]
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 f8e2 	bl	800d242 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d07e:	e023      	b.n	800d0c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b02      	cmp	r3, #2
 800d08a:	dc02      	bgt.n	800d092 <USBD_GetConfig+0x2e>
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	dc03      	bgt.n	800d098 <USBD_GetConfig+0x34>
 800d090:	e015      	b.n	800d0be <USBD_GetConfig+0x5a>
 800d092:	2b03      	cmp	r3, #3
 800d094:	d00b      	beq.n	800d0ae <USBD_GetConfig+0x4a>
 800d096:	e012      	b.n	800d0be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	3308      	adds	r3, #8
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 f93c 	bl	800d324 <USBD_CtlSendData>
        break;
 800d0ac:	e00c      	b.n	800d0c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f934 	bl	800d324 <USBD_CtlSendData>
        break;
 800d0bc:	e004      	b.n	800d0c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d0be:	6839      	ldr	r1, [r7, #0]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f8be 	bl	800d242 <USBD_CtlError>
        break;
 800d0c6:	bf00      	nop
}
 800d0c8:	bf00      	nop
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	2b02      	cmp	r3, #2
 800d0e6:	d81e      	bhi.n	800d126 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	88db      	ldrh	r3, [r3, #6]
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d004      	beq.n	800d0fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f8a5 	bl	800d242 <USBD_CtlError>
        break;
 800d0f8:	e01a      	b.n	800d130 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d106:	2b00      	cmp	r3, #0
 800d108:	d005      	beq.n	800d116 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	f043 0202 	orr.w	r2, r3, #2
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	330c      	adds	r3, #12
 800d11a:	2202      	movs	r2, #2
 800d11c:	4619      	mov	r1, r3
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f900 	bl	800d324 <USBD_CtlSendData>
      break;
 800d124:	e004      	b.n	800d130 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d126:	6839      	ldr	r1, [r7, #0]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f88a 	bl	800d242 <USBD_CtlError>
      break;
 800d12e:	bf00      	nop
  }
}
 800d130:	bf00      	nop
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	885b      	ldrh	r3, [r3, #2]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d107      	bne.n	800d15a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2201      	movs	r2, #1
 800d14e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 f940 	bl	800d3d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d158:	e013      	b.n	800d182 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	885b      	ldrh	r3, [r3, #2]
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d10b      	bne.n	800d17a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	889b      	ldrh	r3, [r3, #4]
 800d166:	0a1b      	lsrs	r3, r3, #8
 800d168:	b29b      	uxth	r3, r3
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f930 	bl	800d3d8 <USBD_CtlSendStatus>
}
 800d178:	e003      	b.n	800d182 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f860 	bl	800d242 <USBD_CtlError>
}
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b082      	sub	sp, #8
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	3b01      	subs	r3, #1
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d80b      	bhi.n	800d1ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	885b      	ldrh	r3, [r3, #2]
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d10c      	bne.n	800d1c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 f910 	bl	800d3d8 <USBD_CtlSendStatus>
      }
      break;
 800d1b8:	e004      	b.n	800d1c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 f840 	bl	800d242 <USBD_CtlError>
      break;
 800d1c2:	e000      	b.n	800d1c6 <USBD_ClrFeature+0x3c>
      break;
 800d1c4:	bf00      	nop
  }
}
 800d1c6:	bf00      	nop
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	781a      	ldrb	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	781a      	ldrb	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f7ff fa40 	bl	800c67e <SWAPBYTE>
 800d1fe:	4603      	mov	r3, r0
 800d200:	461a      	mov	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	3301      	adds	r3, #1
 800d20a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	3301      	adds	r3, #1
 800d210:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f7ff fa33 	bl	800c67e <SWAPBYTE>
 800d218:	4603      	mov	r3, r0
 800d21a:	461a      	mov	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	3301      	adds	r3, #1
 800d224:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	3301      	adds	r3, #1
 800d22a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f7ff fa26 	bl	800c67e <SWAPBYTE>
 800d232:	4603      	mov	r3, r0
 800d234:	461a      	mov	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	80da      	strh	r2, [r3, #6]
}
 800d23a:	bf00      	nop
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b082      	sub	sp, #8
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
 800d24a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d24c:	2180      	movs	r1, #128	@ 0x80
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f003 f91e 	bl	8010490 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d254:	2100      	movs	r1, #0
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f003 f91a 	bl	8010490 <USBD_LL_StallEP>
}
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d270:	2300      	movs	r3, #0
 800d272:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d036      	beq.n	800d2e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d27e:	6938      	ldr	r0, [r7, #16]
 800d280:	f000 f836 	bl	800d2f0 <USBD_GetLen>
 800d284:	4603      	mov	r3, r0
 800d286:	3301      	adds	r3, #1
 800d288:	b29b      	uxth	r3, r3
 800d28a:	005b      	lsls	r3, r3, #1
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d292:	7dfb      	ldrb	r3, [r7, #23]
 800d294:	68ba      	ldr	r2, [r7, #8]
 800d296:	4413      	add	r3, r2
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	7812      	ldrb	r2, [r2, #0]
 800d29c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d29e:	7dfb      	ldrb	r3, [r7, #23]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d2a4:	7dfb      	ldrb	r3, [r7, #23]
 800d2a6:	68ba      	ldr	r2, [r7, #8]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	2203      	movs	r2, #3
 800d2ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800d2ae:	7dfb      	ldrb	r3, [r7, #23]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d2b4:	e013      	b.n	800d2de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d2b6:	7dfb      	ldrb	r3, [r7, #23]
 800d2b8:	68ba      	ldr	r2, [r7, #8]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	693a      	ldr	r2, [r7, #16]
 800d2be:	7812      	ldrb	r2, [r2, #0]
 800d2c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	613b      	str	r3, [r7, #16]
    idx++;
 800d2c8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	701a      	strb	r2, [r3, #0]
    idx++;
 800d2d8:	7dfb      	ldrb	r3, [r7, #23]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1e7      	bne.n	800d2b6 <USBD_GetString+0x52>
 800d2e6:	e000      	b.n	800d2ea <USBD_GetString+0x86>
    return;
 800d2e8:	bf00      	nop
  }
}
 800d2ea:	3718      	adds	r7, #24
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d300:	e005      	b.n	800d30e <USBD_GetLen+0x1e>
  {
    len++;
 800d302:	7bfb      	ldrb	r3, [r7, #15]
 800d304:	3301      	adds	r3, #1
 800d306:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	3301      	adds	r3, #1
 800d30c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1f5      	bne.n	800d302 <USBD_GetLen+0x12>
  }

  return len;
 800d316:	7bfb      	ldrb	r3, [r7, #15]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3714      	adds	r7, #20
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2202      	movs	r2, #2
 800d334:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	2100      	movs	r1, #0
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f003 f929 	bl	80105a2 <USBD_LL_Transmit>

  return USBD_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b084      	sub	sp, #16
 800d35e:	af00      	add	r7, sp, #0
 800d360:	60f8      	str	r0, [r7, #12]
 800d362:	60b9      	str	r1, [r7, #8]
 800d364:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	2100      	movs	r1, #0
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f003 f918 	bl	80105a2 <USBD_LL_Transmit>

  return USBD_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2203      	movs	r2, #3
 800d38c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f003 f91c 	bl	80105e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b084      	sub	sp, #16
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	60f8      	str	r0, [r7, #12]
 800d3be:	60b9      	str	r1, [r7, #8]
 800d3c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f003 f90b 	bl	80105e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3ce:	2300      	movs	r3, #0
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2204      	movs	r2, #4
 800d3e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f003 f8d7 	bl	80105a2 <USBD_LL_Transmit>

  return USBD_OK;
 800d3f4:	2300      	movs	r3, #0
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b082      	sub	sp, #8
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2205      	movs	r2, #5
 800d40a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d40e:	2300      	movs	r3, #0
 800d410:	2200      	movs	r2, #0
 800d412:	2100      	movs	r1, #0
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f003 f8e5 	bl	80105e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d41a:	2300      	movs	r3, #0
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d424:	b480      	push	{r7}
 800d426:	b085      	sub	sp, #20
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4603      	mov	r3, r0
 800d42c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d42e:	2300      	movs	r3, #0
 800d430:	60fb      	str	r3, [r7, #12]

  if (priority != osPriorityError) {
 800d432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d436:	2b84      	cmp	r3, #132	@ 0x84
 800d438:	d005      	beq.n	800d446 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d43a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	4413      	add	r3, r2
 800d442:	3303      	adds	r3, #3
 800d444:	60fb      	str	r3, [r7, #12]
  }

  return fpriority;
 800d446:	68fb      	ldr	r3, [r7, #12]
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3714      	adds	r7, #20
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d458:	f001 f8ec 	bl	800e634 <vTaskStartScheduler>

  return osOK;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	bd80      	pop	{r7, pc}

0800d462 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d462:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d464:	b089      	sub	sp, #36	@ 0x24
 800d466:	af04      	add	r7, sp, #16
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	695b      	ldr	r3, [r3, #20]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d020      	beq.n	800d4b6 <osThreadCreate+0x54>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	699b      	ldr	r3, [r3, #24]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d01c      	beq.n	800d4b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	685c      	ldr	r4, [r3, #4]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	691e      	ldr	r6, [r3, #16]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d48e:	4618      	mov	r0, r3
 800d490:	f7ff ffc8 	bl	800d424 <makeFreeRtosPriority>
 800d494:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	695b      	ldr	r3, [r3, #20]
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d49e:	9202      	str	r2, [sp, #8]
 800d4a0:	9301      	str	r3, [sp, #4]
 800d4a2:	9100      	str	r1, [sp, #0]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	4632      	mov	r2, r6
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f000 fdd6 	bl	800e05c <xTaskCreateStatic>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	60fb      	str	r3, [r7, #12]
 800d4b4:	e01c      	b.n	800d4f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	685c      	ldr	r4, [r3, #4]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d4c2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff ffaa 	bl	800d424 <makeFreeRtosPriority>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	f107 030c 	add.w	r3, r7, #12
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	9200      	str	r2, [sp, #0]
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	4632      	mov	r2, r6
 800d4de:	4629      	mov	r1, r5
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 fe1b 	bl	800e11c <xTaskCreate>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d001      	beq.n	800d4f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	e000      	b.n	800d4f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }
#endif

  return handle;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3714      	adds	r7, #20
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b084      	sub	sp, #16
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	60fb      	str	r3, [r7, #12]

  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d001      	beq.n	800d510 <osDelay+0x16>
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	e000      	b.n	800d512 <osDelay+0x18>
 800d510:	2301      	movs	r3, #1
 800d512:	4618      	mov	r0, r3
 800d514:	f000 ffc4 	bl	800e4a0 <vTaskDelay>

  return osOK;
 800d518:	2300      	movs	r3, #0
#else
  (void) millisec;

  return osErrorResource;
#endif
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d522:	b480      	push	{r7}
 800d524:	b083      	sub	sp, #12
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f103 0208 	add.w	r2, r3, #8
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d53a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f103 0208 	add.w	r2, r3, #8
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f103 0208 	add.w	r2, r3, #8
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d556:	bf00      	nop
 800d558:	370c      	adds	r7, #12
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr

0800d562 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d562:	b480      	push	{r7}
 800d564:	b083      	sub	sp, #12
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	689a      	ldr	r2, [r3, #8]
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	683a      	ldr	r2, [r7, #0]
 800d5a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	601a      	str	r2, [r3, #0]
}
 800d5b8:	bf00      	nop
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5da:	d103      	bne.n	800d5e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	60fb      	str	r3, [r7, #12]
 800d5e2:	e00c      	b.n	800d5fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	3308      	adds	r3, #8
 800d5e8:	60fb      	str	r3, [r7, #12]
 800d5ea:	e002      	b.n	800d5f2 <vListInsert+0x2e>
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	60fb      	str	r3, [r7, #12]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d2f6      	bcs.n	800d5ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	685a      	ldr	r2, [r3, #4]
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	601a      	str	r2, [r3, #0]
}
 800d62a:	bf00      	nop
 800d62c:	3714      	adds	r7, #20
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr

0800d636 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d636:	b480      	push	{r7}
 800d638:	b085      	sub	sp, #20
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	6892      	ldr	r2, [r2, #8]
 800d64c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	6852      	ldr	r2, [r2, #4]
 800d656:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d103      	bne.n	800d66a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	689a      	ldr	r2, [r3, #8]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	1e5a      	subs	r2, r3, #1
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3714      	adds	r7, #20
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr
	...

0800d68c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10b      	bne.n	800d6b8 <xQueueGenericReset+0x2c>
	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	60bb      	str	r3, [r7, #8]
}
 800d6b2:	bf00      	nop
 800d6b4:	bf00      	nop
 800d6b6:	e7fd      	b.n	800d6b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d6b8:	f002 f9b6 	bl	800fa28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6c4:	68f9      	ldr	r1, [r7, #12]
 800d6c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d6c8:	fb01 f303 	mul.w	r3, r1, r3
 800d6cc:	441a      	add	r2, r3
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	68f9      	ldr	r1, [r7, #12]
 800d6ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d6ee:	fb01 f303 	mul.w	r3, r1, r3
 800d6f2:	441a      	add	r2, r3
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	22ff      	movs	r2, #255	@ 0xff
 800d6fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	22ff      	movs	r2, #255	@ 0xff
 800d704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d114      	bne.n	800d738 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d01a      	beq.n	800d74c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	3310      	adds	r3, #16
 800d71a:	4618      	mov	r0, r3
 800d71c:	f001 fa16 	bl	800eb4c <xTaskRemoveFromEventList>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d012      	beq.n	800d74c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d726:	4b0d      	ldr	r3, [pc, #52]	@ (800d75c <xQueueGenericReset+0xd0>)
 800d728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	e009      	b.n	800d74c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	3310      	adds	r3, #16
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7ff fef0 	bl	800d522 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	3324      	adds	r3, #36	@ 0x24
 800d746:	4618      	mov	r0, r3
 800d748:	f7ff feeb 	bl	800d522 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d74c:	f002 f99e 	bl	800fa8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d750:	2301      	movs	r3, #1
}
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	e000ed04 	.word	0xe000ed04

0800d760 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d760:	b580      	push	{r7, lr}
 800d762:	b08e      	sub	sp, #56	@ 0x38
 800d764:	af02      	add	r7, sp, #8
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]
 800d76c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10b      	bne.n	800d78c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d786:	bf00      	nop
 800d788:	bf00      	nop
 800d78a:	e7fd      	b.n	800d788 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10b      	bne.n	800d7aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d796:	f383 8811 	msr	BASEPRI, r3
 800d79a:	f3bf 8f6f 	isb	sy
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d7a4:	bf00      	nop
 800d7a6:	bf00      	nop
 800d7a8:	e7fd      	b.n	800d7a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d002      	beq.n	800d7b6 <xQueueGenericCreateStatic+0x56>
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <xQueueGenericCreateStatic+0x5a>
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e000      	b.n	800d7bc <xQueueGenericCreateStatic+0x5c>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10b      	bne.n	800d7d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	623b      	str	r3, [r7, #32]
}
 800d7d2:	bf00      	nop
 800d7d4:	bf00      	nop
 800d7d6:	e7fd      	b.n	800d7d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d102      	bne.n	800d7e4 <xQueueGenericCreateStatic+0x84>
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d101      	bne.n	800d7e8 <xQueueGenericCreateStatic+0x88>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e000      	b.n	800d7ea <xQueueGenericCreateStatic+0x8a>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d10b      	bne.n	800d806 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f2:	f383 8811 	msr	BASEPRI, r3
 800d7f6:	f3bf 8f6f 	isb	sy
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	61fb      	str	r3, [r7, #28]
}
 800d800:	bf00      	nop
 800d802:	bf00      	nop
 800d804:	e7fd      	b.n	800d802 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d806:	2348      	movs	r3, #72	@ 0x48
 800d808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	2b48      	cmp	r3, #72	@ 0x48
 800d80e:	d00b      	beq.n	800d828 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d814:	f383 8811 	msr	BASEPRI, r3
 800d818:	f3bf 8f6f 	isb	sy
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	61bb      	str	r3, [r7, #24]
}
 800d822:	bf00      	nop
 800d824:	bf00      	nop
 800d826:	e7fd      	b.n	800d824 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d828:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00d      	beq.n	800d850 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d83c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	4613      	mov	r3, r2
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	68b9      	ldr	r1, [r7, #8]
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f000 f805 	bl	800d85a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d852:	4618      	mov	r0, r3
 800d854:	3730      	adds	r7, #48	@ 0x30
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b084      	sub	sp, #16
 800d85e:	af00      	add	r7, sp, #0
 800d860:	60f8      	str	r0, [r7, #12]
 800d862:	60b9      	str	r1, [r7, #8]
 800d864:	607a      	str	r2, [r7, #4]
 800d866:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d103      	bne.n	800d876 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	69ba      	ldr	r2, [r7, #24]
 800d872:	601a      	str	r2, [r3, #0]
 800d874:	e002      	b.n	800d87c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	68ba      	ldr	r2, [r7, #8]
 800d886:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d888:	2101      	movs	r1, #1
 800d88a:	69b8      	ldr	r0, [r7, #24]
 800d88c:	f7ff fefe 	bl	800d68c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d890:	bf00      	nop
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08e      	sub	sp, #56	@ 0x38
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10b      	bne.n	800d8cc <xQueueGenericSend+0x34>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8c6:	bf00      	nop
 800d8c8:	bf00      	nop
 800d8ca:	e7fd      	b.n	800d8c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d103      	bne.n	800d8da <xQueueGenericSend+0x42>
 800d8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d101      	bne.n	800d8de <xQueueGenericSend+0x46>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e000      	b.n	800d8e0 <xQueueGenericSend+0x48>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10b      	bne.n	800d8fc <xQueueGenericSend+0x64>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8f6:	bf00      	nop
 800d8f8:	bf00      	nop
 800d8fa:	e7fd      	b.n	800d8f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	d103      	bne.n	800d90a <xQueueGenericSend+0x72>
 800d902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d906:	2b01      	cmp	r3, #1
 800d908:	d101      	bne.n	800d90e <xQueueGenericSend+0x76>
 800d90a:	2301      	movs	r3, #1
 800d90c:	e000      	b.n	800d910 <xQueueGenericSend+0x78>
 800d90e:	2300      	movs	r3, #0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10b      	bne.n	800d92c <xQueueGenericSend+0x94>
	__asm volatile
 800d914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	623b      	str	r3, [r7, #32]
}
 800d926:	bf00      	nop
 800d928:	bf00      	nop
 800d92a:	e7fd      	b.n	800d928 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d92c:	f001 face 	bl	800eecc <xTaskGetSchedulerState>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d102      	bne.n	800d93c <xQueueGenericSend+0xa4>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d101      	bne.n	800d940 <xQueueGenericSend+0xa8>
 800d93c:	2301      	movs	r3, #1
 800d93e:	e000      	b.n	800d942 <xQueueGenericSend+0xaa>
 800d940:	2300      	movs	r3, #0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d10b      	bne.n	800d95e <xQueueGenericSend+0xc6>
	__asm volatile
 800d946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	61fb      	str	r3, [r7, #28]
}
 800d958:	bf00      	nop
 800d95a:	bf00      	nop
 800d95c:	e7fd      	b.n	800d95a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d95e:	f002 f863 	bl	800fa28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d302      	bcc.n	800d974 <xQueueGenericSend+0xdc>
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	2b02      	cmp	r3, #2
 800d972:	d129      	bne.n	800d9c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d974:	683a      	ldr	r2, [r7, #0]
 800d976:	68b9      	ldr	r1, [r7, #8]
 800d978:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d97a:	f000 fa0f 	bl	800dd9c <prvCopyDataToQueue>
 800d97e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d984:	2b00      	cmp	r3, #0
 800d986:	d010      	beq.n	800d9aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98a:	3324      	adds	r3, #36	@ 0x24
 800d98c:	4618      	mov	r0, r3
 800d98e:	f001 f8dd 	bl	800eb4c <xTaskRemoveFromEventList>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d013      	beq.n	800d9c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d998:	4b3f      	ldr	r3, [pc, #252]	@ (800da98 <xQueueGenericSend+0x200>)
 800d99a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	e00a      	b.n	800d9c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d007      	beq.n	800d9c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d9b0:	4b39      	ldr	r3, [pc, #228]	@ (800da98 <xQueueGenericSend+0x200>)
 800d9b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d9c0:	f002 f864 	bl	800fa8c <vPortExitCritical>
				return pdPASS;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e063      	b.n	800da90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d103      	bne.n	800d9d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9ce:	f002 f85d 	bl	800fa8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	e05c      	b.n	800da90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d106      	bne.n	800d9ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9dc:	f107 0314 	add.w	r3, r7, #20
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f001 f917 	bl	800ec14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9ea:	f002 f84f 	bl	800fa8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9ee:	f000 fe89 	bl	800e704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9f2:	f002 f819 	bl	800fa28 <vPortEnterCritical>
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9fc:	b25b      	sxtb	r3, r3
 800d9fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da02:	d103      	bne.n	800da0c <xQueueGenericSend+0x174>
 800da04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da06:	2200      	movs	r2, #0
 800da08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da12:	b25b      	sxtb	r3, r3
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da18:	d103      	bne.n	800da22 <xQueueGenericSend+0x18a>
 800da1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da22:	f002 f833 	bl	800fa8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da26:	1d3a      	adds	r2, r7, #4
 800da28:	f107 0314 	add.w	r3, r7, #20
 800da2c:	4611      	mov	r1, r2
 800da2e:	4618      	mov	r0, r3
 800da30:	f001 f906 	bl	800ec40 <xTaskCheckForTimeOut>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d124      	bne.n	800da84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da3c:	f000 fa98 	bl	800df70 <prvIsQueueFull>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d018      	beq.n	800da78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da48:	3310      	adds	r3, #16
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	4611      	mov	r1, r2
 800da4e:	4618      	mov	r0, r3
 800da50:	f001 f82a 	bl	800eaa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da56:	f000 fa23 	bl	800dea0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da5a:	f000 fe61 	bl	800e720 <xTaskResumeAll>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	f47f af7c 	bne.w	800d95e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800da66:	4b0c      	ldr	r3, [pc, #48]	@ (800da98 <xQueueGenericSend+0x200>)
 800da68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	e772      	b.n	800d95e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da7a:	f000 fa11 	bl	800dea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da7e:	f000 fe4f 	bl	800e720 <xTaskResumeAll>
 800da82:	e76c      	b.n	800d95e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da86:	f000 fa0b 	bl	800dea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da8a:	f000 fe49 	bl	800e720 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da90:	4618      	mov	r0, r3
 800da92:	3738      	adds	r7, #56	@ 0x38
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	e000ed04 	.word	0xe000ed04

0800da9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b090      	sub	sp, #64	@ 0x40
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
 800daa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800daae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d10b      	bne.n	800dacc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dac6:	bf00      	nop
 800dac8:	bf00      	nop
 800daca:	e7fd      	b.n	800dac8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d103      	bne.n	800dada <xQueueGenericSendFromISR+0x3e>
 800dad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <xQueueGenericSendFromISR+0x42>
 800dada:	2301      	movs	r3, #1
 800dadc:	e000      	b.n	800dae0 <xQueueGenericSendFromISR+0x44>
 800dade:	2300      	movs	r3, #0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d10b      	bne.n	800dafc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800dae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae8:	f383 8811 	msr	BASEPRI, r3
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800daf6:	bf00      	nop
 800daf8:	bf00      	nop
 800dafa:	e7fd      	b.n	800daf8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d103      	bne.n	800db0a <xQueueGenericSendFromISR+0x6e>
 800db02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db06:	2b01      	cmp	r3, #1
 800db08:	d101      	bne.n	800db0e <xQueueGenericSendFromISR+0x72>
 800db0a:	2301      	movs	r3, #1
 800db0c:	e000      	b.n	800db10 <xQueueGenericSendFromISR+0x74>
 800db0e:	2300      	movs	r3, #0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10b      	bne.n	800db2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	623b      	str	r3, [r7, #32]
}
 800db26:	bf00      	nop
 800db28:	bf00      	nop
 800db2a:	e7fd      	b.n	800db28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db2c:	f002 f85c 	bl	800fbe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db30:	f3ef 8211 	mrs	r2, BASEPRI
 800db34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	61fa      	str	r2, [r7, #28]
 800db46:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800db48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db54:	429a      	cmp	r2, r3
 800db56:	d302      	bcc.n	800db5e <xQueueGenericSendFromISR+0xc2>
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d12f      	bne.n	800dbbe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	68b9      	ldr	r1, [r7, #8]
 800db72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db74:	f000 f912 	bl	800dd9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800db7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db80:	d112      	bne.n	800dba8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db86:	2b00      	cmp	r3, #0
 800db88:	d016      	beq.n	800dbb8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db8c:	3324      	adds	r3, #36	@ 0x24
 800db8e:	4618      	mov	r0, r3
 800db90:	f000 ffdc 	bl	800eb4c <xTaskRemoveFromEventList>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00e      	beq.n	800dbb8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d00b      	beq.n	800dbb8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2201      	movs	r2, #1
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	e007      	b.n	800dbb8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dba8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dbac:	3301      	adds	r3, #1
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	b25a      	sxtb	r2, r3
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dbbc:	e001      	b.n	800dbc2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbc4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dbcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3740      	adds	r7, #64	@ 0x40
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08c      	sub	sp, #48	@ 0x30
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10b      	bne.n	800dc0a <xQueueReceive+0x32>
	__asm volatile
 800dbf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf6:	f383 8811 	msr	BASEPRI, r3
 800dbfa:	f3bf 8f6f 	isb	sy
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	623b      	str	r3, [r7, #32]
}
 800dc04:	bf00      	nop
 800dc06:	bf00      	nop
 800dc08:	e7fd      	b.n	800dc06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d103      	bne.n	800dc18 <xQueueReceive+0x40>
 800dc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d101      	bne.n	800dc1c <xQueueReceive+0x44>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e000      	b.n	800dc1e <xQueueReceive+0x46>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10b      	bne.n	800dc3a <xQueueReceive+0x62>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	61fb      	str	r3, [r7, #28]
}
 800dc34:	bf00      	nop
 800dc36:	bf00      	nop
 800dc38:	e7fd      	b.n	800dc36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc3a:	f001 f947 	bl	800eecc <xTaskGetSchedulerState>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <xQueueReceive+0x72>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d101      	bne.n	800dc4e <xQueueReceive+0x76>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e000      	b.n	800dc50 <xQueueReceive+0x78>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10b      	bne.n	800dc6c <xQueueReceive+0x94>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	61bb      	str	r3, [r7, #24]
}
 800dc66:	bf00      	nop
 800dc68:	bf00      	nop
 800dc6a:	e7fd      	b.n	800dc68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc6c:	f001 fedc 	bl	800fa28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d01f      	beq.n	800dcbc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc7c:	68b9      	ldr	r1, [r7, #8]
 800dc7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc80:	f000 f8e8 	bl	800de54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc86:	1e5a      	subs	r2, r3, #1
 800dc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00f      	beq.n	800dcb4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc96:	3310      	adds	r3, #16
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 ff57 	bl	800eb4c <xTaskRemoveFromEventList>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d007      	beq.n	800dcb4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dca4:	4b3c      	ldr	r3, [pc, #240]	@ (800dd98 <xQueueReceive+0x1c0>)
 800dca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dcb4:	f001 feea 	bl	800fa8c <vPortExitCritical>
				return pdPASS;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e069      	b.n	800dd90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d103      	bne.n	800dcca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcc2:	f001 fee3 	bl	800fa8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e062      	b.n	800dd90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d106      	bne.n	800dcde <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcd0:	f107 0310 	add.w	r3, r7, #16
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f000 ff9d 	bl	800ec14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcde:	f001 fed5 	bl	800fa8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dce2:	f000 fd0f 	bl	800e704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dce6:	f001 fe9f 	bl	800fa28 <vPortEnterCritical>
 800dcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcf0:	b25b      	sxtb	r3, r3
 800dcf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcf6:	d103      	bne.n	800dd00 <xQueueReceive+0x128>
 800dcf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd06:	b25b      	sxtb	r3, r3
 800dd08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd0c:	d103      	bne.n	800dd16 <xQueueReceive+0x13e>
 800dd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd10:	2200      	movs	r2, #0
 800dd12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd16:	f001 feb9 	bl	800fa8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd1a:	1d3a      	adds	r2, r7, #4
 800dd1c:	f107 0310 	add.w	r3, r7, #16
 800dd20:	4611      	mov	r1, r2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f000 ff8c 	bl	800ec40 <xTaskCheckForTimeOut>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d123      	bne.n	800dd76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd30:	f000 f908 	bl	800df44 <prvIsQueueEmpty>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d017      	beq.n	800dd6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd3c:	3324      	adds	r3, #36	@ 0x24
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	4611      	mov	r1, r2
 800dd42:	4618      	mov	r0, r3
 800dd44:	f000 feb0 	bl	800eaa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd4a:	f000 f8a9 	bl	800dea0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd4e:	f000 fce7 	bl	800e720 <xTaskResumeAll>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d189      	bne.n	800dc6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dd58:	4b0f      	ldr	r3, [pc, #60]	@ (800dd98 <xQueueReceive+0x1c0>)
 800dd5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd5e:	601a      	str	r2, [r3, #0]
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	e780      	b.n	800dc6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd6c:	f000 f898 	bl	800dea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd70:	f000 fcd6 	bl	800e720 <xTaskResumeAll>
 800dd74:	e77a      	b.n	800dc6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd78:	f000 f892 	bl	800dea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd7c:	f000 fcd0 	bl	800e720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd82:	f000 f8df 	bl	800df44 <prvIsQueueEmpty>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f43f af6f 	beq.w	800dc6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3730      	adds	r7, #48	@ 0x30
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	e000ed04 	.word	0xe000ed04

0800dd9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddb0:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d043      	beq.n	800de42 <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d119      	bne.n	800ddf4 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6858      	ldr	r0, [r3, #4]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddc8:	461a      	mov	r2, r3
 800ddca:	68b9      	ldr	r1, [r7, #8]
 800ddcc:	f003 fb5b 	bl	8011486 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	685a      	ldr	r2, [r3, #4]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddd8:	441a      	add	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	685a      	ldr	r2, [r3, #4]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d32b      	bcc.n	800de42 <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	605a      	str	r2, [r3, #4]
 800ddf2:	e026      	b.n	800de42 <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	68d8      	ldr	r0, [r3, #12]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	68b9      	ldr	r1, [r7, #8]
 800de00:	f003 fb41 	bl	8011486 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	68da      	ldr	r2, [r3, #12]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de0c:	425b      	negs	r3, r3
 800de0e:	441a      	add	r2, r3
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d207      	bcs.n	800de30 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	689a      	ldr	r2, [r3, #8]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de28:	425b      	negs	r3, r3
 800de2a:	441a      	add	r2, r3
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b02      	cmp	r3, #2
 800de34:	d105      	bne.n	800de42 <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d002      	beq.n	800de42 <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	3b01      	subs	r3, #1
 800de40:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	1c5a      	adds	r2, r3, #1
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800de4a:	693b      	ldr	r3, [r7, #16]
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3718      	adds	r7, #24
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de62:	2b00      	cmp	r3, #0
 800de64:	d018      	beq.n	800de98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68da      	ldr	r2, [r3, #12]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de6e:	441a      	add	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	68da      	ldr	r2, [r3, #12]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d303      	bcc.n	800de88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	68d9      	ldr	r1, [r3, #12]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de90:	461a      	mov	r2, r3
 800de92:	6838      	ldr	r0, [r7, #0]
 800de94:	f003 faf7 	bl	8011486 <memcpy>
	}
}
 800de98:	bf00      	nop
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dea8:	f001 fdbe 	bl	800fa28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800deb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800deb4:	e011      	b.n	800deda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deba:	2b00      	cmp	r3, #0
 800debc:	d012      	beq.n	800dee4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	3324      	adds	r3, #36	@ 0x24
 800dec2:	4618      	mov	r0, r3
 800dec4:	f000 fe42 	bl	800eb4c <xTaskRemoveFromEventList>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d001      	beq.n	800ded2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dece:	f000 ff1b 	bl	800ed08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
 800ded4:	3b01      	subs	r3, #1
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800deda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	dce9      	bgt.n	800deb6 <prvUnlockQueue+0x16>
 800dee2:	e000      	b.n	800dee6 <prvUnlockQueue+0x46>
					break;
 800dee4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	22ff      	movs	r2, #255	@ 0xff
 800deea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800deee:	f001 fdcd 	bl	800fa8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800def2:	f001 fd99 	bl	800fa28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800defc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800defe:	e011      	b.n	800df24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d012      	beq.n	800df2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	3310      	adds	r3, #16
 800df0c:	4618      	mov	r0, r3
 800df0e:	f000 fe1d 	bl	800eb4c <xTaskRemoveFromEventList>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df18:	f000 fef6 	bl	800ed08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df1c:	7bbb      	ldrb	r3, [r7, #14]
 800df1e:	3b01      	subs	r3, #1
 800df20:	b2db      	uxtb	r3, r3
 800df22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	dce9      	bgt.n	800df00 <prvUnlockQueue+0x60>
 800df2c:	e000      	b.n	800df30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	22ff      	movs	r2, #255	@ 0xff
 800df34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800df38:	f001 fda8 	bl	800fa8c <vPortExitCritical>
}
 800df3c:	bf00      	nop
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df4c:	f001 fd6c 	bl	800fa28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df54:	2b00      	cmp	r3, #0
 800df56:	d102      	bne.n	800df5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df58:	2301      	movs	r3, #1
 800df5a:	60fb      	str	r3, [r7, #12]
 800df5c:	e001      	b.n	800df62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df5e:	2300      	movs	r3, #0
 800df60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df62:	f001 fd93 	bl	800fa8c <vPortExitCritical>

	return xReturn;
 800df66:	68fb      	ldr	r3, [r7, #12]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df78:	f001 fd56 	bl	800fa28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df84:	429a      	cmp	r2, r3
 800df86:	d102      	bne.n	800df8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df88:	2301      	movs	r3, #1
 800df8a:	60fb      	str	r3, [r7, #12]
 800df8c:	e001      	b.n	800df92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df8e:	2300      	movs	r3, #0
 800df90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df92:	f001 fd7b 	bl	800fa8c <vPortExitCritical>

	return xReturn;
 800df96:	68fb      	ldr	r3, [r7, #12]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfaa:	2300      	movs	r3, #0
 800dfac:	60fb      	str	r3, [r7, #12]
 800dfae:	e014      	b.n	800dfda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dfb0:	4a0f      	ldr	r2, [pc, #60]	@ (800dff0 <vQueueAddToRegistry+0x50>)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d10b      	bne.n	800dfd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dfbc:	490c      	ldr	r1, [pc, #48]	@ (800dff0 <vQueueAddToRegistry+0x50>)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dfc6:	4a0a      	ldr	r2, [pc, #40]	@ (800dff0 <vQueueAddToRegistry+0x50>)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	00db      	lsls	r3, r3, #3
 800dfcc:	4413      	add	r3, r2
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dfd2:	e006      	b.n	800dfe2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	60fb      	str	r3, [r7, #12]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2b07      	cmp	r3, #7
 800dfde:	d9e7      	bls.n	800dfb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dfe0:	bf00      	nop
 800dfe2:	bf00      	nop
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	20000c38 	.word	0x20000c38

0800dff4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e004:	f001 fd10 	bl	800fa28 <vPortEnterCritical>
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e00e:	b25b      	sxtb	r3, r3
 800e010:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e014:	d103      	bne.n	800e01e <vQueueWaitForMessageRestricted+0x2a>
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	2200      	movs	r2, #0
 800e01a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e024:	b25b      	sxtb	r3, r3
 800e026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e02a:	d103      	bne.n	800e034 <vQueueWaitForMessageRestricted+0x40>
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	2200      	movs	r2, #0
 800e030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e034:	f001 fd2a 	bl	800fa8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d106      	bne.n	800e04e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	3324      	adds	r3, #36	@ 0x24
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	68b9      	ldr	r1, [r7, #8]
 800e048:	4618      	mov	r0, r3
 800e04a:	f000 fd53 	bl	800eaf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e04e:	6978      	ldr	r0, [r7, #20]
 800e050:	f7ff ff26 	bl	800dea0 <prvUnlockQueue>
	}
 800e054:	bf00      	nop
 800e056:	3718      	adds	r7, #24
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b08e      	sub	sp, #56	@ 0x38
 800e060:	af04      	add	r7, sp, #16
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
 800e068:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d10b      	bne.n	800e088 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e074:	f383 8811 	msr	BASEPRI, r3
 800e078:	f3bf 8f6f 	isb	sy
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	623b      	str	r3, [r7, #32]
}
 800e082:	bf00      	nop
 800e084:	bf00      	nop
 800e086:	e7fd      	b.n	800e084 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10b      	bne.n	800e0a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	61fb      	str	r3, [r7, #28]
}
 800e0a0:	bf00      	nop
 800e0a2:	bf00      	nop
 800e0a4:	e7fd      	b.n	800e0a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e0a6:	235c      	movs	r3, #92	@ 0x5c
 800e0a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800e0ae:	d00b      	beq.n	800e0c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	61bb      	str	r3, [r7, #24]
}
 800e0c2:	bf00      	nop
 800e0c4:	bf00      	nop
 800e0c6:	e7fd      	b.n	800e0c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e0c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d01e      	beq.n	800e10e <xTaskCreateStatic+0xb2>
 800e0d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d01b      	beq.n	800e10e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e2:	2202      	movs	r2, #2
 800e0e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	9303      	str	r3, [sp, #12]
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ee:	9302      	str	r3, [sp, #8]
 800e0f0:	f107 0314 	add.w	r3, r7, #20
 800e0f4:	9301      	str	r3, [sp, #4]
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	68b9      	ldr	r1, [r7, #8]
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f000 f850 	bl	800e1a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e106:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e108:	f000 f8d0 	bl	800e2ac <prvAddNewTaskToReadyList>
 800e10c:	e001      	b.n	800e112 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e112:	697b      	ldr	r3, [r7, #20]
	}
 800e114:	4618      	mov	r0, r3
 800e116:	3728      	adds	r7, #40	@ 0x28
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b08c      	sub	sp, #48	@ 0x30
 800e120:	af04      	add	r7, sp, #16
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	603b      	str	r3, [r7, #0]
 800e128:	4613      	mov	r3, r2
 800e12a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e12c:	88fb      	ldrh	r3, [r7, #6]
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4618      	mov	r0, r3
 800e132:	f001 fd9b 	bl	800fc6c <pvPortMalloc>
 800e136:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00e      	beq.n	800e15c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e13e:	205c      	movs	r0, #92	@ 0x5c
 800e140:	f001 fd94 	bl	800fc6c <pvPortMalloc>
 800e144:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d003      	beq.n	800e154 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	697a      	ldr	r2, [r7, #20]
 800e150:	631a      	str	r2, [r3, #48]	@ 0x30
 800e152:	e005      	b.n	800e160 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e154:	6978      	ldr	r0, [r7, #20]
 800e156:	f001 fd9b 	bl	800fc90 <vPortFree>
 800e15a:	e001      	b.n	800e160 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e15c:	2300      	movs	r3, #0
 800e15e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d017      	beq.n	800e196 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e16e:	88fa      	ldrh	r2, [r7, #6]
 800e170:	2300      	movs	r3, #0
 800e172:	9303      	str	r3, [sp, #12]
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	9302      	str	r3, [sp, #8]
 800e178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e17a:	9301      	str	r3, [sp, #4]
 800e17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e17e:	9300      	str	r3, [sp, #0]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	68b9      	ldr	r1, [r7, #8]
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f000 f80e 	bl	800e1a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e18a:	69f8      	ldr	r0, [r7, #28]
 800e18c:	f000 f88e 	bl	800e2ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e190:	2301      	movs	r3, #1
 800e192:	61bb      	str	r3, [r7, #24]
 800e194:	e002      	b.n	800e19c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e19a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e19c:	69bb      	ldr	r3, [r7, #24]
	}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3720      	adds	r7, #32
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b088      	sub	sp, #32
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	60f8      	str	r0, [r7, #12]
 800e1ae:	60b9      	str	r1, [r7, #8]
 800e1b0:	607a      	str	r2, [r7, #4]
 800e1b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1be:	3b01      	subs	r3, #1
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4413      	add	r3, r2
 800e1c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	f023 0307 	bic.w	r3, r3, #7
 800e1cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	f003 0307 	and.w	r3, r3, #7
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d00b      	beq.n	800e1f0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800e1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	617b      	str	r3, [r7, #20]
}
 800e1ea:	bf00      	nop
 800e1ec:	bf00      	nop
 800e1ee:	e7fd      	b.n	800e1ec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d01f      	beq.n	800e236 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	61fb      	str	r3, [r7, #28]
 800e1fa:	e012      	b.n	800e222 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	4413      	add	r3, r2
 800e202:	7819      	ldrb	r1, [r3, #0]
 800e204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	4413      	add	r3, r2
 800e20a:	3334      	adds	r3, #52	@ 0x34
 800e20c:	460a      	mov	r2, r1
 800e20e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e210:	68ba      	ldr	r2, [r7, #8]
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	4413      	add	r3, r2
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d006      	beq.n	800e22a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	3301      	adds	r3, #1
 800e220:	61fb      	str	r3, [r7, #28]
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	2b1f      	cmp	r3, #31
 800e226:	d9e9      	bls.n	800e1fc <prvInitialiseNewTask+0x56>
 800e228:	e000      	b.n	800e22c <prvInitialiseNewTask+0x86>
			{
				break;
 800e22a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22e:	2200      	movs	r2, #0
 800e230:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800e234:	e003      	b.n	800e23e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e238:	2200      	movs	r2, #0
 800e23a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e240:	2b06      	cmp	r3, #6
 800e242:	d901      	bls.n	800e248 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e244:	2306      	movs	r3, #6
 800e246:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e24c:	62da      	str	r2, [r3, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e250:	3304      	adds	r3, #4
 800e252:	4618      	mov	r0, r3
 800e254:	f7ff f985 	bl	800d562 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25a:	3318      	adds	r3, #24
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7ff f980 	bl	800d562 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e266:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26a:	f1c3 0207 	rsb	r2, r3, #7
 800e26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e270:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e276:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e27a:	2200      	movs	r2, #0
 800e27c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e280:	2200      	movs	r2, #0
 800e282:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	68f9      	ldr	r1, [r7, #12]
 800e28a:	69b8      	ldr	r0, [r7, #24]
 800e28c:	f001 fa9e 	bl	800f7cc <pxPortInitialiseStack>
 800e290:	4602      	mov	r2, r0
 800e292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e294:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d002      	beq.n	800e2a2 <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2a2:	bf00      	nop
 800e2a4:	3720      	adds	r7, #32
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
	...

0800e2ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e2b4:	f001 fbb8 	bl	800fa28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e2b8:	4b2a      	ldr	r3, [pc, #168]	@ (800e364 <prvAddNewTaskToReadyList+0xb8>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	4a29      	ldr	r2, [pc, #164]	@ (800e364 <prvAddNewTaskToReadyList+0xb8>)
 800e2c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e2c2:	4b29      	ldr	r3, [pc, #164]	@ (800e368 <prvAddNewTaskToReadyList+0xbc>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d109      	bne.n	800e2de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e2ca:	4a27      	ldr	r2, [pc, #156]	@ (800e368 <prvAddNewTaskToReadyList+0xbc>)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2d0:	4b24      	ldr	r3, [pc, #144]	@ (800e364 <prvAddNewTaskToReadyList+0xb8>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d110      	bne.n	800e2fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e2d8:	f000 fd3a 	bl	800ed50 <prvInitialiseTaskLists>
 800e2dc:	e00d      	b.n	800e2fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e2de:	4b23      	ldr	r3, [pc, #140]	@ (800e36c <prvAddNewTaskToReadyList+0xc0>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d109      	bne.n	800e2fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e2e6:	4b20      	ldr	r3, [pc, #128]	@ (800e368 <prvAddNewTaskToReadyList+0xbc>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d802      	bhi.n	800e2fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e2f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e368 <prvAddNewTaskToReadyList+0xbc>)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e2fa:	4b1d      	ldr	r3, [pc, #116]	@ (800e370 <prvAddNewTaskToReadyList+0xc4>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	3301      	adds	r3, #1
 800e300:	4a1b      	ldr	r2, [pc, #108]	@ (800e370 <prvAddNewTaskToReadyList+0xc4>)
 800e302:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e308:	2201      	movs	r2, #1
 800e30a:	409a      	lsls	r2, r3
 800e30c:	4b19      	ldr	r3, [pc, #100]	@ (800e374 <prvAddNewTaskToReadyList+0xc8>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4313      	orrs	r3, r2
 800e312:	4a18      	ldr	r2, [pc, #96]	@ (800e374 <prvAddNewTaskToReadyList+0xc8>)
 800e314:	6013      	str	r3, [r2, #0]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e31a:	4613      	mov	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4413      	add	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	4a15      	ldr	r2, [pc, #84]	@ (800e378 <prvAddNewTaskToReadyList+0xcc>)
 800e324:	441a      	add	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	3304      	adds	r3, #4
 800e32a:	4619      	mov	r1, r3
 800e32c:	4610      	mov	r0, r2
 800e32e:	f7ff f925 	bl	800d57c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e332:	f001 fbab 	bl	800fa8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e336:	4b0d      	ldr	r3, [pc, #52]	@ (800e36c <prvAddNewTaskToReadyList+0xc0>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00e      	beq.n	800e35c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e33e:	4b0a      	ldr	r3, [pc, #40]	@ (800e368 <prvAddNewTaskToReadyList+0xbc>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e348:	429a      	cmp	r2, r3
 800e34a:	d207      	bcs.n	800e35c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e34c:	4b0b      	ldr	r3, [pc, #44]	@ (800e37c <prvAddNewTaskToReadyList+0xd0>)
 800e34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e352:	601a      	str	r2, [r3, #0]
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e35c:	bf00      	nop
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}
 800e364:	20000d78 	.word	0x20000d78
 800e368:	20000c78 	.word	0x20000c78
 800e36c:	20000d84 	.word	0x20000d84
 800e370:	20000d94 	.word	0x20000d94
 800e374:	20000d80 	.word	0x20000d80
 800e378:	20000c7c 	.word	0x20000c7c
 800e37c:	e000ed04 	.word	0xe000ed04

0800e380 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e388:	f001 fb4e 	bl	800fa28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d102      	bne.n	800e398 <vTaskDelete+0x18>
 800e392:	4b39      	ldr	r3, [pc, #228]	@ (800e478 <vTaskDelete+0xf8>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	e000      	b.n	800e39a <vTaskDelete+0x1a>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	3304      	adds	r3, #4
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7ff f948 	bl	800d636 <uxListRemove>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d115      	bne.n	800e3d8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b0:	4932      	ldr	r1, [pc, #200]	@ (800e47c <vTaskDelete+0xfc>)
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	4413      	add	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	440b      	add	r3, r1
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d10a      	bne.n	800e3d8 <vTaskDelete+0x58>
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e3cc:	43da      	mvns	r2, r3
 800e3ce:	4b2c      	ldr	r3, [pc, #176]	@ (800e480 <vTaskDelete+0x100>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4013      	ands	r3, r2
 800e3d4:	4a2a      	ldr	r2, [pc, #168]	@ (800e480 <vTaskDelete+0x100>)
 800e3d6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3318      	adds	r3, #24
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7ff f926 	bl	800d636 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e3ea:	4b26      	ldr	r3, [pc, #152]	@ (800e484 <vTaskDelete+0x104>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	4a24      	ldr	r2, [pc, #144]	@ (800e484 <vTaskDelete+0x104>)
 800e3f2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e3f4:	4b20      	ldr	r3, [pc, #128]	@ (800e478 <vTaskDelete+0xf8>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d10b      	bne.n	800e416 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	3304      	adds	r3, #4
 800e402:	4619      	mov	r1, r3
 800e404:	4820      	ldr	r0, [pc, #128]	@ (800e488 <vTaskDelete+0x108>)
 800e406:	f7ff f8b9 	bl	800d57c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e40a:	4b20      	ldr	r3, [pc, #128]	@ (800e48c <vTaskDelete+0x10c>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	3301      	adds	r3, #1
 800e410:	4a1e      	ldr	r2, [pc, #120]	@ (800e48c <vTaskDelete+0x10c>)
 800e412:	6013      	str	r3, [r2, #0]
 800e414:	e009      	b.n	800e42a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e416:	4b1e      	ldr	r3, [pc, #120]	@ (800e490 <vTaskDelete+0x110>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3b01      	subs	r3, #1
 800e41c:	4a1c      	ldr	r2, [pc, #112]	@ (800e490 <vTaskDelete+0x110>)
 800e41e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f000 fd03 	bl	800ee2c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e426:	f000 fd31 	bl	800ee8c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e42a:	f001 fb2f 	bl	800fa8c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e42e:	4b19      	ldr	r3, [pc, #100]	@ (800e494 <vTaskDelete+0x114>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d01c      	beq.n	800e470 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800e436:	4b10      	ldr	r3, [pc, #64]	@ (800e478 <vTaskDelete+0xf8>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	68fa      	ldr	r2, [r7, #12]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d117      	bne.n	800e470 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e440:	4b15      	ldr	r3, [pc, #84]	@ (800e498 <vTaskDelete+0x118>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00b      	beq.n	800e460 <vTaskDelete+0xe0>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	60bb      	str	r3, [r7, #8]
}
 800e45a:	bf00      	nop
 800e45c:	bf00      	nop
 800e45e:	e7fd      	b.n	800e45c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800e460:	4b0e      	ldr	r3, [pc, #56]	@ (800e49c <vTaskDelete+0x11c>)
 800e462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e466:	601a      	str	r2, [r3, #0]
 800e468:	f3bf 8f4f 	dsb	sy
 800e46c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e470:	bf00      	nop
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20000c78 	.word	0x20000c78
 800e47c:	20000c7c 	.word	0x20000c7c
 800e480:	20000d80 	.word	0x20000d80
 800e484:	20000d94 	.word	0x20000d94
 800e488:	20000d4c 	.word	0x20000d4c
 800e48c:	20000d60 	.word	0x20000d60
 800e490:	20000d78 	.word	0x20000d78
 800e494:	20000d84 	.word	0x20000d84
 800e498:	20000da0 	.word	0x20000da0
 800e49c:	e000ed04 	.word	0xe000ed04

0800e4a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d018      	beq.n	800e4e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e4b2:	4b14      	ldr	r3, [pc, #80]	@ (800e504 <vTaskDelay+0x64>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00b      	beq.n	800e4d2 <vTaskDelay+0x32>
	__asm volatile
 800e4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4be:	f383 8811 	msr	BASEPRI, r3
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	60bb      	str	r3, [r7, #8]
}
 800e4cc:	bf00      	nop
 800e4ce:	bf00      	nop
 800e4d0:	e7fd      	b.n	800e4ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e4d2:	f000 f917 	bl	800e704 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e4d6:	2100      	movs	r1, #0
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 fd15 	bl	800ef08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e4de:	f000 f91f 	bl	800e720 <xTaskResumeAll>
 800e4e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d107      	bne.n	800e4fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e4ea:	4b07      	ldr	r3, [pc, #28]	@ (800e508 <vTaskDelay+0x68>)
 800e4ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4f0:	601a      	str	r2, [r3, #0]
 800e4f2:	f3bf 8f4f 	dsb	sy
 800e4f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4fa:	bf00      	nop
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	20000da0 	.word	0x20000da0
 800e508:	e000ed04 	.word	0xe000ed04

0800e50c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e514:	f001 fa88 	bl	800fa28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d102      	bne.n	800e524 <vTaskSuspend+0x18>
 800e51e:	4b3d      	ldr	r3, [pc, #244]	@ (800e614 <vTaskSuspend+0x108>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	e000      	b.n	800e526 <vTaskSuspend+0x1a>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	3304      	adds	r3, #4
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7ff f882 	bl	800d636 <uxListRemove>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d115      	bne.n	800e564 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e53c:	4936      	ldr	r1, [pc, #216]	@ (800e618 <vTaskSuspend+0x10c>)
 800e53e:	4613      	mov	r3, r2
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	4413      	add	r3, r2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	440b      	add	r3, r1
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d10a      	bne.n	800e564 <vTaskSuspend+0x58>
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e552:	2201      	movs	r2, #1
 800e554:	fa02 f303 	lsl.w	r3, r2, r3
 800e558:	43da      	mvns	r2, r3
 800e55a:	4b30      	ldr	r3, [pc, #192]	@ (800e61c <vTaskSuspend+0x110>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4013      	ands	r3, r2
 800e560:	4a2e      	ldr	r2, [pc, #184]	@ (800e61c <vTaskSuspend+0x110>)
 800e562:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d004      	beq.n	800e576 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	3318      	adds	r3, #24
 800e570:	4618      	mov	r0, r3
 800e572:	f7ff f860 	bl	800d636 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	3304      	adds	r3, #4
 800e57a:	4619      	mov	r1, r3
 800e57c:	4828      	ldr	r0, [pc, #160]	@ (800e620 <vTaskSuspend+0x114>)
 800e57e:	f7fe fffd 	bl	800d57c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d103      	bne.n	800e596 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2200      	movs	r2, #0
 800e592:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800e596:	f001 fa79 	bl	800fa8c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800e59a:	4b22      	ldr	r3, [pc, #136]	@ (800e624 <vTaskSuspend+0x118>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d005      	beq.n	800e5ae <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800e5a2:	f001 fa41 	bl	800fa28 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800e5a6:	f000 fc71 	bl	800ee8c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800e5aa:	f001 fa6f 	bl	800fa8c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800e5ae:	4b19      	ldr	r3, [pc, #100]	@ (800e614 <vTaskSuspend+0x108>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d128      	bne.n	800e60a <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800e5b8:	4b1a      	ldr	r3, [pc, #104]	@ (800e624 <vTaskSuspend+0x118>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d018      	beq.n	800e5f2 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800e5c0:	4b19      	ldr	r3, [pc, #100]	@ (800e628 <vTaskSuspend+0x11c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <vTaskSuspend+0xd4>
	__asm volatile
 800e5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5cc:	f383 8811 	msr	BASEPRI, r3
 800e5d0:	f3bf 8f6f 	isb	sy
 800e5d4:	f3bf 8f4f 	dsb	sy
 800e5d8:	60bb      	str	r3, [r7, #8]
}
 800e5da:	bf00      	nop
 800e5dc:	bf00      	nop
 800e5de:	e7fd      	b.n	800e5dc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800e5e0:	4b12      	ldr	r3, [pc, #72]	@ (800e62c <vTaskSuspend+0x120>)
 800e5e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5e6:	601a      	str	r2, [r3, #0]
 800e5e8:	f3bf 8f4f 	dsb	sy
 800e5ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e5f0:	e00b      	b.n	800e60a <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800e5f2:	4b0b      	ldr	r3, [pc, #44]	@ (800e620 <vTaskSuspend+0x114>)
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	4b0e      	ldr	r3, [pc, #56]	@ (800e630 <vTaskSuspend+0x124>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d103      	bne.n	800e606 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800e5fe:	4b05      	ldr	r3, [pc, #20]	@ (800e614 <vTaskSuspend+0x108>)
 800e600:	2200      	movs	r2, #0
 800e602:	601a      	str	r2, [r3, #0]
	}
 800e604:	e001      	b.n	800e60a <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800e606:	f000 f9f3 	bl	800e9f0 <vTaskSwitchContext>
	}
 800e60a:	bf00      	nop
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	20000c78 	.word	0x20000c78
 800e618:	20000c7c 	.word	0x20000c7c
 800e61c:	20000d80 	.word	0x20000d80
 800e620:	20000d64 	.word	0x20000d64
 800e624:	20000d84 	.word	0x20000d84
 800e628:	20000da0 	.word	0x20000da0
 800e62c:	e000ed04 	.word	0xe000ed04
 800e630:	20000d78 	.word	0x20000d78

0800e634 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b08a      	sub	sp, #40	@ 0x28
 800e638:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e63a:	2300      	movs	r3, #0
 800e63c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e63e:	2300      	movs	r3, #0
 800e640:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e642:	463a      	mov	r2, r7
 800e644:	1d39      	adds	r1, r7, #4
 800e646:	f107 0308 	add.w	r3, r7, #8
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7f3 fff6 	bl	800263c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e650:	6839      	ldr	r1, [r7, #0]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	68ba      	ldr	r2, [r7, #8]
 800e656:	9202      	str	r2, [sp, #8]
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	2300      	movs	r3, #0
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	2300      	movs	r3, #0
 800e660:	460a      	mov	r2, r1
 800e662:	4922      	ldr	r1, [pc, #136]	@ (800e6ec <vTaskStartScheduler+0xb8>)
 800e664:	4822      	ldr	r0, [pc, #136]	@ (800e6f0 <vTaskStartScheduler+0xbc>)
 800e666:	f7ff fcf9 	bl	800e05c <xTaskCreateStatic>
 800e66a:	4603      	mov	r3, r0
 800e66c:	4a21      	ldr	r2, [pc, #132]	@ (800e6f4 <vTaskStartScheduler+0xc0>)
 800e66e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e670:	4b20      	ldr	r3, [pc, #128]	@ (800e6f4 <vTaskStartScheduler+0xc0>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d002      	beq.n	800e67e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e678:	2301      	movs	r3, #1
 800e67a:	617b      	str	r3, [r7, #20]
 800e67c:	e001      	b.n	800e682 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e67e:	2300      	movs	r3, #0
 800e680:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	2b01      	cmp	r3, #1
 800e686:	d102      	bne.n	800e68e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e688:	f000 fca4 	bl	800efd4 <xTimerCreateTimerTask>
 800e68c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	2b01      	cmp	r3, #1
 800e692:	d116      	bne.n	800e6c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e698:	f383 8811 	msr	BASEPRI, r3
 800e69c:	f3bf 8f6f 	isb	sy
 800e6a0:	f3bf 8f4f 	dsb	sy
 800e6a4:	613b      	str	r3, [r7, #16]
}
 800e6a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e6a8:	4b13      	ldr	r3, [pc, #76]	@ (800e6f8 <vTaskStartScheduler+0xc4>)
 800e6aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e6ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e6b0:	4b12      	ldr	r3, [pc, #72]	@ (800e6fc <vTaskStartScheduler+0xc8>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e6b6:	4b12      	ldr	r3, [pc, #72]	@ (800e700 <vTaskStartScheduler+0xcc>)
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e6bc:	f001 f910 	bl	800f8e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e6c0:	e00f      	b.n	800e6e2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6c8:	d10b      	bne.n	800e6e2 <vTaskStartScheduler+0xae>
	__asm volatile
 800e6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	60fb      	str	r3, [r7, #12]
}
 800e6dc:	bf00      	nop
 800e6de:	bf00      	nop
 800e6e0:	e7fd      	b.n	800e6de <vTaskStartScheduler+0xaa>
}
 800e6e2:	bf00      	nop
 800e6e4:	3718      	adds	r7, #24
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	08013ddc 	.word	0x08013ddc
 800e6f0:	0800ed21 	.word	0x0800ed21
 800e6f4:	20000d9c 	.word	0x20000d9c
 800e6f8:	20000d98 	.word	0x20000d98
 800e6fc:	20000d84 	.word	0x20000d84
 800e700:	20000d7c 	.word	0x20000d7c

0800e704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e704:	b480      	push	{r7}
 800e706:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e708:	4b04      	ldr	r3, [pc, #16]	@ (800e71c <vTaskSuspendAll+0x18>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	3301      	adds	r3, #1
 800e70e:	4a03      	ldr	r2, [pc, #12]	@ (800e71c <vTaskSuspendAll+0x18>)
 800e710:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e712:	bf00      	nop
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	20000da0 	.word	0x20000da0

0800e720 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e726:	2300      	movs	r3, #0
 800e728:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e72a:	2300      	movs	r3, #0
 800e72c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e72e:	4b42      	ldr	r3, [pc, #264]	@ (800e838 <xTaskResumeAll+0x118>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10b      	bne.n	800e74e <xTaskResumeAll+0x2e>
	__asm volatile
 800e736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e73a:	f383 8811 	msr	BASEPRI, r3
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	603b      	str	r3, [r7, #0]
}
 800e748:	bf00      	nop
 800e74a:	bf00      	nop
 800e74c:	e7fd      	b.n	800e74a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e74e:	f001 f96b 	bl	800fa28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e752:	4b39      	ldr	r3, [pc, #228]	@ (800e838 <xTaskResumeAll+0x118>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	3b01      	subs	r3, #1
 800e758:	4a37      	ldr	r2, [pc, #220]	@ (800e838 <xTaskResumeAll+0x118>)
 800e75a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e75c:	4b36      	ldr	r3, [pc, #216]	@ (800e838 <xTaskResumeAll+0x118>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d161      	bne.n	800e828 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e764:	4b35      	ldr	r3, [pc, #212]	@ (800e83c <xTaskResumeAll+0x11c>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d05d      	beq.n	800e828 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e76c:	e02e      	b.n	800e7cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e76e:	4b34      	ldr	r3, [pc, #208]	@ (800e840 <xTaskResumeAll+0x120>)
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	3318      	adds	r3, #24
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fe ff5b 	bl	800d636 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	3304      	adds	r3, #4
 800e784:	4618      	mov	r0, r3
 800e786:	f7fe ff56 	bl	800d636 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e78e:	2201      	movs	r2, #1
 800e790:	409a      	lsls	r2, r3
 800e792:	4b2c      	ldr	r3, [pc, #176]	@ (800e844 <xTaskResumeAll+0x124>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4313      	orrs	r3, r2
 800e798:	4a2a      	ldr	r2, [pc, #168]	@ (800e844 <xTaskResumeAll+0x124>)
 800e79a:	6013      	str	r3, [r2, #0]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	4a27      	ldr	r2, [pc, #156]	@ (800e848 <xTaskResumeAll+0x128>)
 800e7aa:	441a      	add	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	f7fe fee2 	bl	800d57c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7bc:	4b23      	ldr	r3, [pc, #140]	@ (800e84c <xTaskResumeAll+0x12c>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d302      	bcc.n	800e7cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e7c6:	4b22      	ldr	r3, [pc, #136]	@ (800e850 <xTaskResumeAll+0x130>)
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e7cc:	4b1c      	ldr	r3, [pc, #112]	@ (800e840 <xTaskResumeAll+0x120>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1cc      	bne.n	800e76e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d001      	beq.n	800e7de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e7da:	f000 fb57 	bl	800ee8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e7de:	4b1d      	ldr	r3, [pc, #116]	@ (800e854 <xTaskResumeAll+0x134>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d010      	beq.n	800e80c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e7ea:	f000 f847 	bl	800e87c <xTaskIncrementTick>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d002      	beq.n	800e7fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e7f4:	4b16      	ldr	r3, [pc, #88]	@ (800e850 <xTaskResumeAll+0x130>)
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	3b01      	subs	r3, #1
 800e7fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d1f1      	bne.n	800e7ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e806:	4b13      	ldr	r3, [pc, #76]	@ (800e854 <xTaskResumeAll+0x134>)
 800e808:	2200      	movs	r2, #0
 800e80a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e80c:	4b10      	ldr	r3, [pc, #64]	@ (800e850 <xTaskResumeAll+0x130>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d009      	beq.n	800e828 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e814:	2301      	movs	r3, #1
 800e816:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e818:	4b0f      	ldr	r3, [pc, #60]	@ (800e858 <xTaskResumeAll+0x138>)
 800e81a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e81e:	601a      	str	r2, [r3, #0]
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e828:	f001 f930 	bl	800fa8c <vPortExitCritical>

	return xAlreadyYielded;
 800e82c:	68bb      	ldr	r3, [r7, #8]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20000da0 	.word	0x20000da0
 800e83c:	20000d78 	.word	0x20000d78
 800e840:	20000d38 	.word	0x20000d38
 800e844:	20000d80 	.word	0x20000d80
 800e848:	20000c7c 	.word	0x20000c7c
 800e84c:	20000c78 	.word	0x20000c78
 800e850:	20000d8c 	.word	0x20000d8c
 800e854:	20000d88 	.word	0x20000d88
 800e858:	e000ed04 	.word	0xe000ed04

0800e85c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e862:	4b05      	ldr	r3, [pc, #20]	@ (800e878 <xTaskGetTickCount+0x1c>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e868:	687b      	ldr	r3, [r7, #4]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	370c      	adds	r7, #12
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	20000d7c 	.word	0x20000d7c

0800e87c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b086      	sub	sp, #24
 800e880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e882:	2300      	movs	r3, #0
 800e884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e886:	4b4f      	ldr	r3, [pc, #316]	@ (800e9c4 <xTaskIncrementTick+0x148>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f040 808f 	bne.w	800e9ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e890:	4b4d      	ldr	r3, [pc, #308]	@ (800e9c8 <xTaskIncrementTick+0x14c>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	3301      	adds	r3, #1
 800e896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e898:	4a4b      	ldr	r2, [pc, #300]	@ (800e9c8 <xTaskIncrementTick+0x14c>)
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d121      	bne.n	800e8e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e8a4:	4b49      	ldr	r3, [pc, #292]	@ (800e9cc <xTaskIncrementTick+0x150>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00b      	beq.n	800e8c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	603b      	str	r3, [r7, #0]
}
 800e8c0:	bf00      	nop
 800e8c2:	bf00      	nop
 800e8c4:	e7fd      	b.n	800e8c2 <xTaskIncrementTick+0x46>
 800e8c6:	4b41      	ldr	r3, [pc, #260]	@ (800e9cc <xTaskIncrementTick+0x150>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	60fb      	str	r3, [r7, #12]
 800e8cc:	4b40      	ldr	r3, [pc, #256]	@ (800e9d0 <xTaskIncrementTick+0x154>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a3e      	ldr	r2, [pc, #248]	@ (800e9cc <xTaskIncrementTick+0x150>)
 800e8d2:	6013      	str	r3, [r2, #0]
 800e8d4:	4a3e      	ldr	r2, [pc, #248]	@ (800e9d0 <xTaskIncrementTick+0x154>)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	6013      	str	r3, [r2, #0]
 800e8da:	4b3e      	ldr	r3, [pc, #248]	@ (800e9d4 <xTaskIncrementTick+0x158>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	4a3c      	ldr	r2, [pc, #240]	@ (800e9d4 <xTaskIncrementTick+0x158>)
 800e8e2:	6013      	str	r3, [r2, #0]
 800e8e4:	f000 fad2 	bl	800ee8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e8e8:	4b3b      	ldr	r3, [pc, #236]	@ (800e9d8 <xTaskIncrementTick+0x15c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	693a      	ldr	r2, [r7, #16]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d348      	bcc.n	800e984 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8f2:	4b36      	ldr	r3, [pc, #216]	@ (800e9cc <xTaskIncrementTick+0x150>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d104      	bne.n	800e906 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8fc:	4b36      	ldr	r3, [pc, #216]	@ (800e9d8 <xTaskIncrementTick+0x15c>)
 800e8fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e902:	601a      	str	r2, [r3, #0]
					break;
 800e904:	e03e      	b.n	800e984 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e906:	4b31      	ldr	r3, [pc, #196]	@ (800e9cc <xTaskIncrementTick+0x150>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d203      	bcs.n	800e926 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e91e:	4a2e      	ldr	r2, [pc, #184]	@ (800e9d8 <xTaskIncrementTick+0x15c>)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e924:	e02e      	b.n	800e984 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	3304      	adds	r3, #4
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fe fe83 	bl	800d636 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e934:	2b00      	cmp	r3, #0
 800e936:	d004      	beq.n	800e942 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	3318      	adds	r3, #24
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7fe fe7a 	bl	800d636 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e946:	2201      	movs	r2, #1
 800e948:	409a      	lsls	r2, r3
 800e94a:	4b24      	ldr	r3, [pc, #144]	@ (800e9dc <xTaskIncrementTick+0x160>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4313      	orrs	r3, r2
 800e950:	4a22      	ldr	r2, [pc, #136]	@ (800e9dc <xTaskIncrementTick+0x160>)
 800e952:	6013      	str	r3, [r2, #0]
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e958:	4613      	mov	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	4413      	add	r3, r2
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	4a1f      	ldr	r2, [pc, #124]	@ (800e9e0 <xTaskIncrementTick+0x164>)
 800e962:	441a      	add	r2, r3
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	3304      	adds	r3, #4
 800e968:	4619      	mov	r1, r3
 800e96a:	4610      	mov	r0, r2
 800e96c:	f7fe fe06 	bl	800d57c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e974:	4b1b      	ldr	r3, [pc, #108]	@ (800e9e4 <xTaskIncrementTick+0x168>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d3b9      	bcc.n	800e8f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e97e:	2301      	movs	r3, #1
 800e980:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e982:	e7b6      	b.n	800e8f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e984:	4b17      	ldr	r3, [pc, #92]	@ (800e9e4 <xTaskIncrementTick+0x168>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e98a:	4915      	ldr	r1, [pc, #84]	@ (800e9e0 <xTaskIncrementTick+0x164>)
 800e98c:	4613      	mov	r3, r2
 800e98e:	009b      	lsls	r3, r3, #2
 800e990:	4413      	add	r3, r2
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	440b      	add	r3, r1
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d901      	bls.n	800e9a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e99c:	2301      	movs	r3, #1
 800e99e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e9a0:	4b11      	ldr	r3, [pc, #68]	@ (800e9e8 <xTaskIncrementTick+0x16c>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d007      	beq.n	800e9b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	617b      	str	r3, [r7, #20]
 800e9ac:	e004      	b.n	800e9b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e9ae:	4b0f      	ldr	r3, [pc, #60]	@ (800e9ec <xTaskIncrementTick+0x170>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	4a0d      	ldr	r2, [pc, #52]	@ (800e9ec <xTaskIncrementTick+0x170>)
 800e9b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e9b8:	697b      	ldr	r3, [r7, #20]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3718      	adds	r7, #24
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	20000da0 	.word	0x20000da0
 800e9c8:	20000d7c 	.word	0x20000d7c
 800e9cc:	20000d30 	.word	0x20000d30
 800e9d0:	20000d34 	.word	0x20000d34
 800e9d4:	20000d90 	.word	0x20000d90
 800e9d8:	20000d98 	.word	0x20000d98
 800e9dc:	20000d80 	.word	0x20000d80
 800e9e0:	20000c7c 	.word	0x20000c7c
 800e9e4:	20000c78 	.word	0x20000c78
 800e9e8:	20000d8c 	.word	0x20000d8c
 800e9ec:	20000d88 	.word	0x20000d88

0800e9f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b087      	sub	sp, #28
 800e9f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e9f6:	4b27      	ldr	r3, [pc, #156]	@ (800ea94 <vTaskSwitchContext+0xa4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d003      	beq.n	800ea06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e9fe:	4b26      	ldr	r3, [pc, #152]	@ (800ea98 <vTaskSwitchContext+0xa8>)
 800ea00:	2201      	movs	r2, #1
 800ea02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ea04:	e040      	b.n	800ea88 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ea06:	4b24      	ldr	r3, [pc, #144]	@ (800ea98 <vTaskSwitchContext+0xa8>)
 800ea08:	2200      	movs	r2, #0
 800ea0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea0c:	4b23      	ldr	r3, [pc, #140]	@ (800ea9c <vTaskSwitchContext+0xac>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	fab3 f383 	clz	r3, r3
 800ea18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ea1a:	7afb      	ldrb	r3, [r7, #11]
 800ea1c:	f1c3 031f 	rsb	r3, r3, #31
 800ea20:	617b      	str	r3, [r7, #20]
 800ea22:	491f      	ldr	r1, [pc, #124]	@ (800eaa0 <vTaskSwitchContext+0xb0>)
 800ea24:	697a      	ldr	r2, [r7, #20]
 800ea26:	4613      	mov	r3, r2
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	4413      	add	r3, r2
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	440b      	add	r3, r1
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d10b      	bne.n	800ea4e <vTaskSwitchContext+0x5e>
	__asm volatile
 800ea36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea3a:	f383 8811 	msr	BASEPRI, r3
 800ea3e:	f3bf 8f6f 	isb	sy
 800ea42:	f3bf 8f4f 	dsb	sy
 800ea46:	607b      	str	r3, [r7, #4]
}
 800ea48:	bf00      	nop
 800ea4a:	bf00      	nop
 800ea4c:	e7fd      	b.n	800ea4a <vTaskSwitchContext+0x5a>
 800ea4e:	697a      	ldr	r2, [r7, #20]
 800ea50:	4613      	mov	r3, r2
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	4413      	add	r3, r2
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	4a11      	ldr	r2, [pc, #68]	@ (800eaa0 <vTaskSwitchContext+0xb0>)
 800ea5a:	4413      	add	r3, r2
 800ea5c:	613b      	str	r3, [r7, #16]
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	685a      	ldr	r2, [r3, #4]
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	605a      	str	r2, [r3, #4]
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	3308      	adds	r3, #8
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d104      	bne.n	800ea7e <vTaskSwitchContext+0x8e>
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	685a      	ldr	r2, [r3, #4]
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	605a      	str	r2, [r3, #4]
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	4a07      	ldr	r2, [pc, #28]	@ (800eaa4 <vTaskSwitchContext+0xb4>)
 800ea86:	6013      	str	r3, [r2, #0]
}
 800ea88:	bf00      	nop
 800ea8a:	371c      	adds	r7, #28
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr
 800ea94:	20000da0 	.word	0x20000da0
 800ea98:	20000d8c 	.word	0x20000d8c
 800ea9c:	20000d80 	.word	0x20000d80
 800eaa0:	20000c7c 	.word	0x20000c7c
 800eaa4:	20000c78 	.word	0x20000c78

0800eaa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d10b      	bne.n	800ead0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800eab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eabc:	f383 8811 	msr	BASEPRI, r3
 800eac0:	f3bf 8f6f 	isb	sy
 800eac4:	f3bf 8f4f 	dsb	sy
 800eac8:	60fb      	str	r3, [r7, #12]
}
 800eaca:	bf00      	nop
 800eacc:	bf00      	nop
 800eace:	e7fd      	b.n	800eacc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ead0:	4b07      	ldr	r3, [pc, #28]	@ (800eaf0 <vTaskPlaceOnEventList+0x48>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	3318      	adds	r3, #24
 800ead6:	4619      	mov	r1, r3
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7fe fd73 	bl	800d5c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eade:	2101      	movs	r1, #1
 800eae0:	6838      	ldr	r0, [r7, #0]
 800eae2:	f000 fa11 	bl	800ef08 <prvAddCurrentTaskToDelayedList>
}
 800eae6:	bf00      	nop
 800eae8:	3710      	adds	r7, #16
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	20000c78 	.word	0x20000c78

0800eaf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	60f8      	str	r0, [r7, #12]
 800eafc:	60b9      	str	r1, [r7, #8]
 800eafe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d10b      	bne.n	800eb1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800eb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb0a:	f383 8811 	msr	BASEPRI, r3
 800eb0e:	f3bf 8f6f 	isb	sy
 800eb12:	f3bf 8f4f 	dsb	sy
 800eb16:	617b      	str	r3, [r7, #20]
}
 800eb18:	bf00      	nop
 800eb1a:	bf00      	nop
 800eb1c:	e7fd      	b.n	800eb1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb1e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb48 <vTaskPlaceOnEventListRestricted+0x54>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	3318      	adds	r3, #24
 800eb24:	4619      	mov	r1, r3
 800eb26:	68f8      	ldr	r0, [r7, #12]
 800eb28:	f7fe fd28 	bl	800d57c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d002      	beq.n	800eb38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800eb32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eb38:	6879      	ldr	r1, [r7, #4]
 800eb3a:	68b8      	ldr	r0, [r7, #8]
 800eb3c:	f000 f9e4 	bl	800ef08 <prvAddCurrentTaskToDelayedList>
	}
 800eb40:	bf00      	nop
 800eb42:	3718      	adds	r7, #24
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	20000c78 	.word	0x20000c78

0800eb4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d10b      	bne.n	800eb7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800eb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb66:	f383 8811 	msr	BASEPRI, r3
 800eb6a:	f3bf 8f6f 	isb	sy
 800eb6e:	f3bf 8f4f 	dsb	sy
 800eb72:	60fb      	str	r3, [r7, #12]
}
 800eb74:	bf00      	nop
 800eb76:	bf00      	nop
 800eb78:	e7fd      	b.n	800eb76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	3318      	adds	r3, #24
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fe fd59 	bl	800d636 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb84:	4b1d      	ldr	r3, [pc, #116]	@ (800ebfc <xTaskRemoveFromEventList+0xb0>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d11c      	bne.n	800ebc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	3304      	adds	r3, #4
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fe fd50 	bl	800d636 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	409a      	lsls	r2, r3
 800eb9e:	4b18      	ldr	r3, [pc, #96]	@ (800ec00 <xTaskRemoveFromEventList+0xb4>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	4313      	orrs	r3, r2
 800eba4:	4a16      	ldr	r2, [pc, #88]	@ (800ec00 <xTaskRemoveFromEventList+0xb4>)
 800eba6:	6013      	str	r3, [r2, #0]
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebac:	4613      	mov	r3, r2
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	4413      	add	r3, r2
 800ebb2:	009b      	lsls	r3, r3, #2
 800ebb4:	4a13      	ldr	r2, [pc, #76]	@ (800ec04 <xTaskRemoveFromEventList+0xb8>)
 800ebb6:	441a      	add	r2, r3
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	3304      	adds	r3, #4
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	4610      	mov	r0, r2
 800ebc0:	f7fe fcdc 	bl	800d57c <vListInsertEnd>
 800ebc4:	e005      	b.n	800ebd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	3318      	adds	r3, #24
 800ebca:	4619      	mov	r1, r3
 800ebcc:	480e      	ldr	r0, [pc, #56]	@ (800ec08 <xTaskRemoveFromEventList+0xbc>)
 800ebce:	f7fe fcd5 	bl	800d57c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ec0c <xTaskRemoveFromEventList+0xc0>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d905      	bls.n	800ebec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ebe4:	4b0a      	ldr	r3, [pc, #40]	@ (800ec10 <xTaskRemoveFromEventList+0xc4>)
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	601a      	str	r2, [r3, #0]
 800ebea:	e001      	b.n	800ebf0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ebec:	2300      	movs	r3, #0
 800ebee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ebf0:	697b      	ldr	r3, [r7, #20]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3718      	adds	r7, #24
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	20000da0 	.word	0x20000da0
 800ec00:	20000d80 	.word	0x20000d80
 800ec04:	20000c7c 	.word	0x20000c7c
 800ec08:	20000d38 	.word	0x20000d38
 800ec0c:	20000c78 	.word	0x20000c78
 800ec10:	20000d8c 	.word	0x20000d8c

0800ec14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec1c:	4b06      	ldr	r3, [pc, #24]	@ (800ec38 <vTaskInternalSetTimeOutState+0x24>)
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec24:	4b05      	ldr	r3, [pc, #20]	@ (800ec3c <vTaskInternalSetTimeOutState+0x28>)
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	605a      	str	r2, [r3, #4]
}
 800ec2c:	bf00      	nop
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	20000d90 	.word	0x20000d90
 800ec3c:	20000d7c 	.word	0x20000d7c

0800ec40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d10b      	bne.n	800ec68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ec50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	613b      	str	r3, [r7, #16]
}
 800ec62:	bf00      	nop
 800ec64:	bf00      	nop
 800ec66:	e7fd      	b.n	800ec64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d10b      	bne.n	800ec86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ec6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	60fb      	str	r3, [r7, #12]
}
 800ec80:	bf00      	nop
 800ec82:	bf00      	nop
 800ec84:	e7fd      	b.n	800ec82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ec86:	f000 fecf 	bl	800fa28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ec8a:	4b1d      	ldr	r3, [pc, #116]	@ (800ed00 <xTaskCheckForTimeOut+0xc0>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	69ba      	ldr	r2, [r7, #24]
 800ec96:	1ad3      	subs	r3, r2, r3
 800ec98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eca2:	d102      	bne.n	800ecaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eca4:	2300      	movs	r3, #0
 800eca6:	61fb      	str	r3, [r7, #28]
 800eca8:	e023      	b.n	800ecf2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	4b15      	ldr	r3, [pc, #84]	@ (800ed04 <xTaskCheckForTimeOut+0xc4>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d007      	beq.n	800ecc6 <xTaskCheckForTimeOut+0x86>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	69ba      	ldr	r2, [r7, #24]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d302      	bcc.n	800ecc6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	61fb      	str	r3, [r7, #28]
 800ecc4:	e015      	b.n	800ecf2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	697a      	ldr	r2, [r7, #20]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d20b      	bcs.n	800ece8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	1ad2      	subs	r2, r2, r3
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff ff99 	bl	800ec14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ece2:	2300      	movs	r3, #0
 800ece4:	61fb      	str	r3, [r7, #28]
 800ece6:	e004      	b.n	800ecf2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	2200      	movs	r2, #0
 800ecec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ecf2:	f000 fecb 	bl	800fa8c <vPortExitCritical>

	return xReturn;
 800ecf6:	69fb      	ldr	r3, [r7, #28]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3720      	adds	r7, #32
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	20000d7c 	.word	0x20000d7c
 800ed04:	20000d90 	.word	0x20000d90

0800ed08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ed08:	b480      	push	{r7}
 800ed0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ed0c:	4b03      	ldr	r3, [pc, #12]	@ (800ed1c <vTaskMissedYield+0x14>)
 800ed0e:	2201      	movs	r2, #1
 800ed10:	601a      	str	r2, [r3, #0]
}
 800ed12:	bf00      	nop
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr
 800ed1c:	20000d8c 	.word	0x20000d8c

0800ed20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ed28:	f000 f852 	bl	800edd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ed2c:	4b06      	ldr	r3, [pc, #24]	@ (800ed48 <prvIdleTask+0x28>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d9f9      	bls.n	800ed28 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ed34:	4b05      	ldr	r3, [pc, #20]	@ (800ed4c <prvIdleTask+0x2c>)
 800ed36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed3a:	601a      	str	r2, [r3, #0]
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ed44:	e7f0      	b.n	800ed28 <prvIdleTask+0x8>
 800ed46:	bf00      	nop
 800ed48:	20000c7c 	.word	0x20000c7c
 800ed4c:	e000ed04 	.word	0xe000ed04

0800ed50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed56:	2300      	movs	r3, #0
 800ed58:	607b      	str	r3, [r7, #4]
 800ed5a:	e00c      	b.n	800ed76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	4613      	mov	r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	4413      	add	r3, r2
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	4a12      	ldr	r2, [pc, #72]	@ (800edb0 <prvInitialiseTaskLists+0x60>)
 800ed68:	4413      	add	r3, r2
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fe fbd9 	bl	800d522 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	3301      	adds	r3, #1
 800ed74:	607b      	str	r3, [r7, #4]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2b06      	cmp	r3, #6
 800ed7a:	d9ef      	bls.n	800ed5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ed7c:	480d      	ldr	r0, [pc, #52]	@ (800edb4 <prvInitialiseTaskLists+0x64>)
 800ed7e:	f7fe fbd0 	bl	800d522 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed82:	480d      	ldr	r0, [pc, #52]	@ (800edb8 <prvInitialiseTaskLists+0x68>)
 800ed84:	f7fe fbcd 	bl	800d522 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed88:	480c      	ldr	r0, [pc, #48]	@ (800edbc <prvInitialiseTaskLists+0x6c>)
 800ed8a:	f7fe fbca 	bl	800d522 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed8e:	480c      	ldr	r0, [pc, #48]	@ (800edc0 <prvInitialiseTaskLists+0x70>)
 800ed90:	f7fe fbc7 	bl	800d522 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed94:	480b      	ldr	r0, [pc, #44]	@ (800edc4 <prvInitialiseTaskLists+0x74>)
 800ed96:	f7fe fbc4 	bl	800d522 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed9a:	4b0b      	ldr	r3, [pc, #44]	@ (800edc8 <prvInitialiseTaskLists+0x78>)
 800ed9c:	4a05      	ldr	r2, [pc, #20]	@ (800edb4 <prvInitialiseTaskLists+0x64>)
 800ed9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eda0:	4b0a      	ldr	r3, [pc, #40]	@ (800edcc <prvInitialiseTaskLists+0x7c>)
 800eda2:	4a05      	ldr	r2, [pc, #20]	@ (800edb8 <prvInitialiseTaskLists+0x68>)
 800eda4:	601a      	str	r2, [r3, #0]
}
 800eda6:	bf00      	nop
 800eda8:	3708      	adds	r7, #8
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
 800edae:	bf00      	nop
 800edb0:	20000c7c 	.word	0x20000c7c
 800edb4:	20000d08 	.word	0x20000d08
 800edb8:	20000d1c 	.word	0x20000d1c
 800edbc:	20000d38 	.word	0x20000d38
 800edc0:	20000d4c 	.word	0x20000d4c
 800edc4:	20000d64 	.word	0x20000d64
 800edc8:	20000d30 	.word	0x20000d30
 800edcc:	20000d34 	.word	0x20000d34

0800edd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800edd6:	e019      	b.n	800ee0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800edd8:	f000 fe26 	bl	800fa28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eddc:	4b10      	ldr	r3, [pc, #64]	@ (800ee20 <prvCheckTasksWaitingTermination+0x50>)
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	3304      	adds	r3, #4
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fe fc24 	bl	800d636 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800edee:	4b0d      	ldr	r3, [pc, #52]	@ (800ee24 <prvCheckTasksWaitingTermination+0x54>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3b01      	subs	r3, #1
 800edf4:	4a0b      	ldr	r2, [pc, #44]	@ (800ee24 <prvCheckTasksWaitingTermination+0x54>)
 800edf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800edf8:	4b0b      	ldr	r3, [pc, #44]	@ (800ee28 <prvCheckTasksWaitingTermination+0x58>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	3b01      	subs	r3, #1
 800edfe:	4a0a      	ldr	r2, [pc, #40]	@ (800ee28 <prvCheckTasksWaitingTermination+0x58>)
 800ee00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ee02:	f000 fe43 	bl	800fa8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 f810 	bl	800ee2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee0c:	4b06      	ldr	r3, [pc, #24]	@ (800ee28 <prvCheckTasksWaitingTermination+0x58>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d1e1      	bne.n	800edd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ee14:	bf00      	nop
 800ee16:	bf00      	nop
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	20000d4c 	.word	0x20000d4c
 800ee24:	20000d78 	.word	0x20000d78
 800ee28:	20000d60 	.word	0x20000d60

0800ee2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d108      	bne.n	800ee50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee42:	4618      	mov	r0, r3
 800ee44:	f000 ff24 	bl	800fc90 <vPortFree>
				vPortFree( pxTCB );
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 ff21 	bl	800fc90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ee4e:	e019      	b.n	800ee84 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	d103      	bne.n	800ee62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 ff18 	bl	800fc90 <vPortFree>
	}
 800ee60:	e010      	b.n	800ee84 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ee68:	2b02      	cmp	r3, #2
 800ee6a:	d00b      	beq.n	800ee84 <prvDeleteTCB+0x58>
	__asm volatile
 800ee6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee70:	f383 8811 	msr	BASEPRI, r3
 800ee74:	f3bf 8f6f 	isb	sy
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	60fb      	str	r3, [r7, #12]
}
 800ee7e:	bf00      	nop
 800ee80:	bf00      	nop
 800ee82:	e7fd      	b.n	800ee80 <prvDeleteTCB+0x54>
	}
 800ee84:	bf00      	nop
 800ee86:	3710      	adds	r7, #16
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee92:	4b0c      	ldr	r3, [pc, #48]	@ (800eec4 <prvResetNextTaskUnblockTime+0x38>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d104      	bne.n	800eea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee9c:	4b0a      	ldr	r3, [pc, #40]	@ (800eec8 <prvResetNextTaskUnblockTime+0x3c>)
 800ee9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eea4:	e008      	b.n	800eeb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eea6:	4b07      	ldr	r3, [pc, #28]	@ (800eec4 <prvResetNextTaskUnblockTime+0x38>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	4a04      	ldr	r2, [pc, #16]	@ (800eec8 <prvResetNextTaskUnblockTime+0x3c>)
 800eeb6:	6013      	str	r3, [r2, #0]
}
 800eeb8:	bf00      	nop
 800eeba:	370c      	adds	r7, #12
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr
 800eec4:	20000d30 	.word	0x20000d30
 800eec8:	20000d98 	.word	0x20000d98

0800eecc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eed2:	4b0b      	ldr	r3, [pc, #44]	@ (800ef00 <xTaskGetSchedulerState+0x34>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d102      	bne.n	800eee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eeda:	2301      	movs	r3, #1
 800eedc:	607b      	str	r3, [r7, #4]
 800eede:	e008      	b.n	800eef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eee0:	4b08      	ldr	r3, [pc, #32]	@ (800ef04 <xTaskGetSchedulerState+0x38>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d102      	bne.n	800eeee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eee8:	2302      	movs	r3, #2
 800eeea:	607b      	str	r3, [r7, #4]
 800eeec:	e001      	b.n	800eef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eeee:	2300      	movs	r3, #0
 800eef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eef2:	687b      	ldr	r3, [r7, #4]
	}
 800eef4:	4618      	mov	r0, r3
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	20000d84 	.word	0x20000d84
 800ef04:	20000da0 	.word	0x20000da0

0800ef08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef12:	4b29      	ldr	r3, [pc, #164]	@ (800efb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef18:	4b28      	ldr	r3, [pc, #160]	@ (800efbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	3304      	adds	r3, #4
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fe fb89 	bl	800d636 <uxListRemove>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d10b      	bne.n	800ef42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ef2a:	4b24      	ldr	r3, [pc, #144]	@ (800efbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef30:	2201      	movs	r2, #1
 800ef32:	fa02 f303 	lsl.w	r3, r2, r3
 800ef36:	43da      	mvns	r2, r3
 800ef38:	4b21      	ldr	r3, [pc, #132]	@ (800efc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4013      	ands	r3, r2
 800ef3e:	4a20      	ldr	r2, [pc, #128]	@ (800efc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef48:	d10a      	bne.n	800ef60 <prvAddCurrentTaskToDelayedList+0x58>
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d007      	beq.n	800ef60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef50:	4b1a      	ldr	r3, [pc, #104]	@ (800efbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	3304      	adds	r3, #4
 800ef56:	4619      	mov	r1, r3
 800ef58:	481a      	ldr	r0, [pc, #104]	@ (800efc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ef5a:	f7fe fb0f 	bl	800d57c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef5e:	e026      	b.n	800efae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4413      	add	r3, r2
 800ef66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef68:	4b14      	ldr	r3, [pc, #80]	@ (800efbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68ba      	ldr	r2, [r7, #8]
 800ef6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef70:	68ba      	ldr	r2, [r7, #8]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d209      	bcs.n	800ef8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef78:	4b13      	ldr	r3, [pc, #76]	@ (800efc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	4b0f      	ldr	r3, [pc, #60]	@ (800efbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	3304      	adds	r3, #4
 800ef82:	4619      	mov	r1, r3
 800ef84:	4610      	mov	r0, r2
 800ef86:	f7fe fb1d 	bl	800d5c4 <vListInsert>
}
 800ef8a:	e010      	b.n	800efae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef8c:	4b0f      	ldr	r3, [pc, #60]	@ (800efcc <prvAddCurrentTaskToDelayedList+0xc4>)
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	4b0a      	ldr	r3, [pc, #40]	@ (800efbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3304      	adds	r3, #4
 800ef96:	4619      	mov	r1, r3
 800ef98:	4610      	mov	r0, r2
 800ef9a:	f7fe fb13 	bl	800d5c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ef9e:	4b0c      	ldr	r3, [pc, #48]	@ (800efd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	68ba      	ldr	r2, [r7, #8]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d202      	bcs.n	800efae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800efa8:	4a09      	ldr	r2, [pc, #36]	@ (800efd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	6013      	str	r3, [r2, #0]
}
 800efae:	bf00      	nop
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	20000d7c 	.word	0x20000d7c
 800efbc:	20000c78 	.word	0x20000c78
 800efc0:	20000d80 	.word	0x20000d80
 800efc4:	20000d64 	.word	0x20000d64
 800efc8:	20000d34 	.word	0x20000d34
 800efcc:	20000d30 	.word	0x20000d30
 800efd0:	20000d98 	.word	0x20000d98

0800efd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b08a      	sub	sp, #40	@ 0x28
 800efd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800efda:	2300      	movs	r3, #0
 800efdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800efde:	f000 fb73 	bl	800f6c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800efe2:	4b1d      	ldr	r3, [pc, #116]	@ (800f058 <xTimerCreateTimerTask+0x84>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d021      	beq.n	800f02e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800efea:	2300      	movs	r3, #0
 800efec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800efee:	2300      	movs	r3, #0
 800eff0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eff2:	1d3a      	adds	r2, r7, #4
 800eff4:	f107 0108 	add.w	r1, r7, #8
 800eff8:	f107 030c 	add.w	r3, r7, #12
 800effc:	4618      	mov	r0, r3
 800effe:	f7f3 fb37 	bl	8002670 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f002:	6879      	ldr	r1, [r7, #4]
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	9202      	str	r2, [sp, #8]
 800f00a:	9301      	str	r3, [sp, #4]
 800f00c:	2302      	movs	r3, #2
 800f00e:	9300      	str	r3, [sp, #0]
 800f010:	2300      	movs	r3, #0
 800f012:	460a      	mov	r2, r1
 800f014:	4911      	ldr	r1, [pc, #68]	@ (800f05c <xTimerCreateTimerTask+0x88>)
 800f016:	4812      	ldr	r0, [pc, #72]	@ (800f060 <xTimerCreateTimerTask+0x8c>)
 800f018:	f7ff f820 	bl	800e05c <xTaskCreateStatic>
 800f01c:	4603      	mov	r3, r0
 800f01e:	4a11      	ldr	r2, [pc, #68]	@ (800f064 <xTimerCreateTimerTask+0x90>)
 800f020:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f022:	4b10      	ldr	r3, [pc, #64]	@ (800f064 <xTimerCreateTimerTask+0x90>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d001      	beq.n	800f02e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f02a:	2301      	movs	r3, #1
 800f02c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d10b      	bne.n	800f04c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f038:	f383 8811 	msr	BASEPRI, r3
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	613b      	str	r3, [r7, #16]
}
 800f046:	bf00      	nop
 800f048:	bf00      	nop
 800f04a:	e7fd      	b.n	800f048 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f04c:	697b      	ldr	r3, [r7, #20]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3718      	adds	r7, #24
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	20000dd4 	.word	0x20000dd4
 800f05c:	08013de4 	.word	0x08013de4
 800f060:	0800f299 	.word	0x0800f299
 800f064:	20000dd8 	.word	0x20000dd8

0800f068 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b088      	sub	sp, #32
 800f06c:	af02      	add	r7, sp, #8
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
 800f074:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f076:	2028      	movs	r0, #40	@ 0x28
 800f078:	f000 fdf8 	bl	800fc6c <pvPortMalloc>
 800f07c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00d      	beq.n	800f0a0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	2200      	movs	r2, #0
 800f088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	9301      	str	r3, [sp, #4]
 800f090:	6a3b      	ldr	r3, [r7, #32]
 800f092:	9300      	str	r3, [sp, #0]
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	68b9      	ldr	r1, [r7, #8]
 800f09a:	68f8      	ldr	r0, [r7, #12]
 800f09c:	f000 f805 	bl	800f0aa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f0a0:	697b      	ldr	r3, [r7, #20]
	}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3718      	adds	r7, #24
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}

0800f0aa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f0aa:	b580      	push	{r7, lr}
 800f0ac:	b086      	sub	sp, #24
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	60f8      	str	r0, [r7, #12]
 800f0b2:	60b9      	str	r1, [r7, #8]
 800f0b4:	607a      	str	r2, [r7, #4]
 800f0b6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d10b      	bne.n	800f0d6 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c2:	f383 8811 	msr	BASEPRI, r3
 800f0c6:	f3bf 8f6f 	isb	sy
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	617b      	str	r3, [r7, #20]
}
 800f0d0:	bf00      	nop
 800f0d2:	bf00      	nop
 800f0d4:	e7fd      	b.n	800f0d2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d01e      	beq.n	800f11a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f0dc:	f000 faf4 	bl	800f6c8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e8:	68ba      	ldr	r2, [r7, #8]
 800f0ea:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ee:	683a      	ldr	r2, [r7, #0]
 800f0f0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f4:	6a3a      	ldr	r2, [r7, #32]
 800f0f6:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fa:	3304      	adds	r3, #4
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fe fa30 	bl	800d562 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d008      	beq.n	800f11a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f10e:	f043 0304 	orr.w	r3, r3, #4
 800f112:	b2da      	uxtb	r2, r3
 800f114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f11a:	bf00      	nop
 800f11c:	3718      	adds	r7, #24
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
	...

0800f124 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b08a      	sub	sp, #40	@ 0x28
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
 800f130:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f132:	2300      	movs	r3, #0
 800f134:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10b      	bne.n	800f154 <xTimerGenericCommand+0x30>
	__asm volatile
 800f13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f140:	f383 8811 	msr	BASEPRI, r3
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	623b      	str	r3, [r7, #32]
}
 800f14e:	bf00      	nop
 800f150:	bf00      	nop
 800f152:	e7fd      	b.n	800f150 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f154:	4b19      	ldr	r3, [pc, #100]	@ (800f1bc <xTimerGenericCommand+0x98>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d02a      	beq.n	800f1b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	2b05      	cmp	r3, #5
 800f16c:	dc18      	bgt.n	800f1a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f16e:	f7ff fead 	bl	800eecc <xTaskGetSchedulerState>
 800f172:	4603      	mov	r3, r0
 800f174:	2b02      	cmp	r3, #2
 800f176:	d109      	bne.n	800f18c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f178:	4b10      	ldr	r3, [pc, #64]	@ (800f1bc <xTimerGenericCommand+0x98>)
 800f17a:	6818      	ldr	r0, [r3, #0]
 800f17c:	f107 0114 	add.w	r1, r7, #20
 800f180:	2300      	movs	r3, #0
 800f182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f184:	f7fe fb88 	bl	800d898 <xQueueGenericSend>
 800f188:	6278      	str	r0, [r7, #36]	@ 0x24
 800f18a:	e012      	b.n	800f1b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f18c:	4b0b      	ldr	r3, [pc, #44]	@ (800f1bc <xTimerGenericCommand+0x98>)
 800f18e:	6818      	ldr	r0, [r3, #0]
 800f190:	f107 0114 	add.w	r1, r7, #20
 800f194:	2300      	movs	r3, #0
 800f196:	2200      	movs	r2, #0
 800f198:	f7fe fb7e 	bl	800d898 <xQueueGenericSend>
 800f19c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f19e:	e008      	b.n	800f1b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1a0:	4b06      	ldr	r3, [pc, #24]	@ (800f1bc <xTimerGenericCommand+0x98>)
 800f1a2:	6818      	ldr	r0, [r3, #0]
 800f1a4:	f107 0114 	add.w	r1, r7, #20
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	f7fe fc76 	bl	800da9c <xQueueGenericSendFromISR>
 800f1b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3728      	adds	r7, #40	@ 0x28
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	20000dd4 	.word	0x20000dd4

0800f1c0 <xTimerGetPeriod>:
	return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d10b      	bne.n	800f1ea <xTimerGetPeriod+0x2a>
	__asm volatile
 800f1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d6:	f383 8811 	msr	BASEPRI, r3
 800f1da:	f3bf 8f6f 	isb	sy
 800f1de:	f3bf 8f4f 	dsb	sy
 800f1e2:	60bb      	str	r3, [r7, #8]
}
 800f1e4:	bf00      	nop
 800f1e6:	bf00      	nop
 800f1e8:	e7fd      	b.n	800f1e6 <xTimerGetPeriod+0x26>
	return pxTimer->xTimerPeriodInTicks;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	699b      	ldr	r3, [r3, #24]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
	...

0800f1fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b088      	sub	sp, #32
 800f200:	af02      	add	r7, sp, #8
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f206:	4b23      	ldr	r3, [pc, #140]	@ (800f294 <prvProcessExpiredTimer+0x98>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	3304      	adds	r3, #4
 800f214:	4618      	mov	r0, r3
 800f216:	f7fe fa0e 	bl	800d636 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f220:	f003 0304 	and.w	r3, r3, #4
 800f224:	2b00      	cmp	r3, #0
 800f226:	d023      	beq.n	800f270 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	699a      	ldr	r2, [r3, #24]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	18d1      	adds	r1, r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	6978      	ldr	r0, [r7, #20]
 800f236:	f000 f8d5 	bl	800f3e4 <prvInsertTimerInActiveList>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d020      	beq.n	800f282 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f240:	2300      	movs	r3, #0
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	2300      	movs	r3, #0
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	2100      	movs	r1, #0
 800f24a:	6978      	ldr	r0, [r7, #20]
 800f24c:	f7ff ff6a 	bl	800f124 <xTimerGenericCommand>
 800f250:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d114      	bne.n	800f282 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f25c:	f383 8811 	msr	BASEPRI, r3
 800f260:	f3bf 8f6f 	isb	sy
 800f264:	f3bf 8f4f 	dsb	sy
 800f268:	60fb      	str	r3, [r7, #12]
}
 800f26a:	bf00      	nop
 800f26c:	bf00      	nop
 800f26e:	e7fd      	b.n	800f26c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f276:	f023 0301 	bic.w	r3, r3, #1
 800f27a:	b2da      	uxtb	r2, r3
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	6a1b      	ldr	r3, [r3, #32]
 800f286:	6978      	ldr	r0, [r7, #20]
 800f288:	4798      	blx	r3
}
 800f28a:	bf00      	nop
 800f28c:	3718      	adds	r7, #24
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	20000dcc 	.word	0x20000dcc

0800f298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2a0:	f107 0308 	add.w	r3, r7, #8
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f000 f859 	bl	800f35c <prvGetNextExpireTime>
 800f2aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f000 f805 	bl	800f2c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f2b6:	f000 f8d7 	bl	800f468 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2ba:	bf00      	nop
 800f2bc:	e7f0      	b.n	800f2a0 <prvTimerTask+0x8>
	...

0800f2c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f2ca:	f7ff fa1b 	bl	800e704 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2ce:	f107 0308 	add.w	r3, r7, #8
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f000 f866 	bl	800f3a4 <prvSampleTimeNow>
 800f2d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d130      	bne.n	800f342 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d10a      	bne.n	800f2fc <prvProcessTimerOrBlockTask+0x3c>
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d806      	bhi.n	800f2fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2ee:	f7ff fa17 	bl	800e720 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2f2:	68f9      	ldr	r1, [r7, #12]
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7ff ff81 	bl	800f1fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2fa:	e024      	b.n	800f346 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d008      	beq.n	800f314 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f302:	4b13      	ldr	r3, [pc, #76]	@ (800f350 <prvProcessTimerOrBlockTask+0x90>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d101      	bne.n	800f310 <prvProcessTimerOrBlockTask+0x50>
 800f30c:	2301      	movs	r3, #1
 800f30e:	e000      	b.n	800f312 <prvProcessTimerOrBlockTask+0x52>
 800f310:	2300      	movs	r3, #0
 800f312:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f314:	4b0f      	ldr	r3, [pc, #60]	@ (800f354 <prvProcessTimerOrBlockTask+0x94>)
 800f316:	6818      	ldr	r0, [r3, #0]
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	1ad3      	subs	r3, r2, r3
 800f31e:	683a      	ldr	r2, [r7, #0]
 800f320:	4619      	mov	r1, r3
 800f322:	f7fe fe67 	bl	800dff4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f326:	f7ff f9fb 	bl	800e720 <xTaskResumeAll>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d10a      	bne.n	800f346 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f330:	4b09      	ldr	r3, [pc, #36]	@ (800f358 <prvProcessTimerOrBlockTask+0x98>)
 800f332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f336:	601a      	str	r2, [r3, #0]
 800f338:	f3bf 8f4f 	dsb	sy
 800f33c:	f3bf 8f6f 	isb	sy
}
 800f340:	e001      	b.n	800f346 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f342:	f7ff f9ed 	bl	800e720 <xTaskResumeAll>
}
 800f346:	bf00      	nop
 800f348:	3710      	adds	r7, #16
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	20000dd0 	.word	0x20000dd0
 800f354:	20000dd4 	.word	0x20000dd4
 800f358:	e000ed04 	.word	0xe000ed04

0800f35c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f35c:	b480      	push	{r7}
 800f35e:	b085      	sub	sp, #20
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f364:	4b0e      	ldr	r3, [pc, #56]	@ (800f3a0 <prvGetNextExpireTime+0x44>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d101      	bne.n	800f372 <prvGetNextExpireTime+0x16>
 800f36e:	2201      	movs	r2, #1
 800f370:	e000      	b.n	800f374 <prvGetNextExpireTime+0x18>
 800f372:	2200      	movs	r2, #0
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d105      	bne.n	800f38c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f380:	4b07      	ldr	r3, [pc, #28]	@ (800f3a0 <prvGetNextExpireTime+0x44>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	60fb      	str	r3, [r7, #12]
 800f38a:	e001      	b.n	800f390 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f38c:	2300      	movs	r3, #0
 800f38e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f390:	68fb      	ldr	r3, [r7, #12]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3714      	adds	r7, #20
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	20000dcc 	.word	0x20000dcc

0800f3a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f3ac:	f7ff fa56 	bl	800e85c <xTaskGetTickCount>
 800f3b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f3b2:	4b0b      	ldr	r3, [pc, #44]	@ (800f3e0 <prvSampleTimeNow+0x3c>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d205      	bcs.n	800f3c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f3bc:	f000 f91e 	bl	800f5fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	e002      	b.n	800f3ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f3ce:	4a04      	ldr	r2, [pc, #16]	@ (800f3e0 <prvSampleTimeNow+0x3c>)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	20000ddc 	.word	0x20000ddc

0800f3e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b086      	sub	sp, #24
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
 800f3f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	429a      	cmp	r2, r3
 800f408:	d812      	bhi.n	800f430 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	1ad2      	subs	r2, r2, r3
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	699b      	ldr	r3, [r3, #24]
 800f414:	429a      	cmp	r2, r3
 800f416:	d302      	bcc.n	800f41e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f418:	2301      	movs	r3, #1
 800f41a:	617b      	str	r3, [r7, #20]
 800f41c:	e01b      	b.n	800f456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f41e:	4b10      	ldr	r3, [pc, #64]	@ (800f460 <prvInsertTimerInActiveList+0x7c>)
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	3304      	adds	r3, #4
 800f426:	4619      	mov	r1, r3
 800f428:	4610      	mov	r0, r2
 800f42a:	f7fe f8cb 	bl	800d5c4 <vListInsert>
 800f42e:	e012      	b.n	800f456 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	429a      	cmp	r2, r3
 800f436:	d206      	bcs.n	800f446 <prvInsertTimerInActiveList+0x62>
 800f438:	68ba      	ldr	r2, [r7, #8]
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d302      	bcc.n	800f446 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f440:	2301      	movs	r3, #1
 800f442:	617b      	str	r3, [r7, #20]
 800f444:	e007      	b.n	800f456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f446:	4b07      	ldr	r3, [pc, #28]	@ (800f464 <prvInsertTimerInActiveList+0x80>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	3304      	adds	r3, #4
 800f44e:	4619      	mov	r1, r3
 800f450:	4610      	mov	r0, r2
 800f452:	f7fe f8b7 	bl	800d5c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f456:	697b      	ldr	r3, [r7, #20]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3718      	adds	r7, #24
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	20000dd0 	.word	0x20000dd0
 800f464:	20000dcc 	.word	0x20000dcc

0800f468 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08c      	sub	sp, #48	@ 0x30
 800f46c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f46e:	e0b2      	b.n	800f5d6 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	2b00      	cmp	r3, #0
 800f474:	f2c0 80af 	blt.w	800f5d6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f47e:	695b      	ldr	r3, [r3, #20]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d004      	beq.n	800f48e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f486:	3304      	adds	r3, #4
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fe f8d4 	bl	800d636 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f48e:	1d3b      	adds	r3, r7, #4
 800f490:	4618      	mov	r0, r3
 800f492:	f7ff ff87 	bl	800f3a4 <prvSampleTimeNow>
 800f496:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	2b09      	cmp	r3, #9
 800f49c:	f200 8098 	bhi.w	800f5d0 <prvProcessReceivedCommands+0x168>
 800f4a0:	a201      	add	r2, pc, #4	@ (adr r2, 800f4a8 <prvProcessReceivedCommands+0x40>)
 800f4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a6:	bf00      	nop
 800f4a8:	0800f4d1 	.word	0x0800f4d1
 800f4ac:	0800f4d1 	.word	0x0800f4d1
 800f4b0:	0800f4d1 	.word	0x0800f4d1
 800f4b4:	0800f547 	.word	0x0800f547
 800f4b8:	0800f55b 	.word	0x0800f55b
 800f4bc:	0800f5a7 	.word	0x0800f5a7
 800f4c0:	0800f4d1 	.word	0x0800f4d1
 800f4c4:	0800f4d1 	.word	0x0800f4d1
 800f4c8:	0800f547 	.word	0x0800f547
 800f4cc:	0800f55b 	.word	0x0800f55b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f4d6:	f043 0301 	orr.w	r3, r3, #1
 800f4da:	b2da      	uxtb	r2, r3
 800f4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e6:	699b      	ldr	r3, [r3, #24]
 800f4e8:	18d1      	adds	r1, r2, r3
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6a3a      	ldr	r2, [r7, #32]
 800f4ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f4f0:	f7ff ff78 	bl	800f3e4 <prvInsertTimerInActiveList>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d06c      	beq.n	800f5d4 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4fc:	6a1b      	ldr	r3, [r3, #32]
 800f4fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f500:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f508:	f003 0304 	and.w	r3, r3, #4
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d061      	beq.n	800f5d4 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f514:	699b      	ldr	r3, [r3, #24]
 800f516:	441a      	add	r2, r3
 800f518:	2300      	movs	r3, #0
 800f51a:	9300      	str	r3, [sp, #0]
 800f51c:	2300      	movs	r3, #0
 800f51e:	2100      	movs	r1, #0
 800f520:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f522:	f7ff fdff 	bl	800f124 <xTimerGenericCommand>
 800f526:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d152      	bne.n	800f5d4 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800f52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f532:	f383 8811 	msr	BASEPRI, r3
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	f3bf 8f4f 	dsb	sy
 800f53e:	61bb      	str	r3, [r7, #24]
}
 800f540:	bf00      	nop
 800f542:	bf00      	nop
 800f544:	e7fd      	b.n	800f542 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f548:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f54c:	f023 0301 	bic.w	r3, r3, #1
 800f550:	b2da      	uxtb	r2, r3
 800f552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800f558:	e03d      	b.n	800f5d6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f560:	f043 0301 	orr.w	r3, r3, #1
 800f564:	b2da      	uxtb	r2, r3
 800f566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f56c:	68fa      	ldr	r2, [r7, #12]
 800f56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f570:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f574:	699b      	ldr	r3, [r3, #24]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d10b      	bne.n	800f592 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800f57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f57e:	f383 8811 	msr	BASEPRI, r3
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	f3bf 8f4f 	dsb	sy
 800f58a:	617b      	str	r3, [r7, #20]
}
 800f58c:	bf00      	nop
 800f58e:	bf00      	nop
 800f590:	e7fd      	b.n	800f58e <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f594:	699a      	ldr	r2, [r3, #24]
 800f596:	6a3b      	ldr	r3, [r7, #32]
 800f598:	18d1      	adds	r1, r2, r3
 800f59a:	6a3b      	ldr	r3, [r7, #32]
 800f59c:	6a3a      	ldr	r2, [r7, #32]
 800f59e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f5a0:	f7ff ff20 	bl	800f3e4 <prvInsertTimerInActiveList>
					break;
 800f5a4:	e017      	b.n	800f5d6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f5ac:	f003 0302 	and.w	r3, r3, #2
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d103      	bne.n	800f5bc <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800f5b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f5b6:	f000 fb6b 	bl	800fc90 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f5ba:	e00c      	b.n	800f5d6 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f5c2:	f023 0301 	bic.w	r3, r3, #1
 800f5c6:	b2da      	uxtb	r2, r3
 800f5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800f5ce:	e002      	b.n	800f5d6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800f5d0:	bf00      	nop
 800f5d2:	e000      	b.n	800f5d6 <prvProcessReceivedCommands+0x16e>
					break;
 800f5d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5d6:	4b08      	ldr	r3, [pc, #32]	@ (800f5f8 <prvProcessReceivedCommands+0x190>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f107 0108 	add.w	r1, r7, #8
 800f5de:	2200      	movs	r2, #0
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7fe faf9 	bl	800dbd8 <xQueueReceive>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f47f af41 	bne.w	800f470 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f5ee:	bf00      	nop
 800f5f0:	bf00      	nop
 800f5f2:	3728      	adds	r7, #40	@ 0x28
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	20000dd4 	.word	0x20000dd4

0800f5fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b088      	sub	sp, #32
 800f600:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f602:	e049      	b.n	800f698 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f604:	4b2e      	ldr	r3, [pc, #184]	@ (800f6c0 <prvSwitchTimerLists+0xc4>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f60e:	4b2c      	ldr	r3, [pc, #176]	@ (800f6c0 <prvSwitchTimerLists+0xc4>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	3304      	adds	r3, #4
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7fe f80a 	bl	800d636 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6a1b      	ldr	r3, [r3, #32]
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f630:	f003 0304 	and.w	r3, r3, #4
 800f634:	2b00      	cmp	r3, #0
 800f636:	d02f      	beq.n	800f698 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	699b      	ldr	r3, [r3, #24]
 800f63c:	693a      	ldr	r2, [r7, #16]
 800f63e:	4413      	add	r3, r2
 800f640:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f642:	68ba      	ldr	r2, [r7, #8]
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	429a      	cmp	r2, r3
 800f648:	d90e      	bls.n	800f668 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	68ba      	ldr	r2, [r7, #8]
 800f64e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f656:	4b1a      	ldr	r3, [pc, #104]	@ (800f6c0 <prvSwitchTimerLists+0xc4>)
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	3304      	adds	r3, #4
 800f65e:	4619      	mov	r1, r3
 800f660:	4610      	mov	r0, r2
 800f662:	f7fd ffaf 	bl	800d5c4 <vListInsert>
 800f666:	e017      	b.n	800f698 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f668:	2300      	movs	r3, #0
 800f66a:	9300      	str	r3, [sp, #0]
 800f66c:	2300      	movs	r3, #0
 800f66e:	693a      	ldr	r2, [r7, #16]
 800f670:	2100      	movs	r1, #0
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f7ff fd56 	bl	800f124 <xTimerGenericCommand>
 800f678:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10b      	bne.n	800f698 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	603b      	str	r3, [r7, #0]
}
 800f692:	bf00      	nop
 800f694:	bf00      	nop
 800f696:	e7fd      	b.n	800f694 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f698:	4b09      	ldr	r3, [pc, #36]	@ (800f6c0 <prvSwitchTimerLists+0xc4>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1b0      	bne.n	800f604 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f6a2:	4b07      	ldr	r3, [pc, #28]	@ (800f6c0 <prvSwitchTimerLists+0xc4>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f6a8:	4b06      	ldr	r3, [pc, #24]	@ (800f6c4 <prvSwitchTimerLists+0xc8>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a04      	ldr	r2, [pc, #16]	@ (800f6c0 <prvSwitchTimerLists+0xc4>)
 800f6ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f6b0:	4a04      	ldr	r2, [pc, #16]	@ (800f6c4 <prvSwitchTimerLists+0xc8>)
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	6013      	str	r3, [r2, #0]
}
 800f6b6:	bf00      	nop
 800f6b8:	3718      	adds	r7, #24
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	20000dcc 	.word	0x20000dcc
 800f6c4:	20000dd0 	.word	0x20000dd0

0800f6c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6ce:	f000 f9ab 	bl	800fa28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f6d2:	4b15      	ldr	r3, [pc, #84]	@ (800f728 <prvCheckForValidListAndQueue+0x60>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d120      	bne.n	800f71c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f6da:	4814      	ldr	r0, [pc, #80]	@ (800f72c <prvCheckForValidListAndQueue+0x64>)
 800f6dc:	f7fd ff21 	bl	800d522 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f6e0:	4813      	ldr	r0, [pc, #76]	@ (800f730 <prvCheckForValidListAndQueue+0x68>)
 800f6e2:	f7fd ff1e 	bl	800d522 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f6e6:	4b13      	ldr	r3, [pc, #76]	@ (800f734 <prvCheckForValidListAndQueue+0x6c>)
 800f6e8:	4a10      	ldr	r2, [pc, #64]	@ (800f72c <prvCheckForValidListAndQueue+0x64>)
 800f6ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f6ec:	4b12      	ldr	r3, [pc, #72]	@ (800f738 <prvCheckForValidListAndQueue+0x70>)
 800f6ee:	4a10      	ldr	r2, [pc, #64]	@ (800f730 <prvCheckForValidListAndQueue+0x68>)
 800f6f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	9300      	str	r3, [sp, #0]
 800f6f6:	4b11      	ldr	r3, [pc, #68]	@ (800f73c <prvCheckForValidListAndQueue+0x74>)
 800f6f8:	4a11      	ldr	r2, [pc, #68]	@ (800f740 <prvCheckForValidListAndQueue+0x78>)
 800f6fa:	210c      	movs	r1, #12
 800f6fc:	200a      	movs	r0, #10
 800f6fe:	f7fe f82f 	bl	800d760 <xQueueGenericCreateStatic>
 800f702:	4603      	mov	r3, r0
 800f704:	4a08      	ldr	r2, [pc, #32]	@ (800f728 <prvCheckForValidListAndQueue+0x60>)
 800f706:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f708:	4b07      	ldr	r3, [pc, #28]	@ (800f728 <prvCheckForValidListAndQueue+0x60>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d005      	beq.n	800f71c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f710:	4b05      	ldr	r3, [pc, #20]	@ (800f728 <prvCheckForValidListAndQueue+0x60>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	490b      	ldr	r1, [pc, #44]	@ (800f744 <prvCheckForValidListAndQueue+0x7c>)
 800f716:	4618      	mov	r0, r3
 800f718:	f7fe fc42 	bl	800dfa0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f71c:	f000 f9b6 	bl	800fa8c <vPortExitCritical>
}
 800f720:	bf00      	nop
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	20000dd4 	.word	0x20000dd4
 800f72c:	20000da4 	.word	0x20000da4
 800f730:	20000db8 	.word	0x20000db8
 800f734:	20000dcc 	.word	0x20000dcc
 800f738:	20000dd0 	.word	0x20000dd0
 800f73c:	20000e58 	.word	0x20000e58
 800f740:	20000de0 	.word	0x20000de0
 800f744:	08013dec 	.word	0x08013dec

0800f748 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b086      	sub	sp, #24
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d10b      	bne.n	800f772 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800f75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	60fb      	str	r3, [r7, #12]
}
 800f76c:	bf00      	nop
 800f76e:	bf00      	nop
 800f770:	e7fd      	b.n	800f76e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f772:	f000 f959 	bl	800fa28 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	69db      	ldr	r3, [r3, #28]
 800f77a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f77c:	f000 f986 	bl	800fa8c <vPortExitCritical>

	return pvReturn;
 800f780:	693b      	ldr	r3, [r7, #16]
}
 800f782:	4618      	mov	r0, r3
 800f784:	3718      	adds	r7, #24
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b084      	sub	sp, #16
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
 800f792:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d10b      	bne.n	800f7b6 <vTimerSetTimerID+0x2c>
	__asm volatile
 800f79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a2:	f383 8811 	msr	BASEPRI, r3
 800f7a6:	f3bf 8f6f 	isb	sy
 800f7aa:	f3bf 8f4f 	dsb	sy
 800f7ae:	60bb      	str	r3, [r7, #8]
}
 800f7b0:	bf00      	nop
 800f7b2:	bf00      	nop
 800f7b4:	e7fd      	b.n	800f7b2 <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 800f7b6:	f000 f937 	bl	800fa28 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	683a      	ldr	r2, [r7, #0]
 800f7be:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 800f7c0:	f000 f964 	bl	800fa8c <vPortExitCritical>
}
 800f7c4:	bf00      	nop
 800f7c6:	3710      	adds	r7, #16
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}

0800f7cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b085      	sub	sp, #20
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	3b04      	subs	r3, #4
 800f7dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f7e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	3b04      	subs	r3, #4
 800f7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	f023 0201 	bic.w	r2, r3, #1
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	3b04      	subs	r3, #4
 800f7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f7fc:	4a0c      	ldr	r2, [pc, #48]	@ (800f830 <pxPortInitialiseStack+0x64>)
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	3b14      	subs	r3, #20
 800f806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	3b04      	subs	r3, #4
 800f812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f06f 0202 	mvn.w	r2, #2
 800f81a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	3b20      	subs	r3, #32
 800f820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f822:	68fb      	ldr	r3, [r7, #12]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3714      	adds	r7, #20
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr
 800f830:	0800f835 	.word	0x0800f835

0800f834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f83a:	2300      	movs	r3, #0
 800f83c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f83e:	4b13      	ldr	r3, [pc, #76]	@ (800f88c <prvTaskExitError+0x58>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f846:	d00b      	beq.n	800f860 <prvTaskExitError+0x2c>
	__asm volatile
 800f848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f84c:	f383 8811 	msr	BASEPRI, r3
 800f850:	f3bf 8f6f 	isb	sy
 800f854:	f3bf 8f4f 	dsb	sy
 800f858:	60fb      	str	r3, [r7, #12]
}
 800f85a:	bf00      	nop
 800f85c:	bf00      	nop
 800f85e:	e7fd      	b.n	800f85c <prvTaskExitError+0x28>
	__asm volatile
 800f860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f864:	f383 8811 	msr	BASEPRI, r3
 800f868:	f3bf 8f6f 	isb	sy
 800f86c:	f3bf 8f4f 	dsb	sy
 800f870:	60bb      	str	r3, [r7, #8]
}
 800f872:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f874:	bf00      	nop
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d0fc      	beq.n	800f876 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f87c:	bf00      	nop
 800f87e:	bf00      	nop
 800f880:	3714      	adds	r7, #20
 800f882:	46bd      	mov	sp, r7
 800f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	200000c4 	.word	0x200000c4

0800f890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f890:	4b07      	ldr	r3, [pc, #28]	@ (800f8b0 <pxCurrentTCBConst2>)
 800f892:	6819      	ldr	r1, [r3, #0]
 800f894:	6808      	ldr	r0, [r1, #0]
 800f896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89a:	f380 8809 	msr	PSP, r0
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	f04f 0000 	mov.w	r0, #0
 800f8a6:	f380 8811 	msr	BASEPRI, r0
 800f8aa:	4770      	bx	lr
 800f8ac:	f3af 8000 	nop.w

0800f8b0 <pxCurrentTCBConst2>:
 800f8b0:	20000c78 	.word	0x20000c78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f8b4:	bf00      	nop
 800f8b6:	bf00      	nop

0800f8b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f8b8:	4808      	ldr	r0, [pc, #32]	@ (800f8dc <prvPortStartFirstTask+0x24>)
 800f8ba:	6800      	ldr	r0, [r0, #0]
 800f8bc:	6800      	ldr	r0, [r0, #0]
 800f8be:	f380 8808 	msr	MSP, r0
 800f8c2:	f04f 0000 	mov.w	r0, #0
 800f8c6:	f380 8814 	msr	CONTROL, r0
 800f8ca:	b662      	cpsie	i
 800f8cc:	b661      	cpsie	f
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	f3bf 8f6f 	isb	sy
 800f8d6:	df00      	svc	0
 800f8d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f8da:	bf00      	nop
 800f8dc:	e000ed08 	.word	0xe000ed08

0800f8e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b086      	sub	sp, #24
 800f8e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f8e6:	4b47      	ldr	r3, [pc, #284]	@ (800fa04 <xPortStartScheduler+0x124>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4a47      	ldr	r2, [pc, #284]	@ (800fa08 <xPortStartScheduler+0x128>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d10b      	bne.n	800f908 <xPortStartScheduler+0x28>
	__asm volatile
 800f8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8f4:	f383 8811 	msr	BASEPRI, r3
 800f8f8:	f3bf 8f6f 	isb	sy
 800f8fc:	f3bf 8f4f 	dsb	sy
 800f900:	613b      	str	r3, [r7, #16]
}
 800f902:	bf00      	nop
 800f904:	bf00      	nop
 800f906:	e7fd      	b.n	800f904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f908:	4b3e      	ldr	r3, [pc, #248]	@ (800fa04 <xPortStartScheduler+0x124>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4a3f      	ldr	r2, [pc, #252]	@ (800fa0c <xPortStartScheduler+0x12c>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d10b      	bne.n	800f92a <xPortStartScheduler+0x4a>
	__asm volatile
 800f912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f916:	f383 8811 	msr	BASEPRI, r3
 800f91a:	f3bf 8f6f 	isb	sy
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	60fb      	str	r3, [r7, #12]
}
 800f924:	bf00      	nop
 800f926:	bf00      	nop
 800f928:	e7fd      	b.n	800f926 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f92a:	4b39      	ldr	r3, [pc, #228]	@ (800fa10 <xPortStartScheduler+0x130>)
 800f92c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	b2db      	uxtb	r3, r3
 800f934:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	22ff      	movs	r2, #255	@ 0xff
 800f93a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	b2db      	uxtb	r3, r3
 800f942:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f944:	78fb      	ldrb	r3, [r7, #3]
 800f946:	b2db      	uxtb	r3, r3
 800f948:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f94c:	b2da      	uxtb	r2, r3
 800f94e:	4b31      	ldr	r3, [pc, #196]	@ (800fa14 <xPortStartScheduler+0x134>)
 800f950:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f952:	4b31      	ldr	r3, [pc, #196]	@ (800fa18 <xPortStartScheduler+0x138>)
 800f954:	2207      	movs	r2, #7
 800f956:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f958:	e009      	b.n	800f96e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f95a:	4b2f      	ldr	r3, [pc, #188]	@ (800fa18 <xPortStartScheduler+0x138>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	3b01      	subs	r3, #1
 800f960:	4a2d      	ldr	r2, [pc, #180]	@ (800fa18 <xPortStartScheduler+0x138>)
 800f962:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f964:	78fb      	ldrb	r3, [r7, #3]
 800f966:	b2db      	uxtb	r3, r3
 800f968:	005b      	lsls	r3, r3, #1
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f96e:	78fb      	ldrb	r3, [r7, #3]
 800f970:	b2db      	uxtb	r3, r3
 800f972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f976:	2b80      	cmp	r3, #128	@ 0x80
 800f978:	d0ef      	beq.n	800f95a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f97a:	4b27      	ldr	r3, [pc, #156]	@ (800fa18 <xPortStartScheduler+0x138>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f1c3 0307 	rsb	r3, r3, #7
 800f982:	2b04      	cmp	r3, #4
 800f984:	d00b      	beq.n	800f99e <xPortStartScheduler+0xbe>
	__asm volatile
 800f986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f98a:	f383 8811 	msr	BASEPRI, r3
 800f98e:	f3bf 8f6f 	isb	sy
 800f992:	f3bf 8f4f 	dsb	sy
 800f996:	60bb      	str	r3, [r7, #8]
}
 800f998:	bf00      	nop
 800f99a:	bf00      	nop
 800f99c:	e7fd      	b.n	800f99a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f99e:	4b1e      	ldr	r3, [pc, #120]	@ (800fa18 <xPortStartScheduler+0x138>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	021b      	lsls	r3, r3, #8
 800f9a4:	4a1c      	ldr	r2, [pc, #112]	@ (800fa18 <xPortStartScheduler+0x138>)
 800f9a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f9a8:	4b1b      	ldr	r3, [pc, #108]	@ (800fa18 <xPortStartScheduler+0x138>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f9b0:	4a19      	ldr	r2, [pc, #100]	@ (800fa18 <xPortStartScheduler+0x138>)
 800f9b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	b2da      	uxtb	r2, r3
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f9bc:	4b17      	ldr	r3, [pc, #92]	@ (800fa1c <xPortStartScheduler+0x13c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a16      	ldr	r2, [pc, #88]	@ (800fa1c <xPortStartScheduler+0x13c>)
 800f9c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f9c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f9c8:	4b14      	ldr	r3, [pc, #80]	@ (800fa1c <xPortStartScheduler+0x13c>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4a13      	ldr	r2, [pc, #76]	@ (800fa1c <xPortStartScheduler+0x13c>)
 800f9ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f9d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f9d4:	f000 f8da 	bl	800fb8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f9d8:	4b11      	ldr	r3, [pc, #68]	@ (800fa20 <xPortStartScheduler+0x140>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f9de:	f000 f8f9 	bl	800fbd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f9e2:	4b10      	ldr	r3, [pc, #64]	@ (800fa24 <xPortStartScheduler+0x144>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4a0f      	ldr	r2, [pc, #60]	@ (800fa24 <xPortStartScheduler+0x144>)
 800f9e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f9ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f9ee:	f7ff ff63 	bl	800f8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f9f2:	f7fe fffd 	bl	800e9f0 <vTaskSwitchContext>
	prvTaskExitError();
 800f9f6:	f7ff ff1d 	bl	800f834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f9fa:	2300      	movs	r3, #0
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3718      	adds	r7, #24
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	e000ed00 	.word	0xe000ed00
 800fa08:	410fc271 	.word	0x410fc271
 800fa0c:	410fc270 	.word	0x410fc270
 800fa10:	e000e400 	.word	0xe000e400
 800fa14:	20000ea0 	.word	0x20000ea0
 800fa18:	20000ea4 	.word	0x20000ea4
 800fa1c:	e000ed20 	.word	0xe000ed20
 800fa20:	200000c4 	.word	0x200000c4
 800fa24:	e000ef34 	.word	0xe000ef34

0800fa28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa32:	f383 8811 	msr	BASEPRI, r3
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	607b      	str	r3, [r7, #4]
}
 800fa40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fa42:	4b10      	ldr	r3, [pc, #64]	@ (800fa84 <vPortEnterCritical+0x5c>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	3301      	adds	r3, #1
 800fa48:	4a0e      	ldr	r2, [pc, #56]	@ (800fa84 <vPortEnterCritical+0x5c>)
 800fa4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fa4c:	4b0d      	ldr	r3, [pc, #52]	@ (800fa84 <vPortEnterCritical+0x5c>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d110      	bne.n	800fa76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa54:	4b0c      	ldr	r3, [pc, #48]	@ (800fa88 <vPortEnterCritical+0x60>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00b      	beq.n	800fa76 <vPortEnterCritical+0x4e>
	__asm volatile
 800fa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa62:	f383 8811 	msr	BASEPRI, r3
 800fa66:	f3bf 8f6f 	isb	sy
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	603b      	str	r3, [r7, #0]
}
 800fa70:	bf00      	nop
 800fa72:	bf00      	nop
 800fa74:	e7fd      	b.n	800fa72 <vPortEnterCritical+0x4a>
	}
}
 800fa76:	bf00      	nop
 800fa78:	370c      	adds	r7, #12
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop
 800fa84:	200000c4 	.word	0x200000c4
 800fa88:	e000ed04 	.word	0xe000ed04

0800fa8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa92:	4b12      	ldr	r3, [pc, #72]	@ (800fadc <vPortExitCritical+0x50>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d10b      	bne.n	800fab2 <vPortExitCritical+0x26>
	__asm volatile
 800fa9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa9e:	f383 8811 	msr	BASEPRI, r3
 800faa2:	f3bf 8f6f 	isb	sy
 800faa6:	f3bf 8f4f 	dsb	sy
 800faaa:	607b      	str	r3, [r7, #4]
}
 800faac:	bf00      	nop
 800faae:	bf00      	nop
 800fab0:	e7fd      	b.n	800faae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fab2:	4b0a      	ldr	r3, [pc, #40]	@ (800fadc <vPortExitCritical+0x50>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	3b01      	subs	r3, #1
 800fab8:	4a08      	ldr	r2, [pc, #32]	@ (800fadc <vPortExitCritical+0x50>)
 800faba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fabc:	4b07      	ldr	r3, [pc, #28]	@ (800fadc <vPortExitCritical+0x50>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d105      	bne.n	800fad0 <vPortExitCritical+0x44>
 800fac4:	2300      	movs	r3, #0
 800fac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	f383 8811 	msr	BASEPRI, r3
}
 800face:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fad0:	bf00      	nop
 800fad2:	370c      	adds	r7, #12
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr
 800fadc:	200000c4 	.word	0x200000c4

0800fae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fae0:	f3ef 8009 	mrs	r0, PSP
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	4b15      	ldr	r3, [pc, #84]	@ (800fb40 <pxCurrentTCBConst>)
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	f01e 0f10 	tst.w	lr, #16
 800faf0:	bf08      	it	eq
 800faf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800faf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafa:	6010      	str	r0, [r2, #0]
 800fafc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fb00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fb04:	f380 8811 	msr	BASEPRI, r0
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	f3bf 8f6f 	isb	sy
 800fb10:	f7fe ff6e 	bl	800e9f0 <vTaskSwitchContext>
 800fb14:	f04f 0000 	mov.w	r0, #0
 800fb18:	f380 8811 	msr	BASEPRI, r0
 800fb1c:	bc09      	pop	{r0, r3}
 800fb1e:	6819      	ldr	r1, [r3, #0]
 800fb20:	6808      	ldr	r0, [r1, #0]
 800fb22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb26:	f01e 0f10 	tst.w	lr, #16
 800fb2a:	bf08      	it	eq
 800fb2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fb30:	f380 8809 	msr	PSP, r0
 800fb34:	f3bf 8f6f 	isb	sy
 800fb38:	4770      	bx	lr
 800fb3a:	bf00      	nop
 800fb3c:	f3af 8000 	nop.w

0800fb40 <pxCurrentTCBConst>:
 800fb40:	20000c78 	.word	0x20000c78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fb44:	bf00      	nop
 800fb46:	bf00      	nop

0800fb48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb52:	f383 8811 	msr	BASEPRI, r3
 800fb56:	f3bf 8f6f 	isb	sy
 800fb5a:	f3bf 8f4f 	dsb	sy
 800fb5e:	607b      	str	r3, [r7, #4]
}
 800fb60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb62:	f7fe fe8b 	bl	800e87c <xTaskIncrementTick>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d003      	beq.n	800fb74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb6c:	4b06      	ldr	r3, [pc, #24]	@ (800fb88 <xPortSysTickHandler+0x40>)
 800fb6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb72:	601a      	str	r2, [r3, #0]
 800fb74:	2300      	movs	r3, #0
 800fb76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	f383 8811 	msr	BASEPRI, r3
}
 800fb7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb80:	bf00      	nop
 800fb82:	3708      	adds	r7, #8
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	e000ed04 	.word	0xe000ed04

0800fb8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb90:	4b0b      	ldr	r3, [pc, #44]	@ (800fbc0 <vPortSetupTimerInterrupt+0x34>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb96:	4b0b      	ldr	r3, [pc, #44]	@ (800fbc4 <vPortSetupTimerInterrupt+0x38>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb9c:	4b0a      	ldr	r3, [pc, #40]	@ (800fbc8 <vPortSetupTimerInterrupt+0x3c>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4a0a      	ldr	r2, [pc, #40]	@ (800fbcc <vPortSetupTimerInterrupt+0x40>)
 800fba2:	fba2 2303 	umull	r2, r3, r2, r3
 800fba6:	099b      	lsrs	r3, r3, #6
 800fba8:	4a09      	ldr	r2, [pc, #36]	@ (800fbd0 <vPortSetupTimerInterrupt+0x44>)
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fbae:	4b04      	ldr	r3, [pc, #16]	@ (800fbc0 <vPortSetupTimerInterrupt+0x34>)
 800fbb0:	2207      	movs	r2, #7
 800fbb2:	601a      	str	r2, [r3, #0]
}
 800fbb4:	bf00      	nop
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr
 800fbbe:	bf00      	nop
 800fbc0:	e000e010 	.word	0xe000e010
 800fbc4:	e000e018 	.word	0xe000e018
 800fbc8:	2000000c 	.word	0x2000000c
 800fbcc:	10624dd3 	.word	0x10624dd3
 800fbd0:	e000e014 	.word	0xe000e014

0800fbd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fbd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fbe4 <vPortEnableVFP+0x10>
 800fbd8:	6801      	ldr	r1, [r0, #0]
 800fbda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fbde:	6001      	str	r1, [r0, #0]
 800fbe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fbe2:	bf00      	nop
 800fbe4:	e000ed88 	.word	0xe000ed88

0800fbe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fbe8:	b480      	push	{r7}
 800fbea:	b085      	sub	sp, #20
 800fbec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fbee:	f3ef 8305 	mrs	r3, IPSR
 800fbf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2b0f      	cmp	r3, #15
 800fbf8:	d915      	bls.n	800fc26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fbfa:	4a18      	ldr	r2, [pc, #96]	@ (800fc5c <vPortValidateInterruptPriority+0x74>)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	4413      	add	r3, r2
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fc04:	4b16      	ldr	r3, [pc, #88]	@ (800fc60 <vPortValidateInterruptPriority+0x78>)
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	7afa      	ldrb	r2, [r7, #11]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d20b      	bcs.n	800fc26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc12:	f383 8811 	msr	BASEPRI, r3
 800fc16:	f3bf 8f6f 	isb	sy
 800fc1a:	f3bf 8f4f 	dsb	sy
 800fc1e:	607b      	str	r3, [r7, #4]
}
 800fc20:	bf00      	nop
 800fc22:	bf00      	nop
 800fc24:	e7fd      	b.n	800fc22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fc26:	4b0f      	ldr	r3, [pc, #60]	@ (800fc64 <vPortValidateInterruptPriority+0x7c>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fc2e:	4b0e      	ldr	r3, [pc, #56]	@ (800fc68 <vPortValidateInterruptPriority+0x80>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d90b      	bls.n	800fc4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc3a:	f383 8811 	msr	BASEPRI, r3
 800fc3e:	f3bf 8f6f 	isb	sy
 800fc42:	f3bf 8f4f 	dsb	sy
 800fc46:	603b      	str	r3, [r7, #0]
}
 800fc48:	bf00      	nop
 800fc4a:	bf00      	nop
 800fc4c:	e7fd      	b.n	800fc4a <vPortValidateInterruptPriority+0x62>
	}
 800fc4e:	bf00      	nop
 800fc50:	3714      	adds	r7, #20
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr
 800fc5a:	bf00      	nop
 800fc5c:	e000e3f0 	.word	0xe000e3f0
 800fc60:	20000ea0 	.word	0x20000ea0
 800fc64:	e000ed0c 	.word	0xe000ed0c
 800fc68:	20000ea4 	.word	0x20000ea4

0800fc6c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800fc74:	f7fe fd46 	bl	800e704 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 fd2b 	bl	80106d4 <malloc>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc82:	f7fe fd4d 	bl	800e720 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800fc86:	68fb      	ldr	r3, [r7, #12]
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3710      	adds	r7, #16
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
	if( pv )
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d006      	beq.n	800fcac <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800fc9e:	f7fe fd31 	bl	800e704 <vTaskSuspendAll>
		{
			free( pv );
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 fd1e 	bl	80106e4 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800fca8:	f7fe fd3a 	bl	800e720 <xTaskResumeAll>
	}
}
 800fcac:	bf00      	nop
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	4912      	ldr	r1, [pc, #72]	@ (800fd04 <MX_USB_DEVICE_Init+0x50>)
 800fcbc:	4812      	ldr	r0, [pc, #72]	@ (800fd08 <MX_USB_DEVICE_Init+0x54>)
 800fcbe:	f7fc f8c1 	bl	800be44 <USBD_Init>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d001      	beq.n	800fccc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fcc8:	f7f2 ff66 	bl	8002b98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fccc:	490f      	ldr	r1, [pc, #60]	@ (800fd0c <MX_USB_DEVICE_Init+0x58>)
 800fcce:	480e      	ldr	r0, [pc, #56]	@ (800fd08 <MX_USB_DEVICE_Init+0x54>)
 800fcd0:	f7fc f8e8 	bl	800bea4 <USBD_RegisterClass>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d001      	beq.n	800fcde <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fcda:	f7f2 ff5d 	bl	8002b98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fcde:	490c      	ldr	r1, [pc, #48]	@ (800fd10 <MX_USB_DEVICE_Init+0x5c>)
 800fce0:	4809      	ldr	r0, [pc, #36]	@ (800fd08 <MX_USB_DEVICE_Init+0x54>)
 800fce2:	f7fb ffd9 	bl	800bc98 <USBD_CDC_RegisterInterface>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d001      	beq.n	800fcf0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fcec:	f7f2 ff54 	bl	8002b98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fcf0:	4805      	ldr	r0, [pc, #20]	@ (800fd08 <MX_USB_DEVICE_Init+0x54>)
 800fcf2:	f7fc f90d 	bl	800bf10 <USBD_Start>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d001      	beq.n	800fd00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fcfc:	f7f2 ff4c 	bl	8002b98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fd00:	bf00      	nop
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	200000dc 	.word	0x200000dc
 800fd08:	20000ea8 	.word	0x20000ea8
 800fd0c:	20000044 	.word	0x20000044
 800fd10:	200000c8 	.word	0x200000c8

0800fd14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fd18:	2200      	movs	r2, #0
 800fd1a:	4905      	ldr	r1, [pc, #20]	@ (800fd30 <CDC_Init_FS+0x1c>)
 800fd1c:	4805      	ldr	r0, [pc, #20]	@ (800fd34 <CDC_Init_FS+0x20>)
 800fd1e:	f7fb ffd5 	bl	800bccc <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fd22:	4905      	ldr	r1, [pc, #20]	@ (800fd38 <CDC_Init_FS+0x24>)
 800fd24:	4803      	ldr	r0, [pc, #12]	@ (800fd34 <CDC_Init_FS+0x20>)
 800fd26:	f7fb fff3 	bl	800bd10 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800fd2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	20001584 	.word	0x20001584
 800fd34:	20000ea8 	.word	0x20000ea8
 800fd38:	20001184 	.word	0x20001184

0800fd3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800fd40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	4603      	mov	r3, r0
 800fd54:	6039      	str	r1, [r7, #0]
 800fd56:	71fb      	strb	r3, [r7, #7]
 800fd58:	4613      	mov	r3, r2
 800fd5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 800fd5c:	79fb      	ldrb	r3, [r7, #7]
 800fd5e:	2b23      	cmp	r3, #35	@ 0x23
 800fd60:	d84a      	bhi.n	800fdf8 <CDC_Control_FS+0xac>
 800fd62:	a201      	add	r2, pc, #4	@ (adr r2, 800fd68 <CDC_Control_FS+0x1c>)
 800fd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd68:	0800fdf9 	.word	0x0800fdf9
 800fd6c:	0800fdf9 	.word	0x0800fdf9
 800fd70:	0800fdf9 	.word	0x0800fdf9
 800fd74:	0800fdf9 	.word	0x0800fdf9
 800fd78:	0800fdf9 	.word	0x0800fdf9
 800fd7c:	0800fdf9 	.word	0x0800fdf9
 800fd80:	0800fdf9 	.word	0x0800fdf9
 800fd84:	0800fdf9 	.word	0x0800fdf9
 800fd88:	0800fdf9 	.word	0x0800fdf9
 800fd8c:	0800fdf9 	.word	0x0800fdf9
 800fd90:	0800fdf9 	.word	0x0800fdf9
 800fd94:	0800fdf9 	.word	0x0800fdf9
 800fd98:	0800fdf9 	.word	0x0800fdf9
 800fd9c:	0800fdf9 	.word	0x0800fdf9
 800fda0:	0800fdf9 	.word	0x0800fdf9
 800fda4:	0800fdf9 	.word	0x0800fdf9
 800fda8:	0800fdf9 	.word	0x0800fdf9
 800fdac:	0800fdf9 	.word	0x0800fdf9
 800fdb0:	0800fdf9 	.word	0x0800fdf9
 800fdb4:	0800fdf9 	.word	0x0800fdf9
 800fdb8:	0800fdf9 	.word	0x0800fdf9
 800fdbc:	0800fdf9 	.word	0x0800fdf9
 800fdc0:	0800fdf9 	.word	0x0800fdf9
 800fdc4:	0800fdf9 	.word	0x0800fdf9
 800fdc8:	0800fdf9 	.word	0x0800fdf9
 800fdcc:	0800fdf9 	.word	0x0800fdf9
 800fdd0:	0800fdf9 	.word	0x0800fdf9
 800fdd4:	0800fdf9 	.word	0x0800fdf9
 800fdd8:	0800fdf9 	.word	0x0800fdf9
 800fddc:	0800fdf9 	.word	0x0800fdf9
 800fde0:	0800fdf9 	.word	0x0800fdf9
 800fde4:	0800fdf9 	.word	0x0800fdf9
 800fde8:	0800fdf9 	.word	0x0800fdf9
 800fdec:	0800fdf9 	.word	0x0800fdf9
 800fdf0:	0800fdf9 	.word	0x0800fdf9
 800fdf4:	0800fdf9 	.word	0x0800fdf9
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800fdf8:	bf00      	nop
    }

    return (USBD_OK);
 800fdfa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr

0800fe08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fe12:	6879      	ldr	r1, [r7, #4]
 800fe14:	4805      	ldr	r0, [pc, #20]	@ (800fe2c <CDC_Receive_FS+0x24>)
 800fe16:	f7fb ff7b 	bl	800bd10 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fe1a:	4804      	ldr	r0, [pc, #16]	@ (800fe2c <CDC_Receive_FS+0x24>)
 800fe1c:	f7fb ffdc 	bl	800bdd8 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800fe20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	20000ea8 	.word	0x20000ea8

0800fe30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	460b      	mov	r3, r1
 800fe3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800fe40:	4b0d      	ldr	r3, [pc, #52]	@ (800fe78 <CDC_Transmit_FS+0x48>)
 800fe42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fe46:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800fe52:	2301      	movs	r3, #1
 800fe54:	e00b      	b.n	800fe6e <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fe56:	887b      	ldrh	r3, [r7, #2]
 800fe58:	461a      	mov	r2, r3
 800fe5a:	6879      	ldr	r1, [r7, #4]
 800fe5c:	4806      	ldr	r0, [pc, #24]	@ (800fe78 <CDC_Transmit_FS+0x48>)
 800fe5e:	f7fb ff35 	bl	800bccc <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fe62:	4805      	ldr	r0, [pc, #20]	@ (800fe78 <CDC_Transmit_FS+0x48>)
 800fe64:	f7fb ff72 	bl	800bd4c <USBD_CDC_TransmitPacket>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fe6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	20000ea8 	.word	0x20000ea8

0800fe7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b087      	sub	sp, #28
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	4613      	mov	r3, r2
 800fe88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fe8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	371c      	adds	r7, #28
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
	...

0800fea0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	4603      	mov	r3, r0
 800fea8:	6039      	str	r1, [r7, #0]
 800feaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	2212      	movs	r2, #18
 800feb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800feb2:	4b03      	ldr	r3, [pc, #12]	@ (800fec0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	370c      	adds	r7, #12
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr
 800fec0:	200000f8 	.word	0x200000f8

0800fec4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	4603      	mov	r3, r0
 800fecc:	6039      	str	r1, [r7, #0]
 800fece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	2204      	movs	r2, #4
 800fed4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fed6:	4b03      	ldr	r3, [pc, #12]	@ (800fee4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fed8:	4618      	mov	r0, r3
 800feda:	370c      	adds	r7, #12
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr
 800fee4:	2000010c 	.word	0x2000010c

0800fee8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	4603      	mov	r3, r0
 800fef0:	6039      	str	r1, [r7, #0]
 800fef2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fef4:	79fb      	ldrb	r3, [r7, #7]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d105      	bne.n	800ff06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fefa:	683a      	ldr	r2, [r7, #0]
 800fefc:	4907      	ldr	r1, [pc, #28]	@ (800ff1c <USBD_FS_ProductStrDescriptor+0x34>)
 800fefe:	4808      	ldr	r0, [pc, #32]	@ (800ff20 <USBD_FS_ProductStrDescriptor+0x38>)
 800ff00:	f7fd f9b0 	bl	800d264 <USBD_GetString>
 800ff04:	e004      	b.n	800ff10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ff06:	683a      	ldr	r2, [r7, #0]
 800ff08:	4904      	ldr	r1, [pc, #16]	@ (800ff1c <USBD_FS_ProductStrDescriptor+0x34>)
 800ff0a:	4805      	ldr	r0, [pc, #20]	@ (800ff20 <USBD_FS_ProductStrDescriptor+0x38>)
 800ff0c:	f7fd f9aa 	bl	800d264 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff10:	4b02      	ldr	r3, [pc, #8]	@ (800ff1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3708      	adds	r7, #8
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	20001984 	.word	0x20001984
 800ff20:	08013df4 	.word	0x08013df4

0800ff24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	6039      	str	r1, [r7, #0]
 800ff2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ff30:	683a      	ldr	r2, [r7, #0]
 800ff32:	4904      	ldr	r1, [pc, #16]	@ (800ff44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ff34:	4804      	ldr	r0, [pc, #16]	@ (800ff48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ff36:	f7fd f995 	bl	800d264 <USBD_GetString>
  return USBD_StrDesc;
 800ff3a:	4b02      	ldr	r3, [pc, #8]	@ (800ff44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	20001984 	.word	0x20001984
 800ff48:	08013e0c 	.word	0x08013e0c

0800ff4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	4603      	mov	r3, r0
 800ff54:	6039      	str	r1, [r7, #0]
 800ff56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	221a      	movs	r2, #26
 800ff5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ff5e:	f000 f843 	bl	800ffe8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ff62:	4b02      	ldr	r3, [pc, #8]	@ (800ff6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3708      	adds	r7, #8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	20000110 	.word	0x20000110

0800ff70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	4603      	mov	r3, r0
 800ff78:	6039      	str	r1, [r7, #0]
 800ff7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ff7c:	79fb      	ldrb	r3, [r7, #7]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d105      	bne.n	800ff8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ff82:	683a      	ldr	r2, [r7, #0]
 800ff84:	4907      	ldr	r1, [pc, #28]	@ (800ffa4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ff86:	4808      	ldr	r0, [pc, #32]	@ (800ffa8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ff88:	f7fd f96c 	bl	800d264 <USBD_GetString>
 800ff8c:	e004      	b.n	800ff98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	4904      	ldr	r1, [pc, #16]	@ (800ffa4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ff92:	4805      	ldr	r0, [pc, #20]	@ (800ffa8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ff94:	f7fd f966 	bl	800d264 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff98:	4b02      	ldr	r3, [pc, #8]	@ (800ffa4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3708      	adds	r7, #8
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20001984 	.word	0x20001984
 800ffa8:	08013e20 	.word	0x08013e20

0800ffac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	6039      	str	r1, [r7, #0]
 800ffb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffb8:	79fb      	ldrb	r3, [r7, #7]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d105      	bne.n	800ffca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ffbe:	683a      	ldr	r2, [r7, #0]
 800ffc0:	4907      	ldr	r1, [pc, #28]	@ (800ffe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ffc2:	4808      	ldr	r0, [pc, #32]	@ (800ffe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ffc4:	f7fd f94e 	bl	800d264 <USBD_GetString>
 800ffc8:	e004      	b.n	800ffd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	4904      	ldr	r1, [pc, #16]	@ (800ffe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ffce:	4805      	ldr	r0, [pc, #20]	@ (800ffe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ffd0:	f7fd f948 	bl	800d264 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffd4:	4b02      	ldr	r3, [pc, #8]	@ (800ffe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3708      	adds	r7, #8
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	20001984 	.word	0x20001984
 800ffe4:	08013e2c 	.word	0x08013e2c

0800ffe8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ffee:	4b0f      	ldr	r3, [pc, #60]	@ (801002c <Get_SerialNum+0x44>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fff4:	4b0e      	ldr	r3, [pc, #56]	@ (8010030 <Get_SerialNum+0x48>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fffa:	4b0e      	ldr	r3, [pc, #56]	@ (8010034 <Get_SerialNum+0x4c>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	4413      	add	r3, r2
 8010006:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d009      	beq.n	8010022 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801000e:	2208      	movs	r2, #8
 8010010:	4909      	ldr	r1, [pc, #36]	@ (8010038 <Get_SerialNum+0x50>)
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f000 f814 	bl	8010040 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010018:	2204      	movs	r2, #4
 801001a:	4908      	ldr	r1, [pc, #32]	@ (801003c <Get_SerialNum+0x54>)
 801001c:	68b8      	ldr	r0, [r7, #8]
 801001e:	f000 f80f 	bl	8010040 <IntToUnicode>
  }
}
 8010022:	bf00      	nop
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	1fff7a10 	.word	0x1fff7a10
 8010030:	1fff7a14 	.word	0x1fff7a14
 8010034:	1fff7a18 	.word	0x1fff7a18
 8010038:	20000112 	.word	0x20000112
 801003c:	20000122 	.word	0x20000122

08010040 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010040:	b480      	push	{r7}
 8010042:	b087      	sub	sp, #28
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	4613      	mov	r3, r2
 801004c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801004e:	2300      	movs	r3, #0
 8010050:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010052:	2300      	movs	r3, #0
 8010054:	75fb      	strb	r3, [r7, #23]
 8010056:	e027      	b.n	80100a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	0f1b      	lsrs	r3, r3, #28
 801005c:	2b09      	cmp	r3, #9
 801005e:	d80b      	bhi.n	8010078 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	0f1b      	lsrs	r3, r3, #28
 8010064:	b2da      	uxtb	r2, r3
 8010066:	7dfb      	ldrb	r3, [r7, #23]
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	4619      	mov	r1, r3
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	440b      	add	r3, r1
 8010070:	3230      	adds	r2, #48	@ 0x30
 8010072:	b2d2      	uxtb	r2, r2
 8010074:	701a      	strb	r2, [r3, #0]
 8010076:	e00a      	b.n	801008e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	0f1b      	lsrs	r3, r3, #28
 801007c:	b2da      	uxtb	r2, r3
 801007e:	7dfb      	ldrb	r3, [r7, #23]
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	4619      	mov	r1, r3
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	440b      	add	r3, r1
 8010088:	3237      	adds	r2, #55	@ 0x37
 801008a:	b2d2      	uxtb	r2, r2
 801008c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	011b      	lsls	r3, r3, #4
 8010092:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010094:	7dfb      	ldrb	r3, [r7, #23]
 8010096:	005b      	lsls	r3, r3, #1
 8010098:	3301      	adds	r3, #1
 801009a:	68ba      	ldr	r2, [r7, #8]
 801009c:	4413      	add	r3, r2
 801009e:	2200      	movs	r2, #0
 80100a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80100a2:	7dfb      	ldrb	r3, [r7, #23]
 80100a4:	3301      	adds	r3, #1
 80100a6:	75fb      	strb	r3, [r7, #23]
 80100a8:	7dfa      	ldrb	r2, [r7, #23]
 80100aa:	79fb      	ldrb	r3, [r7, #7]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d3d3      	bcc.n	8010058 <IntToUnicode+0x18>
  }
}
 80100b0:	bf00      	nop
 80100b2:	bf00      	nop
 80100b4:	371c      	adds	r7, #28
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr
	...

080100c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b08a      	sub	sp, #40	@ 0x28
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100c8:	f107 0314 	add.w	r3, r7, #20
 80100cc:	2200      	movs	r2, #0
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	605a      	str	r2, [r3, #4]
 80100d2:	609a      	str	r2, [r3, #8]
 80100d4:	60da      	str	r2, [r3, #12]
 80100d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80100e0:	d13a      	bne.n	8010158 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80100e2:	2300      	movs	r3, #0
 80100e4:	613b      	str	r3, [r7, #16]
 80100e6:	4b1e      	ldr	r3, [pc, #120]	@ (8010160 <HAL_PCD_MspInit+0xa0>)
 80100e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100ea:	4a1d      	ldr	r2, [pc, #116]	@ (8010160 <HAL_PCD_MspInit+0xa0>)
 80100ec:	f043 0301 	orr.w	r3, r3, #1
 80100f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80100f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010160 <HAL_PCD_MspInit+0xa0>)
 80100f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100f6:	f003 0301 	and.w	r3, r3, #1
 80100fa:	613b      	str	r3, [r7, #16]
 80100fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80100fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010104:	2302      	movs	r3, #2
 8010106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010108:	2300      	movs	r3, #0
 801010a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801010c:	2303      	movs	r3, #3
 801010e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010110:	230a      	movs	r3, #10
 8010112:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010114:	f107 0314 	add.w	r3, r7, #20
 8010118:	4619      	mov	r1, r3
 801011a:	4812      	ldr	r0, [pc, #72]	@ (8010164 <HAL_PCD_MspInit+0xa4>)
 801011c:	f7f5 fb84 	bl	8005828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010120:	4b0f      	ldr	r3, [pc, #60]	@ (8010160 <HAL_PCD_MspInit+0xa0>)
 8010122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010124:	4a0e      	ldr	r2, [pc, #56]	@ (8010160 <HAL_PCD_MspInit+0xa0>)
 8010126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801012a:	6353      	str	r3, [r2, #52]	@ 0x34
 801012c:	2300      	movs	r3, #0
 801012e:	60fb      	str	r3, [r7, #12]
 8010130:	4b0b      	ldr	r3, [pc, #44]	@ (8010160 <HAL_PCD_MspInit+0xa0>)
 8010132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010134:	4a0a      	ldr	r2, [pc, #40]	@ (8010160 <HAL_PCD_MspInit+0xa0>)
 8010136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801013a:	6453      	str	r3, [r2, #68]	@ 0x44
 801013c:	4b08      	ldr	r3, [pc, #32]	@ (8010160 <HAL_PCD_MspInit+0xa0>)
 801013e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010144:	60fb      	str	r3, [r7, #12]
 8010146:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 8010148:	2200      	movs	r2, #0
 801014a:	2102      	movs	r1, #2
 801014c:	2043      	movs	r0, #67	@ 0x43
 801014e:	f7f5 f94a 	bl	80053e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010152:	2043      	movs	r0, #67	@ 0x43
 8010154:	f7f5 f963 	bl	800541e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010158:	bf00      	nop
 801015a:	3728      	adds	r7, #40	@ 0x28
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	40023800 	.word	0x40023800
 8010164:	40020000 	.word	0x40020000

08010168 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801017c:	4619      	mov	r1, r3
 801017e:	4610      	mov	r0, r2
 8010180:	f7fb ff13 	bl	800bfaa <USBD_LL_SetupStage>
}
 8010184:	bf00      	nop
 8010186:	3708      	adds	r7, #8
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	460b      	mov	r3, r1
 8010196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801019e:	78fa      	ldrb	r2, [r7, #3]
 80101a0:	6879      	ldr	r1, [r7, #4]
 80101a2:	4613      	mov	r3, r2
 80101a4:	00db      	lsls	r3, r3, #3
 80101a6:	4413      	add	r3, r2
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	440b      	add	r3, r1
 80101ac:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	78fb      	ldrb	r3, [r7, #3]
 80101b4:	4619      	mov	r1, r3
 80101b6:	f7fb ff4d 	bl	800c054 <USBD_LL_DataOutStage>
}
 80101ba:	bf00      	nop
 80101bc:	3708      	adds	r7, #8
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}

080101c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b082      	sub	sp, #8
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
 80101ca:	460b      	mov	r3, r1
 80101cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 80101d4:	78fa      	ldrb	r2, [r7, #3]
 80101d6:	6879      	ldr	r1, [r7, #4]
 80101d8:	4613      	mov	r3, r2
 80101da:	00db      	lsls	r3, r3, #3
 80101dc:	4413      	add	r3, r2
 80101de:	009b      	lsls	r3, r3, #2
 80101e0:	440b      	add	r3, r1
 80101e2:	334c      	adds	r3, #76	@ 0x4c
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	78fb      	ldrb	r3, [r7, #3]
 80101e8:	4619      	mov	r1, r3
 80101ea:	f7fb ffe6 	bl	800c1ba <USBD_LL_DataInStage>
}
 80101ee:	bf00      	nop
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b082      	sub	sp, #8
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8010204:	4618      	mov	r0, r3
 8010206:	f7fc f91a 	bl	800c43e <USBD_LL_SOF>
}
 801020a:	bf00      	nop
 801020c:	3708      	adds	r7, #8
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}

08010212 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010212:	b580      	push	{r7, lr}
 8010214:	b084      	sub	sp, #16
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801021a:	2301      	movs	r3, #1
 801021c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	2b02      	cmp	r3, #2
 8010224:	d001      	beq.n	801022a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010226:	f7f2 fcb7 	bl	8002b98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8010230:	7bfa      	ldrb	r2, [r7, #15]
 8010232:	4611      	mov	r1, r2
 8010234:	4618      	mov	r0, r3
 8010236:	f7fc f8c4 	bl	800c3c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8010240:	4618      	mov	r0, r3
 8010242:	f7fc f86c 	bl	800c31e <USBD_LL_Reset>
}
 8010246:	bf00      	nop
 8010248:	3710      	adds	r7, #16
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
	...

08010250 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801025e:	4618      	mov	r0, r3
 8010260:	f7fc f8bf 	bl	800c3e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	6812      	ldr	r2, [r2, #0]
 8010272:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010276:	f043 0301 	orr.w	r3, r3, #1
 801027a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6a1b      	ldr	r3, [r3, #32]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d005      	beq.n	8010290 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010284:	4b04      	ldr	r3, [pc, #16]	@ (8010298 <HAL_PCD_SuspendCallback+0x48>)
 8010286:	691b      	ldr	r3, [r3, #16]
 8010288:	4a03      	ldr	r2, [pc, #12]	@ (8010298 <HAL_PCD_SuspendCallback+0x48>)
 801028a:	f043 0306 	orr.w	r3, r3, #6
 801028e:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8010290:	bf00      	nop
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	e000ed00 	.word	0xe000ed00

0801029c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fc f8af 	bl	800c40e <USBD_LL_Resume>
}
 80102b0:	bf00      	nop
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	460b      	mov	r3, r1
 80102c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80102ca:	78fa      	ldrb	r2, [r7, #3]
 80102cc:	4611      	mov	r1, r2
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fc f907 	bl	800c4e2 <USBD_LL_IsoOUTIncomplete>
}
 80102d4:	bf00      	nop
 80102d6:	3708      	adds	r7, #8
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	460b      	mov	r3, r1
 80102e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80102ee:	78fa      	ldrb	r2, [r7, #3]
 80102f0:	4611      	mov	r1, r2
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7fc f8c3 	bl	800c47e <USBD_LL_IsoINIncomplete>
}
 80102f8:	bf00      	nop
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b082      	sub	sp, #8
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801030e:	4618      	mov	r0, r3
 8010310:	f7fc f919 	bl	800c546 <USBD_LL_DevConnected>
}
 8010314:	bf00      	nop
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801032a:	4618      	mov	r0, r3
 801032c:	f7fc f916 	bl	800c55c <USBD_LL_DevDisconnected>
}
 8010330:	bf00      	nop
 8010332:	3708      	adds	r7, #8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d13c      	bne.n	80103c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010348:	4a20      	ldr	r2, [pc, #128]	@ (80103cc <USBD_LL_Init+0x94>)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	4a1e      	ldr	r2, [pc, #120]	@ (80103cc <USBD_LL_Init+0x94>)
 8010354:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010358:	4b1c      	ldr	r3, [pc, #112]	@ (80103cc <USBD_LL_Init+0x94>)
 801035a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801035e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010360:	4b1a      	ldr	r3, [pc, #104]	@ (80103cc <USBD_LL_Init+0x94>)
 8010362:	2204      	movs	r2, #4
 8010364:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010366:	4b19      	ldr	r3, [pc, #100]	@ (80103cc <USBD_LL_Init+0x94>)
 8010368:	2202      	movs	r2, #2
 801036a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801036c:	4b17      	ldr	r3, [pc, #92]	@ (80103cc <USBD_LL_Init+0x94>)
 801036e:	2200      	movs	r2, #0
 8010370:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010372:	4b16      	ldr	r3, [pc, #88]	@ (80103cc <USBD_LL_Init+0x94>)
 8010374:	2202      	movs	r2, #2
 8010376:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010378:	4b14      	ldr	r3, [pc, #80]	@ (80103cc <USBD_LL_Init+0x94>)
 801037a:	2200      	movs	r2, #0
 801037c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801037e:	4b13      	ldr	r3, [pc, #76]	@ (80103cc <USBD_LL_Init+0x94>)
 8010380:	2200      	movs	r2, #0
 8010382:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010384:	4b11      	ldr	r3, [pc, #68]	@ (80103cc <USBD_LL_Init+0x94>)
 8010386:	2200      	movs	r2, #0
 8010388:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801038a:	4b10      	ldr	r3, [pc, #64]	@ (80103cc <USBD_LL_Init+0x94>)
 801038c:	2200      	movs	r2, #0
 801038e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010390:	4b0e      	ldr	r3, [pc, #56]	@ (80103cc <USBD_LL_Init+0x94>)
 8010392:	2200      	movs	r2, #0
 8010394:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010396:	480d      	ldr	r0, [pc, #52]	@ (80103cc <USBD_LL_Init+0x94>)
 8010398:	f7f6 fbbb 	bl	8006b12 <HAL_PCD_Init>
 801039c:	4603      	mov	r3, r0
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d001      	beq.n	80103a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80103a2:	f7f2 fbf9 	bl	8002b98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80103a6:	2180      	movs	r1, #128	@ 0x80
 80103a8:	4808      	ldr	r0, [pc, #32]	@ (80103cc <USBD_LL_Init+0x94>)
 80103aa:	f7f7 fe12 	bl	8007fd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80103ae:	2240      	movs	r2, #64	@ 0x40
 80103b0:	2100      	movs	r1, #0
 80103b2:	4806      	ldr	r0, [pc, #24]	@ (80103cc <USBD_LL_Init+0x94>)
 80103b4:	f7f7 fdc6 	bl	8007f44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80103b8:	2280      	movs	r2, #128	@ 0x80
 80103ba:	2101      	movs	r1, #1
 80103bc:	4803      	ldr	r0, [pc, #12]	@ (80103cc <USBD_LL_Init+0x94>)
 80103be:	f7f7 fdc1 	bl	8007f44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80103c2:	2300      	movs	r3, #0
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	20001b84 	.word	0x20001b84

080103d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103d8:	2300      	movs	r3, #0
 80103da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103dc:	2300      	movs	r3, #0
 80103de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7f6 fcb0 	bl	8006d4c <HAL_PCD_Start>
 80103ec:	4603      	mov	r3, r0
 80103ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103f0:	7bfb      	ldrb	r3, [r7, #15]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f000 f942 	bl	801067c <USBD_Get_USB_Status>
 80103f8:	4603      	mov	r3, r0
 80103fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b084      	sub	sp, #16
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
 801040e:	4608      	mov	r0, r1
 8010410:	4611      	mov	r1, r2
 8010412:	461a      	mov	r2, r3
 8010414:	4603      	mov	r3, r0
 8010416:	70fb      	strb	r3, [r7, #3]
 8010418:	460b      	mov	r3, r1
 801041a:	70bb      	strb	r3, [r7, #2]
 801041c:	4613      	mov	r3, r2
 801041e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010420:	2300      	movs	r3, #0
 8010422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010424:	2300      	movs	r3, #0
 8010426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801042e:	78bb      	ldrb	r3, [r7, #2]
 8010430:	883a      	ldrh	r2, [r7, #0]
 8010432:	78f9      	ldrb	r1, [r7, #3]
 8010434:	f7f7 f981 	bl	800773a <HAL_PCD_EP_Open>
 8010438:	4603      	mov	r3, r0
 801043a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801043c:	7bfb      	ldrb	r3, [r7, #15]
 801043e:	4618      	mov	r0, r3
 8010440:	f000 f91c 	bl	801067c <USBD_Get_USB_Status>
 8010444:	4603      	mov	r3, r0
 8010446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010448:	7bbb      	ldrb	r3, [r7, #14]
}
 801044a:	4618      	mov	r0, r3
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b084      	sub	sp, #16
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
 801045a:	460b      	mov	r3, r1
 801045c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801045e:	2300      	movs	r3, #0
 8010460:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010462:	2300      	movs	r3, #0
 8010464:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801046c:	78fa      	ldrb	r2, [r7, #3]
 801046e:	4611      	mov	r1, r2
 8010470:	4618      	mov	r0, r3
 8010472:	f7f7 f9ca 	bl	800780a <HAL_PCD_EP_Close>
 8010476:	4603      	mov	r3, r0
 8010478:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801047a:	7bfb      	ldrb	r3, [r7, #15]
 801047c:	4618      	mov	r0, r3
 801047e:	f000 f8fd 	bl	801067c <USBD_Get_USB_Status>
 8010482:	4603      	mov	r3, r0
 8010484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010486:	7bbb      	ldrb	r3, [r7, #14]
}
 8010488:	4618      	mov	r0, r3
 801048a:	3710      	adds	r7, #16
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}

08010490 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	460b      	mov	r3, r1
 801049a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104a0:	2300      	movs	r3, #0
 80104a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80104aa:	78fa      	ldrb	r2, [r7, #3]
 80104ac:	4611      	mov	r1, r2
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7f7 faa2 	bl	80079f8 <HAL_PCD_EP_SetStall>
 80104b4:	4603      	mov	r3, r0
 80104b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104b8:	7bfb      	ldrb	r3, [r7, #15]
 80104ba:	4618      	mov	r0, r3
 80104bc:	f000 f8de 	bl	801067c <USBD_Get_USB_Status>
 80104c0:	4603      	mov	r3, r0
 80104c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b084      	sub	sp, #16
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
 80104d6:	460b      	mov	r3, r1
 80104d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104da:	2300      	movs	r3, #0
 80104dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80104e8:	78fa      	ldrb	r2, [r7, #3]
 80104ea:	4611      	mov	r1, r2
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7f7 fae7 	bl	8007ac0 <HAL_PCD_EP_ClrStall>
 80104f2:	4603      	mov	r3, r0
 80104f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104f6:	7bfb      	ldrb	r3, [r7, #15]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f000 f8bf 	bl	801067c <USBD_Get_USB_Status>
 80104fe:	4603      	mov	r3, r0
 8010500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010502:	7bbb      	ldrb	r3, [r7, #14]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801050c:	b480      	push	{r7}
 801050e:	b085      	sub	sp, #20
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	460b      	mov	r3, r1
 8010516:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801051e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010524:	2b00      	cmp	r3, #0
 8010526:	da0b      	bge.n	8010540 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010528:	78fb      	ldrb	r3, [r7, #3]
 801052a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801052e:	68f9      	ldr	r1, [r7, #12]
 8010530:	4613      	mov	r3, r2
 8010532:	00db      	lsls	r3, r3, #3
 8010534:	4413      	add	r3, r2
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	440b      	add	r3, r1
 801053a:	333e      	adds	r3, #62	@ 0x3e
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	e00b      	b.n	8010558 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010540:	78fb      	ldrb	r3, [r7, #3]
 8010542:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010546:	68f9      	ldr	r1, [r7, #12]
 8010548:	4613      	mov	r3, r2
 801054a:	00db      	lsls	r3, r3, #3
 801054c:	4413      	add	r3, r2
 801054e:	009b      	lsls	r3, r3, #2
 8010550:	440b      	add	r3, r1
 8010552:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8010556:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010558:	4618      	mov	r0, r3
 801055a:	3714      	adds	r7, #20
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr

08010564 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	460b      	mov	r3, r1
 801056e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010574:	2300      	movs	r3, #0
 8010576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801057e:	78fa      	ldrb	r2, [r7, #3]
 8010580:	4611      	mov	r1, r2
 8010582:	4618      	mov	r0, r3
 8010584:	f7f7 f8b4 	bl	80076f0 <HAL_PCD_SetAddress>
 8010588:	4603      	mov	r3, r0
 801058a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801058c:	7bfb      	ldrb	r3, [r7, #15]
 801058e:	4618      	mov	r0, r3
 8010590:	f000 f874 	bl	801067c <USBD_Get_USB_Status>
 8010594:	4603      	mov	r3, r0
 8010596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010598:	7bbb      	ldrb	r3, [r7, #14]
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b086      	sub	sp, #24
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	60f8      	str	r0, [r7, #12]
 80105aa:	607a      	str	r2, [r7, #4]
 80105ac:	603b      	str	r3, [r7, #0]
 80105ae:	460b      	mov	r3, r1
 80105b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105b2:	2300      	movs	r3, #0
 80105b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105b6:	2300      	movs	r3, #0
 80105b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80105c0:	7af9      	ldrb	r1, [r7, #11]
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	f7f7 f9cd 	bl	8007964 <HAL_PCD_EP_Transmit>
 80105ca:	4603      	mov	r3, r0
 80105cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105ce:	7dfb      	ldrb	r3, [r7, #23]
 80105d0:	4618      	mov	r0, r3
 80105d2:	f000 f853 	bl	801067c <USBD_Get_USB_Status>
 80105d6:	4603      	mov	r3, r0
 80105d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80105da:	7dbb      	ldrb	r3, [r7, #22]
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3718      	adds	r7, #24
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	607a      	str	r2, [r7, #4]
 80105ee:	603b      	str	r3, [r7, #0]
 80105f0:	460b      	mov	r3, r1
 80105f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105f4:	2300      	movs	r3, #0
 80105f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105f8:	2300      	movs	r3, #0
 80105fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010602:	7af9      	ldrb	r1, [r7, #11]
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	f7f7 f949 	bl	800789e <HAL_PCD_EP_Receive>
 801060c:	4603      	mov	r3, r0
 801060e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010610:	7dfb      	ldrb	r3, [r7, #23]
 8010612:	4618      	mov	r0, r3
 8010614:	f000 f832 	bl	801067c <USBD_Get_USB_Status>
 8010618:	4603      	mov	r3, r0
 801061a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801061c:	7dbb      	ldrb	r3, [r7, #22]
}
 801061e:	4618      	mov	r0, r3
 8010620:	3718      	adds	r7, #24
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}

08010626 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010626:	b580      	push	{r7, lr}
 8010628:	b082      	sub	sp, #8
 801062a:	af00      	add	r7, sp, #0
 801062c:	6078      	str	r0, [r7, #4]
 801062e:	460b      	mov	r3, r1
 8010630:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010638:	78fa      	ldrb	r2, [r7, #3]
 801063a:	4611      	mov	r1, r2
 801063c:	4618      	mov	r0, r3
 801063e:	f7f7 f979 	bl	8007934 <HAL_PCD_EP_GetRxCount>
 8010642:	4603      	mov	r3, r0
}
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010654:	4b03      	ldr	r3, [pc, #12]	@ (8010664 <USBD_static_malloc+0x18>)
}
 8010656:	4618      	mov	r0, r3
 8010658:	370c      	adds	r7, #12
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr
 8010662:	bf00      	nop
 8010664:	20002090 	.word	0x20002090

08010668 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010668:	b480      	push	{r7}
 801066a:	b083      	sub	sp, #12
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]

}
 8010670:	bf00      	nop
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801067c:	b480      	push	{r7}
 801067e:	b085      	sub	sp, #20
 8010680:	af00      	add	r7, sp, #0
 8010682:	4603      	mov	r3, r0
 8010684:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010686:	2300      	movs	r3, #0
 8010688:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801068a:	79fb      	ldrb	r3, [r7, #7]
 801068c:	2b03      	cmp	r3, #3
 801068e:	d817      	bhi.n	80106c0 <USBD_Get_USB_Status+0x44>
 8010690:	a201      	add	r2, pc, #4	@ (adr r2, 8010698 <USBD_Get_USB_Status+0x1c>)
 8010692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010696:	bf00      	nop
 8010698:	080106a9 	.word	0x080106a9
 801069c:	080106af 	.word	0x080106af
 80106a0:	080106b5 	.word	0x080106b5
 80106a4:	080106bb 	.word	0x080106bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80106a8:	2300      	movs	r3, #0
 80106aa:	73fb      	strb	r3, [r7, #15]
    break;
 80106ac:	e00b      	b.n	80106c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80106ae:	2303      	movs	r3, #3
 80106b0:	73fb      	strb	r3, [r7, #15]
    break;
 80106b2:	e008      	b.n	80106c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80106b4:	2301      	movs	r3, #1
 80106b6:	73fb      	strb	r3, [r7, #15]
    break;
 80106b8:	e005      	b.n	80106c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80106ba:	2303      	movs	r3, #3
 80106bc:	73fb      	strb	r3, [r7, #15]
    break;
 80106be:	e002      	b.n	80106c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80106c0:	2303      	movs	r3, #3
 80106c2:	73fb      	strb	r3, [r7, #15]
    break;
 80106c4:	bf00      	nop
  }
  return usb_status;
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3714      	adds	r7, #20
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <malloc>:
 80106d4:	4b02      	ldr	r3, [pc, #8]	@ (80106e0 <malloc+0xc>)
 80106d6:	4601      	mov	r1, r0
 80106d8:	6818      	ldr	r0, [r3, #0]
 80106da:	f000 b82d 	b.w	8010738 <_malloc_r>
 80106de:	bf00      	nop
 80106e0:	20000138 	.word	0x20000138

080106e4 <free>:
 80106e4:	4b02      	ldr	r3, [pc, #8]	@ (80106f0 <free+0xc>)
 80106e6:	4601      	mov	r1, r0
 80106e8:	6818      	ldr	r0, [r3, #0]
 80106ea:	f001 bd29 	b.w	8012140 <_free_r>
 80106ee:	bf00      	nop
 80106f0:	20000138 	.word	0x20000138

080106f4 <sbrk_aligned>:
 80106f4:	b570      	push	{r4, r5, r6, lr}
 80106f6:	4e0f      	ldr	r6, [pc, #60]	@ (8010734 <sbrk_aligned+0x40>)
 80106f8:	460c      	mov	r4, r1
 80106fa:	6831      	ldr	r1, [r6, #0]
 80106fc:	4605      	mov	r5, r0
 80106fe:	b911      	cbnz	r1, 8010706 <sbrk_aligned+0x12>
 8010700:	f000 fe72 	bl	80113e8 <_sbrk_r>
 8010704:	6030      	str	r0, [r6, #0]
 8010706:	4621      	mov	r1, r4
 8010708:	4628      	mov	r0, r5
 801070a:	f000 fe6d 	bl	80113e8 <_sbrk_r>
 801070e:	1c43      	adds	r3, r0, #1
 8010710:	d103      	bne.n	801071a <sbrk_aligned+0x26>
 8010712:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010716:	4620      	mov	r0, r4
 8010718:	bd70      	pop	{r4, r5, r6, pc}
 801071a:	1cc4      	adds	r4, r0, #3
 801071c:	f024 0403 	bic.w	r4, r4, #3
 8010720:	42a0      	cmp	r0, r4
 8010722:	d0f8      	beq.n	8010716 <sbrk_aligned+0x22>
 8010724:	1a21      	subs	r1, r4, r0
 8010726:	4628      	mov	r0, r5
 8010728:	f000 fe5e 	bl	80113e8 <_sbrk_r>
 801072c:	3001      	adds	r0, #1
 801072e:	d1f2      	bne.n	8010716 <sbrk_aligned+0x22>
 8010730:	e7ef      	b.n	8010712 <sbrk_aligned+0x1e>
 8010732:	bf00      	nop
 8010734:	200022b0 	.word	0x200022b0

08010738 <_malloc_r>:
 8010738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801073c:	1ccd      	adds	r5, r1, #3
 801073e:	f025 0503 	bic.w	r5, r5, #3
 8010742:	3508      	adds	r5, #8
 8010744:	2d0c      	cmp	r5, #12
 8010746:	bf38      	it	cc
 8010748:	250c      	movcc	r5, #12
 801074a:	2d00      	cmp	r5, #0
 801074c:	4606      	mov	r6, r0
 801074e:	db01      	blt.n	8010754 <_malloc_r+0x1c>
 8010750:	42a9      	cmp	r1, r5
 8010752:	d904      	bls.n	801075e <_malloc_r+0x26>
 8010754:	230c      	movs	r3, #12
 8010756:	6033      	str	r3, [r6, #0]
 8010758:	2000      	movs	r0, #0
 801075a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801075e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010834 <_malloc_r+0xfc>
 8010762:	f000 f869 	bl	8010838 <__malloc_lock>
 8010766:	f8d8 3000 	ldr.w	r3, [r8]
 801076a:	461c      	mov	r4, r3
 801076c:	bb44      	cbnz	r4, 80107c0 <_malloc_r+0x88>
 801076e:	4629      	mov	r1, r5
 8010770:	4630      	mov	r0, r6
 8010772:	f7ff ffbf 	bl	80106f4 <sbrk_aligned>
 8010776:	1c43      	adds	r3, r0, #1
 8010778:	4604      	mov	r4, r0
 801077a:	d158      	bne.n	801082e <_malloc_r+0xf6>
 801077c:	f8d8 4000 	ldr.w	r4, [r8]
 8010780:	4627      	mov	r7, r4
 8010782:	2f00      	cmp	r7, #0
 8010784:	d143      	bne.n	801080e <_malloc_r+0xd6>
 8010786:	2c00      	cmp	r4, #0
 8010788:	d04b      	beq.n	8010822 <_malloc_r+0xea>
 801078a:	6823      	ldr	r3, [r4, #0]
 801078c:	4639      	mov	r1, r7
 801078e:	4630      	mov	r0, r6
 8010790:	eb04 0903 	add.w	r9, r4, r3
 8010794:	f000 fe28 	bl	80113e8 <_sbrk_r>
 8010798:	4581      	cmp	r9, r0
 801079a:	d142      	bne.n	8010822 <_malloc_r+0xea>
 801079c:	6821      	ldr	r1, [r4, #0]
 801079e:	1a6d      	subs	r5, r5, r1
 80107a0:	4629      	mov	r1, r5
 80107a2:	4630      	mov	r0, r6
 80107a4:	f7ff ffa6 	bl	80106f4 <sbrk_aligned>
 80107a8:	3001      	adds	r0, #1
 80107aa:	d03a      	beq.n	8010822 <_malloc_r+0xea>
 80107ac:	6823      	ldr	r3, [r4, #0]
 80107ae:	442b      	add	r3, r5
 80107b0:	6023      	str	r3, [r4, #0]
 80107b2:	f8d8 3000 	ldr.w	r3, [r8]
 80107b6:	685a      	ldr	r2, [r3, #4]
 80107b8:	bb62      	cbnz	r2, 8010814 <_malloc_r+0xdc>
 80107ba:	f8c8 7000 	str.w	r7, [r8]
 80107be:	e00f      	b.n	80107e0 <_malloc_r+0xa8>
 80107c0:	6822      	ldr	r2, [r4, #0]
 80107c2:	1b52      	subs	r2, r2, r5
 80107c4:	d420      	bmi.n	8010808 <_malloc_r+0xd0>
 80107c6:	2a0b      	cmp	r2, #11
 80107c8:	d917      	bls.n	80107fa <_malloc_r+0xc2>
 80107ca:	1961      	adds	r1, r4, r5
 80107cc:	42a3      	cmp	r3, r4
 80107ce:	6025      	str	r5, [r4, #0]
 80107d0:	bf18      	it	ne
 80107d2:	6059      	strne	r1, [r3, #4]
 80107d4:	6863      	ldr	r3, [r4, #4]
 80107d6:	bf08      	it	eq
 80107d8:	f8c8 1000 	streq.w	r1, [r8]
 80107dc:	5162      	str	r2, [r4, r5]
 80107de:	604b      	str	r3, [r1, #4]
 80107e0:	4630      	mov	r0, r6
 80107e2:	f000 f82f 	bl	8010844 <__malloc_unlock>
 80107e6:	f104 000b 	add.w	r0, r4, #11
 80107ea:	1d23      	adds	r3, r4, #4
 80107ec:	f020 0007 	bic.w	r0, r0, #7
 80107f0:	1ac2      	subs	r2, r0, r3
 80107f2:	bf1c      	itt	ne
 80107f4:	1a1b      	subne	r3, r3, r0
 80107f6:	50a3      	strne	r3, [r4, r2]
 80107f8:	e7af      	b.n	801075a <_malloc_r+0x22>
 80107fa:	6862      	ldr	r2, [r4, #4]
 80107fc:	42a3      	cmp	r3, r4
 80107fe:	bf0c      	ite	eq
 8010800:	f8c8 2000 	streq.w	r2, [r8]
 8010804:	605a      	strne	r2, [r3, #4]
 8010806:	e7eb      	b.n	80107e0 <_malloc_r+0xa8>
 8010808:	4623      	mov	r3, r4
 801080a:	6864      	ldr	r4, [r4, #4]
 801080c:	e7ae      	b.n	801076c <_malloc_r+0x34>
 801080e:	463c      	mov	r4, r7
 8010810:	687f      	ldr	r7, [r7, #4]
 8010812:	e7b6      	b.n	8010782 <_malloc_r+0x4a>
 8010814:	461a      	mov	r2, r3
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	42a3      	cmp	r3, r4
 801081a:	d1fb      	bne.n	8010814 <_malloc_r+0xdc>
 801081c:	2300      	movs	r3, #0
 801081e:	6053      	str	r3, [r2, #4]
 8010820:	e7de      	b.n	80107e0 <_malloc_r+0xa8>
 8010822:	230c      	movs	r3, #12
 8010824:	6033      	str	r3, [r6, #0]
 8010826:	4630      	mov	r0, r6
 8010828:	f000 f80c 	bl	8010844 <__malloc_unlock>
 801082c:	e794      	b.n	8010758 <_malloc_r+0x20>
 801082e:	6005      	str	r5, [r0, #0]
 8010830:	e7d6      	b.n	80107e0 <_malloc_r+0xa8>
 8010832:	bf00      	nop
 8010834:	200022b4 	.word	0x200022b4

08010838 <__malloc_lock>:
 8010838:	4801      	ldr	r0, [pc, #4]	@ (8010840 <__malloc_lock+0x8>)
 801083a:	f000 be22 	b.w	8011482 <__retarget_lock_acquire_recursive>
 801083e:	bf00      	nop
 8010840:	200023f8 	.word	0x200023f8

08010844 <__malloc_unlock>:
 8010844:	4801      	ldr	r0, [pc, #4]	@ (801084c <__malloc_unlock+0x8>)
 8010846:	f000 be1d 	b.w	8011484 <__retarget_lock_release_recursive>
 801084a:	bf00      	nop
 801084c:	200023f8 	.word	0x200023f8

08010850 <__cvt>:
 8010850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010854:	ec57 6b10 	vmov	r6, r7, d0
 8010858:	2f00      	cmp	r7, #0
 801085a:	460c      	mov	r4, r1
 801085c:	4619      	mov	r1, r3
 801085e:	463b      	mov	r3, r7
 8010860:	bfbb      	ittet	lt
 8010862:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010866:	461f      	movlt	r7, r3
 8010868:	2300      	movge	r3, #0
 801086a:	232d      	movlt	r3, #45	@ 0x2d
 801086c:	700b      	strb	r3, [r1, #0]
 801086e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010870:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010874:	4691      	mov	r9, r2
 8010876:	f023 0820 	bic.w	r8, r3, #32
 801087a:	bfbc      	itt	lt
 801087c:	4632      	movlt	r2, r6
 801087e:	4616      	movlt	r6, r2
 8010880:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010884:	d005      	beq.n	8010892 <__cvt+0x42>
 8010886:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801088a:	d100      	bne.n	801088e <__cvt+0x3e>
 801088c:	3401      	adds	r4, #1
 801088e:	2102      	movs	r1, #2
 8010890:	e000      	b.n	8010894 <__cvt+0x44>
 8010892:	2103      	movs	r1, #3
 8010894:	ab03      	add	r3, sp, #12
 8010896:	9301      	str	r3, [sp, #4]
 8010898:	ab02      	add	r3, sp, #8
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	ec47 6b10 	vmov	d0, r6, r7
 80108a0:	4653      	mov	r3, sl
 80108a2:	4622      	mov	r2, r4
 80108a4:	f000 fe88 	bl	80115b8 <_dtoa_r>
 80108a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80108ac:	4605      	mov	r5, r0
 80108ae:	d119      	bne.n	80108e4 <__cvt+0x94>
 80108b0:	f019 0f01 	tst.w	r9, #1
 80108b4:	d00e      	beq.n	80108d4 <__cvt+0x84>
 80108b6:	eb00 0904 	add.w	r9, r0, r4
 80108ba:	2200      	movs	r2, #0
 80108bc:	2300      	movs	r3, #0
 80108be:	4630      	mov	r0, r6
 80108c0:	4639      	mov	r1, r7
 80108c2:	f7f0 f909 	bl	8000ad8 <__aeabi_dcmpeq>
 80108c6:	b108      	cbz	r0, 80108cc <__cvt+0x7c>
 80108c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80108cc:	2230      	movs	r2, #48	@ 0x30
 80108ce:	9b03      	ldr	r3, [sp, #12]
 80108d0:	454b      	cmp	r3, r9
 80108d2:	d31e      	bcc.n	8010912 <__cvt+0xc2>
 80108d4:	9b03      	ldr	r3, [sp, #12]
 80108d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108d8:	1b5b      	subs	r3, r3, r5
 80108da:	4628      	mov	r0, r5
 80108dc:	6013      	str	r3, [r2, #0]
 80108de:	b004      	add	sp, #16
 80108e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80108e8:	eb00 0904 	add.w	r9, r0, r4
 80108ec:	d1e5      	bne.n	80108ba <__cvt+0x6a>
 80108ee:	7803      	ldrb	r3, [r0, #0]
 80108f0:	2b30      	cmp	r3, #48	@ 0x30
 80108f2:	d10a      	bne.n	801090a <__cvt+0xba>
 80108f4:	2200      	movs	r2, #0
 80108f6:	2300      	movs	r3, #0
 80108f8:	4630      	mov	r0, r6
 80108fa:	4639      	mov	r1, r7
 80108fc:	f7f0 f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8010900:	b918      	cbnz	r0, 801090a <__cvt+0xba>
 8010902:	f1c4 0401 	rsb	r4, r4, #1
 8010906:	f8ca 4000 	str.w	r4, [sl]
 801090a:	f8da 3000 	ldr.w	r3, [sl]
 801090e:	4499      	add	r9, r3
 8010910:	e7d3      	b.n	80108ba <__cvt+0x6a>
 8010912:	1c59      	adds	r1, r3, #1
 8010914:	9103      	str	r1, [sp, #12]
 8010916:	701a      	strb	r2, [r3, #0]
 8010918:	e7d9      	b.n	80108ce <__cvt+0x7e>

0801091a <__exponent>:
 801091a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801091c:	2900      	cmp	r1, #0
 801091e:	bfba      	itte	lt
 8010920:	4249      	neglt	r1, r1
 8010922:	232d      	movlt	r3, #45	@ 0x2d
 8010924:	232b      	movge	r3, #43	@ 0x2b
 8010926:	2909      	cmp	r1, #9
 8010928:	7002      	strb	r2, [r0, #0]
 801092a:	7043      	strb	r3, [r0, #1]
 801092c:	dd29      	ble.n	8010982 <__exponent+0x68>
 801092e:	f10d 0307 	add.w	r3, sp, #7
 8010932:	461d      	mov	r5, r3
 8010934:	270a      	movs	r7, #10
 8010936:	461a      	mov	r2, r3
 8010938:	fbb1 f6f7 	udiv	r6, r1, r7
 801093c:	fb07 1416 	mls	r4, r7, r6, r1
 8010940:	3430      	adds	r4, #48	@ 0x30
 8010942:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010946:	460c      	mov	r4, r1
 8010948:	2c63      	cmp	r4, #99	@ 0x63
 801094a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801094e:	4631      	mov	r1, r6
 8010950:	dcf1      	bgt.n	8010936 <__exponent+0x1c>
 8010952:	3130      	adds	r1, #48	@ 0x30
 8010954:	1e94      	subs	r4, r2, #2
 8010956:	f803 1c01 	strb.w	r1, [r3, #-1]
 801095a:	1c41      	adds	r1, r0, #1
 801095c:	4623      	mov	r3, r4
 801095e:	42ab      	cmp	r3, r5
 8010960:	d30a      	bcc.n	8010978 <__exponent+0x5e>
 8010962:	f10d 0309 	add.w	r3, sp, #9
 8010966:	1a9b      	subs	r3, r3, r2
 8010968:	42ac      	cmp	r4, r5
 801096a:	bf88      	it	hi
 801096c:	2300      	movhi	r3, #0
 801096e:	3302      	adds	r3, #2
 8010970:	4403      	add	r3, r0
 8010972:	1a18      	subs	r0, r3, r0
 8010974:	b003      	add	sp, #12
 8010976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010978:	f813 6b01 	ldrb.w	r6, [r3], #1
 801097c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010980:	e7ed      	b.n	801095e <__exponent+0x44>
 8010982:	2330      	movs	r3, #48	@ 0x30
 8010984:	3130      	adds	r1, #48	@ 0x30
 8010986:	7083      	strb	r3, [r0, #2]
 8010988:	70c1      	strb	r1, [r0, #3]
 801098a:	1d03      	adds	r3, r0, #4
 801098c:	e7f1      	b.n	8010972 <__exponent+0x58>
	...

08010990 <_printf_float>:
 8010990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010994:	b08d      	sub	sp, #52	@ 0x34
 8010996:	460c      	mov	r4, r1
 8010998:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801099c:	4616      	mov	r6, r2
 801099e:	461f      	mov	r7, r3
 80109a0:	4605      	mov	r5, r0
 80109a2:	f000 fce9 	bl	8011378 <_localeconv_r>
 80109a6:	6803      	ldr	r3, [r0, #0]
 80109a8:	9304      	str	r3, [sp, #16]
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7ef fc68 	bl	8000280 <strlen>
 80109b0:	2300      	movs	r3, #0
 80109b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80109b4:	f8d8 3000 	ldr.w	r3, [r8]
 80109b8:	9005      	str	r0, [sp, #20]
 80109ba:	3307      	adds	r3, #7
 80109bc:	f023 0307 	bic.w	r3, r3, #7
 80109c0:	f103 0208 	add.w	r2, r3, #8
 80109c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80109c8:	f8d4 b000 	ldr.w	fp, [r4]
 80109cc:	f8c8 2000 	str.w	r2, [r8]
 80109d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80109d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80109d8:	9307      	str	r3, [sp, #28]
 80109da:	f8cd 8018 	str.w	r8, [sp, #24]
 80109de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80109e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109e6:	4b9c      	ldr	r3, [pc, #624]	@ (8010c58 <_printf_float+0x2c8>)
 80109e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80109ec:	f7f0 f8a6 	bl	8000b3c <__aeabi_dcmpun>
 80109f0:	bb70      	cbnz	r0, 8010a50 <_printf_float+0xc0>
 80109f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109f6:	4b98      	ldr	r3, [pc, #608]	@ (8010c58 <_printf_float+0x2c8>)
 80109f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80109fc:	f7f0 f880 	bl	8000b00 <__aeabi_dcmple>
 8010a00:	bb30      	cbnz	r0, 8010a50 <_printf_float+0xc0>
 8010a02:	2200      	movs	r2, #0
 8010a04:	2300      	movs	r3, #0
 8010a06:	4640      	mov	r0, r8
 8010a08:	4649      	mov	r1, r9
 8010a0a:	f7f0 f86f 	bl	8000aec <__aeabi_dcmplt>
 8010a0e:	b110      	cbz	r0, 8010a16 <_printf_float+0x86>
 8010a10:	232d      	movs	r3, #45	@ 0x2d
 8010a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a16:	4a91      	ldr	r2, [pc, #580]	@ (8010c5c <_printf_float+0x2cc>)
 8010a18:	4b91      	ldr	r3, [pc, #580]	@ (8010c60 <_printf_float+0x2d0>)
 8010a1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010a1e:	bf94      	ite	ls
 8010a20:	4690      	movls	r8, r2
 8010a22:	4698      	movhi	r8, r3
 8010a24:	2303      	movs	r3, #3
 8010a26:	6123      	str	r3, [r4, #16]
 8010a28:	f02b 0304 	bic.w	r3, fp, #4
 8010a2c:	6023      	str	r3, [r4, #0]
 8010a2e:	f04f 0900 	mov.w	r9, #0
 8010a32:	9700      	str	r7, [sp, #0]
 8010a34:	4633      	mov	r3, r6
 8010a36:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010a38:	4621      	mov	r1, r4
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f000 f9d2 	bl	8010de4 <_printf_common>
 8010a40:	3001      	adds	r0, #1
 8010a42:	f040 808d 	bne.w	8010b60 <_printf_float+0x1d0>
 8010a46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a4a:	b00d      	add	sp, #52	@ 0x34
 8010a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a50:	4642      	mov	r2, r8
 8010a52:	464b      	mov	r3, r9
 8010a54:	4640      	mov	r0, r8
 8010a56:	4649      	mov	r1, r9
 8010a58:	f7f0 f870 	bl	8000b3c <__aeabi_dcmpun>
 8010a5c:	b140      	cbz	r0, 8010a70 <_printf_float+0xe0>
 8010a5e:	464b      	mov	r3, r9
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	bfbc      	itt	lt
 8010a64:	232d      	movlt	r3, #45	@ 0x2d
 8010a66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010a6a:	4a7e      	ldr	r2, [pc, #504]	@ (8010c64 <_printf_float+0x2d4>)
 8010a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8010c68 <_printf_float+0x2d8>)
 8010a6e:	e7d4      	b.n	8010a1a <_printf_float+0x8a>
 8010a70:	6863      	ldr	r3, [r4, #4]
 8010a72:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010a76:	9206      	str	r2, [sp, #24]
 8010a78:	1c5a      	adds	r2, r3, #1
 8010a7a:	d13b      	bne.n	8010af4 <_printf_float+0x164>
 8010a7c:	2306      	movs	r3, #6
 8010a7e:	6063      	str	r3, [r4, #4]
 8010a80:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010a84:	2300      	movs	r3, #0
 8010a86:	6022      	str	r2, [r4, #0]
 8010a88:	9303      	str	r3, [sp, #12]
 8010a8a:	ab0a      	add	r3, sp, #40	@ 0x28
 8010a8c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010a90:	ab09      	add	r3, sp, #36	@ 0x24
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	6861      	ldr	r1, [r4, #4]
 8010a96:	ec49 8b10 	vmov	d0, r8, r9
 8010a9a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	f7ff fed6 	bl	8010850 <__cvt>
 8010aa4:	9b06      	ldr	r3, [sp, #24]
 8010aa6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010aa8:	2b47      	cmp	r3, #71	@ 0x47
 8010aaa:	4680      	mov	r8, r0
 8010aac:	d129      	bne.n	8010b02 <_printf_float+0x172>
 8010aae:	1cc8      	adds	r0, r1, #3
 8010ab0:	db02      	blt.n	8010ab8 <_printf_float+0x128>
 8010ab2:	6863      	ldr	r3, [r4, #4]
 8010ab4:	4299      	cmp	r1, r3
 8010ab6:	dd41      	ble.n	8010b3c <_printf_float+0x1ac>
 8010ab8:	f1aa 0a02 	sub.w	sl, sl, #2
 8010abc:	fa5f fa8a 	uxtb.w	sl, sl
 8010ac0:	3901      	subs	r1, #1
 8010ac2:	4652      	mov	r2, sl
 8010ac4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010ac8:	9109      	str	r1, [sp, #36]	@ 0x24
 8010aca:	f7ff ff26 	bl	801091a <__exponent>
 8010ace:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010ad0:	1813      	adds	r3, r2, r0
 8010ad2:	2a01      	cmp	r2, #1
 8010ad4:	4681      	mov	r9, r0
 8010ad6:	6123      	str	r3, [r4, #16]
 8010ad8:	dc02      	bgt.n	8010ae0 <_printf_float+0x150>
 8010ada:	6822      	ldr	r2, [r4, #0]
 8010adc:	07d2      	lsls	r2, r2, #31
 8010ade:	d501      	bpl.n	8010ae4 <_printf_float+0x154>
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	6123      	str	r3, [r4, #16]
 8010ae4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d0a2      	beq.n	8010a32 <_printf_float+0xa2>
 8010aec:	232d      	movs	r3, #45	@ 0x2d
 8010aee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010af2:	e79e      	b.n	8010a32 <_printf_float+0xa2>
 8010af4:	9a06      	ldr	r2, [sp, #24]
 8010af6:	2a47      	cmp	r2, #71	@ 0x47
 8010af8:	d1c2      	bne.n	8010a80 <_printf_float+0xf0>
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d1c0      	bne.n	8010a80 <_printf_float+0xf0>
 8010afe:	2301      	movs	r3, #1
 8010b00:	e7bd      	b.n	8010a7e <_printf_float+0xee>
 8010b02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010b06:	d9db      	bls.n	8010ac0 <_printf_float+0x130>
 8010b08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010b0c:	d118      	bne.n	8010b40 <_printf_float+0x1b0>
 8010b0e:	2900      	cmp	r1, #0
 8010b10:	6863      	ldr	r3, [r4, #4]
 8010b12:	dd0b      	ble.n	8010b2c <_printf_float+0x19c>
 8010b14:	6121      	str	r1, [r4, #16]
 8010b16:	b913      	cbnz	r3, 8010b1e <_printf_float+0x18e>
 8010b18:	6822      	ldr	r2, [r4, #0]
 8010b1a:	07d0      	lsls	r0, r2, #31
 8010b1c:	d502      	bpl.n	8010b24 <_printf_float+0x194>
 8010b1e:	3301      	adds	r3, #1
 8010b20:	440b      	add	r3, r1
 8010b22:	6123      	str	r3, [r4, #16]
 8010b24:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010b26:	f04f 0900 	mov.w	r9, #0
 8010b2a:	e7db      	b.n	8010ae4 <_printf_float+0x154>
 8010b2c:	b913      	cbnz	r3, 8010b34 <_printf_float+0x1a4>
 8010b2e:	6822      	ldr	r2, [r4, #0]
 8010b30:	07d2      	lsls	r2, r2, #31
 8010b32:	d501      	bpl.n	8010b38 <_printf_float+0x1a8>
 8010b34:	3302      	adds	r3, #2
 8010b36:	e7f4      	b.n	8010b22 <_printf_float+0x192>
 8010b38:	2301      	movs	r3, #1
 8010b3a:	e7f2      	b.n	8010b22 <_printf_float+0x192>
 8010b3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b42:	4299      	cmp	r1, r3
 8010b44:	db05      	blt.n	8010b52 <_printf_float+0x1c2>
 8010b46:	6823      	ldr	r3, [r4, #0]
 8010b48:	6121      	str	r1, [r4, #16]
 8010b4a:	07d8      	lsls	r0, r3, #31
 8010b4c:	d5ea      	bpl.n	8010b24 <_printf_float+0x194>
 8010b4e:	1c4b      	adds	r3, r1, #1
 8010b50:	e7e7      	b.n	8010b22 <_printf_float+0x192>
 8010b52:	2900      	cmp	r1, #0
 8010b54:	bfd4      	ite	le
 8010b56:	f1c1 0202 	rsble	r2, r1, #2
 8010b5a:	2201      	movgt	r2, #1
 8010b5c:	4413      	add	r3, r2
 8010b5e:	e7e0      	b.n	8010b22 <_printf_float+0x192>
 8010b60:	6823      	ldr	r3, [r4, #0]
 8010b62:	055a      	lsls	r2, r3, #21
 8010b64:	d407      	bmi.n	8010b76 <_printf_float+0x1e6>
 8010b66:	6923      	ldr	r3, [r4, #16]
 8010b68:	4642      	mov	r2, r8
 8010b6a:	4631      	mov	r1, r6
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	47b8      	blx	r7
 8010b70:	3001      	adds	r0, #1
 8010b72:	d12b      	bne.n	8010bcc <_printf_float+0x23c>
 8010b74:	e767      	b.n	8010a46 <_printf_float+0xb6>
 8010b76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010b7a:	f240 80dd 	bls.w	8010d38 <_printf_float+0x3a8>
 8010b7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010b82:	2200      	movs	r2, #0
 8010b84:	2300      	movs	r3, #0
 8010b86:	f7ef ffa7 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b8a:	2800      	cmp	r0, #0
 8010b8c:	d033      	beq.n	8010bf6 <_printf_float+0x266>
 8010b8e:	4a37      	ldr	r2, [pc, #220]	@ (8010c6c <_printf_float+0x2dc>)
 8010b90:	2301      	movs	r3, #1
 8010b92:	4631      	mov	r1, r6
 8010b94:	4628      	mov	r0, r5
 8010b96:	47b8      	blx	r7
 8010b98:	3001      	adds	r0, #1
 8010b9a:	f43f af54 	beq.w	8010a46 <_printf_float+0xb6>
 8010b9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010ba2:	4543      	cmp	r3, r8
 8010ba4:	db02      	blt.n	8010bac <_printf_float+0x21c>
 8010ba6:	6823      	ldr	r3, [r4, #0]
 8010ba8:	07d8      	lsls	r0, r3, #31
 8010baa:	d50f      	bpl.n	8010bcc <_printf_float+0x23c>
 8010bac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bb0:	4631      	mov	r1, r6
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	47b8      	blx	r7
 8010bb6:	3001      	adds	r0, #1
 8010bb8:	f43f af45 	beq.w	8010a46 <_printf_float+0xb6>
 8010bbc:	f04f 0900 	mov.w	r9, #0
 8010bc0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010bc4:	f104 0a1a 	add.w	sl, r4, #26
 8010bc8:	45c8      	cmp	r8, r9
 8010bca:	dc09      	bgt.n	8010be0 <_printf_float+0x250>
 8010bcc:	6823      	ldr	r3, [r4, #0]
 8010bce:	079b      	lsls	r3, r3, #30
 8010bd0:	f100 8103 	bmi.w	8010dda <_printf_float+0x44a>
 8010bd4:	68e0      	ldr	r0, [r4, #12]
 8010bd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bd8:	4298      	cmp	r0, r3
 8010bda:	bfb8      	it	lt
 8010bdc:	4618      	movlt	r0, r3
 8010bde:	e734      	b.n	8010a4a <_printf_float+0xba>
 8010be0:	2301      	movs	r3, #1
 8010be2:	4652      	mov	r2, sl
 8010be4:	4631      	mov	r1, r6
 8010be6:	4628      	mov	r0, r5
 8010be8:	47b8      	blx	r7
 8010bea:	3001      	adds	r0, #1
 8010bec:	f43f af2b 	beq.w	8010a46 <_printf_float+0xb6>
 8010bf0:	f109 0901 	add.w	r9, r9, #1
 8010bf4:	e7e8      	b.n	8010bc8 <_printf_float+0x238>
 8010bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	dc39      	bgt.n	8010c70 <_printf_float+0x2e0>
 8010bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8010c6c <_printf_float+0x2dc>)
 8010bfe:	2301      	movs	r3, #1
 8010c00:	4631      	mov	r1, r6
 8010c02:	4628      	mov	r0, r5
 8010c04:	47b8      	blx	r7
 8010c06:	3001      	adds	r0, #1
 8010c08:	f43f af1d 	beq.w	8010a46 <_printf_float+0xb6>
 8010c0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010c10:	ea59 0303 	orrs.w	r3, r9, r3
 8010c14:	d102      	bne.n	8010c1c <_printf_float+0x28c>
 8010c16:	6823      	ldr	r3, [r4, #0]
 8010c18:	07d9      	lsls	r1, r3, #31
 8010c1a:	d5d7      	bpl.n	8010bcc <_printf_float+0x23c>
 8010c1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c20:	4631      	mov	r1, r6
 8010c22:	4628      	mov	r0, r5
 8010c24:	47b8      	blx	r7
 8010c26:	3001      	adds	r0, #1
 8010c28:	f43f af0d 	beq.w	8010a46 <_printf_float+0xb6>
 8010c2c:	f04f 0a00 	mov.w	sl, #0
 8010c30:	f104 0b1a 	add.w	fp, r4, #26
 8010c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c36:	425b      	negs	r3, r3
 8010c38:	4553      	cmp	r3, sl
 8010c3a:	dc01      	bgt.n	8010c40 <_printf_float+0x2b0>
 8010c3c:	464b      	mov	r3, r9
 8010c3e:	e793      	b.n	8010b68 <_printf_float+0x1d8>
 8010c40:	2301      	movs	r3, #1
 8010c42:	465a      	mov	r2, fp
 8010c44:	4631      	mov	r1, r6
 8010c46:	4628      	mov	r0, r5
 8010c48:	47b8      	blx	r7
 8010c4a:	3001      	adds	r0, #1
 8010c4c:	f43f aefb 	beq.w	8010a46 <_printf_float+0xb6>
 8010c50:	f10a 0a01 	add.w	sl, sl, #1
 8010c54:	e7ee      	b.n	8010c34 <_printf_float+0x2a4>
 8010c56:	bf00      	nop
 8010c58:	7fefffff 	.word	0x7fefffff
 8010c5c:	08013e5c 	.word	0x08013e5c
 8010c60:	08013e60 	.word	0x08013e60
 8010c64:	08013e64 	.word	0x08013e64
 8010c68:	08013e68 	.word	0x08013e68
 8010c6c:	08013e6c 	.word	0x08013e6c
 8010c70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010c72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010c76:	4553      	cmp	r3, sl
 8010c78:	bfa8      	it	ge
 8010c7a:	4653      	movge	r3, sl
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	4699      	mov	r9, r3
 8010c80:	dc36      	bgt.n	8010cf0 <_printf_float+0x360>
 8010c82:	f04f 0b00 	mov.w	fp, #0
 8010c86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c8a:	f104 021a 	add.w	r2, r4, #26
 8010c8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010c90:	9306      	str	r3, [sp, #24]
 8010c92:	eba3 0309 	sub.w	r3, r3, r9
 8010c96:	455b      	cmp	r3, fp
 8010c98:	dc31      	bgt.n	8010cfe <_printf_float+0x36e>
 8010c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c9c:	459a      	cmp	sl, r3
 8010c9e:	dc3a      	bgt.n	8010d16 <_printf_float+0x386>
 8010ca0:	6823      	ldr	r3, [r4, #0]
 8010ca2:	07da      	lsls	r2, r3, #31
 8010ca4:	d437      	bmi.n	8010d16 <_printf_float+0x386>
 8010ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ca8:	ebaa 0903 	sub.w	r9, sl, r3
 8010cac:	9b06      	ldr	r3, [sp, #24]
 8010cae:	ebaa 0303 	sub.w	r3, sl, r3
 8010cb2:	4599      	cmp	r9, r3
 8010cb4:	bfa8      	it	ge
 8010cb6:	4699      	movge	r9, r3
 8010cb8:	f1b9 0f00 	cmp.w	r9, #0
 8010cbc:	dc33      	bgt.n	8010d26 <_printf_float+0x396>
 8010cbe:	f04f 0800 	mov.w	r8, #0
 8010cc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010cc6:	f104 0b1a 	add.w	fp, r4, #26
 8010cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ccc:	ebaa 0303 	sub.w	r3, sl, r3
 8010cd0:	eba3 0309 	sub.w	r3, r3, r9
 8010cd4:	4543      	cmp	r3, r8
 8010cd6:	f77f af79 	ble.w	8010bcc <_printf_float+0x23c>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	465a      	mov	r2, fp
 8010cde:	4631      	mov	r1, r6
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	47b8      	blx	r7
 8010ce4:	3001      	adds	r0, #1
 8010ce6:	f43f aeae 	beq.w	8010a46 <_printf_float+0xb6>
 8010cea:	f108 0801 	add.w	r8, r8, #1
 8010cee:	e7ec      	b.n	8010cca <_printf_float+0x33a>
 8010cf0:	4642      	mov	r2, r8
 8010cf2:	4631      	mov	r1, r6
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	47b8      	blx	r7
 8010cf8:	3001      	adds	r0, #1
 8010cfa:	d1c2      	bne.n	8010c82 <_printf_float+0x2f2>
 8010cfc:	e6a3      	b.n	8010a46 <_printf_float+0xb6>
 8010cfe:	2301      	movs	r3, #1
 8010d00:	4631      	mov	r1, r6
 8010d02:	4628      	mov	r0, r5
 8010d04:	9206      	str	r2, [sp, #24]
 8010d06:	47b8      	blx	r7
 8010d08:	3001      	adds	r0, #1
 8010d0a:	f43f ae9c 	beq.w	8010a46 <_printf_float+0xb6>
 8010d0e:	9a06      	ldr	r2, [sp, #24]
 8010d10:	f10b 0b01 	add.w	fp, fp, #1
 8010d14:	e7bb      	b.n	8010c8e <_printf_float+0x2fe>
 8010d16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d1a:	4631      	mov	r1, r6
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	47b8      	blx	r7
 8010d20:	3001      	adds	r0, #1
 8010d22:	d1c0      	bne.n	8010ca6 <_printf_float+0x316>
 8010d24:	e68f      	b.n	8010a46 <_printf_float+0xb6>
 8010d26:	9a06      	ldr	r2, [sp, #24]
 8010d28:	464b      	mov	r3, r9
 8010d2a:	4442      	add	r2, r8
 8010d2c:	4631      	mov	r1, r6
 8010d2e:	4628      	mov	r0, r5
 8010d30:	47b8      	blx	r7
 8010d32:	3001      	adds	r0, #1
 8010d34:	d1c3      	bne.n	8010cbe <_printf_float+0x32e>
 8010d36:	e686      	b.n	8010a46 <_printf_float+0xb6>
 8010d38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010d3c:	f1ba 0f01 	cmp.w	sl, #1
 8010d40:	dc01      	bgt.n	8010d46 <_printf_float+0x3b6>
 8010d42:	07db      	lsls	r3, r3, #31
 8010d44:	d536      	bpl.n	8010db4 <_printf_float+0x424>
 8010d46:	2301      	movs	r3, #1
 8010d48:	4642      	mov	r2, r8
 8010d4a:	4631      	mov	r1, r6
 8010d4c:	4628      	mov	r0, r5
 8010d4e:	47b8      	blx	r7
 8010d50:	3001      	adds	r0, #1
 8010d52:	f43f ae78 	beq.w	8010a46 <_printf_float+0xb6>
 8010d56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d5a:	4631      	mov	r1, r6
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	47b8      	blx	r7
 8010d60:	3001      	adds	r0, #1
 8010d62:	f43f ae70 	beq.w	8010a46 <_printf_float+0xb6>
 8010d66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8010d72:	f7ef feb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8010d76:	b9c0      	cbnz	r0, 8010daa <_printf_float+0x41a>
 8010d78:	4653      	mov	r3, sl
 8010d7a:	f108 0201 	add.w	r2, r8, #1
 8010d7e:	4631      	mov	r1, r6
 8010d80:	4628      	mov	r0, r5
 8010d82:	47b8      	blx	r7
 8010d84:	3001      	adds	r0, #1
 8010d86:	d10c      	bne.n	8010da2 <_printf_float+0x412>
 8010d88:	e65d      	b.n	8010a46 <_printf_float+0xb6>
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	465a      	mov	r2, fp
 8010d8e:	4631      	mov	r1, r6
 8010d90:	4628      	mov	r0, r5
 8010d92:	47b8      	blx	r7
 8010d94:	3001      	adds	r0, #1
 8010d96:	f43f ae56 	beq.w	8010a46 <_printf_float+0xb6>
 8010d9a:	f108 0801 	add.w	r8, r8, #1
 8010d9e:	45d0      	cmp	r8, sl
 8010da0:	dbf3      	blt.n	8010d8a <_printf_float+0x3fa>
 8010da2:	464b      	mov	r3, r9
 8010da4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010da8:	e6df      	b.n	8010b6a <_printf_float+0x1da>
 8010daa:	f04f 0800 	mov.w	r8, #0
 8010dae:	f104 0b1a 	add.w	fp, r4, #26
 8010db2:	e7f4      	b.n	8010d9e <_printf_float+0x40e>
 8010db4:	2301      	movs	r3, #1
 8010db6:	4642      	mov	r2, r8
 8010db8:	e7e1      	b.n	8010d7e <_printf_float+0x3ee>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	464a      	mov	r2, r9
 8010dbe:	4631      	mov	r1, r6
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	47b8      	blx	r7
 8010dc4:	3001      	adds	r0, #1
 8010dc6:	f43f ae3e 	beq.w	8010a46 <_printf_float+0xb6>
 8010dca:	f108 0801 	add.w	r8, r8, #1
 8010dce:	68e3      	ldr	r3, [r4, #12]
 8010dd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010dd2:	1a5b      	subs	r3, r3, r1
 8010dd4:	4543      	cmp	r3, r8
 8010dd6:	dcf0      	bgt.n	8010dba <_printf_float+0x42a>
 8010dd8:	e6fc      	b.n	8010bd4 <_printf_float+0x244>
 8010dda:	f04f 0800 	mov.w	r8, #0
 8010dde:	f104 0919 	add.w	r9, r4, #25
 8010de2:	e7f4      	b.n	8010dce <_printf_float+0x43e>

08010de4 <_printf_common>:
 8010de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010de8:	4616      	mov	r6, r2
 8010dea:	4698      	mov	r8, r3
 8010dec:	688a      	ldr	r2, [r1, #8]
 8010dee:	690b      	ldr	r3, [r1, #16]
 8010df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010df4:	4293      	cmp	r3, r2
 8010df6:	bfb8      	it	lt
 8010df8:	4613      	movlt	r3, r2
 8010dfa:	6033      	str	r3, [r6, #0]
 8010dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010e00:	4607      	mov	r7, r0
 8010e02:	460c      	mov	r4, r1
 8010e04:	b10a      	cbz	r2, 8010e0a <_printf_common+0x26>
 8010e06:	3301      	adds	r3, #1
 8010e08:	6033      	str	r3, [r6, #0]
 8010e0a:	6823      	ldr	r3, [r4, #0]
 8010e0c:	0699      	lsls	r1, r3, #26
 8010e0e:	bf42      	ittt	mi
 8010e10:	6833      	ldrmi	r3, [r6, #0]
 8010e12:	3302      	addmi	r3, #2
 8010e14:	6033      	strmi	r3, [r6, #0]
 8010e16:	6825      	ldr	r5, [r4, #0]
 8010e18:	f015 0506 	ands.w	r5, r5, #6
 8010e1c:	d106      	bne.n	8010e2c <_printf_common+0x48>
 8010e1e:	f104 0a19 	add.w	sl, r4, #25
 8010e22:	68e3      	ldr	r3, [r4, #12]
 8010e24:	6832      	ldr	r2, [r6, #0]
 8010e26:	1a9b      	subs	r3, r3, r2
 8010e28:	42ab      	cmp	r3, r5
 8010e2a:	dc26      	bgt.n	8010e7a <_printf_common+0x96>
 8010e2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010e30:	6822      	ldr	r2, [r4, #0]
 8010e32:	3b00      	subs	r3, #0
 8010e34:	bf18      	it	ne
 8010e36:	2301      	movne	r3, #1
 8010e38:	0692      	lsls	r2, r2, #26
 8010e3a:	d42b      	bmi.n	8010e94 <_printf_common+0xb0>
 8010e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010e40:	4641      	mov	r1, r8
 8010e42:	4638      	mov	r0, r7
 8010e44:	47c8      	blx	r9
 8010e46:	3001      	adds	r0, #1
 8010e48:	d01e      	beq.n	8010e88 <_printf_common+0xa4>
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	6922      	ldr	r2, [r4, #16]
 8010e4e:	f003 0306 	and.w	r3, r3, #6
 8010e52:	2b04      	cmp	r3, #4
 8010e54:	bf02      	ittt	eq
 8010e56:	68e5      	ldreq	r5, [r4, #12]
 8010e58:	6833      	ldreq	r3, [r6, #0]
 8010e5a:	1aed      	subeq	r5, r5, r3
 8010e5c:	68a3      	ldr	r3, [r4, #8]
 8010e5e:	bf0c      	ite	eq
 8010e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e64:	2500      	movne	r5, #0
 8010e66:	4293      	cmp	r3, r2
 8010e68:	bfc4      	itt	gt
 8010e6a:	1a9b      	subgt	r3, r3, r2
 8010e6c:	18ed      	addgt	r5, r5, r3
 8010e6e:	2600      	movs	r6, #0
 8010e70:	341a      	adds	r4, #26
 8010e72:	42b5      	cmp	r5, r6
 8010e74:	d11a      	bne.n	8010eac <_printf_common+0xc8>
 8010e76:	2000      	movs	r0, #0
 8010e78:	e008      	b.n	8010e8c <_printf_common+0xa8>
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	4652      	mov	r2, sl
 8010e7e:	4641      	mov	r1, r8
 8010e80:	4638      	mov	r0, r7
 8010e82:	47c8      	blx	r9
 8010e84:	3001      	adds	r0, #1
 8010e86:	d103      	bne.n	8010e90 <_printf_common+0xac>
 8010e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e90:	3501      	adds	r5, #1
 8010e92:	e7c6      	b.n	8010e22 <_printf_common+0x3e>
 8010e94:	18e1      	adds	r1, r4, r3
 8010e96:	1c5a      	adds	r2, r3, #1
 8010e98:	2030      	movs	r0, #48	@ 0x30
 8010e9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010e9e:	4422      	add	r2, r4
 8010ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010ea4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010ea8:	3302      	adds	r3, #2
 8010eaa:	e7c7      	b.n	8010e3c <_printf_common+0x58>
 8010eac:	2301      	movs	r3, #1
 8010eae:	4622      	mov	r2, r4
 8010eb0:	4641      	mov	r1, r8
 8010eb2:	4638      	mov	r0, r7
 8010eb4:	47c8      	blx	r9
 8010eb6:	3001      	adds	r0, #1
 8010eb8:	d0e6      	beq.n	8010e88 <_printf_common+0xa4>
 8010eba:	3601      	adds	r6, #1
 8010ebc:	e7d9      	b.n	8010e72 <_printf_common+0x8e>
	...

08010ec0 <_printf_i>:
 8010ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ec4:	7e0f      	ldrb	r7, [r1, #24]
 8010ec6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010ec8:	2f78      	cmp	r7, #120	@ 0x78
 8010eca:	4691      	mov	r9, r2
 8010ecc:	4680      	mov	r8, r0
 8010ece:	460c      	mov	r4, r1
 8010ed0:	469a      	mov	sl, r3
 8010ed2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010ed6:	d807      	bhi.n	8010ee8 <_printf_i+0x28>
 8010ed8:	2f62      	cmp	r7, #98	@ 0x62
 8010eda:	d80a      	bhi.n	8010ef2 <_printf_i+0x32>
 8010edc:	2f00      	cmp	r7, #0
 8010ede:	f000 80d2 	beq.w	8011086 <_printf_i+0x1c6>
 8010ee2:	2f58      	cmp	r7, #88	@ 0x58
 8010ee4:	f000 80b9 	beq.w	801105a <_printf_i+0x19a>
 8010ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010eec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010ef0:	e03a      	b.n	8010f68 <_printf_i+0xa8>
 8010ef2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010ef6:	2b15      	cmp	r3, #21
 8010ef8:	d8f6      	bhi.n	8010ee8 <_printf_i+0x28>
 8010efa:	a101      	add	r1, pc, #4	@ (adr r1, 8010f00 <_printf_i+0x40>)
 8010efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f00:	08010f59 	.word	0x08010f59
 8010f04:	08010f6d 	.word	0x08010f6d
 8010f08:	08010ee9 	.word	0x08010ee9
 8010f0c:	08010ee9 	.word	0x08010ee9
 8010f10:	08010ee9 	.word	0x08010ee9
 8010f14:	08010ee9 	.word	0x08010ee9
 8010f18:	08010f6d 	.word	0x08010f6d
 8010f1c:	08010ee9 	.word	0x08010ee9
 8010f20:	08010ee9 	.word	0x08010ee9
 8010f24:	08010ee9 	.word	0x08010ee9
 8010f28:	08010ee9 	.word	0x08010ee9
 8010f2c:	0801106d 	.word	0x0801106d
 8010f30:	08010f97 	.word	0x08010f97
 8010f34:	08011027 	.word	0x08011027
 8010f38:	08010ee9 	.word	0x08010ee9
 8010f3c:	08010ee9 	.word	0x08010ee9
 8010f40:	0801108f 	.word	0x0801108f
 8010f44:	08010ee9 	.word	0x08010ee9
 8010f48:	08010f97 	.word	0x08010f97
 8010f4c:	08010ee9 	.word	0x08010ee9
 8010f50:	08010ee9 	.word	0x08010ee9
 8010f54:	0801102f 	.word	0x0801102f
 8010f58:	6833      	ldr	r3, [r6, #0]
 8010f5a:	1d1a      	adds	r2, r3, #4
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	6032      	str	r2, [r6, #0]
 8010f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010f68:	2301      	movs	r3, #1
 8010f6a:	e09d      	b.n	80110a8 <_printf_i+0x1e8>
 8010f6c:	6833      	ldr	r3, [r6, #0]
 8010f6e:	6820      	ldr	r0, [r4, #0]
 8010f70:	1d19      	adds	r1, r3, #4
 8010f72:	6031      	str	r1, [r6, #0]
 8010f74:	0606      	lsls	r6, r0, #24
 8010f76:	d501      	bpl.n	8010f7c <_printf_i+0xbc>
 8010f78:	681d      	ldr	r5, [r3, #0]
 8010f7a:	e003      	b.n	8010f84 <_printf_i+0xc4>
 8010f7c:	0645      	lsls	r5, r0, #25
 8010f7e:	d5fb      	bpl.n	8010f78 <_printf_i+0xb8>
 8010f80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010f84:	2d00      	cmp	r5, #0
 8010f86:	da03      	bge.n	8010f90 <_printf_i+0xd0>
 8010f88:	232d      	movs	r3, #45	@ 0x2d
 8010f8a:	426d      	negs	r5, r5
 8010f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f90:	4859      	ldr	r0, [pc, #356]	@ (80110f8 <_printf_i+0x238>)
 8010f92:	230a      	movs	r3, #10
 8010f94:	e011      	b.n	8010fba <_printf_i+0xfa>
 8010f96:	6821      	ldr	r1, [r4, #0]
 8010f98:	6833      	ldr	r3, [r6, #0]
 8010f9a:	0608      	lsls	r0, r1, #24
 8010f9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010fa0:	d402      	bmi.n	8010fa8 <_printf_i+0xe8>
 8010fa2:	0649      	lsls	r1, r1, #25
 8010fa4:	bf48      	it	mi
 8010fa6:	b2ad      	uxthmi	r5, r5
 8010fa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8010faa:	4853      	ldr	r0, [pc, #332]	@ (80110f8 <_printf_i+0x238>)
 8010fac:	6033      	str	r3, [r6, #0]
 8010fae:	bf14      	ite	ne
 8010fb0:	230a      	movne	r3, #10
 8010fb2:	2308      	moveq	r3, #8
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010fba:	6866      	ldr	r6, [r4, #4]
 8010fbc:	60a6      	str	r6, [r4, #8]
 8010fbe:	2e00      	cmp	r6, #0
 8010fc0:	bfa2      	ittt	ge
 8010fc2:	6821      	ldrge	r1, [r4, #0]
 8010fc4:	f021 0104 	bicge.w	r1, r1, #4
 8010fc8:	6021      	strge	r1, [r4, #0]
 8010fca:	b90d      	cbnz	r5, 8010fd0 <_printf_i+0x110>
 8010fcc:	2e00      	cmp	r6, #0
 8010fce:	d04b      	beq.n	8011068 <_printf_i+0x1a8>
 8010fd0:	4616      	mov	r6, r2
 8010fd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8010fd6:	fb03 5711 	mls	r7, r3, r1, r5
 8010fda:	5dc7      	ldrb	r7, [r0, r7]
 8010fdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010fe0:	462f      	mov	r7, r5
 8010fe2:	42bb      	cmp	r3, r7
 8010fe4:	460d      	mov	r5, r1
 8010fe6:	d9f4      	bls.n	8010fd2 <_printf_i+0x112>
 8010fe8:	2b08      	cmp	r3, #8
 8010fea:	d10b      	bne.n	8011004 <_printf_i+0x144>
 8010fec:	6823      	ldr	r3, [r4, #0]
 8010fee:	07df      	lsls	r7, r3, #31
 8010ff0:	d508      	bpl.n	8011004 <_printf_i+0x144>
 8010ff2:	6923      	ldr	r3, [r4, #16]
 8010ff4:	6861      	ldr	r1, [r4, #4]
 8010ff6:	4299      	cmp	r1, r3
 8010ff8:	bfde      	ittt	le
 8010ffa:	2330      	movle	r3, #48	@ 0x30
 8010ffc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011000:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011004:	1b92      	subs	r2, r2, r6
 8011006:	6122      	str	r2, [r4, #16]
 8011008:	f8cd a000 	str.w	sl, [sp]
 801100c:	464b      	mov	r3, r9
 801100e:	aa03      	add	r2, sp, #12
 8011010:	4621      	mov	r1, r4
 8011012:	4640      	mov	r0, r8
 8011014:	f7ff fee6 	bl	8010de4 <_printf_common>
 8011018:	3001      	adds	r0, #1
 801101a:	d14a      	bne.n	80110b2 <_printf_i+0x1f2>
 801101c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011020:	b004      	add	sp, #16
 8011022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011026:	6823      	ldr	r3, [r4, #0]
 8011028:	f043 0320 	orr.w	r3, r3, #32
 801102c:	6023      	str	r3, [r4, #0]
 801102e:	4833      	ldr	r0, [pc, #204]	@ (80110fc <_printf_i+0x23c>)
 8011030:	2778      	movs	r7, #120	@ 0x78
 8011032:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011036:	6823      	ldr	r3, [r4, #0]
 8011038:	6831      	ldr	r1, [r6, #0]
 801103a:	061f      	lsls	r7, r3, #24
 801103c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011040:	d402      	bmi.n	8011048 <_printf_i+0x188>
 8011042:	065f      	lsls	r7, r3, #25
 8011044:	bf48      	it	mi
 8011046:	b2ad      	uxthmi	r5, r5
 8011048:	6031      	str	r1, [r6, #0]
 801104a:	07d9      	lsls	r1, r3, #31
 801104c:	bf44      	itt	mi
 801104e:	f043 0320 	orrmi.w	r3, r3, #32
 8011052:	6023      	strmi	r3, [r4, #0]
 8011054:	b11d      	cbz	r5, 801105e <_printf_i+0x19e>
 8011056:	2310      	movs	r3, #16
 8011058:	e7ac      	b.n	8010fb4 <_printf_i+0xf4>
 801105a:	4827      	ldr	r0, [pc, #156]	@ (80110f8 <_printf_i+0x238>)
 801105c:	e7e9      	b.n	8011032 <_printf_i+0x172>
 801105e:	6823      	ldr	r3, [r4, #0]
 8011060:	f023 0320 	bic.w	r3, r3, #32
 8011064:	6023      	str	r3, [r4, #0]
 8011066:	e7f6      	b.n	8011056 <_printf_i+0x196>
 8011068:	4616      	mov	r6, r2
 801106a:	e7bd      	b.n	8010fe8 <_printf_i+0x128>
 801106c:	6833      	ldr	r3, [r6, #0]
 801106e:	6825      	ldr	r5, [r4, #0]
 8011070:	6961      	ldr	r1, [r4, #20]
 8011072:	1d18      	adds	r0, r3, #4
 8011074:	6030      	str	r0, [r6, #0]
 8011076:	062e      	lsls	r6, r5, #24
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	d501      	bpl.n	8011080 <_printf_i+0x1c0>
 801107c:	6019      	str	r1, [r3, #0]
 801107e:	e002      	b.n	8011086 <_printf_i+0x1c6>
 8011080:	0668      	lsls	r0, r5, #25
 8011082:	d5fb      	bpl.n	801107c <_printf_i+0x1bc>
 8011084:	8019      	strh	r1, [r3, #0]
 8011086:	2300      	movs	r3, #0
 8011088:	6123      	str	r3, [r4, #16]
 801108a:	4616      	mov	r6, r2
 801108c:	e7bc      	b.n	8011008 <_printf_i+0x148>
 801108e:	6833      	ldr	r3, [r6, #0]
 8011090:	1d1a      	adds	r2, r3, #4
 8011092:	6032      	str	r2, [r6, #0]
 8011094:	681e      	ldr	r6, [r3, #0]
 8011096:	6862      	ldr	r2, [r4, #4]
 8011098:	2100      	movs	r1, #0
 801109a:	4630      	mov	r0, r6
 801109c:	f7ef f8a0 	bl	80001e0 <memchr>
 80110a0:	b108      	cbz	r0, 80110a6 <_printf_i+0x1e6>
 80110a2:	1b80      	subs	r0, r0, r6
 80110a4:	6060      	str	r0, [r4, #4]
 80110a6:	6863      	ldr	r3, [r4, #4]
 80110a8:	6123      	str	r3, [r4, #16]
 80110aa:	2300      	movs	r3, #0
 80110ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110b0:	e7aa      	b.n	8011008 <_printf_i+0x148>
 80110b2:	6923      	ldr	r3, [r4, #16]
 80110b4:	4632      	mov	r2, r6
 80110b6:	4649      	mov	r1, r9
 80110b8:	4640      	mov	r0, r8
 80110ba:	47d0      	blx	sl
 80110bc:	3001      	adds	r0, #1
 80110be:	d0ad      	beq.n	801101c <_printf_i+0x15c>
 80110c0:	6823      	ldr	r3, [r4, #0]
 80110c2:	079b      	lsls	r3, r3, #30
 80110c4:	d413      	bmi.n	80110ee <_printf_i+0x22e>
 80110c6:	68e0      	ldr	r0, [r4, #12]
 80110c8:	9b03      	ldr	r3, [sp, #12]
 80110ca:	4298      	cmp	r0, r3
 80110cc:	bfb8      	it	lt
 80110ce:	4618      	movlt	r0, r3
 80110d0:	e7a6      	b.n	8011020 <_printf_i+0x160>
 80110d2:	2301      	movs	r3, #1
 80110d4:	4632      	mov	r2, r6
 80110d6:	4649      	mov	r1, r9
 80110d8:	4640      	mov	r0, r8
 80110da:	47d0      	blx	sl
 80110dc:	3001      	adds	r0, #1
 80110de:	d09d      	beq.n	801101c <_printf_i+0x15c>
 80110e0:	3501      	adds	r5, #1
 80110e2:	68e3      	ldr	r3, [r4, #12]
 80110e4:	9903      	ldr	r1, [sp, #12]
 80110e6:	1a5b      	subs	r3, r3, r1
 80110e8:	42ab      	cmp	r3, r5
 80110ea:	dcf2      	bgt.n	80110d2 <_printf_i+0x212>
 80110ec:	e7eb      	b.n	80110c6 <_printf_i+0x206>
 80110ee:	2500      	movs	r5, #0
 80110f0:	f104 0619 	add.w	r6, r4, #25
 80110f4:	e7f5      	b.n	80110e2 <_printf_i+0x222>
 80110f6:	bf00      	nop
 80110f8:	08013e6e 	.word	0x08013e6e
 80110fc:	08013e7f 	.word	0x08013e7f

08011100 <std>:
 8011100:	2300      	movs	r3, #0
 8011102:	b510      	push	{r4, lr}
 8011104:	4604      	mov	r4, r0
 8011106:	e9c0 3300 	strd	r3, r3, [r0]
 801110a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801110e:	6083      	str	r3, [r0, #8]
 8011110:	8181      	strh	r1, [r0, #12]
 8011112:	6643      	str	r3, [r0, #100]	@ 0x64
 8011114:	81c2      	strh	r2, [r0, #14]
 8011116:	6183      	str	r3, [r0, #24]
 8011118:	4619      	mov	r1, r3
 801111a:	2208      	movs	r2, #8
 801111c:	305c      	adds	r0, #92	@ 0x5c
 801111e:	f000 f914 	bl	801134a <memset>
 8011122:	4b0d      	ldr	r3, [pc, #52]	@ (8011158 <std+0x58>)
 8011124:	6263      	str	r3, [r4, #36]	@ 0x24
 8011126:	4b0d      	ldr	r3, [pc, #52]	@ (801115c <std+0x5c>)
 8011128:	62a3      	str	r3, [r4, #40]	@ 0x28
 801112a:	4b0d      	ldr	r3, [pc, #52]	@ (8011160 <std+0x60>)
 801112c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801112e:	4b0d      	ldr	r3, [pc, #52]	@ (8011164 <std+0x64>)
 8011130:	6323      	str	r3, [r4, #48]	@ 0x30
 8011132:	4b0d      	ldr	r3, [pc, #52]	@ (8011168 <std+0x68>)
 8011134:	6224      	str	r4, [r4, #32]
 8011136:	429c      	cmp	r4, r3
 8011138:	d006      	beq.n	8011148 <std+0x48>
 801113a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801113e:	4294      	cmp	r4, r2
 8011140:	d002      	beq.n	8011148 <std+0x48>
 8011142:	33d0      	adds	r3, #208	@ 0xd0
 8011144:	429c      	cmp	r4, r3
 8011146:	d105      	bne.n	8011154 <std+0x54>
 8011148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801114c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011150:	f000 b996 	b.w	8011480 <__retarget_lock_init_recursive>
 8011154:	bd10      	pop	{r4, pc}
 8011156:	bf00      	nop
 8011158:	080112c5 	.word	0x080112c5
 801115c:	080112e7 	.word	0x080112e7
 8011160:	0801131f 	.word	0x0801131f
 8011164:	08011343 	.word	0x08011343
 8011168:	200022b8 	.word	0x200022b8

0801116c <stdio_exit_handler>:
 801116c:	4a02      	ldr	r2, [pc, #8]	@ (8011178 <stdio_exit_handler+0xc>)
 801116e:	4903      	ldr	r1, [pc, #12]	@ (801117c <stdio_exit_handler+0x10>)
 8011170:	4803      	ldr	r0, [pc, #12]	@ (8011180 <stdio_exit_handler+0x14>)
 8011172:	f000 b869 	b.w	8011248 <_fwalk_sglue>
 8011176:	bf00      	nop
 8011178:	2000012c 	.word	0x2000012c
 801117c:	08012c91 	.word	0x08012c91
 8011180:	2000013c 	.word	0x2000013c

08011184 <cleanup_stdio>:
 8011184:	6841      	ldr	r1, [r0, #4]
 8011186:	4b0c      	ldr	r3, [pc, #48]	@ (80111b8 <cleanup_stdio+0x34>)
 8011188:	4299      	cmp	r1, r3
 801118a:	b510      	push	{r4, lr}
 801118c:	4604      	mov	r4, r0
 801118e:	d001      	beq.n	8011194 <cleanup_stdio+0x10>
 8011190:	f001 fd7e 	bl	8012c90 <_fflush_r>
 8011194:	68a1      	ldr	r1, [r4, #8]
 8011196:	4b09      	ldr	r3, [pc, #36]	@ (80111bc <cleanup_stdio+0x38>)
 8011198:	4299      	cmp	r1, r3
 801119a:	d002      	beq.n	80111a2 <cleanup_stdio+0x1e>
 801119c:	4620      	mov	r0, r4
 801119e:	f001 fd77 	bl	8012c90 <_fflush_r>
 80111a2:	68e1      	ldr	r1, [r4, #12]
 80111a4:	4b06      	ldr	r3, [pc, #24]	@ (80111c0 <cleanup_stdio+0x3c>)
 80111a6:	4299      	cmp	r1, r3
 80111a8:	d004      	beq.n	80111b4 <cleanup_stdio+0x30>
 80111aa:	4620      	mov	r0, r4
 80111ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111b0:	f001 bd6e 	b.w	8012c90 <_fflush_r>
 80111b4:	bd10      	pop	{r4, pc}
 80111b6:	bf00      	nop
 80111b8:	200022b8 	.word	0x200022b8
 80111bc:	20002320 	.word	0x20002320
 80111c0:	20002388 	.word	0x20002388

080111c4 <global_stdio_init.part.0>:
 80111c4:	b510      	push	{r4, lr}
 80111c6:	4b0b      	ldr	r3, [pc, #44]	@ (80111f4 <global_stdio_init.part.0+0x30>)
 80111c8:	4c0b      	ldr	r4, [pc, #44]	@ (80111f8 <global_stdio_init.part.0+0x34>)
 80111ca:	4a0c      	ldr	r2, [pc, #48]	@ (80111fc <global_stdio_init.part.0+0x38>)
 80111cc:	601a      	str	r2, [r3, #0]
 80111ce:	4620      	mov	r0, r4
 80111d0:	2200      	movs	r2, #0
 80111d2:	2104      	movs	r1, #4
 80111d4:	f7ff ff94 	bl	8011100 <std>
 80111d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80111dc:	2201      	movs	r2, #1
 80111de:	2109      	movs	r1, #9
 80111e0:	f7ff ff8e 	bl	8011100 <std>
 80111e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80111e8:	2202      	movs	r2, #2
 80111ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111ee:	2112      	movs	r1, #18
 80111f0:	f7ff bf86 	b.w	8011100 <std>
 80111f4:	200023f0 	.word	0x200023f0
 80111f8:	200022b8 	.word	0x200022b8
 80111fc:	0801116d 	.word	0x0801116d

08011200 <__sfp_lock_acquire>:
 8011200:	4801      	ldr	r0, [pc, #4]	@ (8011208 <__sfp_lock_acquire+0x8>)
 8011202:	f000 b93e 	b.w	8011482 <__retarget_lock_acquire_recursive>
 8011206:	bf00      	nop
 8011208:	200023f9 	.word	0x200023f9

0801120c <__sfp_lock_release>:
 801120c:	4801      	ldr	r0, [pc, #4]	@ (8011214 <__sfp_lock_release+0x8>)
 801120e:	f000 b939 	b.w	8011484 <__retarget_lock_release_recursive>
 8011212:	bf00      	nop
 8011214:	200023f9 	.word	0x200023f9

08011218 <__sinit>:
 8011218:	b510      	push	{r4, lr}
 801121a:	4604      	mov	r4, r0
 801121c:	f7ff fff0 	bl	8011200 <__sfp_lock_acquire>
 8011220:	6a23      	ldr	r3, [r4, #32]
 8011222:	b11b      	cbz	r3, 801122c <__sinit+0x14>
 8011224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011228:	f7ff bff0 	b.w	801120c <__sfp_lock_release>
 801122c:	4b04      	ldr	r3, [pc, #16]	@ (8011240 <__sinit+0x28>)
 801122e:	6223      	str	r3, [r4, #32]
 8011230:	4b04      	ldr	r3, [pc, #16]	@ (8011244 <__sinit+0x2c>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d1f5      	bne.n	8011224 <__sinit+0xc>
 8011238:	f7ff ffc4 	bl	80111c4 <global_stdio_init.part.0>
 801123c:	e7f2      	b.n	8011224 <__sinit+0xc>
 801123e:	bf00      	nop
 8011240:	08011185 	.word	0x08011185
 8011244:	200023f0 	.word	0x200023f0

08011248 <_fwalk_sglue>:
 8011248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801124c:	4607      	mov	r7, r0
 801124e:	4688      	mov	r8, r1
 8011250:	4614      	mov	r4, r2
 8011252:	2600      	movs	r6, #0
 8011254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011258:	f1b9 0901 	subs.w	r9, r9, #1
 801125c:	d505      	bpl.n	801126a <_fwalk_sglue+0x22>
 801125e:	6824      	ldr	r4, [r4, #0]
 8011260:	2c00      	cmp	r4, #0
 8011262:	d1f7      	bne.n	8011254 <_fwalk_sglue+0xc>
 8011264:	4630      	mov	r0, r6
 8011266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801126a:	89ab      	ldrh	r3, [r5, #12]
 801126c:	2b01      	cmp	r3, #1
 801126e:	d907      	bls.n	8011280 <_fwalk_sglue+0x38>
 8011270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011274:	3301      	adds	r3, #1
 8011276:	d003      	beq.n	8011280 <_fwalk_sglue+0x38>
 8011278:	4629      	mov	r1, r5
 801127a:	4638      	mov	r0, r7
 801127c:	47c0      	blx	r8
 801127e:	4306      	orrs	r6, r0
 8011280:	3568      	adds	r5, #104	@ 0x68
 8011282:	e7e9      	b.n	8011258 <_fwalk_sglue+0x10>

08011284 <siprintf>:
 8011284:	b40e      	push	{r1, r2, r3}
 8011286:	b500      	push	{lr}
 8011288:	b09c      	sub	sp, #112	@ 0x70
 801128a:	ab1d      	add	r3, sp, #116	@ 0x74
 801128c:	9002      	str	r0, [sp, #8]
 801128e:	9006      	str	r0, [sp, #24]
 8011290:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011294:	4809      	ldr	r0, [pc, #36]	@ (80112bc <siprintf+0x38>)
 8011296:	9107      	str	r1, [sp, #28]
 8011298:	9104      	str	r1, [sp, #16]
 801129a:	4909      	ldr	r1, [pc, #36]	@ (80112c0 <siprintf+0x3c>)
 801129c:	f853 2b04 	ldr.w	r2, [r3], #4
 80112a0:	9105      	str	r1, [sp, #20]
 80112a2:	6800      	ldr	r0, [r0, #0]
 80112a4:	9301      	str	r3, [sp, #4]
 80112a6:	a902      	add	r1, sp, #8
 80112a8:	f001 fb72 	bl	8012990 <_svfiprintf_r>
 80112ac:	9b02      	ldr	r3, [sp, #8]
 80112ae:	2200      	movs	r2, #0
 80112b0:	701a      	strb	r2, [r3, #0]
 80112b2:	b01c      	add	sp, #112	@ 0x70
 80112b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80112b8:	b003      	add	sp, #12
 80112ba:	4770      	bx	lr
 80112bc:	20000138 	.word	0x20000138
 80112c0:	ffff0208 	.word	0xffff0208

080112c4 <__sread>:
 80112c4:	b510      	push	{r4, lr}
 80112c6:	460c      	mov	r4, r1
 80112c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112cc:	f000 f87a 	bl	80113c4 <_read_r>
 80112d0:	2800      	cmp	r0, #0
 80112d2:	bfab      	itete	ge
 80112d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80112d6:	89a3      	ldrhlt	r3, [r4, #12]
 80112d8:	181b      	addge	r3, r3, r0
 80112da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80112de:	bfac      	ite	ge
 80112e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80112e2:	81a3      	strhlt	r3, [r4, #12]
 80112e4:	bd10      	pop	{r4, pc}

080112e6 <__swrite>:
 80112e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ea:	461f      	mov	r7, r3
 80112ec:	898b      	ldrh	r3, [r1, #12]
 80112ee:	05db      	lsls	r3, r3, #23
 80112f0:	4605      	mov	r5, r0
 80112f2:	460c      	mov	r4, r1
 80112f4:	4616      	mov	r6, r2
 80112f6:	d505      	bpl.n	8011304 <__swrite+0x1e>
 80112f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112fc:	2302      	movs	r3, #2
 80112fe:	2200      	movs	r2, #0
 8011300:	f000 f84e 	bl	80113a0 <_lseek_r>
 8011304:	89a3      	ldrh	r3, [r4, #12]
 8011306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801130a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801130e:	81a3      	strh	r3, [r4, #12]
 8011310:	4632      	mov	r2, r6
 8011312:	463b      	mov	r3, r7
 8011314:	4628      	mov	r0, r5
 8011316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801131a:	f000 b875 	b.w	8011408 <_write_r>

0801131e <__sseek>:
 801131e:	b510      	push	{r4, lr}
 8011320:	460c      	mov	r4, r1
 8011322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011326:	f000 f83b 	bl	80113a0 <_lseek_r>
 801132a:	1c43      	adds	r3, r0, #1
 801132c:	89a3      	ldrh	r3, [r4, #12]
 801132e:	bf15      	itete	ne
 8011330:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011332:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011336:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801133a:	81a3      	strheq	r3, [r4, #12]
 801133c:	bf18      	it	ne
 801133e:	81a3      	strhne	r3, [r4, #12]
 8011340:	bd10      	pop	{r4, pc}

08011342 <__sclose>:
 8011342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011346:	f000 b81b 	b.w	8011380 <_close_r>

0801134a <memset>:
 801134a:	4402      	add	r2, r0
 801134c:	4603      	mov	r3, r0
 801134e:	4293      	cmp	r3, r2
 8011350:	d100      	bne.n	8011354 <memset+0xa>
 8011352:	4770      	bx	lr
 8011354:	f803 1b01 	strb.w	r1, [r3], #1
 8011358:	e7f9      	b.n	801134e <memset+0x4>

0801135a <strcat>:
 801135a:	b510      	push	{r4, lr}
 801135c:	4602      	mov	r2, r0
 801135e:	7814      	ldrb	r4, [r2, #0]
 8011360:	4613      	mov	r3, r2
 8011362:	3201      	adds	r2, #1
 8011364:	2c00      	cmp	r4, #0
 8011366:	d1fa      	bne.n	801135e <strcat+0x4>
 8011368:	3b01      	subs	r3, #1
 801136a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801136e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011372:	2a00      	cmp	r2, #0
 8011374:	d1f9      	bne.n	801136a <strcat+0x10>
 8011376:	bd10      	pop	{r4, pc}

08011378 <_localeconv_r>:
 8011378:	4800      	ldr	r0, [pc, #0]	@ (801137c <_localeconv_r+0x4>)
 801137a:	4770      	bx	lr
 801137c:	20000278 	.word	0x20000278

08011380 <_close_r>:
 8011380:	b538      	push	{r3, r4, r5, lr}
 8011382:	4d06      	ldr	r5, [pc, #24]	@ (801139c <_close_r+0x1c>)
 8011384:	2300      	movs	r3, #0
 8011386:	4604      	mov	r4, r0
 8011388:	4608      	mov	r0, r1
 801138a:	602b      	str	r3, [r5, #0]
 801138c:	f7f1 fe46 	bl	800301c <_close>
 8011390:	1c43      	adds	r3, r0, #1
 8011392:	d102      	bne.n	801139a <_close_r+0x1a>
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	b103      	cbz	r3, 801139a <_close_r+0x1a>
 8011398:	6023      	str	r3, [r4, #0]
 801139a:	bd38      	pop	{r3, r4, r5, pc}
 801139c:	200023f4 	.word	0x200023f4

080113a0 <_lseek_r>:
 80113a0:	b538      	push	{r3, r4, r5, lr}
 80113a2:	4d07      	ldr	r5, [pc, #28]	@ (80113c0 <_lseek_r+0x20>)
 80113a4:	4604      	mov	r4, r0
 80113a6:	4608      	mov	r0, r1
 80113a8:	4611      	mov	r1, r2
 80113aa:	2200      	movs	r2, #0
 80113ac:	602a      	str	r2, [r5, #0]
 80113ae:	461a      	mov	r2, r3
 80113b0:	f7f1 fe5b 	bl	800306a <_lseek>
 80113b4:	1c43      	adds	r3, r0, #1
 80113b6:	d102      	bne.n	80113be <_lseek_r+0x1e>
 80113b8:	682b      	ldr	r3, [r5, #0]
 80113ba:	b103      	cbz	r3, 80113be <_lseek_r+0x1e>
 80113bc:	6023      	str	r3, [r4, #0]
 80113be:	bd38      	pop	{r3, r4, r5, pc}
 80113c0:	200023f4 	.word	0x200023f4

080113c4 <_read_r>:
 80113c4:	b538      	push	{r3, r4, r5, lr}
 80113c6:	4d07      	ldr	r5, [pc, #28]	@ (80113e4 <_read_r+0x20>)
 80113c8:	4604      	mov	r4, r0
 80113ca:	4608      	mov	r0, r1
 80113cc:	4611      	mov	r1, r2
 80113ce:	2200      	movs	r2, #0
 80113d0:	602a      	str	r2, [r5, #0]
 80113d2:	461a      	mov	r2, r3
 80113d4:	f7f1 fde9 	bl	8002faa <_read>
 80113d8:	1c43      	adds	r3, r0, #1
 80113da:	d102      	bne.n	80113e2 <_read_r+0x1e>
 80113dc:	682b      	ldr	r3, [r5, #0]
 80113de:	b103      	cbz	r3, 80113e2 <_read_r+0x1e>
 80113e0:	6023      	str	r3, [r4, #0]
 80113e2:	bd38      	pop	{r3, r4, r5, pc}
 80113e4:	200023f4 	.word	0x200023f4

080113e8 <_sbrk_r>:
 80113e8:	b538      	push	{r3, r4, r5, lr}
 80113ea:	4d06      	ldr	r5, [pc, #24]	@ (8011404 <_sbrk_r+0x1c>)
 80113ec:	2300      	movs	r3, #0
 80113ee:	4604      	mov	r4, r0
 80113f0:	4608      	mov	r0, r1
 80113f2:	602b      	str	r3, [r5, #0]
 80113f4:	f7f1 fe46 	bl	8003084 <_sbrk>
 80113f8:	1c43      	adds	r3, r0, #1
 80113fa:	d102      	bne.n	8011402 <_sbrk_r+0x1a>
 80113fc:	682b      	ldr	r3, [r5, #0]
 80113fe:	b103      	cbz	r3, 8011402 <_sbrk_r+0x1a>
 8011400:	6023      	str	r3, [r4, #0]
 8011402:	bd38      	pop	{r3, r4, r5, pc}
 8011404:	200023f4 	.word	0x200023f4

08011408 <_write_r>:
 8011408:	b538      	push	{r3, r4, r5, lr}
 801140a:	4d07      	ldr	r5, [pc, #28]	@ (8011428 <_write_r+0x20>)
 801140c:	4604      	mov	r4, r0
 801140e:	4608      	mov	r0, r1
 8011410:	4611      	mov	r1, r2
 8011412:	2200      	movs	r2, #0
 8011414:	602a      	str	r2, [r5, #0]
 8011416:	461a      	mov	r2, r3
 8011418:	f7f1 fde4 	bl	8002fe4 <_write>
 801141c:	1c43      	adds	r3, r0, #1
 801141e:	d102      	bne.n	8011426 <_write_r+0x1e>
 8011420:	682b      	ldr	r3, [r5, #0]
 8011422:	b103      	cbz	r3, 8011426 <_write_r+0x1e>
 8011424:	6023      	str	r3, [r4, #0]
 8011426:	bd38      	pop	{r3, r4, r5, pc}
 8011428:	200023f4 	.word	0x200023f4

0801142c <__errno>:
 801142c:	4b01      	ldr	r3, [pc, #4]	@ (8011434 <__errno+0x8>)
 801142e:	6818      	ldr	r0, [r3, #0]
 8011430:	4770      	bx	lr
 8011432:	bf00      	nop
 8011434:	20000138 	.word	0x20000138

08011438 <__libc_init_array>:
 8011438:	b570      	push	{r4, r5, r6, lr}
 801143a:	4d0d      	ldr	r5, [pc, #52]	@ (8011470 <__libc_init_array+0x38>)
 801143c:	4c0d      	ldr	r4, [pc, #52]	@ (8011474 <__libc_init_array+0x3c>)
 801143e:	1b64      	subs	r4, r4, r5
 8011440:	10a4      	asrs	r4, r4, #2
 8011442:	2600      	movs	r6, #0
 8011444:	42a6      	cmp	r6, r4
 8011446:	d109      	bne.n	801145c <__libc_init_array+0x24>
 8011448:	4d0b      	ldr	r5, [pc, #44]	@ (8011478 <__libc_init_array+0x40>)
 801144a:	4c0c      	ldr	r4, [pc, #48]	@ (801147c <__libc_init_array+0x44>)
 801144c:	f002 fb12 	bl	8013a74 <_init>
 8011450:	1b64      	subs	r4, r4, r5
 8011452:	10a4      	asrs	r4, r4, #2
 8011454:	2600      	movs	r6, #0
 8011456:	42a6      	cmp	r6, r4
 8011458:	d105      	bne.n	8011466 <__libc_init_array+0x2e>
 801145a:	bd70      	pop	{r4, r5, r6, pc}
 801145c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011460:	4798      	blx	r3
 8011462:	3601      	adds	r6, #1
 8011464:	e7ee      	b.n	8011444 <__libc_init_array+0xc>
 8011466:	f855 3b04 	ldr.w	r3, [r5], #4
 801146a:	4798      	blx	r3
 801146c:	3601      	adds	r6, #1
 801146e:	e7f2      	b.n	8011456 <__libc_init_array+0x1e>
 8011470:	08014248 	.word	0x08014248
 8011474:	08014248 	.word	0x08014248
 8011478:	08014248 	.word	0x08014248
 801147c:	0801424c 	.word	0x0801424c

08011480 <__retarget_lock_init_recursive>:
 8011480:	4770      	bx	lr

08011482 <__retarget_lock_acquire_recursive>:
 8011482:	4770      	bx	lr

08011484 <__retarget_lock_release_recursive>:
 8011484:	4770      	bx	lr

08011486 <memcpy>:
 8011486:	440a      	add	r2, r1
 8011488:	4291      	cmp	r1, r2
 801148a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801148e:	d100      	bne.n	8011492 <memcpy+0xc>
 8011490:	4770      	bx	lr
 8011492:	b510      	push	{r4, lr}
 8011494:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011498:	f803 4f01 	strb.w	r4, [r3, #1]!
 801149c:	4291      	cmp	r1, r2
 801149e:	d1f9      	bne.n	8011494 <memcpy+0xe>
 80114a0:	bd10      	pop	{r4, pc}

080114a2 <quorem>:
 80114a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a6:	6903      	ldr	r3, [r0, #16]
 80114a8:	690c      	ldr	r4, [r1, #16]
 80114aa:	42a3      	cmp	r3, r4
 80114ac:	4607      	mov	r7, r0
 80114ae:	db7e      	blt.n	80115ae <quorem+0x10c>
 80114b0:	3c01      	subs	r4, #1
 80114b2:	f101 0814 	add.w	r8, r1, #20
 80114b6:	00a3      	lsls	r3, r4, #2
 80114b8:	f100 0514 	add.w	r5, r0, #20
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114c2:	9301      	str	r3, [sp, #4]
 80114c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80114c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114cc:	3301      	adds	r3, #1
 80114ce:	429a      	cmp	r2, r3
 80114d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80114d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80114d8:	d32e      	bcc.n	8011538 <quorem+0x96>
 80114da:	f04f 0a00 	mov.w	sl, #0
 80114de:	46c4      	mov	ip, r8
 80114e0:	46ae      	mov	lr, r5
 80114e2:	46d3      	mov	fp, sl
 80114e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80114e8:	b298      	uxth	r0, r3
 80114ea:	fb06 a000 	mla	r0, r6, r0, sl
 80114ee:	0c02      	lsrs	r2, r0, #16
 80114f0:	0c1b      	lsrs	r3, r3, #16
 80114f2:	fb06 2303 	mla	r3, r6, r3, r2
 80114f6:	f8de 2000 	ldr.w	r2, [lr]
 80114fa:	b280      	uxth	r0, r0
 80114fc:	b292      	uxth	r2, r2
 80114fe:	1a12      	subs	r2, r2, r0
 8011500:	445a      	add	r2, fp
 8011502:	f8de 0000 	ldr.w	r0, [lr]
 8011506:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801150a:	b29b      	uxth	r3, r3
 801150c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011510:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011514:	b292      	uxth	r2, r2
 8011516:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801151a:	45e1      	cmp	r9, ip
 801151c:	f84e 2b04 	str.w	r2, [lr], #4
 8011520:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011524:	d2de      	bcs.n	80114e4 <quorem+0x42>
 8011526:	9b00      	ldr	r3, [sp, #0]
 8011528:	58eb      	ldr	r3, [r5, r3]
 801152a:	b92b      	cbnz	r3, 8011538 <quorem+0x96>
 801152c:	9b01      	ldr	r3, [sp, #4]
 801152e:	3b04      	subs	r3, #4
 8011530:	429d      	cmp	r5, r3
 8011532:	461a      	mov	r2, r3
 8011534:	d32f      	bcc.n	8011596 <quorem+0xf4>
 8011536:	613c      	str	r4, [r7, #16]
 8011538:	4638      	mov	r0, r7
 801153a:	f001 f8c5 	bl	80126c8 <__mcmp>
 801153e:	2800      	cmp	r0, #0
 8011540:	db25      	blt.n	801158e <quorem+0xec>
 8011542:	4629      	mov	r1, r5
 8011544:	2000      	movs	r0, #0
 8011546:	f858 2b04 	ldr.w	r2, [r8], #4
 801154a:	f8d1 c000 	ldr.w	ip, [r1]
 801154e:	fa1f fe82 	uxth.w	lr, r2
 8011552:	fa1f f38c 	uxth.w	r3, ip
 8011556:	eba3 030e 	sub.w	r3, r3, lr
 801155a:	4403      	add	r3, r0
 801155c:	0c12      	lsrs	r2, r2, #16
 801155e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011562:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011566:	b29b      	uxth	r3, r3
 8011568:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801156c:	45c1      	cmp	r9, r8
 801156e:	f841 3b04 	str.w	r3, [r1], #4
 8011572:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011576:	d2e6      	bcs.n	8011546 <quorem+0xa4>
 8011578:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801157c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011580:	b922      	cbnz	r2, 801158c <quorem+0xea>
 8011582:	3b04      	subs	r3, #4
 8011584:	429d      	cmp	r5, r3
 8011586:	461a      	mov	r2, r3
 8011588:	d30b      	bcc.n	80115a2 <quorem+0x100>
 801158a:	613c      	str	r4, [r7, #16]
 801158c:	3601      	adds	r6, #1
 801158e:	4630      	mov	r0, r6
 8011590:	b003      	add	sp, #12
 8011592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011596:	6812      	ldr	r2, [r2, #0]
 8011598:	3b04      	subs	r3, #4
 801159a:	2a00      	cmp	r2, #0
 801159c:	d1cb      	bne.n	8011536 <quorem+0x94>
 801159e:	3c01      	subs	r4, #1
 80115a0:	e7c6      	b.n	8011530 <quorem+0x8e>
 80115a2:	6812      	ldr	r2, [r2, #0]
 80115a4:	3b04      	subs	r3, #4
 80115a6:	2a00      	cmp	r2, #0
 80115a8:	d1ef      	bne.n	801158a <quorem+0xe8>
 80115aa:	3c01      	subs	r4, #1
 80115ac:	e7ea      	b.n	8011584 <quorem+0xe2>
 80115ae:	2000      	movs	r0, #0
 80115b0:	e7ee      	b.n	8011590 <quorem+0xee>
 80115b2:	0000      	movs	r0, r0
 80115b4:	0000      	movs	r0, r0
	...

080115b8 <_dtoa_r>:
 80115b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115bc:	69c7      	ldr	r7, [r0, #28]
 80115be:	b099      	sub	sp, #100	@ 0x64
 80115c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80115c4:	ec55 4b10 	vmov	r4, r5, d0
 80115c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80115ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80115cc:	4683      	mov	fp, r0
 80115ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80115d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80115d2:	b97f      	cbnz	r7, 80115f4 <_dtoa_r+0x3c>
 80115d4:	2010      	movs	r0, #16
 80115d6:	f7ff f87d 	bl	80106d4 <malloc>
 80115da:	4602      	mov	r2, r0
 80115dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80115e0:	b920      	cbnz	r0, 80115ec <_dtoa_r+0x34>
 80115e2:	4ba7      	ldr	r3, [pc, #668]	@ (8011880 <_dtoa_r+0x2c8>)
 80115e4:	21ef      	movs	r1, #239	@ 0xef
 80115e6:	48a7      	ldr	r0, [pc, #668]	@ (8011884 <_dtoa_r+0x2cc>)
 80115e8:	f001 fb94 	bl	8012d14 <__assert_func>
 80115ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80115f0:	6007      	str	r7, [r0, #0]
 80115f2:	60c7      	str	r7, [r0, #12]
 80115f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80115f8:	6819      	ldr	r1, [r3, #0]
 80115fa:	b159      	cbz	r1, 8011614 <_dtoa_r+0x5c>
 80115fc:	685a      	ldr	r2, [r3, #4]
 80115fe:	604a      	str	r2, [r1, #4]
 8011600:	2301      	movs	r3, #1
 8011602:	4093      	lsls	r3, r2
 8011604:	608b      	str	r3, [r1, #8]
 8011606:	4658      	mov	r0, fp
 8011608:	f000 fe24 	bl	8012254 <_Bfree>
 801160c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011610:	2200      	movs	r2, #0
 8011612:	601a      	str	r2, [r3, #0]
 8011614:	1e2b      	subs	r3, r5, #0
 8011616:	bfb9      	ittee	lt
 8011618:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801161c:	9303      	strlt	r3, [sp, #12]
 801161e:	2300      	movge	r3, #0
 8011620:	6033      	strge	r3, [r6, #0]
 8011622:	9f03      	ldr	r7, [sp, #12]
 8011624:	4b98      	ldr	r3, [pc, #608]	@ (8011888 <_dtoa_r+0x2d0>)
 8011626:	bfbc      	itt	lt
 8011628:	2201      	movlt	r2, #1
 801162a:	6032      	strlt	r2, [r6, #0]
 801162c:	43bb      	bics	r3, r7
 801162e:	d112      	bne.n	8011656 <_dtoa_r+0x9e>
 8011630:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011632:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011636:	6013      	str	r3, [r2, #0]
 8011638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801163c:	4323      	orrs	r3, r4
 801163e:	f000 854d 	beq.w	80120dc <_dtoa_r+0xb24>
 8011642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011644:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801189c <_dtoa_r+0x2e4>
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 854f 	beq.w	80120ec <_dtoa_r+0xb34>
 801164e:	f10a 0303 	add.w	r3, sl, #3
 8011652:	f000 bd49 	b.w	80120e8 <_dtoa_r+0xb30>
 8011656:	ed9d 7b02 	vldr	d7, [sp, #8]
 801165a:	2200      	movs	r2, #0
 801165c:	ec51 0b17 	vmov	r0, r1, d7
 8011660:	2300      	movs	r3, #0
 8011662:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011666:	f7ef fa37 	bl	8000ad8 <__aeabi_dcmpeq>
 801166a:	4680      	mov	r8, r0
 801166c:	b158      	cbz	r0, 8011686 <_dtoa_r+0xce>
 801166e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011670:	2301      	movs	r3, #1
 8011672:	6013      	str	r3, [r2, #0]
 8011674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011676:	b113      	cbz	r3, 801167e <_dtoa_r+0xc6>
 8011678:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801167a:	4b84      	ldr	r3, [pc, #528]	@ (801188c <_dtoa_r+0x2d4>)
 801167c:	6013      	str	r3, [r2, #0]
 801167e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80118a0 <_dtoa_r+0x2e8>
 8011682:	f000 bd33 	b.w	80120ec <_dtoa_r+0xb34>
 8011686:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801168a:	aa16      	add	r2, sp, #88	@ 0x58
 801168c:	a917      	add	r1, sp, #92	@ 0x5c
 801168e:	4658      	mov	r0, fp
 8011690:	f001 f8ca 	bl	8012828 <__d2b>
 8011694:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011698:	4681      	mov	r9, r0
 801169a:	2e00      	cmp	r6, #0
 801169c:	d077      	beq.n	801178e <_dtoa_r+0x1d6>
 801169e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80116a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80116a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80116a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80116ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80116b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80116b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80116b8:	4619      	mov	r1, r3
 80116ba:	2200      	movs	r2, #0
 80116bc:	4b74      	ldr	r3, [pc, #464]	@ (8011890 <_dtoa_r+0x2d8>)
 80116be:	f7ee fdeb 	bl	8000298 <__aeabi_dsub>
 80116c2:	a369      	add	r3, pc, #420	@ (adr r3, 8011868 <_dtoa_r+0x2b0>)
 80116c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c8:	f7ee ff9e 	bl	8000608 <__aeabi_dmul>
 80116cc:	a368      	add	r3, pc, #416	@ (adr r3, 8011870 <_dtoa_r+0x2b8>)
 80116ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d2:	f7ee fde3 	bl	800029c <__adddf3>
 80116d6:	4604      	mov	r4, r0
 80116d8:	4630      	mov	r0, r6
 80116da:	460d      	mov	r5, r1
 80116dc:	f7ee ff2a 	bl	8000534 <__aeabi_i2d>
 80116e0:	a365      	add	r3, pc, #404	@ (adr r3, 8011878 <_dtoa_r+0x2c0>)
 80116e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e6:	f7ee ff8f 	bl	8000608 <__aeabi_dmul>
 80116ea:	4602      	mov	r2, r0
 80116ec:	460b      	mov	r3, r1
 80116ee:	4620      	mov	r0, r4
 80116f0:	4629      	mov	r1, r5
 80116f2:	f7ee fdd3 	bl	800029c <__adddf3>
 80116f6:	4604      	mov	r4, r0
 80116f8:	460d      	mov	r5, r1
 80116fa:	f7ef fa35 	bl	8000b68 <__aeabi_d2iz>
 80116fe:	2200      	movs	r2, #0
 8011700:	4607      	mov	r7, r0
 8011702:	2300      	movs	r3, #0
 8011704:	4620      	mov	r0, r4
 8011706:	4629      	mov	r1, r5
 8011708:	f7ef f9f0 	bl	8000aec <__aeabi_dcmplt>
 801170c:	b140      	cbz	r0, 8011720 <_dtoa_r+0x168>
 801170e:	4638      	mov	r0, r7
 8011710:	f7ee ff10 	bl	8000534 <__aeabi_i2d>
 8011714:	4622      	mov	r2, r4
 8011716:	462b      	mov	r3, r5
 8011718:	f7ef f9de 	bl	8000ad8 <__aeabi_dcmpeq>
 801171c:	b900      	cbnz	r0, 8011720 <_dtoa_r+0x168>
 801171e:	3f01      	subs	r7, #1
 8011720:	2f16      	cmp	r7, #22
 8011722:	d851      	bhi.n	80117c8 <_dtoa_r+0x210>
 8011724:	4b5b      	ldr	r3, [pc, #364]	@ (8011894 <_dtoa_r+0x2dc>)
 8011726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011732:	f7ef f9db 	bl	8000aec <__aeabi_dcmplt>
 8011736:	2800      	cmp	r0, #0
 8011738:	d048      	beq.n	80117cc <_dtoa_r+0x214>
 801173a:	3f01      	subs	r7, #1
 801173c:	2300      	movs	r3, #0
 801173e:	9312      	str	r3, [sp, #72]	@ 0x48
 8011740:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011742:	1b9b      	subs	r3, r3, r6
 8011744:	1e5a      	subs	r2, r3, #1
 8011746:	bf44      	itt	mi
 8011748:	f1c3 0801 	rsbmi	r8, r3, #1
 801174c:	2300      	movmi	r3, #0
 801174e:	9208      	str	r2, [sp, #32]
 8011750:	bf54      	ite	pl
 8011752:	f04f 0800 	movpl.w	r8, #0
 8011756:	9308      	strmi	r3, [sp, #32]
 8011758:	2f00      	cmp	r7, #0
 801175a:	db39      	blt.n	80117d0 <_dtoa_r+0x218>
 801175c:	9b08      	ldr	r3, [sp, #32]
 801175e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011760:	443b      	add	r3, r7
 8011762:	9308      	str	r3, [sp, #32]
 8011764:	2300      	movs	r3, #0
 8011766:	930a      	str	r3, [sp, #40]	@ 0x28
 8011768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801176a:	2b09      	cmp	r3, #9
 801176c:	d864      	bhi.n	8011838 <_dtoa_r+0x280>
 801176e:	2b05      	cmp	r3, #5
 8011770:	bfc4      	itt	gt
 8011772:	3b04      	subgt	r3, #4
 8011774:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011778:	f1a3 0302 	sub.w	r3, r3, #2
 801177c:	bfcc      	ite	gt
 801177e:	2400      	movgt	r4, #0
 8011780:	2401      	movle	r4, #1
 8011782:	2b03      	cmp	r3, #3
 8011784:	d863      	bhi.n	801184e <_dtoa_r+0x296>
 8011786:	e8df f003 	tbb	[pc, r3]
 801178a:	372a      	.short	0x372a
 801178c:	5535      	.short	0x5535
 801178e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011792:	441e      	add	r6, r3
 8011794:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011798:	2b20      	cmp	r3, #32
 801179a:	bfc1      	itttt	gt
 801179c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80117a0:	409f      	lslgt	r7, r3
 80117a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80117a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80117aa:	bfd6      	itet	le
 80117ac:	f1c3 0320 	rsble	r3, r3, #32
 80117b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80117b4:	fa04 f003 	lslle.w	r0, r4, r3
 80117b8:	f7ee feac 	bl	8000514 <__aeabi_ui2d>
 80117bc:	2201      	movs	r2, #1
 80117be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80117c2:	3e01      	subs	r6, #1
 80117c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80117c6:	e777      	b.n	80116b8 <_dtoa_r+0x100>
 80117c8:	2301      	movs	r3, #1
 80117ca:	e7b8      	b.n	801173e <_dtoa_r+0x186>
 80117cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80117ce:	e7b7      	b.n	8011740 <_dtoa_r+0x188>
 80117d0:	427b      	negs	r3, r7
 80117d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80117d4:	2300      	movs	r3, #0
 80117d6:	eba8 0807 	sub.w	r8, r8, r7
 80117da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80117dc:	e7c4      	b.n	8011768 <_dtoa_r+0x1b0>
 80117de:	2300      	movs	r3, #0
 80117e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	dc35      	bgt.n	8011854 <_dtoa_r+0x29c>
 80117e8:	2301      	movs	r3, #1
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	9307      	str	r3, [sp, #28]
 80117ee:	461a      	mov	r2, r3
 80117f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80117f2:	e00b      	b.n	801180c <_dtoa_r+0x254>
 80117f4:	2301      	movs	r3, #1
 80117f6:	e7f3      	b.n	80117e0 <_dtoa_r+0x228>
 80117f8:	2300      	movs	r3, #0
 80117fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117fe:	18fb      	adds	r3, r7, r3
 8011800:	9300      	str	r3, [sp, #0]
 8011802:	3301      	adds	r3, #1
 8011804:	2b01      	cmp	r3, #1
 8011806:	9307      	str	r3, [sp, #28]
 8011808:	bfb8      	it	lt
 801180a:	2301      	movlt	r3, #1
 801180c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011810:	2100      	movs	r1, #0
 8011812:	2204      	movs	r2, #4
 8011814:	f102 0514 	add.w	r5, r2, #20
 8011818:	429d      	cmp	r5, r3
 801181a:	d91f      	bls.n	801185c <_dtoa_r+0x2a4>
 801181c:	6041      	str	r1, [r0, #4]
 801181e:	4658      	mov	r0, fp
 8011820:	f000 fcd8 	bl	80121d4 <_Balloc>
 8011824:	4682      	mov	sl, r0
 8011826:	2800      	cmp	r0, #0
 8011828:	d13c      	bne.n	80118a4 <_dtoa_r+0x2ec>
 801182a:	4b1b      	ldr	r3, [pc, #108]	@ (8011898 <_dtoa_r+0x2e0>)
 801182c:	4602      	mov	r2, r0
 801182e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011832:	e6d8      	b.n	80115e6 <_dtoa_r+0x2e>
 8011834:	2301      	movs	r3, #1
 8011836:	e7e0      	b.n	80117fa <_dtoa_r+0x242>
 8011838:	2401      	movs	r4, #1
 801183a:	2300      	movs	r3, #0
 801183c:	9309      	str	r3, [sp, #36]	@ 0x24
 801183e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011844:	9300      	str	r3, [sp, #0]
 8011846:	9307      	str	r3, [sp, #28]
 8011848:	2200      	movs	r2, #0
 801184a:	2312      	movs	r3, #18
 801184c:	e7d0      	b.n	80117f0 <_dtoa_r+0x238>
 801184e:	2301      	movs	r3, #1
 8011850:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011852:	e7f5      	b.n	8011840 <_dtoa_r+0x288>
 8011854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011856:	9300      	str	r3, [sp, #0]
 8011858:	9307      	str	r3, [sp, #28]
 801185a:	e7d7      	b.n	801180c <_dtoa_r+0x254>
 801185c:	3101      	adds	r1, #1
 801185e:	0052      	lsls	r2, r2, #1
 8011860:	e7d8      	b.n	8011814 <_dtoa_r+0x25c>
 8011862:	bf00      	nop
 8011864:	f3af 8000 	nop.w
 8011868:	636f4361 	.word	0x636f4361
 801186c:	3fd287a7 	.word	0x3fd287a7
 8011870:	8b60c8b3 	.word	0x8b60c8b3
 8011874:	3fc68a28 	.word	0x3fc68a28
 8011878:	509f79fb 	.word	0x509f79fb
 801187c:	3fd34413 	.word	0x3fd34413
 8011880:	08013e9d 	.word	0x08013e9d
 8011884:	08013eb4 	.word	0x08013eb4
 8011888:	7ff00000 	.word	0x7ff00000
 801188c:	08013e6d 	.word	0x08013e6d
 8011890:	3ff80000 	.word	0x3ff80000
 8011894:	08013fb0 	.word	0x08013fb0
 8011898:	08013f0c 	.word	0x08013f0c
 801189c:	08013e99 	.word	0x08013e99
 80118a0:	08013e6c 	.word	0x08013e6c
 80118a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80118a8:	6018      	str	r0, [r3, #0]
 80118aa:	9b07      	ldr	r3, [sp, #28]
 80118ac:	2b0e      	cmp	r3, #14
 80118ae:	f200 80a4 	bhi.w	80119fa <_dtoa_r+0x442>
 80118b2:	2c00      	cmp	r4, #0
 80118b4:	f000 80a1 	beq.w	80119fa <_dtoa_r+0x442>
 80118b8:	2f00      	cmp	r7, #0
 80118ba:	dd33      	ble.n	8011924 <_dtoa_r+0x36c>
 80118bc:	4bad      	ldr	r3, [pc, #692]	@ (8011b74 <_dtoa_r+0x5bc>)
 80118be:	f007 020f 	and.w	r2, r7, #15
 80118c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118c6:	ed93 7b00 	vldr	d7, [r3]
 80118ca:	05f8      	lsls	r0, r7, #23
 80118cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80118d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80118d4:	d516      	bpl.n	8011904 <_dtoa_r+0x34c>
 80118d6:	4ba8      	ldr	r3, [pc, #672]	@ (8011b78 <_dtoa_r+0x5c0>)
 80118d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80118dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80118e0:	f7ee ffbc 	bl	800085c <__aeabi_ddiv>
 80118e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118e8:	f004 040f 	and.w	r4, r4, #15
 80118ec:	2603      	movs	r6, #3
 80118ee:	4da2      	ldr	r5, [pc, #648]	@ (8011b78 <_dtoa_r+0x5c0>)
 80118f0:	b954      	cbnz	r4, 8011908 <_dtoa_r+0x350>
 80118f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118fa:	f7ee ffaf 	bl	800085c <__aeabi_ddiv>
 80118fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011902:	e028      	b.n	8011956 <_dtoa_r+0x39e>
 8011904:	2602      	movs	r6, #2
 8011906:	e7f2      	b.n	80118ee <_dtoa_r+0x336>
 8011908:	07e1      	lsls	r1, r4, #31
 801190a:	d508      	bpl.n	801191e <_dtoa_r+0x366>
 801190c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011910:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011914:	f7ee fe78 	bl	8000608 <__aeabi_dmul>
 8011918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801191c:	3601      	adds	r6, #1
 801191e:	1064      	asrs	r4, r4, #1
 8011920:	3508      	adds	r5, #8
 8011922:	e7e5      	b.n	80118f0 <_dtoa_r+0x338>
 8011924:	f000 80d2 	beq.w	8011acc <_dtoa_r+0x514>
 8011928:	427c      	negs	r4, r7
 801192a:	4b92      	ldr	r3, [pc, #584]	@ (8011b74 <_dtoa_r+0x5bc>)
 801192c:	4d92      	ldr	r5, [pc, #584]	@ (8011b78 <_dtoa_r+0x5c0>)
 801192e:	f004 020f 	and.w	r2, r4, #15
 8011932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801193e:	f7ee fe63 	bl	8000608 <__aeabi_dmul>
 8011942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011946:	1124      	asrs	r4, r4, #4
 8011948:	2300      	movs	r3, #0
 801194a:	2602      	movs	r6, #2
 801194c:	2c00      	cmp	r4, #0
 801194e:	f040 80b2 	bne.w	8011ab6 <_dtoa_r+0x4fe>
 8011952:	2b00      	cmp	r3, #0
 8011954:	d1d3      	bne.n	80118fe <_dtoa_r+0x346>
 8011956:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011958:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801195c:	2b00      	cmp	r3, #0
 801195e:	f000 80b7 	beq.w	8011ad0 <_dtoa_r+0x518>
 8011962:	4b86      	ldr	r3, [pc, #536]	@ (8011b7c <_dtoa_r+0x5c4>)
 8011964:	2200      	movs	r2, #0
 8011966:	4620      	mov	r0, r4
 8011968:	4629      	mov	r1, r5
 801196a:	f7ef f8bf 	bl	8000aec <__aeabi_dcmplt>
 801196e:	2800      	cmp	r0, #0
 8011970:	f000 80ae 	beq.w	8011ad0 <_dtoa_r+0x518>
 8011974:	9b07      	ldr	r3, [sp, #28]
 8011976:	2b00      	cmp	r3, #0
 8011978:	f000 80aa 	beq.w	8011ad0 <_dtoa_r+0x518>
 801197c:	9b00      	ldr	r3, [sp, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	dd37      	ble.n	80119f2 <_dtoa_r+0x43a>
 8011982:	1e7b      	subs	r3, r7, #1
 8011984:	9304      	str	r3, [sp, #16]
 8011986:	4620      	mov	r0, r4
 8011988:	4b7d      	ldr	r3, [pc, #500]	@ (8011b80 <_dtoa_r+0x5c8>)
 801198a:	2200      	movs	r2, #0
 801198c:	4629      	mov	r1, r5
 801198e:	f7ee fe3b 	bl	8000608 <__aeabi_dmul>
 8011992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011996:	9c00      	ldr	r4, [sp, #0]
 8011998:	3601      	adds	r6, #1
 801199a:	4630      	mov	r0, r6
 801199c:	f7ee fdca 	bl	8000534 <__aeabi_i2d>
 80119a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119a4:	f7ee fe30 	bl	8000608 <__aeabi_dmul>
 80119a8:	4b76      	ldr	r3, [pc, #472]	@ (8011b84 <_dtoa_r+0x5cc>)
 80119aa:	2200      	movs	r2, #0
 80119ac:	f7ee fc76 	bl	800029c <__adddf3>
 80119b0:	4605      	mov	r5, r0
 80119b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80119b6:	2c00      	cmp	r4, #0
 80119b8:	f040 808d 	bne.w	8011ad6 <_dtoa_r+0x51e>
 80119bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119c0:	4b71      	ldr	r3, [pc, #452]	@ (8011b88 <_dtoa_r+0x5d0>)
 80119c2:	2200      	movs	r2, #0
 80119c4:	f7ee fc68 	bl	8000298 <__aeabi_dsub>
 80119c8:	4602      	mov	r2, r0
 80119ca:	460b      	mov	r3, r1
 80119cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80119d0:	462a      	mov	r2, r5
 80119d2:	4633      	mov	r3, r6
 80119d4:	f7ef f8a8 	bl	8000b28 <__aeabi_dcmpgt>
 80119d8:	2800      	cmp	r0, #0
 80119da:	f040 828b 	bne.w	8011ef4 <_dtoa_r+0x93c>
 80119de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119e2:	462a      	mov	r2, r5
 80119e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80119e8:	f7ef f880 	bl	8000aec <__aeabi_dcmplt>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	f040 8128 	bne.w	8011c42 <_dtoa_r+0x68a>
 80119f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80119f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80119fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f2c0 815a 	blt.w	8011cb6 <_dtoa_r+0x6fe>
 8011a02:	2f0e      	cmp	r7, #14
 8011a04:	f300 8157 	bgt.w	8011cb6 <_dtoa_r+0x6fe>
 8011a08:	4b5a      	ldr	r3, [pc, #360]	@ (8011b74 <_dtoa_r+0x5bc>)
 8011a0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011a0e:	ed93 7b00 	vldr	d7, [r3]
 8011a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	ed8d 7b00 	vstr	d7, [sp]
 8011a1a:	da03      	bge.n	8011a24 <_dtoa_r+0x46c>
 8011a1c:	9b07      	ldr	r3, [sp, #28]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f340 8101 	ble.w	8011c26 <_dtoa_r+0x66e>
 8011a24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011a28:	4656      	mov	r6, sl
 8011a2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a2e:	4620      	mov	r0, r4
 8011a30:	4629      	mov	r1, r5
 8011a32:	f7ee ff13 	bl	800085c <__aeabi_ddiv>
 8011a36:	f7ef f897 	bl	8000b68 <__aeabi_d2iz>
 8011a3a:	4680      	mov	r8, r0
 8011a3c:	f7ee fd7a 	bl	8000534 <__aeabi_i2d>
 8011a40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a44:	f7ee fde0 	bl	8000608 <__aeabi_dmul>
 8011a48:	4602      	mov	r2, r0
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	4629      	mov	r1, r5
 8011a50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011a54:	f7ee fc20 	bl	8000298 <__aeabi_dsub>
 8011a58:	f806 4b01 	strb.w	r4, [r6], #1
 8011a5c:	9d07      	ldr	r5, [sp, #28]
 8011a5e:	eba6 040a 	sub.w	r4, r6, sl
 8011a62:	42a5      	cmp	r5, r4
 8011a64:	4602      	mov	r2, r0
 8011a66:	460b      	mov	r3, r1
 8011a68:	f040 8117 	bne.w	8011c9a <_dtoa_r+0x6e2>
 8011a6c:	f7ee fc16 	bl	800029c <__adddf3>
 8011a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a74:	4604      	mov	r4, r0
 8011a76:	460d      	mov	r5, r1
 8011a78:	f7ef f856 	bl	8000b28 <__aeabi_dcmpgt>
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	f040 80f9 	bne.w	8011c74 <_dtoa_r+0x6bc>
 8011a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a86:	4620      	mov	r0, r4
 8011a88:	4629      	mov	r1, r5
 8011a8a:	f7ef f825 	bl	8000ad8 <__aeabi_dcmpeq>
 8011a8e:	b118      	cbz	r0, 8011a98 <_dtoa_r+0x4e0>
 8011a90:	f018 0f01 	tst.w	r8, #1
 8011a94:	f040 80ee 	bne.w	8011c74 <_dtoa_r+0x6bc>
 8011a98:	4649      	mov	r1, r9
 8011a9a:	4658      	mov	r0, fp
 8011a9c:	f000 fbda 	bl	8012254 <_Bfree>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	7033      	strb	r3, [r6, #0]
 8011aa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011aa6:	3701      	adds	r7, #1
 8011aa8:	601f      	str	r7, [r3, #0]
 8011aaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	f000 831d 	beq.w	80120ec <_dtoa_r+0xb34>
 8011ab2:	601e      	str	r6, [r3, #0]
 8011ab4:	e31a      	b.n	80120ec <_dtoa_r+0xb34>
 8011ab6:	07e2      	lsls	r2, r4, #31
 8011ab8:	d505      	bpl.n	8011ac6 <_dtoa_r+0x50e>
 8011aba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011abe:	f7ee fda3 	bl	8000608 <__aeabi_dmul>
 8011ac2:	3601      	adds	r6, #1
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	1064      	asrs	r4, r4, #1
 8011ac8:	3508      	adds	r5, #8
 8011aca:	e73f      	b.n	801194c <_dtoa_r+0x394>
 8011acc:	2602      	movs	r6, #2
 8011ace:	e742      	b.n	8011956 <_dtoa_r+0x39e>
 8011ad0:	9c07      	ldr	r4, [sp, #28]
 8011ad2:	9704      	str	r7, [sp, #16]
 8011ad4:	e761      	b.n	801199a <_dtoa_r+0x3e2>
 8011ad6:	4b27      	ldr	r3, [pc, #156]	@ (8011b74 <_dtoa_r+0x5bc>)
 8011ad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011ada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011ade:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011ae2:	4454      	add	r4, sl
 8011ae4:	2900      	cmp	r1, #0
 8011ae6:	d053      	beq.n	8011b90 <_dtoa_r+0x5d8>
 8011ae8:	4928      	ldr	r1, [pc, #160]	@ (8011b8c <_dtoa_r+0x5d4>)
 8011aea:	2000      	movs	r0, #0
 8011aec:	f7ee feb6 	bl	800085c <__aeabi_ddiv>
 8011af0:	4633      	mov	r3, r6
 8011af2:	462a      	mov	r2, r5
 8011af4:	f7ee fbd0 	bl	8000298 <__aeabi_dsub>
 8011af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011afc:	4656      	mov	r6, sl
 8011afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b02:	f7ef f831 	bl	8000b68 <__aeabi_d2iz>
 8011b06:	4605      	mov	r5, r0
 8011b08:	f7ee fd14 	bl	8000534 <__aeabi_i2d>
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	460b      	mov	r3, r1
 8011b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b14:	f7ee fbc0 	bl	8000298 <__aeabi_dsub>
 8011b18:	3530      	adds	r5, #48	@ 0x30
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	460b      	mov	r3, r1
 8011b1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011b22:	f806 5b01 	strb.w	r5, [r6], #1
 8011b26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011b2a:	f7ee ffdf 	bl	8000aec <__aeabi_dcmplt>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	d171      	bne.n	8011c16 <_dtoa_r+0x65e>
 8011b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011b36:	4911      	ldr	r1, [pc, #68]	@ (8011b7c <_dtoa_r+0x5c4>)
 8011b38:	2000      	movs	r0, #0
 8011b3a:	f7ee fbad 	bl	8000298 <__aeabi_dsub>
 8011b3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011b42:	f7ee ffd3 	bl	8000aec <__aeabi_dcmplt>
 8011b46:	2800      	cmp	r0, #0
 8011b48:	f040 8095 	bne.w	8011c76 <_dtoa_r+0x6be>
 8011b4c:	42a6      	cmp	r6, r4
 8011b4e:	f43f af50 	beq.w	80119f2 <_dtoa_r+0x43a>
 8011b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011b56:	4b0a      	ldr	r3, [pc, #40]	@ (8011b80 <_dtoa_r+0x5c8>)
 8011b58:	2200      	movs	r2, #0
 8011b5a:	f7ee fd55 	bl	8000608 <__aeabi_dmul>
 8011b5e:	4b08      	ldr	r3, [pc, #32]	@ (8011b80 <_dtoa_r+0x5c8>)
 8011b60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011b64:	2200      	movs	r2, #0
 8011b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b6a:	f7ee fd4d 	bl	8000608 <__aeabi_dmul>
 8011b6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b72:	e7c4      	b.n	8011afe <_dtoa_r+0x546>
 8011b74:	08013fb0 	.word	0x08013fb0
 8011b78:	08013f88 	.word	0x08013f88
 8011b7c:	3ff00000 	.word	0x3ff00000
 8011b80:	40240000 	.word	0x40240000
 8011b84:	401c0000 	.word	0x401c0000
 8011b88:	40140000 	.word	0x40140000
 8011b8c:	3fe00000 	.word	0x3fe00000
 8011b90:	4631      	mov	r1, r6
 8011b92:	4628      	mov	r0, r5
 8011b94:	f7ee fd38 	bl	8000608 <__aeabi_dmul>
 8011b98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011b9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8011b9e:	4656      	mov	r6, sl
 8011ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ba4:	f7ee ffe0 	bl	8000b68 <__aeabi_d2iz>
 8011ba8:	4605      	mov	r5, r0
 8011baa:	f7ee fcc3 	bl	8000534 <__aeabi_i2d>
 8011bae:	4602      	mov	r2, r0
 8011bb0:	460b      	mov	r3, r1
 8011bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bb6:	f7ee fb6f 	bl	8000298 <__aeabi_dsub>
 8011bba:	3530      	adds	r5, #48	@ 0x30
 8011bbc:	f806 5b01 	strb.w	r5, [r6], #1
 8011bc0:	4602      	mov	r2, r0
 8011bc2:	460b      	mov	r3, r1
 8011bc4:	42a6      	cmp	r6, r4
 8011bc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011bca:	f04f 0200 	mov.w	r2, #0
 8011bce:	d124      	bne.n	8011c1a <_dtoa_r+0x662>
 8011bd0:	4bac      	ldr	r3, [pc, #688]	@ (8011e84 <_dtoa_r+0x8cc>)
 8011bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011bd6:	f7ee fb61 	bl	800029c <__adddf3>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	460b      	mov	r3, r1
 8011bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011be2:	f7ee ffa1 	bl	8000b28 <__aeabi_dcmpgt>
 8011be6:	2800      	cmp	r0, #0
 8011be8:	d145      	bne.n	8011c76 <_dtoa_r+0x6be>
 8011bea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011bee:	49a5      	ldr	r1, [pc, #660]	@ (8011e84 <_dtoa_r+0x8cc>)
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	f7ee fb51 	bl	8000298 <__aeabi_dsub>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bfe:	f7ee ff75 	bl	8000aec <__aeabi_dcmplt>
 8011c02:	2800      	cmp	r0, #0
 8011c04:	f43f aef5 	beq.w	80119f2 <_dtoa_r+0x43a>
 8011c08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011c0a:	1e73      	subs	r3, r6, #1
 8011c0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8011c0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011c12:	2b30      	cmp	r3, #48	@ 0x30
 8011c14:	d0f8      	beq.n	8011c08 <_dtoa_r+0x650>
 8011c16:	9f04      	ldr	r7, [sp, #16]
 8011c18:	e73e      	b.n	8011a98 <_dtoa_r+0x4e0>
 8011c1a:	4b9b      	ldr	r3, [pc, #620]	@ (8011e88 <_dtoa_r+0x8d0>)
 8011c1c:	f7ee fcf4 	bl	8000608 <__aeabi_dmul>
 8011c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c24:	e7bc      	b.n	8011ba0 <_dtoa_r+0x5e8>
 8011c26:	d10c      	bne.n	8011c42 <_dtoa_r+0x68a>
 8011c28:	4b98      	ldr	r3, [pc, #608]	@ (8011e8c <_dtoa_r+0x8d4>)
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c30:	f7ee fcea 	bl	8000608 <__aeabi_dmul>
 8011c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c38:	f7ee ff6c 	bl	8000b14 <__aeabi_dcmpge>
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	f000 8157 	beq.w	8011ef0 <_dtoa_r+0x938>
 8011c42:	2400      	movs	r4, #0
 8011c44:	4625      	mov	r5, r4
 8011c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c48:	43db      	mvns	r3, r3
 8011c4a:	9304      	str	r3, [sp, #16]
 8011c4c:	4656      	mov	r6, sl
 8011c4e:	2700      	movs	r7, #0
 8011c50:	4621      	mov	r1, r4
 8011c52:	4658      	mov	r0, fp
 8011c54:	f000 fafe 	bl	8012254 <_Bfree>
 8011c58:	2d00      	cmp	r5, #0
 8011c5a:	d0dc      	beq.n	8011c16 <_dtoa_r+0x65e>
 8011c5c:	b12f      	cbz	r7, 8011c6a <_dtoa_r+0x6b2>
 8011c5e:	42af      	cmp	r7, r5
 8011c60:	d003      	beq.n	8011c6a <_dtoa_r+0x6b2>
 8011c62:	4639      	mov	r1, r7
 8011c64:	4658      	mov	r0, fp
 8011c66:	f000 faf5 	bl	8012254 <_Bfree>
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	4658      	mov	r0, fp
 8011c6e:	f000 faf1 	bl	8012254 <_Bfree>
 8011c72:	e7d0      	b.n	8011c16 <_dtoa_r+0x65e>
 8011c74:	9704      	str	r7, [sp, #16]
 8011c76:	4633      	mov	r3, r6
 8011c78:	461e      	mov	r6, r3
 8011c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011c7e:	2a39      	cmp	r2, #57	@ 0x39
 8011c80:	d107      	bne.n	8011c92 <_dtoa_r+0x6da>
 8011c82:	459a      	cmp	sl, r3
 8011c84:	d1f8      	bne.n	8011c78 <_dtoa_r+0x6c0>
 8011c86:	9a04      	ldr	r2, [sp, #16]
 8011c88:	3201      	adds	r2, #1
 8011c8a:	9204      	str	r2, [sp, #16]
 8011c8c:	2230      	movs	r2, #48	@ 0x30
 8011c8e:	f88a 2000 	strb.w	r2, [sl]
 8011c92:	781a      	ldrb	r2, [r3, #0]
 8011c94:	3201      	adds	r2, #1
 8011c96:	701a      	strb	r2, [r3, #0]
 8011c98:	e7bd      	b.n	8011c16 <_dtoa_r+0x65e>
 8011c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8011e88 <_dtoa_r+0x8d0>)
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f7ee fcb3 	bl	8000608 <__aeabi_dmul>
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	460d      	mov	r5, r1
 8011caa:	f7ee ff15 	bl	8000ad8 <__aeabi_dcmpeq>
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	f43f aebb 	beq.w	8011a2a <_dtoa_r+0x472>
 8011cb4:	e6f0      	b.n	8011a98 <_dtoa_r+0x4e0>
 8011cb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011cb8:	2a00      	cmp	r2, #0
 8011cba:	f000 80db 	beq.w	8011e74 <_dtoa_r+0x8bc>
 8011cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cc0:	2a01      	cmp	r2, #1
 8011cc2:	f300 80bf 	bgt.w	8011e44 <_dtoa_r+0x88c>
 8011cc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011cc8:	2a00      	cmp	r2, #0
 8011cca:	f000 80b7 	beq.w	8011e3c <_dtoa_r+0x884>
 8011cce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011cd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011cd4:	4646      	mov	r6, r8
 8011cd6:	9a08      	ldr	r2, [sp, #32]
 8011cd8:	2101      	movs	r1, #1
 8011cda:	441a      	add	r2, r3
 8011cdc:	4658      	mov	r0, fp
 8011cde:	4498      	add	r8, r3
 8011ce0:	9208      	str	r2, [sp, #32]
 8011ce2:	f000 fb6b 	bl	80123bc <__i2b>
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	b15e      	cbz	r6, 8011d02 <_dtoa_r+0x74a>
 8011cea:	9b08      	ldr	r3, [sp, #32]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	dd08      	ble.n	8011d02 <_dtoa_r+0x74a>
 8011cf0:	42b3      	cmp	r3, r6
 8011cf2:	9a08      	ldr	r2, [sp, #32]
 8011cf4:	bfa8      	it	ge
 8011cf6:	4633      	movge	r3, r6
 8011cf8:	eba8 0803 	sub.w	r8, r8, r3
 8011cfc:	1af6      	subs	r6, r6, r3
 8011cfe:	1ad3      	subs	r3, r2, r3
 8011d00:	9308      	str	r3, [sp, #32]
 8011d02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d04:	b1f3      	cbz	r3, 8011d44 <_dtoa_r+0x78c>
 8011d06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	f000 80b7 	beq.w	8011e7c <_dtoa_r+0x8c4>
 8011d0e:	b18c      	cbz	r4, 8011d34 <_dtoa_r+0x77c>
 8011d10:	4629      	mov	r1, r5
 8011d12:	4622      	mov	r2, r4
 8011d14:	4658      	mov	r0, fp
 8011d16:	f000 fc11 	bl	801253c <__pow5mult>
 8011d1a:	464a      	mov	r2, r9
 8011d1c:	4601      	mov	r1, r0
 8011d1e:	4605      	mov	r5, r0
 8011d20:	4658      	mov	r0, fp
 8011d22:	f000 fb61 	bl	80123e8 <__multiply>
 8011d26:	4649      	mov	r1, r9
 8011d28:	9004      	str	r0, [sp, #16]
 8011d2a:	4658      	mov	r0, fp
 8011d2c:	f000 fa92 	bl	8012254 <_Bfree>
 8011d30:	9b04      	ldr	r3, [sp, #16]
 8011d32:	4699      	mov	r9, r3
 8011d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d36:	1b1a      	subs	r2, r3, r4
 8011d38:	d004      	beq.n	8011d44 <_dtoa_r+0x78c>
 8011d3a:	4649      	mov	r1, r9
 8011d3c:	4658      	mov	r0, fp
 8011d3e:	f000 fbfd 	bl	801253c <__pow5mult>
 8011d42:	4681      	mov	r9, r0
 8011d44:	2101      	movs	r1, #1
 8011d46:	4658      	mov	r0, fp
 8011d48:	f000 fb38 	bl	80123bc <__i2b>
 8011d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d4e:	4604      	mov	r4, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	f000 81cf 	beq.w	80120f4 <_dtoa_r+0xb3c>
 8011d56:	461a      	mov	r2, r3
 8011d58:	4601      	mov	r1, r0
 8011d5a:	4658      	mov	r0, fp
 8011d5c:	f000 fbee 	bl	801253c <__pow5mult>
 8011d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	4604      	mov	r4, r0
 8011d66:	f300 8095 	bgt.w	8011e94 <_dtoa_r+0x8dc>
 8011d6a:	9b02      	ldr	r3, [sp, #8]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	f040 8087 	bne.w	8011e80 <_dtoa_r+0x8c8>
 8011d72:	9b03      	ldr	r3, [sp, #12]
 8011d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	f040 8089 	bne.w	8011e90 <_dtoa_r+0x8d8>
 8011d7e:	9b03      	ldr	r3, [sp, #12]
 8011d80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011d84:	0d1b      	lsrs	r3, r3, #20
 8011d86:	051b      	lsls	r3, r3, #20
 8011d88:	b12b      	cbz	r3, 8011d96 <_dtoa_r+0x7de>
 8011d8a:	9b08      	ldr	r3, [sp, #32]
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	9308      	str	r3, [sp, #32]
 8011d90:	f108 0801 	add.w	r8, r8, #1
 8011d94:	2301      	movs	r3, #1
 8011d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	f000 81b0 	beq.w	8012100 <_dtoa_r+0xb48>
 8011da0:	6923      	ldr	r3, [r4, #16]
 8011da2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011da6:	6918      	ldr	r0, [r3, #16]
 8011da8:	f000 fabc 	bl	8012324 <__hi0bits>
 8011dac:	f1c0 0020 	rsb	r0, r0, #32
 8011db0:	9b08      	ldr	r3, [sp, #32]
 8011db2:	4418      	add	r0, r3
 8011db4:	f010 001f 	ands.w	r0, r0, #31
 8011db8:	d077      	beq.n	8011eaa <_dtoa_r+0x8f2>
 8011dba:	f1c0 0320 	rsb	r3, r0, #32
 8011dbe:	2b04      	cmp	r3, #4
 8011dc0:	dd6b      	ble.n	8011e9a <_dtoa_r+0x8e2>
 8011dc2:	9b08      	ldr	r3, [sp, #32]
 8011dc4:	f1c0 001c 	rsb	r0, r0, #28
 8011dc8:	4403      	add	r3, r0
 8011dca:	4480      	add	r8, r0
 8011dcc:	4406      	add	r6, r0
 8011dce:	9308      	str	r3, [sp, #32]
 8011dd0:	f1b8 0f00 	cmp.w	r8, #0
 8011dd4:	dd05      	ble.n	8011de2 <_dtoa_r+0x82a>
 8011dd6:	4649      	mov	r1, r9
 8011dd8:	4642      	mov	r2, r8
 8011dda:	4658      	mov	r0, fp
 8011ddc:	f000 fc08 	bl	80125f0 <__lshift>
 8011de0:	4681      	mov	r9, r0
 8011de2:	9b08      	ldr	r3, [sp, #32]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	dd05      	ble.n	8011df4 <_dtoa_r+0x83c>
 8011de8:	4621      	mov	r1, r4
 8011dea:	461a      	mov	r2, r3
 8011dec:	4658      	mov	r0, fp
 8011dee:	f000 fbff 	bl	80125f0 <__lshift>
 8011df2:	4604      	mov	r4, r0
 8011df4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d059      	beq.n	8011eae <_dtoa_r+0x8f6>
 8011dfa:	4621      	mov	r1, r4
 8011dfc:	4648      	mov	r0, r9
 8011dfe:	f000 fc63 	bl	80126c8 <__mcmp>
 8011e02:	2800      	cmp	r0, #0
 8011e04:	da53      	bge.n	8011eae <_dtoa_r+0x8f6>
 8011e06:	1e7b      	subs	r3, r7, #1
 8011e08:	9304      	str	r3, [sp, #16]
 8011e0a:	4649      	mov	r1, r9
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	220a      	movs	r2, #10
 8011e10:	4658      	mov	r0, fp
 8011e12:	f000 fa41 	bl	8012298 <__multadd>
 8011e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e18:	4681      	mov	r9, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	f000 8172 	beq.w	8012104 <_dtoa_r+0xb4c>
 8011e20:	2300      	movs	r3, #0
 8011e22:	4629      	mov	r1, r5
 8011e24:	220a      	movs	r2, #10
 8011e26:	4658      	mov	r0, fp
 8011e28:	f000 fa36 	bl	8012298 <__multadd>
 8011e2c:	9b00      	ldr	r3, [sp, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	4605      	mov	r5, r0
 8011e32:	dc67      	bgt.n	8011f04 <_dtoa_r+0x94c>
 8011e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e36:	2b02      	cmp	r3, #2
 8011e38:	dc41      	bgt.n	8011ebe <_dtoa_r+0x906>
 8011e3a:	e063      	b.n	8011f04 <_dtoa_r+0x94c>
 8011e3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011e3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011e42:	e746      	b.n	8011cd2 <_dtoa_r+0x71a>
 8011e44:	9b07      	ldr	r3, [sp, #28]
 8011e46:	1e5c      	subs	r4, r3, #1
 8011e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e4a:	42a3      	cmp	r3, r4
 8011e4c:	bfbf      	itttt	lt
 8011e4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011e50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011e52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011e54:	1ae3      	sublt	r3, r4, r3
 8011e56:	bfb4      	ite	lt
 8011e58:	18d2      	addlt	r2, r2, r3
 8011e5a:	1b1c      	subge	r4, r3, r4
 8011e5c:	9b07      	ldr	r3, [sp, #28]
 8011e5e:	bfbc      	itt	lt
 8011e60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011e62:	2400      	movlt	r4, #0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	bfb5      	itete	lt
 8011e68:	eba8 0603 	sublt.w	r6, r8, r3
 8011e6c:	9b07      	ldrge	r3, [sp, #28]
 8011e6e:	2300      	movlt	r3, #0
 8011e70:	4646      	movge	r6, r8
 8011e72:	e730      	b.n	8011cd6 <_dtoa_r+0x71e>
 8011e74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011e76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011e78:	4646      	mov	r6, r8
 8011e7a:	e735      	b.n	8011ce8 <_dtoa_r+0x730>
 8011e7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e7e:	e75c      	b.n	8011d3a <_dtoa_r+0x782>
 8011e80:	2300      	movs	r3, #0
 8011e82:	e788      	b.n	8011d96 <_dtoa_r+0x7de>
 8011e84:	3fe00000 	.word	0x3fe00000
 8011e88:	40240000 	.word	0x40240000
 8011e8c:	40140000 	.word	0x40140000
 8011e90:	9b02      	ldr	r3, [sp, #8]
 8011e92:	e780      	b.n	8011d96 <_dtoa_r+0x7de>
 8011e94:	2300      	movs	r3, #0
 8011e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e98:	e782      	b.n	8011da0 <_dtoa_r+0x7e8>
 8011e9a:	d099      	beq.n	8011dd0 <_dtoa_r+0x818>
 8011e9c:	9a08      	ldr	r2, [sp, #32]
 8011e9e:	331c      	adds	r3, #28
 8011ea0:	441a      	add	r2, r3
 8011ea2:	4498      	add	r8, r3
 8011ea4:	441e      	add	r6, r3
 8011ea6:	9208      	str	r2, [sp, #32]
 8011ea8:	e792      	b.n	8011dd0 <_dtoa_r+0x818>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	e7f6      	b.n	8011e9c <_dtoa_r+0x8e4>
 8011eae:	9b07      	ldr	r3, [sp, #28]
 8011eb0:	9704      	str	r7, [sp, #16]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	dc20      	bgt.n	8011ef8 <_dtoa_r+0x940>
 8011eb6:	9300      	str	r3, [sp, #0]
 8011eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eba:	2b02      	cmp	r3, #2
 8011ebc:	dd1e      	ble.n	8011efc <_dtoa_r+0x944>
 8011ebe:	9b00      	ldr	r3, [sp, #0]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	f47f aec0 	bne.w	8011c46 <_dtoa_r+0x68e>
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	2205      	movs	r2, #5
 8011eca:	4658      	mov	r0, fp
 8011ecc:	f000 f9e4 	bl	8012298 <__multadd>
 8011ed0:	4601      	mov	r1, r0
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	4648      	mov	r0, r9
 8011ed6:	f000 fbf7 	bl	80126c8 <__mcmp>
 8011eda:	2800      	cmp	r0, #0
 8011edc:	f77f aeb3 	ble.w	8011c46 <_dtoa_r+0x68e>
 8011ee0:	4656      	mov	r6, sl
 8011ee2:	2331      	movs	r3, #49	@ 0x31
 8011ee4:	f806 3b01 	strb.w	r3, [r6], #1
 8011ee8:	9b04      	ldr	r3, [sp, #16]
 8011eea:	3301      	adds	r3, #1
 8011eec:	9304      	str	r3, [sp, #16]
 8011eee:	e6ae      	b.n	8011c4e <_dtoa_r+0x696>
 8011ef0:	9c07      	ldr	r4, [sp, #28]
 8011ef2:	9704      	str	r7, [sp, #16]
 8011ef4:	4625      	mov	r5, r4
 8011ef6:	e7f3      	b.n	8011ee0 <_dtoa_r+0x928>
 8011ef8:	9b07      	ldr	r3, [sp, #28]
 8011efa:	9300      	str	r3, [sp, #0]
 8011efc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	f000 8104 	beq.w	801210c <_dtoa_r+0xb54>
 8011f04:	2e00      	cmp	r6, #0
 8011f06:	dd05      	ble.n	8011f14 <_dtoa_r+0x95c>
 8011f08:	4629      	mov	r1, r5
 8011f0a:	4632      	mov	r2, r6
 8011f0c:	4658      	mov	r0, fp
 8011f0e:	f000 fb6f 	bl	80125f0 <__lshift>
 8011f12:	4605      	mov	r5, r0
 8011f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d05a      	beq.n	8011fd0 <_dtoa_r+0xa18>
 8011f1a:	6869      	ldr	r1, [r5, #4]
 8011f1c:	4658      	mov	r0, fp
 8011f1e:	f000 f959 	bl	80121d4 <_Balloc>
 8011f22:	4606      	mov	r6, r0
 8011f24:	b928      	cbnz	r0, 8011f32 <_dtoa_r+0x97a>
 8011f26:	4b84      	ldr	r3, [pc, #528]	@ (8012138 <_dtoa_r+0xb80>)
 8011f28:	4602      	mov	r2, r0
 8011f2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011f2e:	f7ff bb5a 	b.w	80115e6 <_dtoa_r+0x2e>
 8011f32:	692a      	ldr	r2, [r5, #16]
 8011f34:	3202      	adds	r2, #2
 8011f36:	0092      	lsls	r2, r2, #2
 8011f38:	f105 010c 	add.w	r1, r5, #12
 8011f3c:	300c      	adds	r0, #12
 8011f3e:	f7ff faa2 	bl	8011486 <memcpy>
 8011f42:	2201      	movs	r2, #1
 8011f44:	4631      	mov	r1, r6
 8011f46:	4658      	mov	r0, fp
 8011f48:	f000 fb52 	bl	80125f0 <__lshift>
 8011f4c:	f10a 0301 	add.w	r3, sl, #1
 8011f50:	9307      	str	r3, [sp, #28]
 8011f52:	9b00      	ldr	r3, [sp, #0]
 8011f54:	4453      	add	r3, sl
 8011f56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f58:	9b02      	ldr	r3, [sp, #8]
 8011f5a:	f003 0301 	and.w	r3, r3, #1
 8011f5e:	462f      	mov	r7, r5
 8011f60:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f62:	4605      	mov	r5, r0
 8011f64:	9b07      	ldr	r3, [sp, #28]
 8011f66:	4621      	mov	r1, r4
 8011f68:	3b01      	subs	r3, #1
 8011f6a:	4648      	mov	r0, r9
 8011f6c:	9300      	str	r3, [sp, #0]
 8011f6e:	f7ff fa98 	bl	80114a2 <quorem>
 8011f72:	4639      	mov	r1, r7
 8011f74:	9002      	str	r0, [sp, #8]
 8011f76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011f7a:	4648      	mov	r0, r9
 8011f7c:	f000 fba4 	bl	80126c8 <__mcmp>
 8011f80:	462a      	mov	r2, r5
 8011f82:	9008      	str	r0, [sp, #32]
 8011f84:	4621      	mov	r1, r4
 8011f86:	4658      	mov	r0, fp
 8011f88:	f000 fbba 	bl	8012700 <__mdiff>
 8011f8c:	68c2      	ldr	r2, [r0, #12]
 8011f8e:	4606      	mov	r6, r0
 8011f90:	bb02      	cbnz	r2, 8011fd4 <_dtoa_r+0xa1c>
 8011f92:	4601      	mov	r1, r0
 8011f94:	4648      	mov	r0, r9
 8011f96:	f000 fb97 	bl	80126c8 <__mcmp>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	4631      	mov	r1, r6
 8011f9e:	4658      	mov	r0, fp
 8011fa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8011fa2:	f000 f957 	bl	8012254 <_Bfree>
 8011fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011faa:	9e07      	ldr	r6, [sp, #28]
 8011fac:	ea43 0102 	orr.w	r1, r3, r2
 8011fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011fb2:	4319      	orrs	r1, r3
 8011fb4:	d110      	bne.n	8011fd8 <_dtoa_r+0xa20>
 8011fb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011fba:	d029      	beq.n	8012010 <_dtoa_r+0xa58>
 8011fbc:	9b08      	ldr	r3, [sp, #32]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	dd02      	ble.n	8011fc8 <_dtoa_r+0xa10>
 8011fc2:	9b02      	ldr	r3, [sp, #8]
 8011fc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011fc8:	9b00      	ldr	r3, [sp, #0]
 8011fca:	f883 8000 	strb.w	r8, [r3]
 8011fce:	e63f      	b.n	8011c50 <_dtoa_r+0x698>
 8011fd0:	4628      	mov	r0, r5
 8011fd2:	e7bb      	b.n	8011f4c <_dtoa_r+0x994>
 8011fd4:	2201      	movs	r2, #1
 8011fd6:	e7e1      	b.n	8011f9c <_dtoa_r+0x9e4>
 8011fd8:	9b08      	ldr	r3, [sp, #32]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	db04      	blt.n	8011fe8 <_dtoa_r+0xa30>
 8011fde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011fe0:	430b      	orrs	r3, r1
 8011fe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011fe4:	430b      	orrs	r3, r1
 8011fe6:	d120      	bne.n	801202a <_dtoa_r+0xa72>
 8011fe8:	2a00      	cmp	r2, #0
 8011fea:	dded      	ble.n	8011fc8 <_dtoa_r+0xa10>
 8011fec:	4649      	mov	r1, r9
 8011fee:	2201      	movs	r2, #1
 8011ff0:	4658      	mov	r0, fp
 8011ff2:	f000 fafd 	bl	80125f0 <__lshift>
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	4681      	mov	r9, r0
 8011ffa:	f000 fb65 	bl	80126c8 <__mcmp>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	dc03      	bgt.n	801200a <_dtoa_r+0xa52>
 8012002:	d1e1      	bne.n	8011fc8 <_dtoa_r+0xa10>
 8012004:	f018 0f01 	tst.w	r8, #1
 8012008:	d0de      	beq.n	8011fc8 <_dtoa_r+0xa10>
 801200a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801200e:	d1d8      	bne.n	8011fc2 <_dtoa_r+0xa0a>
 8012010:	9a00      	ldr	r2, [sp, #0]
 8012012:	2339      	movs	r3, #57	@ 0x39
 8012014:	7013      	strb	r3, [r2, #0]
 8012016:	4633      	mov	r3, r6
 8012018:	461e      	mov	r6, r3
 801201a:	3b01      	subs	r3, #1
 801201c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012020:	2a39      	cmp	r2, #57	@ 0x39
 8012022:	d052      	beq.n	80120ca <_dtoa_r+0xb12>
 8012024:	3201      	adds	r2, #1
 8012026:	701a      	strb	r2, [r3, #0]
 8012028:	e612      	b.n	8011c50 <_dtoa_r+0x698>
 801202a:	2a00      	cmp	r2, #0
 801202c:	dd07      	ble.n	801203e <_dtoa_r+0xa86>
 801202e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012032:	d0ed      	beq.n	8012010 <_dtoa_r+0xa58>
 8012034:	9a00      	ldr	r2, [sp, #0]
 8012036:	f108 0301 	add.w	r3, r8, #1
 801203a:	7013      	strb	r3, [r2, #0]
 801203c:	e608      	b.n	8011c50 <_dtoa_r+0x698>
 801203e:	9b07      	ldr	r3, [sp, #28]
 8012040:	9a07      	ldr	r2, [sp, #28]
 8012042:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012048:	4293      	cmp	r3, r2
 801204a:	d028      	beq.n	801209e <_dtoa_r+0xae6>
 801204c:	4649      	mov	r1, r9
 801204e:	2300      	movs	r3, #0
 8012050:	220a      	movs	r2, #10
 8012052:	4658      	mov	r0, fp
 8012054:	f000 f920 	bl	8012298 <__multadd>
 8012058:	42af      	cmp	r7, r5
 801205a:	4681      	mov	r9, r0
 801205c:	f04f 0300 	mov.w	r3, #0
 8012060:	f04f 020a 	mov.w	r2, #10
 8012064:	4639      	mov	r1, r7
 8012066:	4658      	mov	r0, fp
 8012068:	d107      	bne.n	801207a <_dtoa_r+0xac2>
 801206a:	f000 f915 	bl	8012298 <__multadd>
 801206e:	4607      	mov	r7, r0
 8012070:	4605      	mov	r5, r0
 8012072:	9b07      	ldr	r3, [sp, #28]
 8012074:	3301      	adds	r3, #1
 8012076:	9307      	str	r3, [sp, #28]
 8012078:	e774      	b.n	8011f64 <_dtoa_r+0x9ac>
 801207a:	f000 f90d 	bl	8012298 <__multadd>
 801207e:	4629      	mov	r1, r5
 8012080:	4607      	mov	r7, r0
 8012082:	2300      	movs	r3, #0
 8012084:	220a      	movs	r2, #10
 8012086:	4658      	mov	r0, fp
 8012088:	f000 f906 	bl	8012298 <__multadd>
 801208c:	4605      	mov	r5, r0
 801208e:	e7f0      	b.n	8012072 <_dtoa_r+0xaba>
 8012090:	9b00      	ldr	r3, [sp, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	bfcc      	ite	gt
 8012096:	461e      	movgt	r6, r3
 8012098:	2601      	movle	r6, #1
 801209a:	4456      	add	r6, sl
 801209c:	2700      	movs	r7, #0
 801209e:	4649      	mov	r1, r9
 80120a0:	2201      	movs	r2, #1
 80120a2:	4658      	mov	r0, fp
 80120a4:	f000 faa4 	bl	80125f0 <__lshift>
 80120a8:	4621      	mov	r1, r4
 80120aa:	4681      	mov	r9, r0
 80120ac:	f000 fb0c 	bl	80126c8 <__mcmp>
 80120b0:	2800      	cmp	r0, #0
 80120b2:	dcb0      	bgt.n	8012016 <_dtoa_r+0xa5e>
 80120b4:	d102      	bne.n	80120bc <_dtoa_r+0xb04>
 80120b6:	f018 0f01 	tst.w	r8, #1
 80120ba:	d1ac      	bne.n	8012016 <_dtoa_r+0xa5e>
 80120bc:	4633      	mov	r3, r6
 80120be:	461e      	mov	r6, r3
 80120c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120c4:	2a30      	cmp	r2, #48	@ 0x30
 80120c6:	d0fa      	beq.n	80120be <_dtoa_r+0xb06>
 80120c8:	e5c2      	b.n	8011c50 <_dtoa_r+0x698>
 80120ca:	459a      	cmp	sl, r3
 80120cc:	d1a4      	bne.n	8012018 <_dtoa_r+0xa60>
 80120ce:	9b04      	ldr	r3, [sp, #16]
 80120d0:	3301      	adds	r3, #1
 80120d2:	9304      	str	r3, [sp, #16]
 80120d4:	2331      	movs	r3, #49	@ 0x31
 80120d6:	f88a 3000 	strb.w	r3, [sl]
 80120da:	e5b9      	b.n	8011c50 <_dtoa_r+0x698>
 80120dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80120de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801213c <_dtoa_r+0xb84>
 80120e2:	b11b      	cbz	r3, 80120ec <_dtoa_r+0xb34>
 80120e4:	f10a 0308 	add.w	r3, sl, #8
 80120e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80120ea:	6013      	str	r3, [r2, #0]
 80120ec:	4650      	mov	r0, sl
 80120ee:	b019      	add	sp, #100	@ 0x64
 80120f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	f77f ae37 	ble.w	8011d6a <_dtoa_r+0x7b2>
 80120fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8012100:	2001      	movs	r0, #1
 8012102:	e655      	b.n	8011db0 <_dtoa_r+0x7f8>
 8012104:	9b00      	ldr	r3, [sp, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	f77f aed6 	ble.w	8011eb8 <_dtoa_r+0x900>
 801210c:	4656      	mov	r6, sl
 801210e:	4621      	mov	r1, r4
 8012110:	4648      	mov	r0, r9
 8012112:	f7ff f9c6 	bl	80114a2 <quorem>
 8012116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801211a:	f806 8b01 	strb.w	r8, [r6], #1
 801211e:	9b00      	ldr	r3, [sp, #0]
 8012120:	eba6 020a 	sub.w	r2, r6, sl
 8012124:	4293      	cmp	r3, r2
 8012126:	ddb3      	ble.n	8012090 <_dtoa_r+0xad8>
 8012128:	4649      	mov	r1, r9
 801212a:	2300      	movs	r3, #0
 801212c:	220a      	movs	r2, #10
 801212e:	4658      	mov	r0, fp
 8012130:	f000 f8b2 	bl	8012298 <__multadd>
 8012134:	4681      	mov	r9, r0
 8012136:	e7ea      	b.n	801210e <_dtoa_r+0xb56>
 8012138:	08013f0c 	.word	0x08013f0c
 801213c:	08013e90 	.word	0x08013e90

08012140 <_free_r>:
 8012140:	b538      	push	{r3, r4, r5, lr}
 8012142:	4605      	mov	r5, r0
 8012144:	2900      	cmp	r1, #0
 8012146:	d041      	beq.n	80121cc <_free_r+0x8c>
 8012148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801214c:	1f0c      	subs	r4, r1, #4
 801214e:	2b00      	cmp	r3, #0
 8012150:	bfb8      	it	lt
 8012152:	18e4      	addlt	r4, r4, r3
 8012154:	f7fe fb70 	bl	8010838 <__malloc_lock>
 8012158:	4a1d      	ldr	r2, [pc, #116]	@ (80121d0 <_free_r+0x90>)
 801215a:	6813      	ldr	r3, [r2, #0]
 801215c:	b933      	cbnz	r3, 801216c <_free_r+0x2c>
 801215e:	6063      	str	r3, [r4, #4]
 8012160:	6014      	str	r4, [r2, #0]
 8012162:	4628      	mov	r0, r5
 8012164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012168:	f7fe bb6c 	b.w	8010844 <__malloc_unlock>
 801216c:	42a3      	cmp	r3, r4
 801216e:	d908      	bls.n	8012182 <_free_r+0x42>
 8012170:	6820      	ldr	r0, [r4, #0]
 8012172:	1821      	adds	r1, r4, r0
 8012174:	428b      	cmp	r3, r1
 8012176:	bf01      	itttt	eq
 8012178:	6819      	ldreq	r1, [r3, #0]
 801217a:	685b      	ldreq	r3, [r3, #4]
 801217c:	1809      	addeq	r1, r1, r0
 801217e:	6021      	streq	r1, [r4, #0]
 8012180:	e7ed      	b.n	801215e <_free_r+0x1e>
 8012182:	461a      	mov	r2, r3
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	b10b      	cbz	r3, 801218c <_free_r+0x4c>
 8012188:	42a3      	cmp	r3, r4
 801218a:	d9fa      	bls.n	8012182 <_free_r+0x42>
 801218c:	6811      	ldr	r1, [r2, #0]
 801218e:	1850      	adds	r0, r2, r1
 8012190:	42a0      	cmp	r0, r4
 8012192:	d10b      	bne.n	80121ac <_free_r+0x6c>
 8012194:	6820      	ldr	r0, [r4, #0]
 8012196:	4401      	add	r1, r0
 8012198:	1850      	adds	r0, r2, r1
 801219a:	4283      	cmp	r3, r0
 801219c:	6011      	str	r1, [r2, #0]
 801219e:	d1e0      	bne.n	8012162 <_free_r+0x22>
 80121a0:	6818      	ldr	r0, [r3, #0]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	6053      	str	r3, [r2, #4]
 80121a6:	4408      	add	r0, r1
 80121a8:	6010      	str	r0, [r2, #0]
 80121aa:	e7da      	b.n	8012162 <_free_r+0x22>
 80121ac:	d902      	bls.n	80121b4 <_free_r+0x74>
 80121ae:	230c      	movs	r3, #12
 80121b0:	602b      	str	r3, [r5, #0]
 80121b2:	e7d6      	b.n	8012162 <_free_r+0x22>
 80121b4:	6820      	ldr	r0, [r4, #0]
 80121b6:	1821      	adds	r1, r4, r0
 80121b8:	428b      	cmp	r3, r1
 80121ba:	bf04      	itt	eq
 80121bc:	6819      	ldreq	r1, [r3, #0]
 80121be:	685b      	ldreq	r3, [r3, #4]
 80121c0:	6063      	str	r3, [r4, #4]
 80121c2:	bf04      	itt	eq
 80121c4:	1809      	addeq	r1, r1, r0
 80121c6:	6021      	streq	r1, [r4, #0]
 80121c8:	6054      	str	r4, [r2, #4]
 80121ca:	e7ca      	b.n	8012162 <_free_r+0x22>
 80121cc:	bd38      	pop	{r3, r4, r5, pc}
 80121ce:	bf00      	nop
 80121d0:	200022b4 	.word	0x200022b4

080121d4 <_Balloc>:
 80121d4:	b570      	push	{r4, r5, r6, lr}
 80121d6:	69c6      	ldr	r6, [r0, #28]
 80121d8:	4604      	mov	r4, r0
 80121da:	460d      	mov	r5, r1
 80121dc:	b976      	cbnz	r6, 80121fc <_Balloc+0x28>
 80121de:	2010      	movs	r0, #16
 80121e0:	f7fe fa78 	bl	80106d4 <malloc>
 80121e4:	4602      	mov	r2, r0
 80121e6:	61e0      	str	r0, [r4, #28]
 80121e8:	b920      	cbnz	r0, 80121f4 <_Balloc+0x20>
 80121ea:	4b18      	ldr	r3, [pc, #96]	@ (801224c <_Balloc+0x78>)
 80121ec:	4818      	ldr	r0, [pc, #96]	@ (8012250 <_Balloc+0x7c>)
 80121ee:	216b      	movs	r1, #107	@ 0x6b
 80121f0:	f000 fd90 	bl	8012d14 <__assert_func>
 80121f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121f8:	6006      	str	r6, [r0, #0]
 80121fa:	60c6      	str	r6, [r0, #12]
 80121fc:	69e6      	ldr	r6, [r4, #28]
 80121fe:	68f3      	ldr	r3, [r6, #12]
 8012200:	b183      	cbz	r3, 8012224 <_Balloc+0x50>
 8012202:	69e3      	ldr	r3, [r4, #28]
 8012204:	68db      	ldr	r3, [r3, #12]
 8012206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801220a:	b9b8      	cbnz	r0, 801223c <_Balloc+0x68>
 801220c:	2101      	movs	r1, #1
 801220e:	fa01 f605 	lsl.w	r6, r1, r5
 8012212:	1d72      	adds	r2, r6, #5
 8012214:	0092      	lsls	r2, r2, #2
 8012216:	4620      	mov	r0, r4
 8012218:	f000 fd9a 	bl	8012d50 <_calloc_r>
 801221c:	b160      	cbz	r0, 8012238 <_Balloc+0x64>
 801221e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012222:	e00e      	b.n	8012242 <_Balloc+0x6e>
 8012224:	2221      	movs	r2, #33	@ 0x21
 8012226:	2104      	movs	r1, #4
 8012228:	4620      	mov	r0, r4
 801222a:	f000 fd91 	bl	8012d50 <_calloc_r>
 801222e:	69e3      	ldr	r3, [r4, #28]
 8012230:	60f0      	str	r0, [r6, #12]
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d1e4      	bne.n	8012202 <_Balloc+0x2e>
 8012238:	2000      	movs	r0, #0
 801223a:	bd70      	pop	{r4, r5, r6, pc}
 801223c:	6802      	ldr	r2, [r0, #0]
 801223e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012242:	2300      	movs	r3, #0
 8012244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012248:	e7f7      	b.n	801223a <_Balloc+0x66>
 801224a:	bf00      	nop
 801224c:	08013e9d 	.word	0x08013e9d
 8012250:	08013f1d 	.word	0x08013f1d

08012254 <_Bfree>:
 8012254:	b570      	push	{r4, r5, r6, lr}
 8012256:	69c6      	ldr	r6, [r0, #28]
 8012258:	4605      	mov	r5, r0
 801225a:	460c      	mov	r4, r1
 801225c:	b976      	cbnz	r6, 801227c <_Bfree+0x28>
 801225e:	2010      	movs	r0, #16
 8012260:	f7fe fa38 	bl	80106d4 <malloc>
 8012264:	4602      	mov	r2, r0
 8012266:	61e8      	str	r0, [r5, #28]
 8012268:	b920      	cbnz	r0, 8012274 <_Bfree+0x20>
 801226a:	4b09      	ldr	r3, [pc, #36]	@ (8012290 <_Bfree+0x3c>)
 801226c:	4809      	ldr	r0, [pc, #36]	@ (8012294 <_Bfree+0x40>)
 801226e:	218f      	movs	r1, #143	@ 0x8f
 8012270:	f000 fd50 	bl	8012d14 <__assert_func>
 8012274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012278:	6006      	str	r6, [r0, #0]
 801227a:	60c6      	str	r6, [r0, #12]
 801227c:	b13c      	cbz	r4, 801228e <_Bfree+0x3a>
 801227e:	69eb      	ldr	r3, [r5, #28]
 8012280:	6862      	ldr	r2, [r4, #4]
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012288:	6021      	str	r1, [r4, #0]
 801228a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801228e:	bd70      	pop	{r4, r5, r6, pc}
 8012290:	08013e9d 	.word	0x08013e9d
 8012294:	08013f1d 	.word	0x08013f1d

08012298 <__multadd>:
 8012298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801229c:	690d      	ldr	r5, [r1, #16]
 801229e:	4607      	mov	r7, r0
 80122a0:	460c      	mov	r4, r1
 80122a2:	461e      	mov	r6, r3
 80122a4:	f101 0c14 	add.w	ip, r1, #20
 80122a8:	2000      	movs	r0, #0
 80122aa:	f8dc 3000 	ldr.w	r3, [ip]
 80122ae:	b299      	uxth	r1, r3
 80122b0:	fb02 6101 	mla	r1, r2, r1, r6
 80122b4:	0c1e      	lsrs	r6, r3, #16
 80122b6:	0c0b      	lsrs	r3, r1, #16
 80122b8:	fb02 3306 	mla	r3, r2, r6, r3
 80122bc:	b289      	uxth	r1, r1
 80122be:	3001      	adds	r0, #1
 80122c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80122c4:	4285      	cmp	r5, r0
 80122c6:	f84c 1b04 	str.w	r1, [ip], #4
 80122ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80122ce:	dcec      	bgt.n	80122aa <__multadd+0x12>
 80122d0:	b30e      	cbz	r6, 8012316 <__multadd+0x7e>
 80122d2:	68a3      	ldr	r3, [r4, #8]
 80122d4:	42ab      	cmp	r3, r5
 80122d6:	dc19      	bgt.n	801230c <__multadd+0x74>
 80122d8:	6861      	ldr	r1, [r4, #4]
 80122da:	4638      	mov	r0, r7
 80122dc:	3101      	adds	r1, #1
 80122de:	f7ff ff79 	bl	80121d4 <_Balloc>
 80122e2:	4680      	mov	r8, r0
 80122e4:	b928      	cbnz	r0, 80122f2 <__multadd+0x5a>
 80122e6:	4602      	mov	r2, r0
 80122e8:	4b0c      	ldr	r3, [pc, #48]	@ (801231c <__multadd+0x84>)
 80122ea:	480d      	ldr	r0, [pc, #52]	@ (8012320 <__multadd+0x88>)
 80122ec:	21ba      	movs	r1, #186	@ 0xba
 80122ee:	f000 fd11 	bl	8012d14 <__assert_func>
 80122f2:	6922      	ldr	r2, [r4, #16]
 80122f4:	3202      	adds	r2, #2
 80122f6:	f104 010c 	add.w	r1, r4, #12
 80122fa:	0092      	lsls	r2, r2, #2
 80122fc:	300c      	adds	r0, #12
 80122fe:	f7ff f8c2 	bl	8011486 <memcpy>
 8012302:	4621      	mov	r1, r4
 8012304:	4638      	mov	r0, r7
 8012306:	f7ff ffa5 	bl	8012254 <_Bfree>
 801230a:	4644      	mov	r4, r8
 801230c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012310:	3501      	adds	r5, #1
 8012312:	615e      	str	r6, [r3, #20]
 8012314:	6125      	str	r5, [r4, #16]
 8012316:	4620      	mov	r0, r4
 8012318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801231c:	08013f0c 	.word	0x08013f0c
 8012320:	08013f1d 	.word	0x08013f1d

08012324 <__hi0bits>:
 8012324:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012328:	4603      	mov	r3, r0
 801232a:	bf36      	itet	cc
 801232c:	0403      	lslcc	r3, r0, #16
 801232e:	2000      	movcs	r0, #0
 8012330:	2010      	movcc	r0, #16
 8012332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012336:	bf3c      	itt	cc
 8012338:	021b      	lslcc	r3, r3, #8
 801233a:	3008      	addcc	r0, #8
 801233c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012340:	bf3c      	itt	cc
 8012342:	011b      	lslcc	r3, r3, #4
 8012344:	3004      	addcc	r0, #4
 8012346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801234a:	bf3c      	itt	cc
 801234c:	009b      	lslcc	r3, r3, #2
 801234e:	3002      	addcc	r0, #2
 8012350:	2b00      	cmp	r3, #0
 8012352:	db05      	blt.n	8012360 <__hi0bits+0x3c>
 8012354:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012358:	f100 0001 	add.w	r0, r0, #1
 801235c:	bf08      	it	eq
 801235e:	2020      	moveq	r0, #32
 8012360:	4770      	bx	lr

08012362 <__lo0bits>:
 8012362:	6803      	ldr	r3, [r0, #0]
 8012364:	4602      	mov	r2, r0
 8012366:	f013 0007 	ands.w	r0, r3, #7
 801236a:	d00b      	beq.n	8012384 <__lo0bits+0x22>
 801236c:	07d9      	lsls	r1, r3, #31
 801236e:	d421      	bmi.n	80123b4 <__lo0bits+0x52>
 8012370:	0798      	lsls	r0, r3, #30
 8012372:	bf49      	itett	mi
 8012374:	085b      	lsrmi	r3, r3, #1
 8012376:	089b      	lsrpl	r3, r3, #2
 8012378:	2001      	movmi	r0, #1
 801237a:	6013      	strmi	r3, [r2, #0]
 801237c:	bf5c      	itt	pl
 801237e:	6013      	strpl	r3, [r2, #0]
 8012380:	2002      	movpl	r0, #2
 8012382:	4770      	bx	lr
 8012384:	b299      	uxth	r1, r3
 8012386:	b909      	cbnz	r1, 801238c <__lo0bits+0x2a>
 8012388:	0c1b      	lsrs	r3, r3, #16
 801238a:	2010      	movs	r0, #16
 801238c:	b2d9      	uxtb	r1, r3
 801238e:	b909      	cbnz	r1, 8012394 <__lo0bits+0x32>
 8012390:	3008      	adds	r0, #8
 8012392:	0a1b      	lsrs	r3, r3, #8
 8012394:	0719      	lsls	r1, r3, #28
 8012396:	bf04      	itt	eq
 8012398:	091b      	lsreq	r3, r3, #4
 801239a:	3004      	addeq	r0, #4
 801239c:	0799      	lsls	r1, r3, #30
 801239e:	bf04      	itt	eq
 80123a0:	089b      	lsreq	r3, r3, #2
 80123a2:	3002      	addeq	r0, #2
 80123a4:	07d9      	lsls	r1, r3, #31
 80123a6:	d403      	bmi.n	80123b0 <__lo0bits+0x4e>
 80123a8:	085b      	lsrs	r3, r3, #1
 80123aa:	f100 0001 	add.w	r0, r0, #1
 80123ae:	d003      	beq.n	80123b8 <__lo0bits+0x56>
 80123b0:	6013      	str	r3, [r2, #0]
 80123b2:	4770      	bx	lr
 80123b4:	2000      	movs	r0, #0
 80123b6:	4770      	bx	lr
 80123b8:	2020      	movs	r0, #32
 80123ba:	4770      	bx	lr

080123bc <__i2b>:
 80123bc:	b510      	push	{r4, lr}
 80123be:	460c      	mov	r4, r1
 80123c0:	2101      	movs	r1, #1
 80123c2:	f7ff ff07 	bl	80121d4 <_Balloc>
 80123c6:	4602      	mov	r2, r0
 80123c8:	b928      	cbnz	r0, 80123d6 <__i2b+0x1a>
 80123ca:	4b05      	ldr	r3, [pc, #20]	@ (80123e0 <__i2b+0x24>)
 80123cc:	4805      	ldr	r0, [pc, #20]	@ (80123e4 <__i2b+0x28>)
 80123ce:	f240 1145 	movw	r1, #325	@ 0x145
 80123d2:	f000 fc9f 	bl	8012d14 <__assert_func>
 80123d6:	2301      	movs	r3, #1
 80123d8:	6144      	str	r4, [r0, #20]
 80123da:	6103      	str	r3, [r0, #16]
 80123dc:	bd10      	pop	{r4, pc}
 80123de:	bf00      	nop
 80123e0:	08013f0c 	.word	0x08013f0c
 80123e4:	08013f1d 	.word	0x08013f1d

080123e8 <__multiply>:
 80123e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ec:	4614      	mov	r4, r2
 80123ee:	690a      	ldr	r2, [r1, #16]
 80123f0:	6923      	ldr	r3, [r4, #16]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	bfa8      	it	ge
 80123f6:	4623      	movge	r3, r4
 80123f8:	460f      	mov	r7, r1
 80123fa:	bfa4      	itt	ge
 80123fc:	460c      	movge	r4, r1
 80123fe:	461f      	movge	r7, r3
 8012400:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012404:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012408:	68a3      	ldr	r3, [r4, #8]
 801240a:	6861      	ldr	r1, [r4, #4]
 801240c:	eb0a 0609 	add.w	r6, sl, r9
 8012410:	42b3      	cmp	r3, r6
 8012412:	b085      	sub	sp, #20
 8012414:	bfb8      	it	lt
 8012416:	3101      	addlt	r1, #1
 8012418:	f7ff fedc 	bl	80121d4 <_Balloc>
 801241c:	b930      	cbnz	r0, 801242c <__multiply+0x44>
 801241e:	4602      	mov	r2, r0
 8012420:	4b44      	ldr	r3, [pc, #272]	@ (8012534 <__multiply+0x14c>)
 8012422:	4845      	ldr	r0, [pc, #276]	@ (8012538 <__multiply+0x150>)
 8012424:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012428:	f000 fc74 	bl	8012d14 <__assert_func>
 801242c:	f100 0514 	add.w	r5, r0, #20
 8012430:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012434:	462b      	mov	r3, r5
 8012436:	2200      	movs	r2, #0
 8012438:	4543      	cmp	r3, r8
 801243a:	d321      	bcc.n	8012480 <__multiply+0x98>
 801243c:	f107 0114 	add.w	r1, r7, #20
 8012440:	f104 0214 	add.w	r2, r4, #20
 8012444:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012448:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801244c:	9302      	str	r3, [sp, #8]
 801244e:	1b13      	subs	r3, r2, r4
 8012450:	3b15      	subs	r3, #21
 8012452:	f023 0303 	bic.w	r3, r3, #3
 8012456:	3304      	adds	r3, #4
 8012458:	f104 0715 	add.w	r7, r4, #21
 801245c:	42ba      	cmp	r2, r7
 801245e:	bf38      	it	cc
 8012460:	2304      	movcc	r3, #4
 8012462:	9301      	str	r3, [sp, #4]
 8012464:	9b02      	ldr	r3, [sp, #8]
 8012466:	9103      	str	r1, [sp, #12]
 8012468:	428b      	cmp	r3, r1
 801246a:	d80c      	bhi.n	8012486 <__multiply+0x9e>
 801246c:	2e00      	cmp	r6, #0
 801246e:	dd03      	ble.n	8012478 <__multiply+0x90>
 8012470:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012474:	2b00      	cmp	r3, #0
 8012476:	d05b      	beq.n	8012530 <__multiply+0x148>
 8012478:	6106      	str	r6, [r0, #16]
 801247a:	b005      	add	sp, #20
 801247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012480:	f843 2b04 	str.w	r2, [r3], #4
 8012484:	e7d8      	b.n	8012438 <__multiply+0x50>
 8012486:	f8b1 a000 	ldrh.w	sl, [r1]
 801248a:	f1ba 0f00 	cmp.w	sl, #0
 801248e:	d024      	beq.n	80124da <__multiply+0xf2>
 8012490:	f104 0e14 	add.w	lr, r4, #20
 8012494:	46a9      	mov	r9, r5
 8012496:	f04f 0c00 	mov.w	ip, #0
 801249a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801249e:	f8d9 3000 	ldr.w	r3, [r9]
 80124a2:	fa1f fb87 	uxth.w	fp, r7
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80124ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80124b0:	f8d9 7000 	ldr.w	r7, [r9]
 80124b4:	4463      	add	r3, ip
 80124b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80124ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80124be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80124c8:	4572      	cmp	r2, lr
 80124ca:	f849 3b04 	str.w	r3, [r9], #4
 80124ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80124d2:	d8e2      	bhi.n	801249a <__multiply+0xb2>
 80124d4:	9b01      	ldr	r3, [sp, #4]
 80124d6:	f845 c003 	str.w	ip, [r5, r3]
 80124da:	9b03      	ldr	r3, [sp, #12]
 80124dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80124e0:	3104      	adds	r1, #4
 80124e2:	f1b9 0f00 	cmp.w	r9, #0
 80124e6:	d021      	beq.n	801252c <__multiply+0x144>
 80124e8:	682b      	ldr	r3, [r5, #0]
 80124ea:	f104 0c14 	add.w	ip, r4, #20
 80124ee:	46ae      	mov	lr, r5
 80124f0:	f04f 0a00 	mov.w	sl, #0
 80124f4:	f8bc b000 	ldrh.w	fp, [ip]
 80124f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80124fc:	fb09 770b 	mla	r7, r9, fp, r7
 8012500:	4457      	add	r7, sl
 8012502:	b29b      	uxth	r3, r3
 8012504:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012508:	f84e 3b04 	str.w	r3, [lr], #4
 801250c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012510:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012514:	f8be 3000 	ldrh.w	r3, [lr]
 8012518:	fb09 330a 	mla	r3, r9, sl, r3
 801251c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012520:	4562      	cmp	r2, ip
 8012522:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012526:	d8e5      	bhi.n	80124f4 <__multiply+0x10c>
 8012528:	9f01      	ldr	r7, [sp, #4]
 801252a:	51eb      	str	r3, [r5, r7]
 801252c:	3504      	adds	r5, #4
 801252e:	e799      	b.n	8012464 <__multiply+0x7c>
 8012530:	3e01      	subs	r6, #1
 8012532:	e79b      	b.n	801246c <__multiply+0x84>
 8012534:	08013f0c 	.word	0x08013f0c
 8012538:	08013f1d 	.word	0x08013f1d

0801253c <__pow5mult>:
 801253c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012540:	4615      	mov	r5, r2
 8012542:	f012 0203 	ands.w	r2, r2, #3
 8012546:	4607      	mov	r7, r0
 8012548:	460e      	mov	r6, r1
 801254a:	d007      	beq.n	801255c <__pow5mult+0x20>
 801254c:	4c25      	ldr	r4, [pc, #148]	@ (80125e4 <__pow5mult+0xa8>)
 801254e:	3a01      	subs	r2, #1
 8012550:	2300      	movs	r3, #0
 8012552:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012556:	f7ff fe9f 	bl	8012298 <__multadd>
 801255a:	4606      	mov	r6, r0
 801255c:	10ad      	asrs	r5, r5, #2
 801255e:	d03d      	beq.n	80125dc <__pow5mult+0xa0>
 8012560:	69fc      	ldr	r4, [r7, #28]
 8012562:	b97c      	cbnz	r4, 8012584 <__pow5mult+0x48>
 8012564:	2010      	movs	r0, #16
 8012566:	f7fe f8b5 	bl	80106d4 <malloc>
 801256a:	4602      	mov	r2, r0
 801256c:	61f8      	str	r0, [r7, #28]
 801256e:	b928      	cbnz	r0, 801257c <__pow5mult+0x40>
 8012570:	4b1d      	ldr	r3, [pc, #116]	@ (80125e8 <__pow5mult+0xac>)
 8012572:	481e      	ldr	r0, [pc, #120]	@ (80125ec <__pow5mult+0xb0>)
 8012574:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012578:	f000 fbcc 	bl	8012d14 <__assert_func>
 801257c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012580:	6004      	str	r4, [r0, #0]
 8012582:	60c4      	str	r4, [r0, #12]
 8012584:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012588:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801258c:	b94c      	cbnz	r4, 80125a2 <__pow5mult+0x66>
 801258e:	f240 2171 	movw	r1, #625	@ 0x271
 8012592:	4638      	mov	r0, r7
 8012594:	f7ff ff12 	bl	80123bc <__i2b>
 8012598:	2300      	movs	r3, #0
 801259a:	f8c8 0008 	str.w	r0, [r8, #8]
 801259e:	4604      	mov	r4, r0
 80125a0:	6003      	str	r3, [r0, #0]
 80125a2:	f04f 0900 	mov.w	r9, #0
 80125a6:	07eb      	lsls	r3, r5, #31
 80125a8:	d50a      	bpl.n	80125c0 <__pow5mult+0x84>
 80125aa:	4631      	mov	r1, r6
 80125ac:	4622      	mov	r2, r4
 80125ae:	4638      	mov	r0, r7
 80125b0:	f7ff ff1a 	bl	80123e8 <__multiply>
 80125b4:	4631      	mov	r1, r6
 80125b6:	4680      	mov	r8, r0
 80125b8:	4638      	mov	r0, r7
 80125ba:	f7ff fe4b 	bl	8012254 <_Bfree>
 80125be:	4646      	mov	r6, r8
 80125c0:	106d      	asrs	r5, r5, #1
 80125c2:	d00b      	beq.n	80125dc <__pow5mult+0xa0>
 80125c4:	6820      	ldr	r0, [r4, #0]
 80125c6:	b938      	cbnz	r0, 80125d8 <__pow5mult+0x9c>
 80125c8:	4622      	mov	r2, r4
 80125ca:	4621      	mov	r1, r4
 80125cc:	4638      	mov	r0, r7
 80125ce:	f7ff ff0b 	bl	80123e8 <__multiply>
 80125d2:	6020      	str	r0, [r4, #0]
 80125d4:	f8c0 9000 	str.w	r9, [r0]
 80125d8:	4604      	mov	r4, r0
 80125da:	e7e4      	b.n	80125a6 <__pow5mult+0x6a>
 80125dc:	4630      	mov	r0, r6
 80125de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125e2:	bf00      	nop
 80125e4:	08013f78 	.word	0x08013f78
 80125e8:	08013e9d 	.word	0x08013e9d
 80125ec:	08013f1d 	.word	0x08013f1d

080125f0 <__lshift>:
 80125f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125f4:	460c      	mov	r4, r1
 80125f6:	6849      	ldr	r1, [r1, #4]
 80125f8:	6923      	ldr	r3, [r4, #16]
 80125fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80125fe:	68a3      	ldr	r3, [r4, #8]
 8012600:	4607      	mov	r7, r0
 8012602:	4691      	mov	r9, r2
 8012604:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012608:	f108 0601 	add.w	r6, r8, #1
 801260c:	42b3      	cmp	r3, r6
 801260e:	db0b      	blt.n	8012628 <__lshift+0x38>
 8012610:	4638      	mov	r0, r7
 8012612:	f7ff fddf 	bl	80121d4 <_Balloc>
 8012616:	4605      	mov	r5, r0
 8012618:	b948      	cbnz	r0, 801262e <__lshift+0x3e>
 801261a:	4602      	mov	r2, r0
 801261c:	4b28      	ldr	r3, [pc, #160]	@ (80126c0 <__lshift+0xd0>)
 801261e:	4829      	ldr	r0, [pc, #164]	@ (80126c4 <__lshift+0xd4>)
 8012620:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012624:	f000 fb76 	bl	8012d14 <__assert_func>
 8012628:	3101      	adds	r1, #1
 801262a:	005b      	lsls	r3, r3, #1
 801262c:	e7ee      	b.n	801260c <__lshift+0x1c>
 801262e:	2300      	movs	r3, #0
 8012630:	f100 0114 	add.w	r1, r0, #20
 8012634:	f100 0210 	add.w	r2, r0, #16
 8012638:	4618      	mov	r0, r3
 801263a:	4553      	cmp	r3, sl
 801263c:	db33      	blt.n	80126a6 <__lshift+0xb6>
 801263e:	6920      	ldr	r0, [r4, #16]
 8012640:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012644:	f104 0314 	add.w	r3, r4, #20
 8012648:	f019 091f 	ands.w	r9, r9, #31
 801264c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012650:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012654:	d02b      	beq.n	80126ae <__lshift+0xbe>
 8012656:	f1c9 0e20 	rsb	lr, r9, #32
 801265a:	468a      	mov	sl, r1
 801265c:	2200      	movs	r2, #0
 801265e:	6818      	ldr	r0, [r3, #0]
 8012660:	fa00 f009 	lsl.w	r0, r0, r9
 8012664:	4310      	orrs	r0, r2
 8012666:	f84a 0b04 	str.w	r0, [sl], #4
 801266a:	f853 2b04 	ldr.w	r2, [r3], #4
 801266e:	459c      	cmp	ip, r3
 8012670:	fa22 f20e 	lsr.w	r2, r2, lr
 8012674:	d8f3      	bhi.n	801265e <__lshift+0x6e>
 8012676:	ebac 0304 	sub.w	r3, ip, r4
 801267a:	3b15      	subs	r3, #21
 801267c:	f023 0303 	bic.w	r3, r3, #3
 8012680:	3304      	adds	r3, #4
 8012682:	f104 0015 	add.w	r0, r4, #21
 8012686:	4584      	cmp	ip, r0
 8012688:	bf38      	it	cc
 801268a:	2304      	movcc	r3, #4
 801268c:	50ca      	str	r2, [r1, r3]
 801268e:	b10a      	cbz	r2, 8012694 <__lshift+0xa4>
 8012690:	f108 0602 	add.w	r6, r8, #2
 8012694:	3e01      	subs	r6, #1
 8012696:	4638      	mov	r0, r7
 8012698:	612e      	str	r6, [r5, #16]
 801269a:	4621      	mov	r1, r4
 801269c:	f7ff fdda 	bl	8012254 <_Bfree>
 80126a0:	4628      	mov	r0, r5
 80126a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80126aa:	3301      	adds	r3, #1
 80126ac:	e7c5      	b.n	801263a <__lshift+0x4a>
 80126ae:	3904      	subs	r1, #4
 80126b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80126b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80126b8:	459c      	cmp	ip, r3
 80126ba:	d8f9      	bhi.n	80126b0 <__lshift+0xc0>
 80126bc:	e7ea      	b.n	8012694 <__lshift+0xa4>
 80126be:	bf00      	nop
 80126c0:	08013f0c 	.word	0x08013f0c
 80126c4:	08013f1d 	.word	0x08013f1d

080126c8 <__mcmp>:
 80126c8:	690a      	ldr	r2, [r1, #16]
 80126ca:	4603      	mov	r3, r0
 80126cc:	6900      	ldr	r0, [r0, #16]
 80126ce:	1a80      	subs	r0, r0, r2
 80126d0:	b530      	push	{r4, r5, lr}
 80126d2:	d10e      	bne.n	80126f2 <__mcmp+0x2a>
 80126d4:	3314      	adds	r3, #20
 80126d6:	3114      	adds	r1, #20
 80126d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80126dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80126e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80126e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80126e8:	4295      	cmp	r5, r2
 80126ea:	d003      	beq.n	80126f4 <__mcmp+0x2c>
 80126ec:	d205      	bcs.n	80126fa <__mcmp+0x32>
 80126ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80126f2:	bd30      	pop	{r4, r5, pc}
 80126f4:	42a3      	cmp	r3, r4
 80126f6:	d3f3      	bcc.n	80126e0 <__mcmp+0x18>
 80126f8:	e7fb      	b.n	80126f2 <__mcmp+0x2a>
 80126fa:	2001      	movs	r0, #1
 80126fc:	e7f9      	b.n	80126f2 <__mcmp+0x2a>
	...

08012700 <__mdiff>:
 8012700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012704:	4689      	mov	r9, r1
 8012706:	4606      	mov	r6, r0
 8012708:	4611      	mov	r1, r2
 801270a:	4648      	mov	r0, r9
 801270c:	4614      	mov	r4, r2
 801270e:	f7ff ffdb 	bl	80126c8 <__mcmp>
 8012712:	1e05      	subs	r5, r0, #0
 8012714:	d112      	bne.n	801273c <__mdiff+0x3c>
 8012716:	4629      	mov	r1, r5
 8012718:	4630      	mov	r0, r6
 801271a:	f7ff fd5b 	bl	80121d4 <_Balloc>
 801271e:	4602      	mov	r2, r0
 8012720:	b928      	cbnz	r0, 801272e <__mdiff+0x2e>
 8012722:	4b3f      	ldr	r3, [pc, #252]	@ (8012820 <__mdiff+0x120>)
 8012724:	f240 2137 	movw	r1, #567	@ 0x237
 8012728:	483e      	ldr	r0, [pc, #248]	@ (8012824 <__mdiff+0x124>)
 801272a:	f000 faf3 	bl	8012d14 <__assert_func>
 801272e:	2301      	movs	r3, #1
 8012730:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012734:	4610      	mov	r0, r2
 8012736:	b003      	add	sp, #12
 8012738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801273c:	bfbc      	itt	lt
 801273e:	464b      	movlt	r3, r9
 8012740:	46a1      	movlt	r9, r4
 8012742:	4630      	mov	r0, r6
 8012744:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012748:	bfba      	itte	lt
 801274a:	461c      	movlt	r4, r3
 801274c:	2501      	movlt	r5, #1
 801274e:	2500      	movge	r5, #0
 8012750:	f7ff fd40 	bl	80121d4 <_Balloc>
 8012754:	4602      	mov	r2, r0
 8012756:	b918      	cbnz	r0, 8012760 <__mdiff+0x60>
 8012758:	4b31      	ldr	r3, [pc, #196]	@ (8012820 <__mdiff+0x120>)
 801275a:	f240 2145 	movw	r1, #581	@ 0x245
 801275e:	e7e3      	b.n	8012728 <__mdiff+0x28>
 8012760:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012764:	6926      	ldr	r6, [r4, #16]
 8012766:	60c5      	str	r5, [r0, #12]
 8012768:	f109 0310 	add.w	r3, r9, #16
 801276c:	f109 0514 	add.w	r5, r9, #20
 8012770:	f104 0e14 	add.w	lr, r4, #20
 8012774:	f100 0b14 	add.w	fp, r0, #20
 8012778:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801277c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012780:	9301      	str	r3, [sp, #4]
 8012782:	46d9      	mov	r9, fp
 8012784:	f04f 0c00 	mov.w	ip, #0
 8012788:	9b01      	ldr	r3, [sp, #4]
 801278a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801278e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012792:	9301      	str	r3, [sp, #4]
 8012794:	fa1f f38a 	uxth.w	r3, sl
 8012798:	4619      	mov	r1, r3
 801279a:	b283      	uxth	r3, r0
 801279c:	1acb      	subs	r3, r1, r3
 801279e:	0c00      	lsrs	r0, r0, #16
 80127a0:	4463      	add	r3, ip
 80127a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80127a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80127b0:	4576      	cmp	r6, lr
 80127b2:	f849 3b04 	str.w	r3, [r9], #4
 80127b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80127ba:	d8e5      	bhi.n	8012788 <__mdiff+0x88>
 80127bc:	1b33      	subs	r3, r6, r4
 80127be:	3b15      	subs	r3, #21
 80127c0:	f023 0303 	bic.w	r3, r3, #3
 80127c4:	3415      	adds	r4, #21
 80127c6:	3304      	adds	r3, #4
 80127c8:	42a6      	cmp	r6, r4
 80127ca:	bf38      	it	cc
 80127cc:	2304      	movcc	r3, #4
 80127ce:	441d      	add	r5, r3
 80127d0:	445b      	add	r3, fp
 80127d2:	461e      	mov	r6, r3
 80127d4:	462c      	mov	r4, r5
 80127d6:	4544      	cmp	r4, r8
 80127d8:	d30e      	bcc.n	80127f8 <__mdiff+0xf8>
 80127da:	f108 0103 	add.w	r1, r8, #3
 80127de:	1b49      	subs	r1, r1, r5
 80127e0:	f021 0103 	bic.w	r1, r1, #3
 80127e4:	3d03      	subs	r5, #3
 80127e6:	45a8      	cmp	r8, r5
 80127e8:	bf38      	it	cc
 80127ea:	2100      	movcc	r1, #0
 80127ec:	440b      	add	r3, r1
 80127ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80127f2:	b191      	cbz	r1, 801281a <__mdiff+0x11a>
 80127f4:	6117      	str	r7, [r2, #16]
 80127f6:	e79d      	b.n	8012734 <__mdiff+0x34>
 80127f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80127fc:	46e6      	mov	lr, ip
 80127fe:	0c08      	lsrs	r0, r1, #16
 8012800:	fa1c fc81 	uxtah	ip, ip, r1
 8012804:	4471      	add	r1, lr
 8012806:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801280a:	b289      	uxth	r1, r1
 801280c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012810:	f846 1b04 	str.w	r1, [r6], #4
 8012814:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012818:	e7dd      	b.n	80127d6 <__mdiff+0xd6>
 801281a:	3f01      	subs	r7, #1
 801281c:	e7e7      	b.n	80127ee <__mdiff+0xee>
 801281e:	bf00      	nop
 8012820:	08013f0c 	.word	0x08013f0c
 8012824:	08013f1d 	.word	0x08013f1d

08012828 <__d2b>:
 8012828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801282c:	460f      	mov	r7, r1
 801282e:	2101      	movs	r1, #1
 8012830:	ec59 8b10 	vmov	r8, r9, d0
 8012834:	4616      	mov	r6, r2
 8012836:	f7ff fccd 	bl	80121d4 <_Balloc>
 801283a:	4604      	mov	r4, r0
 801283c:	b930      	cbnz	r0, 801284c <__d2b+0x24>
 801283e:	4602      	mov	r2, r0
 8012840:	4b23      	ldr	r3, [pc, #140]	@ (80128d0 <__d2b+0xa8>)
 8012842:	4824      	ldr	r0, [pc, #144]	@ (80128d4 <__d2b+0xac>)
 8012844:	f240 310f 	movw	r1, #783	@ 0x30f
 8012848:	f000 fa64 	bl	8012d14 <__assert_func>
 801284c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012854:	b10d      	cbz	r5, 801285a <__d2b+0x32>
 8012856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801285a:	9301      	str	r3, [sp, #4]
 801285c:	f1b8 0300 	subs.w	r3, r8, #0
 8012860:	d023      	beq.n	80128aa <__d2b+0x82>
 8012862:	4668      	mov	r0, sp
 8012864:	9300      	str	r3, [sp, #0]
 8012866:	f7ff fd7c 	bl	8012362 <__lo0bits>
 801286a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801286e:	b1d0      	cbz	r0, 80128a6 <__d2b+0x7e>
 8012870:	f1c0 0320 	rsb	r3, r0, #32
 8012874:	fa02 f303 	lsl.w	r3, r2, r3
 8012878:	430b      	orrs	r3, r1
 801287a:	40c2      	lsrs	r2, r0
 801287c:	6163      	str	r3, [r4, #20]
 801287e:	9201      	str	r2, [sp, #4]
 8012880:	9b01      	ldr	r3, [sp, #4]
 8012882:	61a3      	str	r3, [r4, #24]
 8012884:	2b00      	cmp	r3, #0
 8012886:	bf0c      	ite	eq
 8012888:	2201      	moveq	r2, #1
 801288a:	2202      	movne	r2, #2
 801288c:	6122      	str	r2, [r4, #16]
 801288e:	b1a5      	cbz	r5, 80128ba <__d2b+0x92>
 8012890:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012894:	4405      	add	r5, r0
 8012896:	603d      	str	r5, [r7, #0]
 8012898:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801289c:	6030      	str	r0, [r6, #0]
 801289e:	4620      	mov	r0, r4
 80128a0:	b003      	add	sp, #12
 80128a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128a6:	6161      	str	r1, [r4, #20]
 80128a8:	e7ea      	b.n	8012880 <__d2b+0x58>
 80128aa:	a801      	add	r0, sp, #4
 80128ac:	f7ff fd59 	bl	8012362 <__lo0bits>
 80128b0:	9b01      	ldr	r3, [sp, #4]
 80128b2:	6163      	str	r3, [r4, #20]
 80128b4:	3020      	adds	r0, #32
 80128b6:	2201      	movs	r2, #1
 80128b8:	e7e8      	b.n	801288c <__d2b+0x64>
 80128ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80128c2:	6038      	str	r0, [r7, #0]
 80128c4:	6918      	ldr	r0, [r3, #16]
 80128c6:	f7ff fd2d 	bl	8012324 <__hi0bits>
 80128ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128ce:	e7e5      	b.n	801289c <__d2b+0x74>
 80128d0:	08013f0c 	.word	0x08013f0c
 80128d4:	08013f1d 	.word	0x08013f1d

080128d8 <__ssputs_r>:
 80128d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128dc:	688e      	ldr	r6, [r1, #8]
 80128de:	461f      	mov	r7, r3
 80128e0:	42be      	cmp	r6, r7
 80128e2:	680b      	ldr	r3, [r1, #0]
 80128e4:	4682      	mov	sl, r0
 80128e6:	460c      	mov	r4, r1
 80128e8:	4690      	mov	r8, r2
 80128ea:	d82d      	bhi.n	8012948 <__ssputs_r+0x70>
 80128ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80128f4:	d026      	beq.n	8012944 <__ssputs_r+0x6c>
 80128f6:	6965      	ldr	r5, [r4, #20]
 80128f8:	6909      	ldr	r1, [r1, #16]
 80128fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128fe:	eba3 0901 	sub.w	r9, r3, r1
 8012902:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012906:	1c7b      	adds	r3, r7, #1
 8012908:	444b      	add	r3, r9
 801290a:	106d      	asrs	r5, r5, #1
 801290c:	429d      	cmp	r5, r3
 801290e:	bf38      	it	cc
 8012910:	461d      	movcc	r5, r3
 8012912:	0553      	lsls	r3, r2, #21
 8012914:	d527      	bpl.n	8012966 <__ssputs_r+0x8e>
 8012916:	4629      	mov	r1, r5
 8012918:	f7fd ff0e 	bl	8010738 <_malloc_r>
 801291c:	4606      	mov	r6, r0
 801291e:	b360      	cbz	r0, 801297a <__ssputs_r+0xa2>
 8012920:	6921      	ldr	r1, [r4, #16]
 8012922:	464a      	mov	r2, r9
 8012924:	f7fe fdaf 	bl	8011486 <memcpy>
 8012928:	89a3      	ldrh	r3, [r4, #12]
 801292a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801292e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012932:	81a3      	strh	r3, [r4, #12]
 8012934:	6126      	str	r6, [r4, #16]
 8012936:	6165      	str	r5, [r4, #20]
 8012938:	444e      	add	r6, r9
 801293a:	eba5 0509 	sub.w	r5, r5, r9
 801293e:	6026      	str	r6, [r4, #0]
 8012940:	60a5      	str	r5, [r4, #8]
 8012942:	463e      	mov	r6, r7
 8012944:	42be      	cmp	r6, r7
 8012946:	d900      	bls.n	801294a <__ssputs_r+0x72>
 8012948:	463e      	mov	r6, r7
 801294a:	6820      	ldr	r0, [r4, #0]
 801294c:	4632      	mov	r2, r6
 801294e:	4641      	mov	r1, r8
 8012950:	f000 f9c6 	bl	8012ce0 <memmove>
 8012954:	68a3      	ldr	r3, [r4, #8]
 8012956:	1b9b      	subs	r3, r3, r6
 8012958:	60a3      	str	r3, [r4, #8]
 801295a:	6823      	ldr	r3, [r4, #0]
 801295c:	4433      	add	r3, r6
 801295e:	6023      	str	r3, [r4, #0]
 8012960:	2000      	movs	r0, #0
 8012962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012966:	462a      	mov	r2, r5
 8012968:	f000 fa18 	bl	8012d9c <_realloc_r>
 801296c:	4606      	mov	r6, r0
 801296e:	2800      	cmp	r0, #0
 8012970:	d1e0      	bne.n	8012934 <__ssputs_r+0x5c>
 8012972:	6921      	ldr	r1, [r4, #16]
 8012974:	4650      	mov	r0, sl
 8012976:	f7ff fbe3 	bl	8012140 <_free_r>
 801297a:	230c      	movs	r3, #12
 801297c:	f8ca 3000 	str.w	r3, [sl]
 8012980:	89a3      	ldrh	r3, [r4, #12]
 8012982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012986:	81a3      	strh	r3, [r4, #12]
 8012988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801298c:	e7e9      	b.n	8012962 <__ssputs_r+0x8a>
	...

08012990 <_svfiprintf_r>:
 8012990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012994:	4698      	mov	r8, r3
 8012996:	898b      	ldrh	r3, [r1, #12]
 8012998:	061b      	lsls	r3, r3, #24
 801299a:	b09d      	sub	sp, #116	@ 0x74
 801299c:	4607      	mov	r7, r0
 801299e:	460d      	mov	r5, r1
 80129a0:	4614      	mov	r4, r2
 80129a2:	d510      	bpl.n	80129c6 <_svfiprintf_r+0x36>
 80129a4:	690b      	ldr	r3, [r1, #16]
 80129a6:	b973      	cbnz	r3, 80129c6 <_svfiprintf_r+0x36>
 80129a8:	2140      	movs	r1, #64	@ 0x40
 80129aa:	f7fd fec5 	bl	8010738 <_malloc_r>
 80129ae:	6028      	str	r0, [r5, #0]
 80129b0:	6128      	str	r0, [r5, #16]
 80129b2:	b930      	cbnz	r0, 80129c2 <_svfiprintf_r+0x32>
 80129b4:	230c      	movs	r3, #12
 80129b6:	603b      	str	r3, [r7, #0]
 80129b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129bc:	b01d      	add	sp, #116	@ 0x74
 80129be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129c2:	2340      	movs	r3, #64	@ 0x40
 80129c4:	616b      	str	r3, [r5, #20]
 80129c6:	2300      	movs	r3, #0
 80129c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80129ca:	2320      	movs	r3, #32
 80129cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80129d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80129d4:	2330      	movs	r3, #48	@ 0x30
 80129d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012b74 <_svfiprintf_r+0x1e4>
 80129da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129de:	f04f 0901 	mov.w	r9, #1
 80129e2:	4623      	mov	r3, r4
 80129e4:	469a      	mov	sl, r3
 80129e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129ea:	b10a      	cbz	r2, 80129f0 <_svfiprintf_r+0x60>
 80129ec:	2a25      	cmp	r2, #37	@ 0x25
 80129ee:	d1f9      	bne.n	80129e4 <_svfiprintf_r+0x54>
 80129f0:	ebba 0b04 	subs.w	fp, sl, r4
 80129f4:	d00b      	beq.n	8012a0e <_svfiprintf_r+0x7e>
 80129f6:	465b      	mov	r3, fp
 80129f8:	4622      	mov	r2, r4
 80129fa:	4629      	mov	r1, r5
 80129fc:	4638      	mov	r0, r7
 80129fe:	f7ff ff6b 	bl	80128d8 <__ssputs_r>
 8012a02:	3001      	adds	r0, #1
 8012a04:	f000 80a7 	beq.w	8012b56 <_svfiprintf_r+0x1c6>
 8012a08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a0a:	445a      	add	r2, fp
 8012a0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f000 809f 	beq.w	8012b56 <_svfiprintf_r+0x1c6>
 8012a18:	2300      	movs	r3, #0
 8012a1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a22:	f10a 0a01 	add.w	sl, sl, #1
 8012a26:	9304      	str	r3, [sp, #16]
 8012a28:	9307      	str	r3, [sp, #28]
 8012a2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a30:	4654      	mov	r4, sl
 8012a32:	2205      	movs	r2, #5
 8012a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a38:	484e      	ldr	r0, [pc, #312]	@ (8012b74 <_svfiprintf_r+0x1e4>)
 8012a3a:	f7ed fbd1 	bl	80001e0 <memchr>
 8012a3e:	9a04      	ldr	r2, [sp, #16]
 8012a40:	b9d8      	cbnz	r0, 8012a7a <_svfiprintf_r+0xea>
 8012a42:	06d0      	lsls	r0, r2, #27
 8012a44:	bf44      	itt	mi
 8012a46:	2320      	movmi	r3, #32
 8012a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a4c:	0711      	lsls	r1, r2, #28
 8012a4e:	bf44      	itt	mi
 8012a50:	232b      	movmi	r3, #43	@ 0x2b
 8012a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a56:	f89a 3000 	ldrb.w	r3, [sl]
 8012a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a5c:	d015      	beq.n	8012a8a <_svfiprintf_r+0xfa>
 8012a5e:	9a07      	ldr	r2, [sp, #28]
 8012a60:	4654      	mov	r4, sl
 8012a62:	2000      	movs	r0, #0
 8012a64:	f04f 0c0a 	mov.w	ip, #10
 8012a68:	4621      	mov	r1, r4
 8012a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a6e:	3b30      	subs	r3, #48	@ 0x30
 8012a70:	2b09      	cmp	r3, #9
 8012a72:	d94b      	bls.n	8012b0c <_svfiprintf_r+0x17c>
 8012a74:	b1b0      	cbz	r0, 8012aa4 <_svfiprintf_r+0x114>
 8012a76:	9207      	str	r2, [sp, #28]
 8012a78:	e014      	b.n	8012aa4 <_svfiprintf_r+0x114>
 8012a7a:	eba0 0308 	sub.w	r3, r0, r8
 8012a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8012a82:	4313      	orrs	r3, r2
 8012a84:	9304      	str	r3, [sp, #16]
 8012a86:	46a2      	mov	sl, r4
 8012a88:	e7d2      	b.n	8012a30 <_svfiprintf_r+0xa0>
 8012a8a:	9b03      	ldr	r3, [sp, #12]
 8012a8c:	1d19      	adds	r1, r3, #4
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	9103      	str	r1, [sp, #12]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	bfbb      	ittet	lt
 8012a96:	425b      	neglt	r3, r3
 8012a98:	f042 0202 	orrlt.w	r2, r2, #2
 8012a9c:	9307      	strge	r3, [sp, #28]
 8012a9e:	9307      	strlt	r3, [sp, #28]
 8012aa0:	bfb8      	it	lt
 8012aa2:	9204      	strlt	r2, [sp, #16]
 8012aa4:	7823      	ldrb	r3, [r4, #0]
 8012aa6:	2b2e      	cmp	r3, #46	@ 0x2e
 8012aa8:	d10a      	bne.n	8012ac0 <_svfiprintf_r+0x130>
 8012aaa:	7863      	ldrb	r3, [r4, #1]
 8012aac:	2b2a      	cmp	r3, #42	@ 0x2a
 8012aae:	d132      	bne.n	8012b16 <_svfiprintf_r+0x186>
 8012ab0:	9b03      	ldr	r3, [sp, #12]
 8012ab2:	1d1a      	adds	r2, r3, #4
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	9203      	str	r2, [sp, #12]
 8012ab8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012abc:	3402      	adds	r4, #2
 8012abe:	9305      	str	r3, [sp, #20]
 8012ac0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012b84 <_svfiprintf_r+0x1f4>
 8012ac4:	7821      	ldrb	r1, [r4, #0]
 8012ac6:	2203      	movs	r2, #3
 8012ac8:	4650      	mov	r0, sl
 8012aca:	f7ed fb89 	bl	80001e0 <memchr>
 8012ace:	b138      	cbz	r0, 8012ae0 <_svfiprintf_r+0x150>
 8012ad0:	9b04      	ldr	r3, [sp, #16]
 8012ad2:	eba0 000a 	sub.w	r0, r0, sl
 8012ad6:	2240      	movs	r2, #64	@ 0x40
 8012ad8:	4082      	lsls	r2, r0
 8012ada:	4313      	orrs	r3, r2
 8012adc:	3401      	adds	r4, #1
 8012ade:	9304      	str	r3, [sp, #16]
 8012ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ae4:	4824      	ldr	r0, [pc, #144]	@ (8012b78 <_svfiprintf_r+0x1e8>)
 8012ae6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012aea:	2206      	movs	r2, #6
 8012aec:	f7ed fb78 	bl	80001e0 <memchr>
 8012af0:	2800      	cmp	r0, #0
 8012af2:	d036      	beq.n	8012b62 <_svfiprintf_r+0x1d2>
 8012af4:	4b21      	ldr	r3, [pc, #132]	@ (8012b7c <_svfiprintf_r+0x1ec>)
 8012af6:	bb1b      	cbnz	r3, 8012b40 <_svfiprintf_r+0x1b0>
 8012af8:	9b03      	ldr	r3, [sp, #12]
 8012afa:	3307      	adds	r3, #7
 8012afc:	f023 0307 	bic.w	r3, r3, #7
 8012b00:	3308      	adds	r3, #8
 8012b02:	9303      	str	r3, [sp, #12]
 8012b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b06:	4433      	add	r3, r6
 8012b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b0a:	e76a      	b.n	80129e2 <_svfiprintf_r+0x52>
 8012b0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b10:	460c      	mov	r4, r1
 8012b12:	2001      	movs	r0, #1
 8012b14:	e7a8      	b.n	8012a68 <_svfiprintf_r+0xd8>
 8012b16:	2300      	movs	r3, #0
 8012b18:	3401      	adds	r4, #1
 8012b1a:	9305      	str	r3, [sp, #20]
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	f04f 0c0a 	mov.w	ip, #10
 8012b22:	4620      	mov	r0, r4
 8012b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b28:	3a30      	subs	r2, #48	@ 0x30
 8012b2a:	2a09      	cmp	r2, #9
 8012b2c:	d903      	bls.n	8012b36 <_svfiprintf_r+0x1a6>
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d0c6      	beq.n	8012ac0 <_svfiprintf_r+0x130>
 8012b32:	9105      	str	r1, [sp, #20]
 8012b34:	e7c4      	b.n	8012ac0 <_svfiprintf_r+0x130>
 8012b36:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	e7f0      	b.n	8012b22 <_svfiprintf_r+0x192>
 8012b40:	ab03      	add	r3, sp, #12
 8012b42:	9300      	str	r3, [sp, #0]
 8012b44:	462a      	mov	r2, r5
 8012b46:	4b0e      	ldr	r3, [pc, #56]	@ (8012b80 <_svfiprintf_r+0x1f0>)
 8012b48:	a904      	add	r1, sp, #16
 8012b4a:	4638      	mov	r0, r7
 8012b4c:	f7fd ff20 	bl	8010990 <_printf_float>
 8012b50:	1c42      	adds	r2, r0, #1
 8012b52:	4606      	mov	r6, r0
 8012b54:	d1d6      	bne.n	8012b04 <_svfiprintf_r+0x174>
 8012b56:	89ab      	ldrh	r3, [r5, #12]
 8012b58:	065b      	lsls	r3, r3, #25
 8012b5a:	f53f af2d 	bmi.w	80129b8 <_svfiprintf_r+0x28>
 8012b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b60:	e72c      	b.n	80129bc <_svfiprintf_r+0x2c>
 8012b62:	ab03      	add	r3, sp, #12
 8012b64:	9300      	str	r3, [sp, #0]
 8012b66:	462a      	mov	r2, r5
 8012b68:	4b05      	ldr	r3, [pc, #20]	@ (8012b80 <_svfiprintf_r+0x1f0>)
 8012b6a:	a904      	add	r1, sp, #16
 8012b6c:	4638      	mov	r0, r7
 8012b6e:	f7fe f9a7 	bl	8010ec0 <_printf_i>
 8012b72:	e7ed      	b.n	8012b50 <_svfiprintf_r+0x1c0>
 8012b74:	08014078 	.word	0x08014078
 8012b78:	08014082 	.word	0x08014082
 8012b7c:	08010991 	.word	0x08010991
 8012b80:	080128d9 	.word	0x080128d9
 8012b84:	0801407e 	.word	0x0801407e

08012b88 <__sflush_r>:
 8012b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b90:	0716      	lsls	r6, r2, #28
 8012b92:	4605      	mov	r5, r0
 8012b94:	460c      	mov	r4, r1
 8012b96:	d454      	bmi.n	8012c42 <__sflush_r+0xba>
 8012b98:	684b      	ldr	r3, [r1, #4]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	dc02      	bgt.n	8012ba4 <__sflush_r+0x1c>
 8012b9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	dd48      	ble.n	8012c36 <__sflush_r+0xae>
 8012ba4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012ba6:	2e00      	cmp	r6, #0
 8012ba8:	d045      	beq.n	8012c36 <__sflush_r+0xae>
 8012baa:	2300      	movs	r3, #0
 8012bac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012bb0:	682f      	ldr	r7, [r5, #0]
 8012bb2:	6a21      	ldr	r1, [r4, #32]
 8012bb4:	602b      	str	r3, [r5, #0]
 8012bb6:	d030      	beq.n	8012c1a <__sflush_r+0x92>
 8012bb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012bba:	89a3      	ldrh	r3, [r4, #12]
 8012bbc:	0759      	lsls	r1, r3, #29
 8012bbe:	d505      	bpl.n	8012bcc <__sflush_r+0x44>
 8012bc0:	6863      	ldr	r3, [r4, #4]
 8012bc2:	1ad2      	subs	r2, r2, r3
 8012bc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012bc6:	b10b      	cbz	r3, 8012bcc <__sflush_r+0x44>
 8012bc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012bca:	1ad2      	subs	r2, r2, r3
 8012bcc:	2300      	movs	r3, #0
 8012bce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012bd0:	6a21      	ldr	r1, [r4, #32]
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	47b0      	blx	r6
 8012bd6:	1c43      	adds	r3, r0, #1
 8012bd8:	89a3      	ldrh	r3, [r4, #12]
 8012bda:	d106      	bne.n	8012bea <__sflush_r+0x62>
 8012bdc:	6829      	ldr	r1, [r5, #0]
 8012bde:	291d      	cmp	r1, #29
 8012be0:	d82b      	bhi.n	8012c3a <__sflush_r+0xb2>
 8012be2:	4a2a      	ldr	r2, [pc, #168]	@ (8012c8c <__sflush_r+0x104>)
 8012be4:	410a      	asrs	r2, r1
 8012be6:	07d6      	lsls	r6, r2, #31
 8012be8:	d427      	bmi.n	8012c3a <__sflush_r+0xb2>
 8012bea:	2200      	movs	r2, #0
 8012bec:	6062      	str	r2, [r4, #4]
 8012bee:	04d9      	lsls	r1, r3, #19
 8012bf0:	6922      	ldr	r2, [r4, #16]
 8012bf2:	6022      	str	r2, [r4, #0]
 8012bf4:	d504      	bpl.n	8012c00 <__sflush_r+0x78>
 8012bf6:	1c42      	adds	r2, r0, #1
 8012bf8:	d101      	bne.n	8012bfe <__sflush_r+0x76>
 8012bfa:	682b      	ldr	r3, [r5, #0]
 8012bfc:	b903      	cbnz	r3, 8012c00 <__sflush_r+0x78>
 8012bfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8012c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c02:	602f      	str	r7, [r5, #0]
 8012c04:	b1b9      	cbz	r1, 8012c36 <__sflush_r+0xae>
 8012c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c0a:	4299      	cmp	r1, r3
 8012c0c:	d002      	beq.n	8012c14 <__sflush_r+0x8c>
 8012c0e:	4628      	mov	r0, r5
 8012c10:	f7ff fa96 	bl	8012140 <_free_r>
 8012c14:	2300      	movs	r3, #0
 8012c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c18:	e00d      	b.n	8012c36 <__sflush_r+0xae>
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	4628      	mov	r0, r5
 8012c1e:	47b0      	blx	r6
 8012c20:	4602      	mov	r2, r0
 8012c22:	1c50      	adds	r0, r2, #1
 8012c24:	d1c9      	bne.n	8012bba <__sflush_r+0x32>
 8012c26:	682b      	ldr	r3, [r5, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d0c6      	beq.n	8012bba <__sflush_r+0x32>
 8012c2c:	2b1d      	cmp	r3, #29
 8012c2e:	d001      	beq.n	8012c34 <__sflush_r+0xac>
 8012c30:	2b16      	cmp	r3, #22
 8012c32:	d11e      	bne.n	8012c72 <__sflush_r+0xea>
 8012c34:	602f      	str	r7, [r5, #0]
 8012c36:	2000      	movs	r0, #0
 8012c38:	e022      	b.n	8012c80 <__sflush_r+0xf8>
 8012c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c3e:	b21b      	sxth	r3, r3
 8012c40:	e01b      	b.n	8012c7a <__sflush_r+0xf2>
 8012c42:	690f      	ldr	r7, [r1, #16]
 8012c44:	2f00      	cmp	r7, #0
 8012c46:	d0f6      	beq.n	8012c36 <__sflush_r+0xae>
 8012c48:	0793      	lsls	r3, r2, #30
 8012c4a:	680e      	ldr	r6, [r1, #0]
 8012c4c:	bf08      	it	eq
 8012c4e:	694b      	ldreq	r3, [r1, #20]
 8012c50:	600f      	str	r7, [r1, #0]
 8012c52:	bf18      	it	ne
 8012c54:	2300      	movne	r3, #0
 8012c56:	eba6 0807 	sub.w	r8, r6, r7
 8012c5a:	608b      	str	r3, [r1, #8]
 8012c5c:	f1b8 0f00 	cmp.w	r8, #0
 8012c60:	dde9      	ble.n	8012c36 <__sflush_r+0xae>
 8012c62:	6a21      	ldr	r1, [r4, #32]
 8012c64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012c66:	4643      	mov	r3, r8
 8012c68:	463a      	mov	r2, r7
 8012c6a:	4628      	mov	r0, r5
 8012c6c:	47b0      	blx	r6
 8012c6e:	2800      	cmp	r0, #0
 8012c70:	dc08      	bgt.n	8012c84 <__sflush_r+0xfc>
 8012c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c7a:	81a3      	strh	r3, [r4, #12]
 8012c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c84:	4407      	add	r7, r0
 8012c86:	eba8 0800 	sub.w	r8, r8, r0
 8012c8a:	e7e7      	b.n	8012c5c <__sflush_r+0xd4>
 8012c8c:	dfbffffe 	.word	0xdfbffffe

08012c90 <_fflush_r>:
 8012c90:	b538      	push	{r3, r4, r5, lr}
 8012c92:	690b      	ldr	r3, [r1, #16]
 8012c94:	4605      	mov	r5, r0
 8012c96:	460c      	mov	r4, r1
 8012c98:	b913      	cbnz	r3, 8012ca0 <_fflush_r+0x10>
 8012c9a:	2500      	movs	r5, #0
 8012c9c:	4628      	mov	r0, r5
 8012c9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ca0:	b118      	cbz	r0, 8012caa <_fflush_r+0x1a>
 8012ca2:	6a03      	ldr	r3, [r0, #32]
 8012ca4:	b90b      	cbnz	r3, 8012caa <_fflush_r+0x1a>
 8012ca6:	f7fe fab7 	bl	8011218 <__sinit>
 8012caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d0f3      	beq.n	8012c9a <_fflush_r+0xa>
 8012cb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012cb4:	07d0      	lsls	r0, r2, #31
 8012cb6:	d404      	bmi.n	8012cc2 <_fflush_r+0x32>
 8012cb8:	0599      	lsls	r1, r3, #22
 8012cba:	d402      	bmi.n	8012cc2 <_fflush_r+0x32>
 8012cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012cbe:	f7fe fbe0 	bl	8011482 <__retarget_lock_acquire_recursive>
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	4621      	mov	r1, r4
 8012cc6:	f7ff ff5f 	bl	8012b88 <__sflush_r>
 8012cca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ccc:	07da      	lsls	r2, r3, #31
 8012cce:	4605      	mov	r5, r0
 8012cd0:	d4e4      	bmi.n	8012c9c <_fflush_r+0xc>
 8012cd2:	89a3      	ldrh	r3, [r4, #12]
 8012cd4:	059b      	lsls	r3, r3, #22
 8012cd6:	d4e1      	bmi.n	8012c9c <_fflush_r+0xc>
 8012cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012cda:	f7fe fbd3 	bl	8011484 <__retarget_lock_release_recursive>
 8012cde:	e7dd      	b.n	8012c9c <_fflush_r+0xc>

08012ce0 <memmove>:
 8012ce0:	4288      	cmp	r0, r1
 8012ce2:	b510      	push	{r4, lr}
 8012ce4:	eb01 0402 	add.w	r4, r1, r2
 8012ce8:	d902      	bls.n	8012cf0 <memmove+0x10>
 8012cea:	4284      	cmp	r4, r0
 8012cec:	4623      	mov	r3, r4
 8012cee:	d807      	bhi.n	8012d00 <memmove+0x20>
 8012cf0:	1e43      	subs	r3, r0, #1
 8012cf2:	42a1      	cmp	r1, r4
 8012cf4:	d008      	beq.n	8012d08 <memmove+0x28>
 8012cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012cfe:	e7f8      	b.n	8012cf2 <memmove+0x12>
 8012d00:	4402      	add	r2, r0
 8012d02:	4601      	mov	r1, r0
 8012d04:	428a      	cmp	r2, r1
 8012d06:	d100      	bne.n	8012d0a <memmove+0x2a>
 8012d08:	bd10      	pop	{r4, pc}
 8012d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012d12:	e7f7      	b.n	8012d04 <memmove+0x24>

08012d14 <__assert_func>:
 8012d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d16:	4614      	mov	r4, r2
 8012d18:	461a      	mov	r2, r3
 8012d1a:	4b09      	ldr	r3, [pc, #36]	@ (8012d40 <__assert_func+0x2c>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	4605      	mov	r5, r0
 8012d20:	68d8      	ldr	r0, [r3, #12]
 8012d22:	b954      	cbnz	r4, 8012d3a <__assert_func+0x26>
 8012d24:	4b07      	ldr	r3, [pc, #28]	@ (8012d44 <__assert_func+0x30>)
 8012d26:	461c      	mov	r4, r3
 8012d28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d2c:	9100      	str	r1, [sp, #0]
 8012d2e:	462b      	mov	r3, r5
 8012d30:	4905      	ldr	r1, [pc, #20]	@ (8012d48 <__assert_func+0x34>)
 8012d32:	f000 f86f 	bl	8012e14 <fiprintf>
 8012d36:	f000 f87f 	bl	8012e38 <abort>
 8012d3a:	4b04      	ldr	r3, [pc, #16]	@ (8012d4c <__assert_func+0x38>)
 8012d3c:	e7f4      	b.n	8012d28 <__assert_func+0x14>
 8012d3e:	bf00      	nop
 8012d40:	20000138 	.word	0x20000138
 8012d44:	080140ce 	.word	0x080140ce
 8012d48:	080140a0 	.word	0x080140a0
 8012d4c:	08014093 	.word	0x08014093

08012d50 <_calloc_r>:
 8012d50:	b570      	push	{r4, r5, r6, lr}
 8012d52:	fba1 5402 	umull	r5, r4, r1, r2
 8012d56:	b93c      	cbnz	r4, 8012d68 <_calloc_r+0x18>
 8012d58:	4629      	mov	r1, r5
 8012d5a:	f7fd fced 	bl	8010738 <_malloc_r>
 8012d5e:	4606      	mov	r6, r0
 8012d60:	b928      	cbnz	r0, 8012d6e <_calloc_r+0x1e>
 8012d62:	2600      	movs	r6, #0
 8012d64:	4630      	mov	r0, r6
 8012d66:	bd70      	pop	{r4, r5, r6, pc}
 8012d68:	220c      	movs	r2, #12
 8012d6a:	6002      	str	r2, [r0, #0]
 8012d6c:	e7f9      	b.n	8012d62 <_calloc_r+0x12>
 8012d6e:	462a      	mov	r2, r5
 8012d70:	4621      	mov	r1, r4
 8012d72:	f7fe faea 	bl	801134a <memset>
 8012d76:	e7f5      	b.n	8012d64 <_calloc_r+0x14>

08012d78 <__ascii_mbtowc>:
 8012d78:	b082      	sub	sp, #8
 8012d7a:	b901      	cbnz	r1, 8012d7e <__ascii_mbtowc+0x6>
 8012d7c:	a901      	add	r1, sp, #4
 8012d7e:	b142      	cbz	r2, 8012d92 <__ascii_mbtowc+0x1a>
 8012d80:	b14b      	cbz	r3, 8012d96 <__ascii_mbtowc+0x1e>
 8012d82:	7813      	ldrb	r3, [r2, #0]
 8012d84:	600b      	str	r3, [r1, #0]
 8012d86:	7812      	ldrb	r2, [r2, #0]
 8012d88:	1e10      	subs	r0, r2, #0
 8012d8a:	bf18      	it	ne
 8012d8c:	2001      	movne	r0, #1
 8012d8e:	b002      	add	sp, #8
 8012d90:	4770      	bx	lr
 8012d92:	4610      	mov	r0, r2
 8012d94:	e7fb      	b.n	8012d8e <__ascii_mbtowc+0x16>
 8012d96:	f06f 0001 	mvn.w	r0, #1
 8012d9a:	e7f8      	b.n	8012d8e <__ascii_mbtowc+0x16>

08012d9c <_realloc_r>:
 8012d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012da0:	4680      	mov	r8, r0
 8012da2:	4615      	mov	r5, r2
 8012da4:	460c      	mov	r4, r1
 8012da6:	b921      	cbnz	r1, 8012db2 <_realloc_r+0x16>
 8012da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dac:	4611      	mov	r1, r2
 8012dae:	f7fd bcc3 	b.w	8010738 <_malloc_r>
 8012db2:	b92a      	cbnz	r2, 8012dc0 <_realloc_r+0x24>
 8012db4:	f7ff f9c4 	bl	8012140 <_free_r>
 8012db8:	2400      	movs	r4, #0
 8012dba:	4620      	mov	r0, r4
 8012dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc0:	f000 f841 	bl	8012e46 <_malloc_usable_size_r>
 8012dc4:	4285      	cmp	r5, r0
 8012dc6:	4606      	mov	r6, r0
 8012dc8:	d802      	bhi.n	8012dd0 <_realloc_r+0x34>
 8012dca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012dce:	d8f4      	bhi.n	8012dba <_realloc_r+0x1e>
 8012dd0:	4629      	mov	r1, r5
 8012dd2:	4640      	mov	r0, r8
 8012dd4:	f7fd fcb0 	bl	8010738 <_malloc_r>
 8012dd8:	4607      	mov	r7, r0
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	d0ec      	beq.n	8012db8 <_realloc_r+0x1c>
 8012dde:	42b5      	cmp	r5, r6
 8012de0:	462a      	mov	r2, r5
 8012de2:	4621      	mov	r1, r4
 8012de4:	bf28      	it	cs
 8012de6:	4632      	movcs	r2, r6
 8012de8:	f7fe fb4d 	bl	8011486 <memcpy>
 8012dec:	4621      	mov	r1, r4
 8012dee:	4640      	mov	r0, r8
 8012df0:	f7ff f9a6 	bl	8012140 <_free_r>
 8012df4:	463c      	mov	r4, r7
 8012df6:	e7e0      	b.n	8012dba <_realloc_r+0x1e>

08012df8 <__ascii_wctomb>:
 8012df8:	4603      	mov	r3, r0
 8012dfa:	4608      	mov	r0, r1
 8012dfc:	b141      	cbz	r1, 8012e10 <__ascii_wctomb+0x18>
 8012dfe:	2aff      	cmp	r2, #255	@ 0xff
 8012e00:	d904      	bls.n	8012e0c <__ascii_wctomb+0x14>
 8012e02:	228a      	movs	r2, #138	@ 0x8a
 8012e04:	601a      	str	r2, [r3, #0]
 8012e06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e0a:	4770      	bx	lr
 8012e0c:	700a      	strb	r2, [r1, #0]
 8012e0e:	2001      	movs	r0, #1
 8012e10:	4770      	bx	lr
	...

08012e14 <fiprintf>:
 8012e14:	b40e      	push	{r1, r2, r3}
 8012e16:	b503      	push	{r0, r1, lr}
 8012e18:	4601      	mov	r1, r0
 8012e1a:	ab03      	add	r3, sp, #12
 8012e1c:	4805      	ldr	r0, [pc, #20]	@ (8012e34 <fiprintf+0x20>)
 8012e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e22:	6800      	ldr	r0, [r0, #0]
 8012e24:	9301      	str	r3, [sp, #4]
 8012e26:	f000 f83f 	bl	8012ea8 <_vfiprintf_r>
 8012e2a:	b002      	add	sp, #8
 8012e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e30:	b003      	add	sp, #12
 8012e32:	4770      	bx	lr
 8012e34:	20000138 	.word	0x20000138

08012e38 <abort>:
 8012e38:	b508      	push	{r3, lr}
 8012e3a:	2006      	movs	r0, #6
 8012e3c:	f000 fa08 	bl	8013250 <raise>
 8012e40:	2001      	movs	r0, #1
 8012e42:	f7f0 f8a7 	bl	8002f94 <_exit>

08012e46 <_malloc_usable_size_r>:
 8012e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e4a:	1f18      	subs	r0, r3, #4
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	bfbc      	itt	lt
 8012e50:	580b      	ldrlt	r3, [r1, r0]
 8012e52:	18c0      	addlt	r0, r0, r3
 8012e54:	4770      	bx	lr

08012e56 <__sfputc_r>:
 8012e56:	6893      	ldr	r3, [r2, #8]
 8012e58:	3b01      	subs	r3, #1
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	b410      	push	{r4}
 8012e5e:	6093      	str	r3, [r2, #8]
 8012e60:	da08      	bge.n	8012e74 <__sfputc_r+0x1e>
 8012e62:	6994      	ldr	r4, [r2, #24]
 8012e64:	42a3      	cmp	r3, r4
 8012e66:	db01      	blt.n	8012e6c <__sfputc_r+0x16>
 8012e68:	290a      	cmp	r1, #10
 8012e6a:	d103      	bne.n	8012e74 <__sfputc_r+0x1e>
 8012e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e70:	f000 b932 	b.w	80130d8 <__swbuf_r>
 8012e74:	6813      	ldr	r3, [r2, #0]
 8012e76:	1c58      	adds	r0, r3, #1
 8012e78:	6010      	str	r0, [r2, #0]
 8012e7a:	7019      	strb	r1, [r3, #0]
 8012e7c:	4608      	mov	r0, r1
 8012e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e82:	4770      	bx	lr

08012e84 <__sfputs_r>:
 8012e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e86:	4606      	mov	r6, r0
 8012e88:	460f      	mov	r7, r1
 8012e8a:	4614      	mov	r4, r2
 8012e8c:	18d5      	adds	r5, r2, r3
 8012e8e:	42ac      	cmp	r4, r5
 8012e90:	d101      	bne.n	8012e96 <__sfputs_r+0x12>
 8012e92:	2000      	movs	r0, #0
 8012e94:	e007      	b.n	8012ea6 <__sfputs_r+0x22>
 8012e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e9a:	463a      	mov	r2, r7
 8012e9c:	4630      	mov	r0, r6
 8012e9e:	f7ff ffda 	bl	8012e56 <__sfputc_r>
 8012ea2:	1c43      	adds	r3, r0, #1
 8012ea4:	d1f3      	bne.n	8012e8e <__sfputs_r+0xa>
 8012ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ea8 <_vfiprintf_r>:
 8012ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eac:	460d      	mov	r5, r1
 8012eae:	b09d      	sub	sp, #116	@ 0x74
 8012eb0:	4614      	mov	r4, r2
 8012eb2:	4698      	mov	r8, r3
 8012eb4:	4606      	mov	r6, r0
 8012eb6:	b118      	cbz	r0, 8012ec0 <_vfiprintf_r+0x18>
 8012eb8:	6a03      	ldr	r3, [r0, #32]
 8012eba:	b90b      	cbnz	r3, 8012ec0 <_vfiprintf_r+0x18>
 8012ebc:	f7fe f9ac 	bl	8011218 <__sinit>
 8012ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ec2:	07d9      	lsls	r1, r3, #31
 8012ec4:	d405      	bmi.n	8012ed2 <_vfiprintf_r+0x2a>
 8012ec6:	89ab      	ldrh	r3, [r5, #12]
 8012ec8:	059a      	lsls	r2, r3, #22
 8012eca:	d402      	bmi.n	8012ed2 <_vfiprintf_r+0x2a>
 8012ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ece:	f7fe fad8 	bl	8011482 <__retarget_lock_acquire_recursive>
 8012ed2:	89ab      	ldrh	r3, [r5, #12]
 8012ed4:	071b      	lsls	r3, r3, #28
 8012ed6:	d501      	bpl.n	8012edc <_vfiprintf_r+0x34>
 8012ed8:	692b      	ldr	r3, [r5, #16]
 8012eda:	b99b      	cbnz	r3, 8012f04 <_vfiprintf_r+0x5c>
 8012edc:	4629      	mov	r1, r5
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f000 f938 	bl	8013154 <__swsetup_r>
 8012ee4:	b170      	cbz	r0, 8012f04 <_vfiprintf_r+0x5c>
 8012ee6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ee8:	07dc      	lsls	r4, r3, #31
 8012eea:	d504      	bpl.n	8012ef6 <_vfiprintf_r+0x4e>
 8012eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ef0:	b01d      	add	sp, #116	@ 0x74
 8012ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef6:	89ab      	ldrh	r3, [r5, #12]
 8012ef8:	0598      	lsls	r0, r3, #22
 8012efa:	d4f7      	bmi.n	8012eec <_vfiprintf_r+0x44>
 8012efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012efe:	f7fe fac1 	bl	8011484 <__retarget_lock_release_recursive>
 8012f02:	e7f3      	b.n	8012eec <_vfiprintf_r+0x44>
 8012f04:	2300      	movs	r3, #0
 8012f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f08:	2320      	movs	r3, #32
 8012f0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f12:	2330      	movs	r3, #48	@ 0x30
 8012f14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80130c4 <_vfiprintf_r+0x21c>
 8012f18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012f1c:	f04f 0901 	mov.w	r9, #1
 8012f20:	4623      	mov	r3, r4
 8012f22:	469a      	mov	sl, r3
 8012f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f28:	b10a      	cbz	r2, 8012f2e <_vfiprintf_r+0x86>
 8012f2a:	2a25      	cmp	r2, #37	@ 0x25
 8012f2c:	d1f9      	bne.n	8012f22 <_vfiprintf_r+0x7a>
 8012f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8012f32:	d00b      	beq.n	8012f4c <_vfiprintf_r+0xa4>
 8012f34:	465b      	mov	r3, fp
 8012f36:	4622      	mov	r2, r4
 8012f38:	4629      	mov	r1, r5
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	f7ff ffa2 	bl	8012e84 <__sfputs_r>
 8012f40:	3001      	adds	r0, #1
 8012f42:	f000 80a7 	beq.w	8013094 <_vfiprintf_r+0x1ec>
 8012f46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f48:	445a      	add	r2, fp
 8012f4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	f000 809f 	beq.w	8013094 <_vfiprintf_r+0x1ec>
 8012f56:	2300      	movs	r3, #0
 8012f58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f60:	f10a 0a01 	add.w	sl, sl, #1
 8012f64:	9304      	str	r3, [sp, #16]
 8012f66:	9307      	str	r3, [sp, #28]
 8012f68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f6e:	4654      	mov	r4, sl
 8012f70:	2205      	movs	r2, #5
 8012f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f76:	4853      	ldr	r0, [pc, #332]	@ (80130c4 <_vfiprintf_r+0x21c>)
 8012f78:	f7ed f932 	bl	80001e0 <memchr>
 8012f7c:	9a04      	ldr	r2, [sp, #16]
 8012f7e:	b9d8      	cbnz	r0, 8012fb8 <_vfiprintf_r+0x110>
 8012f80:	06d1      	lsls	r1, r2, #27
 8012f82:	bf44      	itt	mi
 8012f84:	2320      	movmi	r3, #32
 8012f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f8a:	0713      	lsls	r3, r2, #28
 8012f8c:	bf44      	itt	mi
 8012f8e:	232b      	movmi	r3, #43	@ 0x2b
 8012f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f94:	f89a 3000 	ldrb.w	r3, [sl]
 8012f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f9a:	d015      	beq.n	8012fc8 <_vfiprintf_r+0x120>
 8012f9c:	9a07      	ldr	r2, [sp, #28]
 8012f9e:	4654      	mov	r4, sl
 8012fa0:	2000      	movs	r0, #0
 8012fa2:	f04f 0c0a 	mov.w	ip, #10
 8012fa6:	4621      	mov	r1, r4
 8012fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fac:	3b30      	subs	r3, #48	@ 0x30
 8012fae:	2b09      	cmp	r3, #9
 8012fb0:	d94b      	bls.n	801304a <_vfiprintf_r+0x1a2>
 8012fb2:	b1b0      	cbz	r0, 8012fe2 <_vfiprintf_r+0x13a>
 8012fb4:	9207      	str	r2, [sp, #28]
 8012fb6:	e014      	b.n	8012fe2 <_vfiprintf_r+0x13a>
 8012fb8:	eba0 0308 	sub.w	r3, r0, r8
 8012fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8012fc0:	4313      	orrs	r3, r2
 8012fc2:	9304      	str	r3, [sp, #16]
 8012fc4:	46a2      	mov	sl, r4
 8012fc6:	e7d2      	b.n	8012f6e <_vfiprintf_r+0xc6>
 8012fc8:	9b03      	ldr	r3, [sp, #12]
 8012fca:	1d19      	adds	r1, r3, #4
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	9103      	str	r1, [sp, #12]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	bfbb      	ittet	lt
 8012fd4:	425b      	neglt	r3, r3
 8012fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8012fda:	9307      	strge	r3, [sp, #28]
 8012fdc:	9307      	strlt	r3, [sp, #28]
 8012fde:	bfb8      	it	lt
 8012fe0:	9204      	strlt	r2, [sp, #16]
 8012fe2:	7823      	ldrb	r3, [r4, #0]
 8012fe4:	2b2e      	cmp	r3, #46	@ 0x2e
 8012fe6:	d10a      	bne.n	8012ffe <_vfiprintf_r+0x156>
 8012fe8:	7863      	ldrb	r3, [r4, #1]
 8012fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8012fec:	d132      	bne.n	8013054 <_vfiprintf_r+0x1ac>
 8012fee:	9b03      	ldr	r3, [sp, #12]
 8012ff0:	1d1a      	adds	r2, r3, #4
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	9203      	str	r2, [sp, #12]
 8012ff6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012ffa:	3402      	adds	r4, #2
 8012ffc:	9305      	str	r3, [sp, #20]
 8012ffe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80130d4 <_vfiprintf_r+0x22c>
 8013002:	7821      	ldrb	r1, [r4, #0]
 8013004:	2203      	movs	r2, #3
 8013006:	4650      	mov	r0, sl
 8013008:	f7ed f8ea 	bl	80001e0 <memchr>
 801300c:	b138      	cbz	r0, 801301e <_vfiprintf_r+0x176>
 801300e:	9b04      	ldr	r3, [sp, #16]
 8013010:	eba0 000a 	sub.w	r0, r0, sl
 8013014:	2240      	movs	r2, #64	@ 0x40
 8013016:	4082      	lsls	r2, r0
 8013018:	4313      	orrs	r3, r2
 801301a:	3401      	adds	r4, #1
 801301c:	9304      	str	r3, [sp, #16]
 801301e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013022:	4829      	ldr	r0, [pc, #164]	@ (80130c8 <_vfiprintf_r+0x220>)
 8013024:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013028:	2206      	movs	r2, #6
 801302a:	f7ed f8d9 	bl	80001e0 <memchr>
 801302e:	2800      	cmp	r0, #0
 8013030:	d03f      	beq.n	80130b2 <_vfiprintf_r+0x20a>
 8013032:	4b26      	ldr	r3, [pc, #152]	@ (80130cc <_vfiprintf_r+0x224>)
 8013034:	bb1b      	cbnz	r3, 801307e <_vfiprintf_r+0x1d6>
 8013036:	9b03      	ldr	r3, [sp, #12]
 8013038:	3307      	adds	r3, #7
 801303a:	f023 0307 	bic.w	r3, r3, #7
 801303e:	3308      	adds	r3, #8
 8013040:	9303      	str	r3, [sp, #12]
 8013042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013044:	443b      	add	r3, r7
 8013046:	9309      	str	r3, [sp, #36]	@ 0x24
 8013048:	e76a      	b.n	8012f20 <_vfiprintf_r+0x78>
 801304a:	fb0c 3202 	mla	r2, ip, r2, r3
 801304e:	460c      	mov	r4, r1
 8013050:	2001      	movs	r0, #1
 8013052:	e7a8      	b.n	8012fa6 <_vfiprintf_r+0xfe>
 8013054:	2300      	movs	r3, #0
 8013056:	3401      	adds	r4, #1
 8013058:	9305      	str	r3, [sp, #20]
 801305a:	4619      	mov	r1, r3
 801305c:	f04f 0c0a 	mov.w	ip, #10
 8013060:	4620      	mov	r0, r4
 8013062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013066:	3a30      	subs	r2, #48	@ 0x30
 8013068:	2a09      	cmp	r2, #9
 801306a:	d903      	bls.n	8013074 <_vfiprintf_r+0x1cc>
 801306c:	2b00      	cmp	r3, #0
 801306e:	d0c6      	beq.n	8012ffe <_vfiprintf_r+0x156>
 8013070:	9105      	str	r1, [sp, #20]
 8013072:	e7c4      	b.n	8012ffe <_vfiprintf_r+0x156>
 8013074:	fb0c 2101 	mla	r1, ip, r1, r2
 8013078:	4604      	mov	r4, r0
 801307a:	2301      	movs	r3, #1
 801307c:	e7f0      	b.n	8013060 <_vfiprintf_r+0x1b8>
 801307e:	ab03      	add	r3, sp, #12
 8013080:	9300      	str	r3, [sp, #0]
 8013082:	462a      	mov	r2, r5
 8013084:	4b12      	ldr	r3, [pc, #72]	@ (80130d0 <_vfiprintf_r+0x228>)
 8013086:	a904      	add	r1, sp, #16
 8013088:	4630      	mov	r0, r6
 801308a:	f7fd fc81 	bl	8010990 <_printf_float>
 801308e:	4607      	mov	r7, r0
 8013090:	1c78      	adds	r0, r7, #1
 8013092:	d1d6      	bne.n	8013042 <_vfiprintf_r+0x19a>
 8013094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013096:	07d9      	lsls	r1, r3, #31
 8013098:	d405      	bmi.n	80130a6 <_vfiprintf_r+0x1fe>
 801309a:	89ab      	ldrh	r3, [r5, #12]
 801309c:	059a      	lsls	r2, r3, #22
 801309e:	d402      	bmi.n	80130a6 <_vfiprintf_r+0x1fe>
 80130a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130a2:	f7fe f9ef 	bl	8011484 <__retarget_lock_release_recursive>
 80130a6:	89ab      	ldrh	r3, [r5, #12]
 80130a8:	065b      	lsls	r3, r3, #25
 80130aa:	f53f af1f 	bmi.w	8012eec <_vfiprintf_r+0x44>
 80130ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80130b0:	e71e      	b.n	8012ef0 <_vfiprintf_r+0x48>
 80130b2:	ab03      	add	r3, sp, #12
 80130b4:	9300      	str	r3, [sp, #0]
 80130b6:	462a      	mov	r2, r5
 80130b8:	4b05      	ldr	r3, [pc, #20]	@ (80130d0 <_vfiprintf_r+0x228>)
 80130ba:	a904      	add	r1, sp, #16
 80130bc:	4630      	mov	r0, r6
 80130be:	f7fd feff 	bl	8010ec0 <_printf_i>
 80130c2:	e7e4      	b.n	801308e <_vfiprintf_r+0x1e6>
 80130c4:	08014078 	.word	0x08014078
 80130c8:	08014082 	.word	0x08014082
 80130cc:	08010991 	.word	0x08010991
 80130d0:	08012e85 	.word	0x08012e85
 80130d4:	0801407e 	.word	0x0801407e

080130d8 <__swbuf_r>:
 80130d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130da:	460e      	mov	r6, r1
 80130dc:	4614      	mov	r4, r2
 80130de:	4605      	mov	r5, r0
 80130e0:	b118      	cbz	r0, 80130ea <__swbuf_r+0x12>
 80130e2:	6a03      	ldr	r3, [r0, #32]
 80130e4:	b90b      	cbnz	r3, 80130ea <__swbuf_r+0x12>
 80130e6:	f7fe f897 	bl	8011218 <__sinit>
 80130ea:	69a3      	ldr	r3, [r4, #24]
 80130ec:	60a3      	str	r3, [r4, #8]
 80130ee:	89a3      	ldrh	r3, [r4, #12]
 80130f0:	071a      	lsls	r2, r3, #28
 80130f2:	d501      	bpl.n	80130f8 <__swbuf_r+0x20>
 80130f4:	6923      	ldr	r3, [r4, #16]
 80130f6:	b943      	cbnz	r3, 801310a <__swbuf_r+0x32>
 80130f8:	4621      	mov	r1, r4
 80130fa:	4628      	mov	r0, r5
 80130fc:	f000 f82a 	bl	8013154 <__swsetup_r>
 8013100:	b118      	cbz	r0, 801310a <__swbuf_r+0x32>
 8013102:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013106:	4638      	mov	r0, r7
 8013108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801310a:	6823      	ldr	r3, [r4, #0]
 801310c:	6922      	ldr	r2, [r4, #16]
 801310e:	1a98      	subs	r0, r3, r2
 8013110:	6963      	ldr	r3, [r4, #20]
 8013112:	b2f6      	uxtb	r6, r6
 8013114:	4283      	cmp	r3, r0
 8013116:	4637      	mov	r7, r6
 8013118:	dc05      	bgt.n	8013126 <__swbuf_r+0x4e>
 801311a:	4621      	mov	r1, r4
 801311c:	4628      	mov	r0, r5
 801311e:	f7ff fdb7 	bl	8012c90 <_fflush_r>
 8013122:	2800      	cmp	r0, #0
 8013124:	d1ed      	bne.n	8013102 <__swbuf_r+0x2a>
 8013126:	68a3      	ldr	r3, [r4, #8]
 8013128:	3b01      	subs	r3, #1
 801312a:	60a3      	str	r3, [r4, #8]
 801312c:	6823      	ldr	r3, [r4, #0]
 801312e:	1c5a      	adds	r2, r3, #1
 8013130:	6022      	str	r2, [r4, #0]
 8013132:	701e      	strb	r6, [r3, #0]
 8013134:	6962      	ldr	r2, [r4, #20]
 8013136:	1c43      	adds	r3, r0, #1
 8013138:	429a      	cmp	r2, r3
 801313a:	d004      	beq.n	8013146 <__swbuf_r+0x6e>
 801313c:	89a3      	ldrh	r3, [r4, #12]
 801313e:	07db      	lsls	r3, r3, #31
 8013140:	d5e1      	bpl.n	8013106 <__swbuf_r+0x2e>
 8013142:	2e0a      	cmp	r6, #10
 8013144:	d1df      	bne.n	8013106 <__swbuf_r+0x2e>
 8013146:	4621      	mov	r1, r4
 8013148:	4628      	mov	r0, r5
 801314a:	f7ff fda1 	bl	8012c90 <_fflush_r>
 801314e:	2800      	cmp	r0, #0
 8013150:	d0d9      	beq.n	8013106 <__swbuf_r+0x2e>
 8013152:	e7d6      	b.n	8013102 <__swbuf_r+0x2a>

08013154 <__swsetup_r>:
 8013154:	b538      	push	{r3, r4, r5, lr}
 8013156:	4b29      	ldr	r3, [pc, #164]	@ (80131fc <__swsetup_r+0xa8>)
 8013158:	4605      	mov	r5, r0
 801315a:	6818      	ldr	r0, [r3, #0]
 801315c:	460c      	mov	r4, r1
 801315e:	b118      	cbz	r0, 8013168 <__swsetup_r+0x14>
 8013160:	6a03      	ldr	r3, [r0, #32]
 8013162:	b90b      	cbnz	r3, 8013168 <__swsetup_r+0x14>
 8013164:	f7fe f858 	bl	8011218 <__sinit>
 8013168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801316c:	0719      	lsls	r1, r3, #28
 801316e:	d422      	bmi.n	80131b6 <__swsetup_r+0x62>
 8013170:	06da      	lsls	r2, r3, #27
 8013172:	d407      	bmi.n	8013184 <__swsetup_r+0x30>
 8013174:	2209      	movs	r2, #9
 8013176:	602a      	str	r2, [r5, #0]
 8013178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801317c:	81a3      	strh	r3, [r4, #12]
 801317e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013182:	e033      	b.n	80131ec <__swsetup_r+0x98>
 8013184:	0758      	lsls	r0, r3, #29
 8013186:	d512      	bpl.n	80131ae <__swsetup_r+0x5a>
 8013188:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801318a:	b141      	cbz	r1, 801319e <__swsetup_r+0x4a>
 801318c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013190:	4299      	cmp	r1, r3
 8013192:	d002      	beq.n	801319a <__swsetup_r+0x46>
 8013194:	4628      	mov	r0, r5
 8013196:	f7fe ffd3 	bl	8012140 <_free_r>
 801319a:	2300      	movs	r3, #0
 801319c:	6363      	str	r3, [r4, #52]	@ 0x34
 801319e:	89a3      	ldrh	r3, [r4, #12]
 80131a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80131a4:	81a3      	strh	r3, [r4, #12]
 80131a6:	2300      	movs	r3, #0
 80131a8:	6063      	str	r3, [r4, #4]
 80131aa:	6923      	ldr	r3, [r4, #16]
 80131ac:	6023      	str	r3, [r4, #0]
 80131ae:	89a3      	ldrh	r3, [r4, #12]
 80131b0:	f043 0308 	orr.w	r3, r3, #8
 80131b4:	81a3      	strh	r3, [r4, #12]
 80131b6:	6923      	ldr	r3, [r4, #16]
 80131b8:	b94b      	cbnz	r3, 80131ce <__swsetup_r+0x7a>
 80131ba:	89a3      	ldrh	r3, [r4, #12]
 80131bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80131c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80131c4:	d003      	beq.n	80131ce <__swsetup_r+0x7a>
 80131c6:	4621      	mov	r1, r4
 80131c8:	4628      	mov	r0, r5
 80131ca:	f000 f883 	bl	80132d4 <__smakebuf_r>
 80131ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131d2:	f013 0201 	ands.w	r2, r3, #1
 80131d6:	d00a      	beq.n	80131ee <__swsetup_r+0x9a>
 80131d8:	2200      	movs	r2, #0
 80131da:	60a2      	str	r2, [r4, #8]
 80131dc:	6962      	ldr	r2, [r4, #20]
 80131de:	4252      	negs	r2, r2
 80131e0:	61a2      	str	r2, [r4, #24]
 80131e2:	6922      	ldr	r2, [r4, #16]
 80131e4:	b942      	cbnz	r2, 80131f8 <__swsetup_r+0xa4>
 80131e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80131ea:	d1c5      	bne.n	8013178 <__swsetup_r+0x24>
 80131ec:	bd38      	pop	{r3, r4, r5, pc}
 80131ee:	0799      	lsls	r1, r3, #30
 80131f0:	bf58      	it	pl
 80131f2:	6962      	ldrpl	r2, [r4, #20]
 80131f4:	60a2      	str	r2, [r4, #8]
 80131f6:	e7f4      	b.n	80131e2 <__swsetup_r+0x8e>
 80131f8:	2000      	movs	r0, #0
 80131fa:	e7f7      	b.n	80131ec <__swsetup_r+0x98>
 80131fc:	20000138 	.word	0x20000138

08013200 <_raise_r>:
 8013200:	291f      	cmp	r1, #31
 8013202:	b538      	push	{r3, r4, r5, lr}
 8013204:	4605      	mov	r5, r0
 8013206:	460c      	mov	r4, r1
 8013208:	d904      	bls.n	8013214 <_raise_r+0x14>
 801320a:	2316      	movs	r3, #22
 801320c:	6003      	str	r3, [r0, #0]
 801320e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013212:	bd38      	pop	{r3, r4, r5, pc}
 8013214:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013216:	b112      	cbz	r2, 801321e <_raise_r+0x1e>
 8013218:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801321c:	b94b      	cbnz	r3, 8013232 <_raise_r+0x32>
 801321e:	4628      	mov	r0, r5
 8013220:	f000 f830 	bl	8013284 <_getpid_r>
 8013224:	4622      	mov	r2, r4
 8013226:	4601      	mov	r1, r0
 8013228:	4628      	mov	r0, r5
 801322a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801322e:	f000 b817 	b.w	8013260 <_kill_r>
 8013232:	2b01      	cmp	r3, #1
 8013234:	d00a      	beq.n	801324c <_raise_r+0x4c>
 8013236:	1c59      	adds	r1, r3, #1
 8013238:	d103      	bne.n	8013242 <_raise_r+0x42>
 801323a:	2316      	movs	r3, #22
 801323c:	6003      	str	r3, [r0, #0]
 801323e:	2001      	movs	r0, #1
 8013240:	e7e7      	b.n	8013212 <_raise_r+0x12>
 8013242:	2100      	movs	r1, #0
 8013244:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013248:	4620      	mov	r0, r4
 801324a:	4798      	blx	r3
 801324c:	2000      	movs	r0, #0
 801324e:	e7e0      	b.n	8013212 <_raise_r+0x12>

08013250 <raise>:
 8013250:	4b02      	ldr	r3, [pc, #8]	@ (801325c <raise+0xc>)
 8013252:	4601      	mov	r1, r0
 8013254:	6818      	ldr	r0, [r3, #0]
 8013256:	f7ff bfd3 	b.w	8013200 <_raise_r>
 801325a:	bf00      	nop
 801325c:	20000138 	.word	0x20000138

08013260 <_kill_r>:
 8013260:	b538      	push	{r3, r4, r5, lr}
 8013262:	4d07      	ldr	r5, [pc, #28]	@ (8013280 <_kill_r+0x20>)
 8013264:	2300      	movs	r3, #0
 8013266:	4604      	mov	r4, r0
 8013268:	4608      	mov	r0, r1
 801326a:	4611      	mov	r1, r2
 801326c:	602b      	str	r3, [r5, #0]
 801326e:	f7ef fe81 	bl	8002f74 <_kill>
 8013272:	1c43      	adds	r3, r0, #1
 8013274:	d102      	bne.n	801327c <_kill_r+0x1c>
 8013276:	682b      	ldr	r3, [r5, #0]
 8013278:	b103      	cbz	r3, 801327c <_kill_r+0x1c>
 801327a:	6023      	str	r3, [r4, #0]
 801327c:	bd38      	pop	{r3, r4, r5, pc}
 801327e:	bf00      	nop
 8013280:	200023f4 	.word	0x200023f4

08013284 <_getpid_r>:
 8013284:	f7ef be6e 	b.w	8002f64 <_getpid>

08013288 <__swhatbuf_r>:
 8013288:	b570      	push	{r4, r5, r6, lr}
 801328a:	460c      	mov	r4, r1
 801328c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013290:	2900      	cmp	r1, #0
 8013292:	b096      	sub	sp, #88	@ 0x58
 8013294:	4615      	mov	r5, r2
 8013296:	461e      	mov	r6, r3
 8013298:	da0d      	bge.n	80132b6 <__swhatbuf_r+0x2e>
 801329a:	89a3      	ldrh	r3, [r4, #12]
 801329c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80132a0:	f04f 0100 	mov.w	r1, #0
 80132a4:	bf14      	ite	ne
 80132a6:	2340      	movne	r3, #64	@ 0x40
 80132a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80132ac:	2000      	movs	r0, #0
 80132ae:	6031      	str	r1, [r6, #0]
 80132b0:	602b      	str	r3, [r5, #0]
 80132b2:	b016      	add	sp, #88	@ 0x58
 80132b4:	bd70      	pop	{r4, r5, r6, pc}
 80132b6:	466a      	mov	r2, sp
 80132b8:	f000 f848 	bl	801334c <_fstat_r>
 80132bc:	2800      	cmp	r0, #0
 80132be:	dbec      	blt.n	801329a <__swhatbuf_r+0x12>
 80132c0:	9901      	ldr	r1, [sp, #4]
 80132c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80132c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80132ca:	4259      	negs	r1, r3
 80132cc:	4159      	adcs	r1, r3
 80132ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80132d2:	e7eb      	b.n	80132ac <__swhatbuf_r+0x24>

080132d4 <__smakebuf_r>:
 80132d4:	898b      	ldrh	r3, [r1, #12]
 80132d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80132d8:	079d      	lsls	r5, r3, #30
 80132da:	4606      	mov	r6, r0
 80132dc:	460c      	mov	r4, r1
 80132de:	d507      	bpl.n	80132f0 <__smakebuf_r+0x1c>
 80132e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80132e4:	6023      	str	r3, [r4, #0]
 80132e6:	6123      	str	r3, [r4, #16]
 80132e8:	2301      	movs	r3, #1
 80132ea:	6163      	str	r3, [r4, #20]
 80132ec:	b003      	add	sp, #12
 80132ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132f0:	ab01      	add	r3, sp, #4
 80132f2:	466a      	mov	r2, sp
 80132f4:	f7ff ffc8 	bl	8013288 <__swhatbuf_r>
 80132f8:	9f00      	ldr	r7, [sp, #0]
 80132fa:	4605      	mov	r5, r0
 80132fc:	4639      	mov	r1, r7
 80132fe:	4630      	mov	r0, r6
 8013300:	f7fd fa1a 	bl	8010738 <_malloc_r>
 8013304:	b948      	cbnz	r0, 801331a <__smakebuf_r+0x46>
 8013306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801330a:	059a      	lsls	r2, r3, #22
 801330c:	d4ee      	bmi.n	80132ec <__smakebuf_r+0x18>
 801330e:	f023 0303 	bic.w	r3, r3, #3
 8013312:	f043 0302 	orr.w	r3, r3, #2
 8013316:	81a3      	strh	r3, [r4, #12]
 8013318:	e7e2      	b.n	80132e0 <__smakebuf_r+0xc>
 801331a:	89a3      	ldrh	r3, [r4, #12]
 801331c:	6020      	str	r0, [r4, #0]
 801331e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013322:	81a3      	strh	r3, [r4, #12]
 8013324:	9b01      	ldr	r3, [sp, #4]
 8013326:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801332a:	b15b      	cbz	r3, 8013344 <__smakebuf_r+0x70>
 801332c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013330:	4630      	mov	r0, r6
 8013332:	f000 f81d 	bl	8013370 <_isatty_r>
 8013336:	b128      	cbz	r0, 8013344 <__smakebuf_r+0x70>
 8013338:	89a3      	ldrh	r3, [r4, #12]
 801333a:	f023 0303 	bic.w	r3, r3, #3
 801333e:	f043 0301 	orr.w	r3, r3, #1
 8013342:	81a3      	strh	r3, [r4, #12]
 8013344:	89a3      	ldrh	r3, [r4, #12]
 8013346:	431d      	orrs	r5, r3
 8013348:	81a5      	strh	r5, [r4, #12]
 801334a:	e7cf      	b.n	80132ec <__smakebuf_r+0x18>

0801334c <_fstat_r>:
 801334c:	b538      	push	{r3, r4, r5, lr}
 801334e:	4d07      	ldr	r5, [pc, #28]	@ (801336c <_fstat_r+0x20>)
 8013350:	2300      	movs	r3, #0
 8013352:	4604      	mov	r4, r0
 8013354:	4608      	mov	r0, r1
 8013356:	4611      	mov	r1, r2
 8013358:	602b      	str	r3, [r5, #0]
 801335a:	f7ef fe6b 	bl	8003034 <_fstat>
 801335e:	1c43      	adds	r3, r0, #1
 8013360:	d102      	bne.n	8013368 <_fstat_r+0x1c>
 8013362:	682b      	ldr	r3, [r5, #0]
 8013364:	b103      	cbz	r3, 8013368 <_fstat_r+0x1c>
 8013366:	6023      	str	r3, [r4, #0]
 8013368:	bd38      	pop	{r3, r4, r5, pc}
 801336a:	bf00      	nop
 801336c:	200023f4 	.word	0x200023f4

08013370 <_isatty_r>:
 8013370:	b538      	push	{r3, r4, r5, lr}
 8013372:	4d06      	ldr	r5, [pc, #24]	@ (801338c <_isatty_r+0x1c>)
 8013374:	2300      	movs	r3, #0
 8013376:	4604      	mov	r4, r0
 8013378:	4608      	mov	r0, r1
 801337a:	602b      	str	r3, [r5, #0]
 801337c:	f7ef fe6a 	bl	8003054 <_isatty>
 8013380:	1c43      	adds	r3, r0, #1
 8013382:	d102      	bne.n	801338a <_isatty_r+0x1a>
 8013384:	682b      	ldr	r3, [r5, #0]
 8013386:	b103      	cbz	r3, 801338a <_isatty_r+0x1a>
 8013388:	6023      	str	r3, [r4, #0]
 801338a:	bd38      	pop	{r3, r4, r5, pc}
 801338c:	200023f4 	.word	0x200023f4

08013390 <atan2>:
 8013390:	f000 baaa 	b.w	80138e8 <__ieee754_atan2>

08013394 <sqrt>:
 8013394:	b538      	push	{r3, r4, r5, lr}
 8013396:	ed2d 8b02 	vpush	{d8}
 801339a:	ec55 4b10 	vmov	r4, r5, d0
 801339e:	f000 f9c7 	bl	8013730 <__ieee754_sqrt>
 80133a2:	4622      	mov	r2, r4
 80133a4:	462b      	mov	r3, r5
 80133a6:	4620      	mov	r0, r4
 80133a8:	4629      	mov	r1, r5
 80133aa:	eeb0 8a40 	vmov.f32	s16, s0
 80133ae:	eef0 8a60 	vmov.f32	s17, s1
 80133b2:	f7ed fbc3 	bl	8000b3c <__aeabi_dcmpun>
 80133b6:	b990      	cbnz	r0, 80133de <sqrt+0x4a>
 80133b8:	2200      	movs	r2, #0
 80133ba:	2300      	movs	r3, #0
 80133bc:	4620      	mov	r0, r4
 80133be:	4629      	mov	r1, r5
 80133c0:	f7ed fb94 	bl	8000aec <__aeabi_dcmplt>
 80133c4:	b158      	cbz	r0, 80133de <sqrt+0x4a>
 80133c6:	f7fe f831 	bl	801142c <__errno>
 80133ca:	2321      	movs	r3, #33	@ 0x21
 80133cc:	6003      	str	r3, [r0, #0]
 80133ce:	2200      	movs	r2, #0
 80133d0:	2300      	movs	r3, #0
 80133d2:	4610      	mov	r0, r2
 80133d4:	4619      	mov	r1, r3
 80133d6:	f7ed fa41 	bl	800085c <__aeabi_ddiv>
 80133da:	ec41 0b18 	vmov	d8, r0, r1
 80133de:	eeb0 0a48 	vmov.f32	s0, s16
 80133e2:	eef0 0a68 	vmov.f32	s1, s17
 80133e6:	ecbd 8b02 	vpop	{d8}
 80133ea:	bd38      	pop	{r3, r4, r5, pc}
 80133ec:	0000      	movs	r0, r0
	...

080133f0 <atan>:
 80133f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f4:	ec55 4b10 	vmov	r4, r5, d0
 80133f8:	4bbf      	ldr	r3, [pc, #764]	@ (80136f8 <atan+0x308>)
 80133fa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80133fe:	429e      	cmp	r6, r3
 8013400:	46ab      	mov	fp, r5
 8013402:	d918      	bls.n	8013436 <atan+0x46>
 8013404:	4bbd      	ldr	r3, [pc, #756]	@ (80136fc <atan+0x30c>)
 8013406:	429e      	cmp	r6, r3
 8013408:	d801      	bhi.n	801340e <atan+0x1e>
 801340a:	d109      	bne.n	8013420 <atan+0x30>
 801340c:	b144      	cbz	r4, 8013420 <atan+0x30>
 801340e:	4622      	mov	r2, r4
 8013410:	462b      	mov	r3, r5
 8013412:	4620      	mov	r0, r4
 8013414:	4629      	mov	r1, r5
 8013416:	f7ec ff41 	bl	800029c <__adddf3>
 801341a:	4604      	mov	r4, r0
 801341c:	460d      	mov	r5, r1
 801341e:	e006      	b.n	801342e <atan+0x3e>
 8013420:	f1bb 0f00 	cmp.w	fp, #0
 8013424:	f340 812b 	ble.w	801367e <atan+0x28e>
 8013428:	a597      	add	r5, pc, #604	@ (adr r5, 8013688 <atan+0x298>)
 801342a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801342e:	ec45 4b10 	vmov	d0, r4, r5
 8013432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013436:	4bb2      	ldr	r3, [pc, #712]	@ (8013700 <atan+0x310>)
 8013438:	429e      	cmp	r6, r3
 801343a:	d813      	bhi.n	8013464 <atan+0x74>
 801343c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8013440:	429e      	cmp	r6, r3
 8013442:	d80c      	bhi.n	801345e <atan+0x6e>
 8013444:	a392      	add	r3, pc, #584	@ (adr r3, 8013690 <atan+0x2a0>)
 8013446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801344a:	4620      	mov	r0, r4
 801344c:	4629      	mov	r1, r5
 801344e:	f7ec ff25 	bl	800029c <__adddf3>
 8013452:	4bac      	ldr	r3, [pc, #688]	@ (8013704 <atan+0x314>)
 8013454:	2200      	movs	r2, #0
 8013456:	f7ed fb67 	bl	8000b28 <__aeabi_dcmpgt>
 801345a:	2800      	cmp	r0, #0
 801345c:	d1e7      	bne.n	801342e <atan+0x3e>
 801345e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013462:	e029      	b.n	80134b8 <atan+0xc8>
 8013464:	f000 f95c 	bl	8013720 <fabs>
 8013468:	4ba7      	ldr	r3, [pc, #668]	@ (8013708 <atan+0x318>)
 801346a:	429e      	cmp	r6, r3
 801346c:	ec55 4b10 	vmov	r4, r5, d0
 8013470:	f200 80bc 	bhi.w	80135ec <atan+0x1fc>
 8013474:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013478:	429e      	cmp	r6, r3
 801347a:	f200 809e 	bhi.w	80135ba <atan+0x1ca>
 801347e:	4622      	mov	r2, r4
 8013480:	462b      	mov	r3, r5
 8013482:	4620      	mov	r0, r4
 8013484:	4629      	mov	r1, r5
 8013486:	f7ec ff09 	bl	800029c <__adddf3>
 801348a:	4b9e      	ldr	r3, [pc, #632]	@ (8013704 <atan+0x314>)
 801348c:	2200      	movs	r2, #0
 801348e:	f7ec ff03 	bl	8000298 <__aeabi_dsub>
 8013492:	2200      	movs	r2, #0
 8013494:	4606      	mov	r6, r0
 8013496:	460f      	mov	r7, r1
 8013498:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801349c:	4620      	mov	r0, r4
 801349e:	4629      	mov	r1, r5
 80134a0:	f7ec fefc 	bl	800029c <__adddf3>
 80134a4:	4602      	mov	r2, r0
 80134a6:	460b      	mov	r3, r1
 80134a8:	4630      	mov	r0, r6
 80134aa:	4639      	mov	r1, r7
 80134ac:	f7ed f9d6 	bl	800085c <__aeabi_ddiv>
 80134b0:	f04f 0a00 	mov.w	sl, #0
 80134b4:	4604      	mov	r4, r0
 80134b6:	460d      	mov	r5, r1
 80134b8:	4622      	mov	r2, r4
 80134ba:	462b      	mov	r3, r5
 80134bc:	4620      	mov	r0, r4
 80134be:	4629      	mov	r1, r5
 80134c0:	f7ed f8a2 	bl	8000608 <__aeabi_dmul>
 80134c4:	4602      	mov	r2, r0
 80134c6:	460b      	mov	r3, r1
 80134c8:	4680      	mov	r8, r0
 80134ca:	4689      	mov	r9, r1
 80134cc:	f7ed f89c 	bl	8000608 <__aeabi_dmul>
 80134d0:	a371      	add	r3, pc, #452	@ (adr r3, 8013698 <atan+0x2a8>)
 80134d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d6:	4606      	mov	r6, r0
 80134d8:	460f      	mov	r7, r1
 80134da:	f7ed f895 	bl	8000608 <__aeabi_dmul>
 80134de:	a370      	add	r3, pc, #448	@ (adr r3, 80136a0 <atan+0x2b0>)
 80134e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e4:	f7ec feda 	bl	800029c <__adddf3>
 80134e8:	4632      	mov	r2, r6
 80134ea:	463b      	mov	r3, r7
 80134ec:	f7ed f88c 	bl	8000608 <__aeabi_dmul>
 80134f0:	a36d      	add	r3, pc, #436	@ (adr r3, 80136a8 <atan+0x2b8>)
 80134f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f6:	f7ec fed1 	bl	800029c <__adddf3>
 80134fa:	4632      	mov	r2, r6
 80134fc:	463b      	mov	r3, r7
 80134fe:	f7ed f883 	bl	8000608 <__aeabi_dmul>
 8013502:	a36b      	add	r3, pc, #428	@ (adr r3, 80136b0 <atan+0x2c0>)
 8013504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013508:	f7ec fec8 	bl	800029c <__adddf3>
 801350c:	4632      	mov	r2, r6
 801350e:	463b      	mov	r3, r7
 8013510:	f7ed f87a 	bl	8000608 <__aeabi_dmul>
 8013514:	a368      	add	r3, pc, #416	@ (adr r3, 80136b8 <atan+0x2c8>)
 8013516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351a:	f7ec febf 	bl	800029c <__adddf3>
 801351e:	4632      	mov	r2, r6
 8013520:	463b      	mov	r3, r7
 8013522:	f7ed f871 	bl	8000608 <__aeabi_dmul>
 8013526:	a366      	add	r3, pc, #408	@ (adr r3, 80136c0 <atan+0x2d0>)
 8013528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801352c:	f7ec feb6 	bl	800029c <__adddf3>
 8013530:	4642      	mov	r2, r8
 8013532:	464b      	mov	r3, r9
 8013534:	f7ed f868 	bl	8000608 <__aeabi_dmul>
 8013538:	a363      	add	r3, pc, #396	@ (adr r3, 80136c8 <atan+0x2d8>)
 801353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353e:	4680      	mov	r8, r0
 8013540:	4689      	mov	r9, r1
 8013542:	4630      	mov	r0, r6
 8013544:	4639      	mov	r1, r7
 8013546:	f7ed f85f 	bl	8000608 <__aeabi_dmul>
 801354a:	a361      	add	r3, pc, #388	@ (adr r3, 80136d0 <atan+0x2e0>)
 801354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013550:	f7ec fea2 	bl	8000298 <__aeabi_dsub>
 8013554:	4632      	mov	r2, r6
 8013556:	463b      	mov	r3, r7
 8013558:	f7ed f856 	bl	8000608 <__aeabi_dmul>
 801355c:	a35e      	add	r3, pc, #376	@ (adr r3, 80136d8 <atan+0x2e8>)
 801355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013562:	f7ec fe99 	bl	8000298 <__aeabi_dsub>
 8013566:	4632      	mov	r2, r6
 8013568:	463b      	mov	r3, r7
 801356a:	f7ed f84d 	bl	8000608 <__aeabi_dmul>
 801356e:	a35c      	add	r3, pc, #368	@ (adr r3, 80136e0 <atan+0x2f0>)
 8013570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013574:	f7ec fe90 	bl	8000298 <__aeabi_dsub>
 8013578:	4632      	mov	r2, r6
 801357a:	463b      	mov	r3, r7
 801357c:	f7ed f844 	bl	8000608 <__aeabi_dmul>
 8013580:	a359      	add	r3, pc, #356	@ (adr r3, 80136e8 <atan+0x2f8>)
 8013582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013586:	f7ec fe87 	bl	8000298 <__aeabi_dsub>
 801358a:	4632      	mov	r2, r6
 801358c:	463b      	mov	r3, r7
 801358e:	f7ed f83b 	bl	8000608 <__aeabi_dmul>
 8013592:	4602      	mov	r2, r0
 8013594:	460b      	mov	r3, r1
 8013596:	4640      	mov	r0, r8
 8013598:	4649      	mov	r1, r9
 801359a:	f7ec fe7f 	bl	800029c <__adddf3>
 801359e:	4622      	mov	r2, r4
 80135a0:	462b      	mov	r3, r5
 80135a2:	f7ed f831 	bl	8000608 <__aeabi_dmul>
 80135a6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80135aa:	4602      	mov	r2, r0
 80135ac:	460b      	mov	r3, r1
 80135ae:	d148      	bne.n	8013642 <atan+0x252>
 80135b0:	4620      	mov	r0, r4
 80135b2:	4629      	mov	r1, r5
 80135b4:	f7ec fe70 	bl	8000298 <__aeabi_dsub>
 80135b8:	e72f      	b.n	801341a <atan+0x2a>
 80135ba:	4b52      	ldr	r3, [pc, #328]	@ (8013704 <atan+0x314>)
 80135bc:	2200      	movs	r2, #0
 80135be:	4620      	mov	r0, r4
 80135c0:	4629      	mov	r1, r5
 80135c2:	f7ec fe69 	bl	8000298 <__aeabi_dsub>
 80135c6:	4b4f      	ldr	r3, [pc, #316]	@ (8013704 <atan+0x314>)
 80135c8:	4606      	mov	r6, r0
 80135ca:	460f      	mov	r7, r1
 80135cc:	2200      	movs	r2, #0
 80135ce:	4620      	mov	r0, r4
 80135d0:	4629      	mov	r1, r5
 80135d2:	f7ec fe63 	bl	800029c <__adddf3>
 80135d6:	4602      	mov	r2, r0
 80135d8:	460b      	mov	r3, r1
 80135da:	4630      	mov	r0, r6
 80135dc:	4639      	mov	r1, r7
 80135de:	f7ed f93d 	bl	800085c <__aeabi_ddiv>
 80135e2:	f04f 0a01 	mov.w	sl, #1
 80135e6:	4604      	mov	r4, r0
 80135e8:	460d      	mov	r5, r1
 80135ea:	e765      	b.n	80134b8 <atan+0xc8>
 80135ec:	4b47      	ldr	r3, [pc, #284]	@ (801370c <atan+0x31c>)
 80135ee:	429e      	cmp	r6, r3
 80135f0:	d21c      	bcs.n	801362c <atan+0x23c>
 80135f2:	4b47      	ldr	r3, [pc, #284]	@ (8013710 <atan+0x320>)
 80135f4:	2200      	movs	r2, #0
 80135f6:	4620      	mov	r0, r4
 80135f8:	4629      	mov	r1, r5
 80135fa:	f7ec fe4d 	bl	8000298 <__aeabi_dsub>
 80135fe:	4b44      	ldr	r3, [pc, #272]	@ (8013710 <atan+0x320>)
 8013600:	4606      	mov	r6, r0
 8013602:	460f      	mov	r7, r1
 8013604:	2200      	movs	r2, #0
 8013606:	4620      	mov	r0, r4
 8013608:	4629      	mov	r1, r5
 801360a:	f7ec fffd 	bl	8000608 <__aeabi_dmul>
 801360e:	4b3d      	ldr	r3, [pc, #244]	@ (8013704 <atan+0x314>)
 8013610:	2200      	movs	r2, #0
 8013612:	f7ec fe43 	bl	800029c <__adddf3>
 8013616:	4602      	mov	r2, r0
 8013618:	460b      	mov	r3, r1
 801361a:	4630      	mov	r0, r6
 801361c:	4639      	mov	r1, r7
 801361e:	f7ed f91d 	bl	800085c <__aeabi_ddiv>
 8013622:	f04f 0a02 	mov.w	sl, #2
 8013626:	4604      	mov	r4, r0
 8013628:	460d      	mov	r5, r1
 801362a:	e745      	b.n	80134b8 <atan+0xc8>
 801362c:	4622      	mov	r2, r4
 801362e:	462b      	mov	r3, r5
 8013630:	4938      	ldr	r1, [pc, #224]	@ (8013714 <atan+0x324>)
 8013632:	2000      	movs	r0, #0
 8013634:	f7ed f912 	bl	800085c <__aeabi_ddiv>
 8013638:	f04f 0a03 	mov.w	sl, #3
 801363c:	4604      	mov	r4, r0
 801363e:	460d      	mov	r5, r1
 8013640:	e73a      	b.n	80134b8 <atan+0xc8>
 8013642:	4b35      	ldr	r3, [pc, #212]	@ (8013718 <atan+0x328>)
 8013644:	4e35      	ldr	r6, [pc, #212]	@ (801371c <atan+0x32c>)
 8013646:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364e:	f7ec fe23 	bl	8000298 <__aeabi_dsub>
 8013652:	4622      	mov	r2, r4
 8013654:	462b      	mov	r3, r5
 8013656:	f7ec fe1f 	bl	8000298 <__aeabi_dsub>
 801365a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801365e:	4602      	mov	r2, r0
 8013660:	460b      	mov	r3, r1
 8013662:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013666:	f7ec fe17 	bl	8000298 <__aeabi_dsub>
 801366a:	f1bb 0f00 	cmp.w	fp, #0
 801366e:	4604      	mov	r4, r0
 8013670:	460d      	mov	r5, r1
 8013672:	f6bf aedc 	bge.w	801342e <atan+0x3e>
 8013676:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801367a:	461d      	mov	r5, r3
 801367c:	e6d7      	b.n	801342e <atan+0x3e>
 801367e:	a51c      	add	r5, pc, #112	@ (adr r5, 80136f0 <atan+0x300>)
 8013680:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013684:	e6d3      	b.n	801342e <atan+0x3e>
 8013686:	bf00      	nop
 8013688:	54442d18 	.word	0x54442d18
 801368c:	3ff921fb 	.word	0x3ff921fb
 8013690:	8800759c 	.word	0x8800759c
 8013694:	7e37e43c 	.word	0x7e37e43c
 8013698:	e322da11 	.word	0xe322da11
 801369c:	3f90ad3a 	.word	0x3f90ad3a
 80136a0:	24760deb 	.word	0x24760deb
 80136a4:	3fa97b4b 	.word	0x3fa97b4b
 80136a8:	a0d03d51 	.word	0xa0d03d51
 80136ac:	3fb10d66 	.word	0x3fb10d66
 80136b0:	c54c206e 	.word	0xc54c206e
 80136b4:	3fb745cd 	.word	0x3fb745cd
 80136b8:	920083ff 	.word	0x920083ff
 80136bc:	3fc24924 	.word	0x3fc24924
 80136c0:	5555550d 	.word	0x5555550d
 80136c4:	3fd55555 	.word	0x3fd55555
 80136c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80136cc:	bfa2b444 	.word	0xbfa2b444
 80136d0:	52defd9a 	.word	0x52defd9a
 80136d4:	3fadde2d 	.word	0x3fadde2d
 80136d8:	af749a6d 	.word	0xaf749a6d
 80136dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80136e0:	fe231671 	.word	0xfe231671
 80136e4:	3fbc71c6 	.word	0x3fbc71c6
 80136e8:	9998ebc4 	.word	0x9998ebc4
 80136ec:	3fc99999 	.word	0x3fc99999
 80136f0:	54442d18 	.word	0x54442d18
 80136f4:	bff921fb 	.word	0xbff921fb
 80136f8:	440fffff 	.word	0x440fffff
 80136fc:	7ff00000 	.word	0x7ff00000
 8013700:	3fdbffff 	.word	0x3fdbffff
 8013704:	3ff00000 	.word	0x3ff00000
 8013708:	3ff2ffff 	.word	0x3ff2ffff
 801370c:	40038000 	.word	0x40038000
 8013710:	3ff80000 	.word	0x3ff80000
 8013714:	bff00000 	.word	0xbff00000
 8013718:	080141d0 	.word	0x080141d0
 801371c:	080141f0 	.word	0x080141f0

08013720 <fabs>:
 8013720:	ec51 0b10 	vmov	r0, r1, d0
 8013724:	4602      	mov	r2, r0
 8013726:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801372a:	ec43 2b10 	vmov	d0, r2, r3
 801372e:	4770      	bx	lr

08013730 <__ieee754_sqrt>:
 8013730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013734:	4a68      	ldr	r2, [pc, #416]	@ (80138d8 <__ieee754_sqrt+0x1a8>)
 8013736:	ec55 4b10 	vmov	r4, r5, d0
 801373a:	43aa      	bics	r2, r5
 801373c:	462b      	mov	r3, r5
 801373e:	4621      	mov	r1, r4
 8013740:	d110      	bne.n	8013764 <__ieee754_sqrt+0x34>
 8013742:	4622      	mov	r2, r4
 8013744:	4620      	mov	r0, r4
 8013746:	4629      	mov	r1, r5
 8013748:	f7ec ff5e 	bl	8000608 <__aeabi_dmul>
 801374c:	4602      	mov	r2, r0
 801374e:	460b      	mov	r3, r1
 8013750:	4620      	mov	r0, r4
 8013752:	4629      	mov	r1, r5
 8013754:	f7ec fda2 	bl	800029c <__adddf3>
 8013758:	4604      	mov	r4, r0
 801375a:	460d      	mov	r5, r1
 801375c:	ec45 4b10 	vmov	d0, r4, r5
 8013760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013764:	2d00      	cmp	r5, #0
 8013766:	dc0e      	bgt.n	8013786 <__ieee754_sqrt+0x56>
 8013768:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801376c:	4322      	orrs	r2, r4
 801376e:	d0f5      	beq.n	801375c <__ieee754_sqrt+0x2c>
 8013770:	b19d      	cbz	r5, 801379a <__ieee754_sqrt+0x6a>
 8013772:	4622      	mov	r2, r4
 8013774:	4620      	mov	r0, r4
 8013776:	4629      	mov	r1, r5
 8013778:	f7ec fd8e 	bl	8000298 <__aeabi_dsub>
 801377c:	4602      	mov	r2, r0
 801377e:	460b      	mov	r3, r1
 8013780:	f7ed f86c 	bl	800085c <__aeabi_ddiv>
 8013784:	e7e8      	b.n	8013758 <__ieee754_sqrt+0x28>
 8013786:	152a      	asrs	r2, r5, #20
 8013788:	d115      	bne.n	80137b6 <__ieee754_sqrt+0x86>
 801378a:	2000      	movs	r0, #0
 801378c:	e009      	b.n	80137a2 <__ieee754_sqrt+0x72>
 801378e:	0acb      	lsrs	r3, r1, #11
 8013790:	3a15      	subs	r2, #21
 8013792:	0549      	lsls	r1, r1, #21
 8013794:	2b00      	cmp	r3, #0
 8013796:	d0fa      	beq.n	801378e <__ieee754_sqrt+0x5e>
 8013798:	e7f7      	b.n	801378a <__ieee754_sqrt+0x5a>
 801379a:	462a      	mov	r2, r5
 801379c:	e7fa      	b.n	8013794 <__ieee754_sqrt+0x64>
 801379e:	005b      	lsls	r3, r3, #1
 80137a0:	3001      	adds	r0, #1
 80137a2:	02dc      	lsls	r4, r3, #11
 80137a4:	d5fb      	bpl.n	801379e <__ieee754_sqrt+0x6e>
 80137a6:	1e44      	subs	r4, r0, #1
 80137a8:	1b12      	subs	r2, r2, r4
 80137aa:	f1c0 0420 	rsb	r4, r0, #32
 80137ae:	fa21 f404 	lsr.w	r4, r1, r4
 80137b2:	4323      	orrs	r3, r4
 80137b4:	4081      	lsls	r1, r0
 80137b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80137be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80137c2:	07d2      	lsls	r2, r2, #31
 80137c4:	bf5c      	itt	pl
 80137c6:	005b      	lslpl	r3, r3, #1
 80137c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80137cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80137d0:	bf58      	it	pl
 80137d2:	0049      	lslpl	r1, r1, #1
 80137d4:	2600      	movs	r6, #0
 80137d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80137da:	106d      	asrs	r5, r5, #1
 80137dc:	0049      	lsls	r1, r1, #1
 80137de:	2016      	movs	r0, #22
 80137e0:	4632      	mov	r2, r6
 80137e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80137e6:	1917      	adds	r7, r2, r4
 80137e8:	429f      	cmp	r7, r3
 80137ea:	bfde      	ittt	le
 80137ec:	193a      	addle	r2, r7, r4
 80137ee:	1bdb      	suble	r3, r3, r7
 80137f0:	1936      	addle	r6, r6, r4
 80137f2:	0fcf      	lsrs	r7, r1, #31
 80137f4:	3801      	subs	r0, #1
 80137f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80137fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80137fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013802:	d1f0      	bne.n	80137e6 <__ieee754_sqrt+0xb6>
 8013804:	4604      	mov	r4, r0
 8013806:	2720      	movs	r7, #32
 8013808:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801380c:	429a      	cmp	r2, r3
 801380e:	eb00 0e0c 	add.w	lr, r0, ip
 8013812:	db02      	blt.n	801381a <__ieee754_sqrt+0xea>
 8013814:	d113      	bne.n	801383e <__ieee754_sqrt+0x10e>
 8013816:	458e      	cmp	lr, r1
 8013818:	d811      	bhi.n	801383e <__ieee754_sqrt+0x10e>
 801381a:	f1be 0f00 	cmp.w	lr, #0
 801381e:	eb0e 000c 	add.w	r0, lr, ip
 8013822:	da42      	bge.n	80138aa <__ieee754_sqrt+0x17a>
 8013824:	2800      	cmp	r0, #0
 8013826:	db40      	blt.n	80138aa <__ieee754_sqrt+0x17a>
 8013828:	f102 0801 	add.w	r8, r2, #1
 801382c:	1a9b      	subs	r3, r3, r2
 801382e:	458e      	cmp	lr, r1
 8013830:	bf88      	it	hi
 8013832:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8013836:	eba1 010e 	sub.w	r1, r1, lr
 801383a:	4464      	add	r4, ip
 801383c:	4642      	mov	r2, r8
 801383e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013842:	3f01      	subs	r7, #1
 8013844:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013848:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801384c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013850:	d1dc      	bne.n	801380c <__ieee754_sqrt+0xdc>
 8013852:	4319      	orrs	r1, r3
 8013854:	d01b      	beq.n	801388e <__ieee754_sqrt+0x15e>
 8013856:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80138dc <__ieee754_sqrt+0x1ac>
 801385a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80138e0 <__ieee754_sqrt+0x1b0>
 801385e:	e9da 0100 	ldrd	r0, r1, [sl]
 8013862:	e9db 2300 	ldrd	r2, r3, [fp]
 8013866:	f7ec fd17 	bl	8000298 <__aeabi_dsub>
 801386a:	e9da 8900 	ldrd	r8, r9, [sl]
 801386e:	4602      	mov	r2, r0
 8013870:	460b      	mov	r3, r1
 8013872:	4640      	mov	r0, r8
 8013874:	4649      	mov	r1, r9
 8013876:	f7ed f943 	bl	8000b00 <__aeabi_dcmple>
 801387a:	b140      	cbz	r0, 801388e <__ieee754_sqrt+0x15e>
 801387c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8013880:	e9da 0100 	ldrd	r0, r1, [sl]
 8013884:	e9db 2300 	ldrd	r2, r3, [fp]
 8013888:	d111      	bne.n	80138ae <__ieee754_sqrt+0x17e>
 801388a:	3601      	adds	r6, #1
 801388c:	463c      	mov	r4, r7
 801388e:	1072      	asrs	r2, r6, #1
 8013890:	0863      	lsrs	r3, r4, #1
 8013892:	07f1      	lsls	r1, r6, #31
 8013894:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013898:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801389c:	bf48      	it	mi
 801389e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80138a2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80138a6:	4618      	mov	r0, r3
 80138a8:	e756      	b.n	8013758 <__ieee754_sqrt+0x28>
 80138aa:	4690      	mov	r8, r2
 80138ac:	e7be      	b.n	801382c <__ieee754_sqrt+0xfc>
 80138ae:	f7ec fcf5 	bl	800029c <__adddf3>
 80138b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80138b6:	4602      	mov	r2, r0
 80138b8:	460b      	mov	r3, r1
 80138ba:	4640      	mov	r0, r8
 80138bc:	4649      	mov	r1, r9
 80138be:	f7ed f915 	bl	8000aec <__aeabi_dcmplt>
 80138c2:	b120      	cbz	r0, 80138ce <__ieee754_sqrt+0x19e>
 80138c4:	1ca0      	adds	r0, r4, #2
 80138c6:	bf08      	it	eq
 80138c8:	3601      	addeq	r6, #1
 80138ca:	3402      	adds	r4, #2
 80138cc:	e7df      	b.n	801388e <__ieee754_sqrt+0x15e>
 80138ce:	1c63      	adds	r3, r4, #1
 80138d0:	f023 0401 	bic.w	r4, r3, #1
 80138d4:	e7db      	b.n	801388e <__ieee754_sqrt+0x15e>
 80138d6:	bf00      	nop
 80138d8:	7ff00000 	.word	0x7ff00000
 80138dc:	20000300 	.word	0x20000300
 80138e0:	200002f8 	.word	0x200002f8
 80138e4:	00000000 	.word	0x00000000

080138e8 <__ieee754_atan2>:
 80138e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138ec:	ec57 6b11 	vmov	r6, r7, d1
 80138f0:	4273      	negs	r3, r6
 80138f2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013a70 <__ieee754_atan2+0x188>
 80138f6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80138fa:	4333      	orrs	r3, r6
 80138fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013900:	4543      	cmp	r3, r8
 8013902:	ec51 0b10 	vmov	r0, r1, d0
 8013906:	4635      	mov	r5, r6
 8013908:	d809      	bhi.n	801391e <__ieee754_atan2+0x36>
 801390a:	4244      	negs	r4, r0
 801390c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013910:	4304      	orrs	r4, r0
 8013912:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013916:	4544      	cmp	r4, r8
 8013918:	468e      	mov	lr, r1
 801391a:	4681      	mov	r9, r0
 801391c:	d907      	bls.n	801392e <__ieee754_atan2+0x46>
 801391e:	4632      	mov	r2, r6
 8013920:	463b      	mov	r3, r7
 8013922:	f7ec fcbb 	bl	800029c <__adddf3>
 8013926:	ec41 0b10 	vmov	d0, r0, r1
 801392a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801392e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8013932:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8013936:	4334      	orrs	r4, r6
 8013938:	d103      	bne.n	8013942 <__ieee754_atan2+0x5a>
 801393a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801393e:	f7ff bd57 	b.w	80133f0 <atan>
 8013942:	17bc      	asrs	r4, r7, #30
 8013944:	f004 0402 	and.w	r4, r4, #2
 8013948:	ea53 0909 	orrs.w	r9, r3, r9
 801394c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013950:	d107      	bne.n	8013962 <__ieee754_atan2+0x7a>
 8013952:	2c02      	cmp	r4, #2
 8013954:	d05f      	beq.n	8013a16 <__ieee754_atan2+0x12e>
 8013956:	2c03      	cmp	r4, #3
 8013958:	d1e5      	bne.n	8013926 <__ieee754_atan2+0x3e>
 801395a:	a141      	add	r1, pc, #260	@ (adr r1, 8013a60 <__ieee754_atan2+0x178>)
 801395c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013960:	e7e1      	b.n	8013926 <__ieee754_atan2+0x3e>
 8013962:	4315      	orrs	r5, r2
 8013964:	d106      	bne.n	8013974 <__ieee754_atan2+0x8c>
 8013966:	f1be 0f00 	cmp.w	lr, #0
 801396a:	da5f      	bge.n	8013a2c <__ieee754_atan2+0x144>
 801396c:	a13e      	add	r1, pc, #248	@ (adr r1, 8013a68 <__ieee754_atan2+0x180>)
 801396e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013972:	e7d8      	b.n	8013926 <__ieee754_atan2+0x3e>
 8013974:	4542      	cmp	r2, r8
 8013976:	d10f      	bne.n	8013998 <__ieee754_atan2+0xb0>
 8013978:	4293      	cmp	r3, r2
 801397a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801397e:	d107      	bne.n	8013990 <__ieee754_atan2+0xa8>
 8013980:	2c02      	cmp	r4, #2
 8013982:	d84c      	bhi.n	8013a1e <__ieee754_atan2+0x136>
 8013984:	4b34      	ldr	r3, [pc, #208]	@ (8013a58 <__ieee754_atan2+0x170>)
 8013986:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801398a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801398e:	e7ca      	b.n	8013926 <__ieee754_atan2+0x3e>
 8013990:	2c02      	cmp	r4, #2
 8013992:	d848      	bhi.n	8013a26 <__ieee754_atan2+0x13e>
 8013994:	4b31      	ldr	r3, [pc, #196]	@ (8013a5c <__ieee754_atan2+0x174>)
 8013996:	e7f6      	b.n	8013986 <__ieee754_atan2+0x9e>
 8013998:	4543      	cmp	r3, r8
 801399a:	d0e4      	beq.n	8013966 <__ieee754_atan2+0x7e>
 801399c:	1a9b      	subs	r3, r3, r2
 801399e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80139a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80139a6:	da1e      	bge.n	80139e6 <__ieee754_atan2+0xfe>
 80139a8:	2f00      	cmp	r7, #0
 80139aa:	da01      	bge.n	80139b0 <__ieee754_atan2+0xc8>
 80139ac:	323c      	adds	r2, #60	@ 0x3c
 80139ae:	db1e      	blt.n	80139ee <__ieee754_atan2+0x106>
 80139b0:	4632      	mov	r2, r6
 80139b2:	463b      	mov	r3, r7
 80139b4:	f7ec ff52 	bl	800085c <__aeabi_ddiv>
 80139b8:	ec41 0b10 	vmov	d0, r0, r1
 80139bc:	f7ff feb0 	bl	8013720 <fabs>
 80139c0:	f7ff fd16 	bl	80133f0 <atan>
 80139c4:	ec51 0b10 	vmov	r0, r1, d0
 80139c8:	2c01      	cmp	r4, #1
 80139ca:	d013      	beq.n	80139f4 <__ieee754_atan2+0x10c>
 80139cc:	2c02      	cmp	r4, #2
 80139ce:	d015      	beq.n	80139fc <__ieee754_atan2+0x114>
 80139d0:	2c00      	cmp	r4, #0
 80139d2:	d0a8      	beq.n	8013926 <__ieee754_atan2+0x3e>
 80139d4:	a318      	add	r3, pc, #96	@ (adr r3, 8013a38 <__ieee754_atan2+0x150>)
 80139d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139da:	f7ec fc5d 	bl	8000298 <__aeabi_dsub>
 80139de:	a318      	add	r3, pc, #96	@ (adr r3, 8013a40 <__ieee754_atan2+0x158>)
 80139e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e4:	e014      	b.n	8013a10 <__ieee754_atan2+0x128>
 80139e6:	a118      	add	r1, pc, #96	@ (adr r1, 8013a48 <__ieee754_atan2+0x160>)
 80139e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139ec:	e7ec      	b.n	80139c8 <__ieee754_atan2+0xe0>
 80139ee:	2000      	movs	r0, #0
 80139f0:	2100      	movs	r1, #0
 80139f2:	e7e9      	b.n	80139c8 <__ieee754_atan2+0xe0>
 80139f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80139f8:	4619      	mov	r1, r3
 80139fa:	e794      	b.n	8013926 <__ieee754_atan2+0x3e>
 80139fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8013a38 <__ieee754_atan2+0x150>)
 80139fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a02:	f7ec fc49 	bl	8000298 <__aeabi_dsub>
 8013a06:	4602      	mov	r2, r0
 8013a08:	460b      	mov	r3, r1
 8013a0a:	a10d      	add	r1, pc, #52	@ (adr r1, 8013a40 <__ieee754_atan2+0x158>)
 8013a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a10:	f7ec fc42 	bl	8000298 <__aeabi_dsub>
 8013a14:	e787      	b.n	8013926 <__ieee754_atan2+0x3e>
 8013a16:	a10a      	add	r1, pc, #40	@ (adr r1, 8013a40 <__ieee754_atan2+0x158>)
 8013a18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a1c:	e783      	b.n	8013926 <__ieee754_atan2+0x3e>
 8013a1e:	a10c      	add	r1, pc, #48	@ (adr r1, 8013a50 <__ieee754_atan2+0x168>)
 8013a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a24:	e77f      	b.n	8013926 <__ieee754_atan2+0x3e>
 8013a26:	2000      	movs	r0, #0
 8013a28:	2100      	movs	r1, #0
 8013a2a:	e77c      	b.n	8013926 <__ieee754_atan2+0x3e>
 8013a2c:	a106      	add	r1, pc, #24	@ (adr r1, 8013a48 <__ieee754_atan2+0x160>)
 8013a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a32:	e778      	b.n	8013926 <__ieee754_atan2+0x3e>
 8013a34:	f3af 8000 	nop.w
 8013a38:	33145c07 	.word	0x33145c07
 8013a3c:	3ca1a626 	.word	0x3ca1a626
 8013a40:	54442d18 	.word	0x54442d18
 8013a44:	400921fb 	.word	0x400921fb
 8013a48:	54442d18 	.word	0x54442d18
 8013a4c:	3ff921fb 	.word	0x3ff921fb
 8013a50:	54442d18 	.word	0x54442d18
 8013a54:	3fe921fb 	.word	0x3fe921fb
 8013a58:	08014228 	.word	0x08014228
 8013a5c:	08014210 	.word	0x08014210
 8013a60:	54442d18 	.word	0x54442d18
 8013a64:	c00921fb 	.word	0xc00921fb
 8013a68:	54442d18 	.word	0x54442d18
 8013a6c:	bff921fb 	.word	0xbff921fb
 8013a70:	7ff00000 	.word	0x7ff00000

08013a74 <_init>:
 8013a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a76:	bf00      	nop
 8013a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a7a:	bc08      	pop	{r3}
 8013a7c:	469e      	mov	lr, r3
 8013a7e:	4770      	bx	lr

08013a80 <_fini>:
 8013a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a82:	bf00      	nop
 8013a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a86:	bc08      	pop	{r3}
 8013a88:	469e      	mov	lr, r3
 8013a8a:	4770      	bx	lr
