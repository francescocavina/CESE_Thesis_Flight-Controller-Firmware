
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f40  08009f40  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f48  08009f48  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f48  08009f48  00019f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f4c  08009f4c  00019f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08009f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001674  2000015c  0800a0ac  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017d0  0800a0ac  000217d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015fba  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003aaa  00000000  00000000  00036189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00039c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8d  00000000  00000000  0003adf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2c6  00000000  00000000  0003bb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c1d  00000000  00000000  00055e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d21d  00000000  00000000  0006fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004db0  00000000  00000000  000fcc88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00101a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d78 	.word	0x08009d78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	08009d78 	.word	0x08009d78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <flightController_App>:
extern DMA_HandleTypeDef hdma_usart2_rx;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b0b4      	sub	sp, #208	; 0xd0
 8000590:	af00      	add	r7, sp, #0
    //        CDC_Transmit_FS(str0, strlen((const char *)str0));
    //    }

    /* IMU Demo */
    MPU6050_HandleTypeDef_t * hmpu6050;
    hmpu6050 = MPU6050_Init(&hi2c1);
 8000592:	4871      	ldr	r0, [pc, #452]	; (8000758 <flightController_App+0x1cc>)
 8000594:	f000 fe14 	bl	80011c0 <MPU6050_Init>
 8000598:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    accelerometerValues_t * accelerometerValues;
    uint16_t tempVal;
    magnetometerValues_t * magnetometerValues;

    while (1) {
        HAL_Delay(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f001 f890 	bl	80016c4 <HAL_Delay>

        MPU6050_ReadGyroscope(hmpu6050, gyroscopeValues);
 80005a4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80005a8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80005ac:	f000 fe40 	bl	8001230 <MPU6050_ReadGyroscope>
        sprintf((char *)str1, (const char *)"Value Gyro X: %d\r\n", gyroscopeValues->gyroscopeX);
 80005b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80005b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b8:	461a      	mov	r2, r3
 80005ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005be:	4967      	ldr	r1, [pc, #412]	; (800075c <flightController_App+0x1d0>)
 80005c0:	4618      	mov	r0, r3
 80005c2:	f008 ffd1 	bl	8009568 <siprintf>
        LOG(str1, LOG_DEBUGGING);
 80005c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005ca:	2101      	movs	r1, #1
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 ffa5 	bl	800151c <LOG>
        HAL_Delay(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f001 f876 	bl	80016c4 <HAL_Delay>
        sprintf((char *)str1, (const char *)"Value Gyro Y: %d\r\n", gyroscopeValues->gyroscopeY);
 80005d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80005dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005e0:	461a      	mov	r2, r3
 80005e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005e6:	495e      	ldr	r1, [pc, #376]	; (8000760 <flightController_App+0x1d4>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f008 ffbd 	bl	8009568 <siprintf>
        LOG(str1, LOG_DEBUGGING);
 80005ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005f2:	2101      	movs	r1, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 ff91 	bl	800151c <LOG>
        HAL_Delay(10);
 80005fa:	200a      	movs	r0, #10
 80005fc:	f001 f862 	bl	80016c4 <HAL_Delay>
        sprintf((char *)str1, (const char *)"Value Gyro Z: %d\r\n\n", gyroscopeValues->gyroscopeZ);
 8000600:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000604:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000608:	461a      	mov	r2, r3
 800060a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800060e:	4955      	ldr	r1, [pc, #340]	; (8000764 <flightController_App+0x1d8>)
 8000610:	4618      	mov	r0, r3
 8000612:	f008 ffa9 	bl	8009568 <siprintf>
        LOG(str1, LOG_DEBUGGING);
 8000616:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f000 ff7d 	bl	800151c <LOG>
        HAL_Delay(10);
 8000622:	200a      	movs	r0, #10
 8000624:	f001 f84e 	bl	80016c4 <HAL_Delay>

        MPU6050_ReadAccelerometer(hmpu6050, accelerometerValues);
 8000628:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800062c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000630:	f000 fe68 	bl	8001304 <MPU6050_ReadAccelerometer>
        sprintf((char *)str2, (const char *)"Value Accel X: %d\r\n", accelerometerValues->accelerometerX);
 8000634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800063c:	461a      	mov	r2, r3
 800063e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000642:	4949      	ldr	r1, [pc, #292]	; (8000768 <flightController_App+0x1dc>)
 8000644:	4618      	mov	r0, r3
 8000646:	f008 ff8f 	bl	8009568 <siprintf>
        LOG(str2, LOG_DEBUGGING);
 800064a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800064e:	2101      	movs	r1, #1
 8000650:	4618      	mov	r0, r3
 8000652:	f000 ff63 	bl	800151c <LOG>
        HAL_Delay(10);
 8000656:	200a      	movs	r0, #10
 8000658:	f001 f834 	bl	80016c4 <HAL_Delay>
        sprintf((char *)str2, (const char *)"Value Accel Y: %d\r\n", accelerometerValues->accelerometerY);
 800065c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000660:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000664:	461a      	mov	r2, r3
 8000666:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800066a:	4940      	ldr	r1, [pc, #256]	; (800076c <flightController_App+0x1e0>)
 800066c:	4618      	mov	r0, r3
 800066e:	f008 ff7b 	bl	8009568 <siprintf>
        LOG(str2, LOG_DEBUGGING);
 8000672:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000676:	2101      	movs	r1, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f000 ff4f 	bl	800151c <LOG>
        HAL_Delay(10);
 800067e:	200a      	movs	r0, #10
 8000680:	f001 f820 	bl	80016c4 <HAL_Delay>
        sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n", accelerometerValues->accelerometerZ);
 8000684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000688:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800068c:	461a      	mov	r2, r3
 800068e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000692:	4937      	ldr	r1, [pc, #220]	; (8000770 <flightController_App+0x1e4>)
 8000694:	4618      	mov	r0, r3
 8000696:	f008 ff67 	bl	8009568 <siprintf>
        LOG(str2, LOG_DEBUGGING);
 800069a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800069e:	2101      	movs	r1, #1
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 ff3b 	bl	800151c <LOG>
        HAL_Delay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f001 f80c 	bl	80016c4 <HAL_Delay>

        tempVal = MPU6050_ReadTemperatureSensor(hmpu6050);
 80006ac:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80006b0:	f000 fe93 	bl	80013da <MPU6050_ReadTemperatureSensor>
 80006b4:	4603      	mov	r3, r0
 80006b6:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        sprintf((char *)str3, (const char *)"Value Temperature: %d\r\n\n", tempVal);
 80006ba:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 80006be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c2:	492c      	ldr	r1, [pc, #176]	; (8000774 <flightController_App+0x1e8>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f008 ff4f 	bl	8009568 <siprintf>
        LOG(str3, LOG_DEBUGGING);
 80006ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 ff23 	bl	800151c <LOG>
        HAL_Delay(10);
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 fff4 	bl	80016c4 <HAL_Delay>

        MPU6050_ReadMagnetometer(hmpu6050, magnetometerValues);
 80006dc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80006e0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80006e4:	f000 fea7 	bl	8001436 <MPU6050_ReadMagnetometer>
        sprintf((char *)str4, (const char *)"Value Mag X: %d\r\n", magnetometerValues->magnetometerX);
 80006e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f0:	461a      	mov	r2, r3
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4920      	ldr	r1, [pc, #128]	; (8000778 <flightController_App+0x1ec>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f008 ff36 	bl	8009568 <siprintf>
        LOG(str4, LOG_DEBUGGING);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2101      	movs	r1, #1
 8000700:	4618      	mov	r0, r3
 8000702:	f000 ff0b 	bl	800151c <LOG>
        HAL_Delay(10);
 8000706:	200a      	movs	r0, #10
 8000708:	f000 ffdc 	bl	80016c4 <HAL_Delay>
        sprintf((char *)str4, (const char *)"Value Mag Y: %d\r\n", magnetometerValues->magnetometerY);
 800070c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000710:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000714:	461a      	mov	r2, r3
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4918      	ldr	r1, [pc, #96]	; (800077c <flightController_App+0x1f0>)
 800071a:	4618      	mov	r0, r3
 800071c:	f008 ff24 	bl	8009568 <siprintf>
        LOG(str4, LOG_DEBUGGING);
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fef9 	bl	800151c <LOG>
        HAL_Delay(10);
 800072a:	200a      	movs	r0, #10
 800072c:	f000 ffca 	bl	80016c4 <HAL_Delay>
        sprintf((char *)str4, (const char *)"Value Mag Z: %d\r\n\n", magnetometerValues->magnetometerZ);
 8000730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000734:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000738:	461a      	mov	r2, r3
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4910      	ldr	r1, [pc, #64]	; (8000780 <flightController_App+0x1f4>)
 800073e:	4618      	mov	r0, r3
 8000740:	f008 ff12 	bl	8009568 <siprintf>
        LOG(str4, LOG_DEBUGGING);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2101      	movs	r1, #1
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fee7 	bl	800151c <LOG>
        HAL_Delay(10);
 800074e:	200a      	movs	r0, #10
 8000750:	f000 ffb8 	bl	80016c4 <HAL_Delay>
        HAL_Delay(1000);
 8000754:	e722      	b.n	800059c <flightController_App+0x10>
 8000756:	bf00      	nop
 8000758:	20000178 	.word	0x20000178
 800075c:	08009d90 	.word	0x08009d90
 8000760:	08009da4 	.word	0x08009da4
 8000764:	08009db8 	.word	0x08009db8
 8000768:	08009dcc 	.word	0x08009dcc
 800076c:	08009de0 	.word	0x08009de0
 8000770:	08009df4 	.word	0x08009df4
 8000774:	08009e0c 	.word	0x08009e0c
 8000778:	08009e28 	.word	0x08009e28
 800077c:	08009e3c 	.word	0x08009e3c
 8000780:	08009e50 	.word	0x08009e50

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 ff2a 	bl	80015e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f810 	bl	80007b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f000 f8ea 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000794:	f000 f8ce 	bl	8000934 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000798:	f008 f91a 	bl	80089d0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800079c:	f000 f872 	bl	8000884 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 f89e 	bl	80008e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    flightController_App();
 80007a4:	f7ff fef2 	bl	800058c <flightController_App>
 80007a8:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f008 fef2 	bl	80095a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <SystemClock_Config+0xcc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a27      	ldr	r2, [pc, #156]	; (800087c <SystemClock_Config+0xcc>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <SystemClock_Config+0xcc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SystemClock_Config+0xd0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <SystemClock_Config+0xd0>)
 80007fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000824:	230f      	movs	r3, #15
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000828:	2390      	movs	r3, #144	; 0x90
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800082c:	2304      	movs	r3, #4
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000830:	2305      	movs	r3, #5
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fd99 	bl	8004370 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000844:	f000 f8c6 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2101      	movs	r1, #1
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fffb 	bl	8004860 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000870:	f000 f8b0 	bl	80009d4 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3750      	adds	r7, #80	; 0x50
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x50>)
 800088a:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <MX_I2C1_Init+0x54>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_I2C1_Init+0x50>)
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_I2C1_Init+0x58>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008c2:	f001 fb19 	bl	8001ef8 <HAL_I2C_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008cc:	f000 f882 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000178 	.word	0x20000178
 80008d8:	40005400 	.word	0x40005400
 80008dc:	00061a80 	.word	0x00061a80

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_USART2_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000906:	2204      	movs	r2, #4
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000918:	f004 f982 	bl	8004c20 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f000 f857 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001cc 	.word	0x200001cc
 8000930:	40004400 	.word	0x40004400

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_DMA_Init+0x30>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <MX_DMA_Init+0x30>)
 8000944:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_DMA_Init+0x30>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_GPIO_Init+0x68>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <MX_GPIO_Init+0x68>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_GPIO_Init+0x68>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_GPIO_Init+0x68>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x68>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_GPIO_Init+0x68>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_GPIO_Init+0x68>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <MX_GPIO_Init+0x68>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_GPIO_Init+0x68>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <HAL_I2C_MspInit+0x84>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d12b      	bne.n	8000aae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a72:	23c0      	movs	r3, #192	; 0xc0
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a76:	2312      	movs	r3, #18
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a82:	2304      	movs	r3, #4
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <HAL_I2C_MspInit+0x8c>)
 8000a8e:	f001 f8af 	bl	8001bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40005400 	.word	0x40005400
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a30      	ldr	r2, [pc, #192]	; (8000ba4 <HAL_UART_MspInit+0xe0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d15a      	bne.n	8000b9c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <HAL_UART_MspInit+0xe4>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a2e      	ldr	r2, [pc, #184]	; (8000ba8 <HAL_UART_MspInit+0xe4>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <HAL_UART_MspInit+0xe4>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <HAL_UART_MspInit+0xe4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a27      	ldr	r2, [pc, #156]	; (8000ba8 <HAL_UART_MspInit+0xe4>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <HAL_UART_MspInit+0xe4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	481c      	ldr	r0, [pc, #112]	; (8000bac <HAL_UART_MspInit+0xe8>)
 8000b3a:	f001 f859 	bl	8001bf0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b40:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_UART_MspInit+0xf0>)
 8000b42:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b72:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b82:	f000 fed5 	bl	8001930 <HAL_DMA_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b8c:	f7ff ff22 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
 8000b96:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_UART_MspInit+0xec>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	20000210 	.word	0x20000210
 8000bb4:	40026088 	.word	0x40026088

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 fd3e 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <OTG_FS_IRQHandler+0x10>)
 8000c12:	f002 fa80 	bl	8003116 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000f5c 	.word	0x20000f5c

08000c20 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
        errno = ENOMEM;
 8000c50:	f008 fcd2 	bl	80095f8 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20010000 	.word	0x20010000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000270 	.word	0x20000270
 8000c88:	200017d0 	.word	0x200017d0

08000c8c <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f008 fc91 	bl	8009604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fd4f 	bl	8000784 <main>
  bx  lr
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000cf4:	08009f50 	.word	0x08009f50
  ldr r2, =_sbss
 8000cf8:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000cfc:	200017d0 	.word	0x200017d0

08000d00 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>

08000d02 <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af02      	add	r7, sp, #8
 8000d08:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hmpu6050) {
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <I2C_Init+0x12>
        return false;
 8000d10:	2300      	movs	r3, #0
 8000d12:	e010      	b.n	8000d36 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6858      	ldr	r0, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7a19      	ldrb	r1, [r3, #8]
 8000d1c:	f107 030f 	add.w	r3, r7, #15
 8000d20:	2201      	movs	r2, #1
 8000d22:	9200      	str	r2, [sp, #0]
 8000d24:	2275      	movs	r2, #117	; 0x75
 8000d26:	f000 f80a 	bl	8000d3e <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b68      	cmp	r3, #104	; 0x68
 8000d2e:	d101      	bne.n	8000d34 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8000d34:	2300      	movs	r3, #0
    }
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b088      	sub	sp, #32
 8000d42:	af04      	add	r7, sp, #16
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	72fb      	strb	r3, [r7, #11]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <I2C_Read+0x1c>
        return false;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e02b      	b.n	8000db2 <I2C_Read+0x74>
    }
    if (0 == address) {
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <I2C_Read+0x26>
        return false;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e026      	b.n	8000db2 <I2C_Read+0x74>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000d64:	7abb      	ldrb	r3, [r7, #10]
 8000d66:	2b75      	cmp	r3, #117	; 0x75
 8000d68:	d901      	bls.n	8000d6e <I2C_Read+0x30>
        return false;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e021      	b.n	8000db2 <I2C_Read+0x74>
    }
    if (NULL == data) {
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <I2C_Read+0x3a>
        return false;
 8000d74:	2300      	movs	r3, #0
 8000d76:	e01c      	b.n	8000db2 <I2C_Read+0x74>
    }
    if (dataSize < MPU_6050_MIN_DATA_SIZE || dataSize > MPU_6050_MAX_DATA_SIZE) {
 8000d78:	7e3b      	ldrb	r3, [r7, #24]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <I2C_Read+0x46>
 8000d7e:	7e3b      	ldrb	r3, [r7, #24]
 8000d80:	2b0a      	cmp	r3, #10
 8000d82:	d901      	bls.n	8000d88 <I2C_Read+0x4a>
        return false;
 8000d84:	2300      	movs	r3, #0
 8000d86:	e014      	b.n	8000db2 <I2C_Read+0x74>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	b299      	uxth	r1, r3
 8000d8c:	7abb      	ldrb	r3, [r7, #10]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	7e3b      	ldrb	r3, [r7, #24]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	9002      	str	r0, [sp, #8]
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f001 fae7 	bl	8002374 <HAL_I2C_Mem_Read>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <I2C_Read+0x72>

        /* Data couldn't be read */
        return false;
 8000dac:	2300      	movs	r3, #0
 8000dae:	e000      	b.n	8000db2 <I2C_Read+0x74>
    } else {

        /* Data read successfully */
        return true;
 8000db0:	2301      	movs	r3, #1
    }
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b088      	sub	sp, #32
 8000dbe:	af04      	add	r7, sp, #16
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	72fb      	strb	r3, [r7, #11]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <I2C_Write+0x1c>
        return false;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e022      	b.n	8000e1c <I2C_Write+0x62>
    }
    if (0 == address) {
 8000dd6:	7afb      	ldrb	r3, [r7, #11]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <I2C_Write+0x26>
        return false;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e01d      	b.n	8000e1c <I2C_Write+0x62>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000de0:	7abb      	ldrb	r3, [r7, #10]
 8000de2:	2b75      	cmp	r3, #117	; 0x75
 8000de4:	d901      	bls.n	8000dea <I2C_Write+0x30>
        return false;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e018      	b.n	8000e1c <I2C_Write+0x62>
    }
    if (NULL == data) {
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <I2C_Write+0x3a>
        return false;
 8000df0:	2300      	movs	r3, #0
 8000df2:	e013      	b.n	8000e1c <I2C_Write+0x62>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8000df4:	7afb      	ldrb	r3, [r7, #11]
 8000df6:	b299      	uxth	r1, r3
 8000df8:	7abb      	ldrb	r3, [r7, #10]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	9302      	str	r3, [sp, #8]
 8000e00:	2301      	movs	r3, #1
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	f001 f9b8 	bl	8002180 <HAL_I2C_Mem_Write>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <I2C_Write+0x60>

        /* Data couldn't be written */
        return false;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <I2C_Write+0x62>
    } else {

        /* Data written successfully */
        return true;
 8000e1a:	2301      	movs	r3, #1
    }
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <MPU6050_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvortMalloc(sizeof(1));
#else
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = malloc(sizeof(MPU6050_HandleTypeDef_t));
 8000e2c:	2014      	movs	r0, #20
 8000e2e:	f008 fadf 	bl	80093f0 <malloc>
 8000e32:	4603      	mov	r3, r0
 8000e34:	60fb      	str	r3, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
 8000e36:	2004      	movs	r0, #4
 8000e38:	f008 fada 	bl	80093f0 <malloc>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60bb      	str	r3, [r7, #8]
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <MPU6050_InstanceInit+0x28>
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10c      	bne.n	8000e66 <MPU6050_InstanceInit+0x42>
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
        vPortFree(hmpu6050);
#else
        /* Free up dynamic allocated memory */
        hmpu6050->buffer = 0;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
        free(hmpu6050->buffer);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f008 fad2 	bl	8009400 <free>
        free(hmpu6050);
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f008 facf 	bl	8009400 <free>
#endif
        return NULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e01b      	b.n	8000e9e <MPU6050_InstanceInit+0x7a>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MPU6050_InstanceInit+0x84>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d106      	bne.n	8000e7c <MPU6050_InstanceInit+0x58>
            hmpu6050->instance = 1;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	22d0      	movs	r2, #208	; 0xd0
 8000e78:	721a      	strb	r2, [r3, #8]
 8000e7a:	e009      	b.n	8000e90 <MPU6050_InstanceInit+0x6c>
        } else if (instancesNumber == 1) {
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <MPU6050_InstanceInit+0x84>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d105      	bne.n	8000e90 <MPU6050_InstanceInit+0x6c>
            hmpu6050->instance = 2;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2202      	movs	r2, #2
 8000e88:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	22d1      	movs	r2, #209	; 0xd1
 8000e8e:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->hi2c = hi2c;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	605a      	str	r2, [r3, #4]
        hmpu6050->buffer = buffer;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000274 	.word	0x20000274

08000eac <MPU6050_Config>:

static void MPU6050_Config(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af04      	add	r7, sp, #16
 8000eb2:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */
    uint8_t regData;

    /* Wake up device */
    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8000eb4:	2340      	movs	r3, #64	; 0x40
 8000eb6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6858      	ldr	r0, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7a19      	ldrb	r1, [r3, #8]
 8000ec0:	f107 030f 	add.w	r3, r7, #15
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	9200      	str	r2, [sp, #0]
 8000ec8:	226b      	movs	r2, #107	; 0x6b
 8000eca:	f000 f946 	bl	800115a <MPU6050_WriteRegisterBitmasked>

    /* Set clock source */
    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6858      	ldr	r0, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7a19      	ldrb	r1, [r3, #8]
 8000eda:	f107 030f 	add.w	r3, r7, #15
 8000ede:	2201      	movs	r2, #1
 8000ee0:	9200      	str	r2, [sp, #0]
 8000ee2:	226b      	movs	r2, #107	; 0x6b
 8000ee4:	f000 f939 	bl	800115a <MPU6050_WriteRegisterBitmasked>

    /* Set sample rate divider */
    regData = MPU_6050_BIT_SMPLRT_DIV;
 8000ee8:	2318      	movs	r3, #24
 8000eea:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6858      	ldr	r0, [r3, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7a19      	ldrb	r1, [r3, #8]
 8000ef4:	f107 030f 	add.w	r3, r7, #15
 8000ef8:	2201      	movs	r2, #1
 8000efa:	9200      	str	r2, [sp, #0]
 8000efc:	2219      	movs	r2, #25
 8000efe:	f000 f92c 	bl	800115a <MPU6050_WriteRegisterBitmasked>

    /* Configure gyroscope full scale range */
    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_3;
 8000f02:	2318      	movs	r3, #24
 8000f04:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6858      	ldr	r0, [r3, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7a19      	ldrb	r1, [r3, #8]
 8000f0e:	f107 030f 	add.w	r3, r7, #15
 8000f12:	2201      	movs	r2, #1
 8000f14:	9200      	str	r2, [sp, #0]
 8000f16:	221b      	movs	r2, #27
 8000f18:	f000 f91f 	bl	800115a <MPU6050_WriteRegisterBitmasked>

    /* Configure accelerometer full scale range */
    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_3;
 8000f1c:	2318      	movs	r3, #24
 8000f1e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6858      	ldr	r0, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7a19      	ldrb	r1, [r3, #8]
 8000f28:	f107 030f 	add.w	r3, r7, #15
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	9200      	str	r2, [sp, #0]
 8000f30:	221c      	movs	r2, #28
 8000f32:	f000 f912 	bl	800115a <MPU6050_WriteRegisterBitmasked>

    /* Disable I2C Master Mode */
    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8000f36:	2320      	movs	r3, #32
 8000f38:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_USER_CTRL, &regData,	MPU6050_CLEAR_BIT);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6858      	ldr	r0, [r3, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7a19      	ldrb	r1, [r3, #8]
 8000f42:	f107 030f 	add.w	r3, r7, #15
 8000f46:	2200      	movs	r2, #0
 8000f48:	9200      	str	r2, [sp, #0]
 8000f4a:	226a      	movs	r2, #106	; 0x6a
 8000f4c:	f000 f905 	bl	800115a <MPU6050_WriteRegisterBitmasked>

    /* Enable Bypass */
	regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8000f50:	2302      	movs	r3, #2
 8000f52:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_INT_PIN_CFG,	&regData, MPU6050_SET_BIT);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6858      	ldr	r0, [r3, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7a19      	ldrb	r1, [r3, #8]
 8000f5c:	f107 030f 	add.w	r3, r7, #15
 8000f60:	2201      	movs	r2, #1
 8000f62:	9200      	str	r2, [sp, #0]
 8000f64:	2237      	movs	r2, #55	; 0x37
 8000f66:	f000 f8f8 	bl	800115a <MPU6050_WriteRegisterBitmasked>

	regData = 0b00011000; //Fill Slave0 DO
 8000f6a:	2318      	movs	r3, #24
 8000f6c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hmpu6050->hi2c, HMC5883L_AUX_VAL_I2C_ADDR << 1, HMC5883L_REG_CONFIG_A, 1, &regData, 1, 100);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6858      	ldr	r0, [r3, #4]
 8000f72:	2364      	movs	r3, #100	; 0x64
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2301      	movs	r3, #1
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	f107 030f 	add.w	r3, r7, #15
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	2200      	movs	r2, #0
 8000f84:	213c      	movs	r1, #60	; 0x3c
 8000f86:	f001 f8fb 	bl	8002180 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000f8a:	200a      	movs	r0, #10
 8000f8c:	f000 fb9a 	bl	80016c4 <HAL_Delay>

	regData = 0b00000000; //Fill Slave0 DO
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hmpu6050->hi2c, HMC5883L_AUX_VAL_I2C_ADDR << 1, HMC5883L_REG_CONFIG_B, 1, &regData, 1, 100);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6858      	ldr	r0, [r3, #4]
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	f107 030f 	add.w	r3, r7, #15
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2201      	movs	r2, #1
 8000faa:	213c      	movs	r1, #60	; 0x3c
 8000fac:	f001 f8e8 	bl	8002180 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f000 fb87 	bl	80016c4 <HAL_Delay>

	regData = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hmpu6050->hi2c, HMC5883L_AUX_VAL_I2C_ADDR << 1, HMC5883L_REG_MODE, 1, &regData, 1, 100); //Mode: Continuous
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6858      	ldr	r0, [r3, #4]
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	f107 030f 	add.w	r3, r7, #15
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	2202      	movs	r2, #2
 8000fd0:	213c      	movs	r1, #60	; 0x3c
 8000fd2:	f001 f8d5 	bl	8002180 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f000 fb74 	bl	80016c4 <HAL_Delay>

	regData = 0x00; //
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_INT_PIN_CFG, 1, &regData, 1, 100); //Disable Bypass
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6858      	ldr	r0, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7a1b      	ldrb	r3, [r3, #8]
 8000fe8:	b299      	uxth	r1, r3
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	f107 030f 	add.w	r3, r7, #15
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2237      	movs	r2, #55	; 0x37
 8000ffc:	f001 f8c0 	bl	8002180 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f000 fb5f 	bl	80016c4 <HAL_Delay>

	regData = 0b00100010; //
 8001006:	2322      	movs	r3, #34	; 0x22
 8001008:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_USER_CTRL, 1, &regData, 1, 100); //Master Enable
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6858      	ldr	r0, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7a1b      	ldrb	r3, [r3, #8]
 8001012:	b299      	uxth	r1, r3
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f107 030f 	add.w	r3, r7, #15
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	226a      	movs	r2, #106	; 0x6a
 8001026:	f001 f8ab 	bl	8002180 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f000 fb4a 	bl	80016c4 <HAL_Delay>

	regData = 0b00001101; //
 8001030:	230d      	movs	r3, #13
 8001032:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_MST_CTRL, 1, &regData, 1, 100); //Master Clock to 400kHz
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6858      	ldr	r0, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7a1b      	ldrb	r3, [r3, #8]
 800103c:	b299      	uxth	r1, r3
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2301      	movs	r3, #1
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	f107 030f 	add.w	r3, r7, #15
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	2224      	movs	r2, #36	; 0x24
 8001050:	f001 f896 	bl	8002180 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f000 fb35 	bl	80016c4 <HAL_Delay>

	regData = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, 1, &regData, 1, 100);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6858      	ldr	r0, [r3, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7a1b      	ldrb	r3, [r3, #8]
 8001066:	b299      	uxth	r1, r3
 8001068:	2364      	movs	r3, #100	; 0x64
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2301      	movs	r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	f107 030f 	add.w	r3, r7, #15
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	226b      	movs	r2, #107	; 0x6b
 800107a:	f001 f881 	bl	8002180 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f000 fb20 	bl	80016c4 <HAL_Delay>

	regData = HMC5883L_AUX_VAL_I2C_ADDR | 0x80; //Access Slave into read mode
 8001084:	239e      	movs	r3, #158	; 0x9e
 8001086:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_ADDR, 1, &regData, 1, 100);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6858      	ldr	r0, [r3, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7a1b      	ldrb	r3, [r3, #8]
 8001090:	b299      	uxth	r1, r3
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	2301      	movs	r3, #1
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	f107 030f 	add.w	r3, r7, #15
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	2225      	movs	r2, #37	; 0x25
 80010a4:	f001 f86c 	bl	8002180 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f000 fb0b 	bl	80016c4 <HAL_Delay>

	regData = 0x03; //Slave REG for reading to take place
 80010ae:	2303      	movs	r3, #3
 80010b0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_REG, 1, &regData, 1, 100);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6858      	ldr	r0, [r3, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7a1b      	ldrb	r3, [r3, #8]
 80010ba:	b299      	uxth	r1, r3
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	f107 030f 	add.w	r3, r7, #15
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	2226      	movs	r2, #38	; 0x26
 80010ce:	f001 f857 	bl	8002180 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80010d2:	200a      	movs	r0, #10
 80010d4:	f000 faf6 	bl	80016c4 <HAL_Delay>

	regData = 0x80 | 0x06; //Number of data bytes
 80010d8:	2386      	movs	r3, #134	; 0x86
 80010da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_CTRL, 1, &regData, 1, 100);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6858      	ldr	r0, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7a1b      	ldrb	r3, [r3, #8]
 80010e4:	b299      	uxth	r1, r3
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2301      	movs	r3, #1
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f107 030f 	add.w	r3, r7, #15
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2227      	movs	r2, #39	; 0x27
 80010f8:	f001 f842 	bl	8002180 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f000 fae1 	bl	80016c4 <HAL_Delay>

}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <MPU6050_ReadRegister>:

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af02      	add	r7, sp, #8
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	72fb      	strb	r3, [r7, #11]
 8001118:	4613      	mov	r3, r2
 800111a:	72bb      	strb	r3, [r7, #10]

	/* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 800111c:	7aba      	ldrb	r2, [r7, #10]
 800111e:	7af9      	ldrb	r1, [r7, #11]
 8001120:	7e3b      	ldrb	r3, [r7, #24]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f7ff fe09 	bl	8000d3e <I2C_Read>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	72fb      	strb	r3, [r7, #11]
 8001142:	4613      	mov	r3, r2
 8001144:	72bb      	strb	r3, [r7, #10]

	/* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 8001146:	7aba      	ldrb	r2, [r7, #10]
 8001148:	7af9      	ldrb	r1, [r7, #11]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff fe34 	bl	8000dba <I2C_Write>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b088      	sub	sp, #32
 800115e:	af02      	add	r7, sp, #8
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	72fb      	strb	r3, [r7, #11]
 8001168:	4613      	mov	r3, r2
 800116a:	72bb      	strb	r3, [r7, #10]
	uint8_t originalData;

	/* Declare variable for new data to write into register */
	uint8_t newData;

	MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 800116c:	f107 0317 	add.w	r3, r7, #23
 8001170:	7aba      	ldrb	r2, [r7, #10]
 8001172:	7af9      	ldrb	r1, [r7, #11]
 8001174:	2001      	movs	r0, #1
 8001176:	9000      	str	r0, [sp, #0]
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f7ff ffc6 	bl	800110a <MPU6050_ReadRegister>

	/* Apply mask to data to write */
	if(set) {
 800117e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <MPU6050_WriteRegisterBitmasked+0x3a>

		newData = originalData | *data;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	4313      	orrs	r3, r2
 800118e:	b2db      	uxtb	r3, r3
 8001190:	75bb      	strb	r3, [r7, #22]
 8001192:	e00a      	b.n	80011aa <MPU6050_WriteRegisterBitmasked+0x50>
	} else {

		newData = originalData & (~*data);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b25b      	sxtb	r3, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	b25a      	sxtb	r2, r3
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	4013      	ands	r3, r2
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	75bb      	strb	r3, [r7, #22]
	}

	MPU6050_WriteRegister(hi2c, address, reg, &newData);
 80011aa:	f107 0316 	add.w	r3, r7, #22
 80011ae:	7aba      	ldrb	r2, [r7, #10]
 80011b0:	7af9      	ldrb	r1, [r7, #11]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff ffbe 	bl	8001134 <MPU6050_WriteRegister>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <MPU6050_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_Init(I2C_HandleTypeDef * hi2c) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

	/* Check parameter */
	if(NULL == hi2c) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <MPU6050_Init+0x12>
		return NULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e028      	b.n	8001224 <MPU6050_Init+0x64>
	}

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MPU6050_Init+0x6c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d101      	bne.n	80011de <MPU6050_Init+0x1e>
        return NULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	e022      	b.n	8001224 <MPU6050_Init+0x64>
    }

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_InstanceInit(hi2c);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fe20 	bl	8000e24 <MPU6050_InstanceInit>
 80011e4:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d01a      	beq.n	8001222 <MPU6050_Init+0x62>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hmpu6050)) {
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff fd88 	bl	8000d02 <I2C_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00a      	beq.n	800120e <MPU6050_Init+0x4e>

            /* Initialization was successful */
            /* Configure device */
            MPU6050_Config(hmpu6050);
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f7ff fe57 	bl	8000eac <MPU6050_Config>

            instancesNumber++;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MPU6050_Init+0x6c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MPU6050_Init+0x6c>)
 8001208:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	e00a      	b.n	8001224 <MPU6050_Init+0x64>
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
            vPortFree(hmpu6050);
#else
            /* Free up dynamic allocated memory */
            free(hmpu6050->buffer);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	4618      	mov	r0, r3
 8001214:	f008 f8f4 	bl	8009400 <free>
            free(hmpu6050);
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f008 f8f1 	bl	8009400 <free>
#endif
            return NULL;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <MPU6050_Init+0x64>
        }
    } else {

        /* Instance couldn't be created */
        return NULL;
 8001222:	2300      	movs	r3, #0
    }
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000274 	.word	0x20000274

08001230 <MPU6050_ReadGyroscope>:
		/* Reset device */
		MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
	}
}

void MPU6050_ReadGyroscope(MPU6050_HandleTypeDef_t * hmpu6050, gyroscopeValues_t * gyroscopeValues) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af02      	add	r7, sp, #8
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]

	/* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_2000;
 800123a:	2310      	movs	r3, #16
 800123c:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if(NULL != hmpu6050 && NULL != gyroscopeValues) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d051      	beq.n	80012e8 <MPU6050_ReadGyroscope+0xb8>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d04e      	beq.n	80012e8 <MPU6050_ReadGyroscope+0xb8>

        /* Read gyroscope in axis X */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6858      	ldr	r0, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7a19      	ldrb	r1, [r3, #8]
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	2202      	movs	r2, #2
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	2243      	movs	r2, #67	; 0x43
 800125c:	f7ff ff55 	bl	800110a <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8001260:	7b3b      	ldrb	r3, [r7, #12]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21a      	sxth	r2, r3
 8001266:	7b7b      	ldrb	r3, [r7, #13]
 8001268:	b21b      	sxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b21b      	sxth	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001274:	fb92 f3f3 	sdiv	r3, r2, r3
 8001278:	b21a      	sxth	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	801a      	strh	r2, [r3, #0]

        /* Read gyroscope in axis Y */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6858      	ldr	r0, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7a19      	ldrb	r1, [r3, #8]
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2202      	movs	r2, #2
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	2245      	movs	r2, #69	; 0x45
 8001290:	f7ff ff3b 	bl	800110a <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	805a      	strh	r2, [r3, #2]

        /* Read gyroscope in axis Z */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6858      	ldr	r0, [r3, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7a19      	ldrb	r1, [r3, #8]
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2202      	movs	r2, #2
 80012c0:	9200      	str	r2, [sp, #0]
 80012c2:	2247      	movs	r2, #71	; 0x47
 80012c4:	f7ff ff21 	bl	800110a <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 80012c8:	7b3b      	ldrb	r3, [r7, #12]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	7b7b      	ldrb	r3, [r7, #13]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	809a      	strh	r2, [r3, #4]
 80012e6:	e009      	b.n	80012fc <MPU6050_ReadGyroscope+0xcc>

    } else {
    	/* Wrong parameters */
    	gyroscopeValues->gyroscopeX = 0;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2200      	movs	r2, #0
 80012ec:	801a      	strh	r2, [r3, #0]
    	gyroscopeValues->gyroscopeY = 0;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2200      	movs	r2, #0
 80012f2:	805a      	strh	r2, [r3, #2]
    	gyroscopeValues->gyroscopeZ = 0;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	809a      	strh	r2, [r3, #4]
    }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <MPU6050_ReadAccelerometer>:

void MPU6050_ReadAccelerometer(MPU6050_HandleTypeDef_t * hmpu6050, accelerometerValues_t * accelerometerValues) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af02      	add	r7, sp, #8
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]

	/* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_SF_16;
 800130e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001312:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if(NULL != hmpu6050 && NULL != accelerometerValues) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d051      	beq.n	80013be <MPU6050_ReadAccelerometer+0xba>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d04e      	beq.n	80013be <MPU6050_ReadAccelerometer+0xba>

        /* Read accelerometer in axis X */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6858      	ldr	r0, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7a19      	ldrb	r1, [r3, #8]
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2202      	movs	r2, #2
 800132e:	9200      	str	r2, [sp, #0]
 8001330:	223b      	movs	r2, #59	; 0x3b
 8001332:	f7ff feea 	bl	800110a <MPU6050_ReadRegister>
        accelerometerValues->accelerometerX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8001336:	7b3b      	ldrb	r3, [r7, #12]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21a      	sxth	r2, r3
 800133c:	7b7b      	ldrb	r3, [r7, #13]
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b21b      	sxth	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800134a:	fb92 f3f3 	sdiv	r3, r2, r3
 800134e:	b21a      	sxth	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	801a      	strh	r2, [r3, #0]

        /* Read accelerometer in axis Y */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6858      	ldr	r0, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7a19      	ldrb	r1, [r3, #8]
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2202      	movs	r2, #2
 8001362:	9200      	str	r2, [sp, #0]
 8001364:	223d      	movs	r2, #61	; 0x3d
 8001366:	f7ff fed0 	bl	800110a <MPU6050_ReadRegister>
        accelerometerValues->accelerometerY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 800136a:	7b3b      	ldrb	r3, [r7, #12]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800137e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001382:	b21a      	sxth	r2, r3
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	805a      	strh	r2, [r3, #2]

        /* Read accelerometer in axis Z */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6858      	ldr	r0, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7a19      	ldrb	r1, [r3, #8]
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2202      	movs	r2, #2
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	223f      	movs	r2, #63	; 0x3f
 800139a:	f7ff feb6 	bl	800110a <MPU6050_ReadRegister>
        accelerometerValues->accelerometerZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	7b7b      	ldrb	r3, [r7, #13]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	809a      	strh	r2, [r3, #4]
 80013bc:	e009      	b.n	80013d2 <MPU6050_ReadAccelerometer+0xce>

    } else {
    	/* Wrong parameters */
    	accelerometerValues->accelerometerX = 0;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	801a      	strh	r2, [r3, #0]
    	accelerometerValues->accelerometerY = 0;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	805a      	strh	r2, [r3, #2]
    	accelerometerValues->accelerometerZ = 0;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	809a      	strh	r2, [r3, #4]
    }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <MPU6050_ReadTemperatureSensor>:

int16_t MPU6050_ReadTemperatureSensor(MPU6050_HandleTypeDef_t * hmpu6050) {
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af02      	add	r7, sp, #8
 80013e0:	6078      	str	r0, [r7, #4]

	/* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 80013e2:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80013e6:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 80013e8:	2324      	movs	r3, #36	; 0x24
 80013ea:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if(NULL == hmpu6050) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <MPU6050_ReadTemperatureSensor+0x1c>
    	return 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e01b      	b.n	800142e <MPU6050_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6858      	ldr	r0, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a19      	ldrb	r1, [r3, #8]
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	2202      	movs	r2, #2
 8001404:	9200      	str	r2, [sp, #0]
 8001406:	2241      	movs	r2, #65	; 0x41
 8001408:	f7ff fe7f 	bl	800110a <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 800140c:	7a3b      	ldrb	r3, [r7, #8]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	7a7b      	ldrb	r3, [r7, #9]
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21b      	sxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001420:	fb92 f3f3 	sdiv	r3, r2, r3
 8001424:	b29a      	uxth	r2, r3
 8001426:	89bb      	ldrh	r3, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	b21b      	sxth	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <MPU6050_ReadMagnetometer>:

 void MPU6050_ReadMagnetometer(MPU6050_HandleTypeDef_t * hmpu6050,
                                   magnetometerValues_t * magnetometerValues) {
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af02      	add	r7, sp, #8
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]

     magnetometerValues->magnetometerX = 0;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	801a      	strh	r2, [r3, #0]
     magnetometerValues->magnetometerY = 0;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	805a      	strh	r2, [r3, #2]
     magnetometerValues->magnetometerZ = 0;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	809a      	strh	r2, [r3, #4]

     uint8_t magnetometerRawData[2];
     int16_t scaleFactor = 1;
 8001452:	2301      	movs	r3, #1
 8001454:	81fb      	strh	r3, [r7, #14]

     /* Read magnetometer in axis X */
     MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6858      	ldr	r0, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7a19      	ldrb	r1, [r3, #8]
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2202      	movs	r2, #2
 8001464:	9200      	str	r2, [sp, #0]
 8001466:	2249      	movs	r2, #73	; 0x49
 8001468:	f7ff fe4f 	bl	800110a <MPU6050_ReadRegister>
     magnetometerValues->magnetometerX = (int16_t)(magnetometerRawData[0] << 8 | magnetometerRawData[1]) / scaleFactor;
 800146c:	7b3b      	ldrb	r3, [r7, #12]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b21a      	sxth	r2, r3
 8001472:	7b7b      	ldrb	r3, [r7, #13]
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21b      	sxth	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001480:	fb92 f3f3 	sdiv	r3, r2, r3
 8001484:	b21a      	sxth	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	801a      	strh	r2, [r3, #0]

     /* Read magnetometer in axis Y */
     MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6858      	ldr	r0, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7a19      	ldrb	r1, [r3, #8]
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2202      	movs	r2, #2
 8001498:	9200      	str	r2, [sp, #0]
 800149a:	224b      	movs	r2, #75	; 0x4b
 800149c:	f7ff fe35 	bl	800110a <MPU6050_ReadRegister>
     magnetometerValues->magnetometerY = (int16_t)(magnetometerRawData[0] << 8 | magnetometerRawData[1]) / scaleFactor;
 80014a0:	7b3b      	ldrb	r3, [r7, #12]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	7b7b      	ldrb	r3, [r7, #13]
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	805a      	strh	r2, [r3, #2]

     /* Read magnetometer in axis Z */
     MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6858      	ldr	r0, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7a19      	ldrb	r1, [r3, #8]
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2202      	movs	r2, #2
 80014cc:	9200      	str	r2, [sp, #0]
 80014ce:	224d      	movs	r2, #77	; 0x4d
 80014d0:	f7ff fe1b 	bl	800110a <MPU6050_ReadRegister>
     magnetometerValues->magnetometerZ = (int16_t)(magnetometerRawData[0] << 8 | magnetometerRawData[1]) / scaleFactor;
 80014d4:	7b3b      	ldrb	r3, [r7, #12]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b21a      	sxth	r2, r3
 80014da:	7b7b      	ldrb	r3, [r7, #13]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	461a      	mov	r2, r3
 80014e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	809a      	strh	r2, [r3, #4]
 }
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]

	CDC_Transmit_FS(string, strlen((const char *)string));
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7fe fe6c 	bl	80001e0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29b      	uxth	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f007 fb1c 	bl	8008b4c <CDC_Transmit_FS>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
int8_t LOG(uint8_t *message, LOGGING_TYPE_t logType) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b090      	sub	sp, #64	; 0x40
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]

	/* Check parameters */
	if(NULL == message) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <LOG+0x18>
		return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001532:	e049      	b.n	80015c8 <LOG+0xac>
	}

	if(LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b03      	cmp	r3, #3
 8001538:	d902      	bls.n	8001540 <LOG+0x24>
		return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153e:	e043      	b.n	80015c8 <LOG+0xac>
	}

	/* Build log message */
	uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	222e      	movs	r2, #46	; 0x2e
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f008 f82b 	bl	80095a8 <memset>

	if(LOG_INFORMATION == logType) {
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d108      	bne.n	800156a <LOG+0x4e>

		strcat((char *) logMessage, (char *) informationTypeLabel);
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <LOG+0xb4>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f008 f828 	bl	80095b8 <strcat>
 8001568:	e022      	b.n	80015b0 <LOG+0x94>
	} else if(LOG_DEBUGGING == logType) {
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d108      	bne.n	8001582 <LOG+0x66>

		strcat((char *) logMessage, (char *) debuggingTypeLabel);
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <LOG+0xb8>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f008 f81c 	bl	80095b8 <strcat>
 8001580:	e016      	b.n	80015b0 <LOG+0x94>
	} else if(LOG_WARNING == logType) {
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d108      	bne.n	800159a <LOG+0x7e>

		strcat((char *) logMessage, (char *) warningTypeLabel);
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <LOG+0xbc>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f008 f810 	bl	80095b8 <strcat>
 8001598:	e00a      	b.n	80015b0 <LOG+0x94>
	} else if(LOG_ERROR == logType) {
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d107      	bne.n	80015b0 <LOG+0x94>

		strcat((char *) logMessage, (char *) errorTypeLabel);
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <LOG+0xc0>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f008 f804 	bl	80095b8 <strcat>
	}

	strcat((char *) logMessage, (char *) message);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f007 fffe 	bl	80095b8 <strcat>

	/* Send message through USB port */
	USB_Write(logMessage);
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff9a 	bl	80014fa <USB_Write>

	return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3740      	adds	r7, #64	; 0x40
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000004 	.word	0x20000004
 80015d4:	20000008 	.word	0x20000008
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	20000010 	.word	0x20000010

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <HAL_Init+0x40>)
 80015ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <HAL_Init+0x40>)
 80015f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_Init+0x40>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f94f 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff f9e6 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023c00 	.word	0x40023c00

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f967 	bl	8001916 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001660:	f000 f92f 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	20000018 	.word	0x20000018
 8001680:	20000014 	.word	0x20000014

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000018 	.word	0x20000018
 80016a8:	20000278 	.word	0x20000278

080016ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000278 	.word	0x20000278

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000018 	.word	0x20000018

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4907      	ldr	r1, [pc, #28]	; (80017a8 <__NVIC_EnableIRQ+0x38>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff29 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff3e 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff8e 	bl	8001800 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5d 	bl	80017ac <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff31 	bl	8001770 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff feb6 	bl	80016ac <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e099      	b.n	8001a80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196c:	e00f      	b.n	800198e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800196e:	f7ff fe9d 	bl	80016ac <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b05      	cmp	r3, #5
 800197a:	d908      	bls.n	800198e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2220      	movs	r2, #32
 8001980:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2203      	movs	r2, #3
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e078      	b.n	8001a80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e8      	bne.n	800196e <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <HAL_DMA_Init+0x158>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4313      	orrs	r3, r2
 80019de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d107      	bne.n	80019f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	4313      	orrs	r3, r2
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f023 0307 	bic.w	r3, r3, #7
 8001a0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d117      	bne.n	8001a52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f85f 	bl	8001af8 <DMA_CheckFifoParam>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e016      	b.n	8001a80 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f816 	bl	8001a8c <DMA_CalcBaseAndBitshift>
 8001a60:	4603      	mov	r3, r0
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	223f      	movs	r2, #63	; 0x3f
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	f010803f 	.word	0xf010803f

08001a8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	3b10      	subs	r3, #16
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <DMA_CalcBaseAndBitshift+0x64>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aa6:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <DMA_CalcBaseAndBitshift+0x68>)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d909      	bls.n	8001ace <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ac2:	f023 0303 	bic.w	r3, r3, #3
 8001ac6:	1d1a      	adds	r2, r3, #4
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	659a      	str	r2, [r3, #88]	; 0x58
 8001acc:	e007      	b.n	8001ade <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ad6:	f023 0303 	bic.w	r3, r3, #3
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	aaaaaaab 	.word	0xaaaaaaab
 8001af4:	08009f04 	.word	0x08009f04

08001af8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11f      	bne.n	8001b52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d856      	bhi.n	8001bc6 <DMA_CheckFifoParam+0xce>
 8001b18:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <DMA_CheckFifoParam+0x28>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b31 	.word	0x08001b31
 8001b24:	08001b43 	.word	0x08001b43
 8001b28:	08001b31 	.word	0x08001b31
 8001b2c:	08001bc7 	.word	0x08001bc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d046      	beq.n	8001bca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b40:	e043      	b.n	8001bca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b4a:	d140      	bne.n	8001bce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b50:	e03d      	b.n	8001bce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b5a:	d121      	bne.n	8001ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d837      	bhi.n	8001bd2 <DMA_CheckFifoParam+0xda>
 8001b62:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <DMA_CheckFifoParam+0x70>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001b7f 	.word	0x08001b7f
 8001b70:	08001b79 	.word	0x08001b79
 8001b74:	08001b91 	.word	0x08001b91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b7c:	e030      	b.n	8001be0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d025      	beq.n	8001bd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b8e:	e022      	b.n	8001bd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b98:	d11f      	bne.n	8001bda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b9e:	e01c      	b.n	8001bda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d903      	bls.n	8001bae <DMA_CheckFifoParam+0xb6>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d003      	beq.n	8001bb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bac:	e018      	b.n	8001be0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb2:	e015      	b.n	8001be0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00e      	beq.n	8001bde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc4:	e00b      	b.n	8001bde <DMA_CheckFifoParam+0xe6>
      break;
 8001bc6:	bf00      	nop
 8001bc8:	e00a      	b.n	8001be0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bca:	bf00      	nop
 8001bcc:	e008      	b.n	8001be0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bce:	bf00      	nop
 8001bd0:	e006      	b.n	8001be0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd2:	bf00      	nop
 8001bd4:	e004      	b.n	8001be0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd6:	bf00      	nop
 8001bd8:	e002      	b.n	8001be0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bda:	bf00      	nop
 8001bdc:	e000      	b.n	8001be0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bde:	bf00      	nop
    }
  }

  return status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e159      	b.n	8001ec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f040 8148 	bne.w	8001eba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d005      	beq.n	8001c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d130      	bne.n	8001ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 0201 	and.w	r2, r3, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d017      	beq.n	8001ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d123      	bne.n	8001d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	08da      	lsrs	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a2 	beq.w	8001eba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a56      	ldr	r2, [pc, #344]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d92:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_GPIO_Init+0x2ec>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a49      	ldr	r2, [pc, #292]	; (8001ee0 <HAL_GPIO_Init+0x2f0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x202>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a48      	ldr	r2, [pc, #288]	; (8001ee4 <HAL_GPIO_Init+0x2f4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x1fe>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a47      	ldr	r2, [pc, #284]	; (8001ee8 <HAL_GPIO_Init+0x2f8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x1fa>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a46      	ldr	r2, [pc, #280]	; (8001eec <HAL_GPIO_Init+0x2fc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x1f6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <HAL_GPIO_Init+0x300>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x1f2>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001df2:	2300      	movs	r3, #0
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e04:	4935      	ldr	r1, [pc, #212]	; (8001edc <HAL_GPIO_Init+0x2ec>)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e12:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e36:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e60:	4a24      	ldr	r2, [pc, #144]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	f67f aea2 	bls.w	8001c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40013c00 	.word	0x40013c00

08001ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e12b      	b.n	8002162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fd88 	bl	8000a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2224      	movs	r2, #36	; 0x24
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f5c:	f002 fe38 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8001f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a81      	ldr	r2, [pc, #516]	; (800216c <HAL_I2C_Init+0x274>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d807      	bhi.n	8001f7c <HAL_I2C_Init+0x84>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a80      	ldr	r2, [pc, #512]	; (8002170 <HAL_I2C_Init+0x278>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	bf94      	ite	ls
 8001f74:	2301      	movls	r3, #1
 8001f76:	2300      	movhi	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	e006      	b.n	8001f8a <HAL_I2C_Init+0x92>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a7d      	ldr	r2, [pc, #500]	; (8002174 <HAL_I2C_Init+0x27c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	bf94      	ite	ls
 8001f84:	2301      	movls	r3, #1
 8001f86:	2300      	movhi	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0e7      	b.n	8002162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a78      	ldr	r2, [pc, #480]	; (8002178 <HAL_I2C_Init+0x280>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0c9b      	lsrs	r3, r3, #18
 8001f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a6a      	ldr	r2, [pc, #424]	; (800216c <HAL_I2C_Init+0x274>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d802      	bhi.n	8001fcc <HAL_I2C_Init+0xd4>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	e009      	b.n	8001fe0 <HAL_I2C_Init+0xe8>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_I2C_Init+0x284>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	099b      	lsrs	r3, r3, #6
 8001fde:	3301      	adds	r3, #1
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	495c      	ldr	r1, [pc, #368]	; (800216c <HAL_I2C_Init+0x274>)
 8001ffc:	428b      	cmp	r3, r1
 8001ffe:	d819      	bhi.n	8002034 <HAL_I2C_Init+0x13c>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e59      	subs	r1, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fbb1 f3f3 	udiv	r3, r1, r3
 800200e:	1c59      	adds	r1, r3, #1
 8002010:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002014:	400b      	ands	r3, r1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_I2C_Init+0x138>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e59      	subs	r1, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fbb1 f3f3 	udiv	r3, r1, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202e:	e051      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 8002030:	2304      	movs	r3, #4
 8002032:	e04f      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d111      	bne.n	8002060 <HAL_I2C_Init+0x168>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e58      	subs	r0, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	440b      	add	r3, r1
 800204a:	fbb0 f3f3 	udiv	r3, r0, r3
 800204e:	3301      	adds	r3, #1
 8002050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e012      	b.n	8002086 <HAL_I2C_Init+0x18e>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e58      	subs	r0, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	0099      	lsls	r1, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	fbb0 f3f3 	udiv	r3, r0, r3
 8002076:	3301      	adds	r3, #1
 8002078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Init+0x196>
 800208a:	2301      	movs	r3, #1
 800208c:	e022      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10e      	bne.n	80020b4 <HAL_I2C_Init+0x1bc>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1e58      	subs	r0, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	440b      	add	r3, r1
 80020a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b2:	e00f      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1e58      	subs	r0, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	0099      	lsls	r1, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	6809      	ldr	r1, [r1, #0]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6911      	ldr	r1, [r2, #16]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68d2      	ldr	r2, [r2, #12]
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	430b      	orrs	r3, r1
 8002116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	000186a0 	.word	0x000186a0
 8002170:	001e847f 	.word	0x001e847f
 8002174:	003d08ff 	.word	0x003d08ff
 8002178:	431bde83 	.word	0x431bde83
 800217c:	10624dd3 	.word	0x10624dd3

08002180 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	817b      	strh	r3, [r7, #10]
 8002192:	460b      	mov	r3, r1
 8002194:	813b      	strh	r3, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800219a:	f7ff fa87 	bl	80016ac <HAL_GetTick>
 800219e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	f040 80d9 	bne.w	8002360 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2319      	movs	r3, #25
 80021b4:	2201      	movs	r2, #1
 80021b6:	496d      	ldr	r1, [pc, #436]	; (800236c <HAL_I2C_Mem_Write+0x1ec>)
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fc7f 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
 80021c6:	e0cc      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_I2C_Mem_Write+0x56>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e0c5      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d007      	beq.n	80021fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2221      	movs	r2, #33	; 0x21
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a4d      	ldr	r2, [pc, #308]	; (8002370 <HAL_I2C_Mem_Write+0x1f0>)
 800223c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800223e:	88f8      	ldrh	r0, [r7, #6]
 8002240:	893a      	ldrh	r2, [r7, #8]
 8002242:	8979      	ldrh	r1, [r7, #10]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	4603      	mov	r3, r0
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fab6 	bl	80027c0 <I2C_RequestMemoryWrite>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d052      	beq.n	8002300 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e081      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fd00 	bl	8002c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	2b04      	cmp	r3, #4
 8002274:	d107      	bne.n	8002286 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06b      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d11b      	bne.n	8002300 <HAL_I2C_Mem_Write+0x180>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d017      	beq.n	8002300 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1aa      	bne.n	800225e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fcec 	bl	8002cea <I2C_WaitOnBTFFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	2b04      	cmp	r3, #4
 800231e:	d107      	bne.n	8002330 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e016      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	00100002 	.word	0x00100002
 8002370:	ffff0000 	.word	0xffff0000

08002374 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08c      	sub	sp, #48	; 0x30
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	817b      	strh	r3, [r7, #10]
 8002386:	460b      	mov	r3, r1
 8002388:	813b      	strh	r3, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800238e:	f7ff f98d 	bl	80016ac <HAL_GetTick>
 8002392:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b20      	cmp	r3, #32
 800239e:	f040 8208 	bne.w	80027b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2319      	movs	r3, #25
 80023a8:	2201      	movs	r2, #1
 80023aa:	497b      	ldr	r1, [pc, #492]	; (8002598 <HAL_I2C_Mem_Read+0x224>)
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fb85 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
 80023ba:	e1fb      	b.n	80027b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_I2C_Mem_Read+0x56>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e1f4      	b.n	80027b4 <HAL_I2C_Mem_Read+0x440>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d007      	beq.n	80023f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2222      	movs	r2, #34	; 0x22
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2240      	movs	r2, #64	; 0x40
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800241a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4a5b      	ldr	r2, [pc, #364]	; (800259c <HAL_I2C_Mem_Read+0x228>)
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002432:	88f8      	ldrh	r0, [r7, #6]
 8002434:	893a      	ldrh	r2, [r7, #8]
 8002436:	8979      	ldrh	r1, [r7, #10]
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4603      	mov	r3, r0
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fa52 	bl	80028ec <I2C_RequestMemoryRead>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1b0      	b.n	80027b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d113      	bne.n	8002482 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e184      	b.n	800278c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	2b01      	cmp	r3, #1
 8002488:	d11b      	bne.n	80024c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e164      	b.n	800278c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d11b      	bne.n	8002502 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	e144      	b.n	800278c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002518:	e138      	b.n	800278c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	2b03      	cmp	r3, #3
 8002520:	f200 80f1 	bhi.w	8002706 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b01      	cmp	r3, #1
 800252a:	d123      	bne.n	8002574 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fc1b 	bl	8002d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e139      	b.n	80027b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002572:	e10b      	b.n	800278c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b02      	cmp	r3, #2
 800257a:	d14e      	bne.n	800261a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002582:	2200      	movs	r2, #0
 8002584:	4906      	ldr	r1, [pc, #24]	; (80025a0 <HAL_I2C_Mem_Read+0x22c>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fa98 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e10e      	b.n	80027b4 <HAL_I2C_Mem_Read+0x440>
 8002596:	bf00      	nop
 8002598:	00100002 	.word	0x00100002
 800259c:	ffff0000 	.word	0xffff0000
 80025a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002618:	e0b8      	b.n	800278c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002620:	2200      	movs	r2, #0
 8002622:	4966      	ldr	r1, [pc, #408]	; (80027bc <HAL_I2C_Mem_Read+0x448>)
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fa49 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0bf      	b.n	80027b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	2200      	movs	r2, #0
 800267e:	494f      	ldr	r1, [pc, #316]	; (80027bc <HAL_I2C_Mem_Read+0x448>)
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fa1b 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e091      	b.n	80027b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002704:	e042      	b.n	800278c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002708:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fb2e 	bl	8002d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e04c      	b.n	80027b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d118      	bne.n	800278c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	f47f aec2 	bne.w	800251a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3728      	adds	r7, #40	; 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	00010004 	.word	0x00010004

080027c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	4608      	mov	r0, r1
 80027ca:	4611      	mov	r1, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	4603      	mov	r3, r0
 80027d0:	817b      	strh	r3, [r7, #10]
 80027d2:	460b      	mov	r3, r1
 80027d4:	813b      	strh	r3, [r7, #8]
 80027d6:	4613      	mov	r3, r2
 80027d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f960 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002810:	d103      	bne.n	800281a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e05f      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800281e:	897b      	ldrh	r3, [r7, #10]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800282c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	6a3a      	ldr	r2, [r7, #32]
 8002832:	492d      	ldr	r1, [pc, #180]	; (80028e8 <I2C_RequestMemoryWrite+0x128>)
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f998 	bl	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e04c      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800285a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285c:	6a39      	ldr	r1, [r7, #32]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fa02 	bl	8002c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b04      	cmp	r3, #4
 8002870:	d107      	bne.n	8002882 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002880:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e02b      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800288c:	893b      	ldrh	r3, [r7, #8]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	e021      	b.n	80028dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002898:	893b      	ldrh	r3, [r7, #8]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	b29b      	uxth	r3, r3
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	6a39      	ldr	r1, [r7, #32]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f9dc 	bl	8002c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d107      	bne.n	80028ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e005      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028d2:	893b      	ldrh	r3, [r7, #8]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	00010002 	.word	0x00010002

080028ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	4608      	mov	r0, r1
 80028f6:	4611      	mov	r1, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	817b      	strh	r3, [r7, #10]
 80028fe:	460b      	mov	r3, r1
 8002900:	813b      	strh	r3, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002914:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2200      	movs	r2, #0
 800292e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f8c2 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00d      	beq.n	800295a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294c:	d103      	bne.n	8002956 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0aa      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	6a3a      	ldr	r2, [r7, #32]
 800296e:	4952      	ldr	r1, [pc, #328]	; (8002ab8 <I2C_RequestMemoryRead+0x1cc>)
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f8fa 	bl	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e097      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002998:	6a39      	ldr	r1, [r7, #32]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f964 	bl	8002c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d107      	bne.n	80029be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e076      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	e021      	b.n	8002a18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029d4:	893b      	ldrh	r3, [r7, #8]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e4:	6a39      	ldr	r1, [r7, #32]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f93e 	bl	8002c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d107      	bne.n	8002a0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e050      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0e:	893b      	ldrh	r3, [r7, #8]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1a:	6a39      	ldr	r1, [r7, #32]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f923 	bl	8002c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d107      	bne.n	8002a40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e035      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f82b 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7a:	d103      	bne.n	8002a84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e013      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a88:	897b      	ldrh	r3, [r7, #10]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	6a3a      	ldr	r2, [r7, #32]
 8002a9c:	4906      	ldr	r1, [pc, #24]	; (8002ab8 <I2C_RequestMemoryRead+0x1cc>)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f863 	bl	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	00010002 	.word	0x00010002

08002abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002acc:	e025      	b.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad4:	d021      	beq.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7fe fde9 	bl	80016ac <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d116      	bne.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e023      	b.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d10d      	bne.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	e00c      	b.n	8002b5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	bf0c      	ite	eq
 8002b52:	2301      	moveq	r3, #1
 8002b54:	2300      	movne	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d0b6      	beq.n	8002ace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b78:	e051      	b.n	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b88:	d123      	bne.n	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ba2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0204 	orr.w	r2, r3, #4
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e046      	b.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd8:	d021      	beq.n	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bda:	f7fe fd67 	bl	80016ac <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d302      	bcc.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d116      	bne.n	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e020      	b.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10c      	bne.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	e00b      	b.n	8002c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d18d      	bne.n	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c74:	e02d      	b.n	8002cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f8ce 	bl	8002e18 <I2C_IsAcknowledgeFailed>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e02d      	b.n	8002ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c8c:	d021      	beq.n	8002cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7fe fd0d 	bl	80016ac <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d116      	bne.n	8002cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f043 0220 	orr.w	r2, r3, #32
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e007      	b.n	8002ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b80      	cmp	r3, #128	; 0x80
 8002cde:	d1ca      	bne.n	8002c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf6:	e02d      	b.n	8002d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f88d 	bl	8002e18 <I2C_IsAcknowledgeFailed>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e02d      	b.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d0e:	d021      	beq.n	8002d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d10:	f7fe fccc 	bl	80016ac <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d302      	bcc.n	8002d26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d116      	bne.n	8002d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d1ca      	bne.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d78:	e042      	b.n	8002e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d119      	bne.n	8002dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0210 	mvn.w	r2, #16
 8002d90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e029      	b.n	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbc:	f7fe fc76 	bl	80016ac <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d302      	bcc.n	8002dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d116      	bne.n	8002e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e007      	b.n	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	d1b5      	bne.n	8002d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2e:	d11b      	bne.n	8002e68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f043 0204 	orr.w	r2, r3, #4
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e78:	b08f      	sub	sp, #60	; 0x3c
 8002e7a:	af0a      	add	r7, sp, #40	; 0x28
 8002e7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e10f      	b.n	80030a8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f005 ff9a 	bl	8008ddc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2203      	movs	r2, #3
 8002eac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 fa81 	bl	80053ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	687e      	ldr	r6, [r7, #4]
 8002ed4:	466d      	mov	r5, sp
 8002ed6:	f106 0410 	add.w	r4, r6, #16
 8002eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ee6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eea:	1d33      	adds	r3, r6, #4
 8002eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eee:	6838      	ldr	r0, [r7, #0]
 8002ef0:	f002 f958 	bl	80051a4 <USB_CoreInit>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0d0      	b.n	80030a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f002 fa6f 	bl	80053f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
 8002f16:	e04a      	b.n	8002fae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	333d      	adds	r3, #61	; 0x3d
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	333c      	adds	r3, #60	; 0x3c
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	b298      	uxth	r0, r3
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3344      	adds	r3, #68	; 0x44
 8002f54:	4602      	mov	r2, r0
 8002f56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	3340      	adds	r3, #64	; 0x40
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3348      	adds	r3, #72	; 0x48
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334c      	adds	r3, #76	; 0x4c
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3354      	adds	r3, #84	; 0x54
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	3301      	adds	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d3af      	bcc.n	8002f18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	e044      	b.n	8003048 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	3301      	adds	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	429a      	cmp	r2, r3
 8003050:	d3b5      	bcc.n	8002fbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	687e      	ldr	r6, [r7, #4]
 800305a:	466d      	mov	r5, sp
 800305c:	f106 0410 	add.w	r4, r6, #16
 8003060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800306c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003070:	1d33      	adds	r3, r6, #4
 8003072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003074:	6838      	ldr	r0, [r7, #0]
 8003076:	f002 fa07 	bl	8005488 <USB_DevInit>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e00d      	b.n	80030a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 fb56 	bl	8006752 <USB_DevDisconnect>

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_PCD_Start+0x1c>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e020      	b.n	800310e <HAL_PCD_Start+0x5e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d109      	bne.n	80030f0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d005      	beq.n	80030f0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f002 f959 	bl	80053ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 fb06 	bl	8006710 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003116:	b590      	push	{r4, r7, lr}
 8003118:	b08d      	sub	sp, #52	; 0x34
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f003 fbc4 	bl	80068ba <USB_GetMode>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 848a 	bne.w	8003a4e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f003 fb28 	bl	8006794 <USB_ReadInterrupts>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8480 	beq.w	8003a4c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f003 fb15 	bl	8006794 <USB_ReadInterrupts>
 800316a:	4603      	mov	r3, r0
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b02      	cmp	r3, #2
 8003172:	d107      	bne.n	8003184 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f002 0202 	and.w	r2, r2, #2
 8003182:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f003 fb03 	bl	8006794 <USB_ReadInterrupts>
 800318e:	4603      	mov	r3, r0
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b10      	cmp	r3, #16
 8003196:	d161      	bne.n	800325c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0210 	bic.w	r2, r2, #16
 80031a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f003 020f 	and.w	r2, r3, #15
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	3304      	adds	r3, #4
 80031c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	0c5b      	lsrs	r3, r3, #17
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d124      	bne.n	800321e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d035      	beq.n	800324c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	6a38      	ldr	r0, [r7, #32]
 80031f4:	f003 f93a 	bl	800646c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003204:	441a      	add	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	6a1a      	ldr	r2, [r3, #32]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003216:	441a      	add	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	621a      	str	r2, [r3, #32]
 800321c:	e016      	b.n	800324c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	0c5b      	lsrs	r3, r3, #17
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	2b06      	cmp	r3, #6
 8003228:	d110      	bne.n	800324c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003230:	2208      	movs	r2, #8
 8003232:	4619      	mov	r1, r3
 8003234:	6a38      	ldr	r0, [r7, #32]
 8003236:	f003 f919 	bl	800646c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	6a1a      	ldr	r2, [r3, #32]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003246:	441a      	add	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0210 	orr.w	r2, r2, #16
 800325a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f003 fa97 	bl	8006794 <USB_ReadInterrupts>
 8003266:	4603      	mov	r3, r0
 8003268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003270:	f040 80a7 	bne.w	80033c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f003 fa9c 	bl	80067ba <USB_ReadDevAllOutEpInterrupt>
 8003282:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003284:	e099      	b.n	80033ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 808e 	beq.w	80033ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fac0 	bl	8006822 <USB_ReadDevOutEPInterrupt>
 80032a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	2301      	movs	r3, #1
 80032be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fec2 	bl	800404c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00c      	beq.n	80032ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032de:	461a      	mov	r2, r3
 80032e0:	2308      	movs	r3, #8
 80032e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 ff98 	bl	800421c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003302:	461a      	mov	r2, r3
 8003304:	2310      	movs	r3, #16
 8003306:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d030      	beq.n	8003374 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b80      	cmp	r3, #128	; 0x80
 800331c:	d109      	bne.n	8003332 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800332c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003330:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4413      	add	r3, r2
 8003344:	3304      	adds	r3, #4
 8003346:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	78db      	ldrb	r3, [r3, #3]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d108      	bne.n	8003362 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	b2db      	uxtb	r3, r3
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f005 fe39 	bl	8008fd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336e:	461a      	mov	r2, r3
 8003370:	2302      	movs	r3, #2
 8003372:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338a:	461a      	mov	r2, r3
 800338c:	2320      	movs	r3, #32
 800338e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a6:	461a      	mov	r2, r3
 80033a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	3301      	adds	r3, #1
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f47f af62 	bne.w	8003286 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 f9e4 	bl	8006794 <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033d6:	f040 80db 	bne.w	8003590 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f003 fa05 	bl	80067ee <USB_ReadDevAllInEpInterrupt>
 80033e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80033ea:	e0cd      	b.n	8003588 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80c2 	beq.w	800357c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f003 fa2b 	bl	800685e <USB_ReadDevInEPInterrupt>
 8003408:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d057      	beq.n	80034c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	2201      	movs	r2, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	43db      	mvns	r3, r3
 800342e:	69f9      	ldr	r1, [r7, #28]
 8003430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003434:	4013      	ands	r3, r2
 8003436:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003444:	461a      	mov	r2, r3
 8003446:	2301      	movs	r3, #1
 8003448:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d132      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	334c      	adds	r3, #76	; 0x4c
 8003462:	6819      	ldr	r1, [r3, #0]
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4403      	add	r3, r0
 8003472:	3348      	adds	r3, #72	; 0x48
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4419      	add	r1, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4403      	add	r3, r0
 8003486:	334c      	adds	r3, #76	; 0x4c
 8003488:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d113      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x3a2>
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3354      	adds	r3, #84	; 0x54
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034b0:	461a      	mov	r2, r3
 80034b2:	2101      	movs	r1, #1
 80034b4:	f003 fa32 	bl	800691c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f005 fd0d 	bl	8008ede <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034da:	461a      	mov	r2, r3
 80034dc:	2308      	movs	r3, #8
 80034de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f6:	461a      	mov	r2, r3
 80034f8:	2310      	movs	r3, #16
 80034fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003512:	461a      	mov	r2, r3
 8003514:	2340      	movs	r3, #64	; 0x40
 8003516:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d023      	beq.n	800356a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003524:	6a38      	ldr	r0, [r7, #32]
 8003526:	f002 f913 	bl	8005750 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800352a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3338      	adds	r3, #56	; 0x38
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	78db      	ldrb	r3, [r3, #3]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d108      	bne.n	8003558 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	b2db      	uxtb	r3, r3
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f005 fd50 	bl	8008ff8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003564:	461a      	mov	r2, r3
 8003566:	2302      	movs	r3, #2
 8003568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fcdb 	bl	8003f32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	3301      	adds	r3, #1
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	f47f af2e 	bne.w	80033ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f003 f8fd 	bl	8006794 <USB_ReadInterrupts>
 800359a:	4603      	mov	r3, r0
 800359c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035a4:	d122      	bne.n	80035ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d108      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035cc:	2100      	movs	r1, #0
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fec2 	bl	8004358 <HAL_PCDEx_LPM_Callback>
 80035d4:	e002      	b.n	80035dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f005 fcee 	bl	8008fb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f003 f8cf 	bl	8006794 <USB_ReadInterrupts>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003600:	d112      	bne.n	8003628 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f005 fcaa 	bl	8008f6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003626:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f003 f8b1 	bl	8006794 <USB_ReadInterrupts>
 8003632:	4603      	mov	r3, r0
 8003634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	f040 80b7 	bne.w	80037ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2110      	movs	r1, #16
 800365a:	4618      	mov	r0, r3
 800365c:	f002 f878 	bl	8005750 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003660:	2300      	movs	r3, #0
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003664:	e046      	b.n	80036f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003672:	461a      	mov	r2, r3
 8003674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003678:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	440a      	add	r2, r1
 8003690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003698:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	461a      	mov	r2, r3
 80036a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036be:	0151      	lsls	r1, r2, #5
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	440a      	add	r2, r1
 80036c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036de:	0151      	lsls	r1, r2, #5
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	440a      	add	r2, r1
 80036e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	3301      	adds	r3, #1
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d3b3      	bcc.n	8003666 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003710:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372a:	f043 030b 	orr.w	r3, r3, #11
 800372e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003740:	f043 030b 	orr.w	r3, r3, #11
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	e015      	b.n	8003774 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800375a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800375e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800376e:	f043 030b 	orr.w	r3, r3, #11
 8003772:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003782:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003786:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003798:	461a      	mov	r2, r3
 800379a:	f003 f8bf 	bl	800691c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 ffee 	bl	8006794 <USB_ReadInterrupts>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	d124      	bne.n	800380e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 f884 	bl	80068d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 f839 	bl	800584a <USB_GetDevSpeed>
 80037d8:	4603      	mov	r3, r0
 80037da:	461a      	mov	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681c      	ldr	r4, [r3, #0]
 80037e4:	f001 f9e8 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 80037e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	4620      	mov	r0, r4
 80037f4:	f001 fd38 	bl	8005268 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f005 fb98 	bl	8008f2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800380c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f002 ffbe 	bl	8006794 <USB_ReadInterrupts>
 8003818:	4603      	mov	r3, r0
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b08      	cmp	r3, #8
 8003820:	d10a      	bne.n	8003838 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f005 fb75 	bl	8008f12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f002 0208 	and.w	r2, r2, #8
 8003836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f002 ffa9 	bl	8006794 <USB_ReadInterrupts>
 8003842:	4603      	mov	r3, r0
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b80      	cmp	r3, #128	; 0x80
 800384a:	d122      	bne.n	8003892 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003858:	2301      	movs	r3, #1
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
 800385c:	e014      	b.n	8003888 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4619      	mov	r1, r3
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fb27 	bl	8003ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	3301      	adds	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	429a      	cmp	r2, r3
 8003890:	d3e5      	bcc.n	800385e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f002 ff7c 	bl	8006794 <USB_ReadInterrupts>
 800389c:	4603      	mov	r3, r0
 800389e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a6:	d13b      	bne.n	8003920 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a8:	2301      	movs	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
 80038ac:	e02b      	b.n	8003906 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3340      	adds	r3, #64	; 0x40
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d115      	bne.n	8003900 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80038d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	da12      	bge.n	8003900 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	333f      	adds	r3, #63	; 0x3f
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fae8 	bl	8003ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	3301      	adds	r3, #1
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	429a      	cmp	r2, r3
 800390e:	d3ce      	bcc.n	80038ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800391e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f002 ff35 	bl	8006794 <USB_ReadInterrupts>
 800392a:	4603      	mov	r3, r0
 800392c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003934:	d155      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003936:	2301      	movs	r3, #1
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
 800393a:	e045      	b.n	80039c8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d12e      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003964:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003966:	2b00      	cmp	r3, #0
 8003968:	da2b      	bge.n	80039c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003976:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800397a:	429a      	cmp	r2, r3
 800397c:	d121      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039be:	6053      	str	r3, [r2, #4]
            break;
 80039c0:	e007      	b.n	80039d2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	3301      	adds	r3, #1
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d3b4      	bcc.n	800393c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 fed4 	bl	8006794 <USB_ReadInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f6:	d10a      	bne.n	8003a0e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f005 fb0f 	bl	800901c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f002 febe 	bl	8006794 <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d115      	bne.n	8003a4e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f005 faff 	bl	8009038 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	e000      	b.n	8003a4e <HAL_PCD_IRQHandler+0x938>
      return;
 8003a4c:	bf00      	nop
    }
  }
}
 8003a4e:	3734      	adds	r7, #52	; 0x34
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd90      	pop	{r4, r7, pc}

08003a54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_PCD_SetAddress+0x1a>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e013      	b.n	8003a96 <HAL_PCD_SetAddress+0x42>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f002 fe1c 	bl	80066c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	4608      	mov	r0, r1
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4603      	mov	r3, r0
 8003aae:	70fb      	strb	r3, [r7, #3]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	803b      	strh	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da0f      	bge.n	8003ae4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	f003 020f 	and.w	r2, r3, #15
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	3338      	adds	r3, #56	; 0x38
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3304      	adds	r3, #4
 8003ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	705a      	strb	r2, [r3, #1]
 8003ae2:	e00f      	b.n	8003b04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	f003 020f 	and.w	r2, r3, #15
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	3304      	adds	r3, #4
 8003afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b10:	883a      	ldrh	r2, [r7, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	78ba      	ldrb	r2, [r7, #2]
 8003b1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b2e:	78bb      	ldrb	r3, [r7, #2]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d102      	bne.n	8003b3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_PCD_EP_Open+0xaa>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e00e      	b.n	8003b66 <HAL_PCD_EP_Open+0xc8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68f9      	ldr	r1, [r7, #12]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 fe9c 	bl	8005894 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003b64:	7afb      	ldrb	r3, [r7, #11]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	460b      	mov	r3, r1
 8003b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da0f      	bge.n	8003ba2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	f003 020f 	and.w	r2, r3, #15
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	3338      	adds	r3, #56	; 0x38
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	705a      	strb	r2, [r3, #1]
 8003ba0:	e00f      	b.n	8003bc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_PCD_EP_Close+0x6e>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e00e      	b.n	8003bfa <HAL_PCD_EP_Close+0x8c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68f9      	ldr	r1, [r7, #12]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 feda 	bl	80059a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c12:	7afb      	ldrb	r3, [r7, #11]
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	3304      	adds	r3, #4
 8003c2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2200      	movs	r2, #0
 8003c42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c44:	7afb      	ldrb	r3, [r7, #11]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d102      	bne.n	8003c5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	6979      	ldr	r1, [r7, #20]
 8003c76:	f002 f9b9 	bl	8005fec <USB_EP0StartXfer>
 8003c7a:	e008      	b.n	8003c8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	6979      	ldr	r1, [r7, #20]
 8003c8a:	f001 ff67 	bl	8005b5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd8:	7afb      	ldrb	r3, [r7, #11]
 8003cda:	f003 020f 	and.w	r2, r3, #15
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	3338      	adds	r3, #56	; 0x38
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2201      	movs	r2, #1
 8003d06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d08:	7afb      	ldrb	r3, [r7, #11]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d102      	bne.n	8003d22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d22:	7afb      	ldrb	r3, [r7, #11]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	6979      	ldr	r1, [r7, #20]
 8003d3a:	f002 f957 	bl	8005fec <USB_EP0StartXfer>
 8003d3e:	e008      	b.n	8003d52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6979      	ldr	r1, [r7, #20]
 8003d4e:	f001 ff05 	bl	8005b5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d901      	bls.n	8003d7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e050      	b.n	8003e1c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da0f      	bge.n	8003da2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	4613      	mov	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	3338      	adds	r3, #56	; 0x38
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	3304      	adds	r3, #4
 8003d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	705a      	strb	r2, [r3, #1]
 8003da0:	e00d      	b.n	8003dbe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4413      	add	r3, r2
 8003db4:	3304      	adds	r3, #4
 8003db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_PCD_EP_SetStall+0x82>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e01e      	b.n	8003e1c <HAL_PCD_EP_SetStall+0xc0>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68f9      	ldr	r1, [r7, #12]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f002 fb95 	bl	800651c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	b2d9      	uxtb	r1, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f002 fd85 	bl	800691c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 020f 	and.w	r2, r3, #15
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d901      	bls.n	8003e42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e042      	b.n	8003ec8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	da0f      	bge.n	8003e6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 020f 	and.w	r2, r3, #15
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	3338      	adds	r3, #56	; 0x38
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3304      	adds	r3, #4
 8003e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	705a      	strb	r2, [r3, #1]
 8003e68:	e00f      	b.n	8003e8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	f003 020f 	and.w	r2, r3, #15
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4413      	add	r3, r2
 8003e80:	3304      	adds	r3, #4
 8003e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_PCD_EP_ClrStall+0x86>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e00e      	b.n	8003ec8 <HAL_PCD_EP_ClrStall+0xa4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f002 fb9d 	bl	80065f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da0c      	bge.n	8003efe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	f003 020f 	and.w	r2, r3, #15
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	3338      	adds	r3, #56	; 0x38
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3304      	adds	r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e00c      	b.n	8003f18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	f003 020f 	and.w	r2, r3, #15
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	3304      	adds	r3, #4
 8003f16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68f9      	ldr	r1, [r7, #12]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f002 f9bc 	bl	800629c <USB_EPStopXfer>
 8003f24:	4603      	mov	r3, r0
 8003f26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f28:	7afb      	ldrb	r3, [r7, #11]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b08a      	sub	sp, #40	; 0x28
 8003f36:	af02      	add	r7, sp, #8
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	3338      	adds	r3, #56	; 0x38
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4413      	add	r3, r2
 8003f56:	3304      	adds	r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d901      	bls.n	8003f6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e06c      	b.n	8004044 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d902      	bls.n	8003f86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3303      	adds	r3, #3
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f8e:	e02b      	b.n	8003fe8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d902      	bls.n	8003fac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	3303      	adds	r3, #3
 8003fb0:	089b      	lsrs	r3, r3, #2
 8003fb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6919      	ldr	r1, [r3, #16]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	4603      	mov	r3, r0
 8003fca:	6978      	ldr	r0, [r7, #20]
 8003fcc:	f002 fa10 	bl	80063f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	441a      	add	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	441a      	add	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d809      	bhi.n	8004012 <PCD_WriteEmptyTxFifo+0xe0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1a      	ldr	r2, [r3, #32]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004006:	429a      	cmp	r2, r3
 8004008:	d203      	bcs.n	8004012 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1be      	bne.n	8003f90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	429a      	cmp	r2, r3
 800401c:	d811      	bhi.n	8004042 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	2201      	movs	r2, #1
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	43db      	mvns	r3, r3
 8004038:	6939      	ldr	r1, [r7, #16]
 800403a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800403e:	4013      	ands	r3, r2
 8004040:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	333c      	adds	r3, #60	; 0x3c
 8004064:	3304      	adds	r3, #4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d17b      	bne.n	800417a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d015      	beq.n	80040b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	4a61      	ldr	r2, [pc, #388]	; (8004214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	f240 80b9 	bls.w	8004208 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80b3 	beq.w	8004208 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	461a      	mov	r2, r3
 80040b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b4:	6093      	str	r3, [r2, #8]
 80040b6:	e0a7      	b.n	8004208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ce:	461a      	mov	r2, r3
 80040d0:	2320      	movs	r3, #32
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	e098      	b.n	8004208 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f040 8093 	bne.w	8004208 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	4a4b      	ldr	r2, [pc, #300]	; (8004214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d90f      	bls.n	800410a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	461a      	mov	r2, r3
 8004102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004106:	6093      	str	r3, [r2, #8]
 8004108:	e07e      	b.n	8004208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	0159      	lsls	r1, r3, #5
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	440b      	add	r3, r1
 800412c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004136:	1ad2      	subs	r2, r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d114      	bne.n	800416c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004154:	461a      	mov	r2, r3
 8004156:	2101      	movs	r1, #1
 8004158:	f002 fbe0 	bl	800691c <USB_EP0_OutStart>
 800415c:	e006      	b.n	800416c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	441a      	add	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	4619      	mov	r1, r3
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f004 fe98 	bl	8008ea8 <HAL_PCD_DataOutStageCallback>
 8004178:	e046      	b.n	8004208 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	4a26      	ldr	r2, [pc, #152]	; (8004218 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d124      	bne.n	80041cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004198:	461a      	mov	r2, r3
 800419a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419e:	6093      	str	r3, [r2, #8]
 80041a0:	e032      	b.n	8004208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b8:	461a      	mov	r2, r3
 80041ba:	2320      	movs	r3, #32
 80041bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	4619      	mov	r1, r3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f004 fe6f 	bl	8008ea8 <HAL_PCD_DataOutStageCallback>
 80041ca:	e01d      	b.n	8004208 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d114      	bne.n	80041fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d108      	bne.n	80041fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041f4:	461a      	mov	r2, r3
 80041f6:	2100      	movs	r1, #0
 80041f8:	f002 fb90 	bl	800691c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	4619      	mov	r1, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f004 fe50 	bl	8008ea8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	4f54300a 	.word	0x4f54300a
 8004218:	4f54310a 	.word	0x4f54310a

0800421c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	333c      	adds	r3, #60	; 0x3c
 8004234:	3304      	adds	r3, #4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d90e      	bls.n	8004270 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004258:	2b00      	cmp	r3, #0
 800425a:	d009      	beq.n	8004270 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004268:	461a      	mov	r2, r3
 800426a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f004 fe07 	bl	8008e84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d90c      	bls.n	8004298 <PCD_EP_OutSetupPacket_int+0x7c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d108      	bne.n	8004298 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004290:	461a      	mov	r2, r3
 8004292:	2101      	movs	r1, #1
 8004294:	f002 fb42 	bl	800691c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	4f54300a 	.word	0x4f54300a

080042a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
 80042b4:	4613      	mov	r3, r2
 80042b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042c6:	883b      	ldrh	r3, [r7, #0]
 80042c8:	0419      	lsls	r1, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28
 80042d4:	e028      	b.n	8004328 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4413      	add	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]
 80042e8:	e00d      	b.n	8004306 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	3340      	adds	r3, #64	; 0x40
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4413      	add	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	3301      	adds	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	3b01      	subs	r3, #1
 800430c:	429a      	cmp	r2, r3
 800430e:	d3ec      	bcc.n	80042ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004310:	883b      	ldrh	r3, [r7, #0]
 8004312:	0418      	lsls	r0, r3, #16
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	3b01      	subs	r3, #1
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	4302      	orrs	r2, r0
 8004320:	3340      	adds	r3, #64	; 0x40
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e267      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d075      	beq.n	800447a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438e:	4b88      	ldr	r3, [pc, #544]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439a:	4b85      	ldr	r3, [pc, #532]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d112      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a6:	4b82      	ldr	r3, [pc, #520]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	4b7e      	ldr	r3, [pc, #504]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d05b      	beq.n	8004478 <HAL_RCC_OscConfig+0x108>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d157      	bne.n	8004478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e242      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d106      	bne.n	80043e4 <HAL_RCC_OscConfig+0x74>
 80043d6:	4b76      	ldr	r3, [pc, #472]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a75      	ldr	r2, [pc, #468]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e01d      	b.n	8004420 <HAL_RCC_OscConfig+0xb0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x98>
 80043ee:	4b70      	ldr	r3, [pc, #448]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a6f      	ldr	r2, [pc, #444]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b6d      	ldr	r3, [pc, #436]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6c      	ldr	r2, [pc, #432]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0xb0>
 8004408:	4b69      	ldr	r3, [pc, #420]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a68      	ldr	r2, [pc, #416]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b66      	ldr	r3, [pc, #408]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a65      	ldr	r2, [pc, #404]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fd f940 	bl	80016ac <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004430:	f7fd f93c 	bl	80016ac <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e207      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	4b5b      	ldr	r3, [pc, #364]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0xc0>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fd f92c 	bl	80016ac <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fd f928 	bl	80016ac <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1f3      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	4b51      	ldr	r3, [pc, #324]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0xe8>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d063      	beq.n	800454e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004486:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004492:	4b47      	ldr	r3, [pc, #284]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449a:	2b08      	cmp	r3, #8
 800449c:	d11c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449e:	4b44      	ldr	r3, [pc, #272]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RCC_OscConfig+0x152>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1c7      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	4b3b      	ldr	r3, [pc, #236]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4937      	ldr	r1, [pc, #220]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	e03a      	b.n	800454e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e0:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <HAL_RCC_OscConfig+0x244>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7fd f8e1 	bl	80016ac <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ee:	f7fd f8dd 	bl	80016ac <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1a8      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450c:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4925      	ldr	r1, [pc, #148]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
 8004520:	e015      	b.n	800454e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004522:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_RCC_OscConfig+0x244>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fd f8c0 	bl	80016ac <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004530:	f7fd f8bc 	bl	80016ac <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e187      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d036      	beq.n	80045c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <HAL_RCC_OscConfig+0x248>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fd f8a0 	bl	80016ac <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004570:	f7fd f89c 	bl	80016ac <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e167      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x200>
 800458e:	e01b      	b.n	80045c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004590:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_RCC_OscConfig+0x248>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7fd f889 	bl	80016ac <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459c:	e00e      	b.n	80045bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459e:	f7fd f885 	bl	80016ac <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d907      	bls.n	80045bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e150      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
 80045b0:	40023800 	.word	0x40023800
 80045b4:	42470000 	.word	0x42470000
 80045b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045bc:	4b88      	ldr	r3, [pc, #544]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ea      	bne.n	800459e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8097 	beq.w	8004704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045da:	4b81      	ldr	r3, [pc, #516]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	4b7d      	ldr	r3, [pc, #500]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	4a7c      	ldr	r2, [pc, #496]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f4:	6413      	str	r3, [r2, #64]	; 0x40
 80045f6:	4b7a      	ldr	r3, [pc, #488]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004602:	2301      	movs	r3, #1
 8004604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004606:	4b77      	ldr	r3, [pc, #476]	; (80047e4 <HAL_RCC_OscConfig+0x474>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d118      	bne.n	8004644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004612:	4b74      	ldr	r3, [pc, #464]	; (80047e4 <HAL_RCC_OscConfig+0x474>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a73      	ldr	r2, [pc, #460]	; (80047e4 <HAL_RCC_OscConfig+0x474>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800461e:	f7fd f845 	bl	80016ac <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004626:	f7fd f841 	bl	80016ac <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e10c      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004638:	4b6a      	ldr	r3, [pc, #424]	; (80047e4 <HAL_RCC_OscConfig+0x474>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d106      	bne.n	800465a <HAL_RCC_OscConfig+0x2ea>
 800464c:	4b64      	ldr	r3, [pc, #400]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	4a63      	ldr	r2, [pc, #396]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6713      	str	r3, [r2, #112]	; 0x70
 8004658:	e01c      	b.n	8004694 <HAL_RCC_OscConfig+0x324>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2b05      	cmp	r3, #5
 8004660:	d10c      	bne.n	800467c <HAL_RCC_OscConfig+0x30c>
 8004662:	4b5f      	ldr	r3, [pc, #380]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	4a5e      	ldr	r2, [pc, #376]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004668:	f043 0304 	orr.w	r3, r3, #4
 800466c:	6713      	str	r3, [r2, #112]	; 0x70
 800466e:	4b5c      	ldr	r3, [pc, #368]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	4a5b      	ldr	r2, [pc, #364]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6713      	str	r3, [r2, #112]	; 0x70
 800467a:	e00b      	b.n	8004694 <HAL_RCC_OscConfig+0x324>
 800467c:	4b58      	ldr	r3, [pc, #352]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	4a57      	ldr	r2, [pc, #348]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	6713      	str	r3, [r2, #112]	; 0x70
 8004688:	4b55      	ldr	r3, [pc, #340]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	4a54      	ldr	r2, [pc, #336]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 800468e:	f023 0304 	bic.w	r3, r3, #4
 8004692:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d015      	beq.n	80046c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fd f806 	bl	80016ac <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a4:	f7fd f802 	bl	80016ac <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0cb      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ba:	4b49      	ldr	r3, [pc, #292]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0ee      	beq.n	80046a4 <HAL_RCC_OscConfig+0x334>
 80046c6:	e014      	b.n	80046f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c8:	f7fc fff0 	bl	80016ac <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d0:	f7fc ffec 	bl	80016ac <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	; 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0b5      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e6:	4b3e      	ldr	r3, [pc, #248]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ee      	bne.n	80046d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f8:	4b39      	ldr	r3, [pc, #228]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	4a38      	ldr	r2, [pc, #224]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004702:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80a1 	beq.w	8004850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800470e:	4b34      	ldr	r3, [pc, #208]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b08      	cmp	r3, #8
 8004718:	d05c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d141      	bne.n	80047a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004722:	4b31      	ldr	r3, [pc, #196]	; (80047e8 <HAL_RCC_OscConfig+0x478>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fc ffc0 	bl	80016ac <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004730:	f7fc ffbc 	bl	80016ac <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e087      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	019b      	lsls	r3, r3, #6
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	491b      	ldr	r1, [pc, #108]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004778:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <HAL_RCC_OscConfig+0x478>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fc ff95 	bl	80016ac <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fc ff91 	bl	80016ac <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e05c      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004798:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x416>
 80047a4:	e054      	b.n	8004850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <HAL_RCC_OscConfig+0x478>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fc ff7e 	bl	80016ac <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fc ff7a 	bl	80016ac <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e045      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_RCC_OscConfig+0x470>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x444>
 80047d2:	e03d      	b.n	8004850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d107      	bne.n	80047ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e038      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
 80047e0:	40023800 	.word	0x40023800
 80047e4:	40007000 	.word	0x40007000
 80047e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x4ec>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d028      	beq.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d121      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d11a      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004824:	4293      	cmp	r3, r2
 8004826:	d111      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	3b01      	subs	r3, #1
 8004836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d107      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800

08004860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0cc      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004874:	4b68      	ldr	r3, [pc, #416]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d90c      	bls.n	800489c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	4b65      	ldr	r3, [pc, #404]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b63      	ldr	r3, [pc, #396]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0b8      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b4:	4b59      	ldr	r3, [pc, #356]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a58      	ldr	r2, [pc, #352]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048cc:	4b53      	ldr	r3, [pc, #332]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a52      	ldr	r2, [pc, #328]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d8:	4b50      	ldr	r3, [pc, #320]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	494d      	ldr	r1, [pc, #308]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d044      	beq.n	8004980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d107      	bne.n	800490e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	4b47      	ldr	r3, [pc, #284]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d119      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e07f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d003      	beq.n	800491e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491a:	2b03      	cmp	r3, #3
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e06f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492e:	4b3b      	ldr	r3, [pc, #236]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e067      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493e:	4b37      	ldr	r3, [pc, #220]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 0203 	bic.w	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4934      	ldr	r1, [pc, #208]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004950:	f7fc feac 	bl	80016ac <HAL_GetTick>
 8004954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	e00a      	b.n	800496e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004958:	f7fc fea8 	bl	80016ac <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e04f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	4b2b      	ldr	r3, [pc, #172]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 020c 	and.w	r2, r3, #12
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	429a      	cmp	r2, r3
 800497e:	d1eb      	bne.n	8004958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d20c      	bcs.n	80049a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e032      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b4:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4916      	ldr	r1, [pc, #88]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	490e      	ldr	r1, [pc, #56]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049e6:	f000 f821 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80049ea:	4602      	mov	r2, r0
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	490a      	ldr	r1, [pc, #40]	; (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 80049f8:	5ccb      	ldrb	r3, [r1, r3]
 80049fa:	fa22 f303 	lsr.w	r3, r2, r3
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fc fe0c 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023c00 	.word	0x40023c00
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	08009eec 	.word	0x08009eec
 8004a24:	20000000 	.word	0x20000000
 8004a28:	20000014 	.word	0x20000014

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a30:	b090      	sub	sp, #64	; 0x40
 8004a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
 8004a38:	2300      	movs	r3, #0
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a44:	4b59      	ldr	r3, [pc, #356]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x40>
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	f200 80a1 	bhi.w	8004b98 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x34>
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a5e:	e09b      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a64:	e09b      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a66:	4b53      	ldr	r3, [pc, #332]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a6a:	e098      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a76:	4b4d      	ldr	r3, [pc, #308]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b4a      	ldr	r3, [pc, #296]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	2200      	movs	r2, #0
 8004a8a:	623b      	str	r3, [r7, #32]
 8004a8c:	627a      	str	r2, [r7, #36]	; 0x24
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a94:	2100      	movs	r1, #0
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a98:	fb03 f201 	mul.w	r2, r3, r1
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	fb00 f303 	mul.w	r3, r0, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	4a43      	ldr	r2, [pc, #268]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004aa6:	fba0 1202 	umull	r1, r2, r0, r2
 8004aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aac:	460a      	mov	r2, r1
 8004aae:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab2:	4413      	add	r3, r2
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	2200      	movs	r2, #0
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	61fa      	str	r2, [r7, #28]
 8004abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ac6:	f7fb fbe3 	bl	8000290 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4613      	mov	r3, r2
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad2:	e053      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad4:	4b35      	ldr	r3, [pc, #212]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	2200      	movs	r2, #0
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	617a      	str	r2, [r7, #20]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ae6:	f04f 0b00 	mov.w	fp, #0
 8004aea:	4652      	mov	r2, sl
 8004aec:	465b      	mov	r3, fp
 8004aee:	f04f 0000 	mov.w	r0, #0
 8004af2:	f04f 0100 	mov.w	r1, #0
 8004af6:	0159      	lsls	r1, r3, #5
 8004af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004afc:	0150      	lsls	r0, r2, #5
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	ebb2 080a 	subs.w	r8, r2, sl
 8004b06:	eb63 090b 	sbc.w	r9, r3, fp
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b1e:	ebb2 0408 	subs.w	r4, r2, r8
 8004b22:	eb63 0509 	sbc.w	r5, r3, r9
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	00eb      	lsls	r3, r5, #3
 8004b30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b34:	00e2      	lsls	r2, r4, #3
 8004b36:	4614      	mov	r4, r2
 8004b38:	461d      	mov	r5, r3
 8004b3a:	eb14 030a 	adds.w	r3, r4, sl
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	eb45 030b 	adc.w	r3, r5, fp
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b52:	4629      	mov	r1, r5
 8004b54:	028b      	lsls	r3, r1, #10
 8004b56:	4621      	mov	r1, r4
 8004b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	028a      	lsls	r2, r1, #10
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b66:	2200      	movs	r2, #0
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	60fa      	str	r2, [r7, #12]
 8004b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b70:	f7fb fb8e 	bl	8000290 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4613      	mov	r3, r2
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	3301      	adds	r3, #1
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b96:	e002      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3740      	adds	r7, #64	; 0x40
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	00f42400 	.word	0x00f42400
 8004bb4:	017d7840 	.word	0x017d7840

08004bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000000 	.word	0x20000000

08004bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bd4:	f7ff fff0 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	0a9b      	lsrs	r3, r3, #10
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	4903      	ldr	r1, [pc, #12]	; (8004bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	08009efc 	.word	0x08009efc

08004bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bfc:	f7ff ffdc 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	0b5b      	lsrs	r3, r3, #13
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	4903      	ldr	r1, [pc, #12]	; (8004c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c0e:	5ccb      	ldrb	r3, [r1, r3]
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	08009efc 	.word	0x08009efc

08004c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e03f      	b.n	8004cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fb ff3c 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f829 	bl	8004cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc0:	b0c0      	sub	sp, #256	; 0x100
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	68d9      	ldr	r1, [r3, #12]
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	ea40 0301 	orr.w	r3, r0, r1
 8004ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d14:	f021 010c 	bic.w	r1, r1, #12
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d22:	430b      	orrs	r3, r1
 8004d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d36:	6999      	ldr	r1, [r3, #24]
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	ea40 0301 	orr.w	r3, r0, r1
 8004d42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b8f      	ldr	r3, [pc, #572]	; (8004f88 <UART_SetConfig+0x2cc>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d005      	beq.n	8004d5c <UART_SetConfig+0xa0>
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b8d      	ldr	r3, [pc, #564]	; (8004f8c <UART_SetConfig+0x2d0>)
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d104      	bne.n	8004d66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d5c:	f7ff ff4c 	bl	8004bf8 <HAL_RCC_GetPCLK2Freq>
 8004d60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d64:	e003      	b.n	8004d6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d66:	f7ff ff33 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8004d6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d78:	f040 810c 	bne.w	8004f94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d80:	2200      	movs	r2, #0
 8004d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d8e:	4622      	mov	r2, r4
 8004d90:	462b      	mov	r3, r5
 8004d92:	1891      	adds	r1, r2, r2
 8004d94:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d96:	415b      	adcs	r3, r3
 8004d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d9e:	4621      	mov	r1, r4
 8004da0:	eb12 0801 	adds.w	r8, r2, r1
 8004da4:	4629      	mov	r1, r5
 8004da6:	eb43 0901 	adc.w	r9, r3, r1
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dbe:	4690      	mov	r8, r2
 8004dc0:	4699      	mov	r9, r3
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	eb18 0303 	adds.w	r3, r8, r3
 8004dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dcc:	462b      	mov	r3, r5
 8004dce:	eb49 0303 	adc.w	r3, r9, r3
 8004dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004de2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004de6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dea:	460b      	mov	r3, r1
 8004dec:	18db      	adds	r3, r3, r3
 8004dee:	653b      	str	r3, [r7, #80]	; 0x50
 8004df0:	4613      	mov	r3, r2
 8004df2:	eb42 0303 	adc.w	r3, r2, r3
 8004df6:	657b      	str	r3, [r7, #84]	; 0x54
 8004df8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e00:	f7fb fa46 	bl	8000290 <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4b61      	ldr	r3, [pc, #388]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	011c      	lsls	r4, r3, #4
 8004e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e24:	4642      	mov	r2, r8
 8004e26:	464b      	mov	r3, r9
 8004e28:	1891      	adds	r1, r2, r2
 8004e2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e2c:	415b      	adcs	r3, r3
 8004e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e34:	4641      	mov	r1, r8
 8004e36:	eb12 0a01 	adds.w	sl, r2, r1
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e54:	4692      	mov	sl, r2
 8004e56:	469b      	mov	fp, r3
 8004e58:	4643      	mov	r3, r8
 8004e5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e62:	464b      	mov	r3, r9
 8004e64:	eb4b 0303 	adc.w	r3, fp, r3
 8004e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e80:	460b      	mov	r3, r1
 8004e82:	18db      	adds	r3, r3, r3
 8004e84:	643b      	str	r3, [r7, #64]	; 0x40
 8004e86:	4613      	mov	r3, r2
 8004e88:	eb42 0303 	adc.w	r3, r2, r3
 8004e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e96:	f7fb f9fb 	bl	8000290 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4b3b      	ldr	r3, [pc, #236]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2264      	movs	r2, #100	; 0x64
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	1acb      	subs	r3, r1, r3
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eb6:	4b36      	ldr	r3, [pc, #216]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ec4:	441c      	add	r4, r3
 8004ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ed0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	1891      	adds	r1, r2, r2
 8004ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ee0:	415b      	adcs	r3, r3
 8004ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ee8:	4641      	mov	r1, r8
 8004eea:	1851      	adds	r1, r2, r1
 8004eec:	6339      	str	r1, [r7, #48]	; 0x30
 8004eee:	4649      	mov	r1, r9
 8004ef0:	414b      	adcs	r3, r1
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f00:	4659      	mov	r1, fp
 8004f02:	00cb      	lsls	r3, r1, #3
 8004f04:	4651      	mov	r1, sl
 8004f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	00ca      	lsls	r2, r1, #3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	4619      	mov	r1, r3
 8004f12:	4603      	mov	r3, r0
 8004f14:	4642      	mov	r2, r8
 8004f16:	189b      	adds	r3, r3, r2
 8004f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	460a      	mov	r2, r1
 8004f20:	eb42 0303 	adc.w	r3, r2, r3
 8004f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	18db      	adds	r3, r3, r3
 8004f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f42:	4613      	mov	r3, r2
 8004f44:	eb42 0303 	adc.w	r3, r2, r3
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f52:	f7fb f99d 	bl	8000290 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	2164      	movs	r1, #100	; 0x64
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	3332      	adds	r3, #50	; 0x32
 8004f6e:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	f003 0207 	and.w	r2, r3, #7
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4422      	add	r2, r4
 8004f82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f84:	e106      	b.n	8005194 <UART_SetConfig+0x4d8>
 8004f86:	bf00      	nop
 8004f88:	40011000 	.word	0x40011000
 8004f8c:	40011400 	.word	0x40011400
 8004f90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fa6:	4642      	mov	r2, r8
 8004fa8:	464b      	mov	r3, r9
 8004faa:	1891      	adds	r1, r2, r2
 8004fac:	6239      	str	r1, [r7, #32]
 8004fae:	415b      	adcs	r3, r3
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	1854      	adds	r4, r2, r1
 8004fba:	4649      	mov	r1, r9
 8004fbc:	eb43 0501 	adc.w	r5, r3, r1
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	00eb      	lsls	r3, r5, #3
 8004fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fce:	00e2      	lsls	r2, r4, #3
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	461d      	mov	r5, r3
 8004fd4:	4643      	mov	r3, r8
 8004fd6:	18e3      	adds	r3, r4, r3
 8004fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fdc:	464b      	mov	r3, r9
 8004fde:	eb45 0303 	adc.w	r3, r5, r3
 8004fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005002:	4629      	mov	r1, r5
 8005004:	008b      	lsls	r3, r1, #2
 8005006:	4621      	mov	r1, r4
 8005008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500c:	4621      	mov	r1, r4
 800500e:	008a      	lsls	r2, r1, #2
 8005010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005014:	f7fb f93c 	bl	8000290 <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4b60      	ldr	r3, [pc, #384]	; (80051a0 <UART_SetConfig+0x4e4>)
 800501e:	fba3 2302 	umull	r2, r3, r3, r2
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	011c      	lsls	r4, r3, #4
 8005026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005030:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	1891      	adds	r1, r2, r2
 800503e:	61b9      	str	r1, [r7, #24]
 8005040:	415b      	adcs	r3, r3
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005048:	4641      	mov	r1, r8
 800504a:	1851      	adds	r1, r2, r1
 800504c:	6139      	str	r1, [r7, #16]
 800504e:	4649      	mov	r1, r9
 8005050:	414b      	adcs	r3, r1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005060:	4659      	mov	r1, fp
 8005062:	00cb      	lsls	r3, r1, #3
 8005064:	4651      	mov	r1, sl
 8005066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506a:	4651      	mov	r1, sl
 800506c:	00ca      	lsls	r2, r1, #3
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	4603      	mov	r3, r0
 8005074:	4642      	mov	r2, r8
 8005076:	189b      	adds	r3, r3, r2
 8005078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800507c:	464b      	mov	r3, r9
 800507e:	460a      	mov	r2, r1
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	67bb      	str	r3, [r7, #120]	; 0x78
 8005092:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050a0:	4649      	mov	r1, r9
 80050a2:	008b      	lsls	r3, r1, #2
 80050a4:	4641      	mov	r1, r8
 80050a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050aa:	4641      	mov	r1, r8
 80050ac:	008a      	lsls	r2, r1, #2
 80050ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050b2:	f7fb f8ed 	bl	8000290 <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <UART_SetConfig+0x4e4>)
 80050be:	fba3 2301 	umull	r2, r3, r3, r1
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	2264      	movs	r2, #100	; 0x64
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
 80050ca:	1acb      	subs	r3, r1, r3
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	3332      	adds	r3, #50	; 0x32
 80050d0:	4a33      	ldr	r2, [pc, #204]	; (80051a0 <UART_SetConfig+0x4e4>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050dc:	441c      	add	r4, r3
 80050de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050e2:	2200      	movs	r2, #0
 80050e4:	673b      	str	r3, [r7, #112]	; 0x70
 80050e6:	677a      	str	r2, [r7, #116]	; 0x74
 80050e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050ec:	4642      	mov	r2, r8
 80050ee:	464b      	mov	r3, r9
 80050f0:	1891      	adds	r1, r2, r2
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	415b      	adcs	r3, r3
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050fc:	4641      	mov	r1, r8
 80050fe:	1851      	adds	r1, r2, r1
 8005100:	6039      	str	r1, [r7, #0]
 8005102:	4649      	mov	r1, r9
 8005104:	414b      	adcs	r3, r1
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005114:	4659      	mov	r1, fp
 8005116:	00cb      	lsls	r3, r1, #3
 8005118:	4651      	mov	r1, sl
 800511a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511e:	4651      	mov	r1, sl
 8005120:	00ca      	lsls	r2, r1, #3
 8005122:	4610      	mov	r0, r2
 8005124:	4619      	mov	r1, r3
 8005126:	4603      	mov	r3, r0
 8005128:	4642      	mov	r2, r8
 800512a:	189b      	adds	r3, r3, r2
 800512c:	66bb      	str	r3, [r7, #104]	; 0x68
 800512e:	464b      	mov	r3, r9
 8005130:	460a      	mov	r2, r1
 8005132:	eb42 0303 	adc.w	r3, r2, r3
 8005136:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	663b      	str	r3, [r7, #96]	; 0x60
 8005142:	667a      	str	r2, [r7, #100]	; 0x64
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005150:	4649      	mov	r1, r9
 8005152:	008b      	lsls	r3, r1, #2
 8005154:	4641      	mov	r1, r8
 8005156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800515a:	4641      	mov	r1, r8
 800515c:	008a      	lsls	r2, r1, #2
 800515e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005162:	f7fb f895 	bl	8000290 <__aeabi_uldivmod>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <UART_SetConfig+0x4e4>)
 800516c:	fba3 1302 	umull	r1, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	2164      	movs	r1, #100	; 0x64
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	3332      	adds	r3, #50	; 0x32
 800517e:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <UART_SetConfig+0x4e4>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f003 020f 	and.w	r2, r3, #15
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4422      	add	r2, r4
 8005192:	609a      	str	r2, [r3, #8]
}
 8005194:	bf00      	nop
 8005196:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800519a:	46bd      	mov	sp, r7
 800519c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051a0:	51eb851f 	.word	0x51eb851f

080051a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051a4:	b084      	sub	sp, #16
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	f107 001c 	add.w	r0, r7, #28
 80051b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d122      	bne.n	8005202 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f001 fbee 	bl	80069d8 <USB_CoreReset>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]
 8005200:	e01a      	b.n	8005238 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f001 fbe2 	bl	80069d8 <USB_CoreReset>
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
 800522a:	e005      	b.n	8005238 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	2b01      	cmp	r3, #1
 800523c:	d10b      	bne.n	8005256 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f043 0206 	orr.w	r2, r3, #6
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f043 0220 	orr.w	r2, r3, #32
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005262:	b004      	add	sp, #16
 8005264:	4770      	bx	lr
	...

08005268 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d165      	bne.n	8005348 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4a41      	ldr	r2, [pc, #260]	; (8005384 <USB_SetTurnaroundTime+0x11c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d906      	bls.n	8005292 <USB_SetTurnaroundTime+0x2a>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4a40      	ldr	r2, [pc, #256]	; (8005388 <USB_SetTurnaroundTime+0x120>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d202      	bcs.n	8005292 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800528c:	230f      	movs	r3, #15
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e062      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4a3c      	ldr	r2, [pc, #240]	; (8005388 <USB_SetTurnaroundTime+0x120>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d306      	bcc.n	80052a8 <USB_SetTurnaroundTime+0x40>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4a3b      	ldr	r2, [pc, #236]	; (800538c <USB_SetTurnaroundTime+0x124>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d202      	bcs.n	80052a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052a2:	230e      	movs	r3, #14
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e057      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4a38      	ldr	r2, [pc, #224]	; (800538c <USB_SetTurnaroundTime+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d306      	bcc.n	80052be <USB_SetTurnaroundTime+0x56>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4a37      	ldr	r2, [pc, #220]	; (8005390 <USB_SetTurnaroundTime+0x128>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d202      	bcs.n	80052be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052b8:	230d      	movs	r3, #13
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e04c      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4a33      	ldr	r2, [pc, #204]	; (8005390 <USB_SetTurnaroundTime+0x128>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d306      	bcc.n	80052d4 <USB_SetTurnaroundTime+0x6c>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4a32      	ldr	r2, [pc, #200]	; (8005394 <USB_SetTurnaroundTime+0x12c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d802      	bhi.n	80052d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052ce:	230c      	movs	r3, #12
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	e041      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4a2f      	ldr	r2, [pc, #188]	; (8005394 <USB_SetTurnaroundTime+0x12c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d906      	bls.n	80052ea <USB_SetTurnaroundTime+0x82>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4a2e      	ldr	r2, [pc, #184]	; (8005398 <USB_SetTurnaroundTime+0x130>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d802      	bhi.n	80052ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052e4:	230b      	movs	r3, #11
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e036      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <USB_SetTurnaroundTime+0x130>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d906      	bls.n	8005300 <USB_SetTurnaroundTime+0x98>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4a29      	ldr	r2, [pc, #164]	; (800539c <USB_SetTurnaroundTime+0x134>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d802      	bhi.n	8005300 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052fa:	230a      	movs	r3, #10
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	e02b      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a26      	ldr	r2, [pc, #152]	; (800539c <USB_SetTurnaroundTime+0x134>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d906      	bls.n	8005316 <USB_SetTurnaroundTime+0xae>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <USB_SetTurnaroundTime+0x138>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d202      	bcs.n	8005316 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005310:	2309      	movs	r3, #9
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e020      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <USB_SetTurnaroundTime+0x138>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d306      	bcc.n	800532c <USB_SetTurnaroundTime+0xc4>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4a20      	ldr	r2, [pc, #128]	; (80053a4 <USB_SetTurnaroundTime+0x13c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d802      	bhi.n	800532c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005326:	2308      	movs	r3, #8
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e015      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <USB_SetTurnaroundTime+0x13c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d906      	bls.n	8005342 <USB_SetTurnaroundTime+0xda>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <USB_SetTurnaroundTime+0x140>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d202      	bcs.n	8005342 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800533c:	2307      	movs	r3, #7
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	e00a      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005342:	2306      	movs	r3, #6
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e007      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800534e:	2309      	movs	r3, #9
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	e001      	b.n	8005358 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005354:	2309      	movs	r3, #9
 8005356:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	029b      	lsls	r3, r3, #10
 800536c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005370:	431a      	orrs	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	00d8acbf 	.word	0x00d8acbf
 8005388:	00e4e1c0 	.word	0x00e4e1c0
 800538c:	00f42400 	.word	0x00f42400
 8005390:	01067380 	.word	0x01067380
 8005394:	011a499f 	.word	0x011a499f
 8005398:	01312cff 	.word	0x01312cff
 800539c:	014ca43f 	.word	0x014ca43f
 80053a0:	016e3600 	.word	0x016e3600
 80053a4:	01a6ab1f 	.word	0x01a6ab1f
 80053a8:	01e84800 	.word	0x01e84800

080053ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f043 0201 	orr.w	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d115      	bne.n	800543e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800541e:	2001      	movs	r0, #1
 8005420:	f7fc f950 	bl	80016c4 <HAL_Delay>
      ms++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 fa45 	bl	80068ba <USB_GetMode>
 8005430:	4603      	mov	r3, r0
 8005432:	2b01      	cmp	r3, #1
 8005434:	d01e      	beq.n	8005474 <USB_SetCurrentMode+0x84>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b31      	cmp	r3, #49	; 0x31
 800543a:	d9f0      	bls.n	800541e <USB_SetCurrentMode+0x2e>
 800543c:	e01a      	b.n	8005474 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d115      	bne.n	8005470 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005450:	2001      	movs	r0, #1
 8005452:	f7fc f937 	bl	80016c4 <HAL_Delay>
      ms++;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3301      	adds	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f001 fa2c 	bl	80068ba <USB_GetMode>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <USB_SetCurrentMode+0x84>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b31      	cmp	r3, #49	; 0x31
 800546c:	d9f0      	bls.n	8005450 <USB_SetCurrentMode+0x60>
 800546e:	e001      	b.n	8005474 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e005      	b.n	8005480 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b32      	cmp	r3, #50	; 0x32
 8005478:	d101      	bne.n	800547e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005488:	b084      	sub	sp, #16
 800548a:	b580      	push	{r7, lr}
 800548c:	b086      	sub	sp, #24
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	e009      	b.n	80054bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	3340      	adds	r3, #64	; 0x40
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	2200      	movs	r2, #0
 80054b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	3301      	adds	r3, #1
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b0e      	cmp	r3, #14
 80054c0:	d9f2      	bls.n	80054a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d11c      	bne.n	8005502 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d6:	f043 0302 	orr.w	r3, r3, #2
 80054da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	639a      	str	r2, [r3, #56]	; 0x38
 8005500:	e00b      	b.n	800551a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005520:	461a      	mov	r2, r3
 8005522:	2300      	movs	r3, #0
 8005524:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552c:	4619      	mov	r1, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	461a      	mov	r2, r3
 8005536:	680b      	ldr	r3, [r1, #0]
 8005538:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	2b01      	cmp	r3, #1
 800553e:	d10c      	bne.n	800555a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d104      	bne.n	8005550 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005546:	2100      	movs	r1, #0
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f965 	bl	8005818 <USB_SetDevSpeed>
 800554e:	e008      	b.n	8005562 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005550:	2101      	movs	r1, #1
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f960 	bl	8005818 <USB_SetDevSpeed>
 8005558:	e003      	b.n	8005562 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800555a:	2103      	movs	r1, #3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f95b 	bl	8005818 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005562:	2110      	movs	r1, #16
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f8f3 	bl	8005750 <USB_FlushTxFifo>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f91f 	bl	80057b8 <USB_FlushRxFifo>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	461a      	mov	r2, r3
 800558c:	2300      	movs	r3, #0
 800558e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005596:	461a      	mov	r2, r3
 8005598:	2300      	movs	r3, #0
 800559a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	461a      	mov	r2, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055a8:	2300      	movs	r3, #0
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	e043      	b.n	8005636 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055c4:	d118      	bne.n	80055f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	461a      	mov	r2, r3
 80055da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	e013      	b.n	800560a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ee:	461a      	mov	r2, r3
 80055f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e008      	b.n	800560a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	461a      	mov	r2, r3
 8005606:	2300      	movs	r3, #0
 8005608:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005616:	461a      	mov	r2, r3
 8005618:	2300      	movs	r3, #0
 800561a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	461a      	mov	r2, r3
 800562a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800562e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	3301      	adds	r3, #1
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	429a      	cmp	r2, r3
 800563c:	d3b7      	bcc.n	80055ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	e043      	b.n	80056cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800565a:	d118      	bne.n	800568e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566e:	461a      	mov	r2, r3
 8005670:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e013      	b.n	80056a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	461a      	mov	r2, r3
 8005686:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	e008      	b.n	80056a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	461a      	mov	r2, r3
 800569c:	2300      	movs	r3, #0
 800569e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	461a      	mov	r2, r3
 80056ae:	2300      	movs	r3, #0
 80056b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	461a      	mov	r2, r3
 80056c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	3301      	adds	r3, #1
 80056ca:	613b      	str	r3, [r7, #16]
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d3b7      	bcc.n	8005644 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	f043 0210 	orr.w	r2, r3, #16
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	4b0f      	ldr	r3, [pc, #60]	; (800574c <USB_DevInit+0x2c4>)
 800570e:	4313      	orrs	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f043 0208 	orr.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d107      	bne.n	800573c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005734:	f043 0304 	orr.w	r3, r3, #4
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800573c:	7dfb      	ldrb	r3, [r7, #23]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005748:	b004      	add	sp, #16
 800574a:	4770      	bx	lr
 800574c:	803c3800 	.word	0x803c3800

08005750 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3301      	adds	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <USB_FlushTxFifo+0x64>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e01b      	b.n	80057a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	daf2      	bge.n	800575e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	019b      	lsls	r3, r3, #6
 8005780:	f043 0220 	orr.w	r2, r3, #32
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <USB_FlushTxFifo+0x64>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e006      	b.n	80057a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d0f0      	beq.n	8005788 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	00030d40 	.word	0x00030d40

080057b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3301      	adds	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4a11      	ldr	r2, [pc, #68]	; (8005814 <USB_FlushRxFifo+0x5c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e018      	b.n	8005808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	daf2      	bge.n	80057c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2210      	movs	r2, #16
 80057e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4a08      	ldr	r2, [pc, #32]	; (8005814 <USB_FlushRxFifo+0x5c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e006      	b.n	8005808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b10      	cmp	r3, #16
 8005804:	d0f0      	beq.n	80057e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	00030d40 	.word	0x00030d40

08005818 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	68f9      	ldr	r1, [r7, #12]
 8005834:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005838:	4313      	orrs	r3, r2
 800583a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800584a:	b480      	push	{r7}
 800584c:	b087      	sub	sp, #28
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 0306 	and.w	r3, r3, #6
 8005862:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d102      	bne.n	8005870 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800586a:	2300      	movs	r3, #0
 800586c:	75fb      	strb	r3, [r7, #23]
 800586e:	e00a      	b.n	8005886 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d002      	beq.n	800587c <USB_GetDevSpeed+0x32>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b06      	cmp	r3, #6
 800587a:	d102      	bne.n	8005882 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800587c:	2302      	movs	r3, #2
 800587e:	75fb      	strb	r3, [r7, #23]
 8005880:	e001      	b.n	8005886 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005882:	230f      	movs	r3, #15
 8005884:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	785b      	ldrb	r3, [r3, #1]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d13a      	bne.n	8005926 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	2101      	movs	r1, #1
 80058c2:	fa01 f303 	lsl.w	r3, r1, r3
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	68f9      	ldr	r1, [r7, #12]
 80058ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d155      	bne.n	8005994 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	791b      	ldrb	r3, [r3, #4]
 8005902:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005904:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	059b      	lsls	r3, r3, #22
 800590a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800590c:	4313      	orrs	r3, r2
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	e036      	b.n	8005994 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	2101      	movs	r1, #1
 8005938:	fa01 f303 	lsl.w	r3, r1, r3
 800593c:	041b      	lsls	r3, r3, #16
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005944:	4313      	orrs	r3, r2
 8005946:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11a      	bne.n	8005994 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	791b      	ldrb	r3, [r3, #4]
 8005978:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800597a:	430b      	orrs	r3, r1
 800597c:	4313      	orrs	r3, r2
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d161      	bne.n	8005a84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d6:	d11f      	bne.n	8005a18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	2101      	movs	r1, #1
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	68f9      	ldr	r1, [r7, #12]
 8005a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a38:	4013      	ands	r3, r2
 8005a3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	43db      	mvns	r3, r3
 8005a56:	68f9      	ldr	r1, [r7, #12]
 8005a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	0159      	lsls	r1, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	440b      	add	r3, r1
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4b35      	ldr	r3, [pc, #212]	; (8005b54 <USB_DeactivateEndpoint+0x1b0>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]
 8005a82:	e060      	b.n	8005b46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a9a:	d11f      	bne.n	8005adc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005aba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ada:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	2101      	movs	r1, #1
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	43db      	mvns	r3, r3
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005afc:	4013      	ands	r3, r2
 8005afe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	2101      	movs	r1, #1
 8005b12:	fa01 f303 	lsl.w	r3, r1, r3
 8005b16:	041b      	lsls	r3, r3, #16
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	68f9      	ldr	r1, [r7, #12]
 8005b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b20:	4013      	ands	r3, r2
 8005b22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	0159      	lsls	r1, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	440b      	add	r3, r1
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <USB_DeactivateEndpoint+0x1b4>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	ec337800 	.word	0xec337800
 8005b58:	eff37800 	.word	0xeff37800

08005b5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	; 0x28
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	f040 815c 	bne.w	8005e36 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d132      	bne.n	8005bec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ba4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ba8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be4:	0cdb      	lsrs	r3, r3, #19
 8005be6:	04db      	lsls	r3, r3, #19
 8005be8:	6113      	str	r3, [r2, #16]
 8005bea:	e074      	b.n	8005cd6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c06:	0cdb      	lsrs	r3, r3, #19
 8005c08:	04db      	lsls	r3, r3, #19
 8005c0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6999      	ldr	r1, [r3, #24]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	440b      	add	r3, r1
 8005c48:	1e59      	subs	r1, r3, #1
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c52:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c54:	4b9d      	ldr	r3, [pc, #628]	; (8005ecc <USB_EPStartXfer+0x370>)
 8005c56:	400b      	ands	r3, r1
 8005c58:	69b9      	ldr	r1, [r7, #24]
 8005c5a:	0148      	lsls	r0, r1, #5
 8005c5c:	69f9      	ldr	r1, [r7, #28]
 8005c5e:	4401      	add	r1, r0
 8005c60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c64:	4313      	orrs	r3, r2
 8005c66:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c7e:	69b9      	ldr	r1, [r7, #24]
 8005c80:	0148      	lsls	r0, r1, #5
 8005c82:	69f9      	ldr	r1, [r7, #28]
 8005c84:	4401      	add	r1, r0
 8005c86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	791b      	ldrb	r3, [r3, #4]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d11f      	bne.n	8005cd6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cd4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d14b      	bne.n	8005d74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d009      	beq.n	8005cf8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	791b      	ldrb	r3, [r3, #4]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d128      	bne.n	8005d52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d110      	bne.n	8005d32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	e00f      	b.n	8005d52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	e133      	b.n	8005fdc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	791b      	ldrb	r3, [r3, #4]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d015      	beq.n	8005dc8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 811b 	beq.w	8005fdc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	2101      	movs	r1, #1
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	69f9      	ldr	r1, [r7, #28]
 8005dbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	634b      	str	r3, [r1, #52]	; 0x34
 8005dc6:	e109      	b.n	8005fdc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d110      	bne.n	8005dfa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	e00f      	b.n	8005e1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6919      	ldr	r1, [r3, #16]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	b298      	uxth	r0, r3
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fade 	bl	80063f0 <USB_WritePacket>
 8005e34:	e0d2      	b.n	8005fdc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e50:	0cdb      	lsrs	r3, r3, #19
 8005e52:	04db      	lsls	r3, r3, #19
 8005e54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d126      	bne.n	8005ed0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e98:	69b9      	ldr	r1, [r7, #24]
 8005e9a:	0148      	lsls	r0, r1, #5
 8005e9c:	69f9      	ldr	r1, [r7, #28]
 8005e9e:	4401      	add	r1, r0
 8005ea0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ec6:	6113      	str	r3, [r2, #16]
 8005ec8:	e03a      	b.n	8005f40 <USB_EPStartXfer+0x3e4>
 8005eca:	bf00      	nop
 8005ecc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	699a      	ldr	r2, [r3, #24]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	1e5a      	subs	r2, r3, #1
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	8afa      	ldrh	r2, [r7, #22]
 8005eec:	fb03 f202 	mul.w	r2, r3, r2
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	8afb      	ldrh	r3, [r7, #22]
 8005f04:	04d9      	lsls	r1, r3, #19
 8005f06:	4b38      	ldr	r3, [pc, #224]	; (8005fe8 <USB_EPStartXfer+0x48c>)
 8005f08:	400b      	ands	r3, r1
 8005f0a:	69b9      	ldr	r1, [r7, #24]
 8005f0c:	0148      	lsls	r0, r1, #5
 8005f0e:	69f9      	ldr	r1, [r7, #28]
 8005f10:	4401      	add	r1, r0
 8005f12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f16:	4313      	orrs	r3, r2
 8005f18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f30:	69b9      	ldr	r1, [r7, #24]
 8005f32:	0148      	lsls	r0, r1, #5
 8005f34:	69f9      	ldr	r1, [r7, #28]
 8005f36:	4401      	add	r1, r0
 8005f38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d10d      	bne.n	8005f62 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	6919      	ldr	r1, [r3, #16]
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	460a      	mov	r2, r1
 8005f60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	791b      	ldrb	r3, [r3, #4]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d128      	bne.n	8005fbc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d110      	bne.n	8005f9c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	e00f      	b.n	8005fbc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3720      	adds	r7, #32
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	1ff80000 	.word	0x1ff80000

08005fec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	785b      	ldrb	r3, [r3, #1]
 8006008:	2b01      	cmp	r3, #1
 800600a:	f040 80ce 	bne.w	80061aa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d132      	bne.n	800607c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	440a      	add	r2, r1
 800602c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006030:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006034:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006058:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006074:	0cdb      	lsrs	r3, r3, #19
 8006076:	04db      	lsls	r3, r3, #19
 8006078:	6113      	str	r3, [r2, #16]
 800607a:	e04e      	b.n	800611a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006096:	0cdb      	lsrs	r3, r3, #19
 8006098:	04db      	lsls	r3, r3, #19
 800609a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	699a      	ldr	r2, [r3, #24]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d903      	bls.n	80060d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800610a:	6939      	ldr	r1, [r7, #16]
 800610c:	0148      	lsls	r0, r1, #5
 800610e:	6979      	ldr	r1, [r7, #20]
 8006110:	4401      	add	r1, r0
 8006112:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006116:	4313      	orrs	r3, r2
 8006118:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d11e      	bne.n	800615e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	461a      	mov	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006156:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e097      	b.n	800628e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006178:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800617c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8083 	beq.w	800628e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	2101      	movs	r1, #1
 800619a:	fa01 f303 	lsl.w	r3, r1, r3
 800619e:	6979      	ldr	r1, [r7, #20]
 80061a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a4:	4313      	orrs	r3, r2
 80061a6:	634b      	str	r3, [r1, #52]	; 0x34
 80061a8:	e071      	b.n	800628e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c4:	0cdb      	lsrs	r3, r3, #19
 80061c6:	04db      	lsls	r3, r3, #19
 80061c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800623c:	6939      	ldr	r1, [r7, #16]
 800623e:	0148      	lsls	r0, r1, #5
 8006240:	6979      	ldr	r1, [r7, #20]
 8006242:	4401      	add	r1, r0
 8006244:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006248:	4313      	orrs	r3, r2
 800624a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d10d      	bne.n	800626e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6919      	ldr	r1, [r3, #16]
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	460a      	mov	r2, r1
 800626c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	440a      	add	r2, r1
 8006284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006288:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800628c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d14a      	bne.n	8006350 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062d2:	f040 8086 	bne.w	80063e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	7812      	ldrb	r2, [r2, #0]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	7812      	ldrb	r2, [r2, #0]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800631c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3301      	adds	r3, #1
 8006322:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f242 7210 	movw	r2, #10000	; 0x2710
 800632a:	4293      	cmp	r3, r2
 800632c:	d902      	bls.n	8006334 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	75fb      	strb	r3, [r7, #23]
          break;
 8006332:	e056      	b.n	80063e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800634c:	d0e7      	beq.n	800631e <USB_EPStopXfer+0x82>
 800634e:	e048      	b.n	80063e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006368:	d13b      	bne.n	80063e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	7812      	ldrb	r2, [r2, #0]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006388:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800638c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80063be:	4293      	cmp	r3, r2
 80063c0:	d902      	bls.n	80063c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	75fb      	strb	r3, [r7, #23]
          break;
 80063c6:	e00c      	b.n	80063e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e0:	d0e7      	beq.n	80063b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b089      	sub	sp, #36	; 0x24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	4611      	mov	r1, r2
 80063fc:	461a      	mov	r2, r3
 80063fe:	460b      	mov	r3, r1
 8006400:	71fb      	strb	r3, [r7, #7]
 8006402:	4613      	mov	r3, r2
 8006404:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800640e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006412:	2b00      	cmp	r3, #0
 8006414:	d123      	bne.n	800645e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006416:	88bb      	ldrh	r3, [r7, #4]
 8006418:	3303      	adds	r3, #3
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800641e:	2300      	movs	r3, #0
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	e018      	b.n	8006456 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	031a      	lsls	r2, r3, #12
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	4413      	add	r3, r2
 800642c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006430:	461a      	mov	r2, r3
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	3301      	adds	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3301      	adds	r3, #1
 8006442:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	3301      	adds	r3, #1
 8006448:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	3301      	adds	r3, #1
 800644e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	3301      	adds	r3, #1
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	429a      	cmp	r2, r3
 800645c:	d3e2      	bcc.n	8006424 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3724      	adds	r7, #36	; 0x24
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800646c:	b480      	push	{r7}
 800646e:	b08b      	sub	sp, #44	; 0x2c
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	4613      	mov	r3, r2
 8006478:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	089b      	lsrs	r3, r3, #2
 8006486:	b29b      	uxth	r3, r3
 8006488:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006492:	2300      	movs	r3, #0
 8006494:	623b      	str	r3, [r7, #32]
 8006496:	e014      	b.n	80064c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	3301      	adds	r3, #1
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	3301      	adds	r3, #1
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	3301      	adds	r3, #1
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	3301      	adds	r3, #1
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	3301      	adds	r3, #1
 80064c0:	623b      	str	r3, [r7, #32]
 80064c2:	6a3a      	ldr	r2, [r7, #32]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d3e6      	bcc.n	8006498 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064ca:	8bfb      	ldrh	r3, [r7, #30]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01e      	beq.n	800650e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064da:	461a      	mov	r2, r3
 80064dc:	f107 0310 	add.w	r3, r7, #16
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	701a      	strb	r2, [r3, #0]
      i++;
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	3301      	adds	r3, #1
 80064fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	3301      	adds	r3, #1
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006502:	8bfb      	ldrh	r3, [r7, #30]
 8006504:	3b01      	subs	r3, #1
 8006506:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006508:	8bfb      	ldrh	r3, [r7, #30]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1ea      	bne.n	80064e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006510:	4618      	mov	r0, r3
 8006512:	372c      	adds	r7, #44	; 0x2c
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d12c      	bne.n	8006592 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	db12      	blt.n	8006570 <USB_EPSetStall+0x54>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00f      	beq.n	8006570 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	440a      	add	r2, r1
 8006566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800656e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e02b      	b.n	80065ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	db12      	blt.n	80065ca <USB_EPSetStall+0xae>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00f      	beq.n	80065ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	0151      	lsls	r1, r2, #5
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	440a      	add	r2, r1
 80065e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d128      	bne.n	8006666 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006632:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	791b      	ldrb	r3, [r3, #4]
 8006638:	2b03      	cmp	r3, #3
 800663a:	d003      	beq.n	8006644 <USB_EPClearStall+0x4c>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	791b      	ldrb	r3, [r3, #4]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d138      	bne.n	80066b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	440a      	add	r2, r1
 800665a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e027      	b.n	80066b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006680:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006684:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	791b      	ldrb	r3, [r3, #4]
 800668a:	2b03      	cmp	r3, #3
 800668c:	d003      	beq.n	8006696 <USB_EPClearStall+0x9e>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	791b      	ldrb	r3, [r3, #4]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d10f      	bne.n	80066b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066f8:	68f9      	ldr	r1, [r7, #12]
 80066fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066fe:	4313      	orrs	r3, r2
 8006700:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673e:	f023 0302 	bic.w	r3, r3, #2
 8006742:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800676c:	f023 0303 	bic.w	r3, r3, #3
 8006770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006780:	f043 0302 	orr.w	r3, r3, #2
 8006784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4013      	ands	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067ac:	68fb      	ldr	r3, [r7, #12]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	4013      	ands	r3, r2
 80067dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	0c1b      	lsrs	r3, r3, #16
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	b29b      	uxth	r3, r3
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	4013      	ands	r3, r2
 800684e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006850:	68bb      	ldr	r3, [r7, #8]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800685e:	b480      	push	{r7}
 8006860:	b087      	sub	sp, #28
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006880:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	01db      	lsls	r3, r3, #7
 8006890:	b2db      	uxtb	r3, r3
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4013      	ands	r3, r2
 80068aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068ac:	68bb      	ldr	r3, [r7, #8]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0301 	and.w	r3, r3, #1
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068f4:	f023 0307 	bic.w	r3, r3, #7
 80068f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	460b      	mov	r3, r1
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	333c      	adds	r3, #60	; 0x3c
 8006932:	3304      	adds	r3, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4a26      	ldr	r2, [pc, #152]	; (80069d4 <USB_EP0_OutStart+0xb8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d90a      	bls.n	8006956 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800694c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006950:	d101      	bne.n	8006956 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e037      	b.n	80069c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	461a      	mov	r2, r3
 800695e:	2300      	movs	r3, #0
 8006960:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006984:	f043 0318 	orr.w	r3, r3, #24
 8006988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006998:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800699c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800699e:	7afb      	ldrb	r3, [r7, #11]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d10f      	bne.n	80069c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	461a      	mov	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	4f54300a 	.word	0x4f54300a

080069d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3301      	adds	r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a13      	ldr	r2, [pc, #76]	; (8006a3c <USB_CoreReset+0x64>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d901      	bls.n	80069f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e01b      	b.n	8006a2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	daf2      	bge.n	80069e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f043 0201 	orr.w	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3301      	adds	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4a09      	ldr	r2, [pc, #36]	; (8006a3c <USB_CoreReset+0x64>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d901      	bls.n	8006a20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e006      	b.n	8006a2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d0f0      	beq.n	8006a0e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	00030d40 	.word	0x00030d40

08006a40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a50:	f002 fc8a 	bl	8009368 <USBD_static_malloc>
 8006a54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d109      	bne.n	8006a70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	32b0      	adds	r2, #176	; 0xb0
 8006a66:	2100      	movs	r1, #0
 8006a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e0d4      	b.n	8006c1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a70:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006a74:	2100      	movs	r1, #0
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f002 fd96 	bl	80095a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	32b0      	adds	r2, #176	; 0xb0
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	32b0      	adds	r2, #176	; 0xb0
 8006a96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	7c1b      	ldrb	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d138      	bne.n	8006b1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006aa8:	4b5e      	ldr	r3, [pc, #376]	; (8006c24 <USBD_CDC_Init+0x1e4>)
 8006aaa:	7819      	ldrb	r1, [r3, #0]
 8006aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f002 fb35 	bl	8009122 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ab8:	4b5a      	ldr	r3, [pc, #360]	; (8006c24 <USBD_CDC_Init+0x1e4>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	f003 020f 	and.w	r2, r3, #15
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	3324      	adds	r3, #36	; 0x24
 8006ace:	2201      	movs	r2, #1
 8006ad0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ad2:	4b55      	ldr	r3, [pc, #340]	; (8006c28 <USBD_CDC_Init+0x1e8>)
 8006ad4:	7819      	ldrb	r1, [r3, #0]
 8006ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ada:	2202      	movs	r2, #2
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f002 fb20 	bl	8009122 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ae2:	4b51      	ldr	r3, [pc, #324]	; (8006c28 <USBD_CDC_Init+0x1e8>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f003 020f 	and.w	r2, r3, #15
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006afa:	2201      	movs	r2, #1
 8006afc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006afe:	4b4b      	ldr	r3, [pc, #300]	; (8006c2c <USBD_CDC_Init+0x1ec>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f003 020f 	and.w	r2, r3, #15
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	3326      	adds	r3, #38	; 0x26
 8006b14:	2210      	movs	r2, #16
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	e035      	b.n	8006b86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b1a:	4b42      	ldr	r3, [pc, #264]	; (8006c24 <USBD_CDC_Init+0x1e4>)
 8006b1c:	7819      	ldrb	r1, [r3, #0]
 8006b1e:	2340      	movs	r3, #64	; 0x40
 8006b20:	2202      	movs	r2, #2
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f002 fafd 	bl	8009122 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b28:	4b3e      	ldr	r3, [pc, #248]	; (8006c24 <USBD_CDC_Init+0x1e4>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	3324      	adds	r3, #36	; 0x24
 8006b3e:	2201      	movs	r2, #1
 8006b40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b42:	4b39      	ldr	r3, [pc, #228]	; (8006c28 <USBD_CDC_Init+0x1e8>)
 8006b44:	7819      	ldrb	r1, [r3, #0]
 8006b46:	2340      	movs	r3, #64	; 0x40
 8006b48:	2202      	movs	r2, #2
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f002 fae9 	bl	8009122 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b50:	4b35      	ldr	r3, [pc, #212]	; (8006c28 <USBD_CDC_Init+0x1e8>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 020f 	and.w	r2, r3, #15
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b68:	2201      	movs	r2, #1
 8006b6a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b6c:	4b2f      	ldr	r3, [pc, #188]	; (8006c2c <USBD_CDC_Init+0x1ec>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f003 020f 	and.w	r2, r3, #15
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	3326      	adds	r3, #38	; 0x26
 8006b82:	2210      	movs	r2, #16
 8006b84:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b86:	4b29      	ldr	r3, [pc, #164]	; (8006c2c <USBD_CDC_Init+0x1ec>)
 8006b88:	7819      	ldrb	r1, [r3, #0]
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f002 fac7 	bl	8009122 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b94:	4b25      	ldr	r3, [pc, #148]	; (8006c2c <USBD_CDC_Init+0x1ec>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	3324      	adds	r3, #36	; 0x24
 8006baa:	2201      	movs	r2, #1
 8006bac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	33b0      	adds	r3, #176	; 0xb0
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006be4:	2302      	movs	r3, #2
 8006be6:	e018      	b.n	8006c1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7c1b      	ldrb	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bf0:	4b0d      	ldr	r3, [pc, #52]	; (8006c28 <USBD_CDC_Init+0x1e8>)
 8006bf2:	7819      	ldrb	r1, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 fb7e 	bl	8009300 <USBD_LL_PrepareReceive>
 8006c04:	e008      	b.n	8006c18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c06:	4b08      	ldr	r3, [pc, #32]	; (8006c28 <USBD_CDC_Init+0x1e8>)
 8006c08:	7819      	ldrb	r1, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c10:	2340      	movs	r3, #64	; 0x40
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f002 fb74 	bl	8009300 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	200000a3 	.word	0x200000a3
 8006c28:	200000a4 	.word	0x200000a4
 8006c2c:	200000a5 	.word	0x200000a5

08006c30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c3c:	4b3a      	ldr	r3, [pc, #232]	; (8006d28 <USBD_CDC_DeInit+0xf8>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f002 fa93 	bl	800916e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c48:	4b37      	ldr	r3, [pc, #220]	; (8006d28 <USBD_CDC_DeInit+0xf8>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3324      	adds	r3, #36	; 0x24
 8006c5e:	2200      	movs	r2, #0
 8006c60:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c62:	4b32      	ldr	r3, [pc, #200]	; (8006d2c <USBD_CDC_DeInit+0xfc>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f002 fa80 	bl	800916e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c6e:	4b2f      	ldr	r3, [pc, #188]	; (8006d2c <USBD_CDC_DeInit+0xfc>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	f003 020f 	and.w	r2, r3, #15
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c86:	2200      	movs	r2, #0
 8006c88:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c8a:	4b29      	ldr	r3, [pc, #164]	; (8006d30 <USBD_CDC_DeInit+0x100>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f002 fa6c 	bl	800916e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c96:	4b26      	ldr	r3, [pc, #152]	; (8006d30 <USBD_CDC_DeInit+0x100>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 020f 	and.w	r2, r3, #15
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	3324      	adds	r3, #36	; 0x24
 8006cac:	2200      	movs	r2, #0
 8006cae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006cb0:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <USBD_CDC_DeInit+0x100>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 020f 	and.w	r2, r3, #15
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	3326      	adds	r3, #38	; 0x26
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	32b0      	adds	r2, #176	; 0xb0
 8006cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01f      	beq.n	8006d1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	33b0      	adds	r3, #176	; 0xb0
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	32b0      	adds	r2, #176	; 0xb0
 8006cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f002 fb40 	bl	8009384 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	32b0      	adds	r2, #176	; 0xb0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	200000a3 	.word	0x200000a3
 8006d2c:	200000a4 	.word	0x200000a4
 8006d30:	200000a5 	.word	0x200000a5

08006d34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	32b0      	adds	r2, #176	; 0xb0
 8006d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e0bf      	b.n	8006ee4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d050      	beq.n	8006e12 <USBD_CDC_Setup+0xde>
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	f040 80af 	bne.w	8006ed4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	88db      	ldrh	r3, [r3, #6]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d03a      	beq.n	8006df4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	da1b      	bge.n	8006dc0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	33b0      	adds	r3, #176	; 0xb0
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	88d2      	ldrh	r2, [r2, #6]
 8006da4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	88db      	ldrh	r3, [r3, #6]
 8006daa:	2b07      	cmp	r3, #7
 8006dac:	bf28      	it	cs
 8006dae:	2307      	movcs	r3, #7
 8006db0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	89fa      	ldrh	r2, [r7, #14]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 fd89 	bl	80088d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006dbe:	e090      	b.n	8006ee2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	785a      	ldrb	r2, [r3, #1]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	88db      	ldrh	r3, [r3, #6]
 8006dce:	2b3f      	cmp	r3, #63	; 0x3f
 8006dd0:	d803      	bhi.n	8006dda <USBD_CDC_Setup+0xa6>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	e000      	b.n	8006ddc <USBD_CDC_Setup+0xa8>
 8006dda:	2240      	movs	r2, #64	; 0x40
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006de2:	6939      	ldr	r1, [r7, #16]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006dea:	461a      	mov	r2, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fd9b 	bl	8008928 <USBD_CtlPrepareRx>
      break;
 8006df2:	e076      	b.n	8006ee2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	33b0      	adds	r3, #176	; 0xb0
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	7850      	ldrb	r0, [r2, #1]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	4798      	blx	r3
      break;
 8006e10:	e067      	b.n	8006ee2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	2b0b      	cmp	r3, #11
 8006e18:	d851      	bhi.n	8006ebe <USBD_CDC_Setup+0x18a>
 8006e1a:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <USBD_CDC_Setup+0xec>)
 8006e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e20:	08006e51 	.word	0x08006e51
 8006e24:	08006ecd 	.word	0x08006ecd
 8006e28:	08006ebf 	.word	0x08006ebf
 8006e2c:	08006ebf 	.word	0x08006ebf
 8006e30:	08006ebf 	.word	0x08006ebf
 8006e34:	08006ebf 	.word	0x08006ebf
 8006e38:	08006ebf 	.word	0x08006ebf
 8006e3c:	08006ebf 	.word	0x08006ebf
 8006e40:	08006ebf 	.word	0x08006ebf
 8006e44:	08006ebf 	.word	0x08006ebf
 8006e48:	08006e7b 	.word	0x08006e7b
 8006e4c:	08006ea5 	.word	0x08006ea5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d107      	bne.n	8006e6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e5c:	f107 030a 	add.w	r3, r7, #10
 8006e60:	2202      	movs	r2, #2
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fd33 	bl	80088d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e6a:	e032      	b.n	8006ed2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 fcbd 	bl	80087ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	75fb      	strb	r3, [r7, #23]
          break;
 8006e78:	e02b      	b.n	8006ed2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d107      	bne.n	8006e96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e86:	f107 030d 	add.w	r3, r7, #13
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 fd1e 	bl	80088d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e94:	e01d      	b.n	8006ed2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fca8 	bl	80087ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea2:	e016      	b.n	8006ed2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d00f      	beq.n	8006ed0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 fc9b 	bl	80087ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ebc:	e008      	b.n	8006ed0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 fc94 	bl	80087ee <USBD_CtlError>
          ret = USBD_FAIL;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eca:	e002      	b.n	8006ed2 <USBD_CDC_Setup+0x19e>
          break;
 8006ecc:	bf00      	nop
 8006ece:	e008      	b.n	8006ee2 <USBD_CDC_Setup+0x1ae>
          break;
 8006ed0:	bf00      	nop
      }
      break;
 8006ed2:	e006      	b.n	8006ee2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fc89 	bl	80087ee <USBD_CtlError>
      ret = USBD_FAIL;
 8006edc:	2303      	movs	r3, #3
 8006ede:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006efe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	32b0      	adds	r2, #176	; 0xb0
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e065      	b.n	8006fe2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	32b0      	adds	r2, #176	; 0xb0
 8006f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f26:	78fb      	ldrb	r3, [r7, #3]
 8006f28:	f003 020f 	and.w	r2, r3, #15
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	3318      	adds	r3, #24
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d02f      	beq.n	8006fa0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	f003 020f 	and.w	r2, r3, #15
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	440b      	add	r3, r1
 8006f52:	3318      	adds	r3, #24
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	f003 010f 	and.w	r1, r3, #15
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	440b      	add	r3, r1
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4403      	add	r3, r0
 8006f68:	3348      	adds	r3, #72	; 0x48
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d112      	bne.n	8006fa0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	f003 020f 	and.w	r2, r3, #15
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	3318      	adds	r3, #24
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f92:	78f9      	ldrb	r1, [r7, #3]
 8006f94:	2300      	movs	r3, #0
 8006f96:	2200      	movs	r2, #0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f002 f990 	bl	80092be <USBD_LL_Transmit>
 8006f9e:	e01f      	b.n	8006fe0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	33b0      	adds	r3, #176	; 0xb0
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d010      	beq.n	8006fe0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	33b0      	adds	r3, #176	; 0xb0
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fdc:	78fa      	ldrb	r2, [r7, #3]
 8006fde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	32b0      	adds	r2, #176	; 0xb0
 8007000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007004:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	32b0      	adds	r2, #176	; 0xb0
 8007010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007018:	2303      	movs	r3, #3
 800701a:	e01a      	b.n	8007052 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f002 f98e 	bl	8009342 <USBD_LL_GetRxDataSize>
 8007026:	4602      	mov	r2, r0
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	33b0      	adds	r3, #176	; 0xb0
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800704c:	4611      	mov	r1, r2
 800704e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	32b0      	adds	r2, #176	; 0xb0
 800706c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007070:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	e025      	b.n	80070c8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	33b0      	adds	r3, #176	; 0xb0
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01a      	beq.n	80070c6 <USBD_CDC_EP0_RxReady+0x6c>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007096:	2bff      	cmp	r3, #255	; 0xff
 8007098:	d015      	beq.n	80070c6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	33b0      	adds	r3, #176	; 0xb0
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80070b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070ba:	b292      	uxth	r2, r2
 80070bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	22ff      	movs	r2, #255	; 0xff
 80070c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070d8:	2182      	movs	r1, #130	; 0x82
 80070da:	4818      	ldr	r0, [pc, #96]	; (800713c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070dc:	f000 fd4f 	bl	8007b7e <USBD_GetEpDesc>
 80070e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070e2:	2101      	movs	r1, #1
 80070e4:	4815      	ldr	r0, [pc, #84]	; (800713c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070e6:	f000 fd4a 	bl	8007b7e <USBD_GetEpDesc>
 80070ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070ec:	2181      	movs	r1, #129	; 0x81
 80070ee:	4813      	ldr	r0, [pc, #76]	; (800713c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070f0:	f000 fd45 	bl	8007b7e <USBD_GetEpDesc>
 80070f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2210      	movs	r2, #16
 8007100:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d006      	beq.n	8007116 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2200      	movs	r2, #0
 800710c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007110:	711a      	strb	r2, [r3, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d006      	beq.n	800712a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007124:	711a      	strb	r2, [r3, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2243      	movs	r2, #67	; 0x43
 800712e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007130:	4b02      	ldr	r3, [pc, #8]	; (800713c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20000060 	.word	0x20000060

08007140 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007148:	2182      	movs	r1, #130	; 0x82
 800714a:	4818      	ldr	r0, [pc, #96]	; (80071ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800714c:	f000 fd17 	bl	8007b7e <USBD_GetEpDesc>
 8007150:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007152:	2101      	movs	r1, #1
 8007154:	4815      	ldr	r0, [pc, #84]	; (80071ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007156:	f000 fd12 	bl	8007b7e <USBD_GetEpDesc>
 800715a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800715c:	2181      	movs	r1, #129	; 0x81
 800715e:	4813      	ldr	r0, [pc, #76]	; (80071ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007160:	f000 fd0d 	bl	8007b7e <USBD_GetEpDesc>
 8007164:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2210      	movs	r2, #16
 8007170:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d006      	beq.n	8007186 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2200      	movs	r2, #0
 800717c:	711a      	strb	r2, [r3, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f042 0202 	orr.w	r2, r2, #2
 8007184:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d006      	beq.n	800719a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	711a      	strb	r2, [r3, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f042 0202 	orr.w	r2, r2, #2
 8007198:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2243      	movs	r2, #67	; 0x43
 800719e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071a0:	4b02      	ldr	r3, [pc, #8]	; (80071ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000060 	.word	0x20000060

080071b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071b8:	2182      	movs	r1, #130	; 0x82
 80071ba:	4818      	ldr	r0, [pc, #96]	; (800721c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071bc:	f000 fcdf 	bl	8007b7e <USBD_GetEpDesc>
 80071c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071c2:	2101      	movs	r1, #1
 80071c4:	4815      	ldr	r0, [pc, #84]	; (800721c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071c6:	f000 fcda 	bl	8007b7e <USBD_GetEpDesc>
 80071ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071cc:	2181      	movs	r1, #129	; 0x81
 80071ce:	4813      	ldr	r0, [pc, #76]	; (800721c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071d0:	f000 fcd5 	bl	8007b7e <USBD_GetEpDesc>
 80071d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2210      	movs	r2, #16
 80071e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071f0:	711a      	strb	r2, [r3, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d006      	beq.n	800720a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007204:	711a      	strb	r2, [r3, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2243      	movs	r2, #67	; 0x43
 800720e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20000060 	.word	0x20000060

08007220 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	220a      	movs	r2, #10
 800722c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800722e:	4b03      	ldr	r3, [pc, #12]	; (800723c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	2000001c 	.word	0x2000001c

08007240 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007250:	2303      	movs	r3, #3
 8007252:	e009      	b.n	8007268 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	33b0      	adds	r3, #176	; 0xb0
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	32b0      	adds	r2, #176	; 0xb0
 800728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007296:	2303      	movs	r3, #3
 8007298:	e008      	b.n	80072ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	371c      	adds	r7, #28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	32b0      	adds	r2, #176	; 0xb0
 80072cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072d8:	2303      	movs	r3, #3
 80072da:	e004      	b.n	80072e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
	...

080072f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32b0      	adds	r2, #176	; 0xb0
 8007306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	32b0      	adds	r2, #176	; 0xb0
 800731a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007322:	2303      	movs	r3, #3
 8007324:	e025      	b.n	8007372 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800732c:	2b00      	cmp	r3, #0
 800732e:	d11f      	bne.n	8007370 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2201      	movs	r2, #1
 8007334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007338:	4b10      	ldr	r3, [pc, #64]	; (800737c <USBD_CDC_TransmitPacket+0x88>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4403      	add	r3, r0
 8007352:	3318      	adds	r3, #24
 8007354:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007356:	4b09      	ldr	r3, [pc, #36]	; (800737c <USBD_CDC_TransmitPacket+0x88>)
 8007358:	7819      	ldrb	r1, [r3, #0]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 ffa9 	bl	80092be <USBD_LL_Transmit>

    ret = USBD_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200000a3 	.word	0x200000a3

08007380 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	32b0      	adds	r2, #176	; 0xb0
 8007392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007396:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	32b0      	adds	r2, #176	; 0xb0
 80073a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e018      	b.n	80073e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	7c1b      	ldrb	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073b6:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <USBD_CDC_ReceivePacket+0x68>)
 80073b8:	7819      	ldrb	r1, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 ff9b 	bl	8009300 <USBD_LL_PrepareReceive>
 80073ca:	e008      	b.n	80073de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <USBD_CDC_ReceivePacket+0x68>)
 80073ce:	7819      	ldrb	r1, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073d6:	2340      	movs	r3, #64	; 0x40
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 ff91 	bl	8009300 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	200000a4 	.word	0x200000a4

080073ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	4613      	mov	r3, r2
 80073f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007400:	2303      	movs	r3, #3
 8007402:	e01f      	b.n	8007444 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	79fa      	ldrb	r2, [r7, #7]
 8007436:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f001 fe0b 	bl	8009054 <USBD_LL_Init>
 800743e:	4603      	mov	r3, r0
 8007440:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	e025      	b.n	80074b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32ae      	adds	r2, #174	; 0xae
 8007476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00f      	beq.n	80074a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	32ae      	adds	r2, #174	; 0xae
 800748a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	f107 020e 	add.w	r2, r7, #14
 8007494:	4610      	mov	r0, r2
 8007496:	4798      	blx	r3
 8007498:	4602      	mov	r2, r0
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fe13 	bl	80090ec <USBD_LL_Start>
 80074c6:	4603      	mov	r3, r0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d009      	beq.n	8007514 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	78fa      	ldrb	r2, [r7, #3]
 800750a:	4611      	mov	r1, r2
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	4798      	blx	r3
 8007510:	4603      	mov	r3, r0
 8007512:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	4611      	mov	r1, r2
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f001 f908 	bl	800877a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007578:	461a      	mov	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007586:	f003 031f 	and.w	r3, r3, #31
 800758a:	2b02      	cmp	r3, #2
 800758c:	d01a      	beq.n	80075c4 <USBD_LL_SetupStage+0x72>
 800758e:	2b02      	cmp	r3, #2
 8007590:	d822      	bhi.n	80075d8 <USBD_LL_SetupStage+0x86>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <USBD_LL_SetupStage+0x4a>
 8007596:	2b01      	cmp	r3, #1
 8007598:	d00a      	beq.n	80075b0 <USBD_LL_SetupStage+0x5e>
 800759a:	e01d      	b.n	80075d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fb5f 	bl	8007c68 <USBD_StdDevReq>
 80075aa:	4603      	mov	r3, r0
 80075ac:	73fb      	strb	r3, [r7, #15]
      break;
 80075ae:	e020      	b.n	80075f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fbc7 	bl	8007d4c <USBD_StdItfReq>
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
      break;
 80075c2:	e016      	b.n	80075f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fc29 	bl	8007e24 <USBD_StdEPReq>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73fb      	strb	r3, [r7, #15]
      break;
 80075d6:	e00c      	b.n	80075f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 fde0 	bl	80091ac <USBD_LL_StallEP>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]
      break;
 80075f0:	bf00      	nop
  }

  return ret;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	460b      	mov	r3, r1
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800760e:	7afb      	ldrb	r3, [r7, #11]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d16e      	bne.n	80076f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800761a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007622:	2b03      	cmp	r3, #3
 8007624:	f040 8098 	bne.w	8007758 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	429a      	cmp	r2, r3
 8007632:	d913      	bls.n	800765c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	1ad2      	subs	r2, r2, r3
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	4293      	cmp	r3, r2
 800764c:	bf28      	it	cs
 800764e:	4613      	movcs	r3, r2
 8007650:	461a      	mov	r2, r3
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f001 f984 	bl	8008962 <USBD_CtlContinueRx>
 800765a:	e07d      	b.n	8007758 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007662:	f003 031f 	and.w	r3, r3, #31
 8007666:	2b02      	cmp	r3, #2
 8007668:	d014      	beq.n	8007694 <USBD_LL_DataOutStage+0x98>
 800766a:	2b02      	cmp	r3, #2
 800766c:	d81d      	bhi.n	80076aa <USBD_LL_DataOutStage+0xae>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <USBD_LL_DataOutStage+0x7c>
 8007672:	2b01      	cmp	r3, #1
 8007674:	d003      	beq.n	800767e <USBD_LL_DataOutStage+0x82>
 8007676:	e018      	b.n	80076aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	75bb      	strb	r3, [r7, #22]
            break;
 800767c:	e018      	b.n	80076b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007684:	b2db      	uxtb	r3, r3
 8007686:	4619      	mov	r1, r3
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fa5e 	bl	8007b4a <USBD_CoreFindIF>
 800768e:	4603      	mov	r3, r0
 8007690:	75bb      	strb	r3, [r7, #22]
            break;
 8007692:	e00d      	b.n	80076b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800769a:	b2db      	uxtb	r3, r3
 800769c:	4619      	mov	r1, r3
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fa60 	bl	8007b64 <USBD_CoreFindEP>
 80076a4:	4603      	mov	r3, r0
 80076a6:	75bb      	strb	r3, [r7, #22]
            break;
 80076a8:	e002      	b.n	80076b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	75bb      	strb	r3, [r7, #22]
            break;
 80076ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80076b0:	7dbb      	ldrb	r3, [r7, #22]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d119      	bne.n	80076ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d113      	bne.n	80076ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076c2:	7dba      	ldrb	r2, [r7, #22]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	32ae      	adds	r2, #174	; 0xae
 80076c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00b      	beq.n	80076ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076d2:	7dba      	ldrb	r2, [r7, #22]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80076da:	7dba      	ldrb	r2, [r7, #22]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	32ae      	adds	r2, #174	; 0xae
 80076e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f001 f94a 	bl	8008984 <USBD_CtlSendStatus>
 80076f0:	e032      	b.n	8007758 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80076f2:	7afb      	ldrb	r3, [r7, #11]
 80076f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	4619      	mov	r1, r3
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fa31 	bl	8007b64 <USBD_CoreFindEP>
 8007702:	4603      	mov	r3, r0
 8007704:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007706:	7dbb      	ldrb	r3, [r7, #22]
 8007708:	2bff      	cmp	r3, #255	; 0xff
 800770a:	d025      	beq.n	8007758 <USBD_LL_DataOutStage+0x15c>
 800770c:	7dbb      	ldrb	r3, [r7, #22]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d122      	bne.n	8007758 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b03      	cmp	r3, #3
 800771c:	d117      	bne.n	800774e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800771e:	7dba      	ldrb	r2, [r7, #22]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	32ae      	adds	r2, #174	; 0xae
 8007724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00f      	beq.n	800774e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800772e:	7dba      	ldrb	r2, [r7, #22]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007736:	7dba      	ldrb	r2, [r7, #22]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	32ae      	adds	r2, #174	; 0xae
 800773c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	7afa      	ldrb	r2, [r7, #11]
 8007744:	4611      	mov	r1, r2
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	4798      	blx	r3
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	e000      	b.n	800775a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b086      	sub	sp, #24
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	460b      	mov	r3, r1
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d16f      	bne.n	8007856 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3314      	adds	r3, #20
 800777a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007782:	2b02      	cmp	r3, #2
 8007784:	d15a      	bne.n	800783c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	429a      	cmp	r2, r3
 8007790:	d914      	bls.n	80077bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	1ad2      	subs	r2, r2, r3
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	461a      	mov	r2, r3
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f001 f8ac 	bl	8008906 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077ae:	2300      	movs	r3, #0
 80077b0:	2200      	movs	r2, #0
 80077b2:	2100      	movs	r1, #0
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f001 fda3 	bl	8009300 <USBD_LL_PrepareReceive>
 80077ba:	e03f      	b.n	800783c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d11c      	bne.n	8007802 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d316      	bcc.n	8007802 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077de:	429a      	cmp	r2, r3
 80077e0:	d20f      	bcs.n	8007802 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f001 f88d 	bl	8008906 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077f4:	2300      	movs	r3, #0
 80077f6:	2200      	movs	r2, #0
 80077f8:	2100      	movs	r1, #0
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f001 fd80 	bl	8009300 <USBD_LL_PrepareReceive>
 8007800:	e01c      	b.n	800783c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b03      	cmp	r3, #3
 800780c:	d10f      	bne.n	800782e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800782e:	2180      	movs	r1, #128	; 0x80
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f001 fcbb 	bl	80091ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f001 f8b7 	bl	80089aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d03a      	beq.n	80078bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f7ff fe42 	bl	80074d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007854:	e032      	b.n	80078bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007856:	7afb      	ldrb	r3, [r7, #11]
 8007858:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800785c:	b2db      	uxtb	r3, r3
 800785e:	4619      	mov	r1, r3
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f97f 	bl	8007b64 <USBD_CoreFindEP>
 8007866:	4603      	mov	r3, r0
 8007868:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	2bff      	cmp	r3, #255	; 0xff
 800786e:	d025      	beq.n	80078bc <USBD_LL_DataInStage+0x15a>
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d122      	bne.n	80078bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b03      	cmp	r3, #3
 8007880:	d11c      	bne.n	80078bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007882:	7dfa      	ldrb	r2, [r7, #23]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	32ae      	adds	r2, #174	; 0xae
 8007888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d014      	beq.n	80078bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007892:	7dfa      	ldrb	r2, [r7, #23]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800789a:	7dfa      	ldrb	r2, [r7, #23]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	32ae      	adds	r2, #174	; 0xae
 80078a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	7afa      	ldrb	r2, [r7, #11]
 80078a8:	4611      	mov	r1, r2
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	4798      	blx	r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80078b2:	7dbb      	ldrb	r3, [r7, #22]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80078b8:	7dbb      	ldrb	r3, [r7, #22]
 80078ba:	e000      	b.n	80078be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d014      	beq.n	800792c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00e      	beq.n	800792c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6852      	ldr	r2, [r2, #4]
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	4611      	mov	r1, r2
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	4798      	blx	r3
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007928:	2303      	movs	r3, #3
 800792a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800792c:	2340      	movs	r3, #64	; 0x40
 800792e:	2200      	movs	r2, #0
 8007930:	2100      	movs	r1, #0
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fbf5 	bl	8009122 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2240      	movs	r2, #64	; 0x40
 8007944:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007948:	2340      	movs	r3, #64	; 0x40
 800794a:	2200      	movs	r2, #0
 800794c:	2180      	movs	r1, #128	; 0x80
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 fbe7 	bl	8009122 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2240      	movs	r2, #64	; 0x40
 800795e:	621a      	str	r2, [r3, #32]

  return ret;
 8007960:	7bfb      	ldrb	r3, [r7, #15]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	78fa      	ldrb	r2, [r7, #3]
 800797a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007998:	b2da      	uxtb	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2204      	movs	r2, #4
 80079a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d106      	bne.n	80079d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d110      	bne.n	8007a1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00b      	beq.n	8007a1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	32ae      	adds	r2, #174	; 0xae
 8007a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e01c      	b.n	8007a82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d115      	bne.n	8007a80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	32ae      	adds	r2, #174	; 0xae
 8007a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00b      	beq.n	8007a80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	32ae      	adds	r2, #174	; 0xae
 8007a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	460b      	mov	r3, r1
 8007a94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	32ae      	adds	r2, #174	; 0xae
 8007aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e01c      	b.n	8007ae6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	d115      	bne.n	8007ae4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	32ae      	adds	r2, #174	; 0xae
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	32ae      	adds	r2, #174	; 0xae
 8007ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	4611      	mov	r1, r2
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00e      	beq.n	8007b40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6852      	ldr	r2, [r2, #4]
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	4611      	mov	r1, r2
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d920      	bls.n	8007be8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007bae:	e013      	b.n	8007bd8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007bb0:	f107 030a 	add.w	r3, r7, #10
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6978      	ldr	r0, [r7, #20]
 8007bb8:	f000 f81b 	bl	8007bf2 <USBD_GetNextDesc>
 8007bbc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	2b05      	cmp	r3, #5
 8007bc4:	d108      	bne.n	8007bd8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	789b      	ldrb	r3, [r3, #2]
 8007bce:	78fa      	ldrb	r2, [r7, #3]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d008      	beq.n	8007be6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	885b      	ldrh	r3, [r3, #2]
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	897b      	ldrh	r3, [r7, #10]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d8e5      	bhi.n	8007bb0 <USBD_GetEpDesc+0x32>
 8007be4:	e000      	b.n	8007be8 <USBD_GetEpDesc+0x6a>
          break;
 8007be6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007be8:	693b      	ldr	r3, [r7, #16]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	881a      	ldrh	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	4413      	add	r3, r2
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	3301      	adds	r3, #1
 8007c42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c4a:	8a3b      	ldrh	r3, [r7, #16]
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	b21a      	sxth	r2, r3
 8007c50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	b21b      	sxth	r3, r3
 8007c58:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c5a:	89fb      	ldrh	r3, [r7, #14]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c7e:	2b40      	cmp	r3, #64	; 0x40
 8007c80:	d005      	beq.n	8007c8e <USBD_StdDevReq+0x26>
 8007c82:	2b40      	cmp	r3, #64	; 0x40
 8007c84:	d857      	bhi.n	8007d36 <USBD_StdDevReq+0xce>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00f      	beq.n	8007caa <USBD_StdDevReq+0x42>
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d153      	bne.n	8007d36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	32ae      	adds	r2, #174	; 0xae
 8007c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca8:	e04a      	b.n	8007d40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b09      	cmp	r3, #9
 8007cb0:	d83b      	bhi.n	8007d2a <USBD_StdDevReq+0xc2>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <USBD_StdDevReq+0x50>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007d21 	.word	0x08007d21
 8007cc0:	08007d2b 	.word	0x08007d2b
 8007cc4:	08007d17 	.word	0x08007d17
 8007cc8:	08007d2b 	.word	0x08007d2b
 8007ccc:	08007ceb 	.word	0x08007ceb
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007d2b 	.word	0x08007d2b
 8007cd8:	08007d03 	.word	0x08007d03
 8007cdc:	08007cf5 	.word	0x08007cf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa3c 	bl	8008160 <USBD_GetDescriptor>
          break;
 8007ce8:	e024      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fba1 	bl	8008434 <USBD_SetAddress>
          break;
 8007cf2:	e01f      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fbe0 	bl	80084bc <USBD_SetConfig>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
          break;
 8007d00:	e018      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fc83 	bl	8008610 <USBD_GetConfig>
          break;
 8007d0a:	e013      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fcb4 	bl	800867c <USBD_GetStatus>
          break;
 8007d14:	e00e      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fce3 	bl	80086e4 <USBD_SetFeature>
          break;
 8007d1e:	e009      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fd07 	bl	8008736 <USBD_ClrFeature>
          break;
 8007d28:	e004      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fd5e 	bl	80087ee <USBD_CtlError>
          break;
 8007d32:	bf00      	nop
      }
      break;
 8007d34:	e004      	b.n	8007d40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fd58 	bl	80087ee <USBD_CtlError>
      break;
 8007d3e:	bf00      	nop
  }

  return ret;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop

08007d4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d62:	2b40      	cmp	r3, #64	; 0x40
 8007d64:	d005      	beq.n	8007d72 <USBD_StdItfReq+0x26>
 8007d66:	2b40      	cmp	r3, #64	; 0x40
 8007d68:	d852      	bhi.n	8007e10 <USBD_StdItfReq+0xc4>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <USBD_StdItfReq+0x26>
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d14e      	bne.n	8007e10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d840      	bhi.n	8007e02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	889b      	ldrh	r3, [r3, #4]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d836      	bhi.n	8007df8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	889b      	ldrh	r3, [r3, #4]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff fed9 	bl	8007b4a <USBD_CoreFindIF>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	2bff      	cmp	r3, #255	; 0xff
 8007da0:	d01d      	beq.n	8007dde <USBD_StdItfReq+0x92>
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11a      	bne.n	8007dde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007da8:	7bba      	ldrb	r2, [r7, #14]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	32ae      	adds	r2, #174	; 0xae
 8007dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00f      	beq.n	8007dd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007db8:	7bba      	ldrb	r2, [r7, #14]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007dc0:	7bba      	ldrb	r2, [r7, #14]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	32ae      	adds	r2, #174	; 0xae
 8007dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007dd6:	e004      	b.n	8007de2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ddc:	e001      	b.n	8007de2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d110      	bne.n	8007e0c <USBD_StdItfReq+0xc0>
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10d      	bne.n	8007e0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fdc7 	bl	8008984 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007df6:	e009      	b.n	8007e0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fcf7 	bl	80087ee <USBD_CtlError>
          break;
 8007e00:	e004      	b.n	8007e0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fcf2 	bl	80087ee <USBD_CtlError>
          break;
 8007e0a:	e000      	b.n	8007e0e <USBD_StdItfReq+0xc2>
          break;
 8007e0c:	bf00      	nop
      }
      break;
 8007e0e:	e004      	b.n	8007e1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fceb 	bl	80087ee <USBD_CtlError>
      break;
 8007e18:	bf00      	nop
  }

  return ret;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	889b      	ldrh	r3, [r3, #4]
 8007e36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	d007      	beq.n	8007e54 <USBD_StdEPReq+0x30>
 8007e44:	2b40      	cmp	r3, #64	; 0x40
 8007e46:	f200 817f 	bhi.w	8008148 <USBD_StdEPReq+0x324>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d02a      	beq.n	8007ea4 <USBD_StdEPReq+0x80>
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	f040 817a 	bne.w	8008148 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff fe83 	bl	8007b64 <USBD_CoreFindEP>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e62:	7b7b      	ldrb	r3, [r7, #13]
 8007e64:	2bff      	cmp	r3, #255	; 0xff
 8007e66:	f000 8174 	beq.w	8008152 <USBD_StdEPReq+0x32e>
 8007e6a:	7b7b      	ldrb	r3, [r7, #13]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f040 8170 	bne.w	8008152 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e72:	7b7a      	ldrb	r2, [r7, #13]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e7a:	7b7a      	ldrb	r2, [r7, #13]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	32ae      	adds	r2, #174	; 0xae
 8007e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8163 	beq.w	8008152 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e8c:	7b7a      	ldrb	r2, [r7, #13]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	32ae      	adds	r2, #174	; 0xae
 8007e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ea2:	e156      	b.n	8008152 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d008      	beq.n	8007ebe <USBD_StdEPReq+0x9a>
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	f300 8145 	bgt.w	800813c <USBD_StdEPReq+0x318>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 809b 	beq.w	8007fee <USBD_StdEPReq+0x1ca>
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d03c      	beq.n	8007f36 <USBD_StdEPReq+0x112>
 8007ebc:	e13e      	b.n	800813c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d002      	beq.n	8007ed0 <USBD_StdEPReq+0xac>
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d016      	beq.n	8007efc <USBD_StdEPReq+0xd8>
 8007ece:	e02c      	b.n	8007f2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00d      	beq.n	8007ef2 <USBD_StdEPReq+0xce>
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	2b80      	cmp	r3, #128	; 0x80
 8007eda:	d00a      	beq.n	8007ef2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 f963 	bl	80091ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ee6:	2180      	movs	r1, #128	; 0x80
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 f95f 	bl	80091ac <USBD_LL_StallEP>
 8007eee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ef0:	e020      	b.n	8007f34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fc7a 	bl	80087ee <USBD_CtlError>
              break;
 8007efa:	e01b      	b.n	8007f34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	885b      	ldrh	r3, [r3, #2]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10e      	bne.n	8007f22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <USBD_StdEPReq+0xfe>
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b80      	cmp	r3, #128	; 0x80
 8007f0e:	d008      	beq.n	8007f22 <USBD_StdEPReq+0xfe>
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	88db      	ldrh	r3, [r3, #6]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d104      	bne.n	8007f22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f945 	bl	80091ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fd2e 	bl	8008984 <USBD_CtlSendStatus>

              break;
 8007f28:	e004      	b.n	8007f34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc5e 	bl	80087ee <USBD_CtlError>
              break;
 8007f32:	bf00      	nop
          }
          break;
 8007f34:	e107      	b.n	8008146 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d002      	beq.n	8007f48 <USBD_StdEPReq+0x124>
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d016      	beq.n	8007f74 <USBD_StdEPReq+0x150>
 8007f46:	e04b      	b.n	8007fe0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00d      	beq.n	8007f6a <USBD_StdEPReq+0x146>
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	2b80      	cmp	r3, #128	; 0x80
 8007f52:	d00a      	beq.n	8007f6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 f927 	bl	80091ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f923 	bl	80091ac <USBD_LL_StallEP>
 8007f66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f68:	e040      	b.n	8007fec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc3e 	bl	80087ee <USBD_CtlError>
              break;
 8007f72:	e03b      	b.n	8007fec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	885b      	ldrh	r3, [r3, #2]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d136      	bne.n	8007fea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d004      	beq.n	8007f90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f001 f92d 	bl	80091ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fcf7 	bl	8008984 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff fde2 	bl	8007b64 <USBD_CoreFindEP>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fa4:	7b7b      	ldrb	r3, [r7, #13]
 8007fa6:	2bff      	cmp	r3, #255	; 0xff
 8007fa8:	d01f      	beq.n	8007fea <USBD_StdEPReq+0x1c6>
 8007faa:	7b7b      	ldrb	r3, [r7, #13]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d11c      	bne.n	8007fea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007fb0:	7b7a      	ldrb	r2, [r7, #13]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007fb8:	7b7a      	ldrb	r2, [r7, #13]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	32ae      	adds	r2, #174	; 0xae
 8007fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d010      	beq.n	8007fea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007fc8:	7b7a      	ldrb	r2, [r7, #13]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	32ae      	adds	r2, #174	; 0xae
 8007fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4798      	blx	r3
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007fde:	e004      	b.n	8007fea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fc03 	bl	80087ee <USBD_CtlError>
              break;
 8007fe8:	e000      	b.n	8007fec <USBD_StdEPReq+0x1c8>
              break;
 8007fea:	bf00      	nop
          }
          break;
 8007fec:	e0ab      	b.n	8008146 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d002      	beq.n	8008000 <USBD_StdEPReq+0x1dc>
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d032      	beq.n	8008064 <USBD_StdEPReq+0x240>
 8007ffe:	e097      	b.n	8008130 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d007      	beq.n	8008016 <USBD_StdEPReq+0x1f2>
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	2b80      	cmp	r3, #128	; 0x80
 800800a:	d004      	beq.n	8008016 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fbed 	bl	80087ee <USBD_CtlError>
                break;
 8008014:	e091      	b.n	800813a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800801a:	2b00      	cmp	r3, #0
 800801c:	da0b      	bge.n	8008036 <USBD_StdEPReq+0x212>
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	3310      	adds	r3, #16
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4413      	add	r3, r2
 8008032:	3304      	adds	r3, #4
 8008034:	e00b      	b.n	800804e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	3304      	adds	r3, #4
 800804e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2202      	movs	r2, #2
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc37 	bl	80088d0 <USBD_CtlSendData>
              break;
 8008062:	e06a      	b.n	800813a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008068:	2b00      	cmp	r3, #0
 800806a:	da11      	bge.n	8008090 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	3324      	adds	r3, #36	; 0x24
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d117      	bne.n	80080b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fbb0 	bl	80087ee <USBD_CtlError>
                  break;
 800808e:	e054      	b.n	800813a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	f003 020f 	and.w	r2, r3, #15
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	4613      	mov	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	440b      	add	r3, r1
 80080a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fb9d 	bl	80087ee <USBD_CtlError>
                  break;
 80080b4:	e041      	b.n	800813a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	da0b      	bge.n	80080d6 <USBD_StdEPReq+0x2b2>
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	3310      	adds	r3, #16
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	4413      	add	r3, r2
 80080d2:	3304      	adds	r3, #4
 80080d4:	e00b      	b.n	80080ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080dc:	4613      	mov	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	4413      	add	r3, r2
 80080ec:	3304      	adds	r3, #4
 80080ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <USBD_StdEPReq+0x2d8>
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b80      	cmp	r3, #128	; 0x80
 80080fa:	d103      	bne.n	8008104 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	e00e      	b.n	8008122 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 f88d 	bl	8009228 <USBD_LL_IsStallEP>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2201      	movs	r2, #1
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	e002      	b.n	8008122 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2202      	movs	r2, #2
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fbd1 	bl	80088d0 <USBD_CtlSendData>
              break;
 800812e:	e004      	b.n	800813a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fb5b 	bl	80087ee <USBD_CtlError>
              break;
 8008138:	bf00      	nop
          }
          break;
 800813a:	e004      	b.n	8008146 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fb55 	bl	80087ee <USBD_CtlError>
          break;
 8008144:	bf00      	nop
      }
      break;
 8008146:	e005      	b.n	8008154 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fb4f 	bl	80087ee <USBD_CtlError>
      break;
 8008150:	e000      	b.n	8008154 <USBD_StdEPReq+0x330>
      break;
 8008152:	bf00      	nop
  }

  return ret;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	885b      	ldrh	r3, [r3, #2]
 800817a:	0a1b      	lsrs	r3, r3, #8
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	2b06      	cmp	r3, #6
 8008182:	f200 8128 	bhi.w	80083d6 <USBD_GetDescriptor+0x276>
 8008186:	a201      	add	r2, pc, #4	; (adr r2, 800818c <USBD_GetDescriptor+0x2c>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081a9 	.word	0x080081a9
 8008190:	080081c1 	.word	0x080081c1
 8008194:	08008201 	.word	0x08008201
 8008198:	080083d7 	.word	0x080083d7
 800819c:	080083d7 	.word	0x080083d7
 80081a0:	08008377 	.word	0x08008377
 80081a4:	080083a3 	.word	0x080083a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	7c12      	ldrb	r2, [r2, #16]
 80081b4:	f107 0108 	add.w	r1, r7, #8
 80081b8:	4610      	mov	r0, r2
 80081ba:	4798      	blx	r3
 80081bc:	60f8      	str	r0, [r7, #12]
      break;
 80081be:	e112      	b.n	80083e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	7c1b      	ldrb	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10d      	bne.n	80081e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f107 0208 	add.w	r2, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3301      	adds	r3, #1
 80081de:	2202      	movs	r2, #2
 80081e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081e2:	e100      	b.n	80083e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	f107 0208 	add.w	r2, r7, #8
 80081f0:	4610      	mov	r0, r2
 80081f2:	4798      	blx	r3
 80081f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	2202      	movs	r2, #2
 80081fc:	701a      	strb	r2, [r3, #0]
      break;
 80081fe:	e0f2      	b.n	80083e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	885b      	ldrh	r3, [r3, #2]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b05      	cmp	r3, #5
 8008208:	f200 80ac 	bhi.w	8008364 <USBD_GetDescriptor+0x204>
 800820c:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <USBD_GetDescriptor+0xb4>)
 800820e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008212:	bf00      	nop
 8008214:	0800822d 	.word	0x0800822d
 8008218:	08008261 	.word	0x08008261
 800821c:	08008295 	.word	0x08008295
 8008220:	080082c9 	.word	0x080082c9
 8008224:	080082fd 	.word	0x080082fd
 8008228:	08008331 	.word	0x08008331
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	7c12      	ldrb	r2, [r2, #16]
 8008244:	f107 0108 	add.w	r1, r7, #8
 8008248:	4610      	mov	r0, r2
 800824a:	4798      	blx	r3
 800824c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800824e:	e091      	b.n	8008374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 facb 	bl	80087ee <USBD_CtlError>
            err++;
 8008258:	7afb      	ldrb	r3, [r7, #11]
 800825a:	3301      	adds	r3, #1
 800825c:	72fb      	strb	r3, [r7, #11]
          break;
 800825e:	e089      	b.n	8008374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	7c12      	ldrb	r2, [r2, #16]
 8008278:	f107 0108 	add.w	r1, r7, #8
 800827c:	4610      	mov	r0, r2
 800827e:	4798      	blx	r3
 8008280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008282:	e077      	b.n	8008374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fab1 	bl	80087ee <USBD_CtlError>
            err++;
 800828c:	7afb      	ldrb	r3, [r7, #11]
 800828e:	3301      	adds	r3, #1
 8008290:	72fb      	strb	r3, [r7, #11]
          break;
 8008292:	e06f      	b.n	8008374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00b      	beq.n	80082b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	7c12      	ldrb	r2, [r2, #16]
 80082ac:	f107 0108 	add.w	r1, r7, #8
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
 80082b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082b6:	e05d      	b.n	8008374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa97 	bl	80087ee <USBD_CtlError>
            err++;
 80082c0:	7afb      	ldrb	r3, [r7, #11]
 80082c2:	3301      	adds	r3, #1
 80082c4:	72fb      	strb	r3, [r7, #11]
          break;
 80082c6:	e055      	b.n	8008374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00b      	beq.n	80082ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	7c12      	ldrb	r2, [r2, #16]
 80082e0:	f107 0108 	add.w	r1, r7, #8
 80082e4:	4610      	mov	r0, r2
 80082e6:	4798      	blx	r3
 80082e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ea:	e043      	b.n	8008374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa7d 	bl	80087ee <USBD_CtlError>
            err++;
 80082f4:	7afb      	ldrb	r3, [r7, #11]
 80082f6:	3301      	adds	r3, #1
 80082f8:	72fb      	strb	r3, [r7, #11]
          break;
 80082fa:	e03b      	b.n	8008374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00b      	beq.n	8008320 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	7c12      	ldrb	r2, [r2, #16]
 8008314:	f107 0108 	add.w	r1, r7, #8
 8008318:	4610      	mov	r0, r2
 800831a:	4798      	blx	r3
 800831c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800831e:	e029      	b.n	8008374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fa63 	bl	80087ee <USBD_CtlError>
            err++;
 8008328:	7afb      	ldrb	r3, [r7, #11]
 800832a:	3301      	adds	r3, #1
 800832c:	72fb      	strb	r3, [r7, #11]
          break;
 800832e:	e021      	b.n	8008374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	7c12      	ldrb	r2, [r2, #16]
 8008348:	f107 0108 	add.w	r1, r7, #8
 800834c:	4610      	mov	r0, r2
 800834e:	4798      	blx	r3
 8008350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008352:	e00f      	b.n	8008374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa49 	bl	80087ee <USBD_CtlError>
            err++;
 800835c:	7afb      	ldrb	r3, [r7, #11]
 800835e:	3301      	adds	r3, #1
 8008360:	72fb      	strb	r3, [r7, #11]
          break;
 8008362:	e007      	b.n	8008374 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa41 	bl	80087ee <USBD_CtlError>
          err++;
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	3301      	adds	r3, #1
 8008370:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008372:	bf00      	nop
      }
      break;
 8008374:	e037      	b.n	80083e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7c1b      	ldrb	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d109      	bne.n	8008392 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008386:	f107 0208 	add.w	r2, r7, #8
 800838a:	4610      	mov	r0, r2
 800838c:	4798      	blx	r3
 800838e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008390:	e029      	b.n	80083e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fa2a 	bl	80087ee <USBD_CtlError>
        err++;
 800839a:	7afb      	ldrb	r3, [r7, #11]
 800839c:	3301      	adds	r3, #1
 800839e:	72fb      	strb	r3, [r7, #11]
      break;
 80083a0:	e021      	b.n	80083e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	7c1b      	ldrb	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10d      	bne.n	80083c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b2:	f107 0208 	add.w	r2, r7, #8
 80083b6:	4610      	mov	r0, r2
 80083b8:	4798      	blx	r3
 80083ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	2207      	movs	r2, #7
 80083c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083c4:	e00f      	b.n	80083e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fa10 	bl	80087ee <USBD_CtlError>
        err++;
 80083ce:	7afb      	ldrb	r3, [r7, #11]
 80083d0:	3301      	adds	r3, #1
 80083d2:	72fb      	strb	r3, [r7, #11]
      break;
 80083d4:	e007      	b.n	80083e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fa08 	bl	80087ee <USBD_CtlError>
      err++;
 80083de:	7afb      	ldrb	r3, [r7, #11]
 80083e0:	3301      	adds	r3, #1
 80083e2:	72fb      	strb	r3, [r7, #11]
      break;
 80083e4:	bf00      	nop
  }

  if (err != 0U)
 80083e6:	7afb      	ldrb	r3, [r7, #11]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d11e      	bne.n	800842a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	88db      	ldrh	r3, [r3, #6]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d016      	beq.n	8008422 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80083f4:	893b      	ldrh	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00e      	beq.n	8008418 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	88da      	ldrh	r2, [r3, #6]
 80083fe:	893b      	ldrh	r3, [r7, #8]
 8008400:	4293      	cmp	r3, r2
 8008402:	bf28      	it	cs
 8008404:	4613      	movcs	r3, r2
 8008406:	b29b      	uxth	r3, r3
 8008408:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800840a:	893b      	ldrh	r3, [r7, #8]
 800840c:	461a      	mov	r2, r3
 800840e:	68f9      	ldr	r1, [r7, #12]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fa5d 	bl	80088d0 <USBD_CtlSendData>
 8008416:	e009      	b.n	800842c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9e7 	bl	80087ee <USBD_CtlError>
 8008420:	e004      	b.n	800842c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 faae 	bl	8008984 <USBD_CtlSendStatus>
 8008428:	e000      	b.n	800842c <USBD_GetDescriptor+0x2cc>
    return;
 800842a:	bf00      	nop
  }
}
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop

08008434 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	889b      	ldrh	r3, [r3, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d131      	bne.n	80084aa <USBD_SetAddress+0x76>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	88db      	ldrh	r3, [r3, #6]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d12d      	bne.n	80084aa <USBD_SetAddress+0x76>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	885b      	ldrh	r3, [r3, #2]
 8008452:	2b7f      	cmp	r3, #127	; 0x7f
 8008454:	d829      	bhi.n	80084aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	885b      	ldrh	r3, [r3, #2]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008460:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b03      	cmp	r3, #3
 800846c:	d104      	bne.n	8008478 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f9bc 	bl	80087ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008476:	e01d      	b.n	80084b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7bfa      	ldrb	r2, [r7, #15]
 800847c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fefb 	bl	8009280 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa7a 	bl	8008984 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2202      	movs	r2, #2
 800849a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849e:	e009      	b.n	80084b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a8:	e004      	b.n	80084b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f99e 	bl	80087ee <USBD_CtlError>
  }
}
 80084b2:	bf00      	nop
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	885b      	ldrh	r3, [r3, #2]
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	4b4e      	ldr	r3, [pc, #312]	; (800860c <USBD_SetConfig+0x150>)
 80084d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084d4:	4b4d      	ldr	r3, [pc, #308]	; (800860c <USBD_SetConfig+0x150>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d905      	bls.n	80084e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f985 	bl	80087ee <USBD_CtlError>
    return USBD_FAIL;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e08c      	b.n	8008602 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d002      	beq.n	80084fa <USBD_SetConfig+0x3e>
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d029      	beq.n	800854c <USBD_SetConfig+0x90>
 80084f8:	e075      	b.n	80085e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084fa:	4b44      	ldr	r3, [pc, #272]	; (800860c <USBD_SetConfig+0x150>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d020      	beq.n	8008544 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008502:	4b42      	ldr	r3, [pc, #264]	; (800860c <USBD_SetConfig+0x150>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800850c:	4b3f      	ldr	r3, [pc, #252]	; (800860c <USBD_SetConfig+0x150>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7fe ffe7 	bl	80074e6 <USBD_SetClassConfig>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d008      	beq.n	8008534 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f962 	bl	80087ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2202      	movs	r2, #2
 800852e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008532:	e065      	b.n	8008600 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fa25 	bl	8008984 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2203      	movs	r2, #3
 800853e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008542:	e05d      	b.n	8008600 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fa1d 	bl	8008984 <USBD_CtlSendStatus>
      break;
 800854a:	e059      	b.n	8008600 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800854c:	4b2f      	ldr	r3, [pc, #188]	; (800860c <USBD_SetConfig+0x150>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d112      	bne.n	800857a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2202      	movs	r2, #2
 8008558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800855c:	4b2b      	ldr	r3, [pc, #172]	; (800860c <USBD_SetConfig+0x150>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008566:	4b29      	ldr	r3, [pc, #164]	; (800860c <USBD_SetConfig+0x150>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fe ffd6 	bl	800751e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fa06 	bl	8008984 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008578:	e042      	b.n	8008600 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800857a:	4b24      	ldr	r3, [pc, #144]	; (800860c <USBD_SetConfig+0x150>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	429a      	cmp	r2, r3
 8008586:	d02a      	beq.n	80085de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7fe ffc4 	bl	800751e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008596:	4b1d      	ldr	r3, [pc, #116]	; (800860c <USBD_SetConfig+0x150>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085a0:	4b1a      	ldr	r3, [pc, #104]	; (800860c <USBD_SetConfig+0x150>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fe ff9d 	bl	80074e6 <USBD_SetClassConfig>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00f      	beq.n	80085d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f918 	bl	80087ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fe ffa9 	bl	800751e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085d4:	e014      	b.n	8008600 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f9d4 	bl	8008984 <USBD_CtlSendStatus>
      break;
 80085dc:	e010      	b.n	8008600 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f9d0 	bl	8008984 <USBD_CtlSendStatus>
      break;
 80085e4:	e00c      	b.n	8008600 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f900 	bl	80087ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085ee:	4b07      	ldr	r3, [pc, #28]	; (800860c <USBD_SetConfig+0x150>)
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7fe ff92 	bl	800751e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085fa:	2303      	movs	r3, #3
 80085fc:	73fb      	strb	r3, [r7, #15]
      break;
 80085fe:	bf00      	nop
  }

  return ret;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	2000027c 	.word	0x2000027c

08008610 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	88db      	ldrh	r3, [r3, #6]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d004      	beq.n	800862c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f8e2 	bl	80087ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800862a:	e023      	b.n	8008674 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	dc02      	bgt.n	800863e <USBD_GetConfig+0x2e>
 8008638:	2b00      	cmp	r3, #0
 800863a:	dc03      	bgt.n	8008644 <USBD_GetConfig+0x34>
 800863c:	e015      	b.n	800866a <USBD_GetConfig+0x5a>
 800863e:	2b03      	cmp	r3, #3
 8008640:	d00b      	beq.n	800865a <USBD_GetConfig+0x4a>
 8008642:	e012      	b.n	800866a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3308      	adds	r3, #8
 800864e:	2201      	movs	r2, #1
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f93c 	bl	80088d0 <USBD_CtlSendData>
        break;
 8008658:	e00c      	b.n	8008674 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	3304      	adds	r3, #4
 800865e:	2201      	movs	r2, #1
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f934 	bl	80088d0 <USBD_CtlSendData>
        break;
 8008668:	e004      	b.n	8008674 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f8be 	bl	80087ee <USBD_CtlError>
        break;
 8008672:	bf00      	nop
}
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868c:	b2db      	uxtb	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	2b02      	cmp	r3, #2
 8008692:	d81e      	bhi.n	80086d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	88db      	ldrh	r3, [r3, #6]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d004      	beq.n	80086a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f8a5 	bl	80087ee <USBD_CtlError>
        break;
 80086a4:	e01a      	b.n	80086dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f043 0202 	orr.w	r2, r3, #2
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	330c      	adds	r3, #12
 80086c6:	2202      	movs	r2, #2
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f900 	bl	80088d0 <USBD_CtlSendData>
      break;
 80086d0:	e004      	b.n	80086dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f88a 	bl	80087ee <USBD_CtlError>
      break;
 80086da:	bf00      	nop
  }
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	885b      	ldrh	r3, [r3, #2]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d107      	bne.n	8008706 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f940 	bl	8008984 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008704:	e013      	b.n	800872e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	885b      	ldrh	r3, [r3, #2]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d10b      	bne.n	8008726 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	889b      	ldrh	r3, [r3, #4]
 8008712:	0a1b      	lsrs	r3, r3, #8
 8008714:	b29b      	uxth	r3, r3
 8008716:	b2da      	uxtb	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f930 	bl	8008984 <USBD_CtlSendStatus>
}
 8008724:	e003      	b.n	800872e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f860 	bl	80087ee <USBD_CtlError>
}
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008746:	b2db      	uxtb	r3, r3
 8008748:	3b01      	subs	r3, #1
 800874a:	2b02      	cmp	r3, #2
 800874c:	d80b      	bhi.n	8008766 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	885b      	ldrh	r3, [r3, #2]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d10c      	bne.n	8008770 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f910 	bl	8008984 <USBD_CtlSendStatus>
      }
      break;
 8008764:	e004      	b.n	8008770 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f840 	bl	80087ee <USBD_CtlError>
      break;
 800876e:	e000      	b.n	8008772 <USBD_ClrFeature+0x3c>
      break;
 8008770:	bf00      	nop
  }
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	781a      	ldrb	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	3301      	adds	r3, #1
 8008794:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	781a      	ldrb	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3301      	adds	r3, #1
 80087a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7ff fa41 	bl	8007c2c <SWAPBYTE>
 80087aa:	4603      	mov	r3, r0
 80087ac:	461a      	mov	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3301      	adds	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3301      	adds	r3, #1
 80087bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff fa34 	bl	8007c2c <SWAPBYTE>
 80087c4:	4603      	mov	r3, r0
 80087c6:	461a      	mov	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3301      	adds	r3, #1
 80087d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f7ff fa27 	bl	8007c2c <SWAPBYTE>
 80087de:	4603      	mov	r3, r0
 80087e0:	461a      	mov	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	80da      	strh	r2, [r3, #6]
}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087f8:	2180      	movs	r1, #128	; 0x80
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fcd6 	bl	80091ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008800:	2100      	movs	r1, #0
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fcd2 	bl	80091ac <USBD_LL_StallEP>
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d036      	beq.n	8008894 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800882a:	6938      	ldr	r0, [r7, #16]
 800882c:	f000 f836 	bl	800889c <USBD_GetLen>
 8008830:	4603      	mov	r3, r0
 8008832:	3301      	adds	r3, #1
 8008834:	b29b      	uxth	r3, r3
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	4413      	add	r3, r2
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	7812      	ldrb	r2, [r2, #0]
 8008848:	701a      	strb	r2, [r3, #0]
  idx++;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	3301      	adds	r3, #1
 800884e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	4413      	add	r3, r2
 8008856:	2203      	movs	r2, #3
 8008858:	701a      	strb	r2, [r3, #0]
  idx++;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	3301      	adds	r3, #1
 800885e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008860:	e013      	b.n	800888a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	4413      	add	r3, r2
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	7812      	ldrb	r2, [r2, #0]
 800886c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	3301      	adds	r3, #1
 8008872:	613b      	str	r3, [r7, #16]
    idx++;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	3301      	adds	r3, #1
 8008878:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	4413      	add	r3, r2
 8008880:	2200      	movs	r2, #0
 8008882:	701a      	strb	r2, [r3, #0]
    idx++;
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	3301      	adds	r3, #1
 8008888:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e7      	bne.n	8008862 <USBD_GetString+0x52>
 8008892:	e000      	b.n	8008896 <USBD_GetString+0x86>
    return;
 8008894:	bf00      	nop
  }
}
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088ac:	e005      	b.n	80088ba <USBD_GetLen+0x1e>
  {
    len++;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	3301      	adds	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	3301      	adds	r3, #1
 80088b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1f5      	bne.n	80088ae <USBD_GetLen+0x12>
  }

  return len;
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2202      	movs	r2, #2
 80088e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	2100      	movs	r1, #0
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 fce1 	bl	80092be <USBD_LL_Transmit>

  return USBD_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	2100      	movs	r1, #0
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fcd0 	bl	80092be <USBD_LL_Transmit>

  return USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2203      	movs	r2, #3
 8008938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	2100      	movs	r1, #0
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 fcd4 	bl	8009300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	60b9      	str	r1, [r7, #8]
 800896c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	2100      	movs	r1, #0
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 fcc3 	bl	8009300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2204      	movs	r2, #4
 8008990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008994:	2300      	movs	r3, #0
 8008996:	2200      	movs	r2, #0
 8008998:	2100      	movs	r1, #0
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fc8f 	bl	80092be <USBD_LL_Transmit>

  return USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2205      	movs	r2, #5
 80089b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089ba:	2300      	movs	r3, #0
 80089bc:	2200      	movs	r2, #0
 80089be:	2100      	movs	r1, #0
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fc9d 	bl	8009300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089d4:	2200      	movs	r2, #0
 80089d6:	4912      	ldr	r1, [pc, #72]	; (8008a20 <MX_USB_DEVICE_Init+0x50>)
 80089d8:	4812      	ldr	r0, [pc, #72]	; (8008a24 <MX_USB_DEVICE_Init+0x54>)
 80089da:	f7fe fd07 	bl	80073ec <USBD_Init>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089e4:	f7f7 fff6 	bl	80009d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089e8:	490f      	ldr	r1, [pc, #60]	; (8008a28 <MX_USB_DEVICE_Init+0x58>)
 80089ea:	480e      	ldr	r0, [pc, #56]	; (8008a24 <MX_USB_DEVICE_Init+0x54>)
 80089ec:	f7fe fd2e 	bl	800744c <USBD_RegisterClass>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089f6:	f7f7 ffed 	bl	80009d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089fa:	490c      	ldr	r1, [pc, #48]	; (8008a2c <MX_USB_DEVICE_Init+0x5c>)
 80089fc:	4809      	ldr	r0, [pc, #36]	; (8008a24 <MX_USB_DEVICE_Init+0x54>)
 80089fe:	f7fe fc1f 	bl	8007240 <USBD_CDC_RegisterInterface>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a08:	f7f7 ffe4 	bl	80009d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a0c:	4805      	ldr	r0, [pc, #20]	; (8008a24 <MX_USB_DEVICE_Init+0x54>)
 8008a0e:	f7fe fd53 	bl	80074b8 <USBD_Start>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a18:	f7f7 ffdc 	bl	80009d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a1c:	bf00      	nop
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	200000bc 	.word	0x200000bc
 8008a24:	20000280 	.word	0x20000280
 8008a28:	20000028 	.word	0x20000028
 8008a2c:	200000a8 	.word	0x200000a8

08008a30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a34:	2200      	movs	r2, #0
 8008a36:	4905      	ldr	r1, [pc, #20]	; (8008a4c <CDC_Init_FS+0x1c>)
 8008a38:	4805      	ldr	r0, [pc, #20]	; (8008a50 <CDC_Init_FS+0x20>)
 8008a3a:	f7fe fc1b 	bl	8007274 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a3e:	4905      	ldr	r1, [pc, #20]	; (8008a54 <CDC_Init_FS+0x24>)
 8008a40:	4803      	ldr	r0, [pc, #12]	; (8008a50 <CDC_Init_FS+0x20>)
 8008a42:	f7fe fc39 	bl	80072b8 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8008a46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	2000095c 	.word	0x2000095c
 8008a50:	20000280 	.word	0x20000280
 8008a54:	2000055c 	.word	0x2000055c

08008a58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8008a5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	71fb      	strb	r3, [r7, #7]
 8008a74:	4613      	mov	r3, r2
 8008a76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	2b23      	cmp	r3, #35	; 0x23
 8008a7c:	d84a      	bhi.n	8008b14 <CDC_Control_FS+0xac>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <CDC_Control_FS+0x1c>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008b15 	.word	0x08008b15
 8008a88:	08008b15 	.word	0x08008b15
 8008a8c:	08008b15 	.word	0x08008b15
 8008a90:	08008b15 	.word	0x08008b15
 8008a94:	08008b15 	.word	0x08008b15
 8008a98:	08008b15 	.word	0x08008b15
 8008a9c:	08008b15 	.word	0x08008b15
 8008aa0:	08008b15 	.word	0x08008b15
 8008aa4:	08008b15 	.word	0x08008b15
 8008aa8:	08008b15 	.word	0x08008b15
 8008aac:	08008b15 	.word	0x08008b15
 8008ab0:	08008b15 	.word	0x08008b15
 8008ab4:	08008b15 	.word	0x08008b15
 8008ab8:	08008b15 	.word	0x08008b15
 8008abc:	08008b15 	.word	0x08008b15
 8008ac0:	08008b15 	.word	0x08008b15
 8008ac4:	08008b15 	.word	0x08008b15
 8008ac8:	08008b15 	.word	0x08008b15
 8008acc:	08008b15 	.word	0x08008b15
 8008ad0:	08008b15 	.word	0x08008b15
 8008ad4:	08008b15 	.word	0x08008b15
 8008ad8:	08008b15 	.word	0x08008b15
 8008adc:	08008b15 	.word	0x08008b15
 8008ae0:	08008b15 	.word	0x08008b15
 8008ae4:	08008b15 	.word	0x08008b15
 8008ae8:	08008b15 	.word	0x08008b15
 8008aec:	08008b15 	.word	0x08008b15
 8008af0:	08008b15 	.word	0x08008b15
 8008af4:	08008b15 	.word	0x08008b15
 8008af8:	08008b15 	.word	0x08008b15
 8008afc:	08008b15 	.word	0x08008b15
 8008b00:	08008b15 	.word	0x08008b15
 8008b04:	08008b15 	.word	0x08008b15
 8008b08:	08008b15 	.word	0x08008b15
 8008b0c:	08008b15 	.word	0x08008b15
 8008b10:	08008b15 	.word	0x08008b15
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8008b14:	bf00      	nop
    }

    return (USBD_OK);
 8008b16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	4805      	ldr	r0, [pc, #20]	; (8008b48 <CDC_Receive_FS+0x24>)
 8008b32:	f7fe fbc1 	bl	80072b8 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b36:	4804      	ldr	r0, [pc, #16]	; (8008b48 <CDC_Receive_FS+0x24>)
 8008b38:	f7fe fc22 	bl	8007380 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8008b3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000280 	.word	0x20000280

08008b4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8008b5c:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <CDC_Transmit_FS+0x48>)
 8008b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b62:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e00b      	b.n	8008b8a <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b72:	887b      	ldrh	r3, [r7, #2]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4806      	ldr	r0, [pc, #24]	; (8008b94 <CDC_Transmit_FS+0x48>)
 8008b7a:	f7fe fb7b 	bl	8007274 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b7e:	4805      	ldr	r0, [pc, #20]	; (8008b94 <CDC_Transmit_FS+0x48>)
 8008b80:	f7fe fbb8 	bl	80072f4 <USBD_CDC_TransmitPacket>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000280 	.word	0x20000280

08008b98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008baa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
	...

08008bbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2212      	movs	r2, #18
 8008bcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008bce:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	200000d8 	.word	0x200000d8

08008be0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2204      	movs	r2, #4
 8008bf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bf2:	4b03      	ldr	r3, [pc, #12]	; (8008c00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	200000ec 	.word	0x200000ec

08008c04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	6039      	str	r1, [r7, #0]
 8008c0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d105      	bne.n	8008c22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	4907      	ldr	r1, [pc, #28]	; (8008c38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c1a:	4808      	ldr	r0, [pc, #32]	; (8008c3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008c1c:	f7ff fdf8 	bl	8008810 <USBD_GetString>
 8008c20:	e004      	b.n	8008c2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	4904      	ldr	r1, [pc, #16]	; (8008c38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c26:	4805      	ldr	r0, [pc, #20]	; (8008c3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008c28:	f7ff fdf2 	bl	8008810 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c2c:	4b02      	ldr	r3, [pc, #8]	; (8008c38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20000d5c 	.word	0x20000d5c
 8008c3c:	08009ea4 	.word	0x08009ea4

08008c40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	6039      	str	r1, [r7, #0]
 8008c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	4904      	ldr	r1, [pc, #16]	; (8008c60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c50:	4804      	ldr	r0, [pc, #16]	; (8008c64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c52:	f7ff fddd 	bl	8008810 <USBD_GetString>
  return USBD_StrDesc;
 8008c56:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20000d5c 	.word	0x20000d5c
 8008c64:	08009ebc 	.word	0x08009ebc

08008c68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	221a      	movs	r2, #26
 8008c78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c7a:	f000 f843 	bl	8008d04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c7e:	4b02      	ldr	r3, [pc, #8]	; (8008c88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	200000f0 	.word	0x200000f0

08008c8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d105      	bne.n	8008caa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	4907      	ldr	r1, [pc, #28]	; (8008cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ca2:	4808      	ldr	r0, [pc, #32]	; (8008cc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ca4:	f7ff fdb4 	bl	8008810 <USBD_GetString>
 8008ca8:	e004      	b.n	8008cb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4904      	ldr	r1, [pc, #16]	; (8008cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cae:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cb0:	f7ff fdae 	bl	8008810 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000d5c 	.word	0x20000d5c
 8008cc4:	08009ed0 	.word	0x08009ed0

08008cc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	6039      	str	r1, [r7, #0]
 8008cd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d105      	bne.n	8008ce6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	4907      	ldr	r1, [pc, #28]	; (8008cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cde:	4808      	ldr	r0, [pc, #32]	; (8008d00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ce0:	f7ff fd96 	bl	8008810 <USBD_GetString>
 8008ce4:	e004      	b.n	8008cf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	4904      	ldr	r1, [pc, #16]	; (8008cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cea:	4805      	ldr	r0, [pc, #20]	; (8008d00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cec:	f7ff fd90 	bl	8008810 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cf0:	4b02      	ldr	r3, [pc, #8]	; (8008cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000d5c 	.word	0x20000d5c
 8008d00:	08009edc 	.word	0x08009edc

08008d04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d0a:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <Get_SerialNum+0x44>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d10:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <Get_SerialNum+0x48>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d16:	4b0e      	ldr	r3, [pc, #56]	; (8008d50 <Get_SerialNum+0x4c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4413      	add	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d009      	beq.n	8008d3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	4909      	ldr	r1, [pc, #36]	; (8008d54 <Get_SerialNum+0x50>)
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 f814 	bl	8008d5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d34:	2204      	movs	r2, #4
 8008d36:	4908      	ldr	r1, [pc, #32]	; (8008d58 <Get_SerialNum+0x54>)
 8008d38:	68b8      	ldr	r0, [r7, #8]
 8008d3a:	f000 f80f 	bl	8008d5c <IntToUnicode>
  }
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	1fff7a10 	.word	0x1fff7a10
 8008d4c:	1fff7a14 	.word	0x1fff7a14
 8008d50:	1fff7a18 	.word	0x1fff7a18
 8008d54:	200000f2 	.word	0x200000f2
 8008d58:	20000102 	.word	0x20000102

08008d5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]
 8008d72:	e027      	b.n	8008dc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	0f1b      	lsrs	r3, r3, #28
 8008d78:	2b09      	cmp	r3, #9
 8008d7a:	d80b      	bhi.n	8008d94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	0f1b      	lsrs	r3, r3, #28
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	4619      	mov	r1, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	440b      	add	r3, r1
 8008d8c:	3230      	adds	r2, #48	; 0x30
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	e00a      	b.n	8008daa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	0f1b      	lsrs	r3, r3, #28
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	4619      	mov	r1, r3
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	440b      	add	r3, r1
 8008da4:	3237      	adds	r2, #55	; 0x37
 8008da6:	b2d2      	uxtb	r2, r2
 8008da8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	011b      	lsls	r3, r3, #4
 8008dae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	3301      	adds	r3, #1
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	4413      	add	r3, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
 8008dc4:	7dfa      	ldrb	r2, [r7, #23]
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d3d3      	bcc.n	8008d74 <IntToUnicode+0x18>
  }
}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
	...

08008ddc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	; 0x28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de4:	f107 0314 	add.w	r3, r7, #20
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	605a      	str	r2, [r3, #4]
 8008dee:	609a      	str	r2, [r3, #8]
 8008df0:	60da      	str	r2, [r3, #12]
 8008df2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dfc:	d13a      	bne.n	8008e74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dfe:	2300      	movs	r3, #0
 8008e00:	613b      	str	r3, [r7, #16]
 8008e02:	4b1e      	ldr	r3, [pc, #120]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e06:	4a1d      	ldr	r2, [pc, #116]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e08:	f043 0301 	orr.w	r3, r3, #1
 8008e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e0e:	4b1b      	ldr	r3, [pc, #108]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e20:	2302      	movs	r3, #2
 8008e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e2c:	230a      	movs	r3, #10
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e30:	f107 0314 	add.w	r3, r7, #20
 8008e34:	4619      	mov	r1, r3
 8008e36:	4812      	ldr	r0, [pc, #72]	; (8008e80 <HAL_PCD_MspInit+0xa4>)
 8008e38:	f7f8 feda 	bl	8001bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e3c:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e40:	4a0e      	ldr	r2, [pc, #56]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e46:	6353      	str	r3, [r2, #52]	; 0x34
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e50:	4a0a      	ldr	r2, [pc, #40]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e56:	6453      	str	r3, [r2, #68]	; 0x44
 8008e58:	4b08      	ldr	r3, [pc, #32]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e64:	2200      	movs	r2, #0
 8008e66:	2100      	movs	r1, #0
 8008e68:	2043      	movs	r0, #67	; 0x43
 8008e6a:	f7f8 fd2a 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e6e:	2043      	movs	r0, #67	; 0x43
 8008e70:	f7f8 fd43 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e74:	bf00      	nop
 8008e76:	3728      	adds	r7, #40	; 0x28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	40023800 	.word	0x40023800
 8008e80:	40020000 	.word	0x40020000

08008e84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	f7fe fb59 	bl	8007552 <USBD_LL_SetupStage>
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008eba:	78fa      	ldrb	r2, [r7, #3]
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	440b      	add	r3, r1
 8008ec8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	78fb      	ldrb	r3, [r7, #3]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	f7fe fb93 	bl	80075fc <USBD_LL_DataOutStage>
}
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	334c      	adds	r3, #76	; 0x4c
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	4619      	mov	r1, r3
 8008f06:	f7fe fc2c 	bl	8007762 <USBD_LL_DataInStage>
}
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fe fd60 	bl	80079e6 <USBD_LL_SOF>
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f36:	2301      	movs	r3, #1
 8008f38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d001      	beq.n	8008f46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f42:	f7f7 fd47 	bl	80009d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f4c:	7bfa      	ldrb	r2, [r7, #15]
 8008f4e:	4611      	mov	r1, r2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe fd0a 	bl	800796a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe fcb2 	bl	80078c6 <USBD_LL_Reset>
}
 8008f62:	bf00      	nop
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fd05 	bl	800798a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f92:	f043 0301 	orr.w	r3, r3, #1
 8008f96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d005      	beq.n	8008fac <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fa0:	4b04      	ldr	r3, [pc, #16]	; (8008fb4 <HAL_PCD_SuspendCallback+0x48>)
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	4a03      	ldr	r2, [pc, #12]	; (8008fb4 <HAL_PCD_SuspendCallback+0x48>)
 8008fa6:	f043 0306 	orr.w	r3, r3, #6
 8008faa:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	e000ed00 	.word	0xe000ed00

08008fb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe fcf5 	bl	80079b6 <USBD_LL_Resume>
}
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fe6:	78fa      	ldrb	r2, [r7, #3]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe fd4d 	bl	8007a8a <USBD_LL_IsoOUTIncomplete>
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	4611      	mov	r1, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fd09 	bl	8007a26 <USBD_LL_IsoINIncomplete>
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe fd5f 	bl	8007aee <USBD_LL_DevConnected>
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fd5c 	bl	8007b04 <USBD_LL_DevDisconnected>
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d13c      	bne.n	80090de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009064:	4a20      	ldr	r2, [pc, #128]	; (80090e8 <USBD_LL_Init+0x94>)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a1e      	ldr	r2, [pc, #120]	; (80090e8 <USBD_LL_Init+0x94>)
 8009070:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009074:	4b1c      	ldr	r3, [pc, #112]	; (80090e8 <USBD_LL_Init+0x94>)
 8009076:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800907a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800907c:	4b1a      	ldr	r3, [pc, #104]	; (80090e8 <USBD_LL_Init+0x94>)
 800907e:	2204      	movs	r2, #4
 8009080:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009082:	4b19      	ldr	r3, [pc, #100]	; (80090e8 <USBD_LL_Init+0x94>)
 8009084:	2202      	movs	r2, #2
 8009086:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009088:	4b17      	ldr	r3, [pc, #92]	; (80090e8 <USBD_LL_Init+0x94>)
 800908a:	2200      	movs	r2, #0
 800908c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800908e:	4b16      	ldr	r3, [pc, #88]	; (80090e8 <USBD_LL_Init+0x94>)
 8009090:	2202      	movs	r2, #2
 8009092:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009094:	4b14      	ldr	r3, [pc, #80]	; (80090e8 <USBD_LL_Init+0x94>)
 8009096:	2200      	movs	r2, #0
 8009098:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800909a:	4b13      	ldr	r3, [pc, #76]	; (80090e8 <USBD_LL_Init+0x94>)
 800909c:	2200      	movs	r2, #0
 800909e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80090a0:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <USBD_LL_Init+0x94>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80090a6:	4b10      	ldr	r3, [pc, #64]	; (80090e8 <USBD_LL_Init+0x94>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090ac:	4b0e      	ldr	r3, [pc, #56]	; (80090e8 <USBD_LL_Init+0x94>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090b2:	480d      	ldr	r0, [pc, #52]	; (80090e8 <USBD_LL_Init+0x94>)
 80090b4:	f7f9 fedf 	bl	8002e76 <HAL_PCD_Init>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80090be:	f7f7 fc89 	bl	80009d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80090c2:	2180      	movs	r1, #128	; 0x80
 80090c4:	4808      	ldr	r0, [pc, #32]	; (80090e8 <USBD_LL_Init+0x94>)
 80090c6:	f7fb f936 	bl	8004336 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80090ca:	2240      	movs	r2, #64	; 0x40
 80090cc:	2100      	movs	r1, #0
 80090ce:	4806      	ldr	r0, [pc, #24]	; (80090e8 <USBD_LL_Init+0x94>)
 80090d0:	f7fb f8ea 	bl	80042a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80090d4:	2280      	movs	r2, #128	; 0x80
 80090d6:	2101      	movs	r1, #1
 80090d8:	4803      	ldr	r0, [pc, #12]	; (80090e8 <USBD_LL_Init+0x94>)
 80090da:	f7fb f8e5 	bl	80042a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000f5c 	.word	0x20000f5c

080090ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009102:	4618      	mov	r0, r3
 8009104:	f7f9 ffd4 	bl	80030b0 <HAL_PCD_Start>
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	4618      	mov	r0, r3
 8009110:	f000 f942 	bl	8009398 <USBD_Get_USB_Status>
 8009114:	4603      	mov	r3, r0
 8009116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009118:	7bbb      	ldrb	r3, [r7, #14]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	4608      	mov	r0, r1
 800912c:	4611      	mov	r1, r2
 800912e:	461a      	mov	r2, r3
 8009130:	4603      	mov	r3, r0
 8009132:	70fb      	strb	r3, [r7, #3]
 8009134:	460b      	mov	r3, r1
 8009136:	70bb      	strb	r3, [r7, #2]
 8009138:	4613      	mov	r3, r2
 800913a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800914a:	78bb      	ldrb	r3, [r7, #2]
 800914c:	883a      	ldrh	r2, [r7, #0]
 800914e:	78f9      	ldrb	r1, [r7, #3]
 8009150:	f7fa fca5 	bl	8003a9e <HAL_PCD_EP_Open>
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	4618      	mov	r0, r3
 800915c:	f000 f91c 	bl	8009398 <USBD_Get_USB_Status>
 8009160:	4603      	mov	r3, r0
 8009162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009164:	7bbb      	ldrb	r3, [r7, #14]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	4611      	mov	r1, r2
 800918c:	4618      	mov	r0, r3
 800918e:	f7fa fcee 	bl	8003b6e <HAL_PCD_EP_Close>
 8009192:	4603      	mov	r3, r0
 8009194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	4618      	mov	r0, r3
 800919a:	f000 f8fd 	bl	8009398 <USBD_Get_USB_Status>
 800919e:	4603      	mov	r3, r0
 80091a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091c6:	78fa      	ldrb	r2, [r7, #3]
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fa fdc6 	bl	8003d5c <HAL_PCD_EP_SetStall>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 f8de 	bl	8009398 <USBD_Get_USB_Status>
 80091dc:	4603      	mov	r3, r0
 80091de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	4611      	mov	r1, r2
 8009208:	4618      	mov	r0, r3
 800920a:	f7fa fe0b 	bl	8003e24 <HAL_PCD_EP_ClrStall>
 800920e:	4603      	mov	r3, r0
 8009210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	4618      	mov	r0, r3
 8009216:	f000 f8bf 	bl	8009398 <USBD_Get_USB_Status>
 800921a:	4603      	mov	r3, r0
 800921c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800921e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800923a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800923c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009240:	2b00      	cmp	r3, #0
 8009242:	da0b      	bge.n	800925c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009244:	78fb      	ldrb	r3, [r7, #3]
 8009246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800924a:	68f9      	ldr	r1, [r7, #12]
 800924c:	4613      	mov	r3, r2
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	4413      	add	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	333e      	adds	r3, #62	; 0x3e
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	e00b      	b.n	8009274 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	4613      	mov	r3, r2
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	4413      	add	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	440b      	add	r3, r1
 800926e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009272:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800929a:	78fa      	ldrb	r2, [r7, #3]
 800929c:	4611      	mov	r1, r2
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fa fbd8 	bl	8003a54 <HAL_PCD_SetAddress>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 f874 	bl	8009398 <USBD_Get_USB_Status>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b086      	sub	sp, #24
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
 80092ca:	460b      	mov	r3, r1
 80092cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092dc:	7af9      	ldrb	r1, [r7, #11]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	f7fa fcf1 	bl	8003cc8 <HAL_PCD_EP_Transmit>
 80092e6:	4603      	mov	r3, r0
 80092e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 f853 	bl	8009398 <USBD_Get_USB_Status>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	460b      	mov	r3, r1
 800930e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800931e:	7af9      	ldrb	r1, [r7, #11]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	f7fa fc6d 	bl	8003c02 <HAL_PCD_EP_Receive>
 8009328:	4603      	mov	r3, r0
 800932a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f832 	bl	8009398 <USBD_Get_USB_Status>
 8009334:	4603      	mov	r3, r0
 8009336:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009338:	7dbb      	ldrb	r3, [r7, #22]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	4611      	mov	r1, r2
 8009358:	4618      	mov	r0, r3
 800935a:	f7fa fc9d 	bl	8003c98 <HAL_PCD_EP_GetRxCount>
 800935e:	4603      	mov	r3, r0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009370:	4b03      	ldr	r3, [pc, #12]	; (8009380 <USBD_static_malloc+0x18>)
}
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	20001468 	.word	0x20001468

08009384 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]

}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d817      	bhi.n	80093dc <USBD_Get_USB_Status+0x44>
 80093ac:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <USBD_Get_USB_Status+0x1c>)
 80093ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b2:	bf00      	nop
 80093b4:	080093c5 	.word	0x080093c5
 80093b8:	080093cb 	.word	0x080093cb
 80093bc:	080093d1 	.word	0x080093d1
 80093c0:	080093d7 	.word	0x080093d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]
    break;
 80093c8:	e00b      	b.n	80093e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093ca:	2303      	movs	r3, #3
 80093cc:	73fb      	strb	r3, [r7, #15]
    break;
 80093ce:	e008      	b.n	80093e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093d0:	2301      	movs	r3, #1
 80093d2:	73fb      	strb	r3, [r7, #15]
    break;
 80093d4:	e005      	b.n	80093e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093d6:	2303      	movs	r3, #3
 80093d8:	73fb      	strb	r3, [r7, #15]
    break;
 80093da:	e002      	b.n	80093e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093dc:	2303      	movs	r3, #3
 80093de:	73fb      	strb	r3, [r7, #15]
    break;
 80093e0:	bf00      	nop
  }
  return usb_status;
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <malloc>:
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <malloc+0xc>)
 80093f2:	4601      	mov	r1, r0
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	f000 b82b 	b.w	8009450 <_malloc_r>
 80093fa:	bf00      	nop
 80093fc:	20000158 	.word	0x20000158

08009400 <free>:
 8009400:	4b02      	ldr	r3, [pc, #8]	; (800940c <free+0xc>)
 8009402:	4601      	mov	r1, r0
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	f000 b923 	b.w	8009650 <_free_r>
 800940a:	bf00      	nop
 800940c:	20000158 	.word	0x20000158

08009410 <sbrk_aligned>:
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	4e0e      	ldr	r6, [pc, #56]	; (800944c <sbrk_aligned+0x3c>)
 8009414:	460c      	mov	r4, r1
 8009416:	6831      	ldr	r1, [r6, #0]
 8009418:	4605      	mov	r5, r0
 800941a:	b911      	cbnz	r1, 8009422 <sbrk_aligned+0x12>
 800941c:	f000 f8dc 	bl	80095d8 <_sbrk_r>
 8009420:	6030      	str	r0, [r6, #0]
 8009422:	4621      	mov	r1, r4
 8009424:	4628      	mov	r0, r5
 8009426:	f000 f8d7 	bl	80095d8 <_sbrk_r>
 800942a:	1c43      	adds	r3, r0, #1
 800942c:	d00a      	beq.n	8009444 <sbrk_aligned+0x34>
 800942e:	1cc4      	adds	r4, r0, #3
 8009430:	f024 0403 	bic.w	r4, r4, #3
 8009434:	42a0      	cmp	r0, r4
 8009436:	d007      	beq.n	8009448 <sbrk_aligned+0x38>
 8009438:	1a21      	subs	r1, r4, r0
 800943a:	4628      	mov	r0, r5
 800943c:	f000 f8cc 	bl	80095d8 <_sbrk_r>
 8009440:	3001      	adds	r0, #1
 8009442:	d101      	bne.n	8009448 <sbrk_aligned+0x38>
 8009444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009448:	4620      	mov	r0, r4
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	2000168c 	.word	0x2000168c

08009450 <_malloc_r>:
 8009450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009454:	1ccd      	adds	r5, r1, #3
 8009456:	f025 0503 	bic.w	r5, r5, #3
 800945a:	3508      	adds	r5, #8
 800945c:	2d0c      	cmp	r5, #12
 800945e:	bf38      	it	cc
 8009460:	250c      	movcc	r5, #12
 8009462:	2d00      	cmp	r5, #0
 8009464:	4607      	mov	r7, r0
 8009466:	db01      	blt.n	800946c <_malloc_r+0x1c>
 8009468:	42a9      	cmp	r1, r5
 800946a:	d905      	bls.n	8009478 <_malloc_r+0x28>
 800946c:	230c      	movs	r3, #12
 800946e:	603b      	str	r3, [r7, #0]
 8009470:	2600      	movs	r6, #0
 8009472:	4630      	mov	r0, r6
 8009474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009478:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800954c <_malloc_r+0xfc>
 800947c:	f000 f868 	bl	8009550 <__malloc_lock>
 8009480:	f8d8 3000 	ldr.w	r3, [r8]
 8009484:	461c      	mov	r4, r3
 8009486:	bb5c      	cbnz	r4, 80094e0 <_malloc_r+0x90>
 8009488:	4629      	mov	r1, r5
 800948a:	4638      	mov	r0, r7
 800948c:	f7ff ffc0 	bl	8009410 <sbrk_aligned>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	4604      	mov	r4, r0
 8009494:	d155      	bne.n	8009542 <_malloc_r+0xf2>
 8009496:	f8d8 4000 	ldr.w	r4, [r8]
 800949a:	4626      	mov	r6, r4
 800949c:	2e00      	cmp	r6, #0
 800949e:	d145      	bne.n	800952c <_malloc_r+0xdc>
 80094a0:	2c00      	cmp	r4, #0
 80094a2:	d048      	beq.n	8009536 <_malloc_r+0xe6>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	4631      	mov	r1, r6
 80094a8:	4638      	mov	r0, r7
 80094aa:	eb04 0903 	add.w	r9, r4, r3
 80094ae:	f000 f893 	bl	80095d8 <_sbrk_r>
 80094b2:	4581      	cmp	r9, r0
 80094b4:	d13f      	bne.n	8009536 <_malloc_r+0xe6>
 80094b6:	6821      	ldr	r1, [r4, #0]
 80094b8:	1a6d      	subs	r5, r5, r1
 80094ba:	4629      	mov	r1, r5
 80094bc:	4638      	mov	r0, r7
 80094be:	f7ff ffa7 	bl	8009410 <sbrk_aligned>
 80094c2:	3001      	adds	r0, #1
 80094c4:	d037      	beq.n	8009536 <_malloc_r+0xe6>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	442b      	add	r3, r5
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	f8d8 3000 	ldr.w	r3, [r8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d038      	beq.n	8009546 <_malloc_r+0xf6>
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	42a2      	cmp	r2, r4
 80094d8:	d12b      	bne.n	8009532 <_malloc_r+0xe2>
 80094da:	2200      	movs	r2, #0
 80094dc:	605a      	str	r2, [r3, #4]
 80094de:	e00f      	b.n	8009500 <_malloc_r+0xb0>
 80094e0:	6822      	ldr	r2, [r4, #0]
 80094e2:	1b52      	subs	r2, r2, r5
 80094e4:	d41f      	bmi.n	8009526 <_malloc_r+0xd6>
 80094e6:	2a0b      	cmp	r2, #11
 80094e8:	d917      	bls.n	800951a <_malloc_r+0xca>
 80094ea:	1961      	adds	r1, r4, r5
 80094ec:	42a3      	cmp	r3, r4
 80094ee:	6025      	str	r5, [r4, #0]
 80094f0:	bf18      	it	ne
 80094f2:	6059      	strne	r1, [r3, #4]
 80094f4:	6863      	ldr	r3, [r4, #4]
 80094f6:	bf08      	it	eq
 80094f8:	f8c8 1000 	streq.w	r1, [r8]
 80094fc:	5162      	str	r2, [r4, r5]
 80094fe:	604b      	str	r3, [r1, #4]
 8009500:	4638      	mov	r0, r7
 8009502:	f104 060b 	add.w	r6, r4, #11
 8009506:	f000 f829 	bl	800955c <__malloc_unlock>
 800950a:	f026 0607 	bic.w	r6, r6, #7
 800950e:	1d23      	adds	r3, r4, #4
 8009510:	1af2      	subs	r2, r6, r3
 8009512:	d0ae      	beq.n	8009472 <_malloc_r+0x22>
 8009514:	1b9b      	subs	r3, r3, r6
 8009516:	50a3      	str	r3, [r4, r2]
 8009518:	e7ab      	b.n	8009472 <_malloc_r+0x22>
 800951a:	42a3      	cmp	r3, r4
 800951c:	6862      	ldr	r2, [r4, #4]
 800951e:	d1dd      	bne.n	80094dc <_malloc_r+0x8c>
 8009520:	f8c8 2000 	str.w	r2, [r8]
 8009524:	e7ec      	b.n	8009500 <_malloc_r+0xb0>
 8009526:	4623      	mov	r3, r4
 8009528:	6864      	ldr	r4, [r4, #4]
 800952a:	e7ac      	b.n	8009486 <_malloc_r+0x36>
 800952c:	4634      	mov	r4, r6
 800952e:	6876      	ldr	r6, [r6, #4]
 8009530:	e7b4      	b.n	800949c <_malloc_r+0x4c>
 8009532:	4613      	mov	r3, r2
 8009534:	e7cc      	b.n	80094d0 <_malloc_r+0x80>
 8009536:	230c      	movs	r3, #12
 8009538:	603b      	str	r3, [r7, #0]
 800953a:	4638      	mov	r0, r7
 800953c:	f000 f80e 	bl	800955c <__malloc_unlock>
 8009540:	e797      	b.n	8009472 <_malloc_r+0x22>
 8009542:	6025      	str	r5, [r4, #0]
 8009544:	e7dc      	b.n	8009500 <_malloc_r+0xb0>
 8009546:	605b      	str	r3, [r3, #4]
 8009548:	deff      	udf	#255	; 0xff
 800954a:	bf00      	nop
 800954c:	20001688 	.word	0x20001688

08009550 <__malloc_lock>:
 8009550:	4801      	ldr	r0, [pc, #4]	; (8009558 <__malloc_lock+0x8>)
 8009552:	f000 b87b 	b.w	800964c <__retarget_lock_acquire_recursive>
 8009556:	bf00      	nop
 8009558:	200017cc 	.word	0x200017cc

0800955c <__malloc_unlock>:
 800955c:	4801      	ldr	r0, [pc, #4]	; (8009564 <__malloc_unlock+0x8>)
 800955e:	f000 b876 	b.w	800964e <__retarget_lock_release_recursive>
 8009562:	bf00      	nop
 8009564:	200017cc 	.word	0x200017cc

08009568 <siprintf>:
 8009568:	b40e      	push	{r1, r2, r3}
 800956a:	b500      	push	{lr}
 800956c:	b09c      	sub	sp, #112	; 0x70
 800956e:	ab1d      	add	r3, sp, #116	; 0x74
 8009570:	9002      	str	r0, [sp, #8]
 8009572:	9006      	str	r0, [sp, #24]
 8009574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009578:	4809      	ldr	r0, [pc, #36]	; (80095a0 <siprintf+0x38>)
 800957a:	9107      	str	r1, [sp, #28]
 800957c:	9104      	str	r1, [sp, #16]
 800957e:	4909      	ldr	r1, [pc, #36]	; (80095a4 <siprintf+0x3c>)
 8009580:	f853 2b04 	ldr.w	r2, [r3], #4
 8009584:	9105      	str	r1, [sp, #20]
 8009586:	6800      	ldr	r0, [r0, #0]
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	a902      	add	r1, sp, #8
 800958c:	f000 f906 	bl	800979c <_svfiprintf_r>
 8009590:	9b02      	ldr	r3, [sp, #8]
 8009592:	2200      	movs	r2, #0
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	b01c      	add	sp, #112	; 0x70
 8009598:	f85d eb04 	ldr.w	lr, [sp], #4
 800959c:	b003      	add	sp, #12
 800959e:	4770      	bx	lr
 80095a0:	20000158 	.word	0x20000158
 80095a4:	ffff0208 	.word	0xffff0208

080095a8 <memset>:
 80095a8:	4402      	add	r2, r0
 80095aa:	4603      	mov	r3, r0
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d100      	bne.n	80095b2 <memset+0xa>
 80095b0:	4770      	bx	lr
 80095b2:	f803 1b01 	strb.w	r1, [r3], #1
 80095b6:	e7f9      	b.n	80095ac <memset+0x4>

080095b8 <strcat>:
 80095b8:	b510      	push	{r4, lr}
 80095ba:	4602      	mov	r2, r0
 80095bc:	7814      	ldrb	r4, [r2, #0]
 80095be:	4613      	mov	r3, r2
 80095c0:	3201      	adds	r2, #1
 80095c2:	2c00      	cmp	r4, #0
 80095c4:	d1fa      	bne.n	80095bc <strcat+0x4>
 80095c6:	3b01      	subs	r3, #1
 80095c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095d0:	2a00      	cmp	r2, #0
 80095d2:	d1f9      	bne.n	80095c8 <strcat+0x10>
 80095d4:	bd10      	pop	{r4, pc}
	...

080095d8 <_sbrk_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d06      	ldr	r5, [pc, #24]	; (80095f4 <_sbrk_r+0x1c>)
 80095dc:	2300      	movs	r3, #0
 80095de:	4604      	mov	r4, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	f7f7 fb1c 	bl	8000c20 <_sbrk>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_sbrk_r+0x1a>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_sbrk_r+0x1a>
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	200017c8 	.word	0x200017c8

080095f8 <__errno>:
 80095f8:	4b01      	ldr	r3, [pc, #4]	; (8009600 <__errno+0x8>)
 80095fa:	6818      	ldr	r0, [r3, #0]
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	20000158 	.word	0x20000158

08009604 <__libc_init_array>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	4d0d      	ldr	r5, [pc, #52]	; (800963c <__libc_init_array+0x38>)
 8009608:	4c0d      	ldr	r4, [pc, #52]	; (8009640 <__libc_init_array+0x3c>)
 800960a:	1b64      	subs	r4, r4, r5
 800960c:	10a4      	asrs	r4, r4, #2
 800960e:	2600      	movs	r6, #0
 8009610:	42a6      	cmp	r6, r4
 8009612:	d109      	bne.n	8009628 <__libc_init_array+0x24>
 8009614:	4d0b      	ldr	r5, [pc, #44]	; (8009644 <__libc_init_array+0x40>)
 8009616:	4c0c      	ldr	r4, [pc, #48]	; (8009648 <__libc_init_array+0x44>)
 8009618:	f000 fbae 	bl	8009d78 <_init>
 800961c:	1b64      	subs	r4, r4, r5
 800961e:	10a4      	asrs	r4, r4, #2
 8009620:	2600      	movs	r6, #0
 8009622:	42a6      	cmp	r6, r4
 8009624:	d105      	bne.n	8009632 <__libc_init_array+0x2e>
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	f855 3b04 	ldr.w	r3, [r5], #4
 800962c:	4798      	blx	r3
 800962e:	3601      	adds	r6, #1
 8009630:	e7ee      	b.n	8009610 <__libc_init_array+0xc>
 8009632:	f855 3b04 	ldr.w	r3, [r5], #4
 8009636:	4798      	blx	r3
 8009638:	3601      	adds	r6, #1
 800963a:	e7f2      	b.n	8009622 <__libc_init_array+0x1e>
 800963c:	08009f48 	.word	0x08009f48
 8009640:	08009f48 	.word	0x08009f48
 8009644:	08009f48 	.word	0x08009f48
 8009648:	08009f4c 	.word	0x08009f4c

0800964c <__retarget_lock_acquire_recursive>:
 800964c:	4770      	bx	lr

0800964e <__retarget_lock_release_recursive>:
 800964e:	4770      	bx	lr

08009650 <_free_r>:
 8009650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009652:	2900      	cmp	r1, #0
 8009654:	d044      	beq.n	80096e0 <_free_r+0x90>
 8009656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800965a:	9001      	str	r0, [sp, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	f1a1 0404 	sub.w	r4, r1, #4
 8009662:	bfb8      	it	lt
 8009664:	18e4      	addlt	r4, r4, r3
 8009666:	f7ff ff73 	bl	8009550 <__malloc_lock>
 800966a:	4a1e      	ldr	r2, [pc, #120]	; (80096e4 <_free_r+0x94>)
 800966c:	9801      	ldr	r0, [sp, #4]
 800966e:	6813      	ldr	r3, [r2, #0]
 8009670:	b933      	cbnz	r3, 8009680 <_free_r+0x30>
 8009672:	6063      	str	r3, [r4, #4]
 8009674:	6014      	str	r4, [r2, #0]
 8009676:	b003      	add	sp, #12
 8009678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800967c:	f7ff bf6e 	b.w	800955c <__malloc_unlock>
 8009680:	42a3      	cmp	r3, r4
 8009682:	d908      	bls.n	8009696 <_free_r+0x46>
 8009684:	6825      	ldr	r5, [r4, #0]
 8009686:	1961      	adds	r1, r4, r5
 8009688:	428b      	cmp	r3, r1
 800968a:	bf01      	itttt	eq
 800968c:	6819      	ldreq	r1, [r3, #0]
 800968e:	685b      	ldreq	r3, [r3, #4]
 8009690:	1949      	addeq	r1, r1, r5
 8009692:	6021      	streq	r1, [r4, #0]
 8009694:	e7ed      	b.n	8009672 <_free_r+0x22>
 8009696:	461a      	mov	r2, r3
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	b10b      	cbz	r3, 80096a0 <_free_r+0x50>
 800969c:	42a3      	cmp	r3, r4
 800969e:	d9fa      	bls.n	8009696 <_free_r+0x46>
 80096a0:	6811      	ldr	r1, [r2, #0]
 80096a2:	1855      	adds	r5, r2, r1
 80096a4:	42a5      	cmp	r5, r4
 80096a6:	d10b      	bne.n	80096c0 <_free_r+0x70>
 80096a8:	6824      	ldr	r4, [r4, #0]
 80096aa:	4421      	add	r1, r4
 80096ac:	1854      	adds	r4, r2, r1
 80096ae:	42a3      	cmp	r3, r4
 80096b0:	6011      	str	r1, [r2, #0]
 80096b2:	d1e0      	bne.n	8009676 <_free_r+0x26>
 80096b4:	681c      	ldr	r4, [r3, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	6053      	str	r3, [r2, #4]
 80096ba:	440c      	add	r4, r1
 80096bc:	6014      	str	r4, [r2, #0]
 80096be:	e7da      	b.n	8009676 <_free_r+0x26>
 80096c0:	d902      	bls.n	80096c8 <_free_r+0x78>
 80096c2:	230c      	movs	r3, #12
 80096c4:	6003      	str	r3, [r0, #0]
 80096c6:	e7d6      	b.n	8009676 <_free_r+0x26>
 80096c8:	6825      	ldr	r5, [r4, #0]
 80096ca:	1961      	adds	r1, r4, r5
 80096cc:	428b      	cmp	r3, r1
 80096ce:	bf04      	itt	eq
 80096d0:	6819      	ldreq	r1, [r3, #0]
 80096d2:	685b      	ldreq	r3, [r3, #4]
 80096d4:	6063      	str	r3, [r4, #4]
 80096d6:	bf04      	itt	eq
 80096d8:	1949      	addeq	r1, r1, r5
 80096da:	6021      	streq	r1, [r4, #0]
 80096dc:	6054      	str	r4, [r2, #4]
 80096de:	e7ca      	b.n	8009676 <_free_r+0x26>
 80096e0:	b003      	add	sp, #12
 80096e2:	bd30      	pop	{r4, r5, pc}
 80096e4:	20001688 	.word	0x20001688

080096e8 <__ssputs_r>:
 80096e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ec:	688e      	ldr	r6, [r1, #8]
 80096ee:	461f      	mov	r7, r3
 80096f0:	42be      	cmp	r6, r7
 80096f2:	680b      	ldr	r3, [r1, #0]
 80096f4:	4682      	mov	sl, r0
 80096f6:	460c      	mov	r4, r1
 80096f8:	4690      	mov	r8, r2
 80096fa:	d82c      	bhi.n	8009756 <__ssputs_r+0x6e>
 80096fc:	898a      	ldrh	r2, [r1, #12]
 80096fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009702:	d026      	beq.n	8009752 <__ssputs_r+0x6a>
 8009704:	6965      	ldr	r5, [r4, #20]
 8009706:	6909      	ldr	r1, [r1, #16]
 8009708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800970c:	eba3 0901 	sub.w	r9, r3, r1
 8009710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009714:	1c7b      	adds	r3, r7, #1
 8009716:	444b      	add	r3, r9
 8009718:	106d      	asrs	r5, r5, #1
 800971a:	429d      	cmp	r5, r3
 800971c:	bf38      	it	cc
 800971e:	461d      	movcc	r5, r3
 8009720:	0553      	lsls	r3, r2, #21
 8009722:	d527      	bpl.n	8009774 <__ssputs_r+0x8c>
 8009724:	4629      	mov	r1, r5
 8009726:	f7ff fe93 	bl	8009450 <_malloc_r>
 800972a:	4606      	mov	r6, r0
 800972c:	b360      	cbz	r0, 8009788 <__ssputs_r+0xa0>
 800972e:	6921      	ldr	r1, [r4, #16]
 8009730:	464a      	mov	r2, r9
 8009732:	f000 fadb 	bl	8009cec <memcpy>
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800973c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009740:	81a3      	strh	r3, [r4, #12]
 8009742:	6126      	str	r6, [r4, #16]
 8009744:	6165      	str	r5, [r4, #20]
 8009746:	444e      	add	r6, r9
 8009748:	eba5 0509 	sub.w	r5, r5, r9
 800974c:	6026      	str	r6, [r4, #0]
 800974e:	60a5      	str	r5, [r4, #8]
 8009750:	463e      	mov	r6, r7
 8009752:	42be      	cmp	r6, r7
 8009754:	d900      	bls.n	8009758 <__ssputs_r+0x70>
 8009756:	463e      	mov	r6, r7
 8009758:	6820      	ldr	r0, [r4, #0]
 800975a:	4632      	mov	r2, r6
 800975c:	4641      	mov	r1, r8
 800975e:	f000 faab 	bl	8009cb8 <memmove>
 8009762:	68a3      	ldr	r3, [r4, #8]
 8009764:	1b9b      	subs	r3, r3, r6
 8009766:	60a3      	str	r3, [r4, #8]
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	4433      	add	r3, r6
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	2000      	movs	r0, #0
 8009770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009774:	462a      	mov	r2, r5
 8009776:	f000 fac7 	bl	8009d08 <_realloc_r>
 800977a:	4606      	mov	r6, r0
 800977c:	2800      	cmp	r0, #0
 800977e:	d1e0      	bne.n	8009742 <__ssputs_r+0x5a>
 8009780:	6921      	ldr	r1, [r4, #16]
 8009782:	4650      	mov	r0, sl
 8009784:	f7ff ff64 	bl	8009650 <_free_r>
 8009788:	230c      	movs	r3, #12
 800978a:	f8ca 3000 	str.w	r3, [sl]
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009794:	81a3      	strh	r3, [r4, #12]
 8009796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800979a:	e7e9      	b.n	8009770 <__ssputs_r+0x88>

0800979c <_svfiprintf_r>:
 800979c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a0:	4698      	mov	r8, r3
 80097a2:	898b      	ldrh	r3, [r1, #12]
 80097a4:	061b      	lsls	r3, r3, #24
 80097a6:	b09d      	sub	sp, #116	; 0x74
 80097a8:	4607      	mov	r7, r0
 80097aa:	460d      	mov	r5, r1
 80097ac:	4614      	mov	r4, r2
 80097ae:	d50e      	bpl.n	80097ce <_svfiprintf_r+0x32>
 80097b0:	690b      	ldr	r3, [r1, #16]
 80097b2:	b963      	cbnz	r3, 80097ce <_svfiprintf_r+0x32>
 80097b4:	2140      	movs	r1, #64	; 0x40
 80097b6:	f7ff fe4b 	bl	8009450 <_malloc_r>
 80097ba:	6028      	str	r0, [r5, #0]
 80097bc:	6128      	str	r0, [r5, #16]
 80097be:	b920      	cbnz	r0, 80097ca <_svfiprintf_r+0x2e>
 80097c0:	230c      	movs	r3, #12
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097c8:	e0d0      	b.n	800996c <_svfiprintf_r+0x1d0>
 80097ca:	2340      	movs	r3, #64	; 0x40
 80097cc:	616b      	str	r3, [r5, #20]
 80097ce:	2300      	movs	r3, #0
 80097d0:	9309      	str	r3, [sp, #36]	; 0x24
 80097d2:	2320      	movs	r3, #32
 80097d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80097dc:	2330      	movs	r3, #48	; 0x30
 80097de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009984 <_svfiprintf_r+0x1e8>
 80097e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097e6:	f04f 0901 	mov.w	r9, #1
 80097ea:	4623      	mov	r3, r4
 80097ec:	469a      	mov	sl, r3
 80097ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097f2:	b10a      	cbz	r2, 80097f8 <_svfiprintf_r+0x5c>
 80097f4:	2a25      	cmp	r2, #37	; 0x25
 80097f6:	d1f9      	bne.n	80097ec <_svfiprintf_r+0x50>
 80097f8:	ebba 0b04 	subs.w	fp, sl, r4
 80097fc:	d00b      	beq.n	8009816 <_svfiprintf_r+0x7a>
 80097fe:	465b      	mov	r3, fp
 8009800:	4622      	mov	r2, r4
 8009802:	4629      	mov	r1, r5
 8009804:	4638      	mov	r0, r7
 8009806:	f7ff ff6f 	bl	80096e8 <__ssputs_r>
 800980a:	3001      	adds	r0, #1
 800980c:	f000 80a9 	beq.w	8009962 <_svfiprintf_r+0x1c6>
 8009810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009812:	445a      	add	r2, fp
 8009814:	9209      	str	r2, [sp, #36]	; 0x24
 8009816:	f89a 3000 	ldrb.w	r3, [sl]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 80a1 	beq.w	8009962 <_svfiprintf_r+0x1c6>
 8009820:	2300      	movs	r3, #0
 8009822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800982a:	f10a 0a01 	add.w	sl, sl, #1
 800982e:	9304      	str	r3, [sp, #16]
 8009830:	9307      	str	r3, [sp, #28]
 8009832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009836:	931a      	str	r3, [sp, #104]	; 0x68
 8009838:	4654      	mov	r4, sl
 800983a:	2205      	movs	r2, #5
 800983c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009840:	4850      	ldr	r0, [pc, #320]	; (8009984 <_svfiprintf_r+0x1e8>)
 8009842:	f7f6 fcd5 	bl	80001f0 <memchr>
 8009846:	9a04      	ldr	r2, [sp, #16]
 8009848:	b9d8      	cbnz	r0, 8009882 <_svfiprintf_r+0xe6>
 800984a:	06d0      	lsls	r0, r2, #27
 800984c:	bf44      	itt	mi
 800984e:	2320      	movmi	r3, #32
 8009850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009854:	0711      	lsls	r1, r2, #28
 8009856:	bf44      	itt	mi
 8009858:	232b      	movmi	r3, #43	; 0x2b
 800985a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800985e:	f89a 3000 	ldrb.w	r3, [sl]
 8009862:	2b2a      	cmp	r3, #42	; 0x2a
 8009864:	d015      	beq.n	8009892 <_svfiprintf_r+0xf6>
 8009866:	9a07      	ldr	r2, [sp, #28]
 8009868:	4654      	mov	r4, sl
 800986a:	2000      	movs	r0, #0
 800986c:	f04f 0c0a 	mov.w	ip, #10
 8009870:	4621      	mov	r1, r4
 8009872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009876:	3b30      	subs	r3, #48	; 0x30
 8009878:	2b09      	cmp	r3, #9
 800987a:	d94d      	bls.n	8009918 <_svfiprintf_r+0x17c>
 800987c:	b1b0      	cbz	r0, 80098ac <_svfiprintf_r+0x110>
 800987e:	9207      	str	r2, [sp, #28]
 8009880:	e014      	b.n	80098ac <_svfiprintf_r+0x110>
 8009882:	eba0 0308 	sub.w	r3, r0, r8
 8009886:	fa09 f303 	lsl.w	r3, r9, r3
 800988a:	4313      	orrs	r3, r2
 800988c:	9304      	str	r3, [sp, #16]
 800988e:	46a2      	mov	sl, r4
 8009890:	e7d2      	b.n	8009838 <_svfiprintf_r+0x9c>
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	1d19      	adds	r1, r3, #4
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	9103      	str	r1, [sp, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	bfbb      	ittet	lt
 800989e:	425b      	neglt	r3, r3
 80098a0:	f042 0202 	orrlt.w	r2, r2, #2
 80098a4:	9307      	strge	r3, [sp, #28]
 80098a6:	9307      	strlt	r3, [sp, #28]
 80098a8:	bfb8      	it	lt
 80098aa:	9204      	strlt	r2, [sp, #16]
 80098ac:	7823      	ldrb	r3, [r4, #0]
 80098ae:	2b2e      	cmp	r3, #46	; 0x2e
 80098b0:	d10c      	bne.n	80098cc <_svfiprintf_r+0x130>
 80098b2:	7863      	ldrb	r3, [r4, #1]
 80098b4:	2b2a      	cmp	r3, #42	; 0x2a
 80098b6:	d134      	bne.n	8009922 <_svfiprintf_r+0x186>
 80098b8:	9b03      	ldr	r3, [sp, #12]
 80098ba:	1d1a      	adds	r2, r3, #4
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	9203      	str	r2, [sp, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	bfb8      	it	lt
 80098c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098c8:	3402      	adds	r4, #2
 80098ca:	9305      	str	r3, [sp, #20]
 80098cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009994 <_svfiprintf_r+0x1f8>
 80098d0:	7821      	ldrb	r1, [r4, #0]
 80098d2:	2203      	movs	r2, #3
 80098d4:	4650      	mov	r0, sl
 80098d6:	f7f6 fc8b 	bl	80001f0 <memchr>
 80098da:	b138      	cbz	r0, 80098ec <_svfiprintf_r+0x150>
 80098dc:	9b04      	ldr	r3, [sp, #16]
 80098de:	eba0 000a 	sub.w	r0, r0, sl
 80098e2:	2240      	movs	r2, #64	; 0x40
 80098e4:	4082      	lsls	r2, r0
 80098e6:	4313      	orrs	r3, r2
 80098e8:	3401      	adds	r4, #1
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f0:	4825      	ldr	r0, [pc, #148]	; (8009988 <_svfiprintf_r+0x1ec>)
 80098f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098f6:	2206      	movs	r2, #6
 80098f8:	f7f6 fc7a 	bl	80001f0 <memchr>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d038      	beq.n	8009972 <_svfiprintf_r+0x1d6>
 8009900:	4b22      	ldr	r3, [pc, #136]	; (800998c <_svfiprintf_r+0x1f0>)
 8009902:	bb1b      	cbnz	r3, 800994c <_svfiprintf_r+0x1b0>
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	3307      	adds	r3, #7
 8009908:	f023 0307 	bic.w	r3, r3, #7
 800990c:	3308      	adds	r3, #8
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009912:	4433      	add	r3, r6
 8009914:	9309      	str	r3, [sp, #36]	; 0x24
 8009916:	e768      	b.n	80097ea <_svfiprintf_r+0x4e>
 8009918:	fb0c 3202 	mla	r2, ip, r2, r3
 800991c:	460c      	mov	r4, r1
 800991e:	2001      	movs	r0, #1
 8009920:	e7a6      	b.n	8009870 <_svfiprintf_r+0xd4>
 8009922:	2300      	movs	r3, #0
 8009924:	3401      	adds	r4, #1
 8009926:	9305      	str	r3, [sp, #20]
 8009928:	4619      	mov	r1, r3
 800992a:	f04f 0c0a 	mov.w	ip, #10
 800992e:	4620      	mov	r0, r4
 8009930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009934:	3a30      	subs	r2, #48	; 0x30
 8009936:	2a09      	cmp	r2, #9
 8009938:	d903      	bls.n	8009942 <_svfiprintf_r+0x1a6>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0c6      	beq.n	80098cc <_svfiprintf_r+0x130>
 800993e:	9105      	str	r1, [sp, #20]
 8009940:	e7c4      	b.n	80098cc <_svfiprintf_r+0x130>
 8009942:	fb0c 2101 	mla	r1, ip, r1, r2
 8009946:	4604      	mov	r4, r0
 8009948:	2301      	movs	r3, #1
 800994a:	e7f0      	b.n	800992e <_svfiprintf_r+0x192>
 800994c:	ab03      	add	r3, sp, #12
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	462a      	mov	r2, r5
 8009952:	4b0f      	ldr	r3, [pc, #60]	; (8009990 <_svfiprintf_r+0x1f4>)
 8009954:	a904      	add	r1, sp, #16
 8009956:	4638      	mov	r0, r7
 8009958:	f3af 8000 	nop.w
 800995c:	1c42      	adds	r2, r0, #1
 800995e:	4606      	mov	r6, r0
 8009960:	d1d6      	bne.n	8009910 <_svfiprintf_r+0x174>
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	065b      	lsls	r3, r3, #25
 8009966:	f53f af2d 	bmi.w	80097c4 <_svfiprintf_r+0x28>
 800996a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800996c:	b01d      	add	sp, #116	; 0x74
 800996e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009972:	ab03      	add	r3, sp, #12
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	462a      	mov	r2, r5
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <_svfiprintf_r+0x1f4>)
 800997a:	a904      	add	r1, sp, #16
 800997c:	4638      	mov	r0, r7
 800997e:	f000 f879 	bl	8009a74 <_printf_i>
 8009982:	e7eb      	b.n	800995c <_svfiprintf_r+0x1c0>
 8009984:	08009f0c 	.word	0x08009f0c
 8009988:	08009f16 	.word	0x08009f16
 800998c:	00000000 	.word	0x00000000
 8009990:	080096e9 	.word	0x080096e9
 8009994:	08009f12 	.word	0x08009f12

08009998 <_printf_common>:
 8009998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	4616      	mov	r6, r2
 800999e:	4699      	mov	r9, r3
 80099a0:	688a      	ldr	r2, [r1, #8]
 80099a2:	690b      	ldr	r3, [r1, #16]
 80099a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099a8:	4293      	cmp	r3, r2
 80099aa:	bfb8      	it	lt
 80099ac:	4613      	movlt	r3, r2
 80099ae:	6033      	str	r3, [r6, #0]
 80099b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099b4:	4607      	mov	r7, r0
 80099b6:	460c      	mov	r4, r1
 80099b8:	b10a      	cbz	r2, 80099be <_printf_common+0x26>
 80099ba:	3301      	adds	r3, #1
 80099bc:	6033      	str	r3, [r6, #0]
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	0699      	lsls	r1, r3, #26
 80099c2:	bf42      	ittt	mi
 80099c4:	6833      	ldrmi	r3, [r6, #0]
 80099c6:	3302      	addmi	r3, #2
 80099c8:	6033      	strmi	r3, [r6, #0]
 80099ca:	6825      	ldr	r5, [r4, #0]
 80099cc:	f015 0506 	ands.w	r5, r5, #6
 80099d0:	d106      	bne.n	80099e0 <_printf_common+0x48>
 80099d2:	f104 0a19 	add.w	sl, r4, #25
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	6832      	ldr	r2, [r6, #0]
 80099da:	1a9b      	subs	r3, r3, r2
 80099dc:	42ab      	cmp	r3, r5
 80099de:	dc26      	bgt.n	8009a2e <_printf_common+0x96>
 80099e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099e4:	1e13      	subs	r3, r2, #0
 80099e6:	6822      	ldr	r2, [r4, #0]
 80099e8:	bf18      	it	ne
 80099ea:	2301      	movne	r3, #1
 80099ec:	0692      	lsls	r2, r2, #26
 80099ee:	d42b      	bmi.n	8009a48 <_printf_common+0xb0>
 80099f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099f4:	4649      	mov	r1, r9
 80099f6:	4638      	mov	r0, r7
 80099f8:	47c0      	blx	r8
 80099fa:	3001      	adds	r0, #1
 80099fc:	d01e      	beq.n	8009a3c <_printf_common+0xa4>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	6922      	ldr	r2, [r4, #16]
 8009a02:	f003 0306 	and.w	r3, r3, #6
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	bf02      	ittt	eq
 8009a0a:	68e5      	ldreq	r5, [r4, #12]
 8009a0c:	6833      	ldreq	r3, [r6, #0]
 8009a0e:	1aed      	subeq	r5, r5, r3
 8009a10:	68a3      	ldr	r3, [r4, #8]
 8009a12:	bf0c      	ite	eq
 8009a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a18:	2500      	movne	r5, #0
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	bfc4      	itt	gt
 8009a1e:	1a9b      	subgt	r3, r3, r2
 8009a20:	18ed      	addgt	r5, r5, r3
 8009a22:	2600      	movs	r6, #0
 8009a24:	341a      	adds	r4, #26
 8009a26:	42b5      	cmp	r5, r6
 8009a28:	d11a      	bne.n	8009a60 <_printf_common+0xc8>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e008      	b.n	8009a40 <_printf_common+0xa8>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4652      	mov	r2, sl
 8009a32:	4649      	mov	r1, r9
 8009a34:	4638      	mov	r0, r7
 8009a36:	47c0      	blx	r8
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d103      	bne.n	8009a44 <_printf_common+0xac>
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a44:	3501      	adds	r5, #1
 8009a46:	e7c6      	b.n	80099d6 <_printf_common+0x3e>
 8009a48:	18e1      	adds	r1, r4, r3
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	2030      	movs	r0, #48	; 0x30
 8009a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a52:	4422      	add	r2, r4
 8009a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	e7c7      	b.n	80099f0 <_printf_common+0x58>
 8009a60:	2301      	movs	r3, #1
 8009a62:	4622      	mov	r2, r4
 8009a64:	4649      	mov	r1, r9
 8009a66:	4638      	mov	r0, r7
 8009a68:	47c0      	blx	r8
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	d0e6      	beq.n	8009a3c <_printf_common+0xa4>
 8009a6e:	3601      	adds	r6, #1
 8009a70:	e7d9      	b.n	8009a26 <_printf_common+0x8e>
	...

08009a74 <_printf_i>:
 8009a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	7e0f      	ldrb	r7, [r1, #24]
 8009a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a7c:	2f78      	cmp	r7, #120	; 0x78
 8009a7e:	4691      	mov	r9, r2
 8009a80:	4680      	mov	r8, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	469a      	mov	sl, r3
 8009a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a8a:	d807      	bhi.n	8009a9c <_printf_i+0x28>
 8009a8c:	2f62      	cmp	r7, #98	; 0x62
 8009a8e:	d80a      	bhi.n	8009aa6 <_printf_i+0x32>
 8009a90:	2f00      	cmp	r7, #0
 8009a92:	f000 80d4 	beq.w	8009c3e <_printf_i+0x1ca>
 8009a96:	2f58      	cmp	r7, #88	; 0x58
 8009a98:	f000 80c0 	beq.w	8009c1c <_printf_i+0x1a8>
 8009a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009aa4:	e03a      	b.n	8009b1c <_printf_i+0xa8>
 8009aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aaa:	2b15      	cmp	r3, #21
 8009aac:	d8f6      	bhi.n	8009a9c <_printf_i+0x28>
 8009aae:	a101      	add	r1, pc, #4	; (adr r1, 8009ab4 <_printf_i+0x40>)
 8009ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ab4:	08009b0d 	.word	0x08009b0d
 8009ab8:	08009b21 	.word	0x08009b21
 8009abc:	08009a9d 	.word	0x08009a9d
 8009ac0:	08009a9d 	.word	0x08009a9d
 8009ac4:	08009a9d 	.word	0x08009a9d
 8009ac8:	08009a9d 	.word	0x08009a9d
 8009acc:	08009b21 	.word	0x08009b21
 8009ad0:	08009a9d 	.word	0x08009a9d
 8009ad4:	08009a9d 	.word	0x08009a9d
 8009ad8:	08009a9d 	.word	0x08009a9d
 8009adc:	08009a9d 	.word	0x08009a9d
 8009ae0:	08009c25 	.word	0x08009c25
 8009ae4:	08009b4d 	.word	0x08009b4d
 8009ae8:	08009bdf 	.word	0x08009bdf
 8009aec:	08009a9d 	.word	0x08009a9d
 8009af0:	08009a9d 	.word	0x08009a9d
 8009af4:	08009c47 	.word	0x08009c47
 8009af8:	08009a9d 	.word	0x08009a9d
 8009afc:	08009b4d 	.word	0x08009b4d
 8009b00:	08009a9d 	.word	0x08009a9d
 8009b04:	08009a9d 	.word	0x08009a9d
 8009b08:	08009be7 	.word	0x08009be7
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	1d1a      	adds	r2, r3, #4
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	602a      	str	r2, [r5, #0]
 8009b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e09f      	b.n	8009c60 <_printf_i+0x1ec>
 8009b20:	6820      	ldr	r0, [r4, #0]
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	0607      	lsls	r7, r0, #24
 8009b26:	f103 0104 	add.w	r1, r3, #4
 8009b2a:	6029      	str	r1, [r5, #0]
 8009b2c:	d501      	bpl.n	8009b32 <_printf_i+0xbe>
 8009b2e:	681e      	ldr	r6, [r3, #0]
 8009b30:	e003      	b.n	8009b3a <_printf_i+0xc6>
 8009b32:	0646      	lsls	r6, r0, #25
 8009b34:	d5fb      	bpl.n	8009b2e <_printf_i+0xba>
 8009b36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b3a:	2e00      	cmp	r6, #0
 8009b3c:	da03      	bge.n	8009b46 <_printf_i+0xd2>
 8009b3e:	232d      	movs	r3, #45	; 0x2d
 8009b40:	4276      	negs	r6, r6
 8009b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b46:	485a      	ldr	r0, [pc, #360]	; (8009cb0 <_printf_i+0x23c>)
 8009b48:	230a      	movs	r3, #10
 8009b4a:	e012      	b.n	8009b72 <_printf_i+0xfe>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	6820      	ldr	r0, [r4, #0]
 8009b50:	1d19      	adds	r1, r3, #4
 8009b52:	6029      	str	r1, [r5, #0]
 8009b54:	0605      	lsls	r5, r0, #24
 8009b56:	d501      	bpl.n	8009b5c <_printf_i+0xe8>
 8009b58:	681e      	ldr	r6, [r3, #0]
 8009b5a:	e002      	b.n	8009b62 <_printf_i+0xee>
 8009b5c:	0641      	lsls	r1, r0, #25
 8009b5e:	d5fb      	bpl.n	8009b58 <_printf_i+0xe4>
 8009b60:	881e      	ldrh	r6, [r3, #0]
 8009b62:	4853      	ldr	r0, [pc, #332]	; (8009cb0 <_printf_i+0x23c>)
 8009b64:	2f6f      	cmp	r7, #111	; 0x6f
 8009b66:	bf0c      	ite	eq
 8009b68:	2308      	moveq	r3, #8
 8009b6a:	230a      	movne	r3, #10
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b72:	6865      	ldr	r5, [r4, #4]
 8009b74:	60a5      	str	r5, [r4, #8]
 8009b76:	2d00      	cmp	r5, #0
 8009b78:	bfa2      	ittt	ge
 8009b7a:	6821      	ldrge	r1, [r4, #0]
 8009b7c:	f021 0104 	bicge.w	r1, r1, #4
 8009b80:	6021      	strge	r1, [r4, #0]
 8009b82:	b90e      	cbnz	r6, 8009b88 <_printf_i+0x114>
 8009b84:	2d00      	cmp	r5, #0
 8009b86:	d04b      	beq.n	8009c20 <_printf_i+0x1ac>
 8009b88:	4615      	mov	r5, r2
 8009b8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b8e:	fb03 6711 	mls	r7, r3, r1, r6
 8009b92:	5dc7      	ldrb	r7, [r0, r7]
 8009b94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b98:	4637      	mov	r7, r6
 8009b9a:	42bb      	cmp	r3, r7
 8009b9c:	460e      	mov	r6, r1
 8009b9e:	d9f4      	bls.n	8009b8a <_printf_i+0x116>
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d10b      	bne.n	8009bbc <_printf_i+0x148>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	07de      	lsls	r6, r3, #31
 8009ba8:	d508      	bpl.n	8009bbc <_printf_i+0x148>
 8009baa:	6923      	ldr	r3, [r4, #16]
 8009bac:	6861      	ldr	r1, [r4, #4]
 8009bae:	4299      	cmp	r1, r3
 8009bb0:	bfde      	ittt	le
 8009bb2:	2330      	movle	r3, #48	; 0x30
 8009bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009bbc:	1b52      	subs	r2, r2, r5
 8009bbe:	6122      	str	r2, [r4, #16]
 8009bc0:	f8cd a000 	str.w	sl, [sp]
 8009bc4:	464b      	mov	r3, r9
 8009bc6:	aa03      	add	r2, sp, #12
 8009bc8:	4621      	mov	r1, r4
 8009bca:	4640      	mov	r0, r8
 8009bcc:	f7ff fee4 	bl	8009998 <_printf_common>
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d14a      	bne.n	8009c6a <_printf_i+0x1f6>
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bd8:	b004      	add	sp, #16
 8009bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	f043 0320 	orr.w	r3, r3, #32
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	4833      	ldr	r0, [pc, #204]	; (8009cb4 <_printf_i+0x240>)
 8009be8:	2778      	movs	r7, #120	; 0x78
 8009bea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	6829      	ldr	r1, [r5, #0]
 8009bf2:	061f      	lsls	r7, r3, #24
 8009bf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bf8:	d402      	bmi.n	8009c00 <_printf_i+0x18c>
 8009bfa:	065f      	lsls	r7, r3, #25
 8009bfc:	bf48      	it	mi
 8009bfe:	b2b6      	uxthmi	r6, r6
 8009c00:	07df      	lsls	r7, r3, #31
 8009c02:	bf48      	it	mi
 8009c04:	f043 0320 	orrmi.w	r3, r3, #32
 8009c08:	6029      	str	r1, [r5, #0]
 8009c0a:	bf48      	it	mi
 8009c0c:	6023      	strmi	r3, [r4, #0]
 8009c0e:	b91e      	cbnz	r6, 8009c18 <_printf_i+0x1a4>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	f023 0320 	bic.w	r3, r3, #32
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	2310      	movs	r3, #16
 8009c1a:	e7a7      	b.n	8009b6c <_printf_i+0xf8>
 8009c1c:	4824      	ldr	r0, [pc, #144]	; (8009cb0 <_printf_i+0x23c>)
 8009c1e:	e7e4      	b.n	8009bea <_printf_i+0x176>
 8009c20:	4615      	mov	r5, r2
 8009c22:	e7bd      	b.n	8009ba0 <_printf_i+0x12c>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	6826      	ldr	r6, [r4, #0]
 8009c28:	6961      	ldr	r1, [r4, #20]
 8009c2a:	1d18      	adds	r0, r3, #4
 8009c2c:	6028      	str	r0, [r5, #0]
 8009c2e:	0635      	lsls	r5, r6, #24
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	d501      	bpl.n	8009c38 <_printf_i+0x1c4>
 8009c34:	6019      	str	r1, [r3, #0]
 8009c36:	e002      	b.n	8009c3e <_printf_i+0x1ca>
 8009c38:	0670      	lsls	r0, r6, #25
 8009c3a:	d5fb      	bpl.n	8009c34 <_printf_i+0x1c0>
 8009c3c:	8019      	strh	r1, [r3, #0]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	6123      	str	r3, [r4, #16]
 8009c42:	4615      	mov	r5, r2
 8009c44:	e7bc      	b.n	8009bc0 <_printf_i+0x14c>
 8009c46:	682b      	ldr	r3, [r5, #0]
 8009c48:	1d1a      	adds	r2, r3, #4
 8009c4a:	602a      	str	r2, [r5, #0]
 8009c4c:	681d      	ldr	r5, [r3, #0]
 8009c4e:	6862      	ldr	r2, [r4, #4]
 8009c50:	2100      	movs	r1, #0
 8009c52:	4628      	mov	r0, r5
 8009c54:	f7f6 facc 	bl	80001f0 <memchr>
 8009c58:	b108      	cbz	r0, 8009c5e <_printf_i+0x1ea>
 8009c5a:	1b40      	subs	r0, r0, r5
 8009c5c:	6060      	str	r0, [r4, #4]
 8009c5e:	6863      	ldr	r3, [r4, #4]
 8009c60:	6123      	str	r3, [r4, #16]
 8009c62:	2300      	movs	r3, #0
 8009c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c68:	e7aa      	b.n	8009bc0 <_printf_i+0x14c>
 8009c6a:	6923      	ldr	r3, [r4, #16]
 8009c6c:	462a      	mov	r2, r5
 8009c6e:	4649      	mov	r1, r9
 8009c70:	4640      	mov	r0, r8
 8009c72:	47d0      	blx	sl
 8009c74:	3001      	adds	r0, #1
 8009c76:	d0ad      	beq.n	8009bd4 <_printf_i+0x160>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	079b      	lsls	r3, r3, #30
 8009c7c:	d413      	bmi.n	8009ca6 <_printf_i+0x232>
 8009c7e:	68e0      	ldr	r0, [r4, #12]
 8009c80:	9b03      	ldr	r3, [sp, #12]
 8009c82:	4298      	cmp	r0, r3
 8009c84:	bfb8      	it	lt
 8009c86:	4618      	movlt	r0, r3
 8009c88:	e7a6      	b.n	8009bd8 <_printf_i+0x164>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4632      	mov	r2, r6
 8009c8e:	4649      	mov	r1, r9
 8009c90:	4640      	mov	r0, r8
 8009c92:	47d0      	blx	sl
 8009c94:	3001      	adds	r0, #1
 8009c96:	d09d      	beq.n	8009bd4 <_printf_i+0x160>
 8009c98:	3501      	adds	r5, #1
 8009c9a:	68e3      	ldr	r3, [r4, #12]
 8009c9c:	9903      	ldr	r1, [sp, #12]
 8009c9e:	1a5b      	subs	r3, r3, r1
 8009ca0:	42ab      	cmp	r3, r5
 8009ca2:	dcf2      	bgt.n	8009c8a <_printf_i+0x216>
 8009ca4:	e7eb      	b.n	8009c7e <_printf_i+0x20a>
 8009ca6:	2500      	movs	r5, #0
 8009ca8:	f104 0619 	add.w	r6, r4, #25
 8009cac:	e7f5      	b.n	8009c9a <_printf_i+0x226>
 8009cae:	bf00      	nop
 8009cb0:	08009f1d 	.word	0x08009f1d
 8009cb4:	08009f2e 	.word	0x08009f2e

08009cb8 <memmove>:
 8009cb8:	4288      	cmp	r0, r1
 8009cba:	b510      	push	{r4, lr}
 8009cbc:	eb01 0402 	add.w	r4, r1, r2
 8009cc0:	d902      	bls.n	8009cc8 <memmove+0x10>
 8009cc2:	4284      	cmp	r4, r0
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	d807      	bhi.n	8009cd8 <memmove+0x20>
 8009cc8:	1e43      	subs	r3, r0, #1
 8009cca:	42a1      	cmp	r1, r4
 8009ccc:	d008      	beq.n	8009ce0 <memmove+0x28>
 8009cce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cd6:	e7f8      	b.n	8009cca <memmove+0x12>
 8009cd8:	4402      	add	r2, r0
 8009cda:	4601      	mov	r1, r0
 8009cdc:	428a      	cmp	r2, r1
 8009cde:	d100      	bne.n	8009ce2 <memmove+0x2a>
 8009ce0:	bd10      	pop	{r4, pc}
 8009ce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ce6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cea:	e7f7      	b.n	8009cdc <memmove+0x24>

08009cec <memcpy>:
 8009cec:	440a      	add	r2, r1
 8009cee:	4291      	cmp	r1, r2
 8009cf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009cf4:	d100      	bne.n	8009cf8 <memcpy+0xc>
 8009cf6:	4770      	bx	lr
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d02:	4291      	cmp	r1, r2
 8009d04:	d1f9      	bne.n	8009cfa <memcpy+0xe>
 8009d06:	bd10      	pop	{r4, pc}

08009d08 <_realloc_r>:
 8009d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	4614      	mov	r4, r2
 8009d10:	460e      	mov	r6, r1
 8009d12:	b921      	cbnz	r1, 8009d1e <_realloc_r+0x16>
 8009d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d18:	4611      	mov	r1, r2
 8009d1a:	f7ff bb99 	b.w	8009450 <_malloc_r>
 8009d1e:	b92a      	cbnz	r2, 8009d2c <_realloc_r+0x24>
 8009d20:	f7ff fc96 	bl	8009650 <_free_r>
 8009d24:	4625      	mov	r5, r4
 8009d26:	4628      	mov	r0, r5
 8009d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d2c:	f000 f81b 	bl	8009d66 <_malloc_usable_size_r>
 8009d30:	4284      	cmp	r4, r0
 8009d32:	4607      	mov	r7, r0
 8009d34:	d802      	bhi.n	8009d3c <_realloc_r+0x34>
 8009d36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d3a:	d812      	bhi.n	8009d62 <_realloc_r+0x5a>
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4640      	mov	r0, r8
 8009d40:	f7ff fb86 	bl	8009450 <_malloc_r>
 8009d44:	4605      	mov	r5, r0
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d0ed      	beq.n	8009d26 <_realloc_r+0x1e>
 8009d4a:	42bc      	cmp	r4, r7
 8009d4c:	4622      	mov	r2, r4
 8009d4e:	4631      	mov	r1, r6
 8009d50:	bf28      	it	cs
 8009d52:	463a      	movcs	r2, r7
 8009d54:	f7ff ffca 	bl	8009cec <memcpy>
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	f7ff fc78 	bl	8009650 <_free_r>
 8009d60:	e7e1      	b.n	8009d26 <_realloc_r+0x1e>
 8009d62:	4635      	mov	r5, r6
 8009d64:	e7df      	b.n	8009d26 <_realloc_r+0x1e>

08009d66 <_malloc_usable_size_r>:
 8009d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d6a:	1f18      	subs	r0, r3, #4
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bfbc      	itt	lt
 8009d70:	580b      	ldrlt	r3, [r1, r0]
 8009d72:	18c0      	addlt	r0, r0, r3
 8009d74:	4770      	bx	lr
	...

08009d78 <_init>:
 8009d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7a:	bf00      	nop
 8009d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7e:	bc08      	pop	{r3}
 8009d80:	469e      	mov	lr, r3
 8009d82:	4770      	bx	lr

08009d84 <_fini>:
 8009d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d86:	bf00      	nop
 8009d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d8a:	bc08      	pop	{r3}
 8009d8c:	469e      	mov	lr, r3
 8009d8e:	4770      	bx	lr
