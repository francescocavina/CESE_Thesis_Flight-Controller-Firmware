
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08013e18  08013e18  00023e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080145e8  080145e8  000302f8  2**0
                  CONTENTS
  4 .ARM          00000008  080145e8  080145e8  000245e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080145f0  080145f0  000302f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080145f0  080145f0  000245f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080145f4  080145f4  000245f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  080145f8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e4  200002f8  080148f0  000302f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023dc  080148f0  000323dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026a89  00000000  00000000  0003036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000609e  00000000  00000000  00056df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020d0  00000000  00000000  0005ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001947  00000000  00000000  0005ef68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002112e  00000000  00000000  000608af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cafc  00000000  00000000  000819dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ade52  00000000  00000000  000ae4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009da8  00000000  00000000  0015c32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001660d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f8 	.word	0x200002f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013dfc 	.word	0x08013dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002fc 	.word	0x200002fc
 80001dc:	08013dfc 	.word	0x08013dfc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 2UL), &FlightController_StartUp_Handle);
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	4927      	ldr	r1, [pc, #156]	; (8001048 <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000faa:	4828      	ldr	r0, [pc, #160]	; (800104c <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000fac:	f00c fc15 	bl	800d7da <xTaskCreate>
 8000fb0:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d00a      	beq.n	8000fce <FreeRTOS_CreateStartUpTasks+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbc:	f383 8811 	msr	BASEPRI, r3
 8000fc0:	f3bf 8f6f 	isb	sy
 8000fc4:	f3bf 8f4f 	dsb	sy
 8000fc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fca:	bf00      	nop
 8000fcc:	e7fe      	b.n	8000fcc <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d104      	bne.n	8000fe0 <FreeRTOS_CreateStartUpTasks+0x4c>
        vTaskDelete(FlightController_StartUp_Handle);
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00c fd2e 	bl	800da3c <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_OnOffButton_Handle);
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fee:	4919      	ldr	r1, [pc, #100]	; (8001054 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000ff2:	f00c fbf2 	bl	800d7da <xTaskCreate>
 8000ff6:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d00a      	beq.n	8001014 <FreeRTOS_CreateStartUpTasks+0x80>
	__asm volatile
 8000ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	607b      	str	r3, [r7, #4]
}
 8001010:	bf00      	nop
 8001012:	e7fe      	b.n	8001012 <FreeRTOS_CreateStartUpTasks+0x7e>

    if (FlightController_OnOffButton_Handle == NULL) {
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <FreeRTOS_CreateStartUpTasks+0x92>
        vTaskDelete(FlightController_OnOffButton_Handle);
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f00c fd0b 	bl	800da3c <vTaskDelete>
    }

    /* Timer: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <FreeRTOS_CreateStartUpTasks+0xc8>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	2201      	movs	r2, #1
 800102e:	2164      	movs	r1, #100	; 0x64
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8001032:	f00d fb65 	bl	800e700 <xTimerCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <FreeRTOS_CreateStartUpTasks+0xd0>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000314 	.word	0x20000314
 8001048:	08013e18 	.word	0x08013e18
 800104c:	08001319 	.word	0x08001319
 8001050:	20000328 	.word	0x20000328
 8001054:	08013e34 	.word	0x08013e34
 8001058:	08001685 	.word	0x08001685
 800105c:	08001841 	.word	0x08001841
 8001060:	08013e54 	.word	0x08013e54
 8001064:	2000033c 	.word	0x2000033c

08001068 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_ControlSystem */
    ret = xTaskCreate(FlightController_ControlSystem, "FlightController_ControlSystem", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_ControlSystem_Handle);
 800106e:	4b8e      	ldr	r3, [pc, #568]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2303      	movs	r3, #3
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	498b      	ldr	r1, [pc, #556]	; (80012ac <FreeRTOS_CreateTasks+0x244>)
 800107e:	488c      	ldr	r0, [pc, #560]	; (80012b0 <FreeRTOS_CreateTasks+0x248>)
 8001080:	f00c fbab 	bl	800d7da <xTaskCreate>
 8001084:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00a      	beq.n	80010a2 <FreeRTOS_CreateTasks+0x3a>
	__asm volatile
 800108c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001090:	f383 8811 	msr	BASEPRI, r3
 8001094:	f3bf 8f6f 	isb	sy
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	623b      	str	r3, [r7, #32]
}
 800109e:	bf00      	nop
 80010a0:	e7fe      	b.n	80010a0 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_ControlSystem_Handle == NULL) {
 80010a2:	4b81      	ldr	r3, [pc, #516]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d104      	bne.n	80010b4 <FreeRTOS_CreateTasks+0x4c>
        vTaskDelete(FlightController_ControlSystem_Handle);
 80010aa:	4b7f      	ldr	r3, [pc, #508]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00c fcc4 	bl	800da3c <vTaskDelete>
    }

    /* Task 2: FlightController_Read_FSA8S */
    ret = xTaskCreate(FlightController_Read_FSA8S, "FlightController_Read_FSA8S", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_FSA8S_Handle);
 80010b4:	4b7f      	ldr	r3, [pc, #508]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2303      	movs	r3, #3
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c2:	497d      	ldr	r1, [pc, #500]	; (80012b8 <FreeRTOS_CreateTasks+0x250>)
 80010c4:	487d      	ldr	r0, [pc, #500]	; (80012bc <FreeRTOS_CreateTasks+0x254>)
 80010c6:	f00c fb88 	bl	800d7da <xTaskCreate>
 80010ca:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d00a      	beq.n	80010e8 <FreeRTOS_CreateTasks+0x80>
	__asm volatile
 80010d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	61fb      	str	r3, [r7, #28]
}
 80010e4:	bf00      	nop
 80010e6:	e7fe      	b.n	80010e6 <FreeRTOS_CreateTasks+0x7e>

    if (FlightController_Read_FSA8S_Handle == NULL) {
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <FreeRTOS_CreateTasks+0x92>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 80010f0:	4b70      	ldr	r3, [pc, #448]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00c fca1 	bl	800da3c <vTaskDelete>
    }

    /* Task 3: FlightController_Read_GY87 */
    ret = xTaskCreate(FlightController_Read_GY87, "FlightController_Read_GY87", (6 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_GY87_Handle);
 80010fa:	4b71      	ldr	r3, [pc, #452]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2303      	movs	r3, #3
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001108:	496e      	ldr	r1, [pc, #440]	; (80012c4 <FreeRTOS_CreateTasks+0x25c>)
 800110a:	486f      	ldr	r0, [pc, #444]	; (80012c8 <FreeRTOS_CreateTasks+0x260>)
 800110c:	f00c fb65 	bl	800d7da <xTaskCreate>
 8001110:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	2b01      	cmp	r3, #1
 8001116:	d00a      	beq.n	800112e <FreeRTOS_CreateTasks+0xc6>
	__asm volatile
 8001118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	61bb      	str	r3, [r7, #24]
}
 800112a:	bf00      	nop
 800112c:	e7fe      	b.n	800112c <FreeRTOS_CreateTasks+0xc4>

    if (FlightController_Read_GY87_Handle == NULL) {
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <FreeRTOS_CreateTasks+0xd8>
        vTaskDelete(FlightController_Read_GY87_Handle);
 8001136:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f00c fc7e 	bl	800da3c <vTaskDelete>
    }

    /* Task 4: FlightController_Write_ESCs */
    ret = xTaskCreate(FlightController_Write_ESCs, "FlightController_Write_ESCs", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Write_ESCs_Handle);
 8001140:	4b62      	ldr	r3, [pc, #392]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	2303      	movs	r3, #3
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114e:	4960      	ldr	r1, [pc, #384]	; (80012d0 <FreeRTOS_CreateTasks+0x268>)
 8001150:	4860      	ldr	r0, [pc, #384]	; (80012d4 <FreeRTOS_CreateTasks+0x26c>)
 8001152:	f00c fb42 	bl	800d7da <xTaskCreate>
 8001156:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	2b01      	cmp	r3, #1
 800115c:	d00a      	beq.n	8001174 <FreeRTOS_CreateTasks+0x10c>
	__asm volatile
 800115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001162:	f383 8811 	msr	BASEPRI, r3
 8001166:	f3bf 8f6f 	isb	sy
 800116a:	f3bf 8f4f 	dsb	sy
 800116e:	617b      	str	r3, [r7, #20]
}
 8001170:	bf00      	nop
 8001172:	e7fe      	b.n	8001172 <FreeRTOS_CreateTasks+0x10a>

    if (FlightController_Write_ESCs_Handle == NULL) {
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <FreeRTOS_CreateTasks+0x11e>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00c fc5b 	bl	800da3c <vTaskDelete>
    }

    /* Task 5: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_BatteryLevel_Handle);
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2301      	movs	r3, #1
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001194:	4951      	ldr	r1, [pc, #324]	; (80012dc <FreeRTOS_CreateTasks+0x274>)
 8001196:	4852      	ldr	r0, [pc, #328]	; (80012e0 <FreeRTOS_CreateTasks+0x278>)
 8001198:	f00c fb1f 	bl	800d7da <xTaskCreate>
 800119c:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d00a      	beq.n	80011ba <FreeRTOS_CreateTasks+0x152>
	__asm volatile
 80011a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	613b      	str	r3, [r7, #16]
}
 80011b6:	bf00      	nop
 80011b8:	e7fe      	b.n	80011b8 <FreeRTOS_CreateTasks+0x150>

    if (FlightController_BatteryLevel_Handle == NULL) {
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <FreeRTOS_CreateTasks+0x164>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 80011c2:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00c fc38 	bl	800da3c <vTaskDelete>
    }

    /* Task 6: FlightController_BatteryAlarm */
    ret = xTaskCreate(FlightController_BatteryAlarm, "FlightController_BatteryAlarm", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_BatteryAlarm_Handle);
 80011cc:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	4943      	ldr	r1, [pc, #268]	; (80012e8 <FreeRTOS_CreateTasks+0x280>)
 80011dc:	4843      	ldr	r0, [pc, #268]	; (80012ec <FreeRTOS_CreateTasks+0x284>)
 80011de:	f00c fafc 	bl	800d7da <xTaskCreate>
 80011e2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d00a      	beq.n	8001200 <FreeRTOS_CreateTasks+0x198>
	__asm volatile
 80011ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ee:	f383 8811 	msr	BASEPRI, r3
 80011f2:	f3bf 8f6f 	isb	sy
 80011f6:	f3bf 8f4f 	dsb	sy
 80011fa:	60fb      	str	r3, [r7, #12]
}
 80011fc:	bf00      	nop
 80011fe:	e7fe      	b.n	80011fe <FreeRTOS_CreateTasks+0x196>

    if (FlightController_BatteryAlarm_Handle == NULL) {
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <FreeRTOS_CreateTasks+0x1aa>
        vTaskDelete(FlightController_BatteryAlarm_Handle);
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f00c fc15 	bl	800da3c <vTaskDelete>
    }

    /* Task 7: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_HeartbeatLight_Handle);
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2303      	movs	r3, #3
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	4934      	ldr	r1, [pc, #208]	; (80012f4 <FreeRTOS_CreateTasks+0x28c>)
 8001222:	4835      	ldr	r0, [pc, #212]	; (80012f8 <FreeRTOS_CreateTasks+0x290>)
 8001224:	f00c fad9 	bl	800d7da <xTaskCreate>
 8001228:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	2b01      	cmp	r3, #1
 800122e:	d00a      	beq.n	8001246 <FreeRTOS_CreateTasks+0x1de>
	__asm volatile
 8001230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001234:	f383 8811 	msr	BASEPRI, r3
 8001238:	f3bf 8f6f 	isb	sy
 800123c:	f3bf 8f4f 	dsb	sy
 8001240:	60bb      	str	r3, [r7, #8]
}
 8001242:	bf00      	nop
 8001244:	e7fe      	b.n	8001244 <FreeRTOS_CreateTasks+0x1dc>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d104      	bne.n	8001258 <FreeRTOS_CreateTasks+0x1f0>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f00c fbf2 	bl	800da3c <vTaskDelete>
    }

    /* Task 8: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_FlightLights_Handle);
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2303      	movs	r3, #3
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001266:	4926      	ldr	r1, [pc, #152]	; (8001300 <FreeRTOS_CreateTasks+0x298>)
 8001268:	4826      	ldr	r0, [pc, #152]	; (8001304 <FreeRTOS_CreateTasks+0x29c>)
 800126a:	f00c fab6 	bl	800d7da <xTaskCreate>
 800126e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	2b01      	cmp	r3, #1
 8001274:	d00a      	beq.n	800128c <FreeRTOS_CreateTasks+0x224>
	__asm volatile
 8001276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800127a:	f383 8811 	msr	BASEPRI, r3
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f3bf 8f4f 	dsb	sy
 8001286:	607b      	str	r3, [r7, #4]
}
 8001288:	bf00      	nop
 800128a:	e7fe      	b.n	800128a <FreeRTOS_CreateTasks+0x222>

    if (FlightController_FlightLights_Handle == NULL) {
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d104      	bne.n	800129e <FreeRTOS_CreateTasks+0x236>
        vTaskDelete(FlightController_FlightLights_Handle);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f00c fbcf 	bl	800da3c <vTaskDelete>
    }
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000318 	.word	0x20000318
 80012ac:	08013e64 	.word	0x08013e64
 80012b0:	0800139d 	.word	0x0800139d
 80012b4:	2000031c 	.word	0x2000031c
 80012b8:	08013e84 	.word	0x08013e84
 80012bc:	08001405 	.word	0x08001405
 80012c0:	20000320 	.word	0x20000320
 80012c4:	08013ea0 	.word	0x08013ea0
 80012c8:	08001465 	.word	0x08001465
 80012cc:	20000324 	.word	0x20000324
 80012d0:	08013ebc 	.word	0x08013ebc
 80012d4:	080015e1 	.word	0x080015e1
 80012d8:	2000032c 	.word	0x2000032c
 80012dc:	08013ed8 	.word	0x08013ed8
 80012e0:	080016e1 	.word	0x080016e1
 80012e4:	20000330 	.word	0x20000330
 80012e8:	08013ef8 	.word	0x08013ef8
 80012ec:	080017b5 	.word	0x080017b5
 80012f0:	20000334 	.word	0x20000334
 80012f4:	08013f18 	.word	0x08013f18
 80012f8:	080017c9 	.word	0x080017c9
 80012fc:	20000338 	.word	0x20000338
 8001300:	08013f38 	.word	0x08013f38
 8001304:	08001805 	.word	0x08001805

08001308 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001320:	2314      	movs	r3, #20
 8001322:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED on */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <FlightController_StartUp+0x60>)
 800132c:	f003 ff6c 	bl	8005208 <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_running) {
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <FlightController_StartUp+0x64>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d01a      	beq.n	800136e <FlightController_StartUp+0x56>

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001338:	f7ff fe96 	bl	8001068 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 800133c:	f7ff ffe4 	bl	8001308 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 8001340:	480f      	ldr	r0, [pc, #60]	; (8001380 <FlightController_StartUp+0x68>)
 8001342:	f001 fb41 	bl	80029c8 <FSA8S_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <FlightController_StartUp+0x6c>)
 800134a:	6013      	str	r3, [r2, #0]
            hgy87 = GY87_Init(&hi2c1);
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <FlightController_StartUp+0x70>)
 800134e:	f001 ffe5 	bl	800331c <GY87_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <FlightController_StartUp+0x74>)
 8001356:	6013      	str	r3, [r2, #0]
            hesc = ESC_Init(&htim3);
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <FlightController_StartUp+0x78>)
 800135a:	f001 f9b1 	bl	80026c0 <ESC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <FlightController_StartUp+0x7c>)
 8001362:	6013      	str	r3, [r2, #0]

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <FlightController_StartUp+0x80>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f00c fb67 	bl	800da3c <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f00c fbf4 	bl	800db5c <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001374:	e7d6      	b.n	8001324 <FlightController_StartUp+0xc>
 8001376:	bf00      	nop
 8001378:	40020800 	.word	0x40020800
 800137c:	20000341 	.word	0x20000341
 8001380:	20000b24 	.word	0x20000b24
 8001384:	20000344 	.word	0x20000344
 8001388:	20000a88 	.word	0x20000a88
 800138c:	20000348 	.word	0x20000348
 8001390:	20000adc 	.word	0x20000adc
 8001394:	2000034c 	.word	0x2000034c
 8001398:	20000314 	.word	0x20000314

0800139c <FlightController_ControlSystem>:
    }
}

void FlightController_ControlSystem(void * ptr) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_CONTROL_SYSTEM
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80013a4:	2314      	movs	r3, #20
 80013a6:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        /* Set ESCs speeds */
        ESC_speeds[0] = FSA8S_channelValues[2] / 10;
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013aa:	889b      	ldrh	r3, [r3, #4]
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	08db      	lsrs	r3, r3, #3
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013b8:	801a      	strh	r2, [r3, #0]
        ESC_speeds[1] = FSA8S_channelValues[2] / 10;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013bc:	889b      	ldrh	r3, [r3, #4]
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013ca:	805a      	strh	r2, [r3, #2]
        ESC_speeds[2] = FSA8S_channelValues[2] / 10;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013ce:	889b      	ldrh	r3, [r3, #4]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	08db      	lsrs	r3, r3, #3
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013dc:	809a      	strh	r2, [r3, #4]
        ESC_speeds[3] = FSA8S_channelValues[2] / 10;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013e0:	889b      	ldrh	r3, [r3, #4]
 80013e2:	4a06      	ldr	r2, [pc, #24]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013ee:	80da      	strh	r2, [r3, #6]

        /* Set task time delay */
        vTaskDelay(xDelay);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f00c fbb3 	bl	800db5c <vTaskDelay>
        ESC_speeds[0] = FSA8S_channelValues[2] / 10;
 80013f6:	e7d7      	b.n	80013a8 <FlightController_ControlSystem+0xc>
 80013f8:	20000350 	.word	0x20000350
 80013fc:	cccccccd 	.word	0xcccccccd
 8001400:	2000037c 	.word	0x2000037c

08001404 <FlightController_Read_FSA8S>:
    }
}

void FlightController_Read_FSA8S(void * ptr) {
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

    FSA8S_CHANNEL_t channels[FSA8S_CHANNELS] = {CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7, CHANNEL_8, CHANNEL_9, CHANNEL_10};
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <FlightController_Read_FSA8S+0x54>)
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	ca07      	ldmia	r2, {r0, r1, r2}
 8001414:	c303      	stmia	r3!, {r0, r1}
 8001416:	801a      	strh	r2, [r3, #0]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FSA8S
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001418:	2314      	movs	r3, #20
 800141a:	61bb      	str	r3, [r7, #24]
#endif

    while (1) {

        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 800141c:	2300      	movs	r3, #0
 800141e:	77fb      	strb	r3, [r7, #31]
 8001420:	e013      	b.n	800144a <FlightController_Read_FSA8S+0x46>
            /* Read channels */
            FSA8S_channelValues[i] = FSA8S_ReadChannel(rc_controller, channels[i]);
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <FlightController_Read_FSA8S+0x58>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	3320      	adds	r3, #32
 800142a:	443b      	add	r3, r7
 800142c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001430:	7ffc      	ldrb	r4, [r7, #31]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f001 fb21 	bl	8002a7c <FSA8S_ReadChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <FlightController_Read_FSA8S+0x5c>)
 8001440:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	3301      	adds	r3, #1
 8001448:	77fb      	strb	r3, [r7, #31]
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d9e8      	bls.n	8001422 <FlightController_Read_FSA8S+0x1e>
            LOG(loggingStr, LOG_INFORMATION);
#endif
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001450:	69b8      	ldr	r0, [r7, #24]
 8001452:	f00c fb83 	bl	800db5c <vTaskDelay>
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001456:	e7e1      	b.n	800141c <FlightController_Read_FSA8S+0x18>
 8001458:	08013f58 	.word	0x08013f58
 800145c:	20000344 	.word	0x20000344
 8001460:	20000350 	.word	0x20000350

08001464 <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void * ptr) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b0a2      	sub	sp, #136	; 0x88
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
#endif

    /* Change delay from time in [ms] to ticks */
#if defined MAIN_APP_USE_LOGGING_GY87_GYROSCOPE || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER_ANGLES || defined MAIN_APP_USE_LOGGING_GY87_TEMPERATURE || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER ||                                                 \
    defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER_HEADING || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_PRESSURE || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_ALTITUDE
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
 800146c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001470:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
#endif

    bool_t gyroscopeCalibrationIsDone = false;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool_t accelerometerCalibrationIsDone = false;
 800147a:	2300      	movs	r3, #0
 800147c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    /* Allocate dynamic memory for the MPU6050 gyroscope values */
    GY87_gyroscopeValues = pvPortMalloc(sizeof(GY87_gyroscopeValues));
 8001480:	2004      	movs	r0, #4
 8001482:	f00d ff31 	bl	800f2e8 <pvPortMalloc>
 8001486:	4603      	mov	r3, r0
 8001488:	4a4d      	ldr	r2, [pc, #308]	; (80015c0 <FlightController_Read_GY87+0x15c>)
 800148a:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_gyroscopeValues) {
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <FlightController_Read_GY87+0x15c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d104      	bne.n	800149e <FlightController_Read_GY87+0x3a>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_gyroscopeValues);
 8001494:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <FlightController_Read_GY87+0x15c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f00d ff37 	bl	800f30c <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 accelerometer values */
    GY87_accelerometerValues = pvPortMalloc(sizeof(GY87_accelerometerValues));
 800149e:	2004      	movs	r0, #4
 80014a0:	f00d ff22 	bl	800f2e8 <pvPortMalloc>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a47      	ldr	r2, [pc, #284]	; (80015c4 <FlightController_Read_GY87+0x160>)
 80014a8:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_accelerometerValues) {
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <FlightController_Read_GY87+0x160>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d104      	bne.n	80014bc <FlightController_Read_GY87+0x58>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_accelerometerValues);
 80014b2:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <FlightController_Read_GY87+0x160>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00d ff28 	bl	800f30c <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 magnetometer values */
    GY87_magnetometerValues = pvPortMalloc(sizeof(GY87_magnetometerValues));
 80014bc:	2004      	movs	r0, #4
 80014be:	f00d ff13 	bl	800f2e8 <pvPortMalloc>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a40      	ldr	r2, [pc, #256]	; (80015c8 <FlightController_Read_GY87+0x164>)
 80014c6:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_magnetometerValues) {
 80014c8:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <FlightController_Read_GY87+0x164>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d104      	bne.n	80014da <FlightController_Read_GY87+0x76>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_magnetometerValues);
 80014d0:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <FlightController_Read_GY87+0x164>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f00d ff19 	bl	800f30c <vPortFree>
    }

    while (1) {

    	if(gyroscopeCalibrationIsDone && accelerometerCalibrationIsDone) {
 80014da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d04b      	beq.n	800157a <FlightController_Read_GY87+0x116>
 80014e2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d047      	beq.n	800157a <FlightController_Read_GY87+0x116>

    		/* Read GY87 gyroscope values */
    		GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <FlightController_Read_GY87+0x168>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a34      	ldr	r2, [pc, #208]	; (80015c0 <FlightController_Read_GY87+0x15c>)
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 ffc3 	bl	8003480 <GY87_ReadGyroscope>
    		sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope ROLL: %.2f[°/s] PITCH: %.2f[°/s] YAW: %.2f[°/s]\r\n", GY87_gyroscopeValues->rotationRateRoll, GY87_gyroscopeValues->rotationRatePitch, GY87_gyroscopeValues->rotationRateYaw);
    		LOG(loggingStr, LOG_INFORMATION);
#endif

    		/* Read GY87 accelerometer values */
    		GY87_ReadAccelerometer(hgy87, GY87_accelerometerValues);
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <FlightController_Read_GY87+0x168>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a31      	ldr	r2, [pc, #196]	; (80015c4 <FlightController_Read_GY87+0x160>)
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f002 f8d7 	bl	80036b8 <GY87_ReadAccelerometer>
    		sprintf((char *)loggingStr, (const char *)"GY87 Accelerometer ROLL: %.2f[°] PITCH: %.2f[°]\r\n", GY87_accelerometerValues->angleRoll, GY87_accelerometerValues->anglePitch);
    		LOG(loggingStr, LOG_INFORMATION);
#endif

    		/* Read GY87 temperature value */
    		GY87_temperature = GY87_ReadTemperatureSensor(hgy87);
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <FlightController_Read_GY87+0x168>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fa06 	bl	8003920 <GY87_ReadTemperatureSensor>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <FlightController_Read_GY87+0x16c>)
 800151a:	801a      	strh	r2, [r3, #0]
    		sprintf((char *)loggingStr, (const char *)"GY87 Temperature: %d[°C]\r\n", GY87_temperature);
    		LOG(loggingStr, LOG_INFORMATION);
#endif

    		/* Read GY87 magnetometer values */
    		GY87_ReadMagnetometer(hgy87, GY87_magnetometerValues);
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <FlightController_Read_GY87+0x168>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a29      	ldr	r2, [pc, #164]	; (80015c8 <FlightController_Read_GY87+0x164>)
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fa28 	bl	800397c <GY87_ReadMagnetometer>
    		sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer X: %.3f[G] Y: %.3f[G] Z: %.3f[G]\r\n", GY87_magnetometerValues->magneticFieldX, GY87_magnetometerValues->magneticFieldY, GY87_magnetometerValues->magneticFieldZ);
    		LOG(loggingStr, LOG_INFORMATION);
#endif

    		/* Read GY87 magnetometer heading */
    		GY87_magnetometerHeadingValue = GY87_ReadMagnetometerHeading(hgy87);
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <FlightController_Read_GY87+0x168>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fab5 	bl	8003aa0 <GY87_ReadMagnetometerHeading>
 8001536:	eef0 7a40 	vmov.f32	s15, s0
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <FlightController_Read_GY87+0x170>)
 800153c:	edc3 7a00 	vstr	s15, [r3]
    		sprintf((char *)loggingStr, (const char *)"GY87 Barometer Pressure: %.2fDEFINE\r\n", GY87_barometerPressureValue);
    		LOG(loggingStr, LOG_INFORMATION);
#endif

    		/* Read GY87 barometer altitude value */
    		GY87_barometerAltitudeValue = GY87_ReadBarometerAltitude(hgy87);
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <FlightController_Read_GY87+0x168>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fc8b 	bl	8003e60 <GY87_ReadBarometerAltitude>
 800154a:	eef0 7a40 	vmov.f32	s15, s0
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <FlightController_Read_GY87+0x174>)
 8001550:	edc3 7a00 	vstr	s15, [r3]

    		/* Log GY87 barometer altitude value */
#ifdef MAIN_APP_USE_LOGGING_GY87_BAROMETER_ALTITUDE
    		sprintf((char *)loggingStr, (const char *)"GY87 Barometer Altitude: %.2f[m]\r\n", GY87_barometerAltitudeValue);
 8001554:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <FlightController_Read_GY87+0x174>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fffd 	bl	8000558 <__aeabi_f2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	f107 0008 	add.w	r0, r7, #8
 8001566:	491d      	ldr	r1, [pc, #116]	; (80015dc <FlightController_Read_GY87+0x178>)
 8001568:	f00f f9c4 	bl	80108f4 <siprintf>
    		LOG(loggingStr, LOG_INFORMATION);
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fcce 	bl	8003f14 <LOG>
 8001578:	e01d      	b.n	80015b6 <FlightController_Read_GY87+0x152>
#endif

    	} else {

    	    /* Calibrate gyroscope measurements */
    	    if(false == gyroscopeCalibrationIsDone) {
 800157a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800157e:	f083 0301 	eor.w	r3, r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <FlightController_Read_GY87+0x134>

    	    	gyroscopeCalibrationIsDone = GY87_CalibrateGyroscope(hgy87);
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <FlightController_Read_GY87+0x168>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f001 ff0f 	bl	80033b0 <GY87_CalibrateGyroscope>
 8001592:	4603      	mov	r3, r0
 8001594:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    	    }

    	    /* Calibrate accelerometer measurements */
    	    if(false == accelerometerCalibrationIsDone) {
 8001598:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800159c:	f083 0301 	eor.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <FlightController_Read_GY87+0x152>

    	    	accelerometerCalibrationIsDone = GY87_CalibrateAccelerometer(hgy87);
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <FlightController_Read_GY87+0x168>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 f81a 	bl	80035e4 <GY87_CalibrateAccelerometer>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
    	    }

    	}

        /* Set task time delay */
        vTaskDelay(xDelay);
 80015b6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80015ba:	f00c facf 	bl	800db5c <vTaskDelay>
    	if(gyroscopeCalibrationIsDone && accelerometerCalibrationIsDone) {
 80015be:	e78c      	b.n	80014da <FlightController_Read_GY87+0x76>
 80015c0:	20000368 	.word	0x20000368
 80015c4:	2000036c 	.word	0x2000036c
 80015c8:	20000370 	.word	0x20000370
 80015cc:	20000348 	.word	0x20000348
 80015d0:	20000364 	.word	0x20000364
 80015d4:	20000374 	.word	0x20000374
 80015d8:	20000378 	.word	0x20000378
 80015dc:	08013f64 	.word	0x08013f64

080015e0 <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void * ptr) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_ESC
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80015e8:	2314      	movs	r3, #20
 80015ea:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <FlightController_Write_ESCs+0x9c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <FlightController_Write_ESCs+0x9c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	791b      	ldrb	r3, [r3, #4]
 80015f6:	4922      	ldr	r1, [pc, #136]	; (8001680 <FlightController_Write_ESCs+0xa0>)
 80015f8:	8809      	ldrh	r1, [r1, #0]
 80015fa:	ee07 1a90 	vmov	s15, r1
 80015fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	4619      	mov	r1, r3
 8001608:	4610      	mov	r0, r2
 800160a:	f001 f89d 	bl	8002748 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[1]);
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <FlightController_Write_ESCs+0x9c>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <FlightController_Write_ESCs+0x9c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	795b      	ldrb	r3, [r3, #5]
 8001618:	4919      	ldr	r1, [pc, #100]	; (8001680 <FlightController_Write_ESCs+0xa0>)
 800161a:	8849      	ldrh	r1, [r1, #2]
 800161c:	ee07 1a90 	vmov	s15, r1
 8001620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f001 f88c 	bl	8002748 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[2]);
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <FlightController_Write_ESCs+0x9c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <FlightController_Write_ESCs+0x9c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	799b      	ldrb	r3, [r3, #6]
 800163a:	4911      	ldr	r1, [pc, #68]	; (8001680 <FlightController_Write_ESCs+0xa0>)
 800163c:	8889      	ldrh	r1, [r1, #4]
 800163e:	ee07 1a90 	vmov	s15, r1
 8001642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f001 f87b 	bl	8002748 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[3]);
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <FlightController_Write_ESCs+0x9c>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <FlightController_Write_ESCs+0x9c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	79db      	ldrb	r3, [r3, #7]
 800165c:	4908      	ldr	r1, [pc, #32]	; (8001680 <FlightController_Write_ESCs+0xa0>)
 800165e:	88c9      	ldrh	r1, [r1, #6]
 8001660:	ee07 1a90 	vmov	s15, r1
 8001664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	4619      	mov	r1, r3
 800166e:	4610      	mov	r0, r2
 8001670:	f001 f86a 	bl	8002748 <ESC_SetSpeed>
        sprintf((char *)loggingStr, (const char *)"PWM Channel 4 Speed: %d\r\n\n", ESC_speeds[3]);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f00c fa71 	bl	800db5c <vTaskDelay>
        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 800167a:	e7b7      	b.n	80015ec <FlightController_Write_ESCs+0xc>
 800167c:	2000034c 	.word	0x2000034c
 8001680:	2000037c 	.word	0x2000037c

08001684 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b087      	sub	sp, #28
 8001688:	af02      	add	r7, sp, #8
 800168a:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800168c:	2314      	movs	r3, #20
 800168e:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001690:	2120      	movs	r1, #32
 8001692:	4810      	ldr	r0, [pc, #64]	; (80016d4 <FlightController_OnOffButton+0x50>)
 8001694:	f003 fda0 	bl	80051d8 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d115      	bne.n	80016ca <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <FlightController_OnOffButton+0x54>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f083 0301 	eor.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00e      	beq.n	80016ca <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <FlightController_OnOffButton+0x58>)
 80016ae:	681c      	ldr	r4, [r3, #0]
 80016b0:	f00c fc2a 	bl	800df08 <xTaskGetTickCount>
 80016b4:	4602      	mov	r2, r0
 80016b6:	2300      	movs	r3, #0
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2300      	movs	r3, #0
 80016bc:	2101      	movs	r1, #1
 80016be:	4620      	mov	r0, r4
 80016c0:	f00d f87a 	bl	800e7b8 <xTimerGenericCommand>
                Timer1_running = true;
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <FlightController_OnOffButton+0x54>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f00c fa46 	bl	800db5c <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80016d0:	e7de      	b.n	8001690 <FlightController_OnOffButton+0xc>
 80016d2:	bf00      	nop
 80016d4:	40020400 	.word	0x40020400
 80016d8:	20000340 	.word	0x20000340
 80016dc:	2000033c 	.word	0x2000033c

080016e0 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FLIGHT_CONTROLLER_BATTERY_LEVEL
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80016e8:	2314      	movs	r3, #20
 80016ea:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 80016ec:	482e      	ldr	r0, [pc, #184]	; (80017a8 <FlightController_BatteryLevel+0xc8>)
 80016ee:	f002 fd73 	bl	80041d8 <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 80016f2:	2101      	movs	r1, #1
 80016f4:	482c      	ldr	r0, [pc, #176]	; (80017a8 <FlightController_BatteryLevel+0xc8>)
 80016f6:	f002 fe23 	bl	8004340 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 80016fa:	482b      	ldr	r0, [pc, #172]	; (80017a8 <FlightController_BatteryLevel+0xc8>)
 80016fc:	f002 feab 	bl	8004456 <HAL_ADC_GetValue>
 8001700:	4603      	mov	r3, r0
 8001702:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevel = (adcValue * 3.3) / 4096;
 8001704:	897b      	ldrh	r3, [r7, #10]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff14 	bl	8000534 <__aeabi_i2d>
 800170c:	a320      	add	r3, pc, #128	; (adr r3, 8001790 <FlightController_BatteryLevel+0xb0>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff79 	bl	8000608 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <FlightController_BatteryLevel+0xcc>)
 8001724:	f7ff f89a 	bl	800085c <__aeabi_ddiv>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff fa62 	bl	8000bf8 <__aeabi_d2f>
 8001734:	4603      	mov	r3, r0
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <FlightController_BatteryLevel+0xd0>)
 8001738:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevel = FlightController_batteryLevel * 1.046046;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <FlightController_BatteryLevel+0xd0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff0a 	bl	8000558 <__aeabi_f2d>
 8001744:	a314      	add	r3, pc, #80	; (adr r3, 8001798 <FlightController_BatteryLevel+0xb8>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe ff5d 	bl	8000608 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa4f 	bl	8000bf8 <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <FlightController_BatteryLevel+0xd0>)
 800175e:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevel = FlightController_batteryLevel * 3.363636;
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <FlightController_BatteryLevel+0xd0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fef7 	bl	8000558 <__aeabi_f2d>
 800176a:	a30d      	add	r3, pc, #52	; (adr r3, 80017a0 <FlightController_BatteryLevel+0xc0>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff4a 	bl	8000608 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa3c 	bl	8000bf8 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <FlightController_BatteryLevel+0xd0>)
 8001784:	6013      	str	r3, [r2, #0]
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f[V]\r\n\n", FlightController_batteryLevel);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f00c f9e8 	bl	800db5c <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 800178c:	e7ae      	b.n	80016ec <FlightController_BatteryLevel+0xc>
 800178e:	bf00      	nop
 8001790:	66666666 	.word	0x66666666
 8001794:	400a6666 	.word	0x400a6666
 8001798:	bb01c92e 	.word	0xbb01c92e
 800179c:	3ff0bc9a 	.word	0x3ff0bc9a
 80017a0:	fdbd2fa1 	.word	0xfdbd2fa1
 80017a4:	400ae8b9 	.word	0x400ae8b9
 80017a8:	20000a40 	.word	0x20000a40
 80017ac:	40b00000 	.word	0x40b00000
 80017b0:	20000384 	.word	0x20000384

080017b4 <FlightController_BatteryAlarm>:
    }
}

void FlightController_BatteryAlarm(void * ptr) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80017bc:	2314      	movs	r3, #20
 80017be:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Set task time delay */
        vTaskDelay(xDelay);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f00c f9cb 	bl	800db5c <vTaskDelay>
 80017c6:	e7fb      	b.n	80017c0 <FlightController_BatteryAlarm+0xc>

080017c8 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 80017d4:	23fa      	movs	r3, #250	; 0xfa
 80017d6:	60bb      	str	r3, [r7, #8]

    while (1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	461a      	mov	r2, r3
 80017dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e0:	4807      	ldr	r0, [pc, #28]	; (8001800 <FlightController_HeartbeatLight+0x38>)
 80017e2:	f003 fd11 	bl	8005208 <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <FlightController_HeartbeatLight+0x2a>

            ledState = GPIO_PIN_SET;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e001      	b.n	80017f6 <FlightController_HeartbeatLight+0x2e>
        } else {

            ledState = GPIO_PIN_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80017f6:	68b8      	ldr	r0, [r7, #8]
 80017f8:	f00c f9b0 	bl	800db5c <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 80017fc:	e7ec      	b.n	80017d8 <FlightController_HeartbeatLight+0x10>
 80017fe:	bf00      	nop
 8001800:	40020800 	.word	0x40020800

08001804 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800180c:	2314      	movs	r3, #20
 800180e:	617b      	str	r3, [r7, #20]

    uint8_t sequence[] = {1, 0, 1, 0, 1, 0};
 8001810:	4a09      	ldr	r2, [pc, #36]	; (8001838 <FlightController_FlightLights+0x34>)
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800181a:	6018      	str	r0, [r3, #0]
 800181c:	3304      	adds	r3, #4
 800181e:	8019      	strh	r1, [r3, #0]

    while (1) {

        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001820:	2104      	movs	r1, #4
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <FlightController_FlightLights+0x38>)
 8001824:	f003 fd09 	bl	800523a <HAL_GPIO_TogglePin>

        /* Set task time delay */
        vTaskDelay(xDelay*250);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	22fa      	movs	r2, #250	; 0xfa
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f00c f993 	bl	800db5c <vTaskDelay>
        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001836:	e7f3      	b.n	8001820 <FlightController_FlightLights+0x1c>
 8001838:	08013f88 	.word	0x08013f88
 800183c:	40020400 	.word	0x40020400

08001840 <Timer1_Callback>:
    }
}

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af02      	add	r7, sp, #8
 8001846:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f00d fabb 	bl	800edc4 <pvTimerGetTimerID>
 800184e:	4603      	mov	r3, r0
 8001850:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f00c fffe 	bl	800e854 <xTimerGetPeriod>
 8001858:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (PW_ON_OFF_DRIVER_TIME / xTimerPeriod)) {
 8001860:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d33b      	bcc.n	80018e8 <Timer1_Callback+0xa8>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001870:	2120      	movs	r1, #32
 8001872:	4822      	ldr	r0, [pc, #136]	; (80018fc <Timer1_Callback+0xbc>)
 8001874:	f003 fcb0 	bl	80051d8 <HAL_GPIO_ReadPin>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d124      	bne.n	80018c8 <Timer1_Callback+0x88>

            if (!FlightController_running) {
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <Timer1_Callback+0xc0>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	f083 0301 	eor.w	r3, r3, #1
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <Timer1_Callback+0x5e>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 800188c:	2201      	movs	r2, #1
 800188e:	2110      	movs	r1, #16
 8001890:	481a      	ldr	r0, [pc, #104]	; (80018fc <Timer1_Callback+0xbc>)
 8001892:	f003 fcb9 	bl	8005208 <HAL_GPIO_WritePin>

                FlightController_running = true;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <Timer1_Callback+0xc0>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	e014      	b.n	80018c8 <Timer1_Callback+0x88>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <Timer1_Callback+0xc4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f00c f98e 	bl	800dbc4 <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ae:	4816      	ldr	r0, [pc, #88]	; (8001908 <Timer1_Callback+0xc8>)
 80018b0:	f003 fcaa 	bl	8005208 <HAL_GPIO_WritePin>

                FlightController_running = false;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <Timer1_Callback+0xc0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2110      	movs	r1, #16
 80018be:	480f      	ldr	r0, [pc, #60]	; (80018fc <Timer1_Callback+0xbc>)
 80018c0:	f003 fca2 	bl	8005208 <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 80018c4:	f003 f90d 	bl	8004ae2 <HAL_NVIC_SystemReset>
            }
        }

        /* Stop Timer1 */
        xTimerStop(xTimer, 0);
 80018c8:	2300      	movs	r3, #0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	2200      	movs	r2, #0
 80018d0:	2103      	movs	r1, #3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f00c ff70 	bl	800e7b8 <xTimerGenericCommand>
        vTimerSetTimerID(xTimer, (void *)0);
 80018d8:	2100      	movs	r1, #0
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f00d fa92 	bl	800ee04 <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <Timer1_Callback+0xcc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 80018e6:	e004      	b.n	80018f2 <Timer1_Callback+0xb2>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4619      	mov	r1, r3
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f00d fa89 	bl	800ee04 <vTimerSetTimerID>
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40020400 	.word	0x40020400
 8001900:	20000341 	.word	0x20000341
 8001904:	20000334 	.word	0x20000334
 8001908:	40020800 	.word	0x40020800
 800190c:	20000340 	.word	0x20000340

08001910 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0

    /* Welcome message */
    LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 8001914:	2100      	movs	r1, #0
 8001916:	4803      	ldr	r0, [pc, #12]	; (8001924 <FlightController_Init+0x14>)
 8001918:	f002 fafc 	bl	8003f14 <LOG>

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 800191c:	f7ff fb3a 	bl	8000f94 <FreeRTOS_CreateStartUpTasks>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	08013f90 	.word	0x08013f90

08001928 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4a07      	ldr	r2, [pc, #28]	; (8001954 <vApplicationGetIdleTaskMemory+0x2c>)
 8001938:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <vApplicationGetIdleTaskMemory+0x30>)
 800193e:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2280      	movs	r2, #128	; 0x80
 8001944:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000388 	.word	0x20000388
 8001958:	200003e4 	.word	0x200003e4

0800195c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <vApplicationGetTimerTaskMemory+0x2c>)
 800196c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <vApplicationGetTimerTaskMemory+0x30>)
 8001972:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	200005e4 	.word	0x200005e4
 800198c:	20000640 	.word	0x20000640

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001996:	f002 fb45 	bl	8004024 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f827 	bl	80019ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f000 f9cd 	bl	8001d3c <MX_GPIO_Init>
  MX_DMA_Init();
 80019a2:	f000 f9b1 	bl	8001d08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019a6:	f000 f985 	bl	8001cb4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80019aa:	f000 f8db 	bl	8001b64 <MX_I2C1_Init>
  MX_TIM3_Init();
 80019ae:	f000 f907 	bl	8001bc0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80019b2:	f000 f885 	bl	8001ac0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 80019b6:	f7ff ffab 	bl	8001910 <FlightController_Init>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <main+0x54>)
 80019bc:	1d3c      	adds	r4, r7, #4
 80019be:	461d      	mov	r5, r3
 80019c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00b f8b6 	bl	800cb42 <osThreadCreate>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <main+0x58>)
 80019da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80019dc:	f00b f8aa 	bl	800cb34 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 80019e0:	e7fe      	b.n	80019e0 <main+0x50>
 80019e2:	bf00      	nop
 80019e4:	08013fc4 	.word	0x08013fc4
 80019e8:	20000bc8 	.word	0x20000bc8

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b094      	sub	sp, #80	; 0x50
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	2230      	movs	r2, #48	; 0x30
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00e ffdd 	bl	80109ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <SystemClock_Config+0xcc>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <SystemClock_Config+0xcc>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <SystemClock_Config+0xcc>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <SystemClock_Config+0xd0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <SystemClock_Config+0xd0>)
 8001a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <SystemClock_Config+0xd0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a56:	2302      	movs	r3, #2
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a60:	2319      	movs	r3, #25
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001a64:	2390      	movs	r3, #144	; 0x90
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	4618      	mov	r0, r3
 8001a76:	f005 fe37 	bl	80076e8 <HAL_RCC_OscConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a80:	f000 f9ea 	bl	8001e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a84:	230f      	movs	r3, #15
 8001a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f006 f899 	bl	8007bd8 <HAL_RCC_ClockConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001aac:	f000 f9d4 	bl	8001e58 <Error_Handler>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3750      	adds	r7, #80	; 0x50
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000

08001ac0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001ad4:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <MX_ADC1_Init+0x9c>)
 8001ad6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b00:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <MX_ADC1_Init+0xa0>)
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b1e:	480e      	ldr	r0, [pc, #56]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b20:	f002 fb16 	bl	8004150 <HAL_ADC_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b2a:	f000 f995 	bl	8001e58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b40:	f002 fc96 	bl	8004470 <HAL_ADC_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b4a:	f000 f985 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000a40 	.word	0x20000a40
 8001b5c:	40012000 	.word	0x40012000
 8001b60:	0f000001 	.word	0x0f000001

08001b64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b6a:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <MX_I2C1_Init+0x54>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b70:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_I2C1_Init+0x58>)
 8001b72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001ba2:	f003 fb65 	bl	8005270 <HAL_I2C_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bac:	f000 f954 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000a88 	.word	0x20000a88
 8001bb8:	40005400 	.word	0x40005400
 8001bbc:	000186a0 	.word	0x000186a0

08001bc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	615a      	str	r2, [r3, #20]
 8001be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be2:	4b32      	ldr	r3, [pc, #200]	; (8001cac <MX_TIM3_Init+0xec>)
 8001be4:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <MX_TIM3_Init+0xf0>)
 8001be6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <MX_TIM3_Init+0xec>)
 8001bea:	2214      	movs	r2, #20
 8001bec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <MX_TIM3_Init+0xec>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <MX_TIM3_Init+0xec>)
 8001bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <MX_TIM3_Init+0xec>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <MX_TIM3_Init+0xec>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c08:	4828      	ldr	r0, [pc, #160]	; (8001cac <MX_TIM3_Init+0xec>)
 8001c0a:	f006 f9c5 	bl	8007f98 <HAL_TIM_PWM_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c14:	f000 f920 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	4619      	mov	r1, r3
 8001c26:	4821      	ldr	r0, [pc, #132]	; (8001cac <MX_TIM3_Init+0xec>)
 8001c28:	f006 fdaa 	bl	8008780 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c32:	f000 f911 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	; 0x60
 8001c38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4817      	ldr	r0, [pc, #92]	; (8001cac <MX_TIM3_Init+0xec>)
 8001c4e:	f006 faa3 	bl	8008198 <HAL_TIM_PWM_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c58:	f000 f8fe 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	2204      	movs	r2, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4812      	ldr	r0, [pc, #72]	; (8001cac <MX_TIM3_Init+0xec>)
 8001c64:	f006 fa98 	bl	8008198 <HAL_TIM_PWM_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c6e:	f000 f8f3 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2208      	movs	r2, #8
 8001c76:	4619      	mov	r1, r3
 8001c78:	480c      	ldr	r0, [pc, #48]	; (8001cac <MX_TIM3_Init+0xec>)
 8001c7a:	f006 fa8d 	bl	8008198 <HAL_TIM_PWM_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001c84:	f000 f8e8 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_TIM3_Init+0xec>)
 8001c90:	f006 fa82 	bl	8008198 <HAL_TIM_PWM_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c9a:	f000 f8dd 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c9e:	4803      	ldr	r0, [pc, #12]	; (8001cac <MX_TIM3_Init+0xec>)
 8001ca0:	f000 f9bc 	bl	800201c <HAL_TIM_MspPostInit>

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000adc 	.word	0x20000adc
 8001cb0:	40000400 	.word	0x40000400

08001cb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_USART2_UART_Init+0x4c>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <MX_USART2_UART_Init+0x50>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_USART2_UART_Init+0x4c>)
 8001cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_USART2_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_USART2_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_USART2_UART_Init+0x4c>)
 8001cda:	2204      	movs	r2, #4
 8001cdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <MX_USART2_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_USART2_UART_Init+0x4c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_USART2_UART_Init+0x4c>)
 8001cec:	f006 fdb6 	bl	800885c <HAL_UART_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cf6:	f000 f8af 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000b24 	.word	0x20000b24
 8001d04:	40004400 	.word	0x40004400

08001d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_DMA_Init+0x30>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <MX_DMA_Init+0x30>)
 8001d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_DMA_Init+0x30>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a29      	ldr	r2, [pc, #164]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <MX_GPIO_Init+0xfc>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001dc8:	481c      	ldr	r0, [pc, #112]	; (8001e3c <MX_GPIO_Init+0x100>)
 8001dca:	f003 fa1d 	bl	8005208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f241 1114 	movw	r1, #4372	; 0x1114
 8001dd4:	481a      	ldr	r0, [pc, #104]	; (8001e40 <MX_GPIO_Init+0x104>)
 8001dd6:	f003 fa17 	bl	8005208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED4_Pin;
 8001dda:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	4812      	ldr	r0, [pc, #72]	; (8001e3c <MX_GPIO_Init+0x100>)
 8001df4:	f003 f86c 	bl	8004ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin;
 8001df8:	f241 1314 	movw	r3, #4372	; 0x1114
 8001dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <MX_GPIO_Init+0x104>)
 8001e12:	f003 f85d 	bl	8004ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
  GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 8001e16:	2320      	movs	r3, #32
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_GPIO_Init+0x104>)
 8001e2a:	f003 f851 	bl	8004ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	; 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020400 	.word	0x40020400

08001e44 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001e4c:	f00d fa70 	bl	800f330 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f00a fec2 	bl	800cbda <osDelay>
 8001e56:	e7fb      	b.n	8001e50 <StartDefaultTask+0xc>

08001e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_MspInit+0x54>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_MspInit+0x54>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_MspInit+0x54>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_MspInit+0x54>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_MspInit+0x54>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_MspInit+0x54>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	210f      	movs	r1, #15
 8001eaa:	f06f 0001 	mvn.w	r0, #1
 8001eae:	f002 fdee 	bl	8004a8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800

08001ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_ADC_MspInit+0x7c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d127      	bne.n	8001f32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <HAL_ADC_MspInit+0x80>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <HAL_ADC_MspInit+0x80>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_ADC_MspInit+0x80>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_ADC_MspInit+0x80>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_ADC_MspInit+0x80>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_ADC_MspInit+0x80>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <HAL_ADC_MspInit+0x84>)
 8001f2e:	f002 ffcf 	bl	8004ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40012000 	.word	0x40012000
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000

08001f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_I2C_MspInit+0x84>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d12b      	bne.n	8001fc2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_I2C_MspInit+0x88>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_I2C_MspInit+0x88>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_I2C_MspInit+0x88>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f86:	23c0      	movs	r3, #192	; 0xc0
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f8a:	2312      	movs	r3, #18
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f96:	2304      	movs	r3, #4
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <HAL_I2C_MspInit+0x8c>)
 8001fa2:	f002 ff95 	bl	8004ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_I2C_MspInit+0x88>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_I2C_MspInit+0x88>)
 8001fb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_I2C_MspInit+0x88>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40005400 	.word	0x40005400
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020400 	.word	0x40020400

08001fd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10d      	bne.n	8002006 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_TIM_PWM_MspInit+0x40>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <HAL_TIM_PWM_MspInit+0x40>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_TIM_PWM_MspInit+0x40>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40000400 	.word	0x40000400
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <HAL_TIM_MspPostInit+0xa4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d13b      	bne.n	80020b6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_TIM_MspPostInit+0xa8>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_TIM_MspPostInit+0xa8>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_TIM_MspPostInit+0xa8>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_TIM_MspPostInit+0xa8>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <HAL_TIM_MspPostInit+0xa8>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_TIM_MspPostInit+0xa8>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002076:	23c0      	movs	r3, #192	; 0xc0
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002086:	2302      	movs	r3, #2
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <HAL_TIM_MspPostInit+0xac>)
 8002092:	f002 ff1d 	bl	8004ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002096:	2303      	movs	r3, #3
 8002098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020a6:	2302      	movs	r3, #2
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	4806      	ldr	r0, [pc, #24]	; (80020cc <HAL_TIM_MspPostInit+0xb0>)
 80020b2:	f002 ff0d 	bl	8004ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	; 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40000400 	.word	0x40000400
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020000 	.word	0x40020000
 80020cc:	40020400 	.word	0x40020400

080020d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <HAL_UART_MspInit+0xe4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d15b      	bne.n	80021aa <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_UART_MspInit+0xe8>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <HAL_UART_MspInit+0xe8>)
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_UART_MspInit+0xe8>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_UART_MspInit+0xe8>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a28      	ldr	r2, [pc, #160]	; (80021b8 <HAL_UART_MspInit+0xe8>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_UART_MspInit+0xe8>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800212a:	230c      	movs	r3, #12
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213a:	2307      	movs	r3, #7
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	481d      	ldr	r0, [pc, #116]	; (80021bc <HAL_UART_MspInit+0xec>)
 8002146:	f002 fec3 	bl	8004ed0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_UART_MspInit+0xf4>)
 800214e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 8002152:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002156:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 8002166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 800217a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 8002182:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002186:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 800218a:	2200      	movs	r2, #0
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800218e:	480c      	ldr	r0, [pc, #48]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 8002190:	f002 fcb8 	bl	8004b04 <HAL_DMA_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800219a:	f7ff fe5d 	bl	8001e58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_UART_MspInit+0xf0>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3728      	adds	r7, #40	; 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40004400 	.word	0x40004400
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	20000b68 	.word	0x20000b68
 80021c4:	40026088 	.word	0x40026088

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler+0x4>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f8:	f001 ff66 	bl	80040c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80021fc:	f00c ffe4 	bl	800f1c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <OTG_FS_IRQHandler+0x10>)
 800220a:	f004 f940 	bl	800648e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20001b64 	.word	0x20001b64

08002218 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
    return 1;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_kill>:

int _kill(int pid, int sig) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002232:	f00e fc33 	bl	8010a9c <__errno>
 8002236:	4603      	mov	r3, r0
 8002238:	2216      	movs	r2, #22
 800223a:	601a      	str	r2, [r3, #0]
    return -1;
 800223c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <_exit>:

void _exit(int status) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ffe7 	bl	8002228 <_kill>
    while (1) {
 800225a:	e7fe      	b.n	800225a <_exit+0x12>

0800225c <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e00a      	b.n	8002284 <_read+0x28>
        *ptr++ = __io_getchar();
 800226e:	f3af 8000 	nop.w
 8002272:	4601      	mov	r1, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60ba      	str	r2, [r7, #8]
 800227a:	b2ca      	uxtb	r2, r1
 800227c:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	dbf0      	blt.n	800226e <_read+0x12>
    }

    return len;
 800228c:	687b      	ldr	r3, [r7, #4]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e009      	b.n	80022bc <_write+0x26>
        __io_putchar(*ptr++);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf1      	blt.n	80022a8 <_write+0x12>
    }
    return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_close>:

int _close(int file) {
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_fstat>:

int _fstat(int file, struct stat * st) {
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f6:	605a      	str	r2, [r3, #4]
    return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_isatty>:

int _isatty(int file) {
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
        errno = ENOMEM;
 8002368:	f00e fb98 	bl	8010a9c <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <_sbrk+0x64>)
 8002388:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20010000 	.word	0x20010000
 8002398:	00000400 	.word	0x00000400
 800239c:	20000bcc 	.word	0x20000bcc
 80023a0:	200023e0 	.word	0x200023e0

080023a4 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <SystemInit+0x20>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <SystemInit+0x20>)
 80023b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002400 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023cc:	480d      	ldr	r0, [pc, #52]	; (8002404 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ce:	490e      	ldr	r1, [pc, #56]	; (8002408 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d0:	4a0e      	ldr	r2, [pc, #56]	; (800240c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d4:	e002      	b.n	80023dc <LoopCopyDataInit>

080023d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023da:	3304      	adds	r3, #4

080023dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e0:	d3f9      	bcc.n	80023d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e2:	4a0b      	ldr	r2, [pc, #44]	; (8002410 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e4:	4c0b      	ldr	r4, [pc, #44]	; (8002414 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e8:	e001      	b.n	80023ee <LoopFillZerobss>

080023ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ec:	3204      	adds	r2, #4

080023ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f0:	d3fb      	bcc.n	80023ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023f2:	f7ff ffd7 	bl	80023a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f6:	f00e fb57 	bl	8010aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fa:	f7ff fac9 	bl	8001990 <main>
  bx  lr
 80023fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002400:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002408:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 800240c:	080145f8 	.word	0x080145f8
  ldr r2, =_sbss
 8002410:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8002414:	200023dc 	.word	0x200023dc

08002418 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC_IRQHandler>

0800241a <PWM_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc) {
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]

    /* Check first parameter */
    if (NULL == hesc) {
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <PWM_Init+0x12>
        return false;
 8002428:	2300      	movs	r3, #0
 800242a:	e02c      	b.n	8002486 <PWM_Init+0x6c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_1)) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f005 fe00 	bl	8008038 <HAL_TIM_PWM_Start>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <PWM_Init+0x28>
        /* END MODIFY 1 */
        return false;
 800243e:	2300      	movs	r3, #0
 8002440:	e021      	b.n	8002486 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_2)) {
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2104      	movs	r1, #4
 8002448:	4618      	mov	r0, r3
 800244a:	f005 fdf5 	bl	8008038 <HAL_TIM_PWM_Start>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <PWM_Init+0x3e>
        /* END MODIFY 2 */
        return false;
 8002454:	2300      	movs	r3, #0
 8002456:	e016      	b.n	8002486 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_3)) {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2108      	movs	r1, #8
 800245e:	4618      	mov	r0, r3
 8002460:	f005 fdea 	bl	8008038 <HAL_TIM_PWM_Start>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <PWM_Init+0x54>
        /* END MODIFY 3 */
        return false;
 800246a:	2300      	movs	r3, #0
 800246c:	e00b      	b.n	8002486 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_4)) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	210c      	movs	r1, #12
 8002474:	4618      	mov	r0, r3
 8002476:	f005 fddf 	bl	8008038 <HAL_TIM_PWM_Start>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <PWM_Init+0x6a>
        /* END MODIFY 4 */
        return false;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <PWM_Init+0x6c>
    }

    return true;
 8002484:	2301      	movs	r3, #1
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint8_t channel, uint32_t dutyCycle) {
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	460b      	mov	r3, r1
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	72fb      	strb	r3, [r7, #11]

    /* Check parameters */
    if (NULL == hesc) {
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <PWM_SetDutyCycle+0x18>
        return false;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e02d      	b.n	8002504 <PWM_SetDutyCycle+0x74>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 80024a8:	7afb      	ldrb	r3, [r7, #11]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d00a      	beq.n	80024c4 <PWM_SetDutyCycle+0x34>
 80024ae:	7afb      	ldrb	r3, [r7, #11]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d007      	beq.n	80024c4 <PWM_SetDutyCycle+0x34>
 80024b4:	7afb      	ldrb	r3, [r7, #11]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d004      	beq.n	80024c4 <PWM_SetDutyCycle+0x34>
 80024ba:	7afb      	ldrb	r3, [r7, #11]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d001      	beq.n	80024c4 <PWM_SetDutyCycle+0x34>
        return false;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e01f      	b.n	8002504 <PWM_SetDutyCycle+0x74>
    }

    /* Set duty cycle */
    if (PWM_CHANNEL_1 == channel) {
 80024c4:	7afb      	ldrb	r3, [r7, #11]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d104      	bne.n	80024d4 <PWM_SetDutyCycle+0x44>
        /* BEGIN MODIFY 10 */
        TIM3->CCR1 = (uint16_t)dutyCycle;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <PWM_SetDutyCycle+0x80>)
 80024d0:	635a      	str	r2, [r3, #52]	; 0x34
 80024d2:	e016      	b.n	8002502 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 10 */
    } else if (PWM_CHANNEL_2 == channel) {
 80024d4:	7afb      	ldrb	r3, [r7, #11]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d104      	bne.n	80024e4 <PWM_SetDutyCycle+0x54>
        /* BEGIN MODIFY 11 */
        TIM3->CCR2 = (uint16_t)dutyCycle;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <PWM_SetDutyCycle+0x80>)
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
 80024e2:	e00e      	b.n	8002502 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 11 */
    } else if (PWM_CHANNEL_3 == channel) {
 80024e4:	7afb      	ldrb	r3, [r7, #11]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d104      	bne.n	80024f4 <PWM_SetDutyCycle+0x64>
        /* BEGIN MODIFY 12 */
        TIM3->CCR3 = (uint16_t)dutyCycle;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <PWM_SetDutyCycle+0x80>)
 80024f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80024f2:	e006      	b.n	8002502 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 12 */
    } else if (PWM_CHANNEL_4 == channel) {
 80024f4:	7afb      	ldrb	r3, [r7, #11]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d103      	bne.n	8002502 <PWM_SetDutyCycle+0x72>
        /* BEGIN MODIFY 13 */
        TIM3->CCR4 = (uint16_t)dutyCycle;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <PWM_SetDutyCycle+0x80>)
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
        /* END MODIFY 13 */
    }

    return true;
 8002502:	2301      	movs	r3, #1
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40000400 	.word	0x40000400
 8002514:	00000000 	.word	0x00000000

08002518 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint32_t * pwmValue) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002522:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (0 > speed || 100 < speed) {
 8002524:	edd7 7a01 	vldr	s15, [r7, #4]
 8002528:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	d408      	bmi.n	8002544 <ESC_CalculatePWMDutyCycle+0x2c>
 8002532:	edd7 7a01 	vldr	s15, [r7, #4]
 8002536:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025a0 <ESC_CalculatePWMDutyCycle+0x88>
 800253a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	dd01      	ble.n	8002548 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 8002544:	2300      	movs	r3, #0
 8002546:	e021      	b.n	800258c <ESC_CalculatePWMDutyCycle+0x74>
    }

    /* Calculate PWM value */
    *pwmValue = (uint32_t)((MAX_ESC_SPEED - MIN_ESC_SPEED) * (float)(speed / 100) + MIN_ESC_SPEED);
 8002548:	edd7 7a01 	vldr	s15, [r7, #4]
 800254c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80025a0 <ESC_CalculatePWMDutyCycle+0x88>
 8002550:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002554:	ee16 0a90 	vmov	r0, s13
 8002558:	f7fd fffe 	bl	8000558 <__aeabi_f2d>
 800255c:	a30e      	add	r3, pc, #56	; (adr r3, 8002598 <ESC_CalculatePWMDutyCycle+0x80>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f7fe f851 	bl	8000608 <__aeabi_dmul>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	a30a      	add	r3, pc, #40	; (adr r3, 8002598 <ESC_CalculatePWMDutyCycle+0x80>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fd fe92 	bl	800029c <__adddf3>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fb1a 	bl	8000bb8 <__aeabi_d2uiz>
 8002584:	4602      	mov	r2, r0
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	601a      	str	r2, [r3, #0]

    return true;
 800258a:	2301      	movs	r3, #1
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	f3af 8000 	nop.w
 8002598:	00000000 	.word	0x00000000
 800259c:	40a99980 	.word	0x40a99980
 80025a0:	42c80000 	.word	0x42c80000

080025a4 <ESC_AutoCalibrate>:

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <ESC_AutoCalibrate+0x12>
        return false;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e080      	b.n	80026b8 <ESC_AutoCalibrate+0x114>
#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"Auto-calibrating ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MAX_ESC_SPEED)) {
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	f641 1299 	movw	r2, #6553	; 0x1999
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff65 	bl	8002490 <PWM_SetDutyCycle>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f083 0301 	eor.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <ESC_AutoCalibrate+0x32>
        return false;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e070      	b.n	80026b8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MAX_ESC_SPEED)) {
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	795b      	ldrb	r3, [r3, #5]
 80025da:	f641 1299 	movw	r2, #6553	; 0x1999
 80025de:	4619      	mov	r1, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff55 	bl	8002490 <PWM_SetDutyCycle>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f083 0301 	eor.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <ESC_AutoCalibrate+0x52>
        return false;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e060      	b.n	80026b8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MAX_ESC_SPEED)) {
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	799b      	ldrb	r3, [r3, #6]
 80025fa:	f641 1299 	movw	r2, #6553	; 0x1999
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff45 	bl	8002490 <PWM_SetDutyCycle>
 8002606:	4603      	mov	r3, r0
 8002608:	f083 0301 	eor.w	r3, r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <ESC_AutoCalibrate+0x72>
        return false;
 8002612:	2300      	movs	r3, #0
 8002614:	e050      	b.n	80026b8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MAX_ESC_SPEED)) {
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	79db      	ldrb	r3, [r3, #7]
 800261a:	f641 1299 	movw	r2, #6553	; 0x1999
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff35 	bl	8002490 <PWM_SetDutyCycle>
 8002626:	4603      	mov	r3, r0
 8002628:	f083 0301 	eor.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <ESC_AutoCalibrate+0x92>
        return false;
 8002632:	2300      	movs	r3, #0
 8002634:	e040      	b.n	80026b8 <ESC_AutoCalibrate+0x114>
    }

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MIN_ESC_SPEED)) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	791b      	ldrb	r3, [r3, #4]
 800263a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800263e:	4619      	mov	r1, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff25 	bl	8002490 <PWM_SetDutyCycle>
 8002646:	4603      	mov	r3, r0
 8002648:	f083 0301 	eor.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <ESC_AutoCalibrate+0xb2>
        return false;
 8002652:	2300      	movs	r3, #0
 8002654:	e030      	b.n	80026b8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MIN_ESC_SPEED)) {
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	795b      	ldrb	r3, [r3, #5]
 800265a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800265e:	4619      	mov	r1, r3
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff15 	bl	8002490 <PWM_SetDutyCycle>
 8002666:	4603      	mov	r3, r0
 8002668:	f083 0301 	eor.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <ESC_AutoCalibrate+0xd2>
        return false;
 8002672:	2300      	movs	r3, #0
 8002674:	e020      	b.n	80026b8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MIN_ESC_SPEED)) {
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	799b      	ldrb	r3, [r3, #6]
 800267a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff05 	bl	8002490 <PWM_SetDutyCycle>
 8002686:	4603      	mov	r3, r0
 8002688:	f083 0301 	eor.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <ESC_AutoCalibrate+0xf2>
        return false;
 8002692:	2300      	movs	r3, #0
 8002694:	e010      	b.n	80026b8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MIN_ESC_SPEED)) {
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	79db      	ldrb	r3, [r3, #7]
 800269a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fef5 	bl	8002490 <PWM_SetDutyCycle>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f083 0301 	eor.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <ESC_AutoCalibrate+0x112>
        return false;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e000      	b.n	80026b8 <ESC_AutoCalibrate+0x114>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 80026b6:	2301      	movs	r3, #1
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <ESC_Init+0x12>
        return NULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e036      	b.n	8002740 <ESC_Init+0x80>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 80026d2:	2008      	movs	r0, #8
 80026d4:	f00c fe08 	bl	800f2e8 <pvPortMalloc>
 80026d8:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00f      	beq.n	8002700 <ESC_Init+0x40>
        hesc->htim = htim;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
        hesc->esc1 = PWM_CHANNEL_4;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2204      	movs	r2, #4
 80026ea:	711a      	strb	r2, [r3, #4]
        hesc->esc2 = PWM_CHANNEL_2;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2202      	movs	r2, #2
 80026f0:	715a      	strb	r2, [r3, #5]
        hesc->esc3 = PWM_CHANNEL_3;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2203      	movs	r2, #3
 80026f6:	719a      	strb	r2, [r3, #6]
        hesc->esc4 = PWM_CHANNEL_1;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	71da      	strb	r2, [r3, #7]
 80026fe:	e002      	b.n	8002706 <ESC_Init+0x46>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f00c fe03 	bl	800f30c <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc)) {
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7ff fe87 	bl	800241a <PWM_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	f083 0301 	eor.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <ESC_Init+0x62>
        LOG((uint8_t *)"ESCs  couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f00c fdf7 	bl	800f30c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	e00e      	b.n	8002740 <ESC_Init+0x80>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f7ff ff3e 	bl	80025a4 <ESC_AutoCalibrate>
 8002728:	4603      	mov	r3, r0
 800272a:	f083 0301 	eor.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <ESC_Init+0x7e>
        LOG((uint8_t *)"ESCs couldn't be calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f00c fde9 	bl	800f30c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <ESC_Init+0x80>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint8_t channel, float speed) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	460b      	mov	r3, r1
 8002752:	ed87 0a01 	vstr	s0, [r7, #4]
 8002756:	72fb      	strb	r3, [r7, #11]

    uint32_t pwmValue;

    /* Check parameters */
    if (NULL == hesc->htim) {
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <ESC_SetSpeed+0x1c>
        return false;
 8002760:	2300      	movs	r3, #0
 8002762:	e03d      	b.n	80027e0 <ESC_SetSpeed+0x98>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 8002764:	7afb      	ldrb	r3, [r7, #11]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d00a      	beq.n	8002780 <ESC_SetSpeed+0x38>
 800276a:	7afb      	ldrb	r3, [r7, #11]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d007      	beq.n	8002780 <ESC_SetSpeed+0x38>
 8002770:	7afb      	ldrb	r3, [r7, #11]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d004      	beq.n	8002780 <ESC_SetSpeed+0x38>
 8002776:	7afb      	ldrb	r3, [r7, #11]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d001      	beq.n	8002780 <ESC_SetSpeed+0x38>
        return false;
 800277c:	2300      	movs	r3, #0
 800277e:	e02f      	b.n	80027e0 <ESC_SetSpeed+0x98>
    }
    if (speed < 0 || speed > 100) {
 8002780:	edd7 7a01 	vldr	s15, [r7, #4]
 8002784:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278c:	d408      	bmi.n	80027a0 <ESC_SetSpeed+0x58>
 800278e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002792:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80027e8 <ESC_SetSpeed+0xa0>
 8002796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	dd01      	ble.n	80027a4 <ESC_SetSpeed+0x5c>
        return false;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e01d      	b.n	80027e0 <ESC_SetSpeed+0x98>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, &pwmValue)) {
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4618      	mov	r0, r3
 80027aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80027ae:	f7ff feb3 	bl	8002518 <ESC_CalculatePWMDutyCycle>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f083 0301 	eor.w	r3, r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <ESC_SetSpeed+0x7a>
        return false;
 80027be:	2300      	movs	r3, #0
 80027c0:	e00e      	b.n	80027e0 <ESC_SetSpeed+0x98>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, pwmValue)) {
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	4619      	mov	r1, r3
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7ff fe61 	bl	8002490 <PWM_SetDutyCycle>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <ESC_SetSpeed+0x96>
        return false;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <ESC_SetSpeed+0x98>
    };

    return true;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	42c80000 	.word	0x42c80000

080027ec <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <IBUS_Init+0x12>
        return false;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e00f      	b.n	800281e <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	7a1b      	ldrb	r3, [r3, #8]
 800280a:	b29b      	uxth	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	f006 f872 	bl	80088f6 <HAL_UART_Receive_DMA>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8002818:	2300      	movs	r3, #0
 800281a:	e000      	b.n	800281e <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 800281c:	2301      	movs	r3, #1
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <FSA8S_CheckFirstBytes+0x12>
        return false;
 8002834:	2300      	movs	r3, #0
 8002836:	e00d      	b.n	8002854 <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b20      	cmp	r3, #32
 8002840:	d107      	bne.n	8002852 <FSA8S_CheckFirstBytes+0x2c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	3301      	adds	r3, #1
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d101      	bne.n	8002852 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8002852:	2300      	movs	r3, #0
    }
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 8002868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286c:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <FSA8S_Checksum+0x18>
        return false;
 8002874:	2300      	movs	r3, #0
 8002876:	e02c      	b.n	80028d2 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7a1b      	ldrb	r3, [r3, #8]
 8002880:	3b01      	subs	r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	b21a      	sxth	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7a1b      	ldrb	r3, [r3, #8]
 8002892:	3b02      	subs	r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b21b      	sxth	r3, r3
 800289a:	4313      	orrs	r3, r2
 800289c:	b21b      	sxth	r3, r3
 800289e:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 80028a0:	2300      	movs	r3, #0
 80028a2:	737b      	strb	r3, [r7, #13]
 80028a4:	e00b      	b.n	80028be <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	7b7b      	ldrb	r3, [r7, #13]
 80028ac:	4413      	add	r3, r2
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	89fa      	ldrh	r2, [r7, #14]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 80028b8:	7b7b      	ldrb	r3, [r7, #13]
 80028ba:	3301      	adds	r3, #1
 80028bc:	737b      	strb	r3, [r7, #13]
 80028be:	7b7b      	ldrb	r3, [r7, #13]
 80028c0:	2b1d      	cmp	r3, #29
 80028c2:	d9f0      	bls.n	80028a6 <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 80028c4:	897a      	ldrh	r2, [r7, #10]
 80028c6:	89fb      	ldrh	r3, [r7, #14]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d101      	bne.n	80028d0 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 80028d0:	2300      	movs	r3, #0
    }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d062      	beq.n	80029b4 <FSA8S_AmendData+0xd4>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 80028ee:	2302      	movs	r3, #2
 80028f0:	737b      	strb	r3, [r7, #13]
 80028f2:	e059      	b.n	80029a8 <FSA8S_AmendData+0xc8>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	7b7b      	ldrb	r3, [r7, #13]
 80028fe:	3301      	adds	r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	b21a      	sxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	7b7b      	ldrb	r3, [r7, #13]
 800290e:	440b      	add	r3, r1
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b21b      	sxth	r3, r3
 8002914:	4313      	orrs	r3, r2
 8002916:	b21b      	sxth	r3, r3
 8002918:	b29a      	uxth	r2, r3
 800291a:	7b7b      	ldrb	r3, [r7, #13]
 800291c:	3b02      	subs	r3, #2
 800291e:	0fd9      	lsrs	r1, r3, #31
 8002920:	440b      	add	r3, r1
 8002922:	105b      	asrs	r3, r3, #1
 8002924:	4619      	mov	r1, r3
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <FSA8S_AmendData+0xe0>)
 8002928:	5c5b      	ldrb	r3, [r3, r1]
 800292a:	b29b      	uxth	r3, r3
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 8002930:	89fb      	ldrh	r3, [r7, #14]
 8002932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002936:	d308      	bcc.n	800294a <FSA8S_AmendData+0x6a>
 8002938:	89fb      	ldrh	r3, [r7, #14]
 800293a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800293e:	d804      	bhi.n	800294a <FSA8S_AmendData+0x6a>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 8002940:	89fb      	ldrh	r3, [r7, #14]
 8002942:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002946:	81fb      	strh	r3, [r7, #14]
 8002948:	e001      	b.n	800294e <FSA8S_AmendData+0x6e>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002958:	7b7b      	ldrb	r3, [r7, #13]
 800295a:	3b02      	subs	r3, #2
 800295c:	0fda      	lsrs	r2, r3, #31
 800295e:	4413      	add	r3, r2
 8002960:	105b      	asrs	r3, r3, #1
 8002962:	461a      	mov	r2, r3
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <FSA8S_AmendData+0xe0>)
 8002966:	5c9b      	ldrb	r3, [r3, r2]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002970:	eddf 6a14 	vldr	s13, [pc, #80]	; 80029c4 <FSA8S_AmendData+0xe4>
 8002974:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002978:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80029c4 <FSA8S_AmendData+0xe4>
 800297c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	7b7b      	ldrb	r3, [r7, #13]
 800298a:	3b02      	subs	r3, #2
 800298c:	0fd9      	lsrs	r1, r3, #31
 800298e:	440b      	add	r3, r1
 8002990:	105b      	asrs	r3, r3, #1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299a:	ee17 2a90 	vmov	r2, s15
 800299e:	b292      	uxth	r2, r2
 80029a0:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 80029a2:	7b7b      	ldrb	r3, [r7, #13]
 80029a4:	3302      	adds	r3, #2
 80029a6:	737b      	strb	r3, [r7, #13]
 80029a8:	7b7a      	ldrb	r2, [r7, #13]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7a1b      	ldrb	r3, [r3, #8]
 80029ae:	3b02      	subs	r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	db9f      	blt.n	80028f4 <FSA8S_AmendData+0x14>
        }
    }
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	20000004 	.word	0x20000004
 80029c4:	447a0000 	.word	0x447a0000

080029c8 <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <FSA8S_Init+0x12>
        return NULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e04a      	b.n	8002a70 <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 80029da:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <FSA8S_Init+0xb0>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <FSA8S_Init+0x1e>
        return NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e044      	b.n	8002a70 <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 80029e6:	2014      	movs	r0, #20
 80029e8:	f00c fc7e 	bl	800f2e8 <pvPortMalloc>
 80029ec:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 80029ee:	2020      	movs	r0, #32
 80029f0:	f00c fc7a 	bl	800f2e8 <pvPortMalloc>
 80029f4:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 80029f6:	201c      	movs	r0, #28
 80029f8:	f00c fc76 	bl	800f2e8 <pvPortMalloc>
 80029fc:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00f      	beq.n	8002a24 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2220      	movs	r2, #32
 8002a14:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	220e      	movs	r2, #14
 8002a20:	741a      	strb	r2, [r3, #16]
 8002a22:	e00c      	b.n	8002a3e <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f00c fc6f 	bl	800f30c <vPortFree>
        vPortFree(hibus->data);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f00c fc6a 	bl	800f30c <vPortFree>
        vPortFree(hibus);
 8002a38:	6978      	ldr	r0, [r7, #20]
 8002a3a:	f00c fc67 	bl	800f30c <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f7ff fed4 	bl	80027ec <IBUS_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <FSA8S_Init+0xb0>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
        return hibus;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	e00d      	b.n	8002a70 <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f00c fc57 	bl	800f30c <vPortFree>
        vPortFree(hibus->data);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f00c fc52 	bl	800f30c <vPortFree>
        vPortFree(hibus);
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f00c fc4f 	bl	800f30c <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 8002a6e:	2300      	movs	r3, #0
    }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000bd0 	.word	0x20000bd0

08002a7c <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e029      	b.n	8002ae6 <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <FSA8S_ReadChannel+0x22>
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	2b0e      	cmp	r3, #14
 8002a9c:	d901      	bls.n	8002aa2 <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e021      	b.n	8002ae6 <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002aa2:	bf00      	nop
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff febe 	bl	8002826 <FSA8S_CheckFirstBytes>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f083 0301 	eor.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f6      	bne.n	8002aa4 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fed2 	bl	8002860 <FSA8S_Checksum>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f083 0301 	eor.w	r3, r3, #1
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 8002ac8:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002aca:	e7ea      	b.n	8002aa2 <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 8002acc:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ff06 	bl	80028e0 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af02      	add	r7, sp, #8
 8002af4:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <I2C_Init+0x12>
        return false;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e010      	b.n	8002b22 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6858      	ldr	r0, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7a19      	ldrb	r1, [r3, #8]
 8002b08:	f107 030f 	add.w	r3, r7, #15
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	9200      	str	r2, [sp, #0]
 8002b10:	2275      	movs	r2, #117	; 0x75
 8002b12:	f000 f80a 	bl	8002b2a <I2C_Read>

    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b68      	cmp	r3, #104	; 0x68
 8002b1a:	d101      	bne.n	8002b20 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8002b20:	2300      	movs	r3, #0
    }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b088      	sub	sp, #32
 8002b2e:	af04      	add	r7, sp, #16
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	72fb      	strb	r3, [r7, #11]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <I2C_Read+0x1c>
        return false;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e019      	b.n	8002b7a <I2C_Read+0x50>
    }
    if (NULL == data) {
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <I2C_Read+0x26>
        return false;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e014      	b.n	8002b7a <I2C_Read+0x50>
    }

    /* Read I2C device data by passing a data register */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8002b50:	7afb      	ldrb	r3, [r7, #11]
 8002b52:	b299      	uxth	r1, r3
 8002b54:	7abb      	ldrb	r3, [r7, #10]
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	7e3b      	ldrb	r3, [r7, #24]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2064      	movs	r0, #100	; 0x64
 8002b5e:	9002      	str	r0, [sp, #8]
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2301      	movs	r3, #1
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f002 fdbf 	bl	80056ec <HAL_I2C_Mem_Read>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <I2C_Read+0x4e>
        /* END MODIFY 1 */
        /* Data couldn't be read */
        return false;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <I2C_Read+0x50>
    } else {
        /* Data read successfully */
        return true;
 8002b78:	2301      	movs	r3, #1
    }
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b088      	sub	sp, #32
 8002b86:	af04      	add	r7, sp, #16
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	72fb      	strb	r3, [r7, #11]
 8002b90:	4613      	mov	r3, r2
 8002b92:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <I2C_Write+0x1c>
        return false;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e018      	b.n	8002bd0 <I2C_Write+0x4e>
    }
    if (NULL == data) {
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <I2C_Write+0x26>
        return false;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e013      	b.n	8002bd0 <I2C_Write+0x4e>
    }

    /* Write to I2C device register */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	b299      	uxth	r1, r3
 8002bac:	7abb      	ldrb	r3, [r7, #10]
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	2364      	movs	r3, #100	; 0x64
 8002bb2:	9302      	str	r3, [sp, #8]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f002 fc9a 	bl	80054f8 <HAL_I2C_Mem_Write>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_Write+0x4c>
        /* END MODIFY 2 */
        /* Data couldn't be written */
        return false;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 8002bce:	2301      	movs	r3, #1
    }
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 8002be0:	2014      	movs	r0, #20
 8002be2:	f00c fb81 	bl	800f2e8 <pvPortMalloc>
 8002be6:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 8002be8:	2004      	movs	r0, #4
 8002bea:	f00c fb7d 	bl	800f2e8 <pvPortMalloc>
 8002bee:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <GY87_InstanceInit+0x24>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f00c fb83 	bl	800f30c <vPortFree>
        vPortFree(hgy87);
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f00c fb80 	bl	800f30c <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e01b      	b.n	8002c48 <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <GY87_InstanceInit+0x78>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	22d0      	movs	r2, #208	; 0xd0
 8002c22:	721a      	strb	r2, [r3, #8]
 8002c24:	e009      	b.n	8002c3a <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <GY87_InstanceInit+0x78>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2202      	movs	r2, #2
 8002c32:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	22d1      	movs	r2, #209	; 0xd1
 8002c38:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000bd1 	.word	0x20000bd1

08002c54 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8002c5c:	2340      	movs	r3, #64	; 0x40
 8002c5e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6858      	ldr	r0, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7a19      	ldrb	r1, [r3, #8]
 8002c68:	f107 030f 	add.w	r3, r7, #15
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	9200      	str	r2, [sp, #0]
 8002c70:	226b      	movs	r2, #107	; 0x6b
 8002c72:	f000 fb20 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af02      	add	r7, sp, #8
 8002c84:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6858      	ldr	r0, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7a19      	ldrb	r1, [r3, #8]
 8002c92:	f107 030f 	add.w	r3, r7, #15
 8002c96:	2201      	movs	r2, #1
 8002c98:	9200      	str	r2, [sp, #0]
 8002c9a:	226b      	movs	r2, #107	; 0x6b
 8002c9c:	f000 fb0b 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6858      	ldr	r0, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7a19      	ldrb	r1, [r3, #8]
 8002cbc:	f107 030f 	add.w	r3, r7, #15
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	9200      	str	r2, [sp, #0]
 8002cc4:	2219      	movs	r2, #25
 8002cc6:	f000 faf6 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <MPU6050_EnableDLPF>:

static void MPU6050_EnableDLPF(GY87_HandleTypeDef_t * hgy87) {
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af02      	add	r7, sp, #8
 8002cd8:	6078      	str	r0, [r7, #4]

	/* Enable digital low pass filter */
	uint8_t regData;

	regData = MPU_6050_BIT_CONFIG_DLPF_CFG_5;
 8002cda:	2305      	movs	r3, #5
 8002cdc:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_CONFIG, &regData, MPU6050_SET_BIT);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6858      	ldr	r0, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7a19      	ldrb	r1, [r3, #8]
 8002ce6:	f107 030f 	add.w	r3, r7, #15
 8002cea:	2201      	movs	r2, #1
 8002cec:	9200      	str	r2, [sp, #0]
 8002cee:	221a      	movs	r2, #26
 8002cf0:	f000 fae1 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_1; // Full range
 8002d04:	2308      	movs	r3, #8
 8002d06:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6858      	ldr	r0, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7a19      	ldrb	r1, [r3, #8]
 8002d10:	f107 030f 	add.w	r3, r7, #15
 8002d14:	2201      	movs	r2, #1
 8002d16:	9200      	str	r2, [sp, #0]
 8002d18:	221b      	movs	r2, #27
 8002d1a:	f000 facc 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af02      	add	r7, sp, #8
 8002d2c:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_2; // Full range
 8002d2e:	2310      	movs	r3, #16
 8002d30:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6858      	ldr	r0, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7a19      	ldrb	r1, [r3, #8]
 8002d3a:	f107 030f 	add.w	r3, r7, #15
 8002d3e:	2201      	movs	r2, #1
 8002d40:	9200      	str	r2, [sp, #0]
 8002d42:	221c      	movs	r2, #28
 8002d44:	f000 fab7 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6858      	ldr	r0, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7a19      	ldrb	r1, [r3, #8]
 8002d64:	f107 030f 	add.w	r3, r7, #15
 8002d68:	2201      	movs	r2, #1
 8002d6a:	9200      	str	r2, [sp, #0]
 8002d6c:	226a      	movs	r2, #106	; 0x6a
 8002d6e:	f000 faa2 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af02      	add	r7, sp, #8
 8002d80:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8002d82:	2320      	movs	r3, #32
 8002d84:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6858      	ldr	r0, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	7a19      	ldrb	r1, [r3, #8]
 8002d8e:	f107 030f 	add.w	r3, r7, #15
 8002d92:	2200      	movs	r2, #0
 8002d94:	9200      	str	r2, [sp, #0]
 8002d96:	226a      	movs	r2, #106	; 0x6a
 8002d98:	f000 fa8d 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002dac:	2302      	movs	r3, #2
 8002dae:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6858      	ldr	r0, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7a19      	ldrb	r1, [r3, #8]
 8002db8:	f107 030f 	add.w	r3, r7, #15
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	9200      	str	r2, [sp, #0]
 8002dc0:	2237      	movs	r2, #55	; 0x37
 8002dc2:	f000 fa78 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af02      	add	r7, sp, #8
 8002dd4:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6858      	ldr	r0, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7a19      	ldrb	r1, [r3, #8]
 8002de2:	f107 030f 	add.w	r3, r7, #15
 8002de6:	2201      	movs	r2, #1
 8002de8:	9200      	str	r2, [sp, #0]
 8002dea:	2237      	movs	r2, #55	; 0x37
 8002dec:	f000 fa63 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = MPU_6050_BIT_I2C_MST_CTRL_CLK_13;
 8002e00:	230d      	movs	r3, #13
 8002e02:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6858      	ldr	r0, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7a19      	ldrb	r1, [r3, #8]
 8002e0c:	f107 030f 	add.w	r3, r7, #15
 8002e10:	2201      	movs	r2, #1
 8002e12:	9200      	str	r2, [sp, #0]
 8002e14:	2224      	movs	r2, #36	; 0x24
 8002e16:	f000 fa4e 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af02      	add	r7, sp, #8
 8002e28:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = QMC5883L_AUX_VAL_I2C_ADDR | 0x80;
 8002e2a:	238d      	movs	r3, #141	; 0x8d
 8002e2c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6858      	ldr	r0, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7a19      	ldrb	r1, [r3, #8]
 8002e36:	f107 030f 	add.w	r3, r7, #15
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	9200      	str	r2, [sp, #0]
 8002e3e:	2225      	movs	r2, #37	; 0x25
 8002e40:	f000 fa39 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6858      	ldr	r0, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7a19      	ldrb	r1, [r3, #8]
 8002e50:	f107 030f 	add.w	r3, r7, #15
 8002e54:	2201      	movs	r2, #1
 8002e56:	9200      	str	r2, [sp, #0]
 8002e58:	2226      	movs	r2, #38	; 0x26
 8002e5a:	f000 fa2c 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8002e5e:	2386      	movs	r3, #134	; 0x86
 8002e60:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6858      	ldr	r0, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7a19      	ldrb	r1, [r3, #8]
 8002e6a:	f107 030f 	add.w	r3, r7, #15
 8002e6e:	2201      	movs	r2, #1
 8002e70:	9200      	str	r2, [sp, #0]
 8002e72:	2227      	movs	r2, #39	; 0x27
 8002e74:	f000 fa1f 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <MPU6050_Configure_BMP180>:

static void MPU6050_Configure_BMP180(GY87_HandleTypeDef_t * hgy87) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	6078      	str	r0, [r7, #4]

    /* Configure slave BMP180 barometer in MPU6050 */
    uint8_t regData;

    /* Set slave BMP180 barometer device address (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = BMP180_AUX_VAL_I2C_ADDR | 0x80;
 8002e88:	23f7      	movs	r3, #247	; 0xf7
 8002e8a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_ADDR, &regData, MPU6050_SET_BIT);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6858      	ldr	r0, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7a19      	ldrb	r1, [r3, #8]
 8002e94:	f107 030f 	add.w	r3, r7, #15
 8002e98:	2201      	movs	r2, #1
 8002e9a:	9200      	str	r2, [sp, #0]
 8002e9c:	2228      	movs	r2, #40	; 0x28
 8002e9e:	f000 fa0a 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>

    /* Set slave BMP180 barometer registers addresses to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0xF6;
 8002ea2:	23f6      	movs	r3, #246	; 0xf6
 8002ea4:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_REG, &regData, MPU6050_SET_BIT);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6858      	ldr	r0, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7a19      	ldrb	r1, [r3, #8]
 8002eae:	f107 030f 	add.w	r3, r7, #15
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	9200      	str	r2, [sp, #0]
 8002eb6:	2229      	movs	r2, #41	; 0x29
 8002eb8:	f000 f9fd 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>

    /* Set slave BMP180 barometer number of registers to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0x80 | 0x03;
 8002ebc:	2383      	movs	r3, #131	; 0x83
 8002ebe:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData, MPU6050_SET_BIT);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6858      	ldr	r0, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7a19      	ldrb	r1, [r3, #8]
 8002ec8:	f107 030f 	add.w	r3, r7, #15
 8002ecc:	2201      	movs	r2, #1
 8002ece:	9200      	str	r2, [sp, #0]
 8002ed0:	222a      	movs	r2, #42	; 0x2a
 8002ed2:	f000 f9f0 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <GY87_Configure>:

static bool_t GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff feb3 	bl	8002c54 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fec5 	bl	8002c7e <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fed7 	bl	8002ca8 <MPU6050_SetSampleDivider>

    /* Enable digital low pass filter */
    MPU6050_EnableDLPF(hgy87);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fee9 	bl	8002cd2 <MPU6050_EnableDLPF>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff fefb 	bl	8002cfc <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff0d 	bl	8002d26 <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff34 	bl	8002d7a <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ff46 	bl	8002da4 <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f845 	bl	8002fa8 <QMC5883L_TestConnection>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f083 0301 	eor.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <GY87_Configure+0x56>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer not detected.\r\n\n", LOG_ERROR);
 8002f2a:	2103      	movs	r1, #3
 8002f2c:	481a      	ldr	r0, [pc, #104]	; (8002f98 <GY87_Configure+0xb8>)
 8002f2e:	f000 fff1 	bl	8003f14 <LOG>
#endif
        return false;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e02c      	b.n	8002f90 <GY87_Configure+0xb0>
    } else {
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
 8002f36:	2100      	movs	r1, #0
 8002f38:	4818      	ldr	r0, [pc, #96]	; (8002f9c <GY87_Configure+0xbc>)
 8002f3a:	f000 ffeb 	bl	8003f14 <LOG>
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f862 	bl	8003008 <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!BMP180_TestConnection(hgy87)) {
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f847 	bl	8002fd8 <BMP180_TestConnection>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f083 0301 	eor.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <GY87_Configure+0x82>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"BMP180 barometer not detected.\r\n\n", LOG_ERROR);
 8002f56:	2103      	movs	r1, #3
 8002f58:	4811      	ldr	r0, [pc, #68]	; (8002fa0 <GY87_Configure+0xc0>)
 8002f5a:	f000 ffdb 	bl	8003f14 <LOG>
#endif
        return false;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e016      	b.n	8002f90 <GY87_Configure+0xb0>
    } else {
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
 8002f62:	2100      	movs	r1, #0
 8002f64:	480f      	ldr	r0, [pc, #60]	; (8002fa4 <GY87_Configure+0xc4>)
 8002f66:	f000 ffd5 	bl	8003f14 <LOG>
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hgy87);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f878 	bl	8003060 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff2c 	bl	8002dce <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff feea 	bl	8002d50 <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff3b 	bl	8002df8 <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ff4d 	bl	8002e22 <MPU6050_Configure_QMC5883l>

    /* Configure slave BMP180 barometer in MPU6050 */
    MPU6050_Configure_BMP180(hgy87);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff79 	bl	8002e80 <MPU6050_Configure_BMP180>

    return true;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	08013fe0 	.word	0x08013fe0
 8002f9c:	08014008 	.word	0x08014008
 8002fa0:	0801402c 	.word	0x0801402c
 8002fa4:	08014050 	.word	0x08014050

08002fa8 <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6858      	ldr	r0, [r3, #4]
 8002fb4:	f107 030f 	add.w	r3, r7, #15
 8002fb8:	2201      	movs	r2, #1
 8002fba:	9200      	str	r2, [sp, #0]
 8002fbc:	220d      	movs	r2, #13
 8002fbe:	211a      	movs	r1, #26
 8002fc0:	f000 f951 	bl	8003266 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	d001      	beq.n	8002fce <QMC5883L_TestConnection+0x26>
        return false;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 8002fce:	2301      	movs	r3, #1
    }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <BMP180_TestConnection>:

static bool_t BMP180_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, BMP180_REG_ID, &regData, sizeof(regData));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6858      	ldr	r0, [r3, #4]
 8002fe4:	f107 030f 	add.w	r3, r7, #15
 8002fe8:	2201      	movs	r2, #1
 8002fea:	9200      	str	r2, [sp, #0]
 8002fec:	22d0      	movs	r2, #208	; 0xd0
 8002fee:	21ee      	movs	r1, #238	; 0xee
 8002ff0:	f000 f939 	bl	8003266 <MPU6050_ReadRegister>

    if (BMP180_AUX_VAL_ID != regData) {
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b55      	cmp	r3, #85	; 0x55
 8002ff8:	d001      	beq.n	8002ffe <BMP180_TestConnection+0x26>
        return false;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e000      	b.n	8003000 <BMP180_TestConnection+0x28>
    } else {
        return true;
 8002ffe:	2301      	movs	r3, #1
    }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af02      	add	r7, sp, #8
 800300e:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6858      	ldr	r0, [r3, #4]
 8003018:	f107 030f 	add.w	r3, r7, #15
 800301c:	2201      	movs	r2, #1
 800301e:	9200      	str	r2, [sp, #0]
 8003020:	220b      	movs	r2, #11
 8003022:	211a      	movs	r1, #26
 8003024:	f000 f947 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 8003028:	231d      	movs	r3, #29
 800302a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6858      	ldr	r0, [r3, #4]
 8003030:	f107 030f 	add.w	r3, r7, #15
 8003034:	2201      	movs	r2, #1
 8003036:	9200      	str	r2, [sp, #0]
 8003038:	2209      	movs	r2, #9
 800303a:	211a      	movs	r1, #26
 800303c:	f000 f93b 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6858      	ldr	r0, [r3, #4]
 8003048:	f107 030f 	add.w	r3, r7, #15
 800304c:	2201      	movs	r2, #1
 800304e:	9200      	str	r2, [sp, #0]
 8003050:	220a      	movs	r2, #10
 8003052:	211a      	movs	r1, #26
 8003054:	f000 f92f 	bl	80032b6 <MPU6050_WriteRegisterBitmasked>
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <BMP180_Configure>:

static void BMP180_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b098      	sub	sp, #96	; 0x60
 8003064:	af02      	add	r7, sp, #8
 8003066:	6078      	str	r0, [r7, #4]
	/* delete, debugging */
	uint8_t loggingStr[64];

    /* Configure BMP180 barometer */
	uint8_t regData;
	uint8_t temperatureRawData[2] = {0};
 8003068:	2300      	movs	r3, #0
 800306a:	81bb      	strh	r3, [r7, #12]

	int32_t X1;
	int32_t X2;

    /* Read calibration data */
    BMP180_ReadCalibrationData(hgy87);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f855 	bl	800311c <BMP180_ReadCalibrationData>

	/* Read uncompensated temperature */
	regData = 0x2E;
 8003072:	232e      	movs	r3, #46	; 0x2e
 8003074:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6858      	ldr	r0, [r3, #4]
 800307a:	f107 030f 	add.w	r3, r7, #15
 800307e:	22f4      	movs	r2, #244	; 0xf4
 8003080:	21ee      	movs	r1, #238	; 0xee
 8003082:	f000 f905 	bl	8003290 <MPU6050_WriteRegister>
#ifdef USE_FREERTOS
	//vTaskDelay(pdMS_TO_TICKS(5));
#else
	//HAL_Delay(5);
#endif
	MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF6, temperatureRawData, 2 * sizeof(uint8_t));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6858      	ldr	r0, [r3, #4]
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	2202      	movs	r2, #2
 8003090:	9200      	str	r2, [sp, #0]
 8003092:	22f6      	movs	r2, #246	; 0xf6
 8003094:	21ee      	movs	r1, #238	; 0xee
 8003096:	f000 f8e6 	bl	8003266 <MPU6050_ReadRegister>
	BMP180_CalibrationData.UT = (temperatureRawData[0] << 8) | temperatureRawData[1];
 800309a:	7b3b      	ldrb	r3, [r7, #12]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	7b7a      	ldrb	r2, [r7, #13]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	4a1c      	ldr	r2, [pc, #112]	; (8003114 <BMP180_Configure+0xb4>)
 80030a4:	61d3      	str	r3, [r2, #28]

	/* Calculate compensated temperature */
	X1 = (BMP180_CalibrationData.UT - BMP180_CalibrationData.AC6) * (BMP180_CalibrationData.AC5 / (1 << 15));
 80030a6:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <BMP180_Configure+0xb4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <BMP180_Configure+0xb4>)
 80030ac:	8952      	ldrh	r2, [r2, #10]
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	4a18      	ldr	r2, [pc, #96]	; (8003114 <BMP180_Configure+0xb4>)
 80030b2:	8912      	ldrh	r2, [r2, #8]
 80030b4:	0bd2      	lsrs	r2, r2, #15
 80030b6:	b292      	uxth	r2, r2
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	657b      	str	r3, [r7, #84]	; 0x54
	X2 = (BMP180_CalibrationData.MC * (1 << 11)) / (X1 + BMP180_CalibrationData.MD);
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <BMP180_Configure+0xb4>)
 80030c0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80030c4:	02da      	lsls	r2, r3, #11
 80030c6:	4b13      	ldr	r3, [pc, #76]	; (8003114 <BMP180_Configure+0xb4>)
 80030c8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80030cc:	4619      	mov	r1, r3
 80030ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d0:	440b      	add	r3, r1
 80030d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80030d6:	653b      	str	r3, [r7, #80]	; 0x50
	BMP180_CalibrationData.B5 = X1 + X2;
 80030d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	4413      	add	r3, r2
 80030de:	4a0d      	ldr	r2, [pc, #52]	; (8003114 <BMP180_Configure+0xb4>)
 80030e0:	6113      	str	r3, [r2, #16]
	BMP180_CalibrationData.CT = ((BMP180_CalibrationData.B5 + 8) / (1 << 4)) / 10;
 80030e2:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <BMP180_Configure+0xb4>)
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	3308      	adds	r3, #8
 80030e8:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <BMP180_Configure+0xb8>)
 80030ea:	fb82 1203 	smull	r1, r2, r2, r3
 80030ee:	1192      	asrs	r2, r2, #6
 80030f0:	17db      	asrs	r3, r3, #31
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	4a07      	ldr	r2, [pc, #28]	; (8003114 <BMP180_Configure+0xb4>)
 80030f6:	6213      	str	r3, [r2, #32]

	/* Write register to read uncompensated pressure in the future */
	regData = 0x34 + (BMP180_OVERSAMPLING << 6);
 80030f8:	23b4      	movs	r3, #180	; 0xb4
 80030fa:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6858      	ldr	r0, [r3, #4]
 8003100:	f107 030f 	add.w	r3, r7, #15
 8003104:	22f4      	movs	r2, #244	; 0xf4
 8003106:	21ee      	movs	r1, #238	; 0xee
 8003108:	f000 f8c2 	bl	8003290 <MPU6050_WriteRegister>
}
 800310c:	bf00      	nop
 800310e:	3758      	adds	r7, #88	; 0x58
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000bd4 	.word	0x20000bd4
 8003118:	66666667 	.word	0x66666667

0800311c <BMP180_ReadCalibrationData>:

static void BMP180_ReadCalibrationData(GY87_HandleTypeDef_t * hgy87) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af02      	add	r7, sp, #8
 8003122:	6078      	str	r0, [r7, #4]

    uint8_t callibrationData[22] = {0};
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	821a      	strh	r2, [r3, #16]
    uint16_t startRegisterAddress = 0xAA;
 8003138:	23aa      	movs	r3, #170	; 0xaa
 800313a:	83fb      	strh	r3, [r7, #30]

    /* Read calibration data */
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, startRegisterAddress, callibrationData, sizeof(callibrationData));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6858      	ldr	r0, [r3, #4]
 8003140:	8bfb      	ldrh	r3, [r7, #30]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	f107 0308 	add.w	r3, r7, #8
 8003148:	2116      	movs	r1, #22
 800314a:	9100      	str	r1, [sp, #0]
 800314c:	21ee      	movs	r1, #238	; 0xee
 800314e:	f000 f88a 	bl	8003266 <MPU6050_ReadRegister>

    BMP180_CalibrationData.AC1 = ((callibrationData[0] << 8) | callibrationData[1]);
 8003152:	7a3b      	ldrb	r3, [r7, #8]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	b21a      	sxth	r2, r3
 8003158:	7a7b      	ldrb	r3, [r7, #9]
 800315a:	b21b      	sxth	r3, r3
 800315c:	4313      	orrs	r3, r2
 800315e:	b21a      	sxth	r2, r3
 8003160:	4b31      	ldr	r3, [pc, #196]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 8003162:	801a      	strh	r2, [r3, #0]
    BMP180_CalibrationData.AC2 = ((callibrationData[2] << 8) | callibrationData[3]);
 8003164:	7abb      	ldrb	r3, [r7, #10]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	b21a      	sxth	r2, r3
 800316a:	7afb      	ldrb	r3, [r7, #11]
 800316c:	b21b      	sxth	r3, r3
 800316e:	4313      	orrs	r3, r2
 8003170:	b21a      	sxth	r2, r3
 8003172:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 8003174:	805a      	strh	r2, [r3, #2]
    BMP180_CalibrationData.AC3 = ((callibrationData[4] << 8) | callibrationData[5]);
 8003176:	7b3b      	ldrb	r3, [r7, #12]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	b21a      	sxth	r2, r3
 800317c:	7b7b      	ldrb	r3, [r7, #13]
 800317e:	b21b      	sxth	r3, r3
 8003180:	4313      	orrs	r3, r2
 8003182:	b21a      	sxth	r2, r3
 8003184:	4b28      	ldr	r3, [pc, #160]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 8003186:	809a      	strh	r2, [r3, #4]
    BMP180_CalibrationData.AC4 = ((callibrationData[6] << 8) | callibrationData[7]);
 8003188:	7bbb      	ldrb	r3, [r7, #14]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	b21a      	sxth	r2, r3
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	b21b      	sxth	r3, r3
 8003192:	4313      	orrs	r3, r2
 8003194:	b21b      	sxth	r3, r3
 8003196:	b29a      	uxth	r2, r3
 8003198:	4b23      	ldr	r3, [pc, #140]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 800319a:	80da      	strh	r2, [r3, #6]
    BMP180_CalibrationData.AC5 = ((callibrationData[8] << 8) | callibrationData[9]);
 800319c:	7c3b      	ldrb	r3, [r7, #16]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	b21a      	sxth	r2, r3
 80031a2:	7c7b      	ldrb	r3, [r7, #17]
 80031a4:	b21b      	sxth	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 80031ae:	811a      	strh	r2, [r3, #8]
    BMP180_CalibrationData.AC6 = ((callibrationData[10] << 8) | callibrationData[11]);
 80031b0:	7cbb      	ldrb	r3, [r7, #18]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	b21a      	sxth	r2, r3
 80031b6:	7cfb      	ldrb	r3, [r7, #19]
 80031b8:	b21b      	sxth	r3, r3
 80031ba:	4313      	orrs	r3, r2
 80031bc:	b21b      	sxth	r3, r3
 80031be:	b29a      	uxth	r2, r3
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 80031c2:	815a      	strh	r2, [r3, #10]
    BMP180_CalibrationData.B1 = ((callibrationData[12] << 8) | callibrationData[13]);
 80031c4:	7d3b      	ldrb	r3, [r7, #20]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	b21a      	sxth	r2, r3
 80031ca:	7d7b      	ldrb	r3, [r7, #21]
 80031cc:	b21b      	sxth	r3, r3
 80031ce:	4313      	orrs	r3, r2
 80031d0:	b21a      	sxth	r2, r3
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 80031d4:	819a      	strh	r2, [r3, #12]
    BMP180_CalibrationData.B2 = ((callibrationData[14] << 8) | callibrationData[15]);
 80031d6:	7dbb      	ldrb	r3, [r7, #22]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	b21a      	sxth	r2, r3
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	b21b      	sxth	r3, r3
 80031e0:	4313      	orrs	r3, r2
 80031e2:	b21a      	sxth	r2, r3
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 80031e6:	81da      	strh	r2, [r3, #14]
    BMP180_CalibrationData.MB = ((callibrationData[16] << 8) | callibrationData[17]);
 80031e8:	7e3b      	ldrb	r3, [r7, #24]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	b21a      	sxth	r2, r3
 80031ee:	7e7b      	ldrb	r3, [r7, #25]
 80031f0:	b21b      	sxth	r3, r3
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b21a      	sxth	r2, r3
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 80031f8:	829a      	strh	r2, [r3, #20]
    BMP180_CalibrationData.MC = ((callibrationData[18] << 8) | callibrationData[19]);
 80031fa:	7ebb      	ldrb	r3, [r7, #26]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	b21a      	sxth	r2, r3
 8003200:	7efb      	ldrb	r3, [r7, #27]
 8003202:	b21b      	sxth	r3, r3
 8003204:	4313      	orrs	r3, r2
 8003206:	b21a      	sxth	r2, r3
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 800320a:	82da      	strh	r2, [r3, #22]
    BMP180_CalibrationData.MD = ((callibrationData[20] << 8) | callibrationData[21]);
 800320c:	7f3b      	ldrb	r3, [r7, #28]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	b21a      	sxth	r2, r3
 8003212:	7f7b      	ldrb	r3, [r7, #29]
 8003214:	b21b      	sxth	r3, r3
 8003216:	4313      	orrs	r3, r2
 8003218:	b21a      	sxth	r2, r3
 800321a:	4b03      	ldr	r3, [pc, #12]	; (8003228 <BMP180_ReadCalibrationData+0x10c>)
 800321c:	831a      	strh	r2, [r3, #24]
}
 800321e:	bf00      	nop
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000bd4 	.word	0x20000bd4

0800322c <GY87_BMP180_ReadUncompensatedPressure>:

static uint32_t GY87_BMP180_ReadUncompensatedPressure(GY87_HandleTypeDef_t * hgy87) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af02      	add	r7, sp, #8
 8003232:	6078      	str	r0, [r7, #4]
	/* Declare variable for raw data */
	uint8_t pressureRawData[3];
	int32_t uncompensatedPressure;

	/* Read uncompensated pressure data */
    MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_06, pressureRawData, 3 * sizeof(uint8_t));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6858      	ldr	r0, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7a19      	ldrb	r1, [r3, #8]
 800323c:	f107 0308 	add.w	r3, r7, #8
 8003240:	2203      	movs	r2, #3
 8003242:	9200      	str	r2, [sp, #0]
 8003244:	224f      	movs	r2, #79	; 0x4f
 8003246:	f000 f80e 	bl	8003266 <MPU6050_ReadRegister>

    /* Calculate uncompensated pressure */
    uncompensatedPressure = ((pressureRawData[0] << 16) + (pressureRawData[1] << 8) + pressureRawData[2]) >> (8 - BMP180_OVERSAMPLING);
 800324a:	7a3b      	ldrb	r3, [r7, #8]
 800324c:	041a      	lsls	r2, r3, #16
 800324e:	7a7b      	ldrb	r3, [r7, #9]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	4413      	add	r3, r2
 8003254:	7aba      	ldrb	r2, [r7, #10]
 8003256:	4413      	add	r3, r2
 8003258:	119b      	asrs	r3, r3, #6
 800325a:	60fb      	str	r3, [r7, #12]

    return uncompensatedPressure;
 800325c:	68fb      	ldr	r3, [r7, #12]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <MPU6050_ReadRegister>:

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af02      	add	r7, sp, #8
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	72fb      	strb	r3, [r7, #11]
 8003274:	4613      	mov	r3, r2
 8003276:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 8003278:	7aba      	ldrb	r2, [r7, #10]
 800327a:	7af9      	ldrb	r1, [r7, #11]
 800327c:	7e3b      	ldrb	r3, [r7, #24]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7ff fc51 	bl	8002b2a <I2C_Read>
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	607b      	str	r3, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	72fb      	strb	r3, [r7, #11]
 800329e:	4613      	mov	r3, r2
 80032a0:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 80032a2:	7aba      	ldrb	r2, [r7, #10]
 80032a4:	7af9      	ldrb	r1, [r7, #11]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff fc6a 	bl	8002b82 <I2C_Write>
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b088      	sub	sp, #32
 80032ba:	af02      	add	r7, sp, #8
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	72fb      	strb	r3, [r7, #11]
 80032c4:	4613      	mov	r3, r2
 80032c6:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 80032c8:	f107 0317 	add.w	r3, r7, #23
 80032cc:	7aba      	ldrb	r2, [r7, #10]
 80032ce:	7af9      	ldrb	r1, [r7, #11]
 80032d0:	2001      	movs	r0, #1
 80032d2:	9000      	str	r0, [sp, #0]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff ffc6 	bl	8003266 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 80032da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	75bb      	strb	r3, [r7, #22]
 80032ee:	e00a      	b.n	8003306 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b25b      	sxtb	r3, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	b25a      	sxtb	r2, r3
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	4013      	ands	r3, r2
 8003300:	b25b      	sxtb	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8003306:	f107 0316 	add.w	r3, r7, #22
 800330a:	7aba      	ldrb	r2, [r7, #10]
 800330c:	7af9      	ldrb	r1, [r7, #11]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f7ff ffbe 	bl	8003290 <MPU6050_WriteRegister>
}
 8003314:	bf00      	nop
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <GY87_Init+0x12>
        return NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	e034      	b.n	8003398 <GY87_Init+0x7c>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 800332e:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <GY87_Init+0x84>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d101      	bne.n	800333a <GY87_Init+0x1e>
        return NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	e02e      	b.n	8003398 <GY87_Init+0x7c>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fc4c 	bl	8002bd8 <GY87_InstanceInit>
 8003340:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d022      	beq.n	800338e <GY87_Init+0x72>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff fbd0 	bl	8002aee <I2C_Init>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00e      	beq.n	8003372 <GY87_Init+0x56>

            /* Initialization was successful */
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
 8003354:	2100      	movs	r1, #0
 8003356:	4813      	ldr	r0, [pc, #76]	; (80033a4 <GY87_Init+0x88>)
 8003358:	f000 fddc 	bl	8003f14 <LOG>
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff fdbf 	bl	8002ee0 <GY87_Configure>

            instancesNumber++;
 8003362:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <GY87_Init+0x84>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <GY87_Init+0x84>)
 800336c:	701a      	strb	r2, [r3, #0]

            return hgy87;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	e012      	b.n	8003398 <GY87_Init+0x7c>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4618      	mov	r0, r3
 8003378:	f00b ffc8 	bl	800f30c <vPortFree>
            vPortFree(hgy87);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f00b ffc5 	bl	800f30c <vPortFree>
            free(hgy87->buffer);
            free(hgy87);
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
 8003382:	2103      	movs	r1, #3
 8003384:	4808      	ldr	r0, [pc, #32]	; (80033a8 <GY87_Init+0x8c>)
 8003386:	f000 fdc5 	bl	8003f14 <LOG>
#endif
            return NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	e004      	b.n	8003398 <GY87_Init+0x7c>
        }
    } else {

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
 800338e:	2103      	movs	r1, #3
 8003390:	4806      	ldr	r0, [pc, #24]	; (80033ac <GY87_Init+0x90>)
 8003392:	f000 fdbf 	bl	8003f14 <LOG>
#endif
        return NULL;
 8003396:	2300      	movs	r3, #0
    }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000bd1 	.word	0x20000bd1
 80033a4:	08014070 	.word	0x08014070
 80033a8:	0801408c 	.word	0x0801408c
 80033ac:	080140a8 	.word	0x080140a8

080033b0 <GY87_CalibrateGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

bool_t GY87_CalibrateGyroscope(GY87_HandleTypeDef_t * hgy87) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08c      	sub	sp, #48	; 0x30
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

    /* Declare structure to read the gyroscope values */
    GY87_gyroscopeValues_t gyroscopeValues;

    /* Declare variables to accumulate measurements */
    float ratesRoll = 0;
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    float ratesPitch = 0;
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
    float ratesYaw = 0;
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check parameter and calculate calibration value */
    if (NULL != hgy87) {
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d048      	beq.n	8003462 <GY87_CalibrateGyroscope+0xb2>

    	/* Calibrate gyroscope measurements */
    	for(int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 80033d0:	2300      	movs	r3, #0
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	e020      	b.n	8003418 <GY87_CalibrateGyroscope+0x68>

        	/* Read gyroscope values */
        	GY87_ReadGyroscope(hgy87, &gyroscopeValues);
 80033d6:	f107 030c 	add.w	r3, r7, #12
 80033da:	4619      	mov	r1, r3
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f84f 	bl	8003480 <GY87_ReadGyroscope>

        	/* Accumulate measurements */
        	ratesRoll += gyroscopeValues.rotationRateRoll;
 80033e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80033e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80033ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        	ratesPitch += gyroscopeValues.rotationRatePitch;
 80033f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80033f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80033fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        	ratesYaw += gyroscopeValues.rotationRateYaw;
 8003402:	edd7 7a07 	vldr	s15, [r7, #28]
 8003406:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800340a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    	for(int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	3301      	adds	r3, #1
 8003416:	623b      	str	r3, [r7, #32]
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800341e:	dbda      	blt.n	80033d6 <GY87_CalibrateGyroscope+0x26>
    	}

    	gyroscopeCalibrationRoll = ratesRoll / GY87_CALIBRATION_ITERATIONS;
 8003420:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003424:	eddf 6a11 	vldr	s13, [pc, #68]	; 800346c <GY87_CalibrateGyroscope+0xbc>
 8003428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800342c:	4b10      	ldr	r3, [pc, #64]	; (8003470 <GY87_CalibrateGyroscope+0xc0>)
 800342e:	edc3 7a00 	vstr	s15, [r3]
    	gyroscopeCalibrationPitch = ratesPitch / GY87_CALIBRATION_ITERATIONS;
 8003432:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003436:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800346c <GY87_CalibrateGyroscope+0xbc>
 800343a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <GY87_CalibrateGyroscope+0xc4>)
 8003440:	edc3 7a00 	vstr	s15, [r3]
    	gyroscopeCalibrationYaw = ratesYaw / GY87_CALIBRATION_ITERATIONS;
 8003444:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003448:	eddf 6a08 	vldr	s13, [pc, #32]	; 800346c <GY87_CalibrateGyroscope+0xbc>
 800344c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <GY87_CalibrateGyroscope+0xc8>)
 8003452:	edc3 7a00 	vstr	s15, [r3]

#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"Gyroscope calibration done.\r\n\n", LOG_INFORMATION);
 8003456:	2100      	movs	r1, #0
 8003458:	4808      	ldr	r0, [pc, #32]	; (800347c <GY87_CalibrateGyroscope+0xcc>)
 800345a:	f000 fd5b 	bl	8003f14 <LOG>
#endif

        return true;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <GY87_CalibrateGyroscope+0xb4>

    } else {

    	return false;
 8003462:	2300      	movs	r3, #0
    }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3730      	adds	r7, #48	; 0x30
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	44fa0000 	.word	0x44fa0000
 8003470:	20000bf8 	.word	0x20000bf8
 8003474:	20000bfc 	.word	0x20000bfc
 8003478:	20000c00 	.word	0x20000c00
 800347c:	080140d0 	.word	0x080140d0

08003480 <GY87_ReadGyroscope>:

void GY87_ReadGyroscope(GY87_HandleTypeDef_t * hgy87, GY87_gyroscopeValues_t * gyroscopeValues) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af02      	add	r7, sp, #8
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_0500;
 800348a:	2341      	movs	r3, #65	; 0x41
 800348c:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != gyroscopeValues) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8086 	beq.w	80035a2 <GY87_ReadGyroscope+0x122>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8082 	beq.w	80035a2 <GY87_ReadGyroscope+0x122>

        /* Read gyroscope raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6858      	ldr	r0, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	7a19      	ldrb	r1, [r3, #8]
 80034a6:	f107 030c 	add.w	r3, r7, #12
 80034aa:	2202      	movs	r2, #2
 80034ac:	9200      	str	r2, [sp, #0]
 80034ae:	2243      	movs	r2, #67	; 0x43
 80034b0:	f7ff fed9 	bl	8003266 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 80034b4:	7b3b      	ldrb	r3, [r7, #12]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	b21a      	sxth	r2, r3
 80034ba:	7b7b      	ldrb	r3, [r7, #13]
 80034bc:	b21b      	sxth	r3, r3
 80034be:	4313      	orrs	r3, r2
 80034c0:	b21a      	sxth	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	801a      	strh	r2, [r3, #0]
        /* Calculate gyroscope rotation rate along X axis (roll) */
        gyroscopeValues->rotationRateRoll = ((float) gyroscopeValues->rawValueX / scaleFactor) - gyroscopeCalibrationRoll;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80034d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034d8:	ee07 3a90 	vmov	s15, r3
 80034dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e4:	4b3c      	ldr	r3, [pc, #240]	; (80035d8 <GY87_ReadGyroscope+0x158>)
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Read gyroscope raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6858      	ldr	r0, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	7a19      	ldrb	r1, [r3, #8]
 80034fc:	f107 030c 	add.w	r3, r7, #12
 8003500:	2202      	movs	r2, #2
 8003502:	9200      	str	r2, [sp, #0]
 8003504:	2245      	movs	r2, #69	; 0x45
 8003506:	f7ff feae 	bl	8003266 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 800350a:	7b3b      	ldrb	r3, [r7, #12]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	b21a      	sxth	r2, r3
 8003510:	7b7b      	ldrb	r3, [r7, #13]
 8003512:	b21b      	sxth	r3, r3
 8003514:	4313      	orrs	r3, r2
 8003516:	b21a      	sxth	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	805a      	strh	r2, [r3, #2]
        /* Calculate gyroscope rotation rate along Y axis (pitch) */
        gyroscopeValues->rotationRatePitch = ((float) gyroscopeValues->rawValueY / scaleFactor) - gyroscopeCalibrationPitch;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800352a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353a:	4b28      	ldr	r3, [pc, #160]	; (80035dc <GY87_ReadGyroscope+0x15c>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	edc3 7a03 	vstr	s15, [r3, #12]

        /* Read gyroscope raw value for Z axis  */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6858      	ldr	r0, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7a19      	ldrb	r1, [r3, #8]
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	2202      	movs	r2, #2
 8003558:	9200      	str	r2, [sp, #0]
 800355a:	2247      	movs	r2, #71	; 0x47
 800355c:	f7ff fe83 	bl	8003266 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8003560:	7b3b      	ldrb	r3, [r7, #12]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	b21a      	sxth	r2, r3
 8003566:	7b7b      	ldrb	r3, [r7, #13]
 8003568:	b21b      	sxth	r3, r3
 800356a:	4313      	orrs	r3, r2
 800356c:	b21a      	sxth	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	809a      	strh	r2, [r3, #4]
        /* Calculate gyroscope rotation rate along Z axis (yaw)  */
        gyroscopeValues->rotationRateYaw = ((float) gyroscopeValues->rawValueZ / scaleFactor) - gyroscopeCalibrationYaw;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800358c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <GY87_ReadGyroscope+0x160>)
 8003592:	edd3 7a00 	vldr	s15, [r3]
 8003596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	edc3 7a04 	vstr	s15, [r3, #16]
 80035a0:	e015      	b.n	80035ce <GY87_ReadGyroscope+0x14e>

    } else {

        /* Wrong parameters */
        gyroscopeValues->rawValueX = 0;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->rawValueY = 0;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2200      	movs	r2, #0
 80035ac:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->rawValueZ = 0;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2200      	movs	r2, #0
 80035b2:	809a      	strh	r2, [r3, #4]
        gyroscopeValues->rotationRateRoll = 0;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
        gyroscopeValues->rotationRatePitch = 0;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	60da      	str	r2, [r3, #12]
        gyroscopeValues->rotationRateYaw = 0;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	611a      	str	r2, [r3, #16]
    }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000bf8 	.word	0x20000bf8
 80035dc:	20000bfc 	.word	0x20000bfc
 80035e0:	20000c00 	.word	0x20000c00

080035e4 <GY87_CalibrateAccelerometer>:

bool_t GY87_CalibrateAccelerometer(GY87_HandleTypeDef_t * hgy87) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08e      	sub	sp, #56	; 0x38
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

    /* Declare structure to read the accelerometer values */
    GY87_accelerometerValues_t accelerometerValues;

    /* Declare variables to accumulate measurements */
    float linearAccelerationsX = 0;
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
    float linearAccelerationsY = 0;
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
    float linearAccelerationsZ = 0;
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check parameter and calculate calibration value */
    if (NULL != hgy87) {
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d048      	beq.n	8003696 <GY87_CalibrateAccelerometer+0xb2>

    	/* Calibrate gyroscope measurements */
    	for(int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8003604:	2300      	movs	r3, #0
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
 8003608:	e020      	b.n	800364c <GY87_CalibrateAccelerometer+0x68>

        	/* Read gyroscope values */
        	GY87_ReadAccelerometer(hgy87, &accelerometerValues);
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f851 	bl	80036b8 <GY87_ReadAccelerometer>

        	/* Accumulate measurements */
        	linearAccelerationsX += accelerometerValues.linearAccelerationX;
 8003616:	edd7 7a05 	vldr	s15, [r7, #20]
 800361a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800361e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003622:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        	linearAccelerationsY += accelerometerValues.linearAccelerationY;
 8003626:	edd7 7a06 	vldr	s15, [r7, #24]
 800362a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800362e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003632:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        	linearAccelerationsZ += accelerometerValues.linearAccelerationZ;
 8003636:	edd7 7a07 	vldr	s15, [r7, #28]
 800363a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800363e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003642:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    	for(int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	3301      	adds	r3, #1
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003652:	dbda      	blt.n	800360a <GY87_CalibrateAccelerometer+0x26>
    	}

    	accelerometerCalibrationX = linearAccelerationsX / GY87_CALIBRATION_ITERATIONS;
 8003654:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003658:	eddf 6a11 	vldr	s13, [pc, #68]	; 80036a0 <GY87_CalibrateAccelerometer+0xbc>
 800365c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <GY87_CalibrateAccelerometer+0xc0>)
 8003662:	edc3 7a00 	vstr	s15, [r3]
    	accelerometerCalibrationY = linearAccelerationsY / GY87_CALIBRATION_ITERATIONS;
 8003666:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800366a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80036a0 <GY87_CalibrateAccelerometer+0xbc>
 800366e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <GY87_CalibrateAccelerometer+0xc4>)
 8003674:	edc3 7a00 	vstr	s15, [r3]
    	accelerometerCalibrationZ = linearAccelerationsZ / GY87_CALIBRATION_ITERATIONS;
 8003678:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800367c:	eddf 6a08 	vldr	s13, [pc, #32]	; 80036a0 <GY87_CalibrateAccelerometer+0xbc>
 8003680:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003684:	4b09      	ldr	r3, [pc, #36]	; (80036ac <GY87_CalibrateAccelerometer+0xc8>)
 8003686:	edc3 7a00 	vstr	s15, [r3]

#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"Accelerometer calibration done.\r\n\n", LOG_INFORMATION);
 800368a:	2100      	movs	r1, #0
 800368c:	4808      	ldr	r0, [pc, #32]	; (80036b0 <GY87_CalibrateAccelerometer+0xcc>)
 800368e:	f000 fc41 	bl	8003f14 <LOG>
#endif

        return true;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <GY87_CalibrateAccelerometer+0xb4>

    } else {

    	return false;
 8003696:	2300      	movs	r3, #0
    }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3738      	adds	r7, #56	; 0x38
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	44fa0000 	.word	0x44fa0000
 80036a4:	20000c04 	.word	0x20000c04
 80036a8:	20000c08 	.word	0x20000c08
 80036ac:	20000c0c 	.word	0x20000c0c
 80036b0:	080140f0 	.word	0x080140f0
 80036b4:	00000000 	.word	0x00000000

080036b8 <GY87_ReadAccelerometer>:

void GY87_ReadAccelerometer(GY87_HandleTypeDef_t * hgy87, GY87_accelerometerValues_t * accelerometerValues) {
 80036b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036bc:	b08a      	sub	sp, #40	; 0x28
 80036be:	af02      	add	r7, sp, #8
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_FS_08;
 80036c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036c8:	83fb      	strh	r3, [r7, #30]

    float accX, accY, accZ;

    /* Check parameters */
    if (NULL != hgy87 && NULL != accelerometerValues) {
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8101 	beq.w	80038d4 <GY87_ReadAccelerometer+0x21c>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80fd 	beq.w	80038d4 <GY87_ReadAccelerometer+0x21c>

    	/* Read accelerometer raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6858      	ldr	r0, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	7a19      	ldrb	r1, [r3, #8]
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	2202      	movs	r2, #2
 80036e8:	9200      	str	r2, [sp, #0]
 80036ea:	223b      	movs	r2, #59	; 0x3b
 80036ec:	f7ff fdbb 	bl	8003266 <MPU6050_ReadRegister>
        accelerometerValues->rawValueX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 80036f0:	7b3b      	ldrb	r3, [r7, #12]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	b21a      	sxth	r2, r3
 80036f6:	7b7b      	ldrb	r3, [r7, #13]
 80036f8:	b21b      	sxth	r3, r3
 80036fa:	4313      	orrs	r3, r2
 80036fc:	b21a      	sxth	r2, r3
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	801a      	strh	r2, [r3, #0]
        /* Calculate accelerometer linear acceleration along X axis */
        accX = accelerometerValues->linearAccelerationX = ((float) accelerometerValues->rawValueX / scaleFactor) - accelerometerCalibrationX;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003710:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003714:	ee07 3a90 	vmov	s15, r3
 8003718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800371c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003720:	4b7d      	ldr	r3, [pc, #500]	; (8003918 <GY87_ReadAccelerometer+0x260>)
 8003722:	edd3 7a00 	vldr	s15, [r3]
 8003726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	61bb      	str	r3, [r7, #24]

        /* Read accelerometer raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6858      	ldr	r0, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7a19      	ldrb	r1, [r3, #8]
 800373e:	f107 030c 	add.w	r3, r7, #12
 8003742:	2202      	movs	r2, #2
 8003744:	9200      	str	r2, [sp, #0]
 8003746:	223d      	movs	r2, #61	; 0x3d
 8003748:	f7ff fd8d 	bl	8003266 <MPU6050_ReadRegister>
        accelerometerValues->rawValueY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 800374c:	7b3b      	ldrb	r3, [r7, #12]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	b21a      	sxth	r2, r3
 8003752:	7b7b      	ldrb	r3, [r7, #13]
 8003754:	b21b      	sxth	r3, r3
 8003756:	4313      	orrs	r3, r2
 8003758:	b21a      	sxth	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	805a      	strh	r2, [r3, #2]
        /* Calculate accelerometer linear acceleration along Y axis */
        accY = accelerometerValues->linearAccelerationY = ((float) accelerometerValues->rawValueY / scaleFactor) - accelerometerCalibrationY;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800376c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800377c:	4b67      	ldr	r3, [pc, #412]	; (800391c <GY87_ReadAccelerometer+0x264>)
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	edc3 7a03 	vstr	s15, [r3, #12]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	617b      	str	r3, [r7, #20]

        /* Read accelerometer raw value for Z axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6858      	ldr	r0, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7a19      	ldrb	r1, [r3, #8]
 800379a:	f107 030c 	add.w	r3, r7, #12
 800379e:	2202      	movs	r2, #2
 80037a0:	9200      	str	r2, [sp, #0]
 80037a2:	223f      	movs	r2, #63	; 0x3f
 80037a4:	f7ff fd5f 	bl	8003266 <MPU6050_ReadRegister>
        accelerometerValues->rawValueZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 80037a8:	7b3b      	ldrb	r3, [r7, #12]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	b21a      	sxth	r2, r3
 80037ae:	7b7b      	ldrb	r3, [r7, #13]
 80037b0:	b21b      	sxth	r3, r3
 80037b2:	4313      	orrs	r3, r2
 80037b4:	b21a      	sxth	r2, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	809a      	strh	r2, [r3, #4]
        /* Calculate accelerometer linear acceleration along Z axis */
        accZ = accelerometerValues->linearAccelerationZ = ((float) accelerometerValues->rawValueZ / scaleFactor);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037cc:	ee07 3a90 	vmov	s15, r3
 80037d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	edc3 7a04 	vstr	s15, [r3, #16]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	613b      	str	r3, [r7, #16]

        /* Calculate roll and pitch angles using an approximation with linear accelerations */
        accelerometerValues->angleRoll = atan(accY / sqrt(accX * accX + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 80037e4:	6978      	ldr	r0, [r7, #20]
 80037e6:	f7fc feb7 	bl	8000558 <__aeabi_f2d>
 80037ea:	4680      	mov	r8, r0
 80037ec:	4689      	mov	r9, r1
 80037ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80037f2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80037f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80037fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003802:	ee17 0a90 	vmov	r0, s15
 8003806:	f7fc fea7 	bl	8000558 <__aeabi_f2d>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	ec43 2b10 	vmov	d0, r2, r3
 8003812:	f00f f995 	bl	8012b40 <sqrt>
 8003816:	ec53 2b10 	vmov	r2, r3, d0
 800381a:	4640      	mov	r0, r8
 800381c:	4649      	mov	r1, r9
 800381e:	f7fd f81d 	bl	800085c <__aeabi_ddiv>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	ec43 2b17 	vmov	d7, r2, r3
 800382a:	eeb0 0a47 	vmov.f32	s0, s14
 800382e:	eef0 0a67 	vmov.f32	s1, s15
 8003832:	f00f f9b1 	bl	8012b98 <atan>
 8003836:	ec51 0b10 	vmov	r0, r1, d0
 800383a:	a335      	add	r3, pc, #212	; (adr r3, 8003910 <GY87_ReadAccelerometer+0x258>)
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f7fc fee2 	bl	8000608 <__aeabi_dmul>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	f7fd f9d4 	bl	8000bf8 <__aeabi_d2f>
 8003850:	4602      	mov	r2, r0
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	615a      	str	r2, [r3, #20]
        accelerometerValues->anglePitch = -atan(accX / sqrt(accY * accY + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 8003856:	69b8      	ldr	r0, [r7, #24]
 8003858:	f7fc fe7e 	bl	8000558 <__aeabi_f2d>
 800385c:	4680      	mov	r8, r0
 800385e:	4689      	mov	r9, r1
 8003860:	edd7 7a05 	vldr	s15, [r7, #20]
 8003864:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003868:	edd7 7a04 	vldr	s15, [r7, #16]
 800386c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003874:	ee17 0a90 	vmov	r0, s15
 8003878:	f7fc fe6e 	bl	8000558 <__aeabi_f2d>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	ec43 2b10 	vmov	d0, r2, r3
 8003884:	f00f f95c 	bl	8012b40 <sqrt>
 8003888:	ec53 2b10 	vmov	r2, r3, d0
 800388c:	4640      	mov	r0, r8
 800388e:	4649      	mov	r1, r9
 8003890:	f7fc ffe4 	bl	800085c <__aeabi_ddiv>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	ec43 2b17 	vmov	d7, r2, r3
 800389c:	eeb0 0a47 	vmov.f32	s0, s14
 80038a0:	eef0 0a67 	vmov.f32	s1, s15
 80038a4:	f00f f978 	bl	8012b98 <atan>
 80038a8:	ec53 2b10 	vmov	r2, r3, d0
 80038ac:	4614      	mov	r4, r2
 80038ae:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80038b2:	a317      	add	r3, pc, #92	; (adr r3, 8003910 <GY87_ReadAccelerometer+0x258>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	4620      	mov	r0, r4
 80038ba:	4629      	mov	r1, r5
 80038bc:	f7fc fea4 	bl	8000608 <__aeabi_dmul>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	f7fd f996 	bl	8000bf8 <__aeabi_d2f>
 80038cc:	4602      	mov	r2, r0
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	619a      	str	r2, [r3, #24]
 80038d2:	e015      	b.n	8003900 <GY87_ReadAccelerometer+0x248>

    } else {
        /* Wrong parameters */
        accelerometerValues->rawValueX = 0;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2200      	movs	r2, #0
 80038d8:	801a      	strh	r2, [r3, #0]
        accelerometerValues->rawValueY = 0;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	805a      	strh	r2, [r3, #2]
        accelerometerValues->rawValueZ = 0;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	809a      	strh	r2, [r3, #4]
        accelerometerValues->linearAccelerationX = 0;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
        accelerometerValues->linearAccelerationY = 0;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
        accelerometerValues->linearAccelerationZ = 0;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	611a      	str	r2, [r3, #16]
    }
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800390a:	bf00      	nop
 800390c:	f3af 8000 	nop.w
 8003910:	1a63c1f8 	.word	0x1a63c1f8
 8003914:	404ca5dc 	.word	0x404ca5dc
 8003918:	20000c04 	.word	0x20000c04
 800391c:	20000c08 	.word	0x20000c08

08003920 <GY87_ReadTemperatureSensor>:

int16_t GY87_ReadTemperatureSensor(GY87_HandleTypeDef_t * hgy87) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 8003928:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800392c:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 800392e:	2324      	movs	r3, #36	; 0x24
 8003930:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hgy87) {
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <GY87_ReadTemperatureSensor+0x1c>
        return 0;
 8003938:	2300      	movs	r3, #0
 800393a:	e01b      	b.n	8003974 <GY87_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6858      	ldr	r0, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7a19      	ldrb	r1, [r3, #8]
 8003944:	f107 0308 	add.w	r3, r7, #8
 8003948:	2202      	movs	r2, #2
 800394a:	9200      	str	r2, [sp, #0]
 800394c:	2241      	movs	r2, #65	; 0x41
 800394e:	f7ff fc8a 	bl	8003266 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 8003952:	7a3b      	ldrb	r3, [r7, #8]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	b21a      	sxth	r2, r3
 8003958:	7a7b      	ldrb	r3, [r7, #9]
 800395a:	b21b      	sxth	r3, r3
 800395c:	4313      	orrs	r3, r2
 800395e:	b21b      	sxth	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003966:	fb92 f3f3 	sdiv	r3, r2, r3
 800396a:	b29a      	uxth	r2, r3
 800396c:	89bb      	ldrh	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	b29b      	uxth	r3, r3
 8003972:	b21b      	sxth	r3, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <GY87_ReadMagnetometer>:

void GY87_ReadMagnetometer(GY87_HandleTypeDef_t * hgy87, GY87_magnetometerValues_t * magnetometerValues) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 4096;
 8003986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800398a:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != magnetometerValues) {
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d075      	beq.n	8003a7e <GY87_ReadMagnetometer+0x102>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d072      	beq.n	8003a7e <GY87_ReadMagnetometer+0x102>

    	/* Read magnetometer raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6858      	ldr	r0, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7a19      	ldrb	r1, [r3, #8]
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	2202      	movs	r2, #2
 80039a6:	9200      	str	r2, [sp, #0]
 80039a8:	2249      	movs	r2, #73	; 0x49
 80039aa:	f7ff fc5c 	bl	8003266 <MPU6050_ReadRegister>
        magnetometerValues->rawValueX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 80039ae:	7b7b      	ldrb	r3, [r7, #13]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	b21a      	sxth	r2, r3
 80039b4:	7b3b      	ldrb	r3, [r7, #12]
 80039b6:	b21b      	sxth	r3, r3
 80039b8:	4313      	orrs	r3, r2
 80039ba:	b21a      	sxth	r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	801a      	strh	r2, [r3, #0]
        /* Calculate magnetometer magnetic field along X axis */
        magnetometerValues->magneticFieldX = ((float) magnetometerValues->rawValueX / scaleFactor);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Read magnetometer raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6858      	ldr	r0, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7a19      	ldrb	r1, [r3, #8]
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	2202      	movs	r2, #2
 80039f2:	9200      	str	r2, [sp, #0]
 80039f4:	224b      	movs	r2, #75	; 0x4b
 80039f6:	f7ff fc36 	bl	8003266 <MPU6050_ReadRegister>
        magnetometerValues->rawValueY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 80039fa:	7b7b      	ldrb	r3, [r7, #13]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	b21a      	sxth	r2, r3
 8003a00:	7b3b      	ldrb	r3, [r7, #12]
 8003a02:	b21b      	sxth	r3, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	b21a      	sxth	r2, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	805a      	strh	r2, [r3, #2]
        /* Calculate magnetometer magnetic field along Y axis */
        magnetometerValues->magneticFieldY = ((float) magnetometerValues->rawValueY / scaleFactor);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	edc3 7a03 	vstr	s15, [r3, #12]

        /* Read magnetometer raw value for Z axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6858      	ldr	r0, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7a19      	ldrb	r1, [r3, #8]
 8003a38:	f107 030c 	add.w	r3, r7, #12
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	9200      	str	r2, [sp, #0]
 8003a40:	224d      	movs	r2, #77	; 0x4d
 8003a42:	f7ff fc10 	bl	8003266 <MPU6050_ReadRegister>
        magnetometerValues->rawValueZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 8003a46:	7b7b      	ldrb	r3, [r7, #13]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	b21a      	sxth	r2, r3
 8003a4c:	7b3b      	ldrb	r3, [r7, #12]
 8003a4e:	b21b      	sxth	r3, r3
 8003a50:	4313      	orrs	r3, r2
 8003a52:	b21a      	sxth	r2, r3
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	809a      	strh	r2, [r3, #4]
        /* Calculate magnetometer magnetic field along Z axis */
        magnetometerValues->magneticFieldZ = ((float) magnetometerValues->rawValueZ / scaleFactor);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	edc3 7a04 	vstr	s15, [r3, #16]
 8003a7c:	e00c      	b.n	8003a98 <GY87_ReadMagnetometer+0x11c>

    } else {
        /* Wrong parameters */
        magnetometerValues->magneticFieldX = 0;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
        magnetometerValues->magneticFieldY = 0;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	60da      	str	r2, [r3, #12]
        magnetometerValues->magneticFieldZ = 0;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
    }
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <GY87_ReadMagnetometerHeading>:

float GY87_ReadMagnetometerHeading(GY87_HandleTypeDef_t * hgy87) {
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

    /* Declare variable for compass heading */
    float heading;

    /* Check parameter and calculate heading */
    if (NULL != hgy87) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d053      	beq.n	8003b56 <GY87_ReadMagnetometerHeading+0xb6>

        GY87_ReadMagnetometer(hgy87, &magnetometerValues);
 8003aae:	f107 0308 	add.w	r3, r7, #8
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff ff61 	bl	800397c <GY87_ReadMagnetometer>

        /* Calculate heading */
        heading = atan2(-magnetometerValues.magneticFieldY, -magnetometerValues.magneticFieldX) * RADIANS_TO_DEGREES_CONST + QMC5883L_MAGNETIC_DECLINATION + QMC5883L_CALIBRATION_OFFSET;
 8003aba:	edd7 7a05 	vldr	s15, [r7, #20]
 8003abe:	eef1 7a67 	vneg.f32	s15, s15
 8003ac2:	ee17 3a90 	vmov	r3, s15
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fc fd46 	bl	8000558 <__aeabi_f2d>
 8003acc:	4604      	mov	r4, r0
 8003ace:	460d      	mov	r5, r1
 8003ad0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ad4:	eef1 7a67 	vneg.f32	s15, s15
 8003ad8:	ee17 3a90 	vmov	r3, s15
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fd3b 	bl	8000558 <__aeabi_f2d>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	ec43 2b11 	vmov	d1, r2, r3
 8003aea:	ec45 4b10 	vmov	d0, r4, r5
 8003aee:	f00e ffb5 	bl	8012a5c <atan2>
 8003af2:	ec51 0b10 	vmov	r0, r1, d0
 8003af6:	a321      	add	r3, pc, #132	; (adr r3, 8003b7c <GY87_ReadMagnetometerHeading+0xdc>)
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f7fc fd84 	bl	8000608 <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	f7fc fbc4 	bl	800029c <__adddf3>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <GY87_ReadMagnetometerHeading+0xd0>)
 8003b22:	f7fc fbbb 	bl	800029c <__adddf3>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f7fd f863 	bl	8000bf8 <__aeabi_d2f>
 8003b32:	4603      	mov	r3, r0
 8003b34:	61fb      	str	r3, [r7, #28]

        /* Check if heading is within 0 and 360 degrees */
        if (heading < 0) {
 8003b36:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b42:	d50a      	bpl.n	8003b5a <GY87_ReadMagnetometerHeading+0xba>
            heading += 360;
 8003b44:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b48:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003b74 <GY87_ReadMagnetometerHeading+0xd4>
 8003b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b50:	edc7 7a07 	vstr	s15, [r7, #28]
 8003b54:	e001      	b.n	8003b5a <GY87_ReadMagnetometerHeading+0xba>
        }

    } else {

        heading = -1;
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <GY87_ReadMagnetometerHeading+0xd8>)
 8003b58:	61fb      	str	r3, [r7, #28]
    }

    return heading;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	ee07 3a90 	vmov	s15, r3
}
 8003b60:	eeb0 0a67 	vmov.f32	s0, s15
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bdb0      	pop	{r4, r5, r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	f3af 8000 	nop.w
 8003b70:	403a0000 	.word	0x403a0000
 8003b74:	43b40000 	.word	0x43b40000
 8003b78:	bf800000 	.word	0xbf800000
 8003b7c:	1a63c1f8 	.word	0x1a63c1f8
 8003b80:	404ca5dc 	.word	0x404ca5dc

08003b84 <GY87_ReadBarometerPressure>:

float GY87_ReadBarometerPressure(GY87_HandleTypeDef_t * hgy87) {
 8003b84:	b5b0      	push	{r4, r5, r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
    uint32_t B7;

    int32_t UP;

    /* Calculate pressure */
    UP = GY87_BMP180_ReadUncompensatedPressure(hgy87);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff fb4d 	bl	800322c <GY87_BMP180_ReadUncompensatedPressure>
 8003b92:	4603      	mov	r3, r0
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28

    B6 = BMP180_CalibrationData.B5 - 4000;
 8003b96:	4ba8      	ldr	r3, [pc, #672]	; (8003e38 <GY87_ReadBarometerPressure+0x2b4>)
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
    X1 = (BMP180_CalibrationData.B2 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 11));
 8003ba0:	4ba5      	ldr	r3, [pc, #660]	; (8003e38 <GY87_ReadBarometerPressure+0x2b4>)
 8003ba2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fc fcc4 	bl	8000534 <__aeabi_i2d>
 8003bac:	4604      	mov	r4, r0
 8003bae:	460d      	mov	r5, r1
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	fb03 f303 	mul.w	r3, r3, r3
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fcbc 	bl	8000534 <__aeabi_i2d>
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	4b9e      	ldr	r3, [pc, #632]	; (8003e3c <GY87_ReadBarometerPressure+0x2b8>)
 8003bc2:	f7fc fe4b 	bl	800085c <__aeabi_ddiv>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4629      	mov	r1, r5
 8003bce:	f7fc fd1b 	bl	8000608 <__aeabi_dmul>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	4b98      	ldr	r3, [pc, #608]	; (8003e40 <GY87_ReadBarometerPressure+0x2bc>)
 8003be0:	f7fc fe3c 	bl	800085c <__aeabi_ddiv>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	f7fc ffbc 	bl	8000b68 <__aeabi_d2iz>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	623b      	str	r3, [r7, #32]
    X2 = BMP180_CalibrationData.AC2 * B6 / (pow(2, 11));
 8003bf4:	4b90      	ldr	r3, [pc, #576]	; (8003e38 <GY87_ReadBarometerPressure+0x2b4>)
 8003bf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fc96 	bl	8000534 <__aeabi_i2d>
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	4b8c      	ldr	r3, [pc, #560]	; (8003e40 <GY87_ReadBarometerPressure+0x2bc>)
 8003c0e:	f7fc fe25 	bl	800085c <__aeabi_ddiv>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f7fc ffa5 	bl	8000b68 <__aeabi_d2iz>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	61fb      	str	r3, [r7, #28]
    X3 = X1 + X2;
 8003c22:	6a3a      	ldr	r2, [r7, #32]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
    B3 = (((BMP180_CalibrationData.AC1 * 4 + X3) << BMP180_OVERSAMPLING) + 2) / 4;
 8003c2a:	4b83      	ldr	r3, [pc, #524]	; (8003e38 <GY87_ReadBarometerPressure+0x2b4>)
 8003c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c30:	009a      	lsls	r2, r3, #2
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	3302      	adds	r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	da00      	bge.n	8003c40 <GY87_ReadBarometerPressure+0xbc>
 8003c3e:	3303      	adds	r3, #3
 8003c40:	109b      	asrs	r3, r3, #2
 8003c42:	617b      	str	r3, [r7, #20]
    X1 = BMP180_CalibrationData.AC3 * B6 / pow(2, 13);
 8003c44:	4b7c      	ldr	r3, [pc, #496]	; (8003e38 <GY87_ReadBarometerPressure+0x2b4>)
 8003c46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fc fc6e 	bl	8000534 <__aeabi_i2d>
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	4b79      	ldr	r3, [pc, #484]	; (8003e44 <GY87_ReadBarometerPressure+0x2c0>)
 8003c5e:	f7fc fdfd 	bl	800085c <__aeabi_ddiv>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f7fc ff7d 	bl	8000b68 <__aeabi_d2iz>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	623b      	str	r3, [r7, #32]
    X2 = (BMP180_CalibrationData.B1 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 16));
 8003c72:	4b71      	ldr	r3, [pc, #452]	; (8003e38 <GY87_ReadBarometerPressure+0x2b4>)
 8003c74:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc5b 	bl	8000534 <__aeabi_i2d>
 8003c7e:	4604      	mov	r4, r0
 8003c80:	460d      	mov	r5, r1
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	fb03 f303 	mul.w	r3, r3, r3
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fc53 	bl	8000534 <__aeabi_i2d>
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	4b6a      	ldr	r3, [pc, #424]	; (8003e3c <GY87_ReadBarometerPressure+0x2b8>)
 8003c94:	f7fc fde2 	bl	800085c <__aeabi_ddiv>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	f7fc fcb2 	bl	8000608 <__aeabi_dmul>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	4b65      	ldr	r3, [pc, #404]	; (8003e48 <GY87_ReadBarometerPressure+0x2c4>)
 8003cb2:	f7fc fdd3 	bl	800085c <__aeabi_ddiv>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f7fc ff53 	bl	8000b68 <__aeabi_d2iz>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	61fb      	str	r3, [r7, #28]
    X3 = ((X1 + X2) + 2) / pow(2, 2);
 8003cc6:	6a3a      	ldr	r2, [r7, #32]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc fc30 	bl	8000534 <__aeabi_i2d>
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	4b5c      	ldr	r3, [pc, #368]	; (8003e4c <GY87_ReadBarometerPressure+0x2c8>)
 8003cda:	f7fc fdbf 	bl	800085c <__aeabi_ddiv>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f7fc ff3f 	bl	8000b68 <__aeabi_d2iz>
 8003cea:	4603      	mov	r3, r0
 8003cec:	61bb      	str	r3, [r7, #24]
    B4 = BMP180_CalibrationData.AC4 * (unsigned long)(X3 + 32768) / (pow(2, 15));
 8003cee:	4b52      	ldr	r3, [pc, #328]	; (8003e38 <GY87_ReadBarometerPressure+0x2b4>)
 8003cf0:	88db      	ldrh	r3, [r3, #6]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fc08 	bl	8000514 <__aeabi_ui2d>
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	4b51      	ldr	r3, [pc, #324]	; (8003e50 <GY87_ReadBarometerPressure+0x2cc>)
 8003d0a:	f7fc fda7 	bl	800085c <__aeabi_ddiv>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	f7fc ff4f 	bl	8000bb8 <__aeabi_d2uiz>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	613b      	str	r3, [r7, #16]
    B7 = ((unsigned long)UP - B3) * (50000 >> BMP180_OVERSAMPLING);
 8003d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	60fb      	str	r3, [r7, #12]

    if (B7 < 0x80000000) {
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	db06      	blt.n	8003d42 <GY87_ReadBarometerPressure+0x1be>
        pressure = (B7 * 2) / B4;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	005a      	lsls	r2, r3, #1
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d40:	e005      	b.n	8003d4e <GY87_ReadBarometerPressure+0x1ca>
    } else {
        pressure = (B7 / B4) * 2;
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    X1 = (pressure / (pow(2, 8))) * (pressure / (pow(2, 8)));
 8003d4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d50:	f7fc fbf0 	bl	8000534 <__aeabi_i2d>
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	4b3e      	ldr	r3, [pc, #248]	; (8003e54 <GY87_ReadBarometerPressure+0x2d0>)
 8003d5a:	f7fc fd7f 	bl	800085c <__aeabi_ddiv>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4614      	mov	r4, r2
 8003d64:	461d      	mov	r5, r3
 8003d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d68:	f7fc fbe4 	bl	8000534 <__aeabi_i2d>
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	4b38      	ldr	r3, [pc, #224]	; (8003e54 <GY87_ReadBarometerPressure+0x2d0>)
 8003d72:	f7fc fd73 	bl	800085c <__aeabi_ddiv>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	f7fc fc43 	bl	8000608 <__aeabi_dmul>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f7fc feed 	bl	8000b68 <__aeabi_d2iz>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	623b      	str	r3, [r7, #32]
    X1 = (X1 * 3038) / (pow(2, 16));
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	f640 32de 	movw	r2, #3038	; 0xbde
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fbc9 	bl	8000534 <__aeabi_i2d>
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <GY87_ReadBarometerPressure+0x2c4>)
 8003da8:	f7fc fd58 	bl	800085c <__aeabi_ddiv>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	f7fc fed8 	bl	8000b68 <__aeabi_d2iz>
 8003db8:	4603      	mov	r3, r0
 8003dba:	623b      	str	r3, [r7, #32]
    X2 = (-7357 * pressure) / (pow(2, 16));
 8003dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <GY87_ReadBarometerPressure+0x2d4>)
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fbb5 	bl	8000534 <__aeabi_i2d>
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <GY87_ReadBarometerPressure+0x2c4>)
 8003dd0:	f7fc fd44 	bl	800085c <__aeabi_ddiv>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f7fc fec4 	bl	8000b68 <__aeabi_d2iz>
 8003de0:	4603      	mov	r3, r0
 8003de2:	61fb      	str	r3, [r7, #28]

    pressure = pressure + (X1 + X2 + 3791) / (pow(2, 4));
 8003de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003de6:	f7fc fba5 	bl	8000534 <__aeabi_i2d>
 8003dea:	4604      	mov	r4, r0
 8003dec:	460d      	mov	r5, r1
 8003dee:	6a3a      	ldr	r2, [r7, #32]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc fb9b 	bl	8000534 <__aeabi_i2d>
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <GY87_ReadBarometerPressure+0x2d8>)
 8003e04:	f7fc fd2a 	bl	800085c <__aeabi_ddiv>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	4629      	mov	r1, r5
 8003e10:	f7fc fa44 	bl	800029c <__adddf3>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f7fc fea4 	bl	8000b68 <__aeabi_d2iz>
 8003e20:	4603      	mov	r3, r0
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c

    return pressure;
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8003e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e32:	3730      	adds	r7, #48	; 0x30
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bdb0      	pop	{r4, r5, r7, pc}
 8003e38:	20000bd4 	.word	0x20000bd4
 8003e3c:	40b00000 	.word	0x40b00000
 8003e40:	40a00000 	.word	0x40a00000
 8003e44:	40c00000 	.word	0x40c00000
 8003e48:	40f00000 	.word	0x40f00000
 8003e4c:	40100000 	.word	0x40100000
 8003e50:	40e00000 	.word	0x40e00000
 8003e54:	40700000 	.word	0x40700000
 8003e58:	ffffe343 	.word	0xffffe343
 8003e5c:	40300000 	.word	0x40300000

08003e60 <GY87_ReadBarometerAltitude>:

float GY87_ReadBarometerAltitude(GY87_HandleTypeDef_t * hgy87) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

    float pressure;
    float altitude;

    pressure = GY87_ReadBarometerPressure(hgy87);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff fe8b 	bl	8003b84 <GY87_ReadBarometerPressure>
 8003e6e:	ed87 0a03 	vstr	s0, [r7, #12]

    altitude = 44330 * (1 - (pow(((float)pressure / (float)BMP180_ATMOSFERIC_PRESSURE), 0.19029495718)));
 8003e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e76:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003ee8 <GY87_ReadBarometerAltitude+0x88>
 8003e7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e7e:	ee16 0a90 	vmov	r0, s13
 8003e82:	f7fc fb69 	bl	8000558 <__aeabi_f2d>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8003ed8 <GY87_ReadBarometerAltitude+0x78>
 8003e8e:	ec43 2b10 	vmov	d0, r2, r3
 8003e92:	f00e fde5 	bl	8012a60 <pow>
 8003e96:	ec53 2b10 	vmov	r2, r3, d0
 8003e9a:	f04f 0000 	mov.w	r0, #0
 8003e9e:	4913      	ldr	r1, [pc, #76]	; (8003eec <GY87_ReadBarometerAltitude+0x8c>)
 8003ea0:	f7fc f9fa 	bl	8000298 <__aeabi_dsub>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	a30c      	add	r3, pc, #48	; (adr r3, 8003ee0 <GY87_ReadBarometerAltitude+0x80>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f7fc fba9 	bl	8000608 <__aeabi_dmul>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f7fc fe9b 	bl	8000bf8 <__aeabi_d2f>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	60bb      	str	r3, [r7, #8]

    return altitude;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	ee07 3a90 	vmov	s15, r3
}
 8003ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	ccd745e4 	.word	0xccd745e4
 8003edc:	3fc85b95 	.word	0x3fc85b95
 8003ee0:	00000000 	.word	0x00000000
 8003ee4:	40e5a540 	.word	0x40e5a540
 8003ee8:	47c5e680 	.word	0x47c5e680
 8003eec:	3ff00000 	.word	0x3ff00000

08003ef0 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

    /* BEGIN MODIFY 1 */
    CDC_Transmit_FS(string, strlen((const char *)string));
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fc f9c1 	bl	8000280 <strlen>
 8003efe:	4603      	mov	r3, r0
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f00b fad1 	bl	800f4ac <CDC_Transmit_FS>
    /* END MODIFY 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b0c2      	sub	sp, #264	; 0x108
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f22:	6018      	str	r0, [r3, #0]
 8003f24:	460a      	mov	r2, r1
 8003f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f2a:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8003f2e:	701a      	strb	r2, [r3, #0]

    /* Check parameters */
    if (NULL == message) {
 8003f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <LOG+0x2e>
        return false;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e063      	b.n	800400a <LOG+0xf6>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 8003f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f46:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d901      	bls.n	8003f54 <LOG+0x40>
        return false;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e05a      	b.n	800400a <LOG+0xf6>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8003f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	3304      	adds	r3, #4
 8003f62:	22fc      	movs	r2, #252	; 0xfc
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f00c fd27 	bl	80109ba <memset>

    if (LOG_INFORMATION == logType) {
 8003f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f70:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d108      	bne.n	8003f8c <LOG+0x78>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 8003f7a:	4b26      	ldr	r3, [pc, #152]	; (8004014 <LOG+0x100>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	f107 0308 	add.w	r3, r7, #8
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f00c fd20 	bl	80109ca <strcat>
 8003f8a:	e02e      	b.n	8003fea <LOG+0xd6>
    } else if (LOG_DEBUGGING == logType) {
 8003f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f90:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d108      	bne.n	8003fac <LOG+0x98>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <LOG+0x104>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	f107 0308 	add.w	r3, r7, #8
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f00c fd10 	bl	80109ca <strcat>
 8003faa:	e01e      	b.n	8003fea <LOG+0xd6>
    } else if (LOG_WARNING == logType) {
 8003fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fb0:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d108      	bne.n	8003fcc <LOG+0xb8>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 8003fba:	4b18      	ldr	r3, [pc, #96]	; (800401c <LOG+0x108>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f00c fd00 	bl	80109ca <strcat>
 8003fca:	e00e      	b.n	8003fea <LOG+0xd6>
    } else if (LOG_ERROR == logType) {
 8003fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fd0:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d107      	bne.n	8003fea <LOG+0xd6>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <LOG+0x10c>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	f107 0308 	add.w	r3, r7, #8
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f00c fcf0 	bl	80109ca <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8003fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ff2:	f107 0208 	add.w	r2, r7, #8
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f00c fce6 	bl	80109ca <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ff74 	bl	8003ef0 <USB_Write>

    return true;
 8004008:	2301      	movs	r3, #1
}
 800400a:	4618      	mov	r0, r3
 800400c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000014 	.word	0x20000014
 8004018:	20000018 	.word	0x20000018
 800401c:	2000001c 	.word	0x2000001c
 8004020:	20000020 	.word	0x20000020

08004024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <HAL_Init+0x40>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <HAL_Init+0x40>)
 800402e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_Init+0x40>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <HAL_Init+0x40>)
 800403a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800403e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <HAL_Init+0x40>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a07      	ldr	r2, [pc, #28]	; (8004064 <HAL_Init+0x40>)
 8004046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800404c:	2003      	movs	r0, #3
 800404e:	f000 fd13 	bl	8004a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004052:	200f      	movs	r0, #15
 8004054:	f000 f808 	bl	8004068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004058:	f7fd ff06 	bl	8001e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40023c00 	.word	0x40023c00

08004068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_InitTick+0x54>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <HAL_InitTick+0x58>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4619      	mov	r1, r3
 800407a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800407e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fd2f 	bl	8004aea <HAL_SYSTICK_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e00e      	b.n	80040b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b0f      	cmp	r3, #15
 800409a:	d80a      	bhi.n	80040b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800409c:	2200      	movs	r2, #0
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a4:	f000 fcf3 	bl	8004a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040a8:	4a06      	ldr	r2, [pc, #24]	; (80040c4 <HAL_InitTick+0x5c>)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e000      	b.n	80040b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000000 	.word	0x20000000
 80040c0:	20000028 	.word	0x20000028
 80040c4:	20000024 	.word	0x20000024

080040c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_IncTick+0x20>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_IncTick+0x24>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4413      	add	r3, r2
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <HAL_IncTick+0x24>)
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000028 	.word	0x20000028
 80040ec:	20000c10 	.word	0x20000c10

080040f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return uwTick;
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <HAL_GetTick+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000c10 	.word	0x20000c10

08004108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004110:	f7ff ffee 	bl	80040f0 <HAL_GetTick>
 8004114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004120:	d005      	beq.n	800412e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_Delay+0x44>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800412e:	bf00      	nop
 8004130:	f7ff ffde 	bl	80040f0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	429a      	cmp	r2, r3
 800413e:	d8f7      	bhi.n	8004130 <HAL_Delay+0x28>
  {
  }
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000028 	.word	0x20000028

08004150 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e033      	b.n	80041ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fea6 	bl	8001ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	d118      	bne.n	80041c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004196:	f023 0302 	bic.w	r3, r3, #2
 800419a:	f043 0202 	orr.w	r2, r3, #2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fa86 	bl	80046b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
 80041be:	e001      	b.n	80041c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_ADC_Start+0x1a>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e097      	b.n	8004322 <HAL_ADC_Start+0x14a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d018      	beq.n	800423a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004218:	4b45      	ldr	r3, [pc, #276]	; (8004330 <HAL_ADC_Start+0x158>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a45      	ldr	r2, [pc, #276]	; (8004334 <HAL_ADC_Start+0x15c>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	0c9a      	lsrs	r2, r3, #18
 8004224:	4613      	mov	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800422c:	e002      	b.n	8004234 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	3b01      	subs	r3, #1
 8004232:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f9      	bne.n	800422e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d15f      	bne.n	8004308 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004272:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004286:	d106      	bne.n	8004296 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	f023 0206 	bic.w	r2, r3, #6
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
 8004294:	e002      	b.n	800429c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042a4:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_ADC_Start+0x160>)
 80042a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80042b0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10f      	bne.n	80042de <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d129      	bne.n	8004320 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	e020      	b.n	8004320 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a16      	ldr	r2, [pc, #88]	; (800433c <HAL_ADC_Start+0x164>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d11b      	bne.n	8004320 <HAL_ADC_Start+0x148>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d114      	bne.n	8004320 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004304:	609a      	str	r2, [r3, #8]
 8004306:	e00b      	b.n	8004320 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f043 0210 	orr.w	r2, r3, #16
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	f043 0201 	orr.w	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000000 	.word	0x20000000
 8004334:	431bde83 	.word	0x431bde83
 8004338:	40012300 	.word	0x40012300
 800433c:	40012000 	.word	0x40012000

08004340 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435c:	d113      	bne.n	8004386 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436c:	d10b      	bne.n	8004386 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e063      	b.n	800444e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004386:	f7ff feb3 	bl	80040f0 <HAL_GetTick>
 800438a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800438c:	e021      	b.n	80043d2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004394:	d01d      	beq.n	80043d2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HAL_ADC_PollForConversion+0x6c>
 800439c:	f7ff fea8 	bl	80040f0 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d212      	bcs.n	80043d2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d00b      	beq.n	80043d2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f043 0204 	orr.w	r2, r3, #4
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e03d      	b.n	800444e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d1d6      	bne.n	800438e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0212 	mvn.w	r2, #18
 80043e8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d123      	bne.n	800444c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004408:	2b00      	cmp	r3, #0
 800440a:	d11f      	bne.n	800444c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004424:	2b00      	cmp	r3, #0
 8004426:	d111      	bne.n	800444c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_ADC_ConfigChannel+0x1c>
 8004488:	2302      	movs	r3, #2
 800448a:	e105      	b.n	8004698 <HAL_ADC_ConfigChannel+0x228>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b09      	cmp	r3, #9
 800449a:	d925      	bls.n	80044e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68d9      	ldr	r1, [r3, #12]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	4613      	mov	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	4413      	add	r3, r2
 80044b0:	3b1e      	subs	r3, #30
 80044b2:	2207      	movs	r2, #7
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43da      	mvns	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	400a      	ands	r2, r1
 80044c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68d9      	ldr	r1, [r3, #12]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	4618      	mov	r0, r3
 80044d4:	4603      	mov	r3, r0
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4403      	add	r3, r0
 80044da:	3b1e      	subs	r3, #30
 80044dc:	409a      	lsls	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	e022      	b.n	800452e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6919      	ldr	r1, [r3, #16]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	2207      	movs	r2, #7
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43da      	mvns	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	400a      	ands	r2, r1
 800450a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6919      	ldr	r1, [r3, #16]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	4618      	mov	r0, r3
 800451e:	4603      	mov	r3, r0
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4403      	add	r3, r0
 8004524:	409a      	lsls	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b06      	cmp	r3, #6
 8004534:	d824      	bhi.n	8004580 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	3b05      	subs	r3, #5
 8004548:	221f      	movs	r2, #31
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43da      	mvns	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	400a      	ands	r2, r1
 8004556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	4618      	mov	r0, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	3b05      	subs	r3, #5
 8004572:	fa00 f203 	lsl.w	r2, r0, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	635a      	str	r2, [r3, #52]	; 0x34
 800457e:	e04c      	b.n	800461a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b0c      	cmp	r3, #12
 8004586:	d824      	bhi.n	80045d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	3b23      	subs	r3, #35	; 0x23
 800459a:	221f      	movs	r2, #31
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43da      	mvns	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	400a      	ands	r2, r1
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	4618      	mov	r0, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	3b23      	subs	r3, #35	; 0x23
 80045c4:	fa00 f203 	lsl.w	r2, r0, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
 80045d0:	e023      	b.n	800461a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	3b41      	subs	r3, #65	; 0x41
 80045e4:	221f      	movs	r2, #31
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43da      	mvns	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	400a      	ands	r2, r1
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	4618      	mov	r0, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	3b41      	subs	r3, #65	; 0x41
 800460e:	fa00 f203 	lsl.w	r2, r0, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800461a:	4b22      	ldr	r3, [pc, #136]	; (80046a4 <HAL_ADC_ConfigChannel+0x234>)
 800461c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a21      	ldr	r2, [pc, #132]	; (80046a8 <HAL_ADC_ConfigChannel+0x238>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d109      	bne.n	800463c <HAL_ADC_ConfigChannel+0x1cc>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b12      	cmp	r3, #18
 800462e:	d105      	bne.n	800463c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <HAL_ADC_ConfigChannel+0x238>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d123      	bne.n	800468e <HAL_ADC_ConfigChannel+0x21e>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b10      	cmp	r3, #16
 800464c:	d003      	beq.n	8004656 <HAL_ADC_ConfigChannel+0x1e6>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b11      	cmp	r3, #17
 8004654:	d11b      	bne.n	800468e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	605a      	str	r2, [r3, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b10      	cmp	r3, #16
 8004668:	d111      	bne.n	800468e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <HAL_ADC_ConfigChannel+0x23c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <HAL_ADC_ConfigChannel+0x240>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	0c9a      	lsrs	r2, r3, #18
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004680:	e002      	b.n	8004688 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	3b01      	subs	r3, #1
 8004686:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f9      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	40012300 	.word	0x40012300
 80046a8:	40012000 	.word	0x40012000
 80046ac:	20000000 	.word	0x20000000
 80046b0:	431bde83 	.word	0x431bde83

080046b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046bc:	4b79      	ldr	r3, [pc, #484]	; (80048a4 <ADC_Init+0x1f0>)
 80046be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6859      	ldr	r1, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	021a      	lsls	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800470c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800472e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6899      	ldr	r1, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	4a58      	ldr	r2, [pc, #352]	; (80048a8 <ADC_Init+0x1f4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d022      	beq.n	8004792 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800475a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6899      	ldr	r1, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800477c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6899      	ldr	r1, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	e00f      	b.n	80047b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0202 	bic.w	r2, r2, #2
 80047c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6899      	ldr	r1, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	7e1b      	ldrb	r3, [r3, #24]
 80047cc:	005a      	lsls	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01b      	beq.n	8004818 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80047fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	3b01      	subs	r3, #1
 800480c:	035a      	lsls	r2, r3, #13
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	e007      	b.n	8004828 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004826:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	3b01      	subs	r3, #1
 8004844:	051a      	lsls	r2, r3, #20
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800485c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6899      	ldr	r1, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800486a:	025a      	lsls	r2, r3, #9
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6899      	ldr	r1, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	029a      	lsls	r2, r3, #10
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
}
 8004898:	bf00      	nop
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40012300 	.word	0x40012300
 80048a8:	0f000001 	.word	0x0f000001

080048ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <__NVIC_SetPriorityGrouping+0x44>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048c8:	4013      	ands	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048de:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <__NVIC_SetPriorityGrouping+0x44>)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	60d3      	str	r3, [r2, #12]
}
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <__NVIC_GetPriorityGrouping+0x18>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	f003 0307 	and.w	r3, r3, #7
}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491e:	2b00      	cmp	r3, #0
 8004920:	db0b      	blt.n	800493a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	f003 021f 	and.w	r2, r3, #31
 8004928:	4907      	ldr	r1, [pc, #28]	; (8004948 <__NVIC_EnableIRQ+0x38>)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2001      	movs	r0, #1
 8004932:	fa00 f202 	lsl.w	r2, r0, r2
 8004936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	e000e100 	.word	0xe000e100

0800494c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	6039      	str	r1, [r7, #0]
 8004956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495c:	2b00      	cmp	r3, #0
 800495e:	db0a      	blt.n	8004976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	b2da      	uxtb	r2, r3
 8004964:	490c      	ldr	r1, [pc, #48]	; (8004998 <__NVIC_SetPriority+0x4c>)
 8004966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496a:	0112      	lsls	r2, r2, #4
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	440b      	add	r3, r1
 8004970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004974:	e00a      	b.n	800498c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	4908      	ldr	r1, [pc, #32]	; (800499c <__NVIC_SetPriority+0x50>)
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	3b04      	subs	r3, #4
 8004984:	0112      	lsls	r2, r2, #4
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	440b      	add	r3, r1
 800498a:	761a      	strb	r2, [r3, #24]
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000e100 	.word	0xe000e100
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b089      	sub	sp, #36	; 0x24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f1c3 0307 	rsb	r3, r3, #7
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	bf28      	it	cs
 80049be:	2304      	movcs	r3, #4
 80049c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2b06      	cmp	r3, #6
 80049c8:	d902      	bls.n	80049d0 <NVIC_EncodePriority+0x30>
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3b03      	subs	r3, #3
 80049ce:	e000      	b.n	80049d2 <NVIC_EncodePriority+0x32>
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43da      	mvns	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	401a      	ands	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	43d9      	mvns	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f8:	4313      	orrs	r3, r2
         );
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3724      	adds	r7, #36	; 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a0c:	f3bf 8f4f 	dsb	sy
}
 8004a10:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a12:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <__NVIC_SystemReset+0x24>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a1a:	4904      	ldr	r1, [pc, #16]	; (8004a2c <__NVIC_SystemReset+0x24>)
 8004a1c:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <__NVIC_SystemReset+0x28>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a22:	f3bf 8f4f 	dsb	sy
}
 8004a26:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <__NVIC_SystemReset+0x20>
 8004a2c:	e000ed00 	.word	0xe000ed00
 8004a30:	05fa0004 	.word	0x05fa0004

08004a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a44:	d301      	bcc.n	8004a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a46:	2301      	movs	r3, #1
 8004a48:	e00f      	b.n	8004a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	; (8004a74 <SysTick_Config+0x40>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a52:	210f      	movs	r1, #15
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a58:	f7ff ff78 	bl	800494c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <SysTick_Config+0x40>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a62:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <SysTick_Config+0x40>)
 8004a64:	2207      	movs	r2, #7
 8004a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	e000e010 	.word	0xe000e010

08004a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff13 	bl	80048ac <__NVIC_SetPriorityGrouping>
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4603      	mov	r3, r0
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa0:	f7ff ff28 	bl	80048f4 <__NVIC_GetPriorityGrouping>
 8004aa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	6978      	ldr	r0, [r7, #20]
 8004aac:	f7ff ff78 	bl	80049a0 <NVIC_EncodePriority>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff47 	bl	800494c <__NVIC_SetPriority>
}
 8004abe:	bf00      	nop
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	4603      	mov	r3, r0
 8004ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff1b 	bl	8004910 <__NVIC_EnableIRQ>
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004ae6:	f7ff ff8f 	bl	8004a08 <__NVIC_SystemReset>

08004aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff ff9e 	bl	8004a34 <SysTick_Config>
 8004af8:	4603      	mov	r3, r0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b10:	f7ff faee 	bl	80040f0 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e099      	b.n	8004c54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b40:	e00f      	b.n	8004b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b42:	f7ff fad5 	bl	80040f0 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b05      	cmp	r3, #5
 8004b4e:	d908      	bls.n	8004b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2203      	movs	r2, #3
 8004b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e078      	b.n	8004c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e8      	bne.n	8004b42 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4b38      	ldr	r3, [pc, #224]	; (8004c5c <HAL_DMA_Init+0x158>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d107      	bne.n	8004bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 0307 	bic.w	r3, r3, #7
 8004be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d117      	bne.n	8004c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f8e5 	bl	8004dd8 <DMA_CheckFifoParam>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2240      	movs	r2, #64	; 0x40
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e016      	b.n	8004c54 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f89c 	bl	8004d6c <DMA_CalcBaseAndBitshift>
 8004c34:	4603      	mov	r3, r0
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	223f      	movs	r2, #63	; 0x3f
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	f010803f 	.word	0xf010803f

08004c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_DMA_Start_IT+0x26>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e040      	b.n	8004d08 <HAL_DMA_Start_IT+0xa8>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d12f      	bne.n	8004cfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f82e 	bl	8004d10 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	223f      	movs	r2, #63	; 0x3f
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0216 	orr.w	r2, r2, #22
 8004cce:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0208 	orr.w	r2, r2, #8
 8004ce6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	e005      	b.n	8004d06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
 8004d04:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d108      	bne.n	8004d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d4e:	e007      	b.n	8004d60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	60da      	str	r2, [r3, #12]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	3b10      	subs	r3, #16
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d86:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d909      	bls.n	8004dae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	1d1a      	adds	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	659a      	str	r2, [r3, #88]	; 0x58
 8004dac:	e007      	b.n	8004dbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004db6:	f023 0303 	bic.w	r3, r3, #3
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	aaaaaaab 	.word	0xaaaaaaab
 8004dd4:	080141cc 	.word	0x080141cc

08004dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d11f      	bne.n	8004e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d856      	bhi.n	8004ea6 <DMA_CheckFifoParam+0xce>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <DMA_CheckFifoParam+0x28>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e23 	.word	0x08004e23
 8004e08:	08004e11 	.word	0x08004e11
 8004e0c:	08004ea7 	.word	0x08004ea7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d046      	beq.n	8004eaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e20:	e043      	b.n	8004eaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e2a:	d140      	bne.n	8004eae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e30:	e03d      	b.n	8004eae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3a:	d121      	bne.n	8004e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d837      	bhi.n	8004eb2 <DMA_CheckFifoParam+0xda>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <DMA_CheckFifoParam+0x70>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e5f 	.word	0x08004e5f
 8004e50:	08004e59 	.word	0x08004e59
 8004e54:	08004e71 	.word	0x08004e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5c:	e030      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d025      	beq.n	8004eb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e6e:	e022      	b.n	8004eb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e78:	d11f      	bne.n	8004eba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e7e:	e01c      	b.n	8004eba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d903      	bls.n	8004e8e <DMA_CheckFifoParam+0xb6>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d003      	beq.n	8004e94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e8c:	e018      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	73fb      	strb	r3, [r7, #15]
      break;
 8004e92:	e015      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea4:	e00b      	b.n	8004ebe <DMA_CheckFifoParam+0xe6>
      break;
 8004ea6:	bf00      	nop
 8004ea8:	e00a      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eaa:	bf00      	nop
 8004eac:	e008      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e006      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eb2:	bf00      	nop
 8004eb4:	e004      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eb6:	bf00      	nop
 8004eb8:	e002      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eba:	bf00      	nop
 8004ebc:	e000      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ebe:	bf00      	nop
    }
  }

  return status;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop

08004ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b089      	sub	sp, #36	; 0x24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	e159      	b.n	80051a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004eec:	2201      	movs	r2, #1
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4013      	ands	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	f040 8148 	bne.w	800519a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d005      	beq.n	8004f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d130      	bne.n	8004f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43db      	mvns	r3, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4013      	ands	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f58:	2201      	movs	r2, #1
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	43db      	mvns	r3, r3
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	4013      	ands	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	f003 0201 	and.w	r2, r3, #1
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d017      	beq.n	8004fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d123      	bne.n	8005014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	08da      	lsrs	r2, r3, #3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3208      	adds	r2, #8
 8004fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	220f      	movs	r2, #15
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	08da      	lsrs	r2, r3, #3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3208      	adds	r2, #8
 800500e:	69b9      	ldr	r1, [r7, #24]
 8005010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	2203      	movs	r2, #3
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	43db      	mvns	r3, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4013      	ands	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f003 0203 	and.w	r2, r3, #3
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4313      	orrs	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80a2 	beq.w	800519a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	4b57      	ldr	r3, [pc, #348]	; (80051b8 <HAL_GPIO_Init+0x2e8>)
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	4a56      	ldr	r2, [pc, #344]	; (80051b8 <HAL_GPIO_Init+0x2e8>)
 8005060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005064:	6453      	str	r3, [r2, #68]	; 0x44
 8005066:	4b54      	ldr	r3, [pc, #336]	; (80051b8 <HAL_GPIO_Init+0x2e8>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005072:	4a52      	ldr	r2, [pc, #328]	; (80051bc <HAL_GPIO_Init+0x2ec>)
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	089b      	lsrs	r3, r3, #2
 8005078:	3302      	adds	r3, #2
 800507a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800507e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	220f      	movs	r2, #15
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4013      	ands	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a49      	ldr	r2, [pc, #292]	; (80051c0 <HAL_GPIO_Init+0x2f0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d019      	beq.n	80050d2 <HAL_GPIO_Init+0x202>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a48      	ldr	r2, [pc, #288]	; (80051c4 <HAL_GPIO_Init+0x2f4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d013      	beq.n	80050ce <HAL_GPIO_Init+0x1fe>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a47      	ldr	r2, [pc, #284]	; (80051c8 <HAL_GPIO_Init+0x2f8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00d      	beq.n	80050ca <HAL_GPIO_Init+0x1fa>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a46      	ldr	r2, [pc, #280]	; (80051cc <HAL_GPIO_Init+0x2fc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d007      	beq.n	80050c6 <HAL_GPIO_Init+0x1f6>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a45      	ldr	r2, [pc, #276]	; (80051d0 <HAL_GPIO_Init+0x300>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d101      	bne.n	80050c2 <HAL_GPIO_Init+0x1f2>
 80050be:	2304      	movs	r3, #4
 80050c0:	e008      	b.n	80050d4 <HAL_GPIO_Init+0x204>
 80050c2:	2307      	movs	r3, #7
 80050c4:	e006      	b.n	80050d4 <HAL_GPIO_Init+0x204>
 80050c6:	2303      	movs	r3, #3
 80050c8:	e004      	b.n	80050d4 <HAL_GPIO_Init+0x204>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e002      	b.n	80050d4 <HAL_GPIO_Init+0x204>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <HAL_GPIO_Init+0x204>
 80050d2:	2300      	movs	r3, #0
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	f002 0203 	and.w	r2, r2, #3
 80050da:	0092      	lsls	r2, r2, #2
 80050dc:	4093      	lsls	r3, r2
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050e4:	4935      	ldr	r1, [pc, #212]	; (80051bc <HAL_GPIO_Init+0x2ec>)
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	089b      	lsrs	r3, r3, #2
 80050ea:	3302      	adds	r3, #2
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050f2:	4b38      	ldr	r3, [pc, #224]	; (80051d4 <HAL_GPIO_Init+0x304>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	43db      	mvns	r3, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4013      	ands	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005116:	4a2f      	ldr	r2, [pc, #188]	; (80051d4 <HAL_GPIO_Init+0x304>)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800511c:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <HAL_GPIO_Init+0x304>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005140:	4a24      	ldr	r2, [pc, #144]	; (80051d4 <HAL_GPIO_Init+0x304>)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005146:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <HAL_GPIO_Init+0x304>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800516a:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <HAL_GPIO_Init+0x304>)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005170:	4b18      	ldr	r3, [pc, #96]	; (80051d4 <HAL_GPIO_Init+0x304>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005194:	4a0f      	ldr	r2, [pc, #60]	; (80051d4 <HAL_GPIO_Init+0x304>)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3301      	adds	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	f67f aea2 	bls.w	8004eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	3724      	adds	r7, #36	; 0x24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40013800 	.word	0x40013800
 80051c0:	40020000 	.word	0x40020000
 80051c4:	40020400 	.word	0x40020400
 80051c8:	40020800 	.word	0x40020800
 80051cc:	40020c00 	.word	0x40020c00
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40013c00 	.word	0x40013c00

080051d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
 80051f4:	e001      	b.n	80051fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	807b      	strh	r3, [r7, #2]
 8005214:	4613      	mov	r3, r2
 8005216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005218:	787b      	ldrb	r3, [r7, #1]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005224:	e003      	b.n	800522e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005226:	887b      	ldrh	r3, [r7, #2]
 8005228:	041a      	lsls	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	619a      	str	r2, [r3, #24]
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	460b      	mov	r3, r1
 8005244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800524c:	887a      	ldrh	r2, [r7, #2]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4013      	ands	r3, r2
 8005252:	041a      	lsls	r2, r3, #16
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	43d9      	mvns	r1, r3
 8005258:	887b      	ldrh	r3, [r7, #2]
 800525a:	400b      	ands	r3, r1
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	619a      	str	r2, [r3, #24]
}
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e12b      	b.n	80054da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc fe56 	bl	8001f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052d4:	f002 fe38 	bl	8007f48 <HAL_RCC_GetPCLK1Freq>
 80052d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4a81      	ldr	r2, [pc, #516]	; (80054e4 <HAL_I2C_Init+0x274>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d807      	bhi.n	80052f4 <HAL_I2C_Init+0x84>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4a80      	ldr	r2, [pc, #512]	; (80054e8 <HAL_I2C_Init+0x278>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	bf94      	ite	ls
 80052ec:	2301      	movls	r3, #1
 80052ee:	2300      	movhi	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e006      	b.n	8005302 <HAL_I2C_Init+0x92>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a7d      	ldr	r2, [pc, #500]	; (80054ec <HAL_I2C_Init+0x27c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	bf94      	ite	ls
 80052fc:	2301      	movls	r3, #1
 80052fe:	2300      	movhi	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e0e7      	b.n	80054da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a78      	ldr	r2, [pc, #480]	; (80054f0 <HAL_I2C_Init+0x280>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	0c9b      	lsrs	r3, r3, #18
 8005314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4a6a      	ldr	r2, [pc, #424]	; (80054e4 <HAL_I2C_Init+0x274>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d802      	bhi.n	8005344 <HAL_I2C_Init+0xd4>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	3301      	adds	r3, #1
 8005342:	e009      	b.n	8005358 <HAL_I2C_Init+0xe8>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	4a69      	ldr	r2, [pc, #420]	; (80054f4 <HAL_I2C_Init+0x284>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	3301      	adds	r3, #1
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	430b      	orrs	r3, r1
 800535e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800536a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	495c      	ldr	r1, [pc, #368]	; (80054e4 <HAL_I2C_Init+0x274>)
 8005374:	428b      	cmp	r3, r1
 8005376:	d819      	bhi.n	80053ac <HAL_I2C_Init+0x13c>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1e59      	subs	r1, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	fbb1 f3f3 	udiv	r3, r1, r3
 8005386:	1c59      	adds	r1, r3, #1
 8005388:	f640 73fc 	movw	r3, #4092	; 0xffc
 800538c:	400b      	ands	r3, r1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_I2C_Init+0x138>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1e59      	subs	r1, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a0:	3301      	adds	r3, #1
 80053a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a6:	e051      	b.n	800544c <HAL_I2C_Init+0x1dc>
 80053a8:	2304      	movs	r3, #4
 80053aa:	e04f      	b.n	800544c <HAL_I2C_Init+0x1dc>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d111      	bne.n	80053d8 <HAL_I2C_Init+0x168>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1e58      	subs	r0, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	440b      	add	r3, r1
 80053c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c6:	3301      	adds	r3, #1
 80053c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e012      	b.n	80053fe <HAL_I2C_Init+0x18e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1e58      	subs	r0, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	0099      	lsls	r1, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_I2C_Init+0x196>
 8005402:	2301      	movs	r3, #1
 8005404:	e022      	b.n	800544c <HAL_I2C_Init+0x1dc>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10e      	bne.n	800542c <HAL_I2C_Init+0x1bc>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1e58      	subs	r0, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6859      	ldr	r1, [r3, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	440b      	add	r3, r1
 800541c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005420:	3301      	adds	r3, #1
 8005422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	e00f      	b.n	800544c <HAL_I2C_Init+0x1dc>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	1e58      	subs	r0, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6859      	ldr	r1, [r3, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	0099      	lsls	r1, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005442:	3301      	adds	r3, #1
 8005444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	6809      	ldr	r1, [r1, #0]
 8005450:	4313      	orrs	r3, r2
 8005452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800547a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6911      	ldr	r1, [r2, #16]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68d2      	ldr	r2, [r2, #12]
 8005486:	4311      	orrs	r1, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	430b      	orrs	r3, r1
 800548e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	000186a0 	.word	0x000186a0
 80054e8:	001e847f 	.word	0x001e847f
 80054ec:	003d08ff 	.word	0x003d08ff
 80054f0:	431bde83 	.word	0x431bde83
 80054f4:	10624dd3 	.word	0x10624dd3

080054f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	461a      	mov	r2, r3
 8005506:	4603      	mov	r3, r0
 8005508:	817b      	strh	r3, [r7, #10]
 800550a:	460b      	mov	r3, r1
 800550c:	813b      	strh	r3, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005512:	f7fe fded 	bl	80040f0 <HAL_GetTick>
 8005516:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b20      	cmp	r3, #32
 8005522:	f040 80d9 	bne.w	80056d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	2319      	movs	r3, #25
 800552c:	2201      	movs	r2, #1
 800552e:	496d      	ldr	r1, [pc, #436]	; (80056e4 <HAL_I2C_Mem_Write+0x1ec>)
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fc7f 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800553c:	2302      	movs	r3, #2
 800553e:	e0cc      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_I2C_Mem_Write+0x56>
 800554a:	2302      	movs	r3, #2
 800554c:	e0c5      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d007      	beq.n	8005574 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005582:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2221      	movs	r2, #33	; 0x21
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2240      	movs	r2, #64	; 0x40
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a3a      	ldr	r2, [r7, #32]
 800559e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a4d      	ldr	r2, [pc, #308]	; (80056e8 <HAL_I2C_Mem_Write+0x1f0>)
 80055b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055b6:	88f8      	ldrh	r0, [r7, #6]
 80055b8:	893a      	ldrh	r2, [r7, #8]
 80055ba:	8979      	ldrh	r1, [r7, #10]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	4603      	mov	r3, r0
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fab6 	bl	8005b38 <I2C_RequestMemoryWrite>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d052      	beq.n	8005678 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e081      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fd00 	bl	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00d      	beq.n	8005602 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d107      	bne.n	80055fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e06b      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	781a      	ldrb	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b04      	cmp	r3, #4
 800563e:	d11b      	bne.n	8005678 <HAL_I2C_Mem_Write+0x180>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	2b00      	cmp	r3, #0
 8005646:	d017      	beq.n	8005678 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1aa      	bne.n	80055d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 fcec 	bl	8006062 <I2C_WaitOnBTFFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00d      	beq.n	80056ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	2b04      	cmp	r3, #4
 8005696:	d107      	bne.n	80056a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e016      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e000      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	00100002 	.word	0x00100002
 80056e8:	ffff0000 	.word	0xffff0000

080056ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	; 0x30
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	4608      	mov	r0, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	817b      	strh	r3, [r7, #10]
 80056fe:	460b      	mov	r3, r1
 8005700:	813b      	strh	r3, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005706:	f7fe fcf3 	bl	80040f0 <HAL_GetTick>
 800570a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b20      	cmp	r3, #32
 8005716:	f040 8208 	bne.w	8005b2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	2319      	movs	r3, #25
 8005720:	2201      	movs	r2, #1
 8005722:	497b      	ldr	r1, [pc, #492]	; (8005910 <HAL_I2C_Mem_Read+0x224>)
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fb85 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
 8005732:	e1fb      	b.n	8005b2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_I2C_Mem_Read+0x56>
 800573e:	2302      	movs	r3, #2
 8005740:	e1f4      	b.n	8005b2c <HAL_I2C_Mem_Read+0x440>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d007      	beq.n	8005768 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005776:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2222      	movs	r2, #34	; 0x22
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2240      	movs	r2, #64	; 0x40
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a5b      	ldr	r2, [pc, #364]	; (8005914 <HAL_I2C_Mem_Read+0x228>)
 80057a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057aa:	88f8      	ldrh	r0, [r7, #6]
 80057ac:	893a      	ldrh	r2, [r7, #8]
 80057ae:	8979      	ldrh	r1, [r7, #10]
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	9301      	str	r3, [sp, #4]
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4603      	mov	r3, r0
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fa52 	bl	8005c64 <I2C_RequestMemoryRead>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e1b0      	b.n	8005b2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d113      	bne.n	80057fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d2:	2300      	movs	r3, #0
 80057d4:	623b      	str	r3, [r7, #32]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	623b      	str	r3, [r7, #32]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	623b      	str	r3, [r7, #32]
 80057e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e184      	b.n	8005b04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d11b      	bne.n	800583a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e164      	b.n	8005b04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583e:	2b02      	cmp	r3, #2
 8005840:	d11b      	bne.n	800587a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005850:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	e144      	b.n	8005b04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005890:	e138      	b.n	8005b04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005896:	2b03      	cmp	r3, #3
 8005898:	f200 80f1 	bhi.w	8005a7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d123      	bne.n	80058ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fc1b 	bl	80060e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e139      	b.n	8005b2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ea:	e10b      	b.n	8005b04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d14e      	bne.n	8005992 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	2200      	movs	r2, #0
 80058fc:	4906      	ldr	r1, [pc, #24]	; (8005918 <HAL_I2C_Mem_Read+0x22c>)
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fa98 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e10e      	b.n	8005b2c <HAL_I2C_Mem_Read+0x440>
 800590e:	bf00      	nop
 8005910:	00100002 	.word	0x00100002
 8005914:	ffff0000 	.word	0xffff0000
 8005918:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005990:	e0b8      	b.n	8005b04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	2200      	movs	r2, #0
 800599a:	4966      	ldr	r1, [pc, #408]	; (8005b34 <HAL_I2C_Mem_Read+0x448>)
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fa49 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0bf      	b.n	8005b2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	2200      	movs	r2, #0
 80059f6:	494f      	ldr	r1, [pc, #316]	; (8005b34 <HAL_I2C_Mem_Read+0x448>)
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 fa1b 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e091      	b.n	8005b2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a7c:	e042      	b.n	8005b04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fb2e 	bl	80060e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e04c      	b.n	8005b2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d118      	bne.n	8005b04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f47f aec2 	bne.w	8005892 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e000      	b.n	8005b2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
  }
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3728      	adds	r7, #40	; 0x28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	00010004 	.word	0x00010004

08005b38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	4608      	mov	r0, r1
 8005b42:	4611      	mov	r1, r2
 8005b44:	461a      	mov	r2, r3
 8005b46:	4603      	mov	r3, r0
 8005b48:	817b      	strh	r3, [r7, #10]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	813b      	strh	r3, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f960 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b88:	d103      	bne.n	8005b92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e05f      	b.n	8005c56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b96:	897b      	ldrh	r3, [r7, #10]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ba4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	6a3a      	ldr	r2, [r7, #32]
 8005baa:	492d      	ldr	r1, [pc, #180]	; (8005c60 <I2C_RequestMemoryWrite+0x128>)
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f998 	bl	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e04c      	b.n	8005c56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd4:	6a39      	ldr	r1, [r7, #32]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 fa02 	bl	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00d      	beq.n	8005bfe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d107      	bne.n	8005bfa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e02b      	b.n	8005c56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d105      	bne.n	8005c10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c04:	893b      	ldrh	r3, [r7, #8]
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	611a      	str	r2, [r3, #16]
 8005c0e:	e021      	b.n	8005c54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c10:	893b      	ldrh	r3, [r7, #8]
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	6a39      	ldr	r1, [r7, #32]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f9dc 	bl	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00d      	beq.n	8005c4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d107      	bne.n	8005c46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e005      	b.n	8005c56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c4a:	893b      	ldrh	r3, [r7, #8]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	00010002 	.word	0x00010002

08005c64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	4611      	mov	r1, r2
 8005c70:	461a      	mov	r2, r3
 8005c72:	4603      	mov	r3, r0
 8005c74:	817b      	strh	r3, [r7, #10]
 8005c76:	460b      	mov	r3, r1
 8005c78:	813b      	strh	r3, [r7, #8]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f8c2 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00d      	beq.n	8005cd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc4:	d103      	bne.n	8005cce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e0aa      	b.n	8005e28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cd2:	897b      	ldrh	r3, [r7, #10]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ce0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	6a3a      	ldr	r2, [r7, #32]
 8005ce6:	4952      	ldr	r1, [pc, #328]	; (8005e30 <I2C_RequestMemoryRead+0x1cc>)
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f8fa 	bl	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e097      	b.n	8005e28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d10:	6a39      	ldr	r1, [r7, #32]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f964 	bl	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00d      	beq.n	8005d3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d107      	bne.n	8005d36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e076      	b.n	8005e28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d105      	bne.n	8005d4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d40:	893b      	ldrh	r3, [r7, #8]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	611a      	str	r2, [r3, #16]
 8005d4a:	e021      	b.n	8005d90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d4c:	893b      	ldrh	r3, [r7, #8]
 8005d4e:	0a1b      	lsrs	r3, r3, #8
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5c:	6a39      	ldr	r1, [r7, #32]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f93e 	bl	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00d      	beq.n	8005d86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d107      	bne.n	8005d82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e050      	b.n	8005e28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d86:	893b      	ldrh	r3, [r7, #8]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d92:	6a39      	ldr	r1, [r7, #32]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f923 	bl	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00d      	beq.n	8005dbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d107      	bne.n	8005db8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e035      	b.n	8005e28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f82b 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00d      	beq.n	8005e00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df2:	d103      	bne.n	8005dfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e013      	b.n	8005e28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e00:	897b      	ldrh	r3, [r7, #10]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	6a3a      	ldr	r2, [r7, #32]
 8005e14:	4906      	ldr	r1, [pc, #24]	; (8005e30 <I2C_RequestMemoryRead+0x1cc>)
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 f863 	bl	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	00010002 	.word	0x00010002

08005e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e44:	e025      	b.n	8005e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e4c:	d021      	beq.n	8005e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4e:	f7fe f94f 	bl	80040f0 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d302      	bcc.n	8005e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d116      	bne.n	8005e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f043 0220 	orr.w	r2, r3, #32
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e023      	b.n	8005eda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d10d      	bne.n	8005eb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	43da      	mvns	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	e00c      	b.n	8005ed2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	43da      	mvns	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bf0c      	ite	eq
 8005eca:	2301      	moveq	r3, #1
 8005ecc:	2300      	movne	r3, #0
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d0b6      	beq.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ef0:	e051      	b.n	8005f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f00:	d123      	bne.n	8005f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f043 0204 	orr.w	r2, r3, #4
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e046      	b.n	8005fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f50:	d021      	beq.n	8005f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f52:	f7fe f8cd 	bl	80040f0 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d302      	bcc.n	8005f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d116      	bne.n	8005f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	f043 0220 	orr.w	r2, r3, #32
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e020      	b.n	8005fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	0c1b      	lsrs	r3, r3, #16
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d10c      	bne.n	8005fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	43da      	mvns	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4013      	ands	r3, r2
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bf14      	ite	ne
 8005fb2:	2301      	movne	r3, #1
 8005fb4:	2300      	moveq	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	e00b      	b.n	8005fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	43da      	mvns	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bf14      	ite	ne
 8005fcc:	2301      	movne	r3, #1
 8005fce:	2300      	moveq	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d18d      	bne.n	8005ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fec:	e02d      	b.n	800604a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f8ce 	bl	8006190 <I2C_IsAcknowledgeFailed>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e02d      	b.n	800605a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006004:	d021      	beq.n	800604a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006006:	f7fe f873 	bl	80040f0 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	429a      	cmp	r2, r3
 8006014:	d302      	bcc.n	800601c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d116      	bne.n	800604a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f043 0220 	orr.w	r2, r3, #32
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e007      	b.n	800605a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	d1ca      	bne.n	8005fee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800606e:	e02d      	b.n	80060cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f88d 	bl	8006190 <I2C_IsAcknowledgeFailed>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e02d      	b.n	80060dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006086:	d021      	beq.n	80060cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006088:	f7fe f832 	bl	80040f0 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	429a      	cmp	r2, r3
 8006096:	d302      	bcc.n	800609e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d116      	bne.n	80060cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	f043 0220 	orr.w	r2, r3, #32
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e007      	b.n	80060dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d1ca      	bne.n	8006070 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060f0:	e042      	b.n	8006178 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d119      	bne.n	8006134 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0210 	mvn.w	r2, #16
 8006108:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e029      	b.n	8006188 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006134:	f7fd ffdc 	bl	80040f0 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	429a      	cmp	r2, r3
 8006142:	d302      	bcc.n	800614a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d116      	bne.n	8006178 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	f043 0220 	orr.w	r2, r3, #32
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e007      	b.n	8006188 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d1b5      	bne.n	80060f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a6:	d11b      	bne.n	80061e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f043 0204 	orr.w	r2, r3, #4
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80061ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f0:	b08f      	sub	sp, #60	; 0x3c
 80061f2:	af0a      	add	r7, sp, #40	; 0x28
 80061f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e10f      	b.n	8006420 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f009 fa8e 	bl	800f73c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2203      	movs	r2, #3
 8006224:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f003 f95f 	bl	8009502 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	687e      	ldr	r6, [r7, #4]
 800624c:	466d      	mov	r5, sp
 800624e:	f106 0410 	add.w	r4, r6, #16
 8006252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800625a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800625e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006262:	1d33      	adds	r3, r6, #4
 8006264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006266:	6838      	ldr	r0, [r7, #0]
 8006268:	f003 f836 	bl	80092d8 <USB_CoreInit>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e0d0      	b.n	8006420 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2100      	movs	r1, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f003 f94d 	bl	8009524 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800628a:	2300      	movs	r3, #0
 800628c:	73fb      	strb	r3, [r7, #15]
 800628e:	e04a      	b.n	8006326 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006290:	7bfa      	ldrb	r2, [r7, #15]
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	333d      	adds	r3, #61	; 0x3d
 80062a0:	2201      	movs	r2, #1
 80062a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062a4:	7bfa      	ldrb	r2, [r7, #15]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	333c      	adds	r3, #60	; 0x3c
 80062b4:	7bfa      	ldrb	r2, [r7, #15]
 80062b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062b8:	7bfa      	ldrb	r2, [r7, #15]
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	b298      	uxth	r0, r3
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	3344      	adds	r3, #68	; 0x44
 80062cc:	4602      	mov	r2, r0
 80062ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062d0:	7bfa      	ldrb	r2, [r7, #15]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	3340      	adds	r3, #64	; 0x40
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80062e4:	7bfa      	ldrb	r2, [r7, #15]
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	4613      	mov	r3, r2
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4413      	add	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	3348      	adds	r3, #72	; 0x48
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062f8:	7bfa      	ldrb	r2, [r7, #15]
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	4613      	mov	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	440b      	add	r3, r1
 8006306:	334c      	adds	r3, #76	; 0x4c
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800630c:	7bfa      	ldrb	r2, [r7, #15]
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	3354      	adds	r3, #84	; 0x54
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	3301      	adds	r3, #1
 8006324:	73fb      	strb	r3, [r7, #15]
 8006326:	7bfa      	ldrb	r2, [r7, #15]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	d3af      	bcc.n	8006290 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006330:	2300      	movs	r3, #0
 8006332:	73fb      	strb	r3, [r7, #15]
 8006334:	e044      	b.n	80063c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006336:	7bfa      	ldrb	r2, [r7, #15]
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	4613      	mov	r3, r2
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	440b      	add	r3, r1
 8006344:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800634c:	7bfa      	ldrb	r2, [r7, #15]
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	4613      	mov	r3, r2
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4413      	add	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	440b      	add	r3, r1
 800635a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800635e:	7bfa      	ldrb	r2, [r7, #15]
 8006360:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006362:	7bfa      	ldrb	r2, [r7, #15]
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	4613      	mov	r3, r2
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006378:	7bfa      	ldrb	r2, [r7, #15]
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800638e:	7bfa      	ldrb	r2, [r7, #15]
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063a4:	7bfa      	ldrb	r2, [r7, #15]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	3301      	adds	r3, #1
 80063be:	73fb      	strb	r3, [r7, #15]
 80063c0:	7bfa      	ldrb	r2, [r7, #15]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d3b5      	bcc.n	8006336 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	687e      	ldr	r6, [r7, #4]
 80063d2:	466d      	mov	r5, sp
 80063d4:	f106 0410 	add.w	r4, r6, #16
 80063d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80063e8:	1d33      	adds	r3, r6, #4
 80063ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063ec:	6838      	ldr	r0, [r7, #0]
 80063ee:	f003 f8e5 	bl	80095bc <USB_DevInit>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e00d      	b.n	8006420 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f004 fa34 	bl	800a886 <USB_DevDisconnect>

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006428 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_PCD_Start+0x1c>
 8006440:	2302      	movs	r3, #2
 8006442:	e020      	b.n	8006486 <HAL_PCD_Start+0x5e>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	2b01      	cmp	r3, #1
 8006452:	d109      	bne.n	8006468 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006458:	2b01      	cmp	r3, #1
 800645a:	d005      	beq.n	8006468 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f003 f837 	bl	80094e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f004 f9e4 	bl	800a844 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800648e:	b590      	push	{r4, r7, lr}
 8006490:	b08d      	sub	sp, #52	; 0x34
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f004 faa2 	bl	800a9ee <USB_GetMode>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 848a 	bne.w	8006dc6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f004 fa06 	bl	800a8c8 <USB_ReadInterrupts>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 8480 	beq.w	8006dc4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	0a1b      	lsrs	r3, r3, #8
 80064ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f004 f9f3 	bl	800a8c8 <USB_ReadInterrupts>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d107      	bne.n	80064fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f002 0202 	and.w	r2, r2, #2
 80064fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f004 f9e1 	bl	800a8c8 <USB_ReadInterrupts>
 8006506:	4603      	mov	r3, r0
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b10      	cmp	r3, #16
 800650e:	d161      	bne.n	80065d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0210 	bic.w	r2, r2, #16
 800651e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	f003 020f 	and.w	r2, r3, #15
 800652c:	4613      	mov	r3, r2
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	4413      	add	r3, r2
 800653c:	3304      	adds	r3, #4
 800653e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	0c5b      	lsrs	r3, r3, #17
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	2b02      	cmp	r3, #2
 800654a:	d124      	bne.n	8006596 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006552:	4013      	ands	r3, r2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d035      	beq.n	80065c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	091b      	lsrs	r3, r3, #4
 8006560:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006566:	b29b      	uxth	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	6a38      	ldr	r0, [r7, #32]
 800656c:	f004 f818 	bl	800a5a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	091b      	lsrs	r3, r3, #4
 8006578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800657c:	441a      	add	r2, r3
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	091b      	lsrs	r3, r3, #4
 800658a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800658e:	441a      	add	r2, r3
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	621a      	str	r2, [r3, #32]
 8006594:	e016      	b.n	80065c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	0c5b      	lsrs	r3, r3, #17
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	2b06      	cmp	r3, #6
 80065a0:	d110      	bne.n	80065c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065a8:	2208      	movs	r2, #8
 80065aa:	4619      	mov	r1, r3
 80065ac:	6a38      	ldr	r0, [r7, #32]
 80065ae:	f003 fff7 	bl	800a5a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	091b      	lsrs	r3, r3, #4
 80065ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065be:	441a      	add	r2, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0210 	orr.w	r2, r2, #16
 80065d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4618      	mov	r0, r3
 80065da:	f004 f975 	bl	800a8c8 <USB_ReadInterrupts>
 80065de:	4603      	mov	r3, r0
 80065e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065e8:	f040 80a7 	bne.w	800673a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f004 f97a 	bl	800a8ee <USB_ReadDevAllOutEpInterrupt>
 80065fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80065fc:	e099      	b.n	8006732 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 808e 	beq.w	8006726 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f004 f99e 	bl	800a956 <USB_ReadDevOutEPInterrupt>
 800661a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	461a      	mov	r2, r3
 8006634:	2301      	movs	r3, #1
 8006636:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fec2 	bl	80073c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	461a      	mov	r2, r3
 8006658:	2308      	movs	r3, #8
 800665a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800665c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 ff98 	bl	8007594 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f003 0310 	and.w	r3, r3, #16
 800666a:	2b00      	cmp	r3, #0
 800666c:	d008      	beq.n	8006680 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	461a      	mov	r2, r3
 800667c:	2310      	movs	r3, #16
 800667e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d030      	beq.n	80066ec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b80      	cmp	r3, #128	; 0x80
 8006694:	d109      	bne.n	80066aa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066a8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80066aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ac:	4613      	mov	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	4413      	add	r3, r2
 80066bc:	3304      	adds	r3, #4
 80066be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	78db      	ldrb	r3, [r3, #3]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d108      	bne.n	80066da <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2200      	movs	r2, #0
 80066cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f009 f92d 	bl	800f934 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e6:	461a      	mov	r2, r3
 80066e8:	2302      	movs	r3, #2
 80066ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d008      	beq.n	8006708 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006702:	461a      	mov	r2, r3
 8006704:	2320      	movs	r3, #32
 8006706:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671e:	461a      	mov	r2, r3
 8006720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006724:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	3301      	adds	r3, #1
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	2b00      	cmp	r3, #0
 8006736:	f47f af62 	bne.w	80065fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f004 f8c2 	bl	800a8c8 <USB_ReadInterrupts>
 8006744:	4603      	mov	r3, r0
 8006746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800674a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800674e:	f040 80db 	bne.w	8006908 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f004 f8e3 	bl	800a922 <USB_ReadDevAllInEpInterrupt>
 800675c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006762:	e0cd      	b.n	8006900 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80c2 	beq.w	80068f4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	4611      	mov	r1, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f004 f909 	bl	800a992 <USB_ReadDevInEPInterrupt>
 8006780:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d057      	beq.n	800683c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	2201      	movs	r2, #1
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	43db      	mvns	r3, r3
 80067a6:	69f9      	ldr	r1, [r7, #28]
 80067a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ac:	4013      	ands	r3, r2
 80067ae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	461a      	mov	r2, r3
 80067be:	2301      	movs	r3, #1
 80067c0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d132      	bne.n	8006830 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ce:	4613      	mov	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	334c      	adds	r3, #76	; 0x4c
 80067da:	6819      	ldr	r1, [r3, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e0:	4613      	mov	r3, r2
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4403      	add	r3, r0
 80067ea:	3348      	adds	r3, #72	; 0x48
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4419      	add	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f4:	4613      	mov	r3, r2
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4403      	add	r3, r0
 80067fe:	334c      	adds	r3, #76	; 0x4c
 8006800:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d113      	bne.n	8006830 <HAL_PCD_IRQHandler+0x3a2>
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680c:	4613      	mov	r3, r2
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	3354      	adds	r3, #84	; 0x54
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d108      	bne.n	8006830 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006828:	461a      	mov	r2, r3
 800682a:	2101      	movs	r1, #1
 800682c:	f004 f910 	bl	800aa50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	b2db      	uxtb	r3, r3
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f009 f801 	bl	800f83e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d008      	beq.n	8006858 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006852:	461a      	mov	r2, r3
 8006854:	2308      	movs	r3, #8
 8006856:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	d008      	beq.n	8006874 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686e:	461a      	mov	r2, r3
 8006870:	2310      	movs	r3, #16
 8006872:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688a:	461a      	mov	r2, r3
 800688c:	2340      	movs	r3, #64	; 0x40
 800688e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d023      	beq.n	80068e2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800689a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800689c:	6a38      	ldr	r0, [r7, #32]
 800689e:	f002 fff1 	bl	8009884 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80068a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a4:	4613      	mov	r3, r2
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	3338      	adds	r3, #56	; 0x38
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	4413      	add	r3, r2
 80068b2:	3304      	adds	r3, #4
 80068b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	78db      	ldrb	r3, [r3, #3]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d108      	bne.n	80068d0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2200      	movs	r2, #0
 80068c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f009 f844 	bl	800f958 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	461a      	mov	r2, r3
 80068de:	2302      	movs	r3, #2
 80068e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80068ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fcdb 	bl	80072aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	3301      	adds	r3, #1
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	085b      	lsrs	r3, r3, #1
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	2b00      	cmp	r3, #0
 8006904:	f47f af2e 	bne.w	8006764 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f003 ffdb 	bl	800a8c8 <USB_ReadInterrupts>
 8006912:	4603      	mov	r3, r0
 8006914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800691c:	d122      	bne.n	8006964 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006938:	2b01      	cmp	r3, #1
 800693a:	d108      	bne.n	800694e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006944:	2100      	movs	r1, #0
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fec2 	bl	80076d0 <HAL_PCDEx_LPM_Callback>
 800694c:	e002      	b.n	8006954 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f008 ffe2 	bl	800f918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f003 ffad 	bl	800a8c8 <USB_ReadInterrupts>
 800696e:	4603      	mov	r3, r0
 8006970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006978:	d112      	bne.n	80069a0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b01      	cmp	r3, #1
 8006988:	d102      	bne.n	8006990 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f008 ff9e 	bl	800f8cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695a      	ldr	r2, [r3, #20]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800699e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f003 ff8f 	bl	800a8c8 <USB_ReadInterrupts>
 80069aa:	4603      	mov	r3, r0
 80069ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b4:	f040 80b7 	bne.w	8006b26 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c6:	f023 0301 	bic.w	r3, r3, #1
 80069ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2110      	movs	r1, #16
 80069d2:	4618      	mov	r0, r3
 80069d4:	f002 ff56 	bl	8009884 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069dc:	e046      	b.n	8006a6c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ea:	461a      	mov	r2, r3
 80069ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a24:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	69fa      	ldr	r2, [r7, #28]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	3301      	adds	r3, #1
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d3b3      	bcc.n	80069de <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a84:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006a88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d016      	beq.n	8006ac0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aa2:	f043 030b 	orr.w	r3, r3, #11
 8006aa6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ab8:	f043 030b 	orr.w	r3, r3, #11
 8006abc:	6453      	str	r3, [r2, #68]	; 0x44
 8006abe:	e015      	b.n	8006aec <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ace:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ad2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006ad6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ae6:	f043 030b 	orr.w	r3, r3, #11
 8006aea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006afa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006afe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b10:	461a      	mov	r2, r3
 8006b12:	f003 ff9d 	bl	800aa50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695a      	ldr	r2, [r3, #20]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f003 fecc 	bl	800a8c8 <USB_ReadInterrupts>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b3a:	d124      	bne.n	8006b86 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f003 ff62 	bl	800aa0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f002 ff17 	bl	800997e <USB_GetDevSpeed>
 8006b50:	4603      	mov	r3, r0
 8006b52:	461a      	mov	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681c      	ldr	r4, [r3, #0]
 8006b5c:	f001 f9e8 	bl	8007f30 <HAL_RCC_GetHCLKFreq>
 8006b60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f002 fc16 	bl	800939c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f008 fe8c 	bl	800f88e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695a      	ldr	r2, [r3, #20]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f003 fe9c 	bl	800a8c8 <USB_ReadInterrupts>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b08      	cmp	r3, #8
 8006b98:	d10a      	bne.n	8006bb0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f008 fe69 	bl	800f872 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695a      	ldr	r2, [r3, #20]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f002 0208 	and.w	r2, r2, #8
 8006bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f003 fe87 	bl	800a8c8 <USB_ReadInterrupts>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc0:	2b80      	cmp	r3, #128	; 0x80
 8006bc2:	d122      	bne.n	8006c0a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd4:	e014      	b.n	8006c00 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bda:	4613      	mov	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d105      	bne.n	8006bfa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fb27 	bl	8007248 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d3e5      	bcc.n	8006bd6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f003 fe5a 	bl	800a8c8 <USB_ReadInterrupts>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c1e:	d13b      	bne.n	8006c98 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c20:	2301      	movs	r3, #1
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
 8006c24:	e02b      	b.n	8006c7e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	440b      	add	r3, r1
 8006c44:	3340      	adds	r3, #64	; 0x40
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d115      	bne.n	8006c78 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006c4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da12      	bge.n	8006c78 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c56:	4613      	mov	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	333f      	adds	r3, #63	; 0x3f
 8006c62:	2201      	movs	r2, #1
 8006c64:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fae8 	bl	8007248 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d3ce      	bcc.n	8006c26 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f003 fe13 	bl	800a8c8 <USB_ReadInterrupts>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cac:	d155      	bne.n	8006d5a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cae:	2301      	movs	r3, #1
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb2:	e045      	b.n	8006d40 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc8:	4613      	mov	r3, r2
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	440b      	add	r3, r1
 8006cd2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d12e      	bne.n	8006d3a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006cdc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	da2b      	bge.n	8006d3a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006cee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d121      	bne.n	8006d3a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006d08:	2201      	movs	r2, #1
 8006d0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d36:	6053      	str	r3, [r2, #4]
            break;
 8006d38:	e007      	b.n	8006d4a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d3b4      	bcc.n	8006cb4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695a      	ldr	r2, [r3, #20]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f003 fdb2 	bl	800a8c8 <USB_ReadInterrupts>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6e:	d10a      	bne.n	8006d86 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f008 fe03 	bl	800f97c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f003 fd9c 	bl	800a8c8 <USB_ReadInterrupts>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d115      	bne.n	8006dc6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f008 fdf3 	bl	800f998 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6859      	ldr	r1, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
 8006dc2:	e000      	b.n	8006dc6 <HAL_PCD_IRQHandler+0x938>
      return;
 8006dc4:	bf00      	nop
    }
  }
}
 8006dc6:	3734      	adds	r7, #52	; 0x34
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd90      	pop	{r4, r7, pc}

08006dcc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d101      	bne.n	8006de6 <HAL_PCD_SetAddress+0x1a>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e013      	b.n	8006e0e <HAL_PCD_SetAddress+0x42>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	78fa      	ldrb	r2, [r7, #3]
 8006df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	78fa      	ldrb	r2, [r7, #3]
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f003 fcfa 	bl	800a7f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	4608      	mov	r0, r1
 8006e20:	4611      	mov	r1, r2
 8006e22:	461a      	mov	r2, r3
 8006e24:	4603      	mov	r3, r0
 8006e26:	70fb      	strb	r3, [r7, #3]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	803b      	strh	r3, [r7, #0]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	da0f      	bge.n	8006e5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	f003 020f 	and.w	r2, r3, #15
 8006e42:	4613      	mov	r3, r2
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	3338      	adds	r3, #56	; 0x38
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	4413      	add	r3, r2
 8006e50:	3304      	adds	r3, #4
 8006e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	705a      	strb	r2, [r3, #1]
 8006e5a:	e00f      	b.n	8006e7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	f003 020f 	and.w	r2, r3, #15
 8006e62:	4613      	mov	r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	3304      	adds	r3, #4
 8006e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e7c:	78fb      	ldrb	r3, [r7, #3]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e88:	883a      	ldrh	r2, [r7, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	78ba      	ldrb	r2, [r7, #2]
 8006e92:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d004      	beq.n	8006ea6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006ea6:	78bb      	ldrb	r3, [r7, #2]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d102      	bne.n	8006eb2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_PCD_EP_Open+0xaa>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e00e      	b.n	8006ede <HAL_PCD_EP_Open+0xc8>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68f9      	ldr	r1, [r7, #12]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f002 fd7a 	bl	80099c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006edc:	7afb      	ldrb	r3, [r7, #11]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	da0f      	bge.n	8006f1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	f003 020f 	and.w	r2, r3, #15
 8006f00:	4613      	mov	r3, r2
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	3338      	adds	r3, #56	; 0x38
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	3304      	adds	r3, #4
 8006f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	705a      	strb	r2, [r3, #1]
 8006f18:	e00f      	b.n	8006f3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	f003 020f 	and.w	r2, r3, #15
 8006f20:	4613      	mov	r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	4413      	add	r3, r2
 8006f30:	3304      	adds	r3, #4
 8006f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_PCD_EP_Close+0x6e>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e00e      	b.n	8006f72 <HAL_PCD_EP_Close+0x8c>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68f9      	ldr	r1, [r7, #12]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f002 fdb8 	bl	8009ad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b086      	sub	sp, #24
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
 8006f86:	460b      	mov	r3, r1
 8006f88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	f003 020f 	and.w	r2, r3, #15
 8006f90:	4613      	mov	r3, r2
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fbc:	7afb      	ldrb	r3, [r7, #11]
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d102      	bne.n	8006fd6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006fd6:	7afb      	ldrb	r3, [r7, #11]
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d109      	bne.n	8006ff4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	6979      	ldr	r1, [r7, #20]
 8006fee:	f003 f897 	bl	800a120 <USB_EP0StartXfer>
 8006ff2:	e008      	b.n	8007006 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6818      	ldr	r0, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	6979      	ldr	r1, [r7, #20]
 8007002:	f002 fe45 	bl	8009c90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	f003 020f 	and.w	r2, r3, #15
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007032:	681b      	ldr	r3, [r3, #0]
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	607a      	str	r2, [r7, #4]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	460b      	mov	r3, r1
 800704e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	f003 020f 	and.w	r2, r3, #15
 8007056:	4613      	mov	r3, r2
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	3338      	adds	r3, #56	; 0x38
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	3304      	adds	r3, #4
 8007066:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2200      	movs	r2, #0
 8007078:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2201      	movs	r2, #1
 800707e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007080:	7afb      	ldrb	r3, [r7, #11]
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	b2da      	uxtb	r2, r3
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d102      	bne.n	800709a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6818      	ldr	r0, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	6979      	ldr	r1, [r7, #20]
 80070b2:	f003 f835 	bl	800a120 <USB_EP0StartXfer>
 80070b6:	e008      	b.n	80070ca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	6979      	ldr	r1, [r7, #20]
 80070c6:	f002 fde3 	bl	8009c90 <USB_EPStartXfer>
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	f003 020f 	and.w	r2, r3, #15
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d901      	bls.n	80070f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e050      	b.n	8007194 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	da0f      	bge.n	800711a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	4613      	mov	r3, r2
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	3338      	adds	r3, #56	; 0x38
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	4413      	add	r3, r2
 800710e:	3304      	adds	r3, #4
 8007110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	705a      	strb	r2, [r3, #1]
 8007118:	e00d      	b.n	8007136 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800711a:	78fa      	ldrb	r2, [r7, #3]
 800711c:	4613      	mov	r3, r2
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	4413      	add	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	4413      	add	r3, r2
 800712c:	3304      	adds	r3, #4
 800712e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	b2da      	uxtb	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_PCD_EP_SetStall+0x82>
 8007152:	2302      	movs	r3, #2
 8007154:	e01e      	b.n	8007194 <HAL_PCD_EP_SetStall+0xc0>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	4618      	mov	r0, r3
 8007166:	f003 fa73 	bl	800a650 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	b2d9      	uxtb	r1, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007184:	461a      	mov	r2, r3
 8007186:	f003 fc63 	bl	800aa50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	f003 020f 	and.w	r2, r3, #15
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d901      	bls.n	80071ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e042      	b.n	8007240 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80071ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da0f      	bge.n	80071e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	f003 020f 	and.w	r2, r3, #15
 80071c8:	4613      	mov	r3, r2
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	3338      	adds	r3, #56	; 0x38
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4413      	add	r3, r2
 80071d6:	3304      	adds	r3, #4
 80071d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	705a      	strb	r2, [r3, #1]
 80071e0:	e00f      	b.n	8007202 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	f003 020f 	and.w	r2, r3, #15
 80071e8:	4613      	mov	r3, r2
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	4413      	add	r3, r2
 80071f8:	3304      	adds	r3, #4
 80071fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	f003 030f 	and.w	r3, r3, #15
 800720e:	b2da      	uxtb	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_PCD_EP_ClrStall+0x86>
 800721e:	2302      	movs	r3, #2
 8007220:	e00e      	b.n	8007240 <HAL_PCD_EP_ClrStall+0xa4>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	4618      	mov	r0, r3
 8007232:	f003 fa7b 	bl	800a72c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007258:	2b00      	cmp	r3, #0
 800725a:	da0c      	bge.n	8007276 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	f003 020f 	and.w	r2, r3, #15
 8007262:	4613      	mov	r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	3338      	adds	r3, #56	; 0x38
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4413      	add	r3, r2
 8007270:	3304      	adds	r3, #4
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e00c      	b.n	8007290 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	f003 020f 	and.w	r2, r3, #15
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	4413      	add	r3, r2
 800728c:	3304      	adds	r3, #4
 800728e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68f9      	ldr	r1, [r7, #12]
 8007296:	4618      	mov	r0, r3
 8007298:	f003 f89a 	bl	800a3d0 <USB_EPStopXfer>
 800729c:	4603      	mov	r3, r0
 800729e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80072a0:	7afb      	ldrb	r3, [r7, #11]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b08a      	sub	sp, #40	; 0x28
 80072ae:	af02      	add	r7, sp, #8
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	4613      	mov	r3, r2
 80072c2:	00db      	lsls	r3, r3, #3
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	3338      	adds	r3, #56	; 0x38
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	3304      	adds	r3, #4
 80072d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1a      	ldr	r2, [r3, #32]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d901      	bls.n	80072e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e06c      	b.n	80073bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d902      	bls.n	80072fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	3303      	adds	r3, #3
 8007302:	089b      	lsrs	r3, r3, #2
 8007304:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007306:	e02b      	b.n	8007360 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	69fa      	ldr	r2, [r7, #28]
 800731a:	429a      	cmp	r2, r3
 800731c:	d902      	bls.n	8007324 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	3303      	adds	r3, #3
 8007328:	089b      	lsrs	r3, r3, #2
 800732a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6919      	ldr	r1, [r3, #16]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	b2da      	uxtb	r2, r3
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800733c:	b2db      	uxtb	r3, r3
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	4603      	mov	r3, r0
 8007342:	6978      	ldr	r0, [r7, #20]
 8007344:	f003 f8ee 	bl	800a524 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	441a      	add	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a1a      	ldr	r2, [r3, #32]
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	441a      	add	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	429a      	cmp	r2, r3
 8007374:	d809      	bhi.n	800738a <PCD_WriteEmptyTxFifo+0xe0>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a1a      	ldr	r2, [r3, #32]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800737e:	429a      	cmp	r2, r3
 8007380:	d203      	bcs.n	800738a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1be      	bne.n	8007308 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	429a      	cmp	r2, r3
 8007394:	d811      	bhi.n	80073ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	2201      	movs	r2, #1
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	43db      	mvns	r3, r3
 80073b0:	6939      	ldr	r1, [r7, #16]
 80073b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073b6:	4013      	ands	r3, r2
 80073b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3720      	adds	r7, #32
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	333c      	adds	r3, #60	; 0x3c
 80073dc:	3304      	adds	r3, #4
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d17b      	bne.n	80074f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d015      	beq.n	8007430 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	4a61      	ldr	r2, [pc, #388]	; (800758c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	f240 80b9 	bls.w	8007580 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 80b3 	beq.w	8007580 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007426:	461a      	mov	r2, r3
 8007428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800742c:	6093      	str	r3, [r2, #8]
 800742e:	e0a7      	b.n	8007580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007446:	461a      	mov	r2, r3
 8007448:	2320      	movs	r3, #32
 800744a:	6093      	str	r3, [r2, #8]
 800744c:	e098      	b.n	8007580 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007454:	2b00      	cmp	r3, #0
 8007456:	f040 8093 	bne.w	8007580 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	4a4b      	ldr	r2, [pc, #300]	; (800758c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d90f      	bls.n	8007482 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007478:	461a      	mov	r2, r3
 800747a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747e:	6093      	str	r3, [r2, #8]
 8007480:	e07e      	b.n	8007580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	4613      	mov	r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	4413      	add	r3, r2
 8007494:	3304      	adds	r3, #4
 8007496:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	69da      	ldr	r2, [r3, #28]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	0159      	lsls	r1, r3, #5
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	440b      	add	r3, r1
 80074a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d114      	bne.n	80074e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074cc:	461a      	mov	r2, r3
 80074ce:	2101      	movs	r1, #1
 80074d0:	f003 fabe 	bl	800aa50 <USB_EP0_OutStart>
 80074d4:	e006      	b.n	80074e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	441a      	add	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f008 f98c 	bl	800f808 <HAL_PCD_DataOutStageCallback>
 80074f0:	e046      	b.n	8007580 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	4a26      	ldr	r2, [pc, #152]	; (8007590 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d124      	bne.n	8007544 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007510:	461a      	mov	r2, r3
 8007512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007516:	6093      	str	r3, [r2, #8]
 8007518:	e032      	b.n	8007580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d008      	beq.n	8007536 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	461a      	mov	r2, r3
 8007532:	2320      	movs	r3, #32
 8007534:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f008 f963 	bl	800f808 <HAL_PCD_DataOutStageCallback>
 8007542:	e01d      	b.n	8007580 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d114      	bne.n	8007574 <PCD_EP_OutXfrComplete_int+0x1b0>
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	4613      	mov	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	440b      	add	r3, r1
 8007558:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d108      	bne.n	8007574 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800756c:	461a      	mov	r2, r3
 800756e:	2100      	movs	r1, #0
 8007570:	f003 fa6e 	bl	800aa50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f008 f944 	bl	800f808 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	4f54300a 	.word	0x4f54300a
 8007590:	4f54310a 	.word	0x4f54310a

08007594 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	333c      	adds	r3, #60	; 0x3c
 80075ac:	3304      	adds	r3, #4
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4a15      	ldr	r2, [pc, #84]	; (800761c <PCD_EP_OutSetupPacket_int+0x88>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d90e      	bls.n	80075e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d009      	beq.n	80075e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e0:	461a      	mov	r2, r3
 80075e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f008 f8fb 	bl	800f7e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4a0a      	ldr	r2, [pc, #40]	; (800761c <PCD_EP_OutSetupPacket_int+0x88>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d90c      	bls.n	8007610 <PCD_EP_OutSetupPacket_int+0x7c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d108      	bne.n	8007610 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007608:	461a      	mov	r2, r3
 800760a:	2101      	movs	r1, #1
 800760c:	f003 fa20 	bl	800aa50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	4f54300a 	.word	0x4f54300a

08007620 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	460b      	mov	r3, r1
 800762a:	70fb      	strb	r3, [r7, #3]
 800762c:	4613      	mov	r3, r2
 800762e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d107      	bne.n	800764e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800763e:	883b      	ldrh	r3, [r7, #0]
 8007640:	0419      	lsls	r1, r3, #16
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	430a      	orrs	r2, r1
 800764a:	629a      	str	r2, [r3, #40]	; 0x28
 800764c:	e028      	b.n	80076a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007654:	0c1b      	lsrs	r3, r3, #16
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	4413      	add	r3, r2
 800765a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
 8007660:	e00d      	b.n	800767e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	3340      	adds	r3, #64	; 0x40
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	0c1b      	lsrs	r3, r3, #16
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	4413      	add	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	3301      	adds	r3, #1
 800767c:	73fb      	strb	r3, [r7, #15]
 800767e:	7bfa      	ldrb	r2, [r7, #15]
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	3b01      	subs	r3, #1
 8007684:	429a      	cmp	r2, r3
 8007686:	d3ec      	bcc.n	8007662 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007688:	883b      	ldrh	r3, [r7, #0]
 800768a:	0418      	lsls	r0, r3, #16
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	3b01      	subs	r3, #1
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	4302      	orrs	r2, r0
 8007698:	3340      	adds	r3, #64	; 0x40
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	887a      	ldrh	r2, [r7, #2]
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e267      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d075      	beq.n	80077f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007706:	4b88      	ldr	r3, [pc, #544]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 030c 	and.w	r3, r3, #12
 800770e:	2b04      	cmp	r3, #4
 8007710:	d00c      	beq.n	800772c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007712:	4b85      	ldr	r3, [pc, #532]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800771a:	2b08      	cmp	r3, #8
 800771c:	d112      	bne.n	8007744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800771e:	4b82      	ldr	r3, [pc, #520]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800772a:	d10b      	bne.n	8007744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800772c:	4b7e      	ldr	r3, [pc, #504]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d05b      	beq.n	80077f0 <HAL_RCC_OscConfig+0x108>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d157      	bne.n	80077f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e242      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800774c:	d106      	bne.n	800775c <HAL_RCC_OscConfig+0x74>
 800774e:	4b76      	ldr	r3, [pc, #472]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a75      	ldr	r2, [pc, #468]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	e01d      	b.n	8007798 <HAL_RCC_OscConfig+0xb0>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007764:	d10c      	bne.n	8007780 <HAL_RCC_OscConfig+0x98>
 8007766:	4b70      	ldr	r3, [pc, #448]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a6f      	ldr	r2, [pc, #444]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 800776c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	4b6d      	ldr	r3, [pc, #436]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a6c      	ldr	r2, [pc, #432]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	e00b      	b.n	8007798 <HAL_RCC_OscConfig+0xb0>
 8007780:	4b69      	ldr	r3, [pc, #420]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a68      	ldr	r2, [pc, #416]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	4b66      	ldr	r3, [pc, #408]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a65      	ldr	r2, [pc, #404]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d013      	beq.n	80077c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a0:	f7fc fca6 	bl	80040f0 <HAL_GetTick>
 80077a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077a6:	e008      	b.n	80077ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077a8:	f7fc fca2 	bl	80040f0 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b64      	cmp	r3, #100	; 0x64
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e207      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ba:	4b5b      	ldr	r3, [pc, #364]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0f0      	beq.n	80077a8 <HAL_RCC_OscConfig+0xc0>
 80077c6:	e014      	b.n	80077f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c8:	f7fc fc92 	bl	80040f0 <HAL_GetTick>
 80077cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077d0:	f7fc fc8e 	bl	80040f0 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b64      	cmp	r3, #100	; 0x64
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e1f3      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077e2:	4b51      	ldr	r3, [pc, #324]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1f0      	bne.n	80077d0 <HAL_RCC_OscConfig+0xe8>
 80077ee:	e000      	b.n	80077f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d063      	beq.n	80078c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077fe:	4b4a      	ldr	r3, [pc, #296]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 030c 	and.w	r3, r3, #12
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00b      	beq.n	8007822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800780a:	4b47      	ldr	r3, [pc, #284]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007812:	2b08      	cmp	r3, #8
 8007814:	d11c      	bne.n	8007850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007816:	4b44      	ldr	r3, [pc, #272]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d116      	bne.n	8007850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007822:	4b41      	ldr	r3, [pc, #260]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d005      	beq.n	800783a <HAL_RCC_OscConfig+0x152>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d001      	beq.n	800783a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e1c7      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800783a:	4b3b      	ldr	r3, [pc, #236]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	4937      	ldr	r1, [pc, #220]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 800784a:	4313      	orrs	r3, r2
 800784c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800784e:	e03a      	b.n	80078c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d020      	beq.n	800789a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007858:	4b34      	ldr	r3, [pc, #208]	; (800792c <HAL_RCC_OscConfig+0x244>)
 800785a:	2201      	movs	r2, #1
 800785c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800785e:	f7fc fc47 	bl	80040f0 <HAL_GetTick>
 8007862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007864:	e008      	b.n	8007878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007866:	f7fc fc43 	bl	80040f0 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d901      	bls.n	8007878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e1a8      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007878:	4b2b      	ldr	r3, [pc, #172]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0f0      	beq.n	8007866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007884:	4b28      	ldr	r3, [pc, #160]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	4925      	ldr	r1, [pc, #148]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 8007894:	4313      	orrs	r3, r2
 8007896:	600b      	str	r3, [r1, #0]
 8007898:	e015      	b.n	80078c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800789a:	4b24      	ldr	r3, [pc, #144]	; (800792c <HAL_RCC_OscConfig+0x244>)
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a0:	f7fc fc26 	bl	80040f0 <HAL_GetTick>
 80078a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078a6:	e008      	b.n	80078ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078a8:	f7fc fc22 	bl	80040f0 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e187      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ba:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1f0      	bne.n	80078a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0308 	and.w	r3, r3, #8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d036      	beq.n	8007940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d016      	beq.n	8007908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078da:	4b15      	ldr	r3, [pc, #84]	; (8007930 <HAL_RCC_OscConfig+0x248>)
 80078dc:	2201      	movs	r2, #1
 80078de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e0:	f7fc fc06 	bl	80040f0 <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078e8:	f7fc fc02 	bl	80040f0 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e167      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <HAL_RCC_OscConfig+0x240>)
 80078fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0f0      	beq.n	80078e8 <HAL_RCC_OscConfig+0x200>
 8007906:	e01b      	b.n	8007940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007908:	4b09      	ldr	r3, [pc, #36]	; (8007930 <HAL_RCC_OscConfig+0x248>)
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800790e:	f7fc fbef 	bl	80040f0 <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007914:	e00e      	b.n	8007934 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007916:	f7fc fbeb 	bl	80040f0 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d907      	bls.n	8007934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e150      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
 8007928:	40023800 	.word	0x40023800
 800792c:	42470000 	.word	0x42470000
 8007930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007934:	4b88      	ldr	r3, [pc, #544]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1ea      	bne.n	8007916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 8097 	beq.w	8007a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800794e:	2300      	movs	r3, #0
 8007950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007952:	4b81      	ldr	r3, [pc, #516]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10f      	bne.n	800797e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]
 8007962:	4b7d      	ldr	r3, [pc, #500]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	4a7c      	ldr	r2, [pc, #496]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800796c:	6413      	str	r3, [r2, #64]	; 0x40
 800796e:	4b7a      	ldr	r3, [pc, #488]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007976:	60bb      	str	r3, [r7, #8]
 8007978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800797a:	2301      	movs	r3, #1
 800797c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800797e:	4b77      	ldr	r3, [pc, #476]	; (8007b5c <HAL_RCC_OscConfig+0x474>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007986:	2b00      	cmp	r3, #0
 8007988:	d118      	bne.n	80079bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800798a:	4b74      	ldr	r3, [pc, #464]	; (8007b5c <HAL_RCC_OscConfig+0x474>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a73      	ldr	r2, [pc, #460]	; (8007b5c <HAL_RCC_OscConfig+0x474>)
 8007990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007996:	f7fc fbab 	bl	80040f0 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800799e:	f7fc fba7 	bl	80040f0 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e10c      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079b0:	4b6a      	ldr	r3, [pc, #424]	; (8007b5c <HAL_RCC_OscConfig+0x474>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d106      	bne.n	80079d2 <HAL_RCC_OscConfig+0x2ea>
 80079c4:	4b64      	ldr	r3, [pc, #400]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 80079c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c8:	4a63      	ldr	r2, [pc, #396]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	6713      	str	r3, [r2, #112]	; 0x70
 80079d0:	e01c      	b.n	8007a0c <HAL_RCC_OscConfig+0x324>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d10c      	bne.n	80079f4 <HAL_RCC_OscConfig+0x30c>
 80079da:	4b5f      	ldr	r3, [pc, #380]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079de:	4a5e      	ldr	r2, [pc, #376]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 80079e0:	f043 0304 	orr.w	r3, r3, #4
 80079e4:	6713      	str	r3, [r2, #112]	; 0x70
 80079e6:	4b5c      	ldr	r3, [pc, #368]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a5b      	ldr	r2, [pc, #364]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 80079ec:	f043 0301 	orr.w	r3, r3, #1
 80079f0:	6713      	str	r3, [r2, #112]	; 0x70
 80079f2:	e00b      	b.n	8007a0c <HAL_RCC_OscConfig+0x324>
 80079f4:	4b58      	ldr	r3, [pc, #352]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 80079f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f8:	4a57      	ldr	r2, [pc, #348]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 80079fa:	f023 0301 	bic.w	r3, r3, #1
 80079fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007a00:	4b55      	ldr	r3, [pc, #340]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a04:	4a54      	ldr	r2, [pc, #336]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007a06:	f023 0304 	bic.w	r3, r3, #4
 8007a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d015      	beq.n	8007a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a14:	f7fc fb6c 	bl	80040f0 <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a1a:	e00a      	b.n	8007a32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a1c:	f7fc fb68 	bl	80040f0 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e0cb      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a32:	4b49      	ldr	r3, [pc, #292]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0ee      	beq.n	8007a1c <HAL_RCC_OscConfig+0x334>
 8007a3e:	e014      	b.n	8007a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a40:	f7fc fb56 	bl	80040f0 <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a46:	e00a      	b.n	8007a5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a48:	f7fc fb52 	bl	80040f0 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e0b5      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a5e:	4b3e      	ldr	r3, [pc, #248]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1ee      	bne.n	8007a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d105      	bne.n	8007a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a70:	4b39      	ldr	r3, [pc, #228]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	4a38      	ldr	r2, [pc, #224]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 80a1 	beq.w	8007bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a86:	4b34      	ldr	r3, [pc, #208]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 030c 	and.w	r3, r3, #12
 8007a8e:	2b08      	cmp	r3, #8
 8007a90:	d05c      	beq.n	8007b4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d141      	bne.n	8007b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a9a:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <HAL_RCC_OscConfig+0x478>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa0:	f7fc fb26 	bl	80040f0 <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aa8:	f7fc fb22 	bl	80040f0 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e087      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aba:	4b27      	ldr	r3, [pc, #156]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1f0      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69da      	ldr	r2, [r3, #28]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	019b      	lsls	r3, r3, #6
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	085b      	lsrs	r3, r3, #1
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	041b      	lsls	r3, r3, #16
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	061b      	lsls	r3, r3, #24
 8007aea:	491b      	ldr	r1, [pc, #108]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007af0:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <HAL_RCC_OscConfig+0x478>)
 8007af2:	2201      	movs	r2, #1
 8007af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af6:	f7fc fafb 	bl	80040f0 <HAL_GetTick>
 8007afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007afc:	e008      	b.n	8007b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007afe:	f7fc faf7 	bl	80040f0 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e05c      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b10:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0f0      	beq.n	8007afe <HAL_RCC_OscConfig+0x416>
 8007b1c:	e054      	b.n	8007bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b1e:	4b10      	ldr	r3, [pc, #64]	; (8007b60 <HAL_RCC_OscConfig+0x478>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b24:	f7fc fae4 	bl	80040f0 <HAL_GetTick>
 8007b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b2c:	f7fc fae0 	bl	80040f0 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e045      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b3e:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <HAL_RCC_OscConfig+0x470>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1f0      	bne.n	8007b2c <HAL_RCC_OscConfig+0x444>
 8007b4a:	e03d      	b.n	8007bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d107      	bne.n	8007b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e038      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
 8007b58:	40023800 	.word	0x40023800
 8007b5c:	40007000 	.word	0x40007000
 8007b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b64:	4b1b      	ldr	r3, [pc, #108]	; (8007bd4 <HAL_RCC_OscConfig+0x4ec>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d028      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d121      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d11a      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b94:	4013      	ands	r3, r2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d111      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007baa:	085b      	lsrs	r3, r3, #1
 8007bac:	3b01      	subs	r3, #1
 8007bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d107      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d001      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40023800 	.word	0x40023800

08007bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e0cc      	b.n	8007d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bec:	4b68      	ldr	r3, [pc, #416]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d90c      	bls.n	8007c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bfa:	4b65      	ldr	r3, [pc, #404]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c02:	4b63      	ldr	r3, [pc, #396]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d001      	beq.n	8007c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e0b8      	b.n	8007d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d020      	beq.n	8007c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c2c:	4b59      	ldr	r3, [pc, #356]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	4a58      	ldr	r2, [pc, #352]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c44:	4b53      	ldr	r3, [pc, #332]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	4a52      	ldr	r2, [pc, #328]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c50:	4b50      	ldr	r3, [pc, #320]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	494d      	ldr	r1, [pc, #308]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d044      	beq.n	8007cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d107      	bne.n	8007c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c76:	4b47      	ldr	r3, [pc, #284]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d119      	bne.n	8007cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e07f      	b.n	8007d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d003      	beq.n	8007c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d107      	bne.n	8007ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c96:	4b3f      	ldr	r3, [pc, #252]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d109      	bne.n	8007cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e06f      	b.n	8007d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ca6:	4b3b      	ldr	r3, [pc, #236]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e067      	b.n	8007d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cb6:	4b37      	ldr	r3, [pc, #220]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f023 0203 	bic.w	r2, r3, #3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	4934      	ldr	r1, [pc, #208]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cc8:	f7fc fa12 	bl	80040f0 <HAL_GetTick>
 8007ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cce:	e00a      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cd0:	f7fc fa0e 	bl	80040f0 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e04f      	b.n	8007d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ce6:	4b2b      	ldr	r3, [pc, #172]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 020c 	and.w	r2, r3, #12
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d1eb      	bne.n	8007cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cf8:	4b25      	ldr	r3, [pc, #148]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d20c      	bcs.n	8007d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d06:	4b22      	ldr	r3, [pc, #136]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d0e:	4b20      	ldr	r3, [pc, #128]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0307 	and.w	r3, r3, #7
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d001      	beq.n	8007d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e032      	b.n	8007d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d008      	beq.n	8007d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d2c:	4b19      	ldr	r3, [pc, #100]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4916      	ldr	r1, [pc, #88]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d4a:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	490e      	ldr	r1, [pc, #56]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d5e:	f000 f821 	bl	8007da4 <HAL_RCC_GetSysClockFreq>
 8007d62:	4602      	mov	r2, r0
 8007d64:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	490a      	ldr	r1, [pc, #40]	; (8007d98 <HAL_RCC_ClockConfig+0x1c0>)
 8007d70:	5ccb      	ldrb	r3, [r1, r3]
 8007d72:	fa22 f303 	lsr.w	r3, r2, r3
 8007d76:	4a09      	ldr	r2, [pc, #36]	; (8007d9c <HAL_RCC_ClockConfig+0x1c4>)
 8007d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d7a:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <HAL_RCC_ClockConfig+0x1c8>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fc f972 	bl	8004068 <HAL_InitTick>

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	40023c00 	.word	0x40023c00
 8007d94:	40023800 	.word	0x40023800
 8007d98:	080141b4 	.word	0x080141b4
 8007d9c:	20000000 	.word	0x20000000
 8007da0:	20000024 	.word	0x20000024

08007da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da8:	b090      	sub	sp, #64	; 0x40
 8007daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
 8007db0:	2300      	movs	r3, #0
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db4:	2300      	movs	r3, #0
 8007db6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dbc:	4b59      	ldr	r3, [pc, #356]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 030c 	and.w	r3, r3, #12
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d00d      	beq.n	8007de4 <HAL_RCC_GetSysClockFreq+0x40>
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	f200 80a1 	bhi.w	8007f10 <HAL_RCC_GetSysClockFreq+0x16c>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d003      	beq.n	8007dde <HAL_RCC_GetSysClockFreq+0x3a>
 8007dd6:	e09b      	b.n	8007f10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007dd8:	4b53      	ldr	r3, [pc, #332]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8007dda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007ddc:	e09b      	b.n	8007f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dde:	4b53      	ldr	r3, [pc, #332]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8007de0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007de2:	e098      	b.n	8007f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007de4:	4b4f      	ldr	r3, [pc, #316]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dee:	4b4d      	ldr	r3, [pc, #308]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d028      	beq.n	8007e4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dfa:	4b4a      	ldr	r3, [pc, #296]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	099b      	lsrs	r3, r3, #6
 8007e00:	2200      	movs	r2, #0
 8007e02:	623b      	str	r3, [r7, #32]
 8007e04:	627a      	str	r2, [r7, #36]	; 0x24
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4b47      	ldr	r3, [pc, #284]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e10:	fb03 f201 	mul.w	r2, r3, r1
 8007e14:	2300      	movs	r3, #0
 8007e16:	fb00 f303 	mul.w	r3, r0, r3
 8007e1a:	4413      	add	r3, r2
 8007e1c:	4a43      	ldr	r2, [pc, #268]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e1e:	fba0 1202 	umull	r1, r2, r0, r2
 8007e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e24:	460a      	mov	r2, r1
 8007e26:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e2a:	4413      	add	r3, r2
 8007e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e30:	2200      	movs	r2, #0
 8007e32:	61bb      	str	r3, [r7, #24]
 8007e34:	61fa      	str	r2, [r7, #28]
 8007e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e3e:	f7f8 ff2b 	bl	8000c98 <__aeabi_uldivmod>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4613      	mov	r3, r2
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e4a:	e053      	b.n	8007ef4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e4c:	4b35      	ldr	r3, [pc, #212]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	099b      	lsrs	r3, r3, #6
 8007e52:	2200      	movs	r2, #0
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	617a      	str	r2, [r7, #20]
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e5e:	f04f 0b00 	mov.w	fp, #0
 8007e62:	4652      	mov	r2, sl
 8007e64:	465b      	mov	r3, fp
 8007e66:	f04f 0000 	mov.w	r0, #0
 8007e6a:	f04f 0100 	mov.w	r1, #0
 8007e6e:	0159      	lsls	r1, r3, #5
 8007e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e74:	0150      	lsls	r0, r2, #5
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	ebb2 080a 	subs.w	r8, r2, sl
 8007e7e:	eb63 090b 	sbc.w	r9, r3, fp
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	f04f 0300 	mov.w	r3, #0
 8007e8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007e8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007e92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007e96:	ebb2 0408 	subs.w	r4, r2, r8
 8007e9a:	eb63 0509 	sbc.w	r5, r3, r9
 8007e9e:	f04f 0200 	mov.w	r2, #0
 8007ea2:	f04f 0300 	mov.w	r3, #0
 8007ea6:	00eb      	lsls	r3, r5, #3
 8007ea8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007eac:	00e2      	lsls	r2, r4, #3
 8007eae:	4614      	mov	r4, r2
 8007eb0:	461d      	mov	r5, r3
 8007eb2:	eb14 030a 	adds.w	r3, r4, sl
 8007eb6:	603b      	str	r3, [r7, #0]
 8007eb8:	eb45 030b 	adc.w	r3, r5, fp
 8007ebc:	607b      	str	r3, [r7, #4]
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007eca:	4629      	mov	r1, r5
 8007ecc:	028b      	lsls	r3, r1, #10
 8007ece:	4621      	mov	r1, r4
 8007ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	028a      	lsls	r2, r1, #10
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4619      	mov	r1, r3
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	2200      	movs	r2, #0
 8007ee0:	60bb      	str	r3, [r7, #8]
 8007ee2:	60fa      	str	r2, [r7, #12]
 8007ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ee8:	f7f8 fed6 	bl	8000c98 <__aeabi_uldivmod>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ef4:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	0c1b      	lsrs	r3, r3, #16
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	3301      	adds	r3, #1
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f0e:	e002      	b.n	8007f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3740      	adds	r7, #64	; 0x40
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f22:	bf00      	nop
 8007f24:	40023800 	.word	0x40023800
 8007f28:	00f42400 	.word	0x00f42400
 8007f2c:	017d7840 	.word	0x017d7840

08007f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f30:	b480      	push	{r7}
 8007f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f34:	4b03      	ldr	r3, [pc, #12]	; (8007f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f36:	681b      	ldr	r3, [r3, #0]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20000000 	.word	0x20000000

08007f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f4c:	f7ff fff0 	bl	8007f30 <HAL_RCC_GetHCLKFreq>
 8007f50:	4602      	mov	r2, r0
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	0a9b      	lsrs	r3, r3, #10
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	4903      	ldr	r1, [pc, #12]	; (8007f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f5e:	5ccb      	ldrb	r3, [r1, r3]
 8007f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	080141c4 	.word	0x080141c4

08007f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f74:	f7ff ffdc 	bl	8007f30 <HAL_RCC_GetHCLKFreq>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	0b5b      	lsrs	r3, r3, #13
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	4903      	ldr	r1, [pc, #12]	; (8007f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f86:	5ccb      	ldrb	r3, [r1, r3]
 8007f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40023800 	.word	0x40023800
 8007f94:	080141c4 	.word	0x080141c4

08007f98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e041      	b.n	800802e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fa f80a 	bl	8001fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	f000 f9a0 	bl	800831c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d109      	bne.n	800805c <HAL_TIM_PWM_Start+0x24>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b01      	cmp	r3, #1
 8008052:	bf14      	ite	ne
 8008054:	2301      	movne	r3, #1
 8008056:	2300      	moveq	r3, #0
 8008058:	b2db      	uxtb	r3, r3
 800805a:	e022      	b.n	80080a2 <HAL_TIM_PWM_Start+0x6a>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b04      	cmp	r3, #4
 8008060:	d109      	bne.n	8008076 <HAL_TIM_PWM_Start+0x3e>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b01      	cmp	r3, #1
 800806c:	bf14      	ite	ne
 800806e:	2301      	movne	r3, #1
 8008070:	2300      	moveq	r3, #0
 8008072:	b2db      	uxtb	r3, r3
 8008074:	e015      	b.n	80080a2 <HAL_TIM_PWM_Start+0x6a>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b08      	cmp	r3, #8
 800807a:	d109      	bne.n	8008090 <HAL_TIM_PWM_Start+0x58>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b01      	cmp	r3, #1
 8008086:	bf14      	ite	ne
 8008088:	2301      	movne	r3, #1
 800808a:	2300      	moveq	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	e008      	b.n	80080a2 <HAL_TIM_PWM_Start+0x6a>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b01      	cmp	r3, #1
 800809a:	bf14      	ite	ne
 800809c:	2301      	movne	r3, #1
 800809e:	2300      	moveq	r3, #0
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e068      	b.n	800817c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d104      	bne.n	80080ba <HAL_TIM_PWM_Start+0x82>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080b8:	e013      	b.n	80080e2 <HAL_TIM_PWM_Start+0xaa>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b04      	cmp	r3, #4
 80080be:	d104      	bne.n	80080ca <HAL_TIM_PWM_Start+0x92>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080c8:	e00b      	b.n	80080e2 <HAL_TIM_PWM_Start+0xaa>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d104      	bne.n	80080da <HAL_TIM_PWM_Start+0xa2>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080d8:	e003      	b.n	80080e2 <HAL_TIM_PWM_Start+0xaa>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2201      	movs	r2, #1
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fb22 	bl	8008734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a23      	ldr	r2, [pc, #140]	; (8008184 <HAL_TIM_PWM_Start+0x14c>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d107      	bne.n	800810a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008108:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a1d      	ldr	r2, [pc, #116]	; (8008184 <HAL_TIM_PWM_Start+0x14c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d018      	beq.n	8008146 <HAL_TIM_PWM_Start+0x10e>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811c:	d013      	beq.n	8008146 <HAL_TIM_PWM_Start+0x10e>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a19      	ldr	r2, [pc, #100]	; (8008188 <HAL_TIM_PWM_Start+0x150>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00e      	beq.n	8008146 <HAL_TIM_PWM_Start+0x10e>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a17      	ldr	r2, [pc, #92]	; (800818c <HAL_TIM_PWM_Start+0x154>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d009      	beq.n	8008146 <HAL_TIM_PWM_Start+0x10e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a16      	ldr	r2, [pc, #88]	; (8008190 <HAL_TIM_PWM_Start+0x158>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d004      	beq.n	8008146 <HAL_TIM_PWM_Start+0x10e>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a14      	ldr	r2, [pc, #80]	; (8008194 <HAL_TIM_PWM_Start+0x15c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d111      	bne.n	800816a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b06      	cmp	r3, #6
 8008156:	d010      	beq.n	800817a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008168:	e007      	b.n	800817a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0201 	orr.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	40010000 	.word	0x40010000
 8008188:	40000400 	.word	0x40000400
 800818c:	40000800 	.word	0x40000800
 8008190:	40000c00 	.word	0x40000c00
 8008194:	40014000 	.word	0x40014000

08008198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d101      	bne.n	80081b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081b2:	2302      	movs	r3, #2
 80081b4:	e0ae      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b0c      	cmp	r3, #12
 80081c2:	f200 809f 	bhi.w	8008304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80081c6:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	08008201 	.word	0x08008201
 80081d0:	08008305 	.word	0x08008305
 80081d4:	08008305 	.word	0x08008305
 80081d8:	08008305 	.word	0x08008305
 80081dc:	08008241 	.word	0x08008241
 80081e0:	08008305 	.word	0x08008305
 80081e4:	08008305 	.word	0x08008305
 80081e8:	08008305 	.word	0x08008305
 80081ec:	08008283 	.word	0x08008283
 80081f0:	08008305 	.word	0x08008305
 80081f4:	08008305 	.word	0x08008305
 80081f8:	08008305 	.word	0x08008305
 80081fc:	080082c3 	.word	0x080082c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68b9      	ldr	r1, [r7, #8]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f908 	bl	800841c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0208 	orr.w	r2, r2, #8
 800821a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699a      	ldr	r2, [r3, #24]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0204 	bic.w	r2, r2, #4
 800822a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6999      	ldr	r1, [r3, #24]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	619a      	str	r2, [r3, #24]
      break;
 800823e:	e064      	b.n	800830a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 f94e 	bl	80084e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699a      	ldr	r2, [r3, #24]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800825a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699a      	ldr	r2, [r3, #24]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800826a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6999      	ldr	r1, [r3, #24]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	021a      	lsls	r2, r3, #8
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	619a      	str	r2, [r3, #24]
      break;
 8008280:	e043      	b.n	800830a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68b9      	ldr	r1, [r7, #8]
 8008288:	4618      	mov	r0, r3
 800828a:	f000 f999 	bl	80085c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f042 0208 	orr.w	r2, r2, #8
 800829c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0204 	bic.w	r2, r2, #4
 80082ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69d9      	ldr	r1, [r3, #28]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	691a      	ldr	r2, [r3, #16]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	61da      	str	r2, [r3, #28]
      break;
 80082c0:	e023      	b.n	800830a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 f9e3 	bl	8008694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69da      	ldr	r2, [r3, #28]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69da      	ldr	r2, [r3, #28]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69d9      	ldr	r1, [r3, #28]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	021a      	lsls	r2, r3, #8
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	61da      	str	r2, [r3, #28]
      break;
 8008302:	e002      	b.n	800830a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	75fb      	strb	r3, [r7, #23]
      break;
 8008308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a34      	ldr	r2, [pc, #208]	; (8008400 <TIM_Base_SetConfig+0xe4>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00f      	beq.n	8008354 <TIM_Base_SetConfig+0x38>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800833a:	d00b      	beq.n	8008354 <TIM_Base_SetConfig+0x38>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a31      	ldr	r2, [pc, #196]	; (8008404 <TIM_Base_SetConfig+0xe8>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d007      	beq.n	8008354 <TIM_Base_SetConfig+0x38>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a30      	ldr	r2, [pc, #192]	; (8008408 <TIM_Base_SetConfig+0xec>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d003      	beq.n	8008354 <TIM_Base_SetConfig+0x38>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a2f      	ldr	r2, [pc, #188]	; (800840c <TIM_Base_SetConfig+0xf0>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d108      	bne.n	8008366 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a25      	ldr	r2, [pc, #148]	; (8008400 <TIM_Base_SetConfig+0xe4>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d01b      	beq.n	80083a6 <TIM_Base_SetConfig+0x8a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008374:	d017      	beq.n	80083a6 <TIM_Base_SetConfig+0x8a>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a22      	ldr	r2, [pc, #136]	; (8008404 <TIM_Base_SetConfig+0xe8>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d013      	beq.n	80083a6 <TIM_Base_SetConfig+0x8a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a21      	ldr	r2, [pc, #132]	; (8008408 <TIM_Base_SetConfig+0xec>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00f      	beq.n	80083a6 <TIM_Base_SetConfig+0x8a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a20      	ldr	r2, [pc, #128]	; (800840c <TIM_Base_SetConfig+0xf0>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d00b      	beq.n	80083a6 <TIM_Base_SetConfig+0x8a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a1f      	ldr	r2, [pc, #124]	; (8008410 <TIM_Base_SetConfig+0xf4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d007      	beq.n	80083a6 <TIM_Base_SetConfig+0x8a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a1e      	ldr	r2, [pc, #120]	; (8008414 <TIM_Base_SetConfig+0xf8>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d003      	beq.n	80083a6 <TIM_Base_SetConfig+0x8a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a1d      	ldr	r2, [pc, #116]	; (8008418 <TIM_Base_SetConfig+0xfc>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d108      	bne.n	80083b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a08      	ldr	r2, [pc, #32]	; (8008400 <TIM_Base_SetConfig+0xe4>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d103      	bne.n	80083ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	691a      	ldr	r2, [r3, #16]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	615a      	str	r2, [r3, #20]
}
 80083f2:	bf00      	nop
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	40010000 	.word	0x40010000
 8008404:	40000400 	.word	0x40000400
 8008408:	40000800 	.word	0x40000800
 800840c:	40000c00 	.word	0x40000c00
 8008410:	40014000 	.word	0x40014000
 8008414:	40014400 	.word	0x40014400
 8008418:	40014800 	.word	0x40014800

0800841c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	f023 0201 	bic.w	r2, r3, #1
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f023 0302 	bic.w	r3, r3, #2
 8008464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	4313      	orrs	r3, r2
 800846e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a1c      	ldr	r2, [pc, #112]	; (80084e4 <TIM_OC1_SetConfig+0xc8>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d10c      	bne.n	8008492 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f023 0308 	bic.w	r3, r3, #8
 800847e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f023 0304 	bic.w	r3, r3, #4
 8008490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a13      	ldr	r2, [pc, #76]	; (80084e4 <TIM_OC1_SetConfig+0xc8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d111      	bne.n	80084be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	621a      	str	r2, [r3, #32]
}
 80084d8:	bf00      	nop
 80084da:	371c      	adds	r7, #28
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	40010000 	.word	0x40010000

080084e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	f023 0210 	bic.w	r2, r3, #16
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800851e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	021b      	lsls	r3, r3, #8
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	4313      	orrs	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f023 0320 	bic.w	r3, r3, #32
 8008532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a1e      	ldr	r2, [pc, #120]	; (80085bc <TIM_OC2_SetConfig+0xd4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d10d      	bne.n	8008564 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800854e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4313      	orrs	r3, r2
 800855a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a15      	ldr	r2, [pc, #84]	; (80085bc <TIM_OC2_SetConfig+0xd4>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d113      	bne.n	8008594 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800857a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	4313      	orrs	r3, r2
 8008586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	4313      	orrs	r3, r2
 8008592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	621a      	str	r2, [r3, #32]
}
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40010000 	.word	0x40010000

080085c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	021b      	lsls	r3, r3, #8
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	4313      	orrs	r3, r2
 8008614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a1d      	ldr	r2, [pc, #116]	; (8008690 <TIM_OC3_SetConfig+0xd0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d10d      	bne.n	800863a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	021b      	lsls	r3, r3, #8
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a14      	ldr	r2, [pc, #80]	; (8008690 <TIM_OC3_SetConfig+0xd0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d113      	bne.n	800866a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	011b      	lsls	r3, r3, #4
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	621a      	str	r2, [r3, #32]
}
 8008684:	bf00      	nop
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	40010000 	.word	0x40010000

08008694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	031b      	lsls	r3, r3, #12
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a10      	ldr	r2, [pc, #64]	; (8008730 <TIM_OC4_SetConfig+0x9c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d109      	bne.n	8008708 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	019b      	lsls	r3, r3, #6
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	4313      	orrs	r3, r2
 8008706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	621a      	str	r2, [r3, #32]
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	40010000 	.word	0x40010000

08008734 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f003 031f 	and.w	r3, r3, #31
 8008746:	2201      	movs	r2, #1
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a1a      	ldr	r2, [r3, #32]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	43db      	mvns	r3, r3
 8008756:	401a      	ands	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6a1a      	ldr	r2, [r3, #32]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f003 031f 	and.w	r3, r3, #31
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	fa01 f303 	lsl.w	r3, r1, r3
 800876c:	431a      	orrs	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	621a      	str	r2, [r3, #32]
}
 8008772:	bf00      	nop
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
	...

08008780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008790:	2b01      	cmp	r3, #1
 8008792:	d101      	bne.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008794:	2302      	movs	r3, #2
 8008796:	e050      	b.n	800883a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1c      	ldr	r2, [pc, #112]	; (8008848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d018      	beq.n	800880e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e4:	d013      	beq.n	800880e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a18      	ldr	r2, [pc, #96]	; (800884c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00e      	beq.n	800880e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a16      	ldr	r2, [pc, #88]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d009      	beq.n	800880e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a15      	ldr	r2, [pc, #84]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d004      	beq.n	800880e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a13      	ldr	r2, [pc, #76]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d10c      	bne.n	8008828 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	4313      	orrs	r3, r2
 800881e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	40010000 	.word	0x40010000
 800884c:	40000400 	.word	0x40000400
 8008850:	40000800 	.word	0x40000800
 8008854:	40000c00 	.word	0x40000c00
 8008858:	40014000 	.word	0x40014000

0800885c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e03f      	b.n	80088ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d106      	bne.n	8008888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7f9 fc24 	bl	80020d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2224      	movs	r2, #36	; 0x24
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800889e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 faa5 	bl	8008df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	691a      	ldr	r2, [r3, #16]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695a      	ldr	r2, [r3, #20]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2220      	movs	r2, #32
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	4613      	mov	r3, r2
 8008902:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b20      	cmp	r3, #32
 800890e:	d11d      	bne.n	800894c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <HAL_UART_Receive_DMA+0x26>
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e016      	b.n	800894e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008926:	2b01      	cmp	r3, #1
 8008928:	d101      	bne.n	800892e <HAL_UART_Receive_DMA+0x38>
 800892a:	2302      	movs	r3, #2
 800892c:	e00f      	b.n	800894e <HAL_UART_Receive_DMA+0x58>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	461a      	mov	r2, r3
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 f92a 	bl	8008b9c <UART_Start_Receive_DMA>
 8008948:	4603      	mov	r3, r0
 800894a:	e000      	b.n	800894e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800894c:	2302      	movs	r3, #2
  }
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	460b      	mov	r3, r1
 800899c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b09c      	sub	sp, #112	; 0x70
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d172      	bne.n	8008aac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80089c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089c8:	2200      	movs	r2, #0
 80089ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	330c      	adds	r3, #12
 80089d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d6:	e853 3f00 	ldrex	r3, [r3]
 80089da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80089e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	330c      	adds	r3, #12
 80089ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80089ee:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089f4:	e841 2300 	strex	r3, r2, [r1]
 80089f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1e5      	bne.n	80089cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3314      	adds	r3, #20
 8008a06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	e853 3f00 	ldrex	r3, [r3]
 8008a0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	f023 0301 	bic.w	r3, r3, #1
 8008a16:	667b      	str	r3, [r7, #100]	; 0x64
 8008a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3314      	adds	r3, #20
 8008a1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a20:	647a      	str	r2, [r7, #68]	; 0x44
 8008a22:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a28:	e841 2300 	strex	r3, r2, [r1]
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1e5      	bne.n	8008a00 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3314      	adds	r3, #20
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	623b      	str	r3, [r7, #32]
   return(result);
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8008a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3314      	adds	r3, #20
 8008a52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a54:	633a      	str	r2, [r7, #48]	; 0x30
 8008a56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e5      	bne.n	8008a34 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d119      	bne.n	8008aac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 0310 	bic.w	r3, r3, #16
 8008a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	330c      	adds	r3, #12
 8008a96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a98:	61fa      	str	r2, [r7, #28]
 8008a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	69b9      	ldr	r1, [r7, #24]
 8008a9e:	69fa      	ldr	r2, [r7, #28]
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e5      	bne.n	8008a78 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d106      	bne.n	8008ac2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008abc:	f7ff ff69 	bl	8008992 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ac0:	e002      	b.n	8008ac8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008ac2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ac4:	f7ff ff47 	bl	8008956 <HAL_UART_RxCpltCallback>
}
 8008ac8:	bf00      	nop
 8008aca:	3770      	adds	r7, #112	; 0x70
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d108      	bne.n	8008af8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008aea:	085b      	lsrs	r3, r3, #1
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	4619      	mov	r1, r3
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f7ff ff4e 	bl	8008992 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008af6:	e002      	b.n	8008afe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff ff36 	bl	800896a <HAL_UART_RxHalfCpltCallback>
}
 8008afe:	bf00      	nop
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b22:	2b80      	cmp	r3, #128	; 0x80
 8008b24:	bf0c      	ite	eq
 8008b26:	2301      	moveq	r3, #1
 8008b28:	2300      	movne	r3, #0
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b21      	cmp	r3, #33	; 0x21
 8008b38:	d108      	bne.n	8008b4c <UART_DMAError+0x46>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d005      	beq.n	8008b4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2200      	movs	r2, #0
 8008b44:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008b46:	68b8      	ldr	r0, [r7, #8]
 8008b48:	f000 f8c6 	bl	8008cd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b56:	2b40      	cmp	r3, #64	; 0x40
 8008b58:	bf0c      	ite	eq
 8008b5a:	2301      	moveq	r3, #1
 8008b5c:	2300      	movne	r3, #0
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b22      	cmp	r3, #34	; 0x22
 8008b6c:	d108      	bne.n	8008b80 <UART_DMAError+0x7a>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2200      	movs	r2, #0
 8008b78:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008b7a:	68b8      	ldr	r0, [r7, #8]
 8008b7c:	f000 f8d4 	bl	8008d28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	f043 0210 	orr.w	r2, r3, #16
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b8c:	68b8      	ldr	r0, [r7, #8]
 8008b8e:	f7ff fef6 	bl	800897e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b098      	sub	sp, #96	; 0x60
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2222      	movs	r2, #34	; 0x22
 8008bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	4a40      	ldr	r2, [pc, #256]	; (8008ccc <UART_Start_Receive_DMA+0x130>)
 8008bca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	4a3f      	ldr	r2, [pc, #252]	; (8008cd0 <UART_Start_Receive_DMA+0x134>)
 8008bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	4a3e      	ldr	r2, [pc, #248]	; (8008cd4 <UART_Start_Receive_DMA+0x138>)
 8008bda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	2200      	movs	r2, #0
 8008be2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008be4:	f107 0308 	add.w	r3, r7, #8
 8008be8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	88fb      	ldrh	r3, [r7, #6]
 8008bfc:	f7fc f830 	bl	8004c60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008c00:	2300      	movs	r3, #0
 8008c02:	613b      	str	r3, [r7, #16]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d019      	beq.n	8008c5a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	330c      	adds	r3, #12
 8008c2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c30:	e853 3f00 	ldrex	r3, [r3]
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	330c      	adds	r3, #12
 8008c44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c46:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008c48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008c4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e5      	bne.n	8008c26 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3314      	adds	r3, #20
 8008c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	f043 0301 	orr.w	r3, r3, #1
 8008c70:	657b      	str	r3, [r7, #84]	; 0x54
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3314      	adds	r3, #20
 8008c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c7a:	63ba      	str	r2, [r7, #56]	; 0x38
 8008c7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e5      	bne.n	8008c5a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3314      	adds	r3, #20
 8008c94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	e853 3f00 	ldrex	r3, [r3]
 8008c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3314      	adds	r3, #20
 8008cac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cae:	627a      	str	r2, [r7, #36]	; 0x24
 8008cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb2:	6a39      	ldr	r1, [r7, #32]
 8008cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb6:	e841 2300 	strex	r3, r2, [r1]
 8008cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1e5      	bne.n	8008c8e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3760      	adds	r7, #96	; 0x60
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	080089ab 	.word	0x080089ab
 8008cd0:	08008ad1 	.word	0x08008ad1
 8008cd4:	08008b07 	.word	0x08008b07

08008cd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b089      	sub	sp, #36	; 0x24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	330c      	adds	r3, #12
 8008ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008cf6:	61fb      	str	r3, [r7, #28]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	330c      	adds	r3, #12
 8008cfe:	69fa      	ldr	r2, [r7, #28]
 8008d00:	61ba      	str	r2, [r7, #24]
 8008d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	6979      	ldr	r1, [r7, #20]
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	e841 2300 	strex	r3, r2, [r1]
 8008d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e5      	bne.n	8008ce0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008d1c:	bf00      	nop
 8008d1e:	3724      	adds	r7, #36	; 0x24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b095      	sub	sp, #84	; 0x54
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	330c      	adds	r3, #12
 8008d36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d50:	643a      	str	r2, [r7, #64]	; 0x40
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e5      	bne.n	8008d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3314      	adds	r3, #20
 8008d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	f023 0301 	bic.w	r3, r3, #1
 8008d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3314      	adds	r3, #20
 8008d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e5      	bne.n	8008d64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d119      	bne.n	8008dd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	330c      	adds	r3, #12
 8008da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f023 0310 	bic.w	r3, r3, #16
 8008db6:	647b      	str	r3, [r7, #68]	; 0x44
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	330c      	adds	r3, #12
 8008dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dc0:	61ba      	str	r2, [r7, #24]
 8008dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6979      	ldr	r1, [r7, #20]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e5      	bne.n	8008da0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008de2:	bf00      	nop
 8008de4:	3754      	adds	r7, #84	; 0x54
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008df4:	b0c0      	sub	sp, #256	; 0x100
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0c:	68d9      	ldr	r1, [r3, #12]
 8008e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	ea40 0301 	orr.w	r3, r0, r1
 8008e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	431a      	orrs	r2, r3
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e48:	f021 010c 	bic.w	r1, r1, #12
 8008e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e56:	430b      	orrs	r3, r1
 8008e58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6a:	6999      	ldr	r1, [r3, #24]
 8008e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	ea40 0301 	orr.w	r3, r0, r1
 8008e76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	4b8f      	ldr	r3, [pc, #572]	; (80090bc <UART_SetConfig+0x2cc>)
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d005      	beq.n	8008e90 <UART_SetConfig+0xa0>
 8008e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b8d      	ldr	r3, [pc, #564]	; (80090c0 <UART_SetConfig+0x2d0>)
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d104      	bne.n	8008e9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e90:	f7ff f86e 	bl	8007f70 <HAL_RCC_GetPCLK2Freq>
 8008e94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e98:	e003      	b.n	8008ea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e9a:	f7ff f855 	bl	8007f48 <HAL_RCC_GetPCLK1Freq>
 8008e9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eac:	f040 810c 	bne.w	80090c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008eba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008ebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	1891      	adds	r1, r2, r2
 8008ec8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008eca:	415b      	adcs	r3, r3
 8008ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	eb12 0801 	adds.w	r8, r2, r1
 8008ed8:	4629      	mov	r1, r5
 8008eda:	eb43 0901 	adc.w	r9, r3, r1
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	f04f 0300 	mov.w	r3, #0
 8008ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ef2:	4690      	mov	r8, r2
 8008ef4:	4699      	mov	r9, r3
 8008ef6:	4623      	mov	r3, r4
 8008ef8:	eb18 0303 	adds.w	r3, r8, r3
 8008efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f00:	462b      	mov	r3, r5
 8008f02:	eb49 0303 	adc.w	r3, r9, r3
 8008f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f1e:	460b      	mov	r3, r1
 8008f20:	18db      	adds	r3, r3, r3
 8008f22:	653b      	str	r3, [r7, #80]	; 0x50
 8008f24:	4613      	mov	r3, r2
 8008f26:	eb42 0303 	adc.w	r3, r2, r3
 8008f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8008f2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f34:	f7f7 feb0 	bl	8000c98 <__aeabi_uldivmod>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4b61      	ldr	r3, [pc, #388]	; (80090c4 <UART_SetConfig+0x2d4>)
 8008f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f42:	095b      	lsrs	r3, r3, #5
 8008f44:	011c      	lsls	r4, r3, #4
 8008f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f58:	4642      	mov	r2, r8
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	1891      	adds	r1, r2, r2
 8008f5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f60:	415b      	adcs	r3, r3
 8008f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f68:	4641      	mov	r1, r8
 8008f6a:	eb12 0a01 	adds.w	sl, r2, r1
 8008f6e:	4649      	mov	r1, r9
 8008f70:	eb43 0b01 	adc.w	fp, r3, r1
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	f04f 0300 	mov.w	r3, #0
 8008f7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f88:	4692      	mov	sl, r2
 8008f8a:	469b      	mov	fp, r3
 8008f8c:	4643      	mov	r3, r8
 8008f8e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f96:	464b      	mov	r3, r9
 8008f98:	eb4b 0303 	adc.w	r3, fp, r3
 8008f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008fb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	18db      	adds	r3, r3, r3
 8008fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8008fba:	4613      	mov	r3, r2
 8008fbc:	eb42 0303 	adc.w	r3, r2, r3
 8008fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8008fc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008fc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008fca:	f7f7 fe65 	bl	8000c98 <__aeabi_uldivmod>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4b3b      	ldr	r3, [pc, #236]	; (80090c4 <UART_SetConfig+0x2d4>)
 8008fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8008fda:	095b      	lsrs	r3, r3, #5
 8008fdc:	2264      	movs	r2, #100	; 0x64
 8008fde:	fb02 f303 	mul.w	r3, r2, r3
 8008fe2:	1acb      	subs	r3, r1, r3
 8008fe4:	00db      	lsls	r3, r3, #3
 8008fe6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008fea:	4b36      	ldr	r3, [pc, #216]	; (80090c4 <UART_SetConfig+0x2d4>)
 8008fec:	fba3 2302 	umull	r2, r3, r3, r2
 8008ff0:	095b      	lsrs	r3, r3, #5
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ff8:	441c      	add	r4, r3
 8008ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009004:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	1891      	adds	r1, r2, r2
 8009012:	63b9      	str	r1, [r7, #56]	; 0x38
 8009014:	415b      	adcs	r3, r3
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800901c:	4641      	mov	r1, r8
 800901e:	1851      	adds	r1, r2, r1
 8009020:	6339      	str	r1, [r7, #48]	; 0x30
 8009022:	4649      	mov	r1, r9
 8009024:	414b      	adcs	r3, r1
 8009026:	637b      	str	r3, [r7, #52]	; 0x34
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009034:	4659      	mov	r1, fp
 8009036:	00cb      	lsls	r3, r1, #3
 8009038:	4651      	mov	r1, sl
 800903a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800903e:	4651      	mov	r1, sl
 8009040:	00ca      	lsls	r2, r1, #3
 8009042:	4610      	mov	r0, r2
 8009044:	4619      	mov	r1, r3
 8009046:	4603      	mov	r3, r0
 8009048:	4642      	mov	r2, r8
 800904a:	189b      	adds	r3, r3, r2
 800904c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009050:	464b      	mov	r3, r9
 8009052:	460a      	mov	r2, r1
 8009054:	eb42 0303 	adc.w	r3, r2, r3
 8009058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800905c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009068:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800906c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009070:	460b      	mov	r3, r1
 8009072:	18db      	adds	r3, r3, r3
 8009074:	62bb      	str	r3, [r7, #40]	; 0x28
 8009076:	4613      	mov	r3, r2
 8009078:	eb42 0303 	adc.w	r3, r2, r3
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800907e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009086:	f7f7 fe07 	bl	8000c98 <__aeabi_uldivmod>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <UART_SetConfig+0x2d4>)
 8009090:	fba3 1302 	umull	r1, r3, r3, r2
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	2164      	movs	r1, #100	; 0x64
 8009098:	fb01 f303 	mul.w	r3, r1, r3
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	3332      	adds	r3, #50	; 0x32
 80090a2:	4a08      	ldr	r2, [pc, #32]	; (80090c4 <UART_SetConfig+0x2d4>)
 80090a4:	fba2 2303 	umull	r2, r3, r2, r3
 80090a8:	095b      	lsrs	r3, r3, #5
 80090aa:	f003 0207 	and.w	r2, r3, #7
 80090ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4422      	add	r2, r4
 80090b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090b8:	e106      	b.n	80092c8 <UART_SetConfig+0x4d8>
 80090ba:	bf00      	nop
 80090bc:	40011000 	.word	0x40011000
 80090c0:	40011400 	.word	0x40011400
 80090c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090cc:	2200      	movs	r2, #0
 80090ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80090d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80090d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80090da:	4642      	mov	r2, r8
 80090dc:	464b      	mov	r3, r9
 80090de:	1891      	adds	r1, r2, r2
 80090e0:	6239      	str	r1, [r7, #32]
 80090e2:	415b      	adcs	r3, r3
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
 80090e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090ea:	4641      	mov	r1, r8
 80090ec:	1854      	adds	r4, r2, r1
 80090ee:	4649      	mov	r1, r9
 80090f0:	eb43 0501 	adc.w	r5, r3, r1
 80090f4:	f04f 0200 	mov.w	r2, #0
 80090f8:	f04f 0300 	mov.w	r3, #0
 80090fc:	00eb      	lsls	r3, r5, #3
 80090fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009102:	00e2      	lsls	r2, r4, #3
 8009104:	4614      	mov	r4, r2
 8009106:	461d      	mov	r5, r3
 8009108:	4643      	mov	r3, r8
 800910a:	18e3      	adds	r3, r4, r3
 800910c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009110:	464b      	mov	r3, r9
 8009112:	eb45 0303 	adc.w	r3, r5, r3
 8009116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800911a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009126:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800912a:	f04f 0200 	mov.w	r2, #0
 800912e:	f04f 0300 	mov.w	r3, #0
 8009132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009136:	4629      	mov	r1, r5
 8009138:	008b      	lsls	r3, r1, #2
 800913a:	4621      	mov	r1, r4
 800913c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009140:	4621      	mov	r1, r4
 8009142:	008a      	lsls	r2, r1, #2
 8009144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009148:	f7f7 fda6 	bl	8000c98 <__aeabi_uldivmod>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4b60      	ldr	r3, [pc, #384]	; (80092d4 <UART_SetConfig+0x4e4>)
 8009152:	fba3 2302 	umull	r2, r3, r3, r2
 8009156:	095b      	lsrs	r3, r3, #5
 8009158:	011c      	lsls	r4, r3, #4
 800915a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800915e:	2200      	movs	r2, #0
 8009160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009164:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800916c:	4642      	mov	r2, r8
 800916e:	464b      	mov	r3, r9
 8009170:	1891      	adds	r1, r2, r2
 8009172:	61b9      	str	r1, [r7, #24]
 8009174:	415b      	adcs	r3, r3
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800917c:	4641      	mov	r1, r8
 800917e:	1851      	adds	r1, r2, r1
 8009180:	6139      	str	r1, [r7, #16]
 8009182:	4649      	mov	r1, r9
 8009184:	414b      	adcs	r3, r1
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	f04f 0200 	mov.w	r2, #0
 800918c:	f04f 0300 	mov.w	r3, #0
 8009190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009194:	4659      	mov	r1, fp
 8009196:	00cb      	lsls	r3, r1, #3
 8009198:	4651      	mov	r1, sl
 800919a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800919e:	4651      	mov	r1, sl
 80091a0:	00ca      	lsls	r2, r1, #3
 80091a2:	4610      	mov	r0, r2
 80091a4:	4619      	mov	r1, r3
 80091a6:	4603      	mov	r3, r0
 80091a8:	4642      	mov	r2, r8
 80091aa:	189b      	adds	r3, r3, r2
 80091ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091b0:	464b      	mov	r3, r9
 80091b2:	460a      	mov	r2, r1
 80091b4:	eb42 0303 	adc.w	r3, r2, r3
 80091b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80091c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	f04f 0300 	mov.w	r3, #0
 80091d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80091d4:	4649      	mov	r1, r9
 80091d6:	008b      	lsls	r3, r1, #2
 80091d8:	4641      	mov	r1, r8
 80091da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091de:	4641      	mov	r1, r8
 80091e0:	008a      	lsls	r2, r1, #2
 80091e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80091e6:	f7f7 fd57 	bl	8000c98 <__aeabi_uldivmod>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4611      	mov	r1, r2
 80091f0:	4b38      	ldr	r3, [pc, #224]	; (80092d4 <UART_SetConfig+0x4e4>)
 80091f2:	fba3 2301 	umull	r2, r3, r3, r1
 80091f6:	095b      	lsrs	r3, r3, #5
 80091f8:	2264      	movs	r2, #100	; 0x64
 80091fa:	fb02 f303 	mul.w	r3, r2, r3
 80091fe:	1acb      	subs	r3, r1, r3
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	3332      	adds	r3, #50	; 0x32
 8009204:	4a33      	ldr	r2, [pc, #204]	; (80092d4 <UART_SetConfig+0x4e4>)
 8009206:	fba2 2303 	umull	r2, r3, r2, r3
 800920a:	095b      	lsrs	r3, r3, #5
 800920c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009210:	441c      	add	r4, r3
 8009212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009216:	2200      	movs	r2, #0
 8009218:	673b      	str	r3, [r7, #112]	; 0x70
 800921a:	677a      	str	r2, [r7, #116]	; 0x74
 800921c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009220:	4642      	mov	r2, r8
 8009222:	464b      	mov	r3, r9
 8009224:	1891      	adds	r1, r2, r2
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	415b      	adcs	r3, r3
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009230:	4641      	mov	r1, r8
 8009232:	1851      	adds	r1, r2, r1
 8009234:	6039      	str	r1, [r7, #0]
 8009236:	4649      	mov	r1, r9
 8009238:	414b      	adcs	r3, r1
 800923a:	607b      	str	r3, [r7, #4]
 800923c:	f04f 0200 	mov.w	r2, #0
 8009240:	f04f 0300 	mov.w	r3, #0
 8009244:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009248:	4659      	mov	r1, fp
 800924a:	00cb      	lsls	r3, r1, #3
 800924c:	4651      	mov	r1, sl
 800924e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009252:	4651      	mov	r1, sl
 8009254:	00ca      	lsls	r2, r1, #3
 8009256:	4610      	mov	r0, r2
 8009258:	4619      	mov	r1, r3
 800925a:	4603      	mov	r3, r0
 800925c:	4642      	mov	r2, r8
 800925e:	189b      	adds	r3, r3, r2
 8009260:	66bb      	str	r3, [r7, #104]	; 0x68
 8009262:	464b      	mov	r3, r9
 8009264:	460a      	mov	r2, r1
 8009266:	eb42 0303 	adc.w	r3, r2, r3
 800926a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800926c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	663b      	str	r3, [r7, #96]	; 0x60
 8009276:	667a      	str	r2, [r7, #100]	; 0x64
 8009278:	f04f 0200 	mov.w	r2, #0
 800927c:	f04f 0300 	mov.w	r3, #0
 8009280:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009284:	4649      	mov	r1, r9
 8009286:	008b      	lsls	r3, r1, #2
 8009288:	4641      	mov	r1, r8
 800928a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800928e:	4641      	mov	r1, r8
 8009290:	008a      	lsls	r2, r1, #2
 8009292:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009296:	f7f7 fcff 	bl	8000c98 <__aeabi_uldivmod>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <UART_SetConfig+0x4e4>)
 80092a0:	fba3 1302 	umull	r1, r3, r3, r2
 80092a4:	095b      	lsrs	r3, r3, #5
 80092a6:	2164      	movs	r1, #100	; 0x64
 80092a8:	fb01 f303 	mul.w	r3, r1, r3
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	3332      	adds	r3, #50	; 0x32
 80092b2:	4a08      	ldr	r2, [pc, #32]	; (80092d4 <UART_SetConfig+0x4e4>)
 80092b4:	fba2 2303 	umull	r2, r3, r2, r3
 80092b8:	095b      	lsrs	r3, r3, #5
 80092ba:	f003 020f 	and.w	r2, r3, #15
 80092be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4422      	add	r2, r4
 80092c6:	609a      	str	r2, [r3, #8]
}
 80092c8:	bf00      	nop
 80092ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80092ce:	46bd      	mov	sp, r7
 80092d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092d4:	51eb851f 	.word	0x51eb851f

080092d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092d8:	b084      	sub	sp, #16
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	f107 001c 	add.w	r0, r7, #28
 80092e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d122      	bne.n	8009336 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800931a:	2b01      	cmp	r3, #1
 800931c:	d105      	bne.n	800932a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 fbee 	bl	800ab0c <USB_CoreReset>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]
 8009334:	e01a      	b.n	800936c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 fbe2 	bl	800ab0c <USB_CoreReset>
 8009348:	4603      	mov	r3, r0
 800934a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800934c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	; 0x38
 800935e:	e005      	b.n	800936c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	2b01      	cmp	r3, #1
 8009370:	d10b      	bne.n	800938a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f043 0206 	orr.w	r2, r3, #6
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f043 0220 	orr.w	r2, r3, #32
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800938a:	7bfb      	ldrb	r3, [r7, #15]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009396:	b004      	add	sp, #16
 8009398:	4770      	bx	lr
	...

0800939c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	4613      	mov	r3, r2
 80093a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d165      	bne.n	800947c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	4a41      	ldr	r2, [pc, #260]	; (80094b8 <USB_SetTurnaroundTime+0x11c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d906      	bls.n	80093c6 <USB_SetTurnaroundTime+0x2a>
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	4a40      	ldr	r2, [pc, #256]	; (80094bc <USB_SetTurnaroundTime+0x120>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d202      	bcs.n	80093c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80093c0:	230f      	movs	r3, #15
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	e062      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	4a3c      	ldr	r2, [pc, #240]	; (80094bc <USB_SetTurnaroundTime+0x120>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d306      	bcc.n	80093dc <USB_SetTurnaroundTime+0x40>
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	4a3b      	ldr	r2, [pc, #236]	; (80094c0 <USB_SetTurnaroundTime+0x124>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d202      	bcs.n	80093dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80093d6:	230e      	movs	r3, #14
 80093d8:	617b      	str	r3, [r7, #20]
 80093da:	e057      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4a38      	ldr	r2, [pc, #224]	; (80094c0 <USB_SetTurnaroundTime+0x124>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d306      	bcc.n	80093f2 <USB_SetTurnaroundTime+0x56>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	4a37      	ldr	r2, [pc, #220]	; (80094c4 <USB_SetTurnaroundTime+0x128>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d202      	bcs.n	80093f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80093ec:	230d      	movs	r3, #13
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	e04c      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	4a33      	ldr	r2, [pc, #204]	; (80094c4 <USB_SetTurnaroundTime+0x128>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d306      	bcc.n	8009408 <USB_SetTurnaroundTime+0x6c>
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	4a32      	ldr	r2, [pc, #200]	; (80094c8 <USB_SetTurnaroundTime+0x12c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d802      	bhi.n	8009408 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009402:	230c      	movs	r3, #12
 8009404:	617b      	str	r3, [r7, #20]
 8009406:	e041      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	4a2f      	ldr	r2, [pc, #188]	; (80094c8 <USB_SetTurnaroundTime+0x12c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d906      	bls.n	800941e <USB_SetTurnaroundTime+0x82>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	4a2e      	ldr	r2, [pc, #184]	; (80094cc <USB_SetTurnaroundTime+0x130>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d802      	bhi.n	800941e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009418:	230b      	movs	r3, #11
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	e036      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	4a2a      	ldr	r2, [pc, #168]	; (80094cc <USB_SetTurnaroundTime+0x130>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d906      	bls.n	8009434 <USB_SetTurnaroundTime+0x98>
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	4a29      	ldr	r2, [pc, #164]	; (80094d0 <USB_SetTurnaroundTime+0x134>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d802      	bhi.n	8009434 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800942e:	230a      	movs	r3, #10
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	e02b      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	4a26      	ldr	r2, [pc, #152]	; (80094d0 <USB_SetTurnaroundTime+0x134>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d906      	bls.n	800944a <USB_SetTurnaroundTime+0xae>
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	4a25      	ldr	r2, [pc, #148]	; (80094d4 <USB_SetTurnaroundTime+0x138>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d202      	bcs.n	800944a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009444:	2309      	movs	r3, #9
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	e020      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	4a21      	ldr	r2, [pc, #132]	; (80094d4 <USB_SetTurnaroundTime+0x138>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d306      	bcc.n	8009460 <USB_SetTurnaroundTime+0xc4>
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4a20      	ldr	r2, [pc, #128]	; (80094d8 <USB_SetTurnaroundTime+0x13c>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d802      	bhi.n	8009460 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800945a:	2308      	movs	r3, #8
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	e015      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	4a1d      	ldr	r2, [pc, #116]	; (80094d8 <USB_SetTurnaroundTime+0x13c>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d906      	bls.n	8009476 <USB_SetTurnaroundTime+0xda>
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	4a1c      	ldr	r2, [pc, #112]	; (80094dc <USB_SetTurnaroundTime+0x140>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d202      	bcs.n	8009476 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009470:	2307      	movs	r3, #7
 8009472:	617b      	str	r3, [r7, #20]
 8009474:	e00a      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009476:	2306      	movs	r3, #6
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	e007      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d102      	bne.n	8009488 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009482:	2309      	movs	r3, #9
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	e001      	b.n	800948c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009488:	2309      	movs	r3, #9
 800948a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68da      	ldr	r2, [r3, #12]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	029b      	lsls	r3, r3, #10
 80094a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80094a4:	431a      	orrs	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	371c      	adds	r7, #28
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	00d8acbf 	.word	0x00d8acbf
 80094bc:	00e4e1c0 	.word	0x00e4e1c0
 80094c0:	00f42400 	.word	0x00f42400
 80094c4:	01067380 	.word	0x01067380
 80094c8:	011a499f 	.word	0x011a499f
 80094cc:	01312cff 	.word	0x01312cff
 80094d0:	014ca43f 	.word	0x014ca43f
 80094d4:	016e3600 	.word	0x016e3600
 80094d8:	01a6ab1f 	.word	0x01a6ab1f
 80094dc:	01e84800 	.word	0x01e84800

080094e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f043 0201 	orr.w	r2, r3, #1
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f023 0201 	bic.w	r2, r3, #1
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	460b      	mov	r3, r1
 800952e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d115      	bne.n	8009572 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009552:	2001      	movs	r0, #1
 8009554:	f7fa fdd8 	bl	8004108 <HAL_Delay>
      ms++;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3301      	adds	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 fa45 	bl	800a9ee <USB_GetMode>
 8009564:	4603      	mov	r3, r0
 8009566:	2b01      	cmp	r3, #1
 8009568:	d01e      	beq.n	80095a8 <USB_SetCurrentMode+0x84>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2b31      	cmp	r3, #49	; 0x31
 800956e:	d9f0      	bls.n	8009552 <USB_SetCurrentMode+0x2e>
 8009570:	e01a      	b.n	80095a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d115      	bne.n	80095a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009584:	2001      	movs	r0, #1
 8009586:	f7fa fdbf 	bl	8004108 <HAL_Delay>
      ms++;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	3301      	adds	r3, #1
 800958e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 fa2c 	bl	800a9ee <USB_GetMode>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <USB_SetCurrentMode+0x84>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2b31      	cmp	r3, #49	; 0x31
 80095a0:	d9f0      	bls.n	8009584 <USB_SetCurrentMode+0x60>
 80095a2:	e001      	b.n	80095a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e005      	b.n	80095b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b32      	cmp	r3, #50	; 0x32
 80095ac:	d101      	bne.n	80095b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e000      	b.n	80095b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095bc:	b084      	sub	sp, #16
 80095be:	b580      	push	{r7, lr}
 80095c0:	b086      	sub	sp, #24
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095d6:	2300      	movs	r3, #0
 80095d8:	613b      	str	r3, [r7, #16]
 80095da:	e009      	b.n	80095f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3340      	adds	r3, #64	; 0x40
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	2200      	movs	r2, #0
 80095e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	3301      	adds	r3, #1
 80095ee:	613b      	str	r3, [r7, #16]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	2b0e      	cmp	r3, #14
 80095f4:	d9f2      	bls.n	80095dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d11c      	bne.n	8009636 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800960a:	f043 0302 	orr.w	r3, r3, #2
 800960e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009614:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009620:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	639a      	str	r2, [r3, #56]	; 0x38
 8009634:	e00b      	b.n	800964e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009654:	461a      	mov	r2, r3
 8009656:	2300      	movs	r3, #0
 8009658:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009660:	4619      	mov	r1, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009668:	461a      	mov	r2, r3
 800966a:	680b      	ldr	r3, [r1, #0]
 800966c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	2b01      	cmp	r3, #1
 8009672:	d10c      	bne.n	800968e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d104      	bne.n	8009684 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800967a:	2100      	movs	r1, #0
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f965 	bl	800994c <USB_SetDevSpeed>
 8009682:	e008      	b.n	8009696 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009684:	2101      	movs	r1, #1
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f960 	bl	800994c <USB_SetDevSpeed>
 800968c:	e003      	b.n	8009696 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800968e:	2103      	movs	r1, #3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f95b 	bl	800994c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009696:	2110      	movs	r1, #16
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f8f3 	bl	8009884 <USB_FlushTxFifo>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f91f 	bl	80098ec <USB_FlushRxFifo>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096be:	461a      	mov	r2, r3
 80096c0:	2300      	movs	r3, #0
 80096c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ca:	461a      	mov	r2, r3
 80096cc:	2300      	movs	r3, #0
 80096ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d6:	461a      	mov	r2, r3
 80096d8:	2300      	movs	r3, #0
 80096da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096dc:	2300      	movs	r3, #0
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	e043      	b.n	800976a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096f8:	d118      	bne.n	800972c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4413      	add	r3, r2
 8009708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970c:	461a      	mov	r2, r3
 800970e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	e013      	b.n	800973e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009722:	461a      	mov	r2, r3
 8009724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	e008      	b.n	800973e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009738:	461a      	mov	r2, r3
 800973a:	2300      	movs	r3, #0
 800973c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974a:	461a      	mov	r2, r3
 800974c:	2300      	movs	r3, #0
 800974e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975c:	461a      	mov	r2, r3
 800975e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	3301      	adds	r3, #1
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	429a      	cmp	r2, r3
 8009770:	d3b7      	bcc.n	80096e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	e043      	b.n	8009800 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800978a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800978e:	d118      	bne.n	80097c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10a      	bne.n	80097ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a2:	461a      	mov	r2, r3
 80097a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	e013      	b.n	80097d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b8:	461a      	mov	r2, r3
 80097ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	e008      	b.n	80097d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ce:	461a      	mov	r2, r3
 80097d0:	2300      	movs	r3, #0
 80097d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e0:	461a      	mov	r2, r3
 80097e2:	2300      	movs	r3, #0
 80097e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f2:	461a      	mov	r2, r3
 80097f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	3301      	adds	r3, #1
 80097fe:	613b      	str	r3, [r7, #16]
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	429a      	cmp	r2, r3
 8009806:	d3b7      	bcc.n	8009778 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800981a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009828:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	2b00      	cmp	r3, #0
 800982e:	d105      	bne.n	800983c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	f043 0210 	orr.w	r2, r3, #16
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699a      	ldr	r2, [r3, #24]
 8009840:	4b0f      	ldr	r3, [pc, #60]	; (8009880 <USB_DevInit+0x2c4>)
 8009842:	4313      	orrs	r3, r2
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	f043 0208 	orr.w	r2, r3, #8
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800985a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985c:	2b01      	cmp	r3, #1
 800985e:	d107      	bne.n	8009870 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009868:	f043 0304 	orr.w	r3, r3, #4
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800987c:	b004      	add	sp, #16
 800987e:	4770      	bx	lr
 8009880:	803c3800 	.word	0x803c3800

08009884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3301      	adds	r3, #1
 8009896:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4a13      	ldr	r2, [pc, #76]	; (80098e8 <USB_FlushTxFifo+0x64>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d901      	bls.n	80098a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e01b      	b.n	80098dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	daf2      	bge.n	8009892 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	019b      	lsls	r3, r3, #6
 80098b4:	f043 0220 	orr.w	r2, r3, #32
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	3301      	adds	r3, #1
 80098c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	4a08      	ldr	r2, [pc, #32]	; (80098e8 <USB_FlushTxFifo+0x64>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d901      	bls.n	80098ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e006      	b.n	80098dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f003 0320 	and.w	r3, r3, #32
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	d0f0      	beq.n	80098bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	00030d40 	.word	0x00030d40

080098ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3301      	adds	r3, #1
 80098fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4a11      	ldr	r2, [pc, #68]	; (8009948 <USB_FlushRxFifo+0x5c>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d901      	bls.n	800990a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e018      	b.n	800993c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	daf2      	bge.n	80098f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2210      	movs	r2, #16
 800991a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3301      	adds	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4a08      	ldr	r2, [pc, #32]	; (8009948 <USB_FlushRxFifo+0x5c>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d901      	bls.n	800992e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e006      	b.n	800993c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	f003 0310 	and.w	r3, r3, #16
 8009936:	2b10      	cmp	r3, #16
 8009938:	d0f0      	beq.n	800991c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	00030d40 	.word	0x00030d40

0800994c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800996c:	4313      	orrs	r3, r2
 800996e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800997e:	b480      	push	{r7}
 8009980:	b087      	sub	sp, #28
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f003 0306 	and.w	r3, r3, #6
 8009996:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800999e:	2300      	movs	r3, #0
 80099a0:	75fb      	strb	r3, [r7, #23]
 80099a2:	e00a      	b.n	80099ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d002      	beq.n	80099b0 <USB_GetDevSpeed+0x32>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b06      	cmp	r3, #6
 80099ae:	d102      	bne.n	80099b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80099b0:	2302      	movs	r3, #2
 80099b2:	75fb      	strb	r3, [r7, #23]
 80099b4:	e001      	b.n	80099ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80099b6:	230f      	movs	r3, #15
 80099b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	371c      	adds	r7, #28
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	785b      	ldrb	r3, [r3, #1]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d13a      	bne.n	8009a5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ea:	69da      	ldr	r2, [r3, #28]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	f003 030f 	and.w	r3, r3, #15
 80099f4:	2101      	movs	r1, #1
 80099f6:	fa01 f303 	lsl.w	r3, r1, r3
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	68f9      	ldr	r1, [r7, #12]
 80099fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a02:	4313      	orrs	r3, r2
 8009a04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d155      	bne.n	8009ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	791b      	ldrb	r3, [r3, #4]
 8009a36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	059b      	lsls	r3, r3, #22
 8009a3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a40:	4313      	orrs	r3, r2
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	0151      	lsls	r1, r2, #5
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	440a      	add	r2, r1
 8009a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	e036      	b.n	8009ac8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a60:	69da      	ldr	r2, [r3, #28]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a70:	041b      	lsls	r3, r3, #16
 8009a72:	68f9      	ldr	r1, [r7, #12]
 8009a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d11a      	bne.n	8009ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	791b      	ldrb	r3, [r3, #4]
 8009aac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009aae:	430b      	orrs	r3, r1
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	0151      	lsls	r1, r2, #5
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	440a      	add	r2, r1
 8009aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
	...

08009ad8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	785b      	ldrb	r3, [r3, #1]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d161      	bne.n	8009bb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b0a:	d11f      	bne.n	8009b4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	0151      	lsls	r1, r2, #5
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	440a      	add	r2, r1
 8009b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	015a      	lsls	r2, r3, #5
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4413      	add	r3, r2
 8009b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	0151      	lsls	r1, r2, #5
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	440a      	add	r2, r1
 8009b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	43db      	mvns	r3, r3
 8009b66:	68f9      	ldr	r1, [r7, #12]
 8009b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b76:	69da      	ldr	r2, [r3, #28]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	f003 030f 	and.w	r3, r3, #15
 8009b80:	2101      	movs	r1, #1
 8009b82:	fa01 f303 	lsl.w	r3, r1, r3
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	43db      	mvns	r3, r3
 8009b8a:	68f9      	ldr	r1, [r7, #12]
 8009b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b90:	4013      	ands	r3, r2
 8009b92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	0159      	lsls	r1, r3, #5
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	440b      	add	r3, r1
 8009baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bae:	4619      	mov	r1, r3
 8009bb0:	4b35      	ldr	r3, [pc, #212]	; (8009c88 <USB_DeactivateEndpoint+0x1b0>)
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	600b      	str	r3, [r1, #0]
 8009bb6:	e060      	b.n	8009c7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bce:	d11f      	bne.n	8009c10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	0151      	lsls	r1, r2, #5
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	440a      	add	r2, r1
 8009be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	0151      	lsls	r1, r2, #5
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	440a      	add	r2, r1
 8009c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	f003 030f 	and.w	r3, r3, #15
 8009c20:	2101      	movs	r1, #1
 8009c22:	fa01 f303 	lsl.w	r3, r1, r3
 8009c26:	041b      	lsls	r3, r3, #16
 8009c28:	43db      	mvns	r3, r3
 8009c2a:	68f9      	ldr	r1, [r7, #12]
 8009c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c30:	4013      	ands	r3, r2
 8009c32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c3a:	69da      	ldr	r2, [r3, #28]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	f003 030f 	and.w	r3, r3, #15
 8009c44:	2101      	movs	r1, #1
 8009c46:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4a:	041b      	lsls	r3, r3, #16
 8009c4c:	43db      	mvns	r3, r3
 8009c4e:	68f9      	ldr	r1, [r7, #12]
 8009c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c54:	4013      	ands	r3, r2
 8009c56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	0159      	lsls	r1, r3, #5
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	440b      	add	r3, r1
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c72:	4619      	mov	r1, r3
 8009c74:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <USB_DeactivateEndpoint+0x1b4>)
 8009c76:	4013      	ands	r3, r2
 8009c78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	ec337800 	.word	0xec337800
 8009c8c:	eff37800 	.word	0xeff37800

08009c90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08a      	sub	sp, #40	; 0x28
 8009c94:	af02      	add	r7, sp, #8
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	785b      	ldrb	r3, [r3, #1]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	f040 815c 	bne.w	8009f6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d132      	bne.n	8009d20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	69ba      	ldr	r2, [r7, #24]
 8009cca:	0151      	lsls	r1, r2, #5
 8009ccc:	69fa      	ldr	r2, [r7, #28]
 8009cce:	440a      	add	r2, r1
 8009cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	0151      	lsls	r1, r2, #5
 8009cf0:	69fa      	ldr	r2, [r7, #28]
 8009cf2:	440a      	add	r2, r1
 8009cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	69ba      	ldr	r2, [r7, #24]
 8009d0e:	0151      	lsls	r1, r2, #5
 8009d10:	69fa      	ldr	r2, [r7, #28]
 8009d12:	440a      	add	r2, r1
 8009d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d18:	0cdb      	lsrs	r3, r3, #19
 8009d1a:	04db      	lsls	r3, r3, #19
 8009d1c:	6113      	str	r3, [r2, #16]
 8009d1e:	e074      	b.n	8009e0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	0151      	lsls	r1, r2, #5
 8009d32:	69fa      	ldr	r2, [r7, #28]
 8009d34:	440a      	add	r2, r1
 8009d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d3a:	0cdb      	lsrs	r3, r3, #19
 8009d3c:	04db      	lsls	r3, r3, #19
 8009d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	69ba      	ldr	r2, [r7, #24]
 8009d50:	0151      	lsls	r1, r2, #5
 8009d52:	69fa      	ldr	r2, [r7, #28]
 8009d54:	440a      	add	r2, r1
 8009d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	6999      	ldr	r1, [r3, #24]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	440b      	add	r3, r1
 8009d7c:	1e59      	subs	r1, r3, #1
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009d88:	4b9d      	ldr	r3, [pc, #628]	; (800a000 <USB_EPStartXfer+0x370>)
 8009d8a:	400b      	ands	r3, r1
 8009d8c:	69b9      	ldr	r1, [r7, #24]
 8009d8e:	0148      	lsls	r0, r1, #5
 8009d90:	69f9      	ldr	r1, [r7, #28]
 8009d92:	4401      	add	r1, r0
 8009d94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da8:	691a      	ldr	r2, [r3, #16]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009db2:	69b9      	ldr	r1, [r7, #24]
 8009db4:	0148      	lsls	r0, r1, #5
 8009db6:	69f9      	ldr	r1, [r7, #28]
 8009db8:	4401      	add	r1, r0
 8009dba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	791b      	ldrb	r3, [r3, #4]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d11f      	bne.n	8009e0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	0151      	lsls	r1, r2, #5
 8009ddc:	69fa      	ldr	r2, [r7, #28]
 8009dde:	440a      	add	r2, r1
 8009de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009de8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	015a      	lsls	r2, r3, #5
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	69ba      	ldr	r2, [r7, #24]
 8009dfa:	0151      	lsls	r1, r2, #5
 8009dfc:	69fa      	ldr	r2, [r7, #28]
 8009dfe:	440a      	add	r2, r1
 8009e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d14b      	bne.n	8009ea8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d009      	beq.n	8009e2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e24:	461a      	mov	r2, r3
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	791b      	ldrb	r3, [r3, #4]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d128      	bne.n	8009e86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d110      	bne.n	8009e66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	0151      	lsls	r1, r2, #5
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	440a      	add	r2, r1
 8009e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	e00f      	b.n	8009e86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	69ba      	ldr	r2, [r7, #24]
 8009e76:	0151      	lsls	r1, r2, #5
 8009e78:	69fa      	ldr	r2, [r7, #28]
 8009e7a:	440a      	add	r2, r1
 8009e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	015a      	lsls	r2, r3, #5
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	69ba      	ldr	r2, [r7, #24]
 8009e96:	0151      	lsls	r1, r2, #5
 8009e98:	69fa      	ldr	r2, [r7, #28]
 8009e9a:	440a      	add	r2, r1
 8009e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	e133      	b.n	800a110 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	0151      	lsls	r1, r2, #5
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	440a      	add	r2, r1
 8009ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ec6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	791b      	ldrb	r3, [r3, #4]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d015      	beq.n	8009efc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 811b 	beq.w	800a110 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	f003 030f 	and.w	r3, r3, #15
 8009eea:	2101      	movs	r1, #1
 8009eec:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef0:	69f9      	ldr	r1, [r7, #28]
 8009ef2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	634b      	str	r3, [r1, #52]	; 0x34
 8009efa:	e109      	b.n	800a110 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d110      	bne.n	8009f2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	0151      	lsls	r1, r2, #5
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	440a      	add	r2, r1
 8009f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	e00f      	b.n	8009f4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	0151      	lsls	r1, r2, #5
 8009f40:	69fa      	ldr	r2, [r7, #28]
 8009f42:	440a      	add	r2, r1
 8009f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	6919      	ldr	r1, [r3, #16]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	781a      	ldrb	r2, [r3, #0]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	b298      	uxth	r0, r3
 8009f5c:	79fb      	ldrb	r3, [r7, #7]
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	4603      	mov	r3, r0
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f000 fade 	bl	800a524 <USB_WritePacket>
 8009f68:	e0d2      	b.n	800a110 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f84:	0cdb      	lsrs	r3, r3, #19
 8009f86:	04db      	lsls	r3, r3, #19
 8009f88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	69fa      	ldr	r2, [r7, #28]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d126      	bne.n	800a004 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc2:	691a      	ldr	r2, [r3, #16]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fcc:	69b9      	ldr	r1, [r7, #24]
 8009fce:	0148      	lsls	r0, r1, #5
 8009fd0:	69f9      	ldr	r1, [r7, #28]
 8009fd2:	4401      	add	r1, r0
 8009fd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	015a      	lsls	r2, r3, #5
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	69ba      	ldr	r2, [r7, #24]
 8009fec:	0151      	lsls	r1, r2, #5
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	440a      	add	r2, r1
 8009ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ffa:	6113      	str	r3, [r2, #16]
 8009ffc:	e03a      	b.n	800a074 <USB_EPStartXfer+0x3e4>
 8009ffe:	bf00      	nop
 800a000:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	699a      	ldr	r2, [r3, #24]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	4413      	add	r3, r2
 800a00e:	1e5a      	subs	r2, r3, #1
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	fbb2 f3f3 	udiv	r3, r2, r3
 800a018:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	8afa      	ldrh	r2, [r7, #22]
 800a020:	fb03 f202 	mul.w	r2, r3, r2
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a034:	691a      	ldr	r2, [r3, #16]
 800a036:	8afb      	ldrh	r3, [r7, #22]
 800a038:	04d9      	lsls	r1, r3, #19
 800a03a:	4b38      	ldr	r3, [pc, #224]	; (800a11c <USB_EPStartXfer+0x48c>)
 800a03c:	400b      	ands	r3, r1
 800a03e:	69b9      	ldr	r1, [r7, #24]
 800a040:	0148      	lsls	r0, r1, #5
 800a042:	69f9      	ldr	r1, [r7, #28]
 800a044:	4401      	add	r1, r0
 800a046:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a04a:	4313      	orrs	r3, r2
 800a04c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	015a      	lsls	r2, r3, #5
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	4413      	add	r3, r2
 800a056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05a:	691a      	ldr	r2, [r3, #16]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a064:	69b9      	ldr	r1, [r7, #24]
 800a066:	0148      	lsls	r0, r1, #5
 800a068:	69f9      	ldr	r1, [r7, #28]
 800a06a:	4401      	add	r1, r0
 800a06c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a070:	4313      	orrs	r3, r2
 800a072:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a074:	79fb      	ldrb	r3, [r7, #7]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d10d      	bne.n	800a096 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d009      	beq.n	800a096 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	6919      	ldr	r1, [r3, #16]
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a092:	460a      	mov	r2, r1
 800a094:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	791b      	ldrb	r3, [r3, #4]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d128      	bne.n	800a0f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d110      	bne.n	800a0d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	0151      	lsls	r1, r2, #5
 800a0c0:	69fa      	ldr	r2, [r7, #28]
 800a0c2:	440a      	add	r2, r1
 800a0c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0cc:	6013      	str	r3, [r2, #0]
 800a0ce:	e00f      	b.n	800a0f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	69fa      	ldr	r2, [r7, #28]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	0151      	lsls	r1, r2, #5
 800a102:	69fa      	ldr	r2, [r7, #28]
 800a104:	440a      	add	r2, r1
 800a106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a10a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a10e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3720      	adds	r7, #32
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	1ff80000 	.word	0x1ff80000

0800a120 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	4613      	mov	r3, r2
 800a12c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	785b      	ldrb	r3, [r3, #1]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	f040 80ce 	bne.w	800a2de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d132      	bne.n	800a1b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	0151      	lsls	r1, r2, #5
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	440a      	add	r2, r1
 800a160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a164:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a168:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a16c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	015a      	lsls	r2, r3, #5
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	4413      	add	r3, r2
 800a176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	0151      	lsls	r1, r2, #5
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	440a      	add	r2, r1
 800a184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a18c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a8:	0cdb      	lsrs	r3, r3, #19
 800a1aa:	04db      	lsls	r3, r3, #19
 800a1ac:	6113      	str	r3, [r2, #16]
 800a1ae:	e04e      	b.n	800a24e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ca:	0cdb      	lsrs	r3, r3, #19
 800a1cc:	04db      	lsls	r3, r3, #19
 800a1ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	0151      	lsls	r1, r2, #5
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	440a      	add	r2, r1
 800a1e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	699a      	ldr	r2, [r3, #24]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d903      	bls.n	800a208 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	68da      	ldr	r2, [r3, #12]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	0151      	lsls	r1, r2, #5
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	440a      	add	r2, r1
 800a21e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a222:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a234:	691a      	ldr	r2, [r3, #16]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a23e:	6939      	ldr	r1, [r7, #16]
 800a240:	0148      	lsls	r0, r1, #5
 800a242:	6979      	ldr	r1, [r7, #20]
 800a244:	4401      	add	r1, r0
 800a246:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a24a:	4313      	orrs	r3, r2
 800a24c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a24e:	79fb      	ldrb	r3, [r7, #7]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d11e      	bne.n	800a292 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d009      	beq.n	800a270 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a268:	461a      	mov	r2, r3
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	0151      	lsls	r1, r2, #5
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	440a      	add	r2, r1
 800a286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a28a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	e097      	b.n	800a3c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	015a      	lsls	r2, r3, #5
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	4413      	add	r3, r2
 800a29a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	0151      	lsls	r1, r2, #5
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	440a      	add	r2, r1
 800a2a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 8083 	beq.w	800a3c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	f003 030f 	and.w	r3, r3, #15
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d2:	6979      	ldr	r1, [r7, #20]
 800a2d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	634b      	str	r3, [r1, #52]	; 0x34
 800a2dc:	e071      	b.n	800a3c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	0151      	lsls	r1, r2, #5
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2f8:	0cdb      	lsrs	r3, r3, #19
 800a2fa:	04db      	lsls	r3, r3, #19
 800a2fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	015a      	lsls	r2, r3, #5
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	4413      	add	r3, r2
 800a306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	0151      	lsls	r1, r2, #5
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	440a      	add	r2, r1
 800a314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a31c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a320:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	0151      	lsls	r1, r2, #5
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	440a      	add	r2, r1
 800a350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a358:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	4413      	add	r3, r2
 800a362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a366:	691a      	ldr	r2, [r3, #16]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a370:	6939      	ldr	r1, [r7, #16]
 800a372:	0148      	lsls	r0, r1, #5
 800a374:	6979      	ldr	r1, [r7, #20]
 800a376:	4401      	add	r1, r0
 800a378:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a37c:	4313      	orrs	r3, r2
 800a37e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d10d      	bne.n	800a3a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d009      	beq.n	800a3a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	6919      	ldr	r1, [r3, #16]
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39e:	460a      	mov	r2, r1
 800a3a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	0151      	lsls	r1, r2, #5
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	440a      	add	r2, r1
 800a3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	371c      	adds	r7, #28
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	785b      	ldrb	r3, [r3, #1]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d14a      	bne.n	800a484 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	015a      	lsls	r2, r3, #5
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a406:	f040 8086 	bne.w	800a516 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	7812      	ldrb	r2, [r2, #0]
 800a41e:	0151      	lsls	r1, r2, #5
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	440a      	add	r2, r1
 800a424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a428:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a42c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	7812      	ldrb	r2, [r2, #0]
 800a442:	0151      	lsls	r1, r2, #5
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	440a      	add	r2, r1
 800a448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a44c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a450:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	3301      	adds	r3, #1
 800a456:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a45e:	4293      	cmp	r3, r2
 800a460:	d902      	bls.n	800a468 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	75fb      	strb	r3, [r7, #23]
          break;
 800a466:	e056      	b.n	800a516 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	4413      	add	r3, r2
 800a472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a47c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a480:	d0e7      	beq.n	800a452 <USB_EPStopXfer+0x82>
 800a482:	e048      	b.n	800a516 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	015a      	lsls	r2, r3, #5
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	4413      	add	r3, r2
 800a48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a49c:	d13b      	bne.n	800a516 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	015a      	lsls	r2, r3, #5
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	7812      	ldrb	r2, [r2, #0]
 800a4b2:	0151      	lsls	r1, r2, #5
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	440a      	add	r2, r1
 800a4b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	7812      	ldrb	r2, [r2, #0]
 800a4d6:	0151      	lsls	r1, r2, #5
 800a4d8:	693a      	ldr	r2, [r7, #16]
 800a4da:	440a      	add	r2, r1
 800a4dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d902      	bls.n	800a4fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	75fb      	strb	r3, [r7, #23]
          break;
 800a4fa:	e00c      	b.n	800a516 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a514:	d0e7      	beq.n	800a4e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a516:	7dfb      	ldrb	r3, [r7, #23]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	371c      	adds	r7, #28
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a524:	b480      	push	{r7}
 800a526:	b089      	sub	sp, #36	; 0x24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	4611      	mov	r1, r2
 800a530:	461a      	mov	r2, r3
 800a532:	460b      	mov	r3, r1
 800a534:	71fb      	strb	r3, [r7, #7]
 800a536:	4613      	mov	r3, r2
 800a538:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a542:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a546:	2b00      	cmp	r3, #0
 800a548:	d123      	bne.n	800a592 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a54a:	88bb      	ldrh	r3, [r7, #4]
 800a54c:	3303      	adds	r3, #3
 800a54e:	089b      	lsrs	r3, r3, #2
 800a550:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a552:	2300      	movs	r3, #0
 800a554:	61bb      	str	r3, [r7, #24]
 800a556:	e018      	b.n	800a58a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	031a      	lsls	r2, r3, #12
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a564:	461a      	mov	r2, r3
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	3301      	adds	r3, #1
 800a570:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	3301      	adds	r3, #1
 800a576:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	3301      	adds	r3, #1
 800a57c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	3301      	adds	r3, #1
 800a582:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	3301      	adds	r3, #1
 800a588:	61bb      	str	r3, [r7, #24]
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d3e2      	bcc.n	800a558 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3724      	adds	r7, #36	; 0x24
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b08b      	sub	sp, #44	; 0x2c
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a5b6:	88fb      	ldrh	r3, [r7, #6]
 800a5b8:	089b      	lsrs	r3, r3, #2
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	f003 0303 	and.w	r3, r3, #3
 800a5c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	623b      	str	r3, [r7, #32]
 800a5ca:	e014      	b.n	800a5f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	3301      	adds	r3, #1
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	623b      	str	r3, [r7, #32]
 800a5f6:	6a3a      	ldr	r2, [r7, #32]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d3e6      	bcc.n	800a5cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a5fe:	8bfb      	ldrh	r3, [r7, #30]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01e      	beq.n	800a642 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a60e:	461a      	mov	r2, r3
 800a610:	f107 0310 	add.w	r3, r7, #16
 800a614:	6812      	ldr	r2, [r2, #0]
 800a616:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	fa22 f303 	lsr.w	r3, r2, r3
 800a624:	b2da      	uxtb	r2, r3
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	701a      	strb	r2, [r3, #0]
      i++;
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	3301      	adds	r3, #1
 800a62e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	3301      	adds	r3, #1
 800a634:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a636:	8bfb      	ldrh	r3, [r7, #30]
 800a638:	3b01      	subs	r3, #1
 800a63a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a63c:	8bfb      	ldrh	r3, [r7, #30]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1ea      	bne.n	800a618 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a644:	4618      	mov	r0, r3
 800a646:	372c      	adds	r7, #44	; 0x2c
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	785b      	ldrb	r3, [r3, #1]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d12c      	bne.n	800a6c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4413      	add	r3, r2
 800a674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	db12      	blt.n	800a6a4 <USB_EPSetStall+0x54>
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00f      	beq.n	800a6a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	0151      	lsls	r1, r2, #5
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	440a      	add	r2, r1
 800a69a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a69e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	0151      	lsls	r1, r2, #5
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	440a      	add	r2, r1
 800a6ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	e02b      	b.n	800a71e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	db12      	blt.n	800a6fe <USB_EPSetStall+0xae>
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00f      	beq.n	800a6fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	0151      	lsls	r1, r2, #5
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	440a      	add	r2, r1
 800a6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	015a      	lsls	r2, r3, #5
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	4413      	add	r3, r2
 800a706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	0151      	lsls	r1, r2, #5
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	440a      	add	r2, r1
 800a714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a71c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	785b      	ldrb	r3, [r3, #1]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d128      	bne.n	800a79a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	0151      	lsls	r1, r2, #5
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	440a      	add	r2, r1
 800a75e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a766:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	791b      	ldrb	r3, [r3, #4]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d003      	beq.n	800a778 <USB_EPClearStall+0x4c>
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	791b      	ldrb	r3, [r3, #4]
 800a774:	2b02      	cmp	r3, #2
 800a776:	d138      	bne.n	800a7ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	015a      	lsls	r2, r3, #5
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	0151      	lsls	r1, r2, #5
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	440a      	add	r2, r1
 800a78e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	e027      	b.n	800a7ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	0151      	lsls	r1, r2, #5
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	440a      	add	r2, r1
 800a7b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	791b      	ldrb	r3, [r3, #4]
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	d003      	beq.n	800a7ca <USB_EPClearStall+0x9e>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	791b      	ldrb	r3, [r3, #4]
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d10f      	bne.n	800a7ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	015a      	lsls	r2, r3, #5
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	0151      	lsls	r1, r2, #5
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	440a      	add	r2, r1
 800a7e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	460b      	mov	r3, r1
 800a802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a816:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a81a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a82c:	68f9      	ldr	r1, [r7, #12]
 800a82e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a832:	4313      	orrs	r3, r2
 800a834:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a85e:	f023 0303 	bic.w	r3, r3, #3
 800a862:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a872:	f023 0302 	bic.w	r3, r3, #2
 800a876:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a886:	b480      	push	{r7}
 800a888:	b085      	sub	sp, #20
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8a0:	f023 0303 	bic.w	r3, r3, #3
 800a8a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8b4:	f043 0302 	orr.w	r3, r3, #2
 800a8b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	4013      	ands	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b085      	sub	sp, #20
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	4013      	ands	r3, r2
 800a910:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	0c1b      	lsrs	r3, r3, #16
}
 800a916:	4618      	mov	r0, r3
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a922:	b480      	push	{r7}
 800a924:	b085      	sub	sp, #20
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	4013      	ands	r3, r2
 800a944:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	b29b      	uxth	r3, r3
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a956:	b480      	push	{r7}
 800a958:	b085      	sub	sp, #20
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a966:	78fb      	ldrb	r3, [r7, #3]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	4013      	ands	r3, r2
 800a982:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a984:	68bb      	ldr	r3, [r7, #8]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a992:	b480      	push	{r7}
 800a994:	b087      	sub	sp, #28
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	460b      	mov	r3, r1
 800a99c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a9b6:	78fb      	ldrb	r3, [r7, #3]
 800a9b8:	f003 030f 	and.w	r3, r3, #15
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c2:	01db      	lsls	r3, r3, #7
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	4013      	ands	r3, r2
 800a9de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	371c      	adds	r7, #28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b083      	sub	sp, #12
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	f003 0301 	and.w	r3, r3, #1
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b085      	sub	sp, #20
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aa28:	f023 0307 	bic.w	r3, r3, #7
 800aa2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	333c      	adds	r3, #60	; 0x3c
 800aa66:	3304      	adds	r3, #4
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	4a26      	ldr	r2, [pc, #152]	; (800ab08 <USB_EP0_OutStart+0xb8>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d90a      	bls.n	800aa8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa84:	d101      	bne.n	800aa8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	e037      	b.n	800aafa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa90:	461a      	mov	r2, r3
 800aa92:	2300      	movs	r3, #0
 800aa94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aaa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	697a      	ldr	r2, [r7, #20]
 800aab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aab8:	f043 0318 	orr.w	r3, r3, #24
 800aabc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aacc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aad0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aad2:	7afb      	ldrb	r3, [r7, #11]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d10f      	bne.n	800aaf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aade:	461a      	mov	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaf2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800aaf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	371c      	adds	r7, #28
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	4f54300a 	.word	0x4f54300a

0800ab0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab14:	2300      	movs	r3, #0
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	4a13      	ldr	r2, [pc, #76]	; (800ab70 <USB_CoreReset+0x64>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d901      	bls.n	800ab2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e01b      	b.n	800ab62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	daf2      	bge.n	800ab18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	f043 0201 	orr.w	r2, r3, #1
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	3301      	adds	r3, #1
 800ab46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4a09      	ldr	r2, [pc, #36]	; (800ab70 <USB_CoreReset+0x64>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d901      	bls.n	800ab54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e006      	b.n	800ab62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d0f0      	beq.n	800ab42 <USB_CoreReset+0x36>

  return HAL_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	00030d40 	.word	0x00030d40

0800ab74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ab84:	f005 f8a0 	bl	800fcc8 <USBD_static_malloc>
 800ab88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d109      	bne.n	800aba4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	32b0      	adds	r2, #176	; 0xb0
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aba0:	2302      	movs	r3, #2
 800aba2:	e0d4      	b.n	800ad4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aba4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800aba8:	2100      	movs	r1, #0
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f005 ff05 	bl	80109ba <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	32b0      	adds	r2, #176	; 0xb0
 800abba:	68f9      	ldr	r1, [r7, #12]
 800abbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	32b0      	adds	r2, #176	; 0xb0
 800abca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	7c1b      	ldrb	r3, [r3, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d138      	bne.n	800ac4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abdc:	4b5e      	ldr	r3, [pc, #376]	; (800ad58 <USBD_CDC_Init+0x1e4>)
 800abde:	7819      	ldrb	r1, [r3, #0]
 800abe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abe4:	2202      	movs	r2, #2
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f004 ff4b 	bl	800fa82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abec:	4b5a      	ldr	r3, [pc, #360]	; (800ad58 <USBD_CDC_Init+0x1e4>)
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	f003 020f 	and.w	r2, r3, #15
 800abf4:	6879      	ldr	r1, [r7, #4]
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	440b      	add	r3, r1
 800ac00:	3324      	adds	r3, #36	; 0x24
 800ac02:	2201      	movs	r2, #1
 800ac04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac06:	4b55      	ldr	r3, [pc, #340]	; (800ad5c <USBD_CDC_Init+0x1e8>)
 800ac08:	7819      	ldrb	r1, [r3, #0]
 800ac0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac0e:	2202      	movs	r2, #2
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f004 ff36 	bl	800fa82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac16:	4b51      	ldr	r3, [pc, #324]	; (800ad5c <USBD_CDC_Init+0x1e8>)
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	f003 020f 	and.w	r2, r3, #15
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	4613      	mov	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4413      	add	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	440b      	add	r3, r1
 800ac2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac2e:	2201      	movs	r2, #1
 800ac30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac32:	4b4b      	ldr	r3, [pc, #300]	; (800ad60 <USBD_CDC_Init+0x1ec>)
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	f003 020f 	and.w	r2, r3, #15
 800ac3a:	6879      	ldr	r1, [r7, #4]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	440b      	add	r3, r1
 800ac46:	3326      	adds	r3, #38	; 0x26
 800ac48:	2210      	movs	r2, #16
 800ac4a:	801a      	strh	r2, [r3, #0]
 800ac4c:	e035      	b.n	800acba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac4e:	4b42      	ldr	r3, [pc, #264]	; (800ad58 <USBD_CDC_Init+0x1e4>)
 800ac50:	7819      	ldrb	r1, [r3, #0]
 800ac52:	2340      	movs	r3, #64	; 0x40
 800ac54:	2202      	movs	r2, #2
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f004 ff13 	bl	800fa82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac5c:	4b3e      	ldr	r3, [pc, #248]	; (800ad58 <USBD_CDC_Init+0x1e4>)
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	f003 020f 	and.w	r2, r3, #15
 800ac64:	6879      	ldr	r1, [r7, #4]
 800ac66:	4613      	mov	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	440b      	add	r3, r1
 800ac70:	3324      	adds	r3, #36	; 0x24
 800ac72:	2201      	movs	r2, #1
 800ac74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac76:	4b39      	ldr	r3, [pc, #228]	; (800ad5c <USBD_CDC_Init+0x1e8>)
 800ac78:	7819      	ldrb	r1, [r3, #0]
 800ac7a:	2340      	movs	r3, #64	; 0x40
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f004 feff 	bl	800fa82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac84:	4b35      	ldr	r3, [pc, #212]	; (800ad5c <USBD_CDC_Init+0x1e8>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	f003 020f 	and.w	r2, r3, #15
 800ac8c:	6879      	ldr	r1, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	440b      	add	r3, r1
 800ac98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aca0:	4b2f      	ldr	r3, [pc, #188]	; (800ad60 <USBD_CDC_Init+0x1ec>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 020f 	and.w	r2, r3, #15
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	3326      	adds	r3, #38	; 0x26
 800acb6:	2210      	movs	r2, #16
 800acb8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acba:	4b29      	ldr	r3, [pc, #164]	; (800ad60 <USBD_CDC_Init+0x1ec>)
 800acbc:	7819      	ldrb	r1, [r3, #0]
 800acbe:	2308      	movs	r3, #8
 800acc0:	2203      	movs	r2, #3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f004 fedd 	bl	800fa82 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800acc8:	4b25      	ldr	r3, [pc, #148]	; (800ad60 <USBD_CDC_Init+0x1ec>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f003 020f 	and.w	r2, r3, #15
 800acd0:	6879      	ldr	r1, [r7, #4]
 800acd2:	4613      	mov	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	3324      	adds	r3, #36	; 0x24
 800acde:	2201      	movs	r2, #1
 800ace0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	33b0      	adds	r3, #176	; 0xb0
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d101      	bne.n	800ad1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad18:	2302      	movs	r3, #2
 800ad1a:	e018      	b.n	800ad4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	7c1b      	ldrb	r3, [r3, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad24:	4b0d      	ldr	r3, [pc, #52]	; (800ad5c <USBD_CDC_Init+0x1e8>)
 800ad26:	7819      	ldrb	r1, [r3, #0]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f004 ff94 	bl	800fc60 <USBD_LL_PrepareReceive>
 800ad38:	e008      	b.n	800ad4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad3a:	4b08      	ldr	r3, [pc, #32]	; (800ad5c <USBD_CDC_Init+0x1e8>)
 800ad3c:	7819      	ldrb	r1, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad44:	2340      	movs	r3, #64	; 0x40
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f004 ff8a 	bl	800fc60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	200000b3 	.word	0x200000b3
 800ad5c:	200000b4 	.word	0x200000b4
 800ad60:	200000b5 	.word	0x200000b5

0800ad64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad70:	4b3a      	ldr	r3, [pc, #232]	; (800ae5c <USBD_CDC_DeInit+0xf8>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f004 fea9 	bl	800face <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad7c:	4b37      	ldr	r3, [pc, #220]	; (800ae5c <USBD_CDC_DeInit+0xf8>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	f003 020f 	and.w	r2, r3, #15
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	440b      	add	r3, r1
 800ad90:	3324      	adds	r3, #36	; 0x24
 800ad92:	2200      	movs	r2, #0
 800ad94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ad96:	4b32      	ldr	r3, [pc, #200]	; (800ae60 <USBD_CDC_DeInit+0xfc>)
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f004 fe96 	bl	800face <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ada2:	4b2f      	ldr	r3, [pc, #188]	; (800ae60 <USBD_CDC_DeInit+0xfc>)
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	f003 020f 	and.w	r2, r3, #15
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	4613      	mov	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	440b      	add	r3, r1
 800adb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adba:	2200      	movs	r2, #0
 800adbc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800adbe:	4b29      	ldr	r3, [pc, #164]	; (800ae64 <USBD_CDC_DeInit+0x100>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f004 fe82 	bl	800face <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800adca:	4b26      	ldr	r3, [pc, #152]	; (800ae64 <USBD_CDC_DeInit+0x100>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	f003 020f 	and.w	r2, r3, #15
 800add2:	6879      	ldr	r1, [r7, #4]
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	440b      	add	r3, r1
 800adde:	3324      	adds	r3, #36	; 0x24
 800ade0:	2200      	movs	r2, #0
 800ade2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ade4:	4b1f      	ldr	r3, [pc, #124]	; (800ae64 <USBD_CDC_DeInit+0x100>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	f003 020f 	and.w	r2, r3, #15
 800adec:	6879      	ldr	r1, [r7, #4]
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	440b      	add	r3, r1
 800adf8:	3326      	adds	r3, #38	; 0x26
 800adfa:	2200      	movs	r2, #0
 800adfc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	32b0      	adds	r2, #176	; 0xb0
 800ae08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01f      	beq.n	800ae50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	33b0      	adds	r3, #176	; 0xb0
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	32b0      	adds	r2, #176	; 0xb0
 800ae2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f004 ff56 	bl	800fce4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	32b0      	adds	r2, #176	; 0xb0
 800ae42:	2100      	movs	r1, #0
 800ae44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	200000b3 	.word	0x200000b3
 800ae60:	200000b4 	.word	0x200000b4
 800ae64:	200000b5 	.word	0x200000b5

0800ae68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	32b0      	adds	r2, #176	; 0xb0
 800ae7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ae94:	2303      	movs	r3, #3
 800ae96:	e0bf      	b.n	800b018 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d050      	beq.n	800af46 <USBD_CDC_Setup+0xde>
 800aea4:	2b20      	cmp	r3, #32
 800aea6:	f040 80af 	bne.w	800b008 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	88db      	ldrh	r3, [r3, #6]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d03a      	beq.n	800af28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	b25b      	sxtb	r3, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	da1b      	bge.n	800aef4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	33b0      	adds	r3, #176	; 0xb0
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aed2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	88d2      	ldrh	r2, [r2, #6]
 800aed8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	88db      	ldrh	r3, [r3, #6]
 800aede:	2b07      	cmp	r3, #7
 800aee0:	bf28      	it	cs
 800aee2:	2307      	movcs	r3, #7
 800aee4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	89fa      	ldrh	r2, [r7, #14]
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f001 fd89 	bl	800ca04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aef2:	e090      	b.n	800b016 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	785a      	ldrb	r2, [r3, #1]
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	88db      	ldrh	r3, [r3, #6]
 800af02:	2b3f      	cmp	r3, #63	; 0x3f
 800af04:	d803      	bhi.n	800af0e <USBD_CDC_Setup+0xa6>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	88db      	ldrh	r3, [r3, #6]
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	e000      	b.n	800af10 <USBD_CDC_Setup+0xa8>
 800af0e:	2240      	movs	r2, #64	; 0x40
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af16:	6939      	ldr	r1, [r7, #16]
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800af1e:	461a      	mov	r2, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 fd9b 	bl	800ca5c <USBD_CtlPrepareRx>
      break;
 800af26:	e076      	b.n	800b016 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	33b0      	adds	r3, #176	; 0xb0
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	7850      	ldrb	r0, [r2, #1]
 800af3e:	2200      	movs	r2, #0
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	4798      	blx	r3
      break;
 800af44:	e067      	b.n	800b016 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	785b      	ldrb	r3, [r3, #1]
 800af4a:	2b0b      	cmp	r3, #11
 800af4c:	d851      	bhi.n	800aff2 <USBD_CDC_Setup+0x18a>
 800af4e:	a201      	add	r2, pc, #4	; (adr r2, 800af54 <USBD_CDC_Setup+0xec>)
 800af50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af54:	0800af85 	.word	0x0800af85
 800af58:	0800b001 	.word	0x0800b001
 800af5c:	0800aff3 	.word	0x0800aff3
 800af60:	0800aff3 	.word	0x0800aff3
 800af64:	0800aff3 	.word	0x0800aff3
 800af68:	0800aff3 	.word	0x0800aff3
 800af6c:	0800aff3 	.word	0x0800aff3
 800af70:	0800aff3 	.word	0x0800aff3
 800af74:	0800aff3 	.word	0x0800aff3
 800af78:	0800aff3 	.word	0x0800aff3
 800af7c:	0800afaf 	.word	0x0800afaf
 800af80:	0800afd9 	.word	0x0800afd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d107      	bne.n	800afa0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af90:	f107 030a 	add.w	r3, r7, #10
 800af94:	2202      	movs	r2, #2
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 fd33 	bl	800ca04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af9e:	e032      	b.n	800b006 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f001 fcbd 	bl	800c922 <USBD_CtlError>
            ret = USBD_FAIL;
 800afa8:	2303      	movs	r3, #3
 800afaa:	75fb      	strb	r3, [r7, #23]
          break;
 800afac:	e02b      	b.n	800b006 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d107      	bne.n	800afca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afba:	f107 030d 	add.w	r3, r7, #13
 800afbe:	2201      	movs	r2, #1
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 fd1e 	bl	800ca04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afc8:	e01d      	b.n	800b006 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f001 fca8 	bl	800c922 <USBD_CtlError>
            ret = USBD_FAIL;
 800afd2:	2303      	movs	r3, #3
 800afd4:	75fb      	strb	r3, [r7, #23]
          break;
 800afd6:	e016      	b.n	800b006 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d00f      	beq.n	800b004 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 fc9b 	bl	800c922 <USBD_CtlError>
            ret = USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aff0:	e008      	b.n	800b004 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 fc94 	bl	800c922 <USBD_CtlError>
          ret = USBD_FAIL;
 800affa:	2303      	movs	r3, #3
 800affc:	75fb      	strb	r3, [r7, #23]
          break;
 800affe:	e002      	b.n	800b006 <USBD_CDC_Setup+0x19e>
          break;
 800b000:	bf00      	nop
 800b002:	e008      	b.n	800b016 <USBD_CDC_Setup+0x1ae>
          break;
 800b004:	bf00      	nop
      }
      break;
 800b006:	e006      	b.n	800b016 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f001 fc89 	bl	800c922 <USBD_CtlError>
      ret = USBD_FAIL;
 800b010:	2303      	movs	r3, #3
 800b012:	75fb      	strb	r3, [r7, #23]
      break;
 800b014:	bf00      	nop
  }

  return (uint8_t)ret;
 800b016:	7dfb      	ldrb	r3, [r7, #23]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	460b      	mov	r3, r1
 800b02a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b032:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	32b0      	adds	r2, #176	; 0xb0
 800b03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b046:	2303      	movs	r3, #3
 800b048:	e065      	b.n	800b116 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	32b0      	adds	r2, #176	; 0xb0
 800b054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b058:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b05a:	78fb      	ldrb	r3, [r7, #3]
 800b05c:	f003 020f 	and.w	r2, r3, #15
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	4613      	mov	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	440b      	add	r3, r1
 800b06c:	3318      	adds	r3, #24
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d02f      	beq.n	800b0d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	f003 020f 	and.w	r2, r3, #15
 800b07a:	6879      	ldr	r1, [r7, #4]
 800b07c:	4613      	mov	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	3318      	adds	r3, #24
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	f003 010f 	and.w	r1, r3, #15
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	460b      	mov	r3, r1
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	440b      	add	r3, r1
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4403      	add	r3, r0
 800b09c:	3348      	adds	r3, #72	; 0x48
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0a4:	fb01 f303 	mul.w	r3, r1, r3
 800b0a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d112      	bne.n	800b0d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0ae:	78fb      	ldrb	r3, [r7, #3]
 800b0b0:	f003 020f 	and.w	r2, r3, #15
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	440b      	add	r3, r1
 800b0c0:	3318      	adds	r3, #24
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0c6:	78f9      	ldrb	r1, [r7, #3]
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f004 fda6 	bl	800fc1e <USBD_LL_Transmit>
 800b0d2:	e01f      	b.n	800b114 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	33b0      	adds	r3, #176	; 0xb0
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d010      	beq.n	800b114 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	33b0      	adds	r3, #176	; 0xb0
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b110:	78fa      	ldrb	r2, [r7, #3]
 800b112:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	460b      	mov	r3, r1
 800b128:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	32b0      	adds	r2, #176	; 0xb0
 800b134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b138:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	32b0      	adds	r2, #176	; 0xb0
 800b144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e01a      	b.n	800b186 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f004 fda4 	bl	800fca2 <USBD_LL_GetRxDataSize>
 800b15a:	4602      	mov	r2, r0
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	33b0      	adds	r3, #176	; 0xb0
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b180:	4611      	mov	r1, r2
 800b182:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b084      	sub	sp, #16
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	32b0      	adds	r2, #176	; 0xb0
 800b1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e025      	b.n	800b1fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	33b0      	adds	r3, #176	; 0xb0
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d01a      	beq.n	800b1fa <USBD_CDC_EP0_RxReady+0x6c>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b1ca:	2bff      	cmp	r3, #255	; 0xff
 800b1cc:	d015      	beq.n	800b1fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	33b0      	adds	r3, #176	; 0xb0
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b1e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1ee:	b292      	uxth	r2, r2
 800b1f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	22ff      	movs	r2, #255	; 0xff
 800b1f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b20c:	2182      	movs	r1, #130	; 0x82
 800b20e:	4818      	ldr	r0, [pc, #96]	; (800b270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b210:	f000 fd4f 	bl	800bcb2 <USBD_GetEpDesc>
 800b214:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b216:	2101      	movs	r1, #1
 800b218:	4815      	ldr	r0, [pc, #84]	; (800b270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b21a:	f000 fd4a 	bl	800bcb2 <USBD_GetEpDesc>
 800b21e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b220:	2181      	movs	r1, #129	; 0x81
 800b222:	4813      	ldr	r0, [pc, #76]	; (800b270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b224:	f000 fd45 	bl	800bcb2 <USBD_GetEpDesc>
 800b228:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d002      	beq.n	800b236 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2210      	movs	r2, #16
 800b234:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d006      	beq.n	800b24a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	2200      	movs	r2, #0
 800b240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b244:	711a      	strb	r2, [r3, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d006      	beq.n	800b25e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b258:	711a      	strb	r2, [r3, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2243      	movs	r2, #67	; 0x43
 800b262:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b264:	4b02      	ldr	r3, [pc, #8]	; (800b270 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b266:	4618      	mov	r0, r3
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	20000070 	.word	0x20000070

0800b274 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b27c:	2182      	movs	r1, #130	; 0x82
 800b27e:	4818      	ldr	r0, [pc, #96]	; (800b2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b280:	f000 fd17 	bl	800bcb2 <USBD_GetEpDesc>
 800b284:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b286:	2101      	movs	r1, #1
 800b288:	4815      	ldr	r0, [pc, #84]	; (800b2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b28a:	f000 fd12 	bl	800bcb2 <USBD_GetEpDesc>
 800b28e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b290:	2181      	movs	r1, #129	; 0x81
 800b292:	4813      	ldr	r0, [pc, #76]	; (800b2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b294:	f000 fd0d 	bl	800bcb2 <USBD_GetEpDesc>
 800b298:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	2210      	movs	r2, #16
 800b2a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d006      	beq.n	800b2ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	711a      	strb	r2, [r3, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f042 0202 	orr.w	r2, r2, #2
 800b2b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d006      	beq.n	800b2ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	711a      	strb	r2, [r3, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f042 0202 	orr.w	r2, r2, #2
 800b2cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2243      	movs	r2, #67	; 0x43
 800b2d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2d4:	4b02      	ldr	r3, [pc, #8]	; (800b2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20000070 	.word	0x20000070

0800b2e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2ec:	2182      	movs	r1, #130	; 0x82
 800b2ee:	4818      	ldr	r0, [pc, #96]	; (800b350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2f0:	f000 fcdf 	bl	800bcb2 <USBD_GetEpDesc>
 800b2f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	4815      	ldr	r0, [pc, #84]	; (800b350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2fa:	f000 fcda 	bl	800bcb2 <USBD_GetEpDesc>
 800b2fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b300:	2181      	movs	r1, #129	; 0x81
 800b302:	4813      	ldr	r0, [pc, #76]	; (800b350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b304:	f000 fcd5 	bl	800bcb2 <USBD_GetEpDesc>
 800b308:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2210      	movs	r2, #16
 800b314:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d006      	beq.n	800b32a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	2200      	movs	r2, #0
 800b320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b324:	711a      	strb	r2, [r3, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d006      	beq.n	800b33e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b338:	711a      	strb	r2, [r3, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2243      	movs	r2, #67	; 0x43
 800b342:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b344:	4b02      	ldr	r3, [pc, #8]	; (800b350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b346:	4618      	mov	r0, r3
 800b348:	3718      	adds	r7, #24
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	20000070 	.word	0x20000070

0800b354 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	220a      	movs	r2, #10
 800b360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b362:	4b03      	ldr	r3, [pc, #12]	; (800b370 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b364:	4618      	mov	r0, r3
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	2000002c 	.word	0x2000002c

0800b374 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b384:	2303      	movs	r3, #3
 800b386:	e009      	b.n	800b39c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	33b0      	adds	r3, #176	; 0xb0
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	32b0      	adds	r2, #176	; 0xb0
 800b3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	e008      	b.n	800b3e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	371c      	adds	r7, #28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	32b0      	adds	r2, #176	; 0xb0
 800b400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b404:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e004      	b.n	800b41a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
	...

0800b428 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	32b0      	adds	r2, #176	; 0xb0
 800b43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b440:	2301      	movs	r3, #1
 800b442:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	32b0      	adds	r2, #176	; 0xb0
 800b44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b456:	2303      	movs	r3, #3
 800b458:	e025      	b.n	800b4a6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b460:	2b00      	cmp	r3, #0
 800b462:	d11f      	bne.n	800b4a4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2201      	movs	r2, #1
 800b468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b46c:	4b10      	ldr	r3, [pc, #64]	; (800b4b0 <USBD_CDC_TransmitPacket+0x88>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	f003 020f 	and.w	r2, r3, #15
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4403      	add	r3, r0
 800b486:	3318      	adds	r3, #24
 800b488:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b48a:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <USBD_CDC_TransmitPacket+0x88>)
 800b48c:	7819      	ldrb	r1, [r3, #0]
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f004 fbbf 	bl	800fc1e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	200000b3 	.word	0x200000b3

0800b4b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	32b0      	adds	r2, #176	; 0xb0
 800b4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	32b0      	adds	r2, #176	; 0xb0
 800b4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e018      	b.n	800b514 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	7c1b      	ldrb	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10a      	bne.n	800b500 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4ea:	4b0c      	ldr	r3, [pc, #48]	; (800b51c <USBD_CDC_ReceivePacket+0x68>)
 800b4ec:	7819      	ldrb	r1, [r3, #0]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f004 fbb1 	bl	800fc60 <USBD_LL_PrepareReceive>
 800b4fe:	e008      	b.n	800b512 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b500:	4b06      	ldr	r3, [pc, #24]	; (800b51c <USBD_CDC_ReceivePacket+0x68>)
 800b502:	7819      	ldrb	r1, [r3, #0]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b50a:	2340      	movs	r3, #64	; 0x40
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f004 fba7 	bl	800fc60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	200000b4 	.word	0x200000b4

0800b520 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4613      	mov	r3, r2
 800b52c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d101      	bne.n	800b538 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b534:	2303      	movs	r3, #3
 800b536:	e01f      	b.n	800b578 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d003      	beq.n	800b55e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	79fa      	ldrb	r2, [r7, #7]
 800b56a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f004 fa21 	bl	800f9b4 <USBD_LL_Init>
 800b572:	4603      	mov	r3, r0
 800b574:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b576:	7dfb      	ldrb	r3, [r7, #23]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3718      	adds	r7, #24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b58a:	2300      	movs	r3, #0
 800b58c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d101      	bne.n	800b598 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b594:	2303      	movs	r3, #3
 800b596:	e025      	b.n	800b5e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	32ae      	adds	r2, #174	; 0xae
 800b5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00f      	beq.n	800b5d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	32ae      	adds	r2, #174	; 0xae
 800b5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	f107 020e 	add.w	r2, r7, #14
 800b5c8:	4610      	mov	r0, r2
 800b5ca:	4798      	blx	r3
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f004 fa29 	bl	800fa4c <USBD_LL_Start>
 800b5fa:	4603      	mov	r3, r0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b60c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b60e:	4618      	mov	r0, r3
 800b610:	370c      	adds	r7, #12
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b630:	2b00      	cmp	r3, #0
 800b632:	d009      	beq.n	800b648 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	78fa      	ldrb	r2, [r7, #3]
 800b63e:	4611      	mov	r1, r2
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	4798      	blx	r3
 800b644:	4603      	mov	r3, r0
 800b646:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b648:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b084      	sub	sp, #16
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	460b      	mov	r3, r1
 800b65c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	78fa      	ldrb	r2, [r7, #3]
 800b66c:	4611      	mov	r1, r2
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	4798      	blx	r3
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b678:	2303      	movs	r3, #3
 800b67a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b084      	sub	sp, #16
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	4618      	mov	r0, r3
 800b69a:	f001 f908 	bl	800c8ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6ba:	f003 031f 	and.w	r3, r3, #31
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d01a      	beq.n	800b6f8 <USBD_LL_SetupStage+0x72>
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d822      	bhi.n	800b70c <USBD_LL_SetupStage+0x86>
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d002      	beq.n	800b6d0 <USBD_LL_SetupStage+0x4a>
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d00a      	beq.n	800b6e4 <USBD_LL_SetupStage+0x5e>
 800b6ce:	e01d      	b.n	800b70c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fb5f 	bl	800bd9c <USBD_StdDevReq>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e2:	e020      	b.n	800b726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fbc7 	bl	800be80 <USBD_StdItfReq>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b6f6:	e016      	b.n	800b726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fc29 	bl	800bf58 <USBD_StdEPReq>
 800b706:	4603      	mov	r3, r0
 800b708:	73fb      	strb	r3, [r7, #15]
      break;
 800b70a:	e00c      	b.n	800b726 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b712:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b716:	b2db      	uxtb	r3, r3
 800b718:	4619      	mov	r1, r3
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f004 f9f6 	bl	800fb0c <USBD_LL_StallEP>
 800b720:	4603      	mov	r3, r0
 800b722:	73fb      	strb	r3, [r7, #15]
      break;
 800b724:	bf00      	nop
  }

  return ret;
 800b726:	7bfb      	ldrb	r3, [r7, #15]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	460b      	mov	r3, r1
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b742:	7afb      	ldrb	r3, [r7, #11]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d16e      	bne.n	800b826 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b74e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b756:	2b03      	cmp	r3, #3
 800b758:	f040 8098 	bne.w	800b88c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	689a      	ldr	r2, [r3, #8]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	429a      	cmp	r2, r3
 800b766:	d913      	bls.n	800b790 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	689a      	ldr	r2, [r3, #8]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	1ad2      	subs	r2, r2, r3
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	68da      	ldr	r2, [r3, #12]
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	4293      	cmp	r3, r2
 800b780:	bf28      	it	cs
 800b782:	4613      	movcs	r3, r2
 800b784:	461a      	mov	r2, r3
 800b786:	6879      	ldr	r1, [r7, #4]
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f001 f984 	bl	800ca96 <USBD_CtlContinueRx>
 800b78e:	e07d      	b.n	800b88c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b796:	f003 031f 	and.w	r3, r3, #31
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d014      	beq.n	800b7c8 <USBD_LL_DataOutStage+0x98>
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d81d      	bhi.n	800b7de <USBD_LL_DataOutStage+0xae>
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <USBD_LL_DataOutStage+0x7c>
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d003      	beq.n	800b7b2 <USBD_LL_DataOutStage+0x82>
 800b7aa:	e018      	b.n	800b7de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	75bb      	strb	r3, [r7, #22]
            break;
 800b7b0:	e018      	b.n	800b7e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 fa5e 	bl	800bc7e <USBD_CoreFindIF>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	75bb      	strb	r3, [r7, #22]
            break;
 800b7c6:	e00d      	b.n	800b7e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f000 fa60 	bl	800bc98 <USBD_CoreFindEP>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	75bb      	strb	r3, [r7, #22]
            break;
 800b7dc:	e002      	b.n	800b7e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b7e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b7e4:	7dbb      	ldrb	r3, [r7, #22]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d119      	bne.n	800b81e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	2b03      	cmp	r3, #3
 800b7f4:	d113      	bne.n	800b81e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b7f6:	7dba      	ldrb	r2, [r7, #22]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	32ae      	adds	r2, #174	; 0xae
 800b7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00b      	beq.n	800b81e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b806:	7dba      	ldrb	r2, [r7, #22]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b80e:	7dba      	ldrb	r2, [r7, #22]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	32ae      	adds	r2, #174	; 0xae
 800b814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f001 f94a 	bl	800cab8 <USBD_CtlSendStatus>
 800b824:	e032      	b.n	800b88c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b826:	7afb      	ldrb	r3, [r7, #11]
 800b828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	4619      	mov	r1, r3
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f000 fa31 	bl	800bc98 <USBD_CoreFindEP>
 800b836:	4603      	mov	r3, r0
 800b838:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b83a:	7dbb      	ldrb	r3, [r7, #22]
 800b83c:	2bff      	cmp	r3, #255	; 0xff
 800b83e:	d025      	beq.n	800b88c <USBD_LL_DataOutStage+0x15c>
 800b840:	7dbb      	ldrb	r3, [r7, #22]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d122      	bne.n	800b88c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b03      	cmp	r3, #3
 800b850:	d117      	bne.n	800b882 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b852:	7dba      	ldrb	r2, [r7, #22]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	32ae      	adds	r2, #174	; 0xae
 800b858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00f      	beq.n	800b882 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b862:	7dba      	ldrb	r2, [r7, #22]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b86a:	7dba      	ldrb	r2, [r7, #22]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	32ae      	adds	r2, #174	; 0xae
 800b870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	7afa      	ldrb	r2, [r7, #11]
 800b878:	4611      	mov	r1, r2
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	4798      	blx	r3
 800b87e:	4603      	mov	r3, r0
 800b880:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	e000      	b.n	800b88e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b086      	sub	sp, #24
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	460b      	mov	r3, r1
 800b8a0:	607a      	str	r2, [r7, #4]
 800b8a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8a4:	7afb      	ldrb	r3, [r7, #11]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d16f      	bne.n	800b98a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3314      	adds	r3, #20
 800b8ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d15a      	bne.n	800b970 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	689a      	ldr	r2, [r3, #8]
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d914      	bls.n	800b8f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	689a      	ldr	r2, [r3, #8]
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	1ad2      	subs	r2, r2, r3
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	461a      	mov	r2, r3
 800b8da:	6879      	ldr	r1, [r7, #4]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f001 f8ac 	bl	800ca3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f004 f9b9 	bl	800fc60 <USBD_LL_PrepareReceive>
 800b8ee:	e03f      	b.n	800b970 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	68da      	ldr	r2, [r3, #12]
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d11c      	bne.n	800b936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	685a      	ldr	r2, [r3, #4]
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b904:	429a      	cmp	r2, r3
 800b906:	d316      	bcc.n	800b936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b912:	429a      	cmp	r2, r3
 800b914:	d20f      	bcs.n	800b936 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b916:	2200      	movs	r2, #0
 800b918:	2100      	movs	r1, #0
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f001 f88d 	bl	800ca3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b928:	2300      	movs	r3, #0
 800b92a:	2200      	movs	r2, #0
 800b92c:	2100      	movs	r1, #0
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f004 f996 	bl	800fc60 <USBD_LL_PrepareReceive>
 800b934:	e01c      	b.n	800b970 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b03      	cmp	r3, #3
 800b940:	d10f      	bne.n	800b962 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d009      	beq.n	800b962 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b962:	2180      	movs	r1, #128	; 0x80
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f004 f8d1 	bl	800fb0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f001 f8b7 	bl	800cade <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d03a      	beq.n	800b9f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f7ff fe42 	bl	800b604 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b988:	e032      	b.n	800b9f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b98a:	7afb      	ldrb	r3, [r7, #11]
 800b98c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b990:	b2db      	uxtb	r3, r3
 800b992:	4619      	mov	r1, r3
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f000 f97f 	bl	800bc98 <USBD_CoreFindEP>
 800b99a:	4603      	mov	r3, r0
 800b99c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	2bff      	cmp	r3, #255	; 0xff
 800b9a2:	d025      	beq.n	800b9f0 <USBD_LL_DataInStage+0x15a>
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d122      	bne.n	800b9f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b03      	cmp	r3, #3
 800b9b4:	d11c      	bne.n	800b9f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9b6:	7dfa      	ldrb	r2, [r7, #23]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	32ae      	adds	r2, #174	; 0xae
 800b9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d014      	beq.n	800b9f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9c6:	7dfa      	ldrb	r2, [r7, #23]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9ce:	7dfa      	ldrb	r2, [r7, #23]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	32ae      	adds	r2, #174	; 0xae
 800b9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	7afa      	ldrb	r2, [r7, #11]
 800b9dc:	4611      	mov	r1, r2
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	4798      	blx	r3
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b9e6:	7dbb      	ldrb	r3, [r7, #22]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b9ec:	7dbb      	ldrb	r3, [r7, #22]
 800b9ee:	e000      	b.n	800b9f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3718      	adds	r7, #24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d014      	beq.n	800ba60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00e      	beq.n	800ba60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	6852      	ldr	r2, [r2, #4]
 800ba4e:	b2d2      	uxtb	r2, r2
 800ba50:	4611      	mov	r1, r2
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	4798      	blx	r3
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba60:	2340      	movs	r3, #64	; 0x40
 800ba62:	2200      	movs	r2, #0
 800ba64:	2100      	movs	r1, #0
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f004 f80b 	bl	800fa82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2240      	movs	r2, #64	; 0x40
 800ba78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba7c:	2340      	movs	r3, #64	; 0x40
 800ba7e:	2200      	movs	r2, #0
 800ba80:	2180      	movs	r1, #128	; 0x80
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f003 fffd 	bl	800fa82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2240      	movs	r2, #64	; 0x40
 800ba92:	621a      	str	r2, [r3, #32]

  return ret;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b083      	sub	sp, #12
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	78fa      	ldrb	r2, [r7, #3]
 800baae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2204      	movs	r2, #4
 800bad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800baea:	b480      	push	{r7}
 800baec:	b083      	sub	sp, #12
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b04      	cmp	r3, #4
 800bafc:	d106      	bne.n	800bb0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb04:	b2da      	uxtb	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	d110      	bne.n	800bb50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00b      	beq.n	800bb50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb3e:	69db      	ldr	r3, [r3, #28]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d005      	beq.n	800bb50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4a:	69db      	ldr	r3, [r3, #28]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b082      	sub	sp, #8
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	460b      	mov	r3, r1
 800bb64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	32ae      	adds	r2, #174	; 0xae
 800bb70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e01c      	b.n	800bbb6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	2b03      	cmp	r3, #3
 800bb86:	d115      	bne.n	800bbb4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	32ae      	adds	r2, #174	; 0xae
 800bb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb96:	6a1b      	ldr	r3, [r3, #32]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00b      	beq.n	800bbb4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	32ae      	adds	r2, #174	; 0xae
 800bba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	78fa      	ldrb	r2, [r7, #3]
 800bbae:	4611      	mov	r1, r2
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	32ae      	adds	r2, #174	; 0xae
 800bbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d101      	bne.n	800bbe0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	e01c      	b.n	800bc1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d115      	bne.n	800bc18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	32ae      	adds	r2, #174	; 0xae
 800bbf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00b      	beq.n	800bc18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	32ae      	adds	r2, #174	; 0xae
 800bc0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc10:	78fa      	ldrb	r2, [r7, #3]
 800bc12:	4611      	mov	r1, r2
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b083      	sub	sp, #12
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00e      	beq.n	800bc74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	6852      	ldr	r2, [r2, #4]
 800bc62:	b2d2      	uxtb	r2, r2
 800bc64:	4611      	mov	r1, r2
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	4798      	blx	r3
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc70:	2303      	movs	r3, #3
 800bc72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	460b      	mov	r3, r1
 800bc88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bca4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b086      	sub	sp, #24
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	885b      	ldrh	r3, [r3, #2]
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d920      	bls.n	800bd1c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bce2:	e013      	b.n	800bd0c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bce4:	f107 030a 	add.w	r3, r7, #10
 800bce8:	4619      	mov	r1, r3
 800bcea:	6978      	ldr	r0, [r7, #20]
 800bcec:	f000 f81b 	bl	800bd26 <USBD_GetNextDesc>
 800bcf0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	2b05      	cmp	r3, #5
 800bcf8:	d108      	bne.n	800bd0c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	789b      	ldrb	r3, [r3, #2]
 800bd02:	78fa      	ldrb	r2, [r7, #3]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d008      	beq.n	800bd1a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	885b      	ldrh	r3, [r3, #2]
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	897b      	ldrh	r3, [r7, #10]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d8e5      	bhi.n	800bce4 <USBD_GetEpDesc+0x32>
 800bd18:	e000      	b.n	800bd1c <USBD_GetEpDesc+0x6a>
          break;
 800bd1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd1c:	693b      	ldr	r3, [r7, #16]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3718      	adds	r7, #24
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd26:	b480      	push	{r7}
 800bd28:	b085      	sub	sp, #20
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	881a      	ldrh	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	4413      	add	r3, r2
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4413      	add	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd52:	68fb      	ldr	r3, [r7, #12]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b087      	sub	sp, #28
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	3301      	adds	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd7e:	8a3b      	ldrh	r3, [r7, #16]
 800bd80:	021b      	lsls	r3, r3, #8
 800bd82:	b21a      	sxth	r2, r3
 800bd84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	b21b      	sxth	r3, r3
 800bd8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd8e:	89fb      	ldrh	r3, [r7, #14]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	371c      	adds	r7, #28
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdb2:	2b40      	cmp	r3, #64	; 0x40
 800bdb4:	d005      	beq.n	800bdc2 <USBD_StdDevReq+0x26>
 800bdb6:	2b40      	cmp	r3, #64	; 0x40
 800bdb8:	d857      	bhi.n	800be6a <USBD_StdDevReq+0xce>
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00f      	beq.n	800bdde <USBD_StdDevReq+0x42>
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	d153      	bne.n	800be6a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	32ae      	adds	r2, #174	; 0xae
 800bdcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	6839      	ldr	r1, [r7, #0]
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	4798      	blx	r3
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73fb      	strb	r3, [r7, #15]
      break;
 800bddc:	e04a      	b.n	800be74 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	785b      	ldrb	r3, [r3, #1]
 800bde2:	2b09      	cmp	r3, #9
 800bde4:	d83b      	bhi.n	800be5e <USBD_StdDevReq+0xc2>
 800bde6:	a201      	add	r2, pc, #4	; (adr r2, 800bdec <USBD_StdDevReq+0x50>)
 800bde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdec:	0800be41 	.word	0x0800be41
 800bdf0:	0800be55 	.word	0x0800be55
 800bdf4:	0800be5f 	.word	0x0800be5f
 800bdf8:	0800be4b 	.word	0x0800be4b
 800bdfc:	0800be5f 	.word	0x0800be5f
 800be00:	0800be1f 	.word	0x0800be1f
 800be04:	0800be15 	.word	0x0800be15
 800be08:	0800be5f 	.word	0x0800be5f
 800be0c:	0800be37 	.word	0x0800be37
 800be10:	0800be29 	.word	0x0800be29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa3c 	bl	800c294 <USBD_GetDescriptor>
          break;
 800be1c:	e024      	b.n	800be68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fba1 	bl	800c568 <USBD_SetAddress>
          break;
 800be26:	e01f      	b.n	800be68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fbe0 	bl	800c5f0 <USBD_SetConfig>
 800be30:	4603      	mov	r3, r0
 800be32:	73fb      	strb	r3, [r7, #15]
          break;
 800be34:	e018      	b.n	800be68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fc83 	bl	800c744 <USBD_GetConfig>
          break;
 800be3e:	e013      	b.n	800be68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fcb4 	bl	800c7b0 <USBD_GetStatus>
          break;
 800be48:	e00e      	b.n	800be68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fce3 	bl	800c818 <USBD_SetFeature>
          break;
 800be52:	e009      	b.n	800be68 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fd07 	bl	800c86a <USBD_ClrFeature>
          break;
 800be5c:	e004      	b.n	800be68 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fd5e 	bl	800c922 <USBD_CtlError>
          break;
 800be66:	bf00      	nop
      }
      break;
 800be68:	e004      	b.n	800be74 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fd58 	bl	800c922 <USBD_CtlError>
      break;
 800be72:	bf00      	nop
  }

  return ret;
 800be74:	7bfb      	ldrb	r3, [r7, #15]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop

0800be80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be8a:	2300      	movs	r3, #0
 800be8c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be96:	2b40      	cmp	r3, #64	; 0x40
 800be98:	d005      	beq.n	800bea6 <USBD_StdItfReq+0x26>
 800be9a:	2b40      	cmp	r3, #64	; 0x40
 800be9c:	d852      	bhi.n	800bf44 <USBD_StdItfReq+0xc4>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <USBD_StdItfReq+0x26>
 800bea2:	2b20      	cmp	r3, #32
 800bea4:	d14e      	bne.n	800bf44 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beac:	b2db      	uxtb	r3, r3
 800beae:	3b01      	subs	r3, #1
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d840      	bhi.n	800bf36 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	889b      	ldrh	r3, [r3, #4]
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d836      	bhi.n	800bf2c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	889b      	ldrh	r3, [r3, #4]
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	4619      	mov	r1, r3
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff fed9 	bl	800bc7e <USBD_CoreFindIF>
 800becc:	4603      	mov	r3, r0
 800bece:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bed0:	7bbb      	ldrb	r3, [r7, #14]
 800bed2:	2bff      	cmp	r3, #255	; 0xff
 800bed4:	d01d      	beq.n	800bf12 <USBD_StdItfReq+0x92>
 800bed6:	7bbb      	ldrb	r3, [r7, #14]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d11a      	bne.n	800bf12 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bedc:	7bba      	ldrb	r2, [r7, #14]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	32ae      	adds	r2, #174	; 0xae
 800bee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00f      	beq.n	800bf0c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800beec:	7bba      	ldrb	r2, [r7, #14]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bef4:	7bba      	ldrb	r2, [r7, #14]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	32ae      	adds	r2, #174	; 0xae
 800befa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	6839      	ldr	r1, [r7, #0]
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	4798      	blx	r3
 800bf06:	4603      	mov	r3, r0
 800bf08:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf0a:	e004      	b.n	800bf16 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf10:	e001      	b.n	800bf16 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf12:	2303      	movs	r3, #3
 800bf14:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	88db      	ldrh	r3, [r3, #6]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d110      	bne.n	800bf40 <USBD_StdItfReq+0xc0>
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10d      	bne.n	800bf40 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fdc7 	bl	800cab8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf2a:	e009      	b.n	800bf40 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fcf7 	bl	800c922 <USBD_CtlError>
          break;
 800bf34:	e004      	b.n	800bf40 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf36:	6839      	ldr	r1, [r7, #0]
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fcf2 	bl	800c922 <USBD_CtlError>
          break;
 800bf3e:	e000      	b.n	800bf42 <USBD_StdItfReq+0xc2>
          break;
 800bf40:	bf00      	nop
      }
      break;
 800bf42:	e004      	b.n	800bf4e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fceb 	bl	800c922 <USBD_CtlError>
      break;
 800bf4c:	bf00      	nop
  }

  return ret;
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	889b      	ldrh	r3, [r3, #4]
 800bf6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf74:	2b40      	cmp	r3, #64	; 0x40
 800bf76:	d007      	beq.n	800bf88 <USBD_StdEPReq+0x30>
 800bf78:	2b40      	cmp	r3, #64	; 0x40
 800bf7a:	f200 817f 	bhi.w	800c27c <USBD_StdEPReq+0x324>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d02a      	beq.n	800bfd8 <USBD_StdEPReq+0x80>
 800bf82:	2b20      	cmp	r3, #32
 800bf84:	f040 817a 	bne.w	800c27c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff fe83 	bl	800bc98 <USBD_CoreFindEP>
 800bf92:	4603      	mov	r3, r0
 800bf94:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf96:	7b7b      	ldrb	r3, [r7, #13]
 800bf98:	2bff      	cmp	r3, #255	; 0xff
 800bf9a:	f000 8174 	beq.w	800c286 <USBD_StdEPReq+0x32e>
 800bf9e:	7b7b      	ldrb	r3, [r7, #13]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f040 8170 	bne.w	800c286 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bfa6:	7b7a      	ldrb	r2, [r7, #13]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfae:	7b7a      	ldrb	r2, [r7, #13]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	32ae      	adds	r2, #174	; 0xae
 800bfb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 8163 	beq.w	800c286 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfc0:	7b7a      	ldrb	r2, [r7, #13]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	32ae      	adds	r2, #174	; 0xae
 800bfc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	4798      	blx	r3
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bfd6:	e156      	b.n	800c286 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	785b      	ldrb	r3, [r3, #1]
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	d008      	beq.n	800bff2 <USBD_StdEPReq+0x9a>
 800bfe0:	2b03      	cmp	r3, #3
 800bfe2:	f300 8145 	bgt.w	800c270 <USBD_StdEPReq+0x318>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f000 809b 	beq.w	800c122 <USBD_StdEPReq+0x1ca>
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d03c      	beq.n	800c06a <USBD_StdEPReq+0x112>
 800bff0:	e13e      	b.n	800c270 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b02      	cmp	r3, #2
 800bffc:	d002      	beq.n	800c004 <USBD_StdEPReq+0xac>
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d016      	beq.n	800c030 <USBD_StdEPReq+0xd8>
 800c002:	e02c      	b.n	800c05e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c004:	7bbb      	ldrb	r3, [r7, #14]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00d      	beq.n	800c026 <USBD_StdEPReq+0xce>
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	2b80      	cmp	r3, #128	; 0x80
 800c00e:	d00a      	beq.n	800c026 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c010:	7bbb      	ldrb	r3, [r7, #14]
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f003 fd79 	bl	800fb0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c01a:	2180      	movs	r1, #128	; 0x80
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f003 fd75 	bl	800fb0c <USBD_LL_StallEP>
 800c022:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c024:	e020      	b.n	800c068 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c026:	6839      	ldr	r1, [r7, #0]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fc7a 	bl	800c922 <USBD_CtlError>
              break;
 800c02e:	e01b      	b.n	800c068 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	885b      	ldrh	r3, [r3, #2]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10e      	bne.n	800c056 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00b      	beq.n	800c056 <USBD_StdEPReq+0xfe>
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	2b80      	cmp	r3, #128	; 0x80
 800c042:	d008      	beq.n	800c056 <USBD_StdEPReq+0xfe>
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	88db      	ldrh	r3, [r3, #6]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d104      	bne.n	800c056 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	4619      	mov	r1, r3
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f003 fd5b 	bl	800fb0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fd2e 	bl	800cab8 <USBD_CtlSendStatus>

              break;
 800c05c:	e004      	b.n	800c068 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fc5e 	bl	800c922 <USBD_CtlError>
              break;
 800c066:	bf00      	nop
          }
          break;
 800c068:	e107      	b.n	800c27a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b02      	cmp	r3, #2
 800c074:	d002      	beq.n	800c07c <USBD_StdEPReq+0x124>
 800c076:	2b03      	cmp	r3, #3
 800c078:	d016      	beq.n	800c0a8 <USBD_StdEPReq+0x150>
 800c07a:	e04b      	b.n	800c114 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00d      	beq.n	800c09e <USBD_StdEPReq+0x146>
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	2b80      	cmp	r3, #128	; 0x80
 800c086:	d00a      	beq.n	800c09e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f003 fd3d 	bl	800fb0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c092:	2180      	movs	r1, #128	; 0x80
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f003 fd39 	bl	800fb0c <USBD_LL_StallEP>
 800c09a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c09c:	e040      	b.n	800c120 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c09e:	6839      	ldr	r1, [r7, #0]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fc3e 	bl	800c922 <USBD_CtlError>
              break;
 800c0a6:	e03b      	b.n	800c120 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	885b      	ldrh	r3, [r3, #2]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d136      	bne.n	800c11e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d004      	beq.n	800c0c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0ba:	7bbb      	ldrb	r3, [r7, #14]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f003 fd43 	bl	800fb4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fcf7 	bl	800cab8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0ca:	7bbb      	ldrb	r3, [r7, #14]
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7ff fde2 	bl	800bc98 <USBD_CoreFindEP>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0d8:	7b7b      	ldrb	r3, [r7, #13]
 800c0da:	2bff      	cmp	r3, #255	; 0xff
 800c0dc:	d01f      	beq.n	800c11e <USBD_StdEPReq+0x1c6>
 800c0de:	7b7b      	ldrb	r3, [r7, #13]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d11c      	bne.n	800c11e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c0e4:	7b7a      	ldrb	r2, [r7, #13]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c0ec:	7b7a      	ldrb	r2, [r7, #13]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	32ae      	adds	r2, #174	; 0xae
 800c0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d010      	beq.n	800c11e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0fc:	7b7a      	ldrb	r2, [r7, #13]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	32ae      	adds	r2, #174	; 0xae
 800c102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	4798      	blx	r3
 800c10e:	4603      	mov	r3, r0
 800c110:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c112:	e004      	b.n	800c11e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fc03 	bl	800c922 <USBD_CtlError>
              break;
 800c11c:	e000      	b.n	800c120 <USBD_StdEPReq+0x1c8>
              break;
 800c11e:	bf00      	nop
          }
          break;
 800c120:	e0ab      	b.n	800c27a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d002      	beq.n	800c134 <USBD_StdEPReq+0x1dc>
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d032      	beq.n	800c198 <USBD_StdEPReq+0x240>
 800c132:	e097      	b.n	800c264 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d007      	beq.n	800c14a <USBD_StdEPReq+0x1f2>
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	2b80      	cmp	r3, #128	; 0x80
 800c13e:	d004      	beq.n	800c14a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fbed 	bl	800c922 <USBD_CtlError>
                break;
 800c148:	e091      	b.n	800c26e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c14a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da0b      	bge.n	800c16a <USBD_StdEPReq+0x212>
 800c152:	7bbb      	ldrb	r3, [r7, #14]
 800c154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	3310      	adds	r3, #16
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4413      	add	r3, r2
 800c166:	3304      	adds	r3, #4
 800c168:	e00b      	b.n	800c182 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
 800c16c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c170:	4613      	mov	r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	4413      	add	r3, r2
 800c180:	3304      	adds	r3, #4
 800c182:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	2200      	movs	r2, #0
 800c188:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2202      	movs	r2, #2
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fc37 	bl	800ca04 <USBD_CtlSendData>
              break;
 800c196:	e06a      	b.n	800c26e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	da11      	bge.n	800c1c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
 800c1a2:	f003 020f 	and.w	r2, r3, #15
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	440b      	add	r3, r1
 800c1b2:	3324      	adds	r3, #36	; 0x24
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d117      	bne.n	800c1ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fbb0 	bl	800c922 <USBD_CtlError>
                  break;
 800c1c2:	e054      	b.n	800c26e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1c4:	7bbb      	ldrb	r3, [r7, #14]
 800c1c6:	f003 020f 	and.w	r2, r3, #15
 800c1ca:	6879      	ldr	r1, [r7, #4]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	440b      	add	r3, r1
 800c1d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d104      	bne.n	800c1ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fb9d 	bl	800c922 <USBD_CtlError>
                  break;
 800c1e8:	e041      	b.n	800c26e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	da0b      	bge.n	800c20a <USBD_StdEPReq+0x2b2>
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	3310      	adds	r3, #16
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	4413      	add	r3, r2
 800c206:	3304      	adds	r3, #4
 800c208:	e00b      	b.n	800c222 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c20a:	7bbb      	ldrb	r3, [r7, #14]
 800c20c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c210:	4613      	mov	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	4413      	add	r3, r2
 800c220:	3304      	adds	r3, #4
 800c222:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c224:	7bbb      	ldrb	r3, [r7, #14]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d002      	beq.n	800c230 <USBD_StdEPReq+0x2d8>
 800c22a:	7bbb      	ldrb	r3, [r7, #14]
 800c22c:	2b80      	cmp	r3, #128	; 0x80
 800c22e:	d103      	bne.n	800c238 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2200      	movs	r2, #0
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	e00e      	b.n	800c256 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c238:	7bbb      	ldrb	r3, [r7, #14]
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f003 fca3 	bl	800fb88 <USBD_LL_IsStallEP>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d003      	beq.n	800c250 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	2201      	movs	r2, #1
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	e002      	b.n	800c256 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2202      	movs	r2, #2
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fbd1 	bl	800ca04 <USBD_CtlSendData>
              break;
 800c262:	e004      	b.n	800c26e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fb5b 	bl	800c922 <USBD_CtlError>
              break;
 800c26c:	bf00      	nop
          }
          break;
 800c26e:	e004      	b.n	800c27a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fb55 	bl	800c922 <USBD_CtlError>
          break;
 800c278:	bf00      	nop
      }
      break;
 800c27a:	e005      	b.n	800c288 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fb4f 	bl	800c922 <USBD_CtlError>
      break;
 800c284:	e000      	b.n	800c288 <USBD_StdEPReq+0x330>
      break;
 800c286:	bf00      	nop
  }

  return ret;
 800c288:	7bfb      	ldrb	r3, [r7, #15]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
	...

0800c294 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	885b      	ldrh	r3, [r3, #2]
 800c2ae:	0a1b      	lsrs	r3, r3, #8
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	2b06      	cmp	r3, #6
 800c2b6:	f200 8128 	bhi.w	800c50a <USBD_GetDescriptor+0x276>
 800c2ba:	a201      	add	r2, pc, #4	; (adr r2, 800c2c0 <USBD_GetDescriptor+0x2c>)
 800c2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c0:	0800c2dd 	.word	0x0800c2dd
 800c2c4:	0800c2f5 	.word	0x0800c2f5
 800c2c8:	0800c335 	.word	0x0800c335
 800c2cc:	0800c50b 	.word	0x0800c50b
 800c2d0:	0800c50b 	.word	0x0800c50b
 800c2d4:	0800c4ab 	.word	0x0800c4ab
 800c2d8:	0800c4d7 	.word	0x0800c4d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	7c12      	ldrb	r2, [r2, #16]
 800c2e8:	f107 0108 	add.w	r1, r7, #8
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4798      	blx	r3
 800c2f0:	60f8      	str	r0, [r7, #12]
      break;
 800c2f2:	e112      	b.n	800c51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	7c1b      	ldrb	r3, [r3, #16]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10d      	bne.n	800c318 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c304:	f107 0208 	add.w	r2, r7, #8
 800c308:	4610      	mov	r0, r2
 800c30a:	4798      	blx	r3
 800c30c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3301      	adds	r3, #1
 800c312:	2202      	movs	r2, #2
 800c314:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c316:	e100      	b.n	800c51a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c320:	f107 0208 	add.w	r2, r7, #8
 800c324:	4610      	mov	r0, r2
 800c326:	4798      	blx	r3
 800c328:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3301      	adds	r3, #1
 800c32e:	2202      	movs	r2, #2
 800c330:	701a      	strb	r2, [r3, #0]
      break;
 800c332:	e0f2      	b.n	800c51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	885b      	ldrh	r3, [r3, #2]
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	2b05      	cmp	r3, #5
 800c33c:	f200 80ac 	bhi.w	800c498 <USBD_GetDescriptor+0x204>
 800c340:	a201      	add	r2, pc, #4	; (adr r2, 800c348 <USBD_GetDescriptor+0xb4>)
 800c342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c346:	bf00      	nop
 800c348:	0800c361 	.word	0x0800c361
 800c34c:	0800c395 	.word	0x0800c395
 800c350:	0800c3c9 	.word	0x0800c3c9
 800c354:	0800c3fd 	.word	0x0800c3fd
 800c358:	0800c431 	.word	0x0800c431
 800c35c:	0800c465 	.word	0x0800c465
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00b      	beq.n	800c384 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	7c12      	ldrb	r2, [r2, #16]
 800c378:	f107 0108 	add.w	r1, r7, #8
 800c37c:	4610      	mov	r0, r2
 800c37e:	4798      	blx	r3
 800c380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c382:	e091      	b.n	800c4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 facb 	bl	800c922 <USBD_CtlError>
            err++;
 800c38c:	7afb      	ldrb	r3, [r7, #11]
 800c38e:	3301      	adds	r3, #1
 800c390:	72fb      	strb	r3, [r7, #11]
          break;
 800c392:	e089      	b.n	800c4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00b      	beq.n	800c3b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	7c12      	ldrb	r2, [r2, #16]
 800c3ac:	f107 0108 	add.w	r1, r7, #8
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	4798      	blx	r3
 800c3b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3b6:	e077      	b.n	800c4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3b8:	6839      	ldr	r1, [r7, #0]
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fab1 	bl	800c922 <USBD_CtlError>
            err++;
 800c3c0:	7afb      	ldrb	r3, [r7, #11]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3c6:	e06f      	b.n	800c4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00b      	beq.n	800c3ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	7c12      	ldrb	r2, [r2, #16]
 800c3e0:	f107 0108 	add.w	r1, r7, #8
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	4798      	blx	r3
 800c3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ea:	e05d      	b.n	800c4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 fa97 	bl	800c922 <USBD_CtlError>
            err++;
 800c3f4:	7afb      	ldrb	r3, [r7, #11]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3fa:	e055      	b.n	800c4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00b      	beq.n	800c420 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	7c12      	ldrb	r2, [r2, #16]
 800c414:	f107 0108 	add.w	r1, r7, #8
 800c418:	4610      	mov	r0, r2
 800c41a:	4798      	blx	r3
 800c41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c41e:	e043      	b.n	800c4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fa7d 	bl	800c922 <USBD_CtlError>
            err++;
 800c428:	7afb      	ldrb	r3, [r7, #11]
 800c42a:	3301      	adds	r3, #1
 800c42c:	72fb      	strb	r3, [r7, #11]
          break;
 800c42e:	e03b      	b.n	800c4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c436:	695b      	ldr	r3, [r3, #20]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00b      	beq.n	800c454 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c442:	695b      	ldr	r3, [r3, #20]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	7c12      	ldrb	r2, [r2, #16]
 800c448:	f107 0108 	add.w	r1, r7, #8
 800c44c:	4610      	mov	r0, r2
 800c44e:	4798      	blx	r3
 800c450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c452:	e029      	b.n	800c4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fa63 	bl	800c922 <USBD_CtlError>
            err++;
 800c45c:	7afb      	ldrb	r3, [r7, #11]
 800c45e:	3301      	adds	r3, #1
 800c460:	72fb      	strb	r3, [r7, #11]
          break;
 800c462:	e021      	b.n	800c4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c46a:	699b      	ldr	r3, [r3, #24]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d00b      	beq.n	800c488 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c476:	699b      	ldr	r3, [r3, #24]
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	7c12      	ldrb	r2, [r2, #16]
 800c47c:	f107 0108 	add.w	r1, r7, #8
 800c480:	4610      	mov	r0, r2
 800c482:	4798      	blx	r3
 800c484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c486:	e00f      	b.n	800c4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 fa49 	bl	800c922 <USBD_CtlError>
            err++;
 800c490:	7afb      	ldrb	r3, [r7, #11]
 800c492:	3301      	adds	r3, #1
 800c494:	72fb      	strb	r3, [r7, #11]
          break;
 800c496:	e007      	b.n	800c4a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fa41 	bl	800c922 <USBD_CtlError>
          err++;
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c4a6:	bf00      	nop
      }
      break;
 800c4a8:	e037      	b.n	800c51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	7c1b      	ldrb	r3, [r3, #16]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d109      	bne.n	800c4c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ba:	f107 0208 	add.w	r2, r7, #8
 800c4be:	4610      	mov	r0, r2
 800c4c0:	4798      	blx	r3
 800c4c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4c4:	e029      	b.n	800c51a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4c6:	6839      	ldr	r1, [r7, #0]
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fa2a 	bl	800c922 <USBD_CtlError>
        err++;
 800c4ce:	7afb      	ldrb	r3, [r7, #11]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c4d4:	e021      	b.n	800c51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	7c1b      	ldrb	r3, [r3, #16]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10d      	bne.n	800c4fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e6:	f107 0208 	add.w	r2, r7, #8
 800c4ea:	4610      	mov	r0, r2
 800c4ec:	4798      	blx	r3
 800c4ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	2207      	movs	r2, #7
 800c4f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4f8:	e00f      	b.n	800c51a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fa10 	bl	800c922 <USBD_CtlError>
        err++;
 800c502:	7afb      	ldrb	r3, [r7, #11]
 800c504:	3301      	adds	r3, #1
 800c506:	72fb      	strb	r3, [r7, #11]
      break;
 800c508:	e007      	b.n	800c51a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fa08 	bl	800c922 <USBD_CtlError>
      err++;
 800c512:	7afb      	ldrb	r3, [r7, #11]
 800c514:	3301      	adds	r3, #1
 800c516:	72fb      	strb	r3, [r7, #11]
      break;
 800c518:	bf00      	nop
  }

  if (err != 0U)
 800c51a:	7afb      	ldrb	r3, [r7, #11]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d11e      	bne.n	800c55e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	88db      	ldrh	r3, [r3, #6]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d016      	beq.n	800c556 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c528:	893b      	ldrh	r3, [r7, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00e      	beq.n	800c54c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	88da      	ldrh	r2, [r3, #6]
 800c532:	893b      	ldrh	r3, [r7, #8]
 800c534:	4293      	cmp	r3, r2
 800c536:	bf28      	it	cs
 800c538:	4613      	movcs	r3, r2
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c53e:	893b      	ldrh	r3, [r7, #8]
 800c540:	461a      	mov	r2, r3
 800c542:	68f9      	ldr	r1, [r7, #12]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fa5d 	bl	800ca04 <USBD_CtlSendData>
 800c54a:	e009      	b.n	800c560 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c54c:	6839      	ldr	r1, [r7, #0]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f9e7 	bl	800c922 <USBD_CtlError>
 800c554:	e004      	b.n	800c560 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 faae 	bl	800cab8 <USBD_CtlSendStatus>
 800c55c:	e000      	b.n	800c560 <USBD_GetDescriptor+0x2cc>
    return;
 800c55e:	bf00      	nop
  }
}
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop

0800c568 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	889b      	ldrh	r3, [r3, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d131      	bne.n	800c5de <USBD_SetAddress+0x76>
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	88db      	ldrh	r3, [r3, #6]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d12d      	bne.n	800c5de <USBD_SetAddress+0x76>
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	885b      	ldrh	r3, [r3, #2]
 800c586:	2b7f      	cmp	r3, #127	; 0x7f
 800c588:	d829      	bhi.n	800c5de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	885b      	ldrh	r3, [r3, #2]
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c594:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	d104      	bne.n	800c5ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c5a2:	6839      	ldr	r1, [r7, #0]
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 f9bc 	bl	800c922 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5aa:	e01d      	b.n	800c5e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	7bfa      	ldrb	r2, [r7, #15]
 800c5b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f003 fb11 	bl	800fbe0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fa7a 	bl	800cab8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c5c4:	7bfb      	ldrb	r3, [r7, #15]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d004      	beq.n	800c5d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2202      	movs	r2, #2
 800c5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d2:	e009      	b.n	800c5e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5dc:	e004      	b.n	800c5e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f99e 	bl	800c922 <USBD_CtlError>
  }
}
 800c5e6:	bf00      	nop
 800c5e8:	bf00      	nop
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	885b      	ldrh	r3, [r3, #2]
 800c602:	b2da      	uxtb	r2, r3
 800c604:	4b4e      	ldr	r3, [pc, #312]	; (800c740 <USBD_SetConfig+0x150>)
 800c606:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c608:	4b4d      	ldr	r3, [pc, #308]	; (800c740 <USBD_SetConfig+0x150>)
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d905      	bls.n	800c61c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 f985 	bl	800c922 <USBD_CtlError>
    return USBD_FAIL;
 800c618:	2303      	movs	r3, #3
 800c61a:	e08c      	b.n	800c736 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b02      	cmp	r3, #2
 800c626:	d002      	beq.n	800c62e <USBD_SetConfig+0x3e>
 800c628:	2b03      	cmp	r3, #3
 800c62a:	d029      	beq.n	800c680 <USBD_SetConfig+0x90>
 800c62c:	e075      	b.n	800c71a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c62e:	4b44      	ldr	r3, [pc, #272]	; (800c740 <USBD_SetConfig+0x150>)
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d020      	beq.n	800c678 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c636:	4b42      	ldr	r3, [pc, #264]	; (800c740 <USBD_SetConfig+0x150>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c640:	4b3f      	ldr	r3, [pc, #252]	; (800c740 <USBD_SetConfig+0x150>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7fe ffe7 	bl	800b61a <USBD_SetClassConfig>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c650:	7bfb      	ldrb	r3, [r7, #15]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d008      	beq.n	800c668 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 f962 	bl	800c922 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2202      	movs	r2, #2
 800c662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c666:	e065      	b.n	800c734 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fa25 	bl	800cab8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2203      	movs	r2, #3
 800c672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c676:	e05d      	b.n	800c734 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 fa1d 	bl	800cab8 <USBD_CtlSendStatus>
      break;
 800c67e:	e059      	b.n	800c734 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c680:	4b2f      	ldr	r3, [pc, #188]	; (800c740 <USBD_SetConfig+0x150>)
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d112      	bne.n	800c6ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2202      	movs	r2, #2
 800c68c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c690:	4b2b      	ldr	r3, [pc, #172]	; (800c740 <USBD_SetConfig+0x150>)
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	461a      	mov	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c69a:	4b29      	ldr	r3, [pc, #164]	; (800c740 <USBD_SetConfig+0x150>)
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f7fe ffd6 	bl	800b652 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 fa06 	bl	800cab8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6ac:	e042      	b.n	800c734 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c6ae:	4b24      	ldr	r3, [pc, #144]	; (800c740 <USBD_SetConfig+0x150>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d02a      	beq.n	800c712 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7fe ffc4 	bl	800b652 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c6ca:	4b1d      	ldr	r3, [pc, #116]	; (800c740 <USBD_SetConfig+0x150>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6d4:	4b1a      	ldr	r3, [pc, #104]	; (800c740 <USBD_SetConfig+0x150>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7fe ff9d 	bl	800b61a <USBD_SetClassConfig>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00f      	beq.n	800c70a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f918 	bl	800c922 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7fe ffa9 	bl	800b652 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2202      	movs	r2, #2
 800c704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c708:	e014      	b.n	800c734 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f9d4 	bl	800cab8 <USBD_CtlSendStatus>
      break;
 800c710:	e010      	b.n	800c734 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f9d0 	bl	800cab8 <USBD_CtlSendStatus>
      break;
 800c718:	e00c      	b.n	800c734 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c71a:	6839      	ldr	r1, [r7, #0]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f900 	bl	800c922 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c722:	4b07      	ldr	r3, [pc, #28]	; (800c740 <USBD_SetConfig+0x150>)
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7fe ff92 	bl	800b652 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c72e:	2303      	movs	r3, #3
 800c730:	73fb      	strb	r3, [r7, #15]
      break;
 800c732:	bf00      	nop
  }

  return ret;
 800c734:	7bfb      	ldrb	r3, [r7, #15]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	20000c14 	.word	0x20000c14

0800c744 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	88db      	ldrh	r3, [r3, #6]
 800c752:	2b01      	cmp	r3, #1
 800c754:	d004      	beq.n	800c760 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 f8e2 	bl	800c922 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c75e:	e023      	b.n	800c7a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b02      	cmp	r3, #2
 800c76a:	dc02      	bgt.n	800c772 <USBD_GetConfig+0x2e>
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	dc03      	bgt.n	800c778 <USBD_GetConfig+0x34>
 800c770:	e015      	b.n	800c79e <USBD_GetConfig+0x5a>
 800c772:	2b03      	cmp	r3, #3
 800c774:	d00b      	beq.n	800c78e <USBD_GetConfig+0x4a>
 800c776:	e012      	b.n	800c79e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	3308      	adds	r3, #8
 800c782:	2201      	movs	r2, #1
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f93c 	bl	800ca04 <USBD_CtlSendData>
        break;
 800c78c:	e00c      	b.n	800c7a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	3304      	adds	r3, #4
 800c792:	2201      	movs	r2, #1
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f934 	bl	800ca04 <USBD_CtlSendData>
        break;
 800c79c:	e004      	b.n	800c7a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c79e:	6839      	ldr	r1, [r7, #0]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f8be 	bl	800c922 <USBD_CtlError>
        break;
 800c7a6:	bf00      	nop
}
 800c7a8:	bf00      	nop
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d81e      	bhi.n	800c806 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	88db      	ldrh	r3, [r3, #6]
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d004      	beq.n	800c7da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f8a5 	bl	800c922 <USBD_CtlError>
        break;
 800c7d8:	e01a      	b.n	800c810 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d005      	beq.n	800c7f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	f043 0202 	orr.w	r2, r3, #2
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	330c      	adds	r3, #12
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f900 	bl	800ca04 <USBD_CtlSendData>
      break;
 800c804:	e004      	b.n	800c810 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 f88a 	bl	800c922 <USBD_CtlError>
      break;
 800c80e:	bf00      	nop
  }
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	885b      	ldrh	r3, [r3, #2]
 800c826:	2b01      	cmp	r3, #1
 800c828:	d107      	bne.n	800c83a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2201      	movs	r2, #1
 800c82e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f940 	bl	800cab8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c838:	e013      	b.n	800c862 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	885b      	ldrh	r3, [r3, #2]
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d10b      	bne.n	800c85a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	889b      	ldrh	r3, [r3, #4]
 800c846:	0a1b      	lsrs	r3, r3, #8
 800c848:	b29b      	uxth	r3, r3
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f930 	bl	800cab8 <USBD_CtlSendStatus>
}
 800c858:	e003      	b.n	800c862 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 f860 	bl	800c922 <USBD_CtlError>
}
 800c862:	bf00      	nop
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b082      	sub	sp, #8
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	3b01      	subs	r3, #1
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d80b      	bhi.n	800c89a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	885b      	ldrh	r3, [r3, #2]
 800c886:	2b01      	cmp	r3, #1
 800c888:	d10c      	bne.n	800c8a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f910 	bl	800cab8 <USBD_CtlSendStatus>
      }
      break;
 800c898:	e004      	b.n	800c8a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c89a:	6839      	ldr	r1, [r7, #0]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 f840 	bl	800c922 <USBD_CtlError>
      break;
 800c8a2:	e000      	b.n	800c8a6 <USBD_ClrFeature+0x3c>
      break;
 800c8a4:	bf00      	nop
  }
}
 800c8a6:	bf00      	nop
 800c8a8:	3708      	adds	r7, #8
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b084      	sub	sp, #16
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	781a      	ldrb	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	781a      	ldrb	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f7ff fa41 	bl	800bd60 <SWAPBYTE>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f7ff fa34 	bl	800bd60 <SWAPBYTE>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	3301      	adds	r3, #1
 800c904:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	3301      	adds	r3, #1
 800c90a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f7ff fa27 	bl	800bd60 <SWAPBYTE>
 800c912:	4603      	mov	r3, r0
 800c914:	461a      	mov	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	80da      	strh	r2, [r3, #6]
}
 800c91a:	bf00      	nop
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b082      	sub	sp, #8
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c92c:	2180      	movs	r1, #128	; 0x80
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f003 f8ec 	bl	800fb0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c934:	2100      	movs	r1, #0
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f003 f8e8 	bl	800fb0c <USBD_LL_StallEP>
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b086      	sub	sp, #24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c950:	2300      	movs	r3, #0
 800c952:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d036      	beq.n	800c9c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c95e:	6938      	ldr	r0, [r7, #16]
 800c960:	f000 f836 	bl	800c9d0 <USBD_GetLen>
 800c964:	4603      	mov	r3, r0
 800c966:	3301      	adds	r3, #1
 800c968:	b29b      	uxth	r3, r3
 800c96a:	005b      	lsls	r3, r3, #1
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c972:	7dfb      	ldrb	r3, [r7, #23]
 800c974:	68ba      	ldr	r2, [r7, #8]
 800c976:	4413      	add	r3, r2
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	7812      	ldrb	r2, [r2, #0]
 800c97c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	3301      	adds	r3, #1
 800c982:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c984:	7dfb      	ldrb	r3, [r7, #23]
 800c986:	68ba      	ldr	r2, [r7, #8]
 800c988:	4413      	add	r3, r2
 800c98a:	2203      	movs	r2, #3
 800c98c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	3301      	adds	r3, #1
 800c992:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c994:	e013      	b.n	800c9be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	4413      	add	r3, r2
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	7812      	ldrb	r2, [r2, #0]
 800c9a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	613b      	str	r3, [r7, #16]
    idx++;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9ae:	7dfb      	ldrb	r3, [r7, #23]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c9b8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1e7      	bne.n	800c996 <USBD_GetString+0x52>
 800c9c6:	e000      	b.n	800c9ca <USBD_GetString+0x86>
    return;
 800c9c8:	bf00      	nop
  }
}
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c9e0:	e005      	b.n	800c9ee <USBD_GetLen+0x1e>
  {
    len++;
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1f5      	bne.n	800c9e2 <USBD_GetLen+0x12>
  }

  return len;
 800c9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3714      	adds	r7, #20
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	2100      	movs	r1, #0
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f003 f8f7 	bl	800fc1e <USBD_LL_Transmit>

  return USBD_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f003 f8e6 	bl	800fc1e <USBD_LL_Transmit>

  return USBD_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2203      	movs	r2, #3
 800ca6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	2100      	movs	r1, #0
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f003 f8ea 	bl	800fc60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca8c:	2300      	movs	r3, #0
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b084      	sub	sp, #16
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	60f8      	str	r0, [r7, #12]
 800ca9e:	60b9      	str	r1, [r7, #8]
 800caa0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	68ba      	ldr	r2, [r7, #8]
 800caa6:	2100      	movs	r1, #0
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f003 f8d9 	bl	800fc60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2204      	movs	r2, #4
 800cac4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cac8:	2300      	movs	r3, #0
 800caca:	2200      	movs	r2, #0
 800cacc:	2100      	movs	r1, #0
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f003 f8a5 	bl	800fc1e <USBD_LL_Transmit>

  return USBD_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2205      	movs	r2, #5
 800caea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800caee:	2300      	movs	r3, #0
 800caf0:	2200      	movs	r2, #0
 800caf2:	2100      	movs	r1, #0
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f003 f8b3 	bl	800fc60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	60fb      	str	r3, [r7, #12]

  if (priority != osPriorityError) {
 800cb12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb16:	2b84      	cmp	r3, #132	; 0x84
 800cb18:	d005      	beq.n	800cb26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cb1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	4413      	add	r3, r2
 800cb22:	3303      	adds	r3, #3
 800cb24:	60fb      	str	r3, [r7, #12]
  }

  return fpriority;
 800cb26:	68fb      	ldr	r3, [r7, #12]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3714      	adds	r7, #20
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cb38:	f001 f8d6 	bl	800dce8 <vTaskStartScheduler>

  return osOK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cb42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb44:	b089      	sub	sp, #36	; 0x24
 800cb46:	af04      	add	r7, sp, #16
 800cb48:	6078      	str	r0, [r7, #4]
 800cb4a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d020      	beq.n	800cb96 <osThreadCreate+0x54>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	699b      	ldr	r3, [r3, #24]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d01c      	beq.n	800cb96 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685c      	ldr	r4, [r3, #4]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	691e      	ldr	r6, [r3, #16]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7ff ffc8 	bl	800cb04 <makeFreeRtosPriority>
 800cb74:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	695b      	ldr	r3, [r3, #20]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb7e:	9202      	str	r2, [sp, #8]
 800cb80:	9301      	str	r3, [sp, #4]
 800cb82:	9100      	str	r1, [sp, #0]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	4632      	mov	r2, r6
 800cb88:	4629      	mov	r1, r5
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f000 fdc8 	bl	800d720 <xTaskCreateStatic>
 800cb90:	4603      	mov	r3, r0
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	e01c      	b.n	800cbd0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685c      	ldr	r4, [r3, #4]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cba2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff ffaa 	bl	800cb04 <makeFreeRtosPriority>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	f107 030c 	add.w	r3, r7, #12
 800cbb6:	9301      	str	r3, [sp, #4]
 800cbb8:	9200      	str	r2, [sp, #0]
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	4632      	mov	r2, r6
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f000 fe0a 	bl	800d7da <xTaskCreate>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d001      	beq.n	800cbd0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	e000      	b.n	800cbd2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }
#endif

  return handle;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3714      	adds	r7, #20
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbda <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b084      	sub	sp, #16
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	60fb      	str	r3, [r7, #12]

  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <osDelay+0x16>
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	e000      	b.n	800cbf2 <osDelay+0x18>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 ffb2 	bl	800db5c <vTaskDelay>

  return osOK;
 800cbf8:	2300      	movs	r3, #0
#else
  (void) millisec;

  return osErrorResource;
#endif
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc02:	b480      	push	{r7}
 800cc04:	b083      	sub	sp, #12
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f103 0208 	add.w	r2, r3, #8
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f103 0208 	add.w	r2, r3, #8
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f103 0208 	add.w	r2, r3, #8
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc36:	bf00      	nop
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc42:	b480      	push	{r7}
 800cc44:	b083      	sub	sp, #12
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cc50:	bf00      	nop
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b085      	sub	sp, #20
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	689a      	ldr	r2, [r3, #8]
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	683a      	ldr	r2, [r7, #0]
 800cc80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	683a      	ldr	r2, [r7, #0]
 800cc86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	1c5a      	adds	r2, r3, #1
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	601a      	str	r2, [r3, #0]
}
 800cc98:	bf00      	nop
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccba:	d103      	bne.n	800ccc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	60fb      	str	r3, [r7, #12]
 800ccc2:	e00c      	b.n	800ccde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	3308      	adds	r3, #8
 800ccc8:	60fb      	str	r3, [r7, #12]
 800ccca:	e002      	b.n	800ccd2 <vListInsert+0x2e>
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	60fb      	str	r3, [r7, #12]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d2f6      	bcs.n	800cccc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	685a      	ldr	r2, [r3, #4]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	601a      	str	r2, [r3, #0]
}
 800cd0a:	bf00      	nop
 800cd0c:	3714      	adds	r7, #20
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd16:	b480      	push	{r7}
 800cd18:	b085      	sub	sp, #20
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	691b      	ldr	r3, [r3, #16]
 800cd22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	6892      	ldr	r2, [r2, #8]
 800cd2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	6852      	ldr	r2, [r2, #4]
 800cd36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d103      	bne.n	800cd4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	689a      	ldr	r2, [r3, #8]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	1e5a      	subs	r2, r3, #1
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
	...

0800cd6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10a      	bne.n	800cd96 <xQueueGenericReset+0x2a>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	60bb      	str	r3, [r7, #8]
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd96:	f002 f985 	bl	800f0a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cda2:	68f9      	ldr	r1, [r7, #12]
 800cda4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cda6:	fb01 f303 	mul.w	r3, r1, r3
 800cdaa:	441a      	add	r2, r3
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	68f9      	ldr	r1, [r7, #12]
 800cdca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cdcc:	fb01 f303 	mul.w	r3, r1, r3
 800cdd0:	441a      	add	r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	22ff      	movs	r2, #255	; 0xff
 800cdda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	22ff      	movs	r2, #255	; 0xff
 800cde2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d114      	bne.n	800ce16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d01a      	beq.n	800ce2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	3310      	adds	r3, #16
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f001 f9f9 	bl	800e1f0 <xTaskRemoveFromEventList>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d012      	beq.n	800ce2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce04:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <xQueueGenericReset+0xcc>)
 800ce06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	f3bf 8f6f 	isb	sy
 800ce14:	e009      	b.n	800ce2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	3310      	adds	r3, #16
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fef1 	bl	800cc02 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	3324      	adds	r3, #36	; 0x24
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7ff feec 	bl	800cc02 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce2a:	f002 f96b 	bl	800f104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce2e:	2301      	movs	r3, #1
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	e000ed04 	.word	0xe000ed04

0800ce3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08e      	sub	sp, #56	; 0x38
 800ce40:	af02      	add	r7, sp, #8
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
 800ce48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d10a      	bne.n	800ce66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ce50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce54:	f383 8811 	msr	BASEPRI, r3
 800ce58:	f3bf 8f6f 	isb	sy
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce62:	bf00      	nop
 800ce64:	e7fe      	b.n	800ce64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10a      	bne.n	800ce82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ce6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce7e:	bf00      	nop
 800ce80:	e7fe      	b.n	800ce80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d002      	beq.n	800ce8e <xQueueGenericCreateStatic+0x52>
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d001      	beq.n	800ce92 <xQueueGenericCreateStatic+0x56>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e000      	b.n	800ce94 <xQueueGenericCreateStatic+0x58>
 800ce92:	2300      	movs	r3, #0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10a      	bne.n	800ceae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	623b      	str	r3, [r7, #32]
}
 800ceaa:	bf00      	nop
 800ceac:	e7fe      	b.n	800ceac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d102      	bne.n	800ceba <xQueueGenericCreateStatic+0x7e>
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <xQueueGenericCreateStatic+0x82>
 800ceba:	2301      	movs	r3, #1
 800cebc:	e000      	b.n	800cec0 <xQueueGenericCreateStatic+0x84>
 800cebe:	2300      	movs	r3, #0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10a      	bne.n	800ceda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	61fb      	str	r3, [r7, #28]
}
 800ced6:	bf00      	nop
 800ced8:	e7fe      	b.n	800ced8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ceda:	2348      	movs	r3, #72	; 0x48
 800cedc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	2b48      	cmp	r3, #72	; 0x48
 800cee2:	d00a      	beq.n	800cefa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee8:	f383 8811 	msr	BASEPRI, r3
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f3bf 8f4f 	dsb	sy
 800cef4:	61bb      	str	r3, [r7, #24]
}
 800cef6:	bf00      	nop
 800cef8:	e7fe      	b.n	800cef8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cefa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00d      	beq.n	800cf22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	4613      	mov	r3, r2
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	68b9      	ldr	r1, [r7, #8]
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f000 f805 	bl	800cf2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3730      	adds	r7, #48	; 0x30
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d103      	bne.n	800cf48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	69ba      	ldr	r2, [r7, #24]
 800cf44:	601a      	str	r2, [r3, #0]
 800cf46:	e002      	b.n	800cf4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf5a:	2101      	movs	r1, #1
 800cf5c:	69b8      	ldr	r0, [r7, #24]
 800cf5e:	f7ff ff05 	bl	800cd6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf62:	bf00      	nop
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
	...

0800cf6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b08e      	sub	sp, #56	; 0x38
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10a      	bne.n	800cf9e <xQueueGenericSend+0x32>
	__asm volatile
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf9a:	bf00      	nop
 800cf9c:	e7fe      	b.n	800cf9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d103      	bne.n	800cfac <xQueueGenericSend+0x40>
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d101      	bne.n	800cfb0 <xQueueGenericSend+0x44>
 800cfac:	2301      	movs	r3, #1
 800cfae:	e000      	b.n	800cfb2 <xQueueGenericSend+0x46>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10a      	bne.n	800cfcc <xQueueGenericSend+0x60>
	__asm volatile
 800cfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfba:	f383 8811 	msr	BASEPRI, r3
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfc8:	bf00      	nop
 800cfca:	e7fe      	b.n	800cfca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	d103      	bne.n	800cfda <xQueueGenericSend+0x6e>
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d101      	bne.n	800cfde <xQueueGenericSend+0x72>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e000      	b.n	800cfe0 <xQueueGenericSend+0x74>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d10a      	bne.n	800cffa <xQueueGenericSend+0x8e>
	__asm volatile
 800cfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe8:	f383 8811 	msr	BASEPRI, r3
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f3bf 8f4f 	dsb	sy
 800cff4:	623b      	str	r3, [r7, #32]
}
 800cff6:	bf00      	nop
 800cff8:	e7fe      	b.n	800cff8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cffa:	f001 fab5 	bl	800e568 <xTaskGetSchedulerState>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d102      	bne.n	800d00a <xQueueGenericSend+0x9e>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d101      	bne.n	800d00e <xQueueGenericSend+0xa2>
 800d00a:	2301      	movs	r3, #1
 800d00c:	e000      	b.n	800d010 <xQueueGenericSend+0xa4>
 800d00e:	2300      	movs	r3, #0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10a      	bne.n	800d02a <xQueueGenericSend+0xbe>
	__asm volatile
 800d014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	61fb      	str	r3, [r7, #28]
}
 800d026:	bf00      	nop
 800d028:	e7fe      	b.n	800d028 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d02a:	f002 f83b 	bl	800f0a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d036:	429a      	cmp	r2, r3
 800d038:	d302      	bcc.n	800d040 <xQueueGenericSend+0xd4>
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d129      	bne.n	800d094 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d040:	683a      	ldr	r2, [r7, #0]
 800d042:	68b9      	ldr	r1, [r7, #8]
 800d044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d046:	f000 fa0b 	bl	800d460 <prvCopyDataToQueue>
 800d04a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d050:	2b00      	cmp	r3, #0
 800d052:	d010      	beq.n	800d076 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d056:	3324      	adds	r3, #36	; 0x24
 800d058:	4618      	mov	r0, r3
 800d05a:	f001 f8c9 	bl	800e1f0 <xTaskRemoveFromEventList>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d013      	beq.n	800d08c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d064:	4b3f      	ldr	r3, [pc, #252]	; (800d164 <xQueueGenericSend+0x1f8>)
 800d066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d06a:	601a      	str	r2, [r3, #0]
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	e00a      	b.n	800d08c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d007      	beq.n	800d08c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d07c:	4b39      	ldr	r3, [pc, #228]	; (800d164 <xQueueGenericSend+0x1f8>)
 800d07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d08c:	f002 f83a 	bl	800f104 <vPortExitCritical>
				return pdPASS;
 800d090:	2301      	movs	r3, #1
 800d092:	e063      	b.n	800d15c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d103      	bne.n	800d0a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d09a:	f002 f833 	bl	800f104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e05c      	b.n	800d15c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d106      	bne.n	800d0b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0a8:	f107 0314 	add.w	r3, r7, #20
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f001 f901 	bl	800e2b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0b6:	f002 f825 	bl	800f104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0ba:	f000 fe7b 	bl	800ddb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0be:	f001 fff1 	bl	800f0a4 <vPortEnterCritical>
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0c8:	b25b      	sxtb	r3, r3
 800d0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0ce:	d103      	bne.n	800d0d8 <xQueueGenericSend+0x16c>
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0de:	b25b      	sxtb	r3, r3
 800d0e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0e4:	d103      	bne.n	800d0ee <xQueueGenericSend+0x182>
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0ee:	f002 f809 	bl	800f104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0f2:	1d3a      	adds	r2, r7, #4
 800d0f4:	f107 0314 	add.w	r3, r7, #20
 800d0f8:	4611      	mov	r1, r2
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f001 f8f0 	bl	800e2e0 <xTaskCheckForTimeOut>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d124      	bne.n	800d150 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d108:	f000 fa94 	bl	800d634 <prvIsQueueFull>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d018      	beq.n	800d144 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	3310      	adds	r3, #16
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	4611      	mov	r1, r2
 800d11a:	4618      	mov	r0, r3
 800d11c:	f001 f818 	bl	800e150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d122:	f000 fa1f 	bl	800d564 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d126:	f000 fe53 	bl	800ddd0 <xTaskResumeAll>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f47f af7c 	bne.w	800d02a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d132:	4b0c      	ldr	r3, [pc, #48]	; (800d164 <xQueueGenericSend+0x1f8>)
 800d134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d138:	601a      	str	r2, [r3, #0]
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	e772      	b.n	800d02a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d146:	f000 fa0d 	bl	800d564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d14a:	f000 fe41 	bl	800ddd0 <xTaskResumeAll>
 800d14e:	e76c      	b.n	800d02a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d152:	f000 fa07 	bl	800d564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d156:	f000 fe3b 	bl	800ddd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d15a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3738      	adds	r7, #56	; 0x38
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	e000ed04 	.word	0xe000ed04

0800d168 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b090      	sub	sp, #64	; 0x40
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]
 800d174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10a      	bne.n	800d196 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d103      	bne.n	800d1a4 <xQueueGenericSendFromISR+0x3c>
 800d19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d101      	bne.n	800d1a8 <xQueueGenericSendFromISR+0x40>
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e000      	b.n	800d1aa <xQueueGenericSendFromISR+0x42>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d10a      	bne.n	800d1c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1c0:	bf00      	nop
 800d1c2:	e7fe      	b.n	800d1c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	d103      	bne.n	800d1d2 <xQueueGenericSendFromISR+0x6a>
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d101      	bne.n	800d1d6 <xQueueGenericSendFromISR+0x6e>
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e000      	b.n	800d1d8 <xQueueGenericSendFromISR+0x70>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10a      	bne.n	800d1f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e0:	f383 8811 	msr	BASEPRI, r3
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	623b      	str	r3, [r7, #32]
}
 800d1ee:	bf00      	nop
 800d1f0:	e7fe      	b.n	800d1f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1f2:	f002 f839 	bl	800f268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d1f6:	f3ef 8211 	mrs	r2, BASEPRI
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	61fa      	str	r2, [r7, #28]
 800d20c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d20e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d210:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d302      	bcc.n	800d224 <xQueueGenericSendFromISR+0xbc>
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	2b02      	cmp	r3, #2
 800d222:	d12f      	bne.n	800d284 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d232:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d234:	683a      	ldr	r2, [r7, #0]
 800d236:	68b9      	ldr	r1, [r7, #8]
 800d238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d23a:	f000 f911 	bl	800d460 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d23e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d246:	d112      	bne.n	800d26e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d016      	beq.n	800d27e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d252:	3324      	adds	r3, #36	; 0x24
 800d254:	4618      	mov	r0, r3
 800d256:	f000 ffcb 	bl	800e1f0 <xTaskRemoveFromEventList>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00e      	beq.n	800d27e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00b      	beq.n	800d27e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2201      	movs	r2, #1
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	e007      	b.n	800d27e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d26e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d272:	3301      	adds	r3, #1
 800d274:	b2db      	uxtb	r3, r3
 800d276:	b25a      	sxtb	r2, r3
 800d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d27e:	2301      	movs	r3, #1
 800d280:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d282:	e001      	b.n	800d288 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d284:	2300      	movs	r3, #0
 800d286:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d292:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d296:	4618      	mov	r0, r3
 800d298:	3740      	adds	r7, #64	; 0x40
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
	...

0800d2a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b08c      	sub	sp, #48	; 0x30
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d10a      	bne.n	800d2d0 <xQueueReceive+0x30>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	623b      	str	r3, [r7, #32]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d103      	bne.n	800d2de <xQueueReceive+0x3e>
 800d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d101      	bne.n	800d2e2 <xQueueReceive+0x42>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e000      	b.n	800d2e4 <xQueueReceive+0x44>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10a      	bne.n	800d2fe <xQueueReceive+0x5e>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	61fb      	str	r3, [r7, #28]
}
 800d2fa:	bf00      	nop
 800d2fc:	e7fe      	b.n	800d2fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2fe:	f001 f933 	bl	800e568 <xTaskGetSchedulerState>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d102      	bne.n	800d30e <xQueueReceive+0x6e>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d101      	bne.n	800d312 <xQueueReceive+0x72>
 800d30e:	2301      	movs	r3, #1
 800d310:	e000      	b.n	800d314 <xQueueReceive+0x74>
 800d312:	2300      	movs	r3, #0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10a      	bne.n	800d32e <xQueueReceive+0x8e>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	61bb      	str	r3, [r7, #24]
}
 800d32a:	bf00      	nop
 800d32c:	e7fe      	b.n	800d32c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d32e:	f001 feb9 	bl	800f0a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d336:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d01f      	beq.n	800d37e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d33e:	68b9      	ldr	r1, [r7, #8]
 800d340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d342:	f000 f8e9 	bl	800d518 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	1e5a      	subs	r2, r3, #1
 800d34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	691b      	ldr	r3, [r3, #16]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00f      	beq.n	800d376 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	3310      	adds	r3, #16
 800d35a:	4618      	mov	r0, r3
 800d35c:	f000 ff48 	bl	800e1f0 <xTaskRemoveFromEventList>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d007      	beq.n	800d376 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d366:	4b3d      	ldr	r3, [pc, #244]	; (800d45c <xQueueReceive+0x1bc>)
 800d368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d376:	f001 fec5 	bl	800f104 <vPortExitCritical>
				return pdPASS;
 800d37a:	2301      	movs	r3, #1
 800d37c:	e069      	b.n	800d452 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d103      	bne.n	800d38c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d384:	f001 febe 	bl	800f104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d388:	2300      	movs	r3, #0
 800d38a:	e062      	b.n	800d452 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d106      	bne.n	800d3a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d392:	f107 0310 	add.w	r3, r7, #16
 800d396:	4618      	mov	r0, r3
 800d398:	f000 ff8c 	bl	800e2b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d39c:	2301      	movs	r3, #1
 800d39e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3a0:	f001 feb0 	bl	800f104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3a4:	f000 fd06 	bl	800ddb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3a8:	f001 fe7c 	bl	800f0a4 <vPortEnterCritical>
 800d3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3b2:	b25b      	sxtb	r3, r3
 800d3b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3b8:	d103      	bne.n	800d3c2 <xQueueReceive+0x122>
 800d3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3c8:	b25b      	sxtb	r3, r3
 800d3ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3ce:	d103      	bne.n	800d3d8 <xQueueReceive+0x138>
 800d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3d8:	f001 fe94 	bl	800f104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3dc:	1d3a      	adds	r2, r7, #4
 800d3de:	f107 0310 	add.w	r3, r7, #16
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 ff7b 	bl	800e2e0 <xTaskCheckForTimeOut>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d123      	bne.n	800d438 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3f2:	f000 f909 	bl	800d608 <prvIsQueueEmpty>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d017      	beq.n	800d42c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	3324      	adds	r3, #36	; 0x24
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	4611      	mov	r1, r2
 800d404:	4618      	mov	r0, r3
 800d406:	f000 fea3 	bl	800e150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d40c:	f000 f8aa 	bl	800d564 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d410:	f000 fcde 	bl	800ddd0 <xTaskResumeAll>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d189      	bne.n	800d32e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d41a:	4b10      	ldr	r3, [pc, #64]	; (800d45c <xQueueReceive+0x1bc>)
 800d41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	e780      	b.n	800d32e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d42e:	f000 f899 	bl	800d564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d432:	f000 fccd 	bl	800ddd0 <xTaskResumeAll>
 800d436:	e77a      	b.n	800d32e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d43a:	f000 f893 	bl	800d564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d43e:	f000 fcc7 	bl	800ddd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d444:	f000 f8e0 	bl	800d608 <prvIsQueueEmpty>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f43f af6f 	beq.w	800d32e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d452:	4618      	mov	r0, r3
 800d454:	3730      	adds	r7, #48	; 0x30
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	e000ed04 	.word	0xe000ed04

0800d460 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d46c:	2300      	movs	r3, #0
 800d46e:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d474:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d043      	beq.n	800d506 <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d119      	bne.n	800d4b8 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6858      	ldr	r0, [r3, #4]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48c:	461a      	mov	r2, r3
 800d48e:	68b9      	ldr	r1, [r7, #8]
 800d490:	f003 fb30 	bl	8010af4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	685a      	ldr	r2, [r3, #4]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49c:	441a      	add	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	685a      	ldr	r2, [r3, #4]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d32b      	bcc.n	800d506 <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	605a      	str	r2, [r3, #4]
 800d4b6:	e026      	b.n	800d506 <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	68d8      	ldr	r0, [r3, #12]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	68b9      	ldr	r1, [r7, #8]
 800d4c4:	f003 fb16 	bl	8010af4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	68da      	ldr	r2, [r3, #12]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d0:	425b      	negs	r3, r3
 800d4d2:	441a      	add	r2, r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	68da      	ldr	r2, [r3, #12]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d207      	bcs.n	800d4f4 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	689a      	ldr	r2, [r3, #8]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ec:	425b      	negs	r3, r3
 800d4ee:	441a      	add	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d105      	bne.n	800d506 <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	3b01      	subs	r3, #1
 800d504:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	1c5a      	adds	r2, r3, #1
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d50e:	693b      	ldr	r3, [r7, #16]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3718      	adds	r7, #24
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d526:	2b00      	cmp	r3, #0
 800d528:	d018      	beq.n	800d55c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	68da      	ldr	r2, [r3, #12]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d532:	441a      	add	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	68da      	ldr	r2, [r3, #12]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	429a      	cmp	r2, r3
 800d542:	d303      	bcc.n	800d54c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	68d9      	ldr	r1, [r3, #12]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d554:	461a      	mov	r2, r3
 800d556:	6838      	ldr	r0, [r7, #0]
 800d558:	f003 facc 	bl	8010af4 <memcpy>
	}
}
 800d55c:	bf00      	nop
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d56c:	f001 fd9a 	bl	800f0a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d576:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d578:	e011      	b.n	800d59e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d012      	beq.n	800d5a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	3324      	adds	r3, #36	; 0x24
 800d586:	4618      	mov	r0, r3
 800d588:	f000 fe32 	bl	800e1f0 <xTaskRemoveFromEventList>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d001      	beq.n	800d596 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d592:	f000 ff07 	bl	800e3a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d596:	7bfb      	ldrb	r3, [r7, #15]
 800d598:	3b01      	subs	r3, #1
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	dce9      	bgt.n	800d57a <prvUnlockQueue+0x16>
 800d5a6:	e000      	b.n	800d5aa <prvUnlockQueue+0x46>
					break;
 800d5a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	22ff      	movs	r2, #255	; 0xff
 800d5ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d5b2:	f001 fda7 	bl	800f104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d5b6:	f001 fd75 	bl	800f0a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5c2:	e011      	b.n	800d5e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d012      	beq.n	800d5f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	3310      	adds	r3, #16
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f000 fe0d 	bl	800e1f0 <xTaskRemoveFromEventList>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d001      	beq.n	800d5e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d5dc:	f000 fee2 	bl	800e3a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d5e0:	7bbb      	ldrb	r3, [r7, #14]
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	dce9      	bgt.n	800d5c4 <prvUnlockQueue+0x60>
 800d5f0:	e000      	b.n	800d5f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d5f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	22ff      	movs	r2, #255	; 0xff
 800d5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d5fc:	f001 fd82 	bl	800f104 <vPortExitCritical>
}
 800d600:	bf00      	nop
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d610:	f001 fd48 	bl	800f0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d102      	bne.n	800d622 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d61c:	2301      	movs	r3, #1
 800d61e:	60fb      	str	r3, [r7, #12]
 800d620:	e001      	b.n	800d626 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d622:	2300      	movs	r3, #0
 800d624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d626:	f001 fd6d 	bl	800f104 <vPortExitCritical>

	return xReturn;
 800d62a:	68fb      	ldr	r3, [r7, #12]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d63c:	f001 fd32 	bl	800f0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d648:	429a      	cmp	r2, r3
 800d64a:	d102      	bne.n	800d652 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d64c:	2301      	movs	r3, #1
 800d64e:	60fb      	str	r3, [r7, #12]
 800d650:	e001      	b.n	800d656 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d652:	2300      	movs	r3, #0
 800d654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d656:	f001 fd55 	bl	800f104 <vPortExitCritical>

	return xReturn;
 800d65a:	68fb      	ldr	r3, [r7, #12]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d66e:	2300      	movs	r3, #0
 800d670:	60fb      	str	r3, [r7, #12]
 800d672:	e014      	b.n	800d69e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d674:	4a0f      	ldr	r2, [pc, #60]	; (800d6b4 <vQueueAddToRegistry+0x50>)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10b      	bne.n	800d698 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d680:	490c      	ldr	r1, [pc, #48]	; (800d6b4 <vQueueAddToRegistry+0x50>)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	683a      	ldr	r2, [r7, #0]
 800d686:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d68a:	4a0a      	ldr	r2, [pc, #40]	; (800d6b4 <vQueueAddToRegistry+0x50>)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	4413      	add	r3, r2
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d696:	e006      	b.n	800d6a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	3301      	adds	r3, #1
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2b07      	cmp	r3, #7
 800d6a2:	d9e7      	bls.n	800d674 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop
 800d6a8:	3714      	adds	r7, #20
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	20000c18 	.word	0x20000c18

0800d6b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b086      	sub	sp, #24
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d6c8:	f001 fcec 	bl	800f0a4 <vPortEnterCritical>
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6d2:	b25b      	sxtb	r3, r3
 800d6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6d8:	d103      	bne.n	800d6e2 <vQueueWaitForMessageRestricted+0x2a>
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6e8:	b25b      	sxtb	r3, r3
 800d6ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6ee:	d103      	bne.n	800d6f8 <vQueueWaitForMessageRestricted+0x40>
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6f8:	f001 fd04 	bl	800f104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d700:	2b00      	cmp	r3, #0
 800d702:	d106      	bne.n	800d712 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	3324      	adds	r3, #36	; 0x24
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	68b9      	ldr	r1, [r7, #8]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f000 fd43 	bl	800e198 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d712:	6978      	ldr	r0, [r7, #20]
 800d714:	f7ff ff26 	bl	800d564 <prvUnlockQueue>
	}
 800d718:	bf00      	nop
 800d71a:	3718      	adds	r7, #24
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d720:	b580      	push	{r7, lr}
 800d722:	b08e      	sub	sp, #56	; 0x38
 800d724:	af04      	add	r7, sp, #16
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10a      	bne.n	800d74a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	623b      	str	r3, [r7, #32]
}
 800d746:	bf00      	nop
 800d748:	e7fe      	b.n	800d748 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d10a      	bne.n	800d766 <xTaskCreateStatic+0x46>
	__asm volatile
 800d750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	61fb      	str	r3, [r7, #28]
}
 800d762:	bf00      	nop
 800d764:	e7fe      	b.n	800d764 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d766:	235c      	movs	r3, #92	; 0x5c
 800d768:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	2b5c      	cmp	r3, #92	; 0x5c
 800d76e:	d00a      	beq.n	800d786 <xTaskCreateStatic+0x66>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	61bb      	str	r3, [r7, #24]
}
 800d782:	bf00      	nop
 800d784:	e7fe      	b.n	800d784 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d786:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d01e      	beq.n	800d7cc <xTaskCreateStatic+0xac>
 800d78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d790:	2b00      	cmp	r3, #0
 800d792:	d01b      	beq.n	800d7cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d796:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d79c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a0:	2202      	movs	r2, #2
 800d7a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	9303      	str	r3, [sp, #12]
 800d7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ac:	9302      	str	r3, [sp, #8]
 800d7ae:	f107 0314 	add.w	r3, r7, #20
 800d7b2:	9301      	str	r3, [sp, #4]
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	68b9      	ldr	r1, [r7, #8]
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f000 f850 	bl	800d864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7c6:	f000 f8cf 	bl	800d968 <prvAddNewTaskToReadyList>
 800d7ca:	e001      	b.n	800d7d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d7d0:	697b      	ldr	r3, [r7, #20]
	}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3728      	adds	r7, #40	; 0x28
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b08c      	sub	sp, #48	; 0x30
 800d7de:	af04      	add	r7, sp, #16
 800d7e0:	60f8      	str	r0, [r7, #12]
 800d7e2:	60b9      	str	r1, [r7, #8]
 800d7e4:	603b      	str	r3, [r7, #0]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7ea:	88fb      	ldrh	r3, [r7, #6]
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f001 fd7a 	bl	800f2e8 <pvPortMalloc>
 800d7f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00e      	beq.n	800d81a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7fc:	205c      	movs	r0, #92	; 0x5c
 800d7fe:	f001 fd73 	bl	800f2e8 <pvPortMalloc>
 800d802:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d003      	beq.n	800d812 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	697a      	ldr	r2, [r7, #20]
 800d80e:	631a      	str	r2, [r3, #48]	; 0x30
 800d810:	e005      	b.n	800d81e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d812:	6978      	ldr	r0, [r7, #20]
 800d814:	f001 fd7a 	bl	800f30c <vPortFree>
 800d818:	e001      	b.n	800d81e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d81a:	2300      	movs	r3, #0
 800d81c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d017      	beq.n	800d854 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	2200      	movs	r2, #0
 800d828:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d82c:	88fa      	ldrh	r2, [r7, #6]
 800d82e:	2300      	movs	r3, #0
 800d830:	9303      	str	r3, [sp, #12]
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	9302      	str	r3, [sp, #8]
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	9301      	str	r3, [sp, #4]
 800d83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	68b9      	ldr	r1, [r7, #8]
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f000 f80e 	bl	800d864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d848:	69f8      	ldr	r0, [r7, #28]
 800d84a:	f000 f88d 	bl	800d968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d84e:	2301      	movs	r3, #1
 800d850:	61bb      	str	r3, [r7, #24]
 800d852:	e002      	b.n	800d85a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d858:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d85a:	69bb      	ldr	r3, [r7, #24]
	}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3720      	adds	r7, #32
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b088      	sub	sp, #32
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d87c:	3b01      	subs	r3, #1
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	4413      	add	r3, r2
 800d882:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	f023 0307 	bic.w	r3, r3, #7
 800d88a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	f003 0307 	and.w	r3, r3, #7
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00a      	beq.n	800d8ac <prvInitialiseNewTask+0x48>
	__asm volatile
 800d896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d89a:	f383 8811 	msr	BASEPRI, r3
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	f3bf 8f4f 	dsb	sy
 800d8a6:	617b      	str	r3, [r7, #20]
}
 800d8a8:	bf00      	nop
 800d8aa:	e7fe      	b.n	800d8aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d01f      	beq.n	800d8f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	61fb      	str	r3, [r7, #28]
 800d8b6:	e012      	b.n	800d8de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	4413      	add	r3, r2
 800d8be:	7819      	ldrb	r1, [r3, #0]
 800d8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	3334      	adds	r3, #52	; 0x34
 800d8c8:	460a      	mov	r2, r1
 800d8ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d006      	beq.n	800d8e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	61fb      	str	r3, [r7, #28]
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	2b1f      	cmp	r3, #31
 800d8e2:	d9e9      	bls.n	800d8b8 <prvInitialiseNewTask+0x54>
 800d8e4:	e000      	b.n	800d8e8 <prvInitialiseNewTask+0x84>
			{
				break;
 800d8e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800d8f0:	e003      	b.n	800d8fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	2b06      	cmp	r3, #6
 800d8fe:	d901      	bls.n	800d904 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d900:	2306      	movs	r3, #6
 800d902:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d908:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90c:	3304      	adds	r3, #4
 800d90e:	4618      	mov	r0, r3
 800d910:	f7ff f997 	bl	800cc42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	3318      	adds	r3, #24
 800d918:	4618      	mov	r0, r3
 800d91a:	f7ff f992 	bl	800cc42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d926:	f1c3 0207 	rsb	r2, r3, #7
 800d92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d932:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d936:	2200      	movs	r2, #0
 800d938:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d942:	683a      	ldr	r2, [r7, #0]
 800d944:	68f9      	ldr	r1, [r7, #12]
 800d946:	69b8      	ldr	r0, [r7, #24]
 800d948:	f001 fa7c 	bl	800ee44 <pxPortInitialiseStack>
 800d94c:	4602      	mov	r2, r0
 800d94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d950:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d954:	2b00      	cmp	r3, #0
 800d956:	d002      	beq.n	800d95e <prvInitialiseNewTask+0xfa>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d95c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d95e:	bf00      	nop
 800d960:	3720      	adds	r7, #32
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d970:	f001 fb98 	bl	800f0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d974:	4b2a      	ldr	r3, [pc, #168]	; (800da20 <prvAddNewTaskToReadyList+0xb8>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	3301      	adds	r3, #1
 800d97a:	4a29      	ldr	r2, [pc, #164]	; (800da20 <prvAddNewTaskToReadyList+0xb8>)
 800d97c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d97e:	4b29      	ldr	r3, [pc, #164]	; (800da24 <prvAddNewTaskToReadyList+0xbc>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d109      	bne.n	800d99a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d986:	4a27      	ldr	r2, [pc, #156]	; (800da24 <prvAddNewTaskToReadyList+0xbc>)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d98c:	4b24      	ldr	r3, [pc, #144]	; (800da20 <prvAddNewTaskToReadyList+0xb8>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d110      	bne.n	800d9b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d994:	f000 fd2a 	bl	800e3ec <prvInitialiseTaskLists>
 800d998:	e00d      	b.n	800d9b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d99a:	4b23      	ldr	r3, [pc, #140]	; (800da28 <prvAddNewTaskToReadyList+0xc0>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d109      	bne.n	800d9b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9a2:	4b20      	ldr	r3, [pc, #128]	; (800da24 <prvAddNewTaskToReadyList+0xbc>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d802      	bhi.n	800d9b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9b0:	4a1c      	ldr	r2, [pc, #112]	; (800da24 <prvAddNewTaskToReadyList+0xbc>)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9b6:	4b1d      	ldr	r3, [pc, #116]	; (800da2c <prvAddNewTaskToReadyList+0xc4>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	4a1b      	ldr	r2, [pc, #108]	; (800da2c <prvAddNewTaskToReadyList+0xc4>)
 800d9be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	409a      	lsls	r2, r3
 800d9c8:	4b19      	ldr	r3, [pc, #100]	; (800da30 <prvAddNewTaskToReadyList+0xc8>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	4a18      	ldr	r2, [pc, #96]	; (800da30 <prvAddNewTaskToReadyList+0xc8>)
 800d9d0:	6013      	str	r3, [r2, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	4413      	add	r3, r2
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	4a15      	ldr	r2, [pc, #84]	; (800da34 <prvAddNewTaskToReadyList+0xcc>)
 800d9e0:	441a      	add	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	3304      	adds	r3, #4
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	4610      	mov	r0, r2
 800d9ea:	f7ff f937 	bl	800cc5c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9ee:	f001 fb89 	bl	800f104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9f2:	4b0d      	ldr	r3, [pc, #52]	; (800da28 <prvAddNewTaskToReadyList+0xc0>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00e      	beq.n	800da18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9fa:	4b0a      	ldr	r3, [pc, #40]	; (800da24 <prvAddNewTaskToReadyList+0xbc>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da04:	429a      	cmp	r2, r3
 800da06:	d207      	bcs.n	800da18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da08:	4b0b      	ldr	r3, [pc, #44]	; (800da38 <prvAddNewTaskToReadyList+0xd0>)
 800da0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da0e:	601a      	str	r2, [r3, #0]
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da18:	bf00      	nop
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	20000d58 	.word	0x20000d58
 800da24:	20000c58 	.word	0x20000c58
 800da28:	20000d64 	.word	0x20000d64
 800da2c:	20000d74 	.word	0x20000d74
 800da30:	20000d60 	.word	0x20000d60
 800da34:	20000c5c 	.word	0x20000c5c
 800da38:	e000ed04 	.word	0xe000ed04

0800da3c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800da44:	f001 fb2e 	bl	800f0a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d102      	bne.n	800da54 <vTaskDelete+0x18>
 800da4e:	4b39      	ldr	r3, [pc, #228]	; (800db34 <vTaskDelete+0xf8>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	e000      	b.n	800da56 <vTaskDelete+0x1a>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	3304      	adds	r3, #4
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7ff f95a 	bl	800cd16 <uxListRemove>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	d115      	bne.n	800da94 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da6c:	4932      	ldr	r1, [pc, #200]	; (800db38 <vTaskDelete+0xfc>)
 800da6e:	4613      	mov	r3, r2
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	4413      	add	r3, r2
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	440b      	add	r3, r1
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d10a      	bne.n	800da94 <vTaskDelete+0x58>
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da82:	2201      	movs	r2, #1
 800da84:	fa02 f303 	lsl.w	r3, r2, r3
 800da88:	43da      	mvns	r2, r3
 800da8a:	4b2c      	ldr	r3, [pc, #176]	; (800db3c <vTaskDelete+0x100>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4013      	ands	r3, r2
 800da90:	4a2a      	ldr	r2, [pc, #168]	; (800db3c <vTaskDelete+0x100>)
 800da92:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d004      	beq.n	800daa6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	3318      	adds	r3, #24
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff f938 	bl	800cd16 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800daa6:	4b26      	ldr	r3, [pc, #152]	; (800db40 <vTaskDelete+0x104>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3301      	adds	r3, #1
 800daac:	4a24      	ldr	r2, [pc, #144]	; (800db40 <vTaskDelete+0x104>)
 800daae:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800dab0:	4b20      	ldr	r3, [pc, #128]	; (800db34 <vTaskDelete+0xf8>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d10b      	bne.n	800dad2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	3304      	adds	r3, #4
 800dabe:	4619      	mov	r1, r3
 800dac0:	4820      	ldr	r0, [pc, #128]	; (800db44 <vTaskDelete+0x108>)
 800dac2:	f7ff f8cb 	bl	800cc5c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800dac6:	4b20      	ldr	r3, [pc, #128]	; (800db48 <vTaskDelete+0x10c>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	3301      	adds	r3, #1
 800dacc:	4a1e      	ldr	r2, [pc, #120]	; (800db48 <vTaskDelete+0x10c>)
 800dace:	6013      	str	r3, [r2, #0]
 800dad0:	e009      	b.n	800dae6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800dad2:	4b1e      	ldr	r3, [pc, #120]	; (800db4c <vTaskDelete+0x110>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3b01      	subs	r3, #1
 800dad8:	4a1c      	ldr	r2, [pc, #112]	; (800db4c <vTaskDelete+0x110>)
 800dada:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f000 fcf3 	bl	800e4c8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800dae2:	f000 fd21 	bl	800e528 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800dae6:	f001 fb0d 	bl	800f104 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800daea:	4b19      	ldr	r3, [pc, #100]	; (800db50 <vTaskDelete+0x114>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d01b      	beq.n	800db2a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800daf2:	4b10      	ldr	r3, [pc, #64]	; (800db34 <vTaskDelete+0xf8>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68fa      	ldr	r2, [r7, #12]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d116      	bne.n	800db2a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800dafc:	4b15      	ldr	r3, [pc, #84]	; (800db54 <vTaskDelete+0x118>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00a      	beq.n	800db1a <vTaskDelete+0xde>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	60bb      	str	r3, [r7, #8]
}
 800db16:	bf00      	nop
 800db18:	e7fe      	b.n	800db18 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800db1a:	4b0f      	ldr	r3, [pc, #60]	; (800db58 <vTaskDelete+0x11c>)
 800db1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db2a:	bf00      	nop
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	20000c58 	.word	0x20000c58
 800db38:	20000c5c 	.word	0x20000c5c
 800db3c:	20000d60 	.word	0x20000d60
 800db40:	20000d74 	.word	0x20000d74
 800db44:	20000d2c 	.word	0x20000d2c
 800db48:	20000d40 	.word	0x20000d40
 800db4c:	20000d58 	.word	0x20000d58
 800db50:	20000d64 	.word	0x20000d64
 800db54:	20000d80 	.word	0x20000d80
 800db58:	e000ed04 	.word	0xe000ed04

0800db5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db64:	2300      	movs	r3, #0
 800db66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d017      	beq.n	800db9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db6e:	4b13      	ldr	r3, [pc, #76]	; (800dbbc <vTaskDelay+0x60>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00a      	beq.n	800db8c <vTaskDelay+0x30>
	__asm volatile
 800db76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7a:	f383 8811 	msr	BASEPRI, r3
 800db7e:	f3bf 8f6f 	isb	sy
 800db82:	f3bf 8f4f 	dsb	sy
 800db86:	60bb      	str	r3, [r7, #8]
}
 800db88:	bf00      	nop
 800db8a:	e7fe      	b.n	800db8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800db8c:	f000 f912 	bl	800ddb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db90:	2100      	movs	r1, #0
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fd06 	bl	800e5a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db98:	f000 f91a 	bl	800ddd0 <xTaskResumeAll>
 800db9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d107      	bne.n	800dbb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dba4:	4b06      	ldr	r3, [pc, #24]	; (800dbc0 <vTaskDelay+0x64>)
 800dba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbaa:	601a      	str	r2, [r3, #0]
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbb4:	bf00      	nop
 800dbb6:	3710      	adds	r7, #16
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	20000d80 	.word	0x20000d80
 800dbc0:	e000ed04 	.word	0xe000ed04

0800dbc4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dbcc:	f001 fa6a 	bl	800f0a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d102      	bne.n	800dbdc <vTaskSuspend+0x18>
 800dbd6:	4b3c      	ldr	r3, [pc, #240]	; (800dcc8 <vTaskSuspend+0x104>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	e000      	b.n	800dbde <vTaskSuspend+0x1a>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7ff f896 	bl	800cd16 <uxListRemove>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d115      	bne.n	800dc1c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf4:	4935      	ldr	r1, [pc, #212]	; (800dccc <vTaskSuspend+0x108>)
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	4413      	add	r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	440b      	add	r3, r1
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d10a      	bne.n	800dc1c <vTaskSuspend+0x58>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc10:	43da      	mvns	r2, r3
 800dc12:	4b2f      	ldr	r3, [pc, #188]	; (800dcd0 <vTaskSuspend+0x10c>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	4013      	ands	r3, r2
 800dc18:	4a2d      	ldr	r2, [pc, #180]	; (800dcd0 <vTaskSuspend+0x10c>)
 800dc1a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d004      	beq.n	800dc2e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	3318      	adds	r3, #24
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7ff f874 	bl	800cd16 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3304      	adds	r3, #4
 800dc32:	4619      	mov	r1, r3
 800dc34:	4827      	ldr	r0, [pc, #156]	; (800dcd4 <vTaskSuspend+0x110>)
 800dc36:	f7ff f811 	bl	800cc5c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d103      	bne.n	800dc4e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dc4e:	f001 fa59 	bl	800f104 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dc52:	4b21      	ldr	r3, [pc, #132]	; (800dcd8 <vTaskSuspend+0x114>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d005      	beq.n	800dc66 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dc5a:	f001 fa23 	bl	800f0a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dc5e:	f000 fc63 	bl	800e528 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dc62:	f001 fa4f 	bl	800f104 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dc66:	4b18      	ldr	r3, [pc, #96]	; (800dcc8 <vTaskSuspend+0x104>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d127      	bne.n	800dcc0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800dc70:	4b19      	ldr	r3, [pc, #100]	; (800dcd8 <vTaskSuspend+0x114>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d017      	beq.n	800dca8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dc78:	4b18      	ldr	r3, [pc, #96]	; (800dcdc <vTaskSuspend+0x118>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00a      	beq.n	800dc96 <vTaskSuspend+0xd2>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	60bb      	str	r3, [r7, #8]
}
 800dc92:	bf00      	nop
 800dc94:	e7fe      	b.n	800dc94 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800dc96:	4b12      	ldr	r3, [pc, #72]	; (800dce0 <vTaskSuspend+0x11c>)
 800dc98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc9c:	601a      	str	r2, [r3, #0]
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dca6:	e00b      	b.n	800dcc0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dca8:	4b0a      	ldr	r3, [pc, #40]	; (800dcd4 <vTaskSuspend+0x110>)
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	4b0d      	ldr	r3, [pc, #52]	; (800dce4 <vTaskSuspend+0x120>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d103      	bne.n	800dcbc <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800dcb4:	4b04      	ldr	r3, [pc, #16]	; (800dcc8 <vTaskSuspend+0x104>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
	}
 800dcba:	e001      	b.n	800dcc0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800dcbc:	f000 f9ec 	bl	800e098 <vTaskSwitchContext>
	}
 800dcc0:	bf00      	nop
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	20000c58 	.word	0x20000c58
 800dccc:	20000c5c 	.word	0x20000c5c
 800dcd0:	20000d60 	.word	0x20000d60
 800dcd4:	20000d44 	.word	0x20000d44
 800dcd8:	20000d64 	.word	0x20000d64
 800dcdc:	20000d80 	.word	0x20000d80
 800dce0:	e000ed04 	.word	0xe000ed04
 800dce4:	20000d58 	.word	0x20000d58

0800dce8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08a      	sub	sp, #40	; 0x28
 800dcec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcf6:	463a      	mov	r2, r7
 800dcf8:	1d39      	adds	r1, r7, #4
 800dcfa:	f107 0308 	add.w	r3, r7, #8
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7f3 fe12 	bl	8001928 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd04:	6839      	ldr	r1, [r7, #0]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	68ba      	ldr	r2, [r7, #8]
 800dd0a:	9202      	str	r2, [sp, #8]
 800dd0c:	9301      	str	r3, [sp, #4]
 800dd0e:	2300      	movs	r3, #0
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	2300      	movs	r3, #0
 800dd14:	460a      	mov	r2, r1
 800dd16:	4921      	ldr	r1, [pc, #132]	; (800dd9c <vTaskStartScheduler+0xb4>)
 800dd18:	4821      	ldr	r0, [pc, #132]	; (800dda0 <vTaskStartScheduler+0xb8>)
 800dd1a:	f7ff fd01 	bl	800d720 <xTaskCreateStatic>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	4a20      	ldr	r2, [pc, #128]	; (800dda4 <vTaskStartScheduler+0xbc>)
 800dd22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd24:	4b1f      	ldr	r3, [pc, #124]	; (800dda4 <vTaskStartScheduler+0xbc>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d002      	beq.n	800dd32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	617b      	str	r3, [r7, #20]
 800dd30:	e001      	b.n	800dd36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd32:	2300      	movs	r3, #0
 800dd34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d102      	bne.n	800dd42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd3c:	f000 fc98 	bl	800e670 <xTimerCreateTimerTask>
 800dd40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d116      	bne.n	800dd76 <vTaskStartScheduler+0x8e>
	__asm volatile
 800dd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4c:	f383 8811 	msr	BASEPRI, r3
 800dd50:	f3bf 8f6f 	isb	sy
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	613b      	str	r3, [r7, #16]
}
 800dd5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd5c:	4b12      	ldr	r3, [pc, #72]	; (800dda8 <vTaskStartScheduler+0xc0>)
 800dd5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd64:	4b11      	ldr	r3, [pc, #68]	; (800ddac <vTaskStartScheduler+0xc4>)
 800dd66:	2201      	movs	r2, #1
 800dd68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd6a:	4b11      	ldr	r3, [pc, #68]	; (800ddb0 <vTaskStartScheduler+0xc8>)
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd70:	f001 f8f6 	bl	800ef60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd74:	e00e      	b.n	800dd94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd7c:	d10a      	bne.n	800dd94 <vTaskStartScheduler+0xac>
	__asm volatile
 800dd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd82:	f383 8811 	msr	BASEPRI, r3
 800dd86:	f3bf 8f6f 	isb	sy
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	60fb      	str	r3, [r7, #12]
}
 800dd90:	bf00      	nop
 800dd92:	e7fe      	b.n	800dd92 <vTaskStartScheduler+0xaa>
}
 800dd94:	bf00      	nop
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	08014154 	.word	0x08014154
 800dda0:	0800e3bd 	.word	0x0800e3bd
 800dda4:	20000d7c 	.word	0x20000d7c
 800dda8:	20000d78 	.word	0x20000d78
 800ddac:	20000d64 	.word	0x20000d64
 800ddb0:	20000d5c 	.word	0x20000d5c

0800ddb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ddb8:	4b04      	ldr	r3, [pc, #16]	; (800ddcc <vTaskSuspendAll+0x18>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	4a03      	ldr	r2, [pc, #12]	; (800ddcc <vTaskSuspendAll+0x18>)
 800ddc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ddc2:	bf00      	nop
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr
 800ddcc:	20000d80 	.word	0x20000d80

0800ddd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ddda:	2300      	movs	r3, #0
 800dddc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ddde:	4b41      	ldr	r3, [pc, #260]	; (800dee4 <xTaskResumeAll+0x114>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10a      	bne.n	800ddfc <xTaskResumeAll+0x2c>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	603b      	str	r3, [r7, #0]
}
 800ddf8:	bf00      	nop
 800ddfa:	e7fe      	b.n	800ddfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ddfc:	f001 f952 	bl	800f0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de00:	4b38      	ldr	r3, [pc, #224]	; (800dee4 <xTaskResumeAll+0x114>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	3b01      	subs	r3, #1
 800de06:	4a37      	ldr	r2, [pc, #220]	; (800dee4 <xTaskResumeAll+0x114>)
 800de08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de0a:	4b36      	ldr	r3, [pc, #216]	; (800dee4 <xTaskResumeAll+0x114>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d161      	bne.n	800ded6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de12:	4b35      	ldr	r3, [pc, #212]	; (800dee8 <xTaskResumeAll+0x118>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d05d      	beq.n	800ded6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de1a:	e02e      	b.n	800de7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de1c:	4b33      	ldr	r3, [pc, #204]	; (800deec <xTaskResumeAll+0x11c>)
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	3318      	adds	r3, #24
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fe ff74 	bl	800cd16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	3304      	adds	r3, #4
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe ff6f 	bl	800cd16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3c:	2201      	movs	r2, #1
 800de3e:	409a      	lsls	r2, r3
 800de40:	4b2b      	ldr	r3, [pc, #172]	; (800def0 <xTaskResumeAll+0x120>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4313      	orrs	r3, r2
 800de46:	4a2a      	ldr	r2, [pc, #168]	; (800def0 <xTaskResumeAll+0x120>)
 800de48:	6013      	str	r3, [r2, #0]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de4e:	4613      	mov	r3, r2
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4413      	add	r3, r2
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	4a27      	ldr	r2, [pc, #156]	; (800def4 <xTaskResumeAll+0x124>)
 800de58:	441a      	add	r2, r3
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3304      	adds	r3, #4
 800de5e:	4619      	mov	r1, r3
 800de60:	4610      	mov	r0, r2
 800de62:	f7fe fefb 	bl	800cc5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de6a:	4b23      	ldr	r3, [pc, #140]	; (800def8 <xTaskResumeAll+0x128>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de70:	429a      	cmp	r2, r3
 800de72:	d302      	bcc.n	800de7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800de74:	4b21      	ldr	r3, [pc, #132]	; (800defc <xTaskResumeAll+0x12c>)
 800de76:	2201      	movs	r2, #1
 800de78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de7a:	4b1c      	ldr	r3, [pc, #112]	; (800deec <xTaskResumeAll+0x11c>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d1cc      	bne.n	800de1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d001      	beq.n	800de8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de88:	f000 fb4e 	bl	800e528 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de8c:	4b1c      	ldr	r3, [pc, #112]	; (800df00 <xTaskResumeAll+0x130>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d010      	beq.n	800deba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de98:	f000 f846 	bl	800df28 <xTaskIncrementTick>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d002      	beq.n	800dea8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800dea2:	4b16      	ldr	r3, [pc, #88]	; (800defc <xTaskResumeAll+0x12c>)
 800dea4:	2201      	movs	r2, #1
 800dea6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	3b01      	subs	r3, #1
 800deac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1f1      	bne.n	800de98 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800deb4:	4b12      	ldr	r3, [pc, #72]	; (800df00 <xTaskResumeAll+0x130>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800deba:	4b10      	ldr	r3, [pc, #64]	; (800defc <xTaskResumeAll+0x12c>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d009      	beq.n	800ded6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dec2:	2301      	movs	r3, #1
 800dec4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dec6:	4b0f      	ldr	r3, [pc, #60]	; (800df04 <xTaskResumeAll+0x134>)
 800dec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800decc:	601a      	str	r2, [r3, #0]
 800dece:	f3bf 8f4f 	dsb	sy
 800ded2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ded6:	f001 f915 	bl	800f104 <vPortExitCritical>

	return xAlreadyYielded;
 800deda:	68bb      	ldr	r3, [r7, #8]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	20000d80 	.word	0x20000d80
 800dee8:	20000d58 	.word	0x20000d58
 800deec:	20000d18 	.word	0x20000d18
 800def0:	20000d60 	.word	0x20000d60
 800def4:	20000c5c 	.word	0x20000c5c
 800def8:	20000c58 	.word	0x20000c58
 800defc:	20000d6c 	.word	0x20000d6c
 800df00:	20000d68 	.word	0x20000d68
 800df04:	e000ed04 	.word	0xe000ed04

0800df08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df0e:	4b05      	ldr	r3, [pc, #20]	; (800df24 <xTaskGetTickCount+0x1c>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df14:	687b      	ldr	r3, [r7, #4]
}
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	20000d5c 	.word	0x20000d5c

0800df28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df2e:	2300      	movs	r3, #0
 800df30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df32:	4b4e      	ldr	r3, [pc, #312]	; (800e06c <xTaskIncrementTick+0x144>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f040 808e 	bne.w	800e058 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df3c:	4b4c      	ldr	r3, [pc, #304]	; (800e070 <xTaskIncrementTick+0x148>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	3301      	adds	r3, #1
 800df42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df44:	4a4a      	ldr	r2, [pc, #296]	; (800e070 <xTaskIncrementTick+0x148>)
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d120      	bne.n	800df92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800df50:	4b48      	ldr	r3, [pc, #288]	; (800e074 <xTaskIncrementTick+0x14c>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00a      	beq.n	800df70 <xTaskIncrementTick+0x48>
	__asm volatile
 800df5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5e:	f383 8811 	msr	BASEPRI, r3
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	f3bf 8f4f 	dsb	sy
 800df6a:	603b      	str	r3, [r7, #0]
}
 800df6c:	bf00      	nop
 800df6e:	e7fe      	b.n	800df6e <xTaskIncrementTick+0x46>
 800df70:	4b40      	ldr	r3, [pc, #256]	; (800e074 <xTaskIncrementTick+0x14c>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	60fb      	str	r3, [r7, #12]
 800df76:	4b40      	ldr	r3, [pc, #256]	; (800e078 <xTaskIncrementTick+0x150>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a3e      	ldr	r2, [pc, #248]	; (800e074 <xTaskIncrementTick+0x14c>)
 800df7c:	6013      	str	r3, [r2, #0]
 800df7e:	4a3e      	ldr	r2, [pc, #248]	; (800e078 <xTaskIncrementTick+0x150>)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6013      	str	r3, [r2, #0]
 800df84:	4b3d      	ldr	r3, [pc, #244]	; (800e07c <xTaskIncrementTick+0x154>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	3301      	adds	r3, #1
 800df8a:	4a3c      	ldr	r2, [pc, #240]	; (800e07c <xTaskIncrementTick+0x154>)
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	f000 facb 	bl	800e528 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df92:	4b3b      	ldr	r3, [pc, #236]	; (800e080 <xTaskIncrementTick+0x158>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	693a      	ldr	r2, [r7, #16]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d348      	bcc.n	800e02e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df9c:	4b35      	ldr	r3, [pc, #212]	; (800e074 <xTaskIncrementTick+0x14c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d104      	bne.n	800dfb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfa6:	4b36      	ldr	r3, [pc, #216]	; (800e080 <xTaskIncrementTick+0x158>)
 800dfa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfac:	601a      	str	r2, [r3, #0]
					break;
 800dfae:	e03e      	b.n	800e02e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfb0:	4b30      	ldr	r3, [pc, #192]	; (800e074 <xTaskIncrementTick+0x14c>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d203      	bcs.n	800dfd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dfc8:	4a2d      	ldr	r2, [pc, #180]	; (800e080 <xTaskIncrementTick+0x158>)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dfce:	e02e      	b.n	800e02e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7fe fe9e 	bl	800cd16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d004      	beq.n	800dfec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	3318      	adds	r3, #24
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fe fe95 	bl	800cd16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff0:	2201      	movs	r2, #1
 800dff2:	409a      	lsls	r2, r3
 800dff4:	4b23      	ldr	r3, [pc, #140]	; (800e084 <xTaskIncrementTick+0x15c>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	4a22      	ldr	r2, [pc, #136]	; (800e084 <xTaskIncrementTick+0x15c>)
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e002:	4613      	mov	r3, r2
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	4413      	add	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	4a1f      	ldr	r2, [pc, #124]	; (800e088 <xTaskIncrementTick+0x160>)
 800e00c:	441a      	add	r2, r3
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	3304      	adds	r3, #4
 800e012:	4619      	mov	r1, r3
 800e014:	4610      	mov	r0, r2
 800e016:	f7fe fe21 	bl	800cc5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01e:	4b1b      	ldr	r3, [pc, #108]	; (800e08c <xTaskIncrementTick+0x164>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e024:	429a      	cmp	r2, r3
 800e026:	d3b9      	bcc.n	800df9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e028:	2301      	movs	r3, #1
 800e02a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e02c:	e7b6      	b.n	800df9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e02e:	4b17      	ldr	r3, [pc, #92]	; (800e08c <xTaskIncrementTick+0x164>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e034:	4914      	ldr	r1, [pc, #80]	; (800e088 <xTaskIncrementTick+0x160>)
 800e036:	4613      	mov	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4413      	add	r3, r2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	440b      	add	r3, r1
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d901      	bls.n	800e04a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e046:	2301      	movs	r3, #1
 800e048:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e04a:	4b11      	ldr	r3, [pc, #68]	; (800e090 <xTaskIncrementTick+0x168>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d007      	beq.n	800e062 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e052:	2301      	movs	r3, #1
 800e054:	617b      	str	r3, [r7, #20]
 800e056:	e004      	b.n	800e062 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e058:	4b0e      	ldr	r3, [pc, #56]	; (800e094 <xTaskIncrementTick+0x16c>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	3301      	adds	r3, #1
 800e05e:	4a0d      	ldr	r2, [pc, #52]	; (800e094 <xTaskIncrementTick+0x16c>)
 800e060:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e062:	697b      	ldr	r3, [r7, #20]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3718      	adds	r7, #24
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	20000d80 	.word	0x20000d80
 800e070:	20000d5c 	.word	0x20000d5c
 800e074:	20000d10 	.word	0x20000d10
 800e078:	20000d14 	.word	0x20000d14
 800e07c:	20000d70 	.word	0x20000d70
 800e080:	20000d78 	.word	0x20000d78
 800e084:	20000d60 	.word	0x20000d60
 800e088:	20000c5c 	.word	0x20000c5c
 800e08c:	20000c58 	.word	0x20000c58
 800e090:	20000d6c 	.word	0x20000d6c
 800e094:	20000d68 	.word	0x20000d68

0800e098 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e098:	b480      	push	{r7}
 800e09a:	b087      	sub	sp, #28
 800e09c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e09e:	4b27      	ldr	r3, [pc, #156]	; (800e13c <vTaskSwitchContext+0xa4>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d003      	beq.n	800e0ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e0a6:	4b26      	ldr	r3, [pc, #152]	; (800e140 <vTaskSwitchContext+0xa8>)
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e0ac:	e03f      	b.n	800e12e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e0ae:	4b24      	ldr	r3, [pc, #144]	; (800e140 <vTaskSwitchContext+0xa8>)
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0b4:	4b23      	ldr	r3, [pc, #140]	; (800e144 <vTaskSwitchContext+0xac>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	fab3 f383 	clz	r3, r3
 800e0c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e0c2:	7afb      	ldrb	r3, [r7, #11]
 800e0c4:	f1c3 031f 	rsb	r3, r3, #31
 800e0c8:	617b      	str	r3, [r7, #20]
 800e0ca:	491f      	ldr	r1, [pc, #124]	; (800e148 <vTaskSwitchContext+0xb0>)
 800e0cc:	697a      	ldr	r2, [r7, #20]
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	4413      	add	r3, r2
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	440b      	add	r3, r1
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d10a      	bne.n	800e0f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	607b      	str	r3, [r7, #4]
}
 800e0f0:	bf00      	nop
 800e0f2:	e7fe      	b.n	800e0f2 <vTaskSwitchContext+0x5a>
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	4413      	add	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4a12      	ldr	r2, [pc, #72]	; (800e148 <vTaskSwitchContext+0xb0>)
 800e100:	4413      	add	r3, r2
 800e102:	613b      	str	r3, [r7, #16]
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	685a      	ldr	r2, [r3, #4]
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	605a      	str	r2, [r3, #4]
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	685a      	ldr	r2, [r3, #4]
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	3308      	adds	r3, #8
 800e116:	429a      	cmp	r2, r3
 800e118:	d104      	bne.n	800e124 <vTaskSwitchContext+0x8c>
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	685a      	ldr	r2, [r3, #4]
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	605a      	str	r2, [r3, #4]
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	4a08      	ldr	r2, [pc, #32]	; (800e14c <vTaskSwitchContext+0xb4>)
 800e12c:	6013      	str	r3, [r2, #0]
}
 800e12e:	bf00      	nop
 800e130:	371c      	adds	r7, #28
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	20000d80 	.word	0x20000d80
 800e140:	20000d6c 	.word	0x20000d6c
 800e144:	20000d60 	.word	0x20000d60
 800e148:	20000c5c 	.word	0x20000c5c
 800e14c:	20000c58 	.word	0x20000c58

0800e150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d10a      	bne.n	800e176 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e164:	f383 8811 	msr	BASEPRI, r3
 800e168:	f3bf 8f6f 	isb	sy
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	60fb      	str	r3, [r7, #12]
}
 800e172:	bf00      	nop
 800e174:	e7fe      	b.n	800e174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e176:	4b07      	ldr	r3, [pc, #28]	; (800e194 <vTaskPlaceOnEventList+0x44>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	3318      	adds	r3, #24
 800e17c:	4619      	mov	r1, r3
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7fe fd90 	bl	800cca4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e184:	2101      	movs	r1, #1
 800e186:	6838      	ldr	r0, [r7, #0]
 800e188:	f000 fa0c 	bl	800e5a4 <prvAddCurrentTaskToDelayedList>
}
 800e18c:	bf00      	nop
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	20000c58 	.word	0x20000c58

0800e198 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b086      	sub	sp, #24
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d10a      	bne.n	800e1c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	617b      	str	r3, [r7, #20]
}
 800e1bc:	bf00      	nop
 800e1be:	e7fe      	b.n	800e1be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1c0:	4b0a      	ldr	r3, [pc, #40]	; (800e1ec <vTaskPlaceOnEventListRestricted+0x54>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3318      	adds	r3, #24
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f7fe fd47 	bl	800cc5c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d002      	beq.n	800e1da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e1da:	6879      	ldr	r1, [r7, #4]
 800e1dc:	68b8      	ldr	r0, [r7, #8]
 800e1de:	f000 f9e1 	bl	800e5a4 <prvAddCurrentTaskToDelayedList>
	}
 800e1e2:	bf00      	nop
 800e1e4:	3718      	adds	r7, #24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20000c58 	.word	0x20000c58

0800e1f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d10a      	bne.n	800e21c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20a:	f383 8811 	msr	BASEPRI, r3
 800e20e:	f3bf 8f6f 	isb	sy
 800e212:	f3bf 8f4f 	dsb	sy
 800e216:	60fb      	str	r3, [r7, #12]
}
 800e218:	bf00      	nop
 800e21a:	e7fe      	b.n	800e21a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	3318      	adds	r3, #24
 800e220:	4618      	mov	r0, r3
 800e222:	f7fe fd78 	bl	800cd16 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e226:	4b1d      	ldr	r3, [pc, #116]	; (800e29c <xTaskRemoveFromEventList+0xac>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d11c      	bne.n	800e268 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	3304      	adds	r3, #4
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe fd6f 	bl	800cd16 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23c:	2201      	movs	r2, #1
 800e23e:	409a      	lsls	r2, r3
 800e240:	4b17      	ldr	r3, [pc, #92]	; (800e2a0 <xTaskRemoveFromEventList+0xb0>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4313      	orrs	r3, r2
 800e246:	4a16      	ldr	r2, [pc, #88]	; (800e2a0 <xTaskRemoveFromEventList+0xb0>)
 800e248:	6013      	str	r3, [r2, #0]
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24e:	4613      	mov	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	4413      	add	r3, r2
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	4a13      	ldr	r2, [pc, #76]	; (800e2a4 <xTaskRemoveFromEventList+0xb4>)
 800e258:	441a      	add	r2, r3
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	3304      	adds	r3, #4
 800e25e:	4619      	mov	r1, r3
 800e260:	4610      	mov	r0, r2
 800e262:	f7fe fcfb 	bl	800cc5c <vListInsertEnd>
 800e266:	e005      	b.n	800e274 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	3318      	adds	r3, #24
 800e26c:	4619      	mov	r1, r3
 800e26e:	480e      	ldr	r0, [pc, #56]	; (800e2a8 <xTaskRemoveFromEventList+0xb8>)
 800e270:	f7fe fcf4 	bl	800cc5c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e278:	4b0c      	ldr	r3, [pc, #48]	; (800e2ac <xTaskRemoveFromEventList+0xbc>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27e:	429a      	cmp	r2, r3
 800e280:	d905      	bls.n	800e28e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e282:	2301      	movs	r3, #1
 800e284:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e286:	4b0a      	ldr	r3, [pc, #40]	; (800e2b0 <xTaskRemoveFromEventList+0xc0>)
 800e288:	2201      	movs	r2, #1
 800e28a:	601a      	str	r2, [r3, #0]
 800e28c:	e001      	b.n	800e292 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e28e:	2300      	movs	r3, #0
 800e290:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e292:	697b      	ldr	r3, [r7, #20]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3718      	adds	r7, #24
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	20000d80 	.word	0x20000d80
 800e2a0:	20000d60 	.word	0x20000d60
 800e2a4:	20000c5c 	.word	0x20000c5c
 800e2a8:	20000d18 	.word	0x20000d18
 800e2ac:	20000c58 	.word	0x20000c58
 800e2b0:	20000d6c 	.word	0x20000d6c

0800e2b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e2bc:	4b06      	ldr	r3, [pc, #24]	; (800e2d8 <vTaskInternalSetTimeOutState+0x24>)
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2c4:	4b05      	ldr	r3, [pc, #20]	; (800e2dc <vTaskInternalSetTimeOutState+0x28>)
 800e2c6:	681a      	ldr	r2, [r3, #0]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	605a      	str	r2, [r3, #4]
}
 800e2cc:	bf00      	nop
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	20000d70 	.word	0x20000d70
 800e2dc:	20000d5c 	.word	0x20000d5c

0800e2e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b088      	sub	sp, #32
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d10a      	bne.n	800e306 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	613b      	str	r3, [r7, #16]
}
 800e302:	bf00      	nop
 800e304:	e7fe      	b.n	800e304 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d10a      	bne.n	800e322 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e310:	f383 8811 	msr	BASEPRI, r3
 800e314:	f3bf 8f6f 	isb	sy
 800e318:	f3bf 8f4f 	dsb	sy
 800e31c:	60fb      	str	r3, [r7, #12]
}
 800e31e:	bf00      	nop
 800e320:	e7fe      	b.n	800e320 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e322:	f000 febf 	bl	800f0a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e326:	4b1d      	ldr	r3, [pc, #116]	; (800e39c <xTaskCheckForTimeOut+0xbc>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	69ba      	ldr	r2, [r7, #24]
 800e332:	1ad3      	subs	r3, r2, r3
 800e334:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e33e:	d102      	bne.n	800e346 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e340:	2300      	movs	r3, #0
 800e342:	61fb      	str	r3, [r7, #28]
 800e344:	e023      	b.n	800e38e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	4b15      	ldr	r3, [pc, #84]	; (800e3a0 <xTaskCheckForTimeOut+0xc0>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d007      	beq.n	800e362 <xTaskCheckForTimeOut+0x82>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	69ba      	ldr	r2, [r7, #24]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d302      	bcc.n	800e362 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e35c:	2301      	movs	r3, #1
 800e35e:	61fb      	str	r3, [r7, #28]
 800e360:	e015      	b.n	800e38e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	697a      	ldr	r2, [r7, #20]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d20b      	bcs.n	800e384 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	1ad2      	subs	r2, r2, r3
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7ff ff9b 	bl	800e2b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e37e:	2300      	movs	r3, #0
 800e380:	61fb      	str	r3, [r7, #28]
 800e382:	e004      	b.n	800e38e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	2200      	movs	r2, #0
 800e388:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e38a:	2301      	movs	r3, #1
 800e38c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e38e:	f000 feb9 	bl	800f104 <vPortExitCritical>

	return xReturn;
 800e392:	69fb      	ldr	r3, [r7, #28]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3720      	adds	r7, #32
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	20000d5c 	.word	0x20000d5c
 800e3a0:	20000d70 	.word	0x20000d70

0800e3a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e3a8:	4b03      	ldr	r3, [pc, #12]	; (800e3b8 <vTaskMissedYield+0x14>)
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	601a      	str	r2, [r3, #0]
}
 800e3ae:	bf00      	nop
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	20000d6c 	.word	0x20000d6c

0800e3bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3c4:	f000 f852 	bl	800e46c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3c8:	4b06      	ldr	r3, [pc, #24]	; (800e3e4 <prvIdleTask+0x28>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	d9f9      	bls.n	800e3c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3d0:	4b05      	ldr	r3, [pc, #20]	; (800e3e8 <prvIdleTask+0x2c>)
 800e3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3d6:	601a      	str	r2, [r3, #0]
 800e3d8:	f3bf 8f4f 	dsb	sy
 800e3dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3e0:	e7f0      	b.n	800e3c4 <prvIdleTask+0x8>
 800e3e2:	bf00      	nop
 800e3e4:	20000c5c 	.word	0x20000c5c
 800e3e8:	e000ed04 	.word	0xe000ed04

0800e3ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	607b      	str	r3, [r7, #4]
 800e3f6:	e00c      	b.n	800e412 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4a12      	ldr	r2, [pc, #72]	; (800e44c <prvInitialiseTaskLists+0x60>)
 800e404:	4413      	add	r3, r2
 800e406:	4618      	mov	r0, r3
 800e408:	f7fe fbfb 	bl	800cc02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	3301      	adds	r3, #1
 800e410:	607b      	str	r3, [r7, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b06      	cmp	r3, #6
 800e416:	d9ef      	bls.n	800e3f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e418:	480d      	ldr	r0, [pc, #52]	; (800e450 <prvInitialiseTaskLists+0x64>)
 800e41a:	f7fe fbf2 	bl	800cc02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e41e:	480d      	ldr	r0, [pc, #52]	; (800e454 <prvInitialiseTaskLists+0x68>)
 800e420:	f7fe fbef 	bl	800cc02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e424:	480c      	ldr	r0, [pc, #48]	; (800e458 <prvInitialiseTaskLists+0x6c>)
 800e426:	f7fe fbec 	bl	800cc02 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e42a:	480c      	ldr	r0, [pc, #48]	; (800e45c <prvInitialiseTaskLists+0x70>)
 800e42c:	f7fe fbe9 	bl	800cc02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e430:	480b      	ldr	r0, [pc, #44]	; (800e460 <prvInitialiseTaskLists+0x74>)
 800e432:	f7fe fbe6 	bl	800cc02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e436:	4b0b      	ldr	r3, [pc, #44]	; (800e464 <prvInitialiseTaskLists+0x78>)
 800e438:	4a05      	ldr	r2, [pc, #20]	; (800e450 <prvInitialiseTaskLists+0x64>)
 800e43a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e43c:	4b0a      	ldr	r3, [pc, #40]	; (800e468 <prvInitialiseTaskLists+0x7c>)
 800e43e:	4a05      	ldr	r2, [pc, #20]	; (800e454 <prvInitialiseTaskLists+0x68>)
 800e440:	601a      	str	r2, [r3, #0]
}
 800e442:	bf00      	nop
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	20000c5c 	.word	0x20000c5c
 800e450:	20000ce8 	.word	0x20000ce8
 800e454:	20000cfc 	.word	0x20000cfc
 800e458:	20000d18 	.word	0x20000d18
 800e45c:	20000d2c 	.word	0x20000d2c
 800e460:	20000d44 	.word	0x20000d44
 800e464:	20000d10 	.word	0x20000d10
 800e468:	20000d14 	.word	0x20000d14

0800e46c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e472:	e019      	b.n	800e4a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e474:	f000 fe16 	bl	800f0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e478:	4b10      	ldr	r3, [pc, #64]	; (800e4bc <prvCheckTasksWaitingTermination+0x50>)
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	3304      	adds	r3, #4
 800e484:	4618      	mov	r0, r3
 800e486:	f7fe fc46 	bl	800cd16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e48a:	4b0d      	ldr	r3, [pc, #52]	; (800e4c0 <prvCheckTasksWaitingTermination+0x54>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	3b01      	subs	r3, #1
 800e490:	4a0b      	ldr	r2, [pc, #44]	; (800e4c0 <prvCheckTasksWaitingTermination+0x54>)
 800e492:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e494:	4b0b      	ldr	r3, [pc, #44]	; (800e4c4 <prvCheckTasksWaitingTermination+0x58>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	3b01      	subs	r3, #1
 800e49a:	4a0a      	ldr	r2, [pc, #40]	; (800e4c4 <prvCheckTasksWaitingTermination+0x58>)
 800e49c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e49e:	f000 fe31 	bl	800f104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 f810 	bl	800e4c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4a8:	4b06      	ldr	r3, [pc, #24]	; (800e4c4 <prvCheckTasksWaitingTermination+0x58>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d1e1      	bne.n	800e474 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e4b0:	bf00      	nop
 800e4b2:	bf00      	nop
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	20000d2c 	.word	0x20000d2c
 800e4c0:	20000d58 	.word	0x20000d58
 800e4c4:	20000d40 	.word	0x20000d40

0800e4c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d108      	bne.n	800e4ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f000 ff14 	bl	800f30c <vPortFree>
				vPortFree( pxTCB );
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 ff11 	bl	800f30c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4ea:	e018      	b.n	800e51e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d103      	bne.n	800e4fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 ff08 	bl	800f30c <vPortFree>
	}
 800e4fc:	e00f      	b.n	800e51e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e504:	2b02      	cmp	r3, #2
 800e506:	d00a      	beq.n	800e51e <prvDeleteTCB+0x56>
	__asm volatile
 800e508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50c:	f383 8811 	msr	BASEPRI, r3
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	60fb      	str	r3, [r7, #12]
}
 800e51a:	bf00      	nop
 800e51c:	e7fe      	b.n	800e51c <prvDeleteTCB+0x54>
	}
 800e51e:	bf00      	nop
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
	...

0800e528 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e52e:	4b0c      	ldr	r3, [pc, #48]	; (800e560 <prvResetNextTaskUnblockTime+0x38>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d104      	bne.n	800e542 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e538:	4b0a      	ldr	r3, [pc, #40]	; (800e564 <prvResetNextTaskUnblockTime+0x3c>)
 800e53a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e53e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e540:	e008      	b.n	800e554 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e542:	4b07      	ldr	r3, [pc, #28]	; (800e560 <prvResetNextTaskUnblockTime+0x38>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	4a04      	ldr	r2, [pc, #16]	; (800e564 <prvResetNextTaskUnblockTime+0x3c>)
 800e552:	6013      	str	r3, [r2, #0]
}
 800e554:	bf00      	nop
 800e556:	370c      	adds	r7, #12
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr
 800e560:	20000d10 	.word	0x20000d10
 800e564:	20000d78 	.word	0x20000d78

0800e568 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e56e:	4b0b      	ldr	r3, [pc, #44]	; (800e59c <xTaskGetSchedulerState+0x34>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d102      	bne.n	800e57c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e576:	2301      	movs	r3, #1
 800e578:	607b      	str	r3, [r7, #4]
 800e57a:	e008      	b.n	800e58e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e57c:	4b08      	ldr	r3, [pc, #32]	; (800e5a0 <xTaskGetSchedulerState+0x38>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d102      	bne.n	800e58a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e584:	2302      	movs	r3, #2
 800e586:	607b      	str	r3, [r7, #4]
 800e588:	e001      	b.n	800e58e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e58a:	2300      	movs	r3, #0
 800e58c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e58e:	687b      	ldr	r3, [r7, #4]
	}
 800e590:	4618      	mov	r0, r3
 800e592:	370c      	adds	r7, #12
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr
 800e59c:	20000d64 	.word	0x20000d64
 800e5a0:	20000d80 	.word	0x20000d80

0800e5a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e5ae:	4b29      	ldr	r3, [pc, #164]	; (800e654 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5b4:	4b28      	ldr	r3, [pc, #160]	; (800e658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3304      	adds	r3, #4
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fe fbab 	bl	800cd16 <uxListRemove>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10b      	bne.n	800e5de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e5c6:	4b24      	ldr	r3, [pc, #144]	; (800e658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e5d2:	43da      	mvns	r2, r3
 800e5d4:	4b21      	ldr	r3, [pc, #132]	; (800e65c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4013      	ands	r3, r2
 800e5da:	4a20      	ldr	r2, [pc, #128]	; (800e65c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e5dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5e4:	d10a      	bne.n	800e5fc <prvAddCurrentTaskToDelayedList+0x58>
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d007      	beq.n	800e5fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5ec:	4b1a      	ldr	r3, [pc, #104]	; (800e658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	3304      	adds	r3, #4
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	481a      	ldr	r0, [pc, #104]	; (800e660 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e5f6:	f7fe fb31 	bl	800cc5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5fa:	e026      	b.n	800e64a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5fc:	68fa      	ldr	r2, [r7, #12]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	4413      	add	r3, r2
 800e602:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e604:	4b14      	ldr	r3, [pc, #80]	; (800e658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	68ba      	ldr	r2, [r7, #8]
 800e60a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e60c:	68ba      	ldr	r2, [r7, #8]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	429a      	cmp	r2, r3
 800e612:	d209      	bcs.n	800e628 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e614:	4b13      	ldr	r3, [pc, #76]	; (800e664 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	4b0f      	ldr	r3, [pc, #60]	; (800e658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	3304      	adds	r3, #4
 800e61e:	4619      	mov	r1, r3
 800e620:	4610      	mov	r0, r2
 800e622:	f7fe fb3f 	bl	800cca4 <vListInsert>
}
 800e626:	e010      	b.n	800e64a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e628:	4b0f      	ldr	r3, [pc, #60]	; (800e668 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	4b0a      	ldr	r3, [pc, #40]	; (800e658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	3304      	adds	r3, #4
 800e632:	4619      	mov	r1, r3
 800e634:	4610      	mov	r0, r2
 800e636:	f7fe fb35 	bl	800cca4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e63a:	4b0c      	ldr	r3, [pc, #48]	; (800e66c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	429a      	cmp	r2, r3
 800e642:	d202      	bcs.n	800e64a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e644:	4a09      	ldr	r2, [pc, #36]	; (800e66c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	6013      	str	r3, [r2, #0]
}
 800e64a:	bf00      	nop
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	20000d5c 	.word	0x20000d5c
 800e658:	20000c58 	.word	0x20000c58
 800e65c:	20000d60 	.word	0x20000d60
 800e660:	20000d44 	.word	0x20000d44
 800e664:	20000d14 	.word	0x20000d14
 800e668:	20000d10 	.word	0x20000d10
 800e66c:	20000d78 	.word	0x20000d78

0800e670 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b08a      	sub	sp, #40	; 0x28
 800e674:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e676:	2300      	movs	r3, #0
 800e678:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e67a:	f000 fb63 	bl	800ed44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e67e:	4b1c      	ldr	r3, [pc, #112]	; (800e6f0 <xTimerCreateTimerTask+0x80>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d021      	beq.n	800e6ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e686:	2300      	movs	r3, #0
 800e688:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e68a:	2300      	movs	r3, #0
 800e68c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e68e:	1d3a      	adds	r2, r7, #4
 800e690:	f107 0108 	add.w	r1, r7, #8
 800e694:	f107 030c 	add.w	r3, r7, #12
 800e698:	4618      	mov	r0, r3
 800e69a:	f7f3 f95f 	bl	800195c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e69e:	6879      	ldr	r1, [r7, #4]
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	9202      	str	r2, [sp, #8]
 800e6a6:	9301      	str	r3, [sp, #4]
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	9300      	str	r3, [sp, #0]
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	460a      	mov	r2, r1
 800e6b0:	4910      	ldr	r1, [pc, #64]	; (800e6f4 <xTimerCreateTimerTask+0x84>)
 800e6b2:	4811      	ldr	r0, [pc, #68]	; (800e6f8 <xTimerCreateTimerTask+0x88>)
 800e6b4:	f7ff f834 	bl	800d720 <xTaskCreateStatic>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	4a10      	ldr	r2, [pc, #64]	; (800e6fc <xTimerCreateTimerTask+0x8c>)
 800e6bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e6be:	4b0f      	ldr	r3, [pc, #60]	; (800e6fc <xTimerCreateTimerTask+0x8c>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d001      	beq.n	800e6ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d10a      	bne.n	800e6e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	613b      	str	r3, [r7, #16]
}
 800e6e2:	bf00      	nop
 800e6e4:	e7fe      	b.n	800e6e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e6e6:	697b      	ldr	r3, [r7, #20]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3718      	adds	r7, #24
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	20000db4 	.word	0x20000db4
 800e6f4:	0801415c 	.word	0x0801415c
 800e6f8:	0800e925 	.word	0x0800e925
 800e6fc:	20000db8 	.word	0x20000db8

0800e700 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e700:	b580      	push	{r7, lr}
 800e702:	b088      	sub	sp, #32
 800e704:	af02      	add	r7, sp, #8
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
 800e70c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e70e:	2028      	movs	r0, #40	; 0x28
 800e710:	f000 fdea 	bl	800f2e8 <pvPortMalloc>
 800e714:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00d      	beq.n	800e738 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	2200      	movs	r2, #0
 800e720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	9301      	str	r3, [sp, #4]
 800e728:	6a3b      	ldr	r3, [r7, #32]
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	68b9      	ldr	r1, [r7, #8]
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f000 f805 	bl	800e742 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e738:	697b      	ldr	r3, [r7, #20]
	}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3718      	adds	r7, #24
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b086      	sub	sp, #24
 800e746:	af00      	add	r7, sp, #0
 800e748:	60f8      	str	r0, [r7, #12]
 800e74a:	60b9      	str	r1, [r7, #8]
 800e74c:	607a      	str	r2, [r7, #4]
 800e74e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10a      	bne.n	800e76c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	617b      	str	r3, [r7, #20]
}
 800e768:	bf00      	nop
 800e76a:	e7fe      	b.n	800e76a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d01e      	beq.n	800e7b0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e772:	f000 fae7 	bl	800ed44 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e784:	683a      	ldr	r2, [r7, #0]
 800e786:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78a:	6a3a      	ldr	r2, [r7, #32]
 800e78c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e790:	3304      	adds	r3, #4
 800e792:	4618      	mov	r0, r3
 800e794:	f7fe fa55 	bl	800cc42 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d008      	beq.n	800e7b0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e7a4:	f043 0304 	orr.w	r3, r3, #4
 800e7a8:	b2da      	uxtb	r2, r3
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e7b0:	bf00      	nop
 800e7b2:	3718      	adds	r7, #24
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b08a      	sub	sp, #40	; 0x28
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	607a      	str	r2, [r7, #4]
 800e7c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10a      	bne.n	800e7e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	623b      	str	r3, [r7, #32]
}
 800e7e2:	bf00      	nop
 800e7e4:	e7fe      	b.n	800e7e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e7e6:	4b1a      	ldr	r3, [pc, #104]	; (800e850 <xTimerGenericCommand+0x98>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d02a      	beq.n	800e844 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	2b05      	cmp	r3, #5
 800e7fe:	dc18      	bgt.n	800e832 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e800:	f7ff feb2 	bl	800e568 <xTaskGetSchedulerState>
 800e804:	4603      	mov	r3, r0
 800e806:	2b02      	cmp	r3, #2
 800e808:	d109      	bne.n	800e81e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e80a:	4b11      	ldr	r3, [pc, #68]	; (800e850 <xTimerGenericCommand+0x98>)
 800e80c:	6818      	ldr	r0, [r3, #0]
 800e80e:	f107 0114 	add.w	r1, r7, #20
 800e812:	2300      	movs	r3, #0
 800e814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e816:	f7fe fba9 	bl	800cf6c <xQueueGenericSend>
 800e81a:	6278      	str	r0, [r7, #36]	; 0x24
 800e81c:	e012      	b.n	800e844 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e81e:	4b0c      	ldr	r3, [pc, #48]	; (800e850 <xTimerGenericCommand+0x98>)
 800e820:	6818      	ldr	r0, [r3, #0]
 800e822:	f107 0114 	add.w	r1, r7, #20
 800e826:	2300      	movs	r3, #0
 800e828:	2200      	movs	r2, #0
 800e82a:	f7fe fb9f 	bl	800cf6c <xQueueGenericSend>
 800e82e:	6278      	str	r0, [r7, #36]	; 0x24
 800e830:	e008      	b.n	800e844 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e832:	4b07      	ldr	r3, [pc, #28]	; (800e850 <xTimerGenericCommand+0x98>)
 800e834:	6818      	ldr	r0, [r3, #0]
 800e836:	f107 0114 	add.w	r1, r7, #20
 800e83a:	2300      	movs	r3, #0
 800e83c:	683a      	ldr	r2, [r7, #0]
 800e83e:	f7fe fc93 	bl	800d168 <xQueueGenericSendFromISR>
 800e842:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e846:	4618      	mov	r0, r3
 800e848:	3728      	adds	r7, #40	; 0x28
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	20000db4 	.word	0x20000db4

0800e854 <xTimerGetPeriod>:
	return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 800e854:	b480      	push	{r7}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10a      	bne.n	800e87c <xTimerGetPeriod+0x28>
	__asm volatile
 800e866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86a:	f383 8811 	msr	BASEPRI, r3
 800e86e:	f3bf 8f6f 	isb	sy
 800e872:	f3bf 8f4f 	dsb	sy
 800e876:	60bb      	str	r3, [r7, #8]
}
 800e878:	bf00      	nop
 800e87a:	e7fe      	b.n	800e87a <xTimerGetPeriod+0x26>
	return pxTimer->xTimerPeriodInTicks;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	699b      	ldr	r3, [r3, #24]
}
 800e880:	4618      	mov	r0, r3
 800e882:	3714      	adds	r7, #20
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b088      	sub	sp, #32
 800e890:	af02      	add	r7, sp, #8
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e896:	4b22      	ldr	r3, [pc, #136]	; (800e920 <prvProcessExpiredTimer+0x94>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fe fa36 	bl	800cd16 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e8b0:	f003 0304 	and.w	r3, r3, #4
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d022      	beq.n	800e8fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	699a      	ldr	r2, [r3, #24]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	18d1      	adds	r1, r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	683a      	ldr	r2, [r7, #0]
 800e8c4:	6978      	ldr	r0, [r7, #20]
 800e8c6:	f000 f8d1 	bl	800ea6c <prvInsertTimerInActiveList>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d01f      	beq.n	800e910 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	2100      	movs	r1, #0
 800e8da:	6978      	ldr	r0, [r7, #20]
 800e8dc:	f7ff ff6c 	bl	800e7b8 <xTimerGenericCommand>
 800e8e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d113      	bne.n	800e910 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ec:	f383 8811 	msr	BASEPRI, r3
 800e8f0:	f3bf 8f6f 	isb	sy
 800e8f4:	f3bf 8f4f 	dsb	sy
 800e8f8:	60fb      	str	r3, [r7, #12]
}
 800e8fa:	bf00      	nop
 800e8fc:	e7fe      	b.n	800e8fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e904:	f023 0301 	bic.w	r3, r3, #1
 800e908:	b2da      	uxtb	r2, r3
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	6a1b      	ldr	r3, [r3, #32]
 800e914:	6978      	ldr	r0, [r7, #20]
 800e916:	4798      	blx	r3
}
 800e918:	bf00      	nop
 800e91a:	3718      	adds	r7, #24
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	20000dac 	.word	0x20000dac

0800e924 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e92c:	f107 0308 	add.w	r3, r7, #8
 800e930:	4618      	mov	r0, r3
 800e932:	f000 f857 	bl	800e9e4 <prvGetNextExpireTime>
 800e936:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	4619      	mov	r1, r3
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f000 f803 	bl	800e948 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e942:	f000 f8d5 	bl	800eaf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e946:	e7f1      	b.n	800e92c <prvTimerTask+0x8>

0800e948 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e952:	f7ff fa2f 	bl	800ddb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e956:	f107 0308 	add.w	r3, r7, #8
 800e95a:	4618      	mov	r0, r3
 800e95c:	f000 f866 	bl	800ea2c <prvSampleTimeNow>
 800e960:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d130      	bne.n	800e9ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10a      	bne.n	800e984 <prvProcessTimerOrBlockTask+0x3c>
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	429a      	cmp	r2, r3
 800e974:	d806      	bhi.n	800e984 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e976:	f7ff fa2b 	bl	800ddd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e97a:	68f9      	ldr	r1, [r7, #12]
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7ff ff85 	bl	800e88c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e982:	e024      	b.n	800e9ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d008      	beq.n	800e99c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e98a:	4b13      	ldr	r3, [pc, #76]	; (800e9d8 <prvProcessTimerOrBlockTask+0x90>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <prvProcessTimerOrBlockTask+0x50>
 800e994:	2301      	movs	r3, #1
 800e996:	e000      	b.n	800e99a <prvProcessTimerOrBlockTask+0x52>
 800e998:	2300      	movs	r3, #0
 800e99a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e99c:	4b0f      	ldr	r3, [pc, #60]	; (800e9dc <prvProcessTimerOrBlockTask+0x94>)
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	683a      	ldr	r2, [r7, #0]
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	f7fe fe85 	bl	800d6b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e9ae:	f7ff fa0f 	bl	800ddd0 <xTaskResumeAll>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d10a      	bne.n	800e9ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e9b8:	4b09      	ldr	r3, [pc, #36]	; (800e9e0 <prvProcessTimerOrBlockTask+0x98>)
 800e9ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9be:	601a      	str	r2, [r3, #0]
 800e9c0:	f3bf 8f4f 	dsb	sy
 800e9c4:	f3bf 8f6f 	isb	sy
}
 800e9c8:	e001      	b.n	800e9ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e9ca:	f7ff fa01 	bl	800ddd0 <xTaskResumeAll>
}
 800e9ce:	bf00      	nop
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	20000db0 	.word	0x20000db0
 800e9dc:	20000db4 	.word	0x20000db4
 800e9e0:	e000ed04 	.word	0xe000ed04

0800e9e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b085      	sub	sp, #20
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ea28 <prvGetNextExpireTime+0x44>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d101      	bne.n	800e9fa <prvGetNextExpireTime+0x16>
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	e000      	b.n	800e9fc <prvGetNextExpireTime+0x18>
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d105      	bne.n	800ea14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea08:	4b07      	ldr	r3, [pc, #28]	; (800ea28 <prvGetNextExpireTime+0x44>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	60fb      	str	r3, [r7, #12]
 800ea12:	e001      	b.n	800ea18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ea14:	2300      	movs	r3, #0
 800ea16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ea18:	68fb      	ldr	r3, [r7, #12]
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3714      	adds	r7, #20
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop
 800ea28:	20000dac 	.word	0x20000dac

0800ea2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ea34:	f7ff fa68 	bl	800df08 <xTaskGetTickCount>
 800ea38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ea3a:	4b0b      	ldr	r3, [pc, #44]	; (800ea68 <prvSampleTimeNow+0x3c>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d205      	bcs.n	800ea50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ea44:	f000 f91a 	bl	800ec7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	e002      	b.n	800ea56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ea56:	4a04      	ldr	r2, [pc, #16]	; (800ea68 <prvSampleTimeNow+0x3c>)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	20000dbc 	.word	0x20000dbc

0800ea6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	68ba      	ldr	r2, [r7, #8]
 800ea82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	68fa      	ldr	r2, [r7, #12]
 800ea88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d812      	bhi.n	800eab8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	1ad2      	subs	r2, r2, r3
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	699b      	ldr	r3, [r3, #24]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d302      	bcc.n	800eaa6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	617b      	str	r3, [r7, #20]
 800eaa4:	e01b      	b.n	800eade <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eaa6:	4b10      	ldr	r3, [pc, #64]	; (800eae8 <prvInsertTimerInActiveList+0x7c>)
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	3304      	adds	r3, #4
 800eaae:	4619      	mov	r1, r3
 800eab0:	4610      	mov	r0, r2
 800eab2:	f7fe f8f7 	bl	800cca4 <vListInsert>
 800eab6:	e012      	b.n	800eade <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d206      	bcs.n	800eace <prvInsertTimerInActiveList+0x62>
 800eac0:	68ba      	ldr	r2, [r7, #8]
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d302      	bcc.n	800eace <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eac8:	2301      	movs	r3, #1
 800eaca:	617b      	str	r3, [r7, #20]
 800eacc:	e007      	b.n	800eade <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eace:	4b07      	ldr	r3, [pc, #28]	; (800eaec <prvInsertTimerInActiveList+0x80>)
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	3304      	adds	r3, #4
 800ead6:	4619      	mov	r1, r3
 800ead8:	4610      	mov	r0, r2
 800eada:	f7fe f8e3 	bl	800cca4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eade:	697b      	ldr	r3, [r7, #20]
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3718      	adds	r7, #24
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	20000db0 	.word	0x20000db0
 800eaec:	20000dac 	.word	0x20000dac

0800eaf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b08c      	sub	sp, #48	; 0x30
 800eaf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eaf6:	e0ae      	b.n	800ec56 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f2c0 80ab 	blt.w	800ec56 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb06:	695b      	ldr	r3, [r3, #20]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d004      	beq.n	800eb16 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0e:	3304      	adds	r3, #4
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe f900 	bl	800cd16 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb16:	1d3b      	adds	r3, r7, #4
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff ff87 	bl	800ea2c <prvSampleTimeNow>
 800eb1e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	2b09      	cmp	r3, #9
 800eb24:	f200 8096 	bhi.w	800ec54 <prvProcessReceivedCommands+0x164>
 800eb28:	a201      	add	r2, pc, #4	; (adr r2, 800eb30 <prvProcessReceivedCommands+0x40>)
 800eb2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb2e:	bf00      	nop
 800eb30:	0800eb59 	.word	0x0800eb59
 800eb34:	0800eb59 	.word	0x0800eb59
 800eb38:	0800eb59 	.word	0x0800eb59
 800eb3c:	0800ebcd 	.word	0x0800ebcd
 800eb40:	0800ebe1 	.word	0x0800ebe1
 800eb44:	0800ec2b 	.word	0x0800ec2b
 800eb48:	0800eb59 	.word	0x0800eb59
 800eb4c:	0800eb59 	.word	0x0800eb59
 800eb50:	0800ebcd 	.word	0x0800ebcd
 800eb54:	0800ebe1 	.word	0x0800ebe1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb5e:	f043 0301 	orr.w	r3, r3, #1
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eb6a:	68fa      	ldr	r2, [r7, #12]
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	18d1      	adds	r1, r2, r3
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	6a3a      	ldr	r2, [r7, #32]
 800eb76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb78:	f7ff ff78 	bl	800ea6c <prvInsertTimerInActiveList>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d069      	beq.n	800ec56 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb84:	6a1b      	ldr	r3, [r3, #32]
 800eb86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb90:	f003 0304 	and.w	r3, r3, #4
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d05e      	beq.n	800ec56 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9c:	699b      	ldr	r3, [r3, #24]
 800eb9e:	441a      	add	r2, r3
 800eba0:	2300      	movs	r3, #0
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	2300      	movs	r3, #0
 800eba6:	2100      	movs	r1, #0
 800eba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebaa:	f7ff fe05 	bl	800e7b8 <xTimerGenericCommand>
 800ebae:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d14f      	bne.n	800ec56 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800ebb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebba:	f383 8811 	msr	BASEPRI, r3
 800ebbe:	f3bf 8f6f 	isb	sy
 800ebc2:	f3bf 8f4f 	dsb	sy
 800ebc6:	61bb      	str	r3, [r7, #24]
}
 800ebc8:	bf00      	nop
 800ebca:	e7fe      	b.n	800ebca <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ebd2:	f023 0301 	bic.w	r3, r3, #1
 800ebd6:	b2da      	uxtb	r2, r3
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800ebde:	e03a      	b.n	800ec56 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ebe6:	f043 0301 	orr.w	r3, r3, #1
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ebf2:	68fa      	ldr	r2, [r7, #12]
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ebf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfa:	699b      	ldr	r3, [r3, #24]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10a      	bne.n	800ec16 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800ec00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec04:	f383 8811 	msr	BASEPRI, r3
 800ec08:	f3bf 8f6f 	isb	sy
 800ec0c:	f3bf 8f4f 	dsb	sy
 800ec10:	617b      	str	r3, [r7, #20]
}
 800ec12:	bf00      	nop
 800ec14:	e7fe      	b.n	800ec14 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ec16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec18:	699a      	ldr	r2, [r3, #24]
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	18d1      	adds	r1, r2, r3
 800ec1e:	6a3b      	ldr	r3, [r7, #32]
 800ec20:	6a3a      	ldr	r2, [r7, #32]
 800ec22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec24:	f7ff ff22 	bl	800ea6c <prvInsertTimerInActiveList>
					break;
 800ec28:	e015      	b.n	800ec56 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ec2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ec30:	f003 0302 	and.w	r3, r3, #2
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d103      	bne.n	800ec40 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800ec38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec3a:	f000 fb67 	bl	800f30c <vPortFree>
 800ec3e:	e00a      	b.n	800ec56 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ec46:	f023 0301 	bic.w	r3, r3, #1
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ec52:	e000      	b.n	800ec56 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800ec54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec56:	4b08      	ldr	r3, [pc, #32]	; (800ec78 <prvProcessReceivedCommands+0x188>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f107 0108 	add.w	r1, r7, #8
 800ec5e:	2200      	movs	r2, #0
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fe fb1d 	bl	800d2a0 <xQueueReceive>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	f47f af45 	bne.w	800eaf8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ec6e:	bf00      	nop
 800ec70:	bf00      	nop
 800ec72:	3728      	adds	r7, #40	; 0x28
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	20000db4 	.word	0x20000db4

0800ec7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b088      	sub	sp, #32
 800ec80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec82:	e048      	b.n	800ed16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec84:	4b2d      	ldr	r3, [pc, #180]	; (800ed3c <prvSwitchTimerLists+0xc0>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec8e:	4b2b      	ldr	r3, [pc, #172]	; (800ed3c <prvSwitchTimerLists+0xc0>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fe f83a 	bl	800cd16 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6a1b      	ldr	r3, [r3, #32]
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ecb0:	f003 0304 	and.w	r3, r3, #4
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d02e      	beq.n	800ed16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	699b      	ldr	r3, [r3, #24]
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d90e      	bls.n	800ece8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	68ba      	ldr	r2, [r7, #8]
 800ecce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ecd6:	4b19      	ldr	r3, [pc, #100]	; (800ed3c <prvSwitchTimerLists+0xc0>)
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	4619      	mov	r1, r3
 800ece0:	4610      	mov	r0, r2
 800ece2:	f7fd ffdf 	bl	800cca4 <vListInsert>
 800ece6:	e016      	b.n	800ed16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ece8:	2300      	movs	r3, #0
 800ecea:	9300      	str	r3, [sp, #0]
 800ecec:	2300      	movs	r3, #0
 800ecee:	693a      	ldr	r2, [r7, #16]
 800ecf0:	2100      	movs	r1, #0
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f7ff fd60 	bl	800e7b8 <xTimerGenericCommand>
 800ecf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d10a      	bne.n	800ed16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ed00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed04:	f383 8811 	msr	BASEPRI, r3
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	f3bf 8f4f 	dsb	sy
 800ed10:	603b      	str	r3, [r7, #0]
}
 800ed12:	bf00      	nop
 800ed14:	e7fe      	b.n	800ed14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed16:	4b09      	ldr	r3, [pc, #36]	; (800ed3c <prvSwitchTimerLists+0xc0>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1b1      	bne.n	800ec84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ed20:	4b06      	ldr	r3, [pc, #24]	; (800ed3c <prvSwitchTimerLists+0xc0>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ed26:	4b06      	ldr	r3, [pc, #24]	; (800ed40 <prvSwitchTimerLists+0xc4>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a04      	ldr	r2, [pc, #16]	; (800ed3c <prvSwitchTimerLists+0xc0>)
 800ed2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ed2e:	4a04      	ldr	r2, [pc, #16]	; (800ed40 <prvSwitchTimerLists+0xc4>)
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	6013      	str	r3, [r2, #0]
}
 800ed34:	bf00      	nop
 800ed36:	3718      	adds	r7, #24
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	20000dac 	.word	0x20000dac
 800ed40:	20000db0 	.word	0x20000db0

0800ed44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ed4a:	f000 f9ab 	bl	800f0a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ed4e:	4b15      	ldr	r3, [pc, #84]	; (800eda4 <prvCheckForValidListAndQueue+0x60>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d120      	bne.n	800ed98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ed56:	4814      	ldr	r0, [pc, #80]	; (800eda8 <prvCheckForValidListAndQueue+0x64>)
 800ed58:	f7fd ff53 	bl	800cc02 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ed5c:	4813      	ldr	r0, [pc, #76]	; (800edac <prvCheckForValidListAndQueue+0x68>)
 800ed5e:	f7fd ff50 	bl	800cc02 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ed62:	4b13      	ldr	r3, [pc, #76]	; (800edb0 <prvCheckForValidListAndQueue+0x6c>)
 800ed64:	4a10      	ldr	r2, [pc, #64]	; (800eda8 <prvCheckForValidListAndQueue+0x64>)
 800ed66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ed68:	4b12      	ldr	r3, [pc, #72]	; (800edb4 <prvCheckForValidListAndQueue+0x70>)
 800ed6a:	4a10      	ldr	r2, [pc, #64]	; (800edac <prvCheckForValidListAndQueue+0x68>)
 800ed6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed6e:	2300      	movs	r3, #0
 800ed70:	9300      	str	r3, [sp, #0]
 800ed72:	4b11      	ldr	r3, [pc, #68]	; (800edb8 <prvCheckForValidListAndQueue+0x74>)
 800ed74:	4a11      	ldr	r2, [pc, #68]	; (800edbc <prvCheckForValidListAndQueue+0x78>)
 800ed76:	210c      	movs	r1, #12
 800ed78:	200a      	movs	r0, #10
 800ed7a:	f7fe f85f 	bl	800ce3c <xQueueGenericCreateStatic>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	4a08      	ldr	r2, [pc, #32]	; (800eda4 <prvCheckForValidListAndQueue+0x60>)
 800ed82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ed84:	4b07      	ldr	r3, [pc, #28]	; (800eda4 <prvCheckForValidListAndQueue+0x60>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d005      	beq.n	800ed98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ed8c:	4b05      	ldr	r3, [pc, #20]	; (800eda4 <prvCheckForValidListAndQueue+0x60>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	490b      	ldr	r1, [pc, #44]	; (800edc0 <prvCheckForValidListAndQueue+0x7c>)
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe fc66 	bl	800d664 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed98:	f000 f9b4 	bl	800f104 <vPortExitCritical>
}
 800ed9c:	bf00      	nop
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	20000db4 	.word	0x20000db4
 800eda8:	20000d84 	.word	0x20000d84
 800edac:	20000d98 	.word	0x20000d98
 800edb0:	20000dac 	.word	0x20000dac
 800edb4:	20000db0 	.word	0x20000db0
 800edb8:	20000e38 	.word	0x20000e38
 800edbc:	20000dc0 	.word	0x20000dc0
 800edc0:	08014164 	.word	0x08014164

0800edc4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d10a      	bne.n	800edec <pvTimerGetTimerID+0x28>
	__asm volatile
 800edd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edda:	f383 8811 	msr	BASEPRI, r3
 800edde:	f3bf 8f6f 	isb	sy
 800ede2:	f3bf 8f4f 	dsb	sy
 800ede6:	60fb      	str	r3, [r7, #12]
}
 800ede8:	bf00      	nop
 800edea:	e7fe      	b.n	800edea <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800edec:	f000 f95a 	bl	800f0a4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	69db      	ldr	r3, [r3, #28]
 800edf4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800edf6:	f000 f985 	bl	800f104 <vPortExitCritical>

	return pvReturn;
 800edfa:	693b      	ldr	r3, [r7, #16]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3718      	adds	r7, #24
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10a      	bne.n	800ee2e <vTimerSetTimerID+0x2a>
	__asm volatile
 800ee18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1c:	f383 8811 	msr	BASEPRI, r3
 800ee20:	f3bf 8f6f 	isb	sy
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	60bb      	str	r3, [r7, #8]
}
 800ee2a:	bf00      	nop
 800ee2c:	e7fe      	b.n	800ee2c <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 800ee2e:	f000 f939 	bl	800f0a4 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 800ee38:	f000 f964 	bl	800f104 <vPortExitCritical>
}
 800ee3c:	bf00      	nop
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee44:	b480      	push	{r7}
 800ee46:	b085      	sub	sp, #20
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	60b9      	str	r1, [r7, #8]
 800ee4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	3b04      	subs	r3, #4
 800ee54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ee5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	3b04      	subs	r3, #4
 800ee62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	f023 0201 	bic.w	r2, r3, #1
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	3b04      	subs	r3, #4
 800ee72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ee74:	4a0c      	ldr	r2, [pc, #48]	; (800eea8 <pxPortInitialiseStack+0x64>)
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	3b14      	subs	r3, #20
 800ee7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	3b04      	subs	r3, #4
 800ee8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f06f 0202 	mvn.w	r2, #2
 800ee92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	3b20      	subs	r3, #32
 800ee98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3714      	adds	r7, #20
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr
 800eea8:	0800eead 	.word	0x0800eead

0800eeac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eeb6:	4b12      	ldr	r3, [pc, #72]	; (800ef00 <prvTaskExitError+0x54>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eebe:	d00a      	beq.n	800eed6 <prvTaskExitError+0x2a>
	__asm volatile
 800eec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec4:	f383 8811 	msr	BASEPRI, r3
 800eec8:	f3bf 8f6f 	isb	sy
 800eecc:	f3bf 8f4f 	dsb	sy
 800eed0:	60fb      	str	r3, [r7, #12]
}
 800eed2:	bf00      	nop
 800eed4:	e7fe      	b.n	800eed4 <prvTaskExitError+0x28>
	__asm volatile
 800eed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeda:	f383 8811 	msr	BASEPRI, r3
 800eede:	f3bf 8f6f 	isb	sy
 800eee2:	f3bf 8f4f 	dsb	sy
 800eee6:	60bb      	str	r3, [r7, #8]
}
 800eee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eeea:	bf00      	nop
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d0fc      	beq.n	800eeec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eef2:	bf00      	nop
 800eef4:	bf00      	nop
 800eef6:	3714      	adds	r7, #20
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	200000b8 	.word	0x200000b8
	...

0800ef10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ef10:	4b07      	ldr	r3, [pc, #28]	; (800ef30 <pxCurrentTCBConst2>)
 800ef12:	6819      	ldr	r1, [r3, #0]
 800ef14:	6808      	ldr	r0, [r1, #0]
 800ef16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1a:	f380 8809 	msr	PSP, r0
 800ef1e:	f3bf 8f6f 	isb	sy
 800ef22:	f04f 0000 	mov.w	r0, #0
 800ef26:	f380 8811 	msr	BASEPRI, r0
 800ef2a:	4770      	bx	lr
 800ef2c:	f3af 8000 	nop.w

0800ef30 <pxCurrentTCBConst2>:
 800ef30:	20000c58 	.word	0x20000c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef34:	bf00      	nop
 800ef36:	bf00      	nop

0800ef38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef38:	4808      	ldr	r0, [pc, #32]	; (800ef5c <prvPortStartFirstTask+0x24>)
 800ef3a:	6800      	ldr	r0, [r0, #0]
 800ef3c:	6800      	ldr	r0, [r0, #0]
 800ef3e:	f380 8808 	msr	MSP, r0
 800ef42:	f04f 0000 	mov.w	r0, #0
 800ef46:	f380 8814 	msr	CONTROL, r0
 800ef4a:	b662      	cpsie	i
 800ef4c:	b661      	cpsie	f
 800ef4e:	f3bf 8f4f 	dsb	sy
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	df00      	svc	0
 800ef58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef5a:	bf00      	nop
 800ef5c:	e000ed08 	.word	0xe000ed08

0800ef60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b086      	sub	sp, #24
 800ef64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ef66:	4b46      	ldr	r3, [pc, #280]	; (800f080 <xPortStartScheduler+0x120>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4a46      	ldr	r2, [pc, #280]	; (800f084 <xPortStartScheduler+0x124>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d10a      	bne.n	800ef86 <xPortStartScheduler+0x26>
	__asm volatile
 800ef70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	613b      	str	r3, [r7, #16]
}
 800ef82:	bf00      	nop
 800ef84:	e7fe      	b.n	800ef84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ef86:	4b3e      	ldr	r3, [pc, #248]	; (800f080 <xPortStartScheduler+0x120>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4a3f      	ldr	r2, [pc, #252]	; (800f088 <xPortStartScheduler+0x128>)
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d10a      	bne.n	800efa6 <xPortStartScheduler+0x46>
	__asm volatile
 800ef90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef94:	f383 8811 	msr	BASEPRI, r3
 800ef98:	f3bf 8f6f 	isb	sy
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	60fb      	str	r3, [r7, #12]
}
 800efa2:	bf00      	nop
 800efa4:	e7fe      	b.n	800efa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800efa6:	4b39      	ldr	r3, [pc, #228]	; (800f08c <xPortStartScheduler+0x12c>)
 800efa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	22ff      	movs	r2, #255	; 0xff
 800efb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800efc0:	78fb      	ldrb	r3, [r7, #3]
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800efc8:	b2da      	uxtb	r2, r3
 800efca:	4b31      	ldr	r3, [pc, #196]	; (800f090 <xPortStartScheduler+0x130>)
 800efcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800efce:	4b31      	ldr	r3, [pc, #196]	; (800f094 <xPortStartScheduler+0x134>)
 800efd0:	2207      	movs	r2, #7
 800efd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efd4:	e009      	b.n	800efea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800efd6:	4b2f      	ldr	r3, [pc, #188]	; (800f094 <xPortStartScheduler+0x134>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	3b01      	subs	r3, #1
 800efdc:	4a2d      	ldr	r2, [pc, #180]	; (800f094 <xPortStartScheduler+0x134>)
 800efde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800efe0:	78fb      	ldrb	r3, [r7, #3]
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efea:	78fb      	ldrb	r3, [r7, #3]
 800efec:	b2db      	uxtb	r3, r3
 800efee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eff2:	2b80      	cmp	r3, #128	; 0x80
 800eff4:	d0ef      	beq.n	800efd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eff6:	4b27      	ldr	r3, [pc, #156]	; (800f094 <xPortStartScheduler+0x134>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f1c3 0307 	rsb	r3, r3, #7
 800effe:	2b04      	cmp	r3, #4
 800f000:	d00a      	beq.n	800f018 <xPortStartScheduler+0xb8>
	__asm volatile
 800f002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f006:	f383 8811 	msr	BASEPRI, r3
 800f00a:	f3bf 8f6f 	isb	sy
 800f00e:	f3bf 8f4f 	dsb	sy
 800f012:	60bb      	str	r3, [r7, #8]
}
 800f014:	bf00      	nop
 800f016:	e7fe      	b.n	800f016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f018:	4b1e      	ldr	r3, [pc, #120]	; (800f094 <xPortStartScheduler+0x134>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	021b      	lsls	r3, r3, #8
 800f01e:	4a1d      	ldr	r2, [pc, #116]	; (800f094 <xPortStartScheduler+0x134>)
 800f020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f022:	4b1c      	ldr	r3, [pc, #112]	; (800f094 <xPortStartScheduler+0x134>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f02a:	4a1a      	ldr	r2, [pc, #104]	; (800f094 <xPortStartScheduler+0x134>)
 800f02c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	b2da      	uxtb	r2, r3
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f036:	4b18      	ldr	r3, [pc, #96]	; (800f098 <xPortStartScheduler+0x138>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a17      	ldr	r2, [pc, #92]	; (800f098 <xPortStartScheduler+0x138>)
 800f03c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f042:	4b15      	ldr	r3, [pc, #84]	; (800f098 <xPortStartScheduler+0x138>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a14      	ldr	r2, [pc, #80]	; (800f098 <xPortStartScheduler+0x138>)
 800f048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f04c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f04e:	f000 f8dd 	bl	800f20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f052:	4b12      	ldr	r3, [pc, #72]	; (800f09c <xPortStartScheduler+0x13c>)
 800f054:	2200      	movs	r2, #0
 800f056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f058:	f000 f8fc 	bl	800f254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f05c:	4b10      	ldr	r3, [pc, #64]	; (800f0a0 <xPortStartScheduler+0x140>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a0f      	ldr	r2, [pc, #60]	; (800f0a0 <xPortStartScheduler+0x140>)
 800f062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f068:	f7ff ff66 	bl	800ef38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f06c:	f7ff f814 	bl	800e098 <vTaskSwitchContext>
	prvTaskExitError();
 800f070:	f7ff ff1c 	bl	800eeac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	3718      	adds	r7, #24
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	e000ed00 	.word	0xe000ed00
 800f084:	410fc271 	.word	0x410fc271
 800f088:	410fc270 	.word	0x410fc270
 800f08c:	e000e400 	.word	0xe000e400
 800f090:	20000e80 	.word	0x20000e80
 800f094:	20000e84 	.word	0x20000e84
 800f098:	e000ed20 	.word	0xe000ed20
 800f09c:	200000b8 	.word	0x200000b8
 800f0a0:	e000ef34 	.word	0xe000ef34

0800f0a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
	__asm volatile
 800f0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	607b      	str	r3, [r7, #4]
}
 800f0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f0be:	4b0f      	ldr	r3, [pc, #60]	; (800f0fc <vPortEnterCritical+0x58>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	4a0d      	ldr	r2, [pc, #52]	; (800f0fc <vPortEnterCritical+0x58>)
 800f0c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f0c8:	4b0c      	ldr	r3, [pc, #48]	; (800f0fc <vPortEnterCritical+0x58>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d10f      	bne.n	800f0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f0d0:	4b0b      	ldr	r3, [pc, #44]	; (800f100 <vPortEnterCritical+0x5c>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00a      	beq.n	800f0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0de:	f383 8811 	msr	BASEPRI, r3
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	603b      	str	r3, [r7, #0]
}
 800f0ec:	bf00      	nop
 800f0ee:	e7fe      	b.n	800f0ee <vPortEnterCritical+0x4a>
	}
}
 800f0f0:	bf00      	nop
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	200000b8 	.word	0x200000b8
 800f100:	e000ed04 	.word	0xe000ed04

0800f104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f10a:	4b12      	ldr	r3, [pc, #72]	; (800f154 <vPortExitCritical+0x50>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d10a      	bne.n	800f128 <vPortExitCritical+0x24>
	__asm volatile
 800f112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f116:	f383 8811 	msr	BASEPRI, r3
 800f11a:	f3bf 8f6f 	isb	sy
 800f11e:	f3bf 8f4f 	dsb	sy
 800f122:	607b      	str	r3, [r7, #4]
}
 800f124:	bf00      	nop
 800f126:	e7fe      	b.n	800f126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f128:	4b0a      	ldr	r3, [pc, #40]	; (800f154 <vPortExitCritical+0x50>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	3b01      	subs	r3, #1
 800f12e:	4a09      	ldr	r2, [pc, #36]	; (800f154 <vPortExitCritical+0x50>)
 800f130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f132:	4b08      	ldr	r3, [pc, #32]	; (800f154 <vPortExitCritical+0x50>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d105      	bne.n	800f146 <vPortExitCritical+0x42>
 800f13a:	2300      	movs	r3, #0
 800f13c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	f383 8811 	msr	BASEPRI, r3
}
 800f144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f146:	bf00      	nop
 800f148:	370c      	adds	r7, #12
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop
 800f154:	200000b8 	.word	0x200000b8
	...

0800f160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f160:	f3ef 8009 	mrs	r0, PSP
 800f164:	f3bf 8f6f 	isb	sy
 800f168:	4b15      	ldr	r3, [pc, #84]	; (800f1c0 <pxCurrentTCBConst>)
 800f16a:	681a      	ldr	r2, [r3, #0]
 800f16c:	f01e 0f10 	tst.w	lr, #16
 800f170:	bf08      	it	eq
 800f172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f17a:	6010      	str	r0, [r2, #0]
 800f17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f184:	f380 8811 	msr	BASEPRI, r0
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	f7fe ff82 	bl	800e098 <vTaskSwitchContext>
 800f194:	f04f 0000 	mov.w	r0, #0
 800f198:	f380 8811 	msr	BASEPRI, r0
 800f19c:	bc09      	pop	{r0, r3}
 800f19e:	6819      	ldr	r1, [r3, #0]
 800f1a0:	6808      	ldr	r0, [r1, #0]
 800f1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a6:	f01e 0f10 	tst.w	lr, #16
 800f1aa:	bf08      	it	eq
 800f1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f1b0:	f380 8809 	msr	PSP, r0
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	4770      	bx	lr
 800f1ba:	bf00      	nop
 800f1bc:	f3af 8000 	nop.w

0800f1c0 <pxCurrentTCBConst>:
 800f1c0:	20000c58 	.word	0x20000c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f1c4:	bf00      	nop
 800f1c6:	bf00      	nop

0800f1c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800f1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d2:	f383 8811 	msr	BASEPRI, r3
 800f1d6:	f3bf 8f6f 	isb	sy
 800f1da:	f3bf 8f4f 	dsb	sy
 800f1de:	607b      	str	r3, [r7, #4]
}
 800f1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f1e2:	f7fe fea1 	bl	800df28 <xTaskIncrementTick>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d003      	beq.n	800f1f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f1ec:	4b06      	ldr	r3, [pc, #24]	; (800f208 <xPortSysTickHandler+0x40>)
 800f1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1f2:	601a      	str	r2, [r3, #0]
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	f383 8811 	msr	BASEPRI, r3
}
 800f1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f200:	bf00      	nop
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	e000ed04 	.word	0xe000ed04

0800f20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f20c:	b480      	push	{r7}
 800f20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f210:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <vPortSetupTimerInterrupt+0x34>)
 800f212:	2200      	movs	r2, #0
 800f214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f216:	4b0b      	ldr	r3, [pc, #44]	; (800f244 <vPortSetupTimerInterrupt+0x38>)
 800f218:	2200      	movs	r2, #0
 800f21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f21c:	4b0a      	ldr	r3, [pc, #40]	; (800f248 <vPortSetupTimerInterrupt+0x3c>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4a0a      	ldr	r2, [pc, #40]	; (800f24c <vPortSetupTimerInterrupt+0x40>)
 800f222:	fba2 2303 	umull	r2, r3, r2, r3
 800f226:	099b      	lsrs	r3, r3, #6
 800f228:	4a09      	ldr	r2, [pc, #36]	; (800f250 <vPortSetupTimerInterrupt+0x44>)
 800f22a:	3b01      	subs	r3, #1
 800f22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f22e:	4b04      	ldr	r3, [pc, #16]	; (800f240 <vPortSetupTimerInterrupt+0x34>)
 800f230:	2207      	movs	r2, #7
 800f232:	601a      	str	r2, [r3, #0]
}
 800f234:	bf00      	nop
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop
 800f240:	e000e010 	.word	0xe000e010
 800f244:	e000e018 	.word	0xe000e018
 800f248:	20000000 	.word	0x20000000
 800f24c:	10624dd3 	.word	0x10624dd3
 800f250:	e000e014 	.word	0xe000e014

0800f254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f264 <vPortEnableVFP+0x10>
 800f258:	6801      	ldr	r1, [r0, #0]
 800f25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f25e:	6001      	str	r1, [r0, #0]
 800f260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f262:	bf00      	nop
 800f264:	e000ed88 	.word	0xe000ed88

0800f268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f268:	b480      	push	{r7}
 800f26a:	b085      	sub	sp, #20
 800f26c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f26e:	f3ef 8305 	mrs	r3, IPSR
 800f272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2b0f      	cmp	r3, #15
 800f278:	d914      	bls.n	800f2a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f27a:	4a17      	ldr	r2, [pc, #92]	; (800f2d8 <vPortValidateInterruptPriority+0x70>)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	4413      	add	r3, r2
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f284:	4b15      	ldr	r3, [pc, #84]	; (800f2dc <vPortValidateInterruptPriority+0x74>)
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	7afa      	ldrb	r2, [r7, #11]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d20a      	bcs.n	800f2a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f292:	f383 8811 	msr	BASEPRI, r3
 800f296:	f3bf 8f6f 	isb	sy
 800f29a:	f3bf 8f4f 	dsb	sy
 800f29e:	607b      	str	r3, [r7, #4]
}
 800f2a0:	bf00      	nop
 800f2a2:	e7fe      	b.n	800f2a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f2a4:	4b0e      	ldr	r3, [pc, #56]	; (800f2e0 <vPortValidateInterruptPriority+0x78>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f2ac:	4b0d      	ldr	r3, [pc, #52]	; (800f2e4 <vPortValidateInterruptPriority+0x7c>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d90a      	bls.n	800f2ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b8:	f383 8811 	msr	BASEPRI, r3
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f3bf 8f4f 	dsb	sy
 800f2c4:	603b      	str	r3, [r7, #0]
}
 800f2c6:	bf00      	nop
 800f2c8:	e7fe      	b.n	800f2c8 <vPortValidateInterruptPriority+0x60>
	}
 800f2ca:	bf00      	nop
 800f2cc:	3714      	adds	r7, #20
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	e000e3f0 	.word	0xe000e3f0
 800f2dc:	20000e80 	.word	0x20000e80
 800f2e0:	e000ed0c 	.word	0xe000ed0c
 800f2e4:	20000e84 	.word	0x20000e84

0800f2e8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800f2f0:	f7fe fd60 	bl	800ddb4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 fd2b 	bl	800fd50 <malloc>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f2fe:	f7fe fd67 	bl	800ddd0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800f302:	68fb      	ldr	r3, [r7, #12]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3710      	adds	r7, #16
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
	if( pv )
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d006      	beq.n	800f328 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800f31a:	f7fe fd4b 	bl	800ddb4 <vTaskSuspendAll>
		{
			free( pv );
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 fd1e 	bl	800fd60 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800f324:	f7fe fd54 	bl	800ddd0 <xTaskResumeAll>
	}
}
 800f328:	bf00      	nop
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f334:	2200      	movs	r2, #0
 800f336:	4912      	ldr	r1, [pc, #72]	; (800f380 <MX_USB_DEVICE_Init+0x50>)
 800f338:	4812      	ldr	r0, [pc, #72]	; (800f384 <MX_USB_DEVICE_Init+0x54>)
 800f33a:	f7fc f8f1 	bl	800b520 <USBD_Init>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d001      	beq.n	800f348 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f344:	f7f2 fd88 	bl	8001e58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f348:	490f      	ldr	r1, [pc, #60]	; (800f388 <MX_USB_DEVICE_Init+0x58>)
 800f34a:	480e      	ldr	r0, [pc, #56]	; (800f384 <MX_USB_DEVICE_Init+0x54>)
 800f34c:	f7fc f918 	bl	800b580 <USBD_RegisterClass>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d001      	beq.n	800f35a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f356:	f7f2 fd7f 	bl	8001e58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f35a:	490c      	ldr	r1, [pc, #48]	; (800f38c <MX_USB_DEVICE_Init+0x5c>)
 800f35c:	4809      	ldr	r0, [pc, #36]	; (800f384 <MX_USB_DEVICE_Init+0x54>)
 800f35e:	f7fc f809 	bl	800b374 <USBD_CDC_RegisterInterface>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f368:	f7f2 fd76 	bl	8001e58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f36c:	4805      	ldr	r0, [pc, #20]	; (800f384 <MX_USB_DEVICE_Init+0x54>)
 800f36e:	f7fc f93d 	bl	800b5ec <USBD_Start>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d001      	beq.n	800f37c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f378:	f7f2 fd6e 	bl	8001e58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f37c:	bf00      	nop
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	200000d0 	.word	0x200000d0
 800f384:	20000e88 	.word	0x20000e88
 800f388:	20000038 	.word	0x20000038
 800f38c:	200000bc 	.word	0x200000bc

0800f390 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f394:	2200      	movs	r2, #0
 800f396:	4905      	ldr	r1, [pc, #20]	; (800f3ac <CDC_Init_FS+0x1c>)
 800f398:	4805      	ldr	r0, [pc, #20]	; (800f3b0 <CDC_Init_FS+0x20>)
 800f39a:	f7fc f805 	bl	800b3a8 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f39e:	4905      	ldr	r1, [pc, #20]	; (800f3b4 <CDC_Init_FS+0x24>)
 800f3a0:	4803      	ldr	r0, [pc, #12]	; (800f3b0 <CDC_Init_FS+0x20>)
 800f3a2:	f7fc f823 	bl	800b3ec <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800f3a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	20001564 	.word	0x20001564
 800f3b0:	20000e88 	.word	0x20000e88
 800f3b4:	20001164 	.word	0x20001164

0800f3b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800f3bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	6039      	str	r1, [r7, #0]
 800f3d2:	71fb      	strb	r3, [r7, #7]
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 800f3d8:	79fb      	ldrb	r3, [r7, #7]
 800f3da:	2b23      	cmp	r3, #35	; 0x23
 800f3dc:	d84a      	bhi.n	800f474 <CDC_Control_FS+0xac>
 800f3de:	a201      	add	r2, pc, #4	; (adr r2, 800f3e4 <CDC_Control_FS+0x1c>)
 800f3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e4:	0800f475 	.word	0x0800f475
 800f3e8:	0800f475 	.word	0x0800f475
 800f3ec:	0800f475 	.word	0x0800f475
 800f3f0:	0800f475 	.word	0x0800f475
 800f3f4:	0800f475 	.word	0x0800f475
 800f3f8:	0800f475 	.word	0x0800f475
 800f3fc:	0800f475 	.word	0x0800f475
 800f400:	0800f475 	.word	0x0800f475
 800f404:	0800f475 	.word	0x0800f475
 800f408:	0800f475 	.word	0x0800f475
 800f40c:	0800f475 	.word	0x0800f475
 800f410:	0800f475 	.word	0x0800f475
 800f414:	0800f475 	.word	0x0800f475
 800f418:	0800f475 	.word	0x0800f475
 800f41c:	0800f475 	.word	0x0800f475
 800f420:	0800f475 	.word	0x0800f475
 800f424:	0800f475 	.word	0x0800f475
 800f428:	0800f475 	.word	0x0800f475
 800f42c:	0800f475 	.word	0x0800f475
 800f430:	0800f475 	.word	0x0800f475
 800f434:	0800f475 	.word	0x0800f475
 800f438:	0800f475 	.word	0x0800f475
 800f43c:	0800f475 	.word	0x0800f475
 800f440:	0800f475 	.word	0x0800f475
 800f444:	0800f475 	.word	0x0800f475
 800f448:	0800f475 	.word	0x0800f475
 800f44c:	0800f475 	.word	0x0800f475
 800f450:	0800f475 	.word	0x0800f475
 800f454:	0800f475 	.word	0x0800f475
 800f458:	0800f475 	.word	0x0800f475
 800f45c:	0800f475 	.word	0x0800f475
 800f460:	0800f475 	.word	0x0800f475
 800f464:	0800f475 	.word	0x0800f475
 800f468:	0800f475 	.word	0x0800f475
 800f46c:	0800f475 	.word	0x0800f475
 800f470:	0800f475 	.word	0x0800f475
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800f474:	bf00      	nop
    }

    return (USBD_OK);
 800f476:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f478:	4618      	mov	r0, r3
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f48e:	6879      	ldr	r1, [r7, #4]
 800f490:	4805      	ldr	r0, [pc, #20]	; (800f4a8 <CDC_Receive_FS+0x24>)
 800f492:	f7fb ffab 	bl	800b3ec <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f496:	4804      	ldr	r0, [pc, #16]	; (800f4a8 <CDC_Receive_FS+0x24>)
 800f498:	f7fc f80c 	bl	800b4b4 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800f49c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	20000e88 	.word	0x20000e88

0800f4ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800f4bc:	4b0d      	ldr	r3, [pc, #52]	; (800f4f4 <CDC_Transmit_FS+0x48>)
 800f4be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4c2:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d001      	beq.n	800f4d2 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	e00b      	b.n	800f4ea <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f4d2:	887b      	ldrh	r3, [r7, #2]
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	6879      	ldr	r1, [r7, #4]
 800f4d8:	4806      	ldr	r0, [pc, #24]	; (800f4f4 <CDC_Transmit_FS+0x48>)
 800f4da:	f7fb ff65 	bl	800b3a8 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f4de:	4805      	ldr	r0, [pc, #20]	; (800f4f4 <CDC_Transmit_FS+0x48>)
 800f4e0:	f7fb ffa2 	bl	800b428 <USBD_CDC_TransmitPacket>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3710      	adds	r7, #16
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	20000e88 	.word	0x20000e88

0800f4f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b087      	sub	sp, #28
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	4613      	mov	r3, r2
 800f504:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f506:	2300      	movs	r3, #0
 800f508:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f50a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	371c      	adds	r7, #28
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
	...

0800f51c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	4603      	mov	r3, r0
 800f524:	6039      	str	r1, [r7, #0]
 800f526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	2212      	movs	r2, #18
 800f52c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f52e:	4b03      	ldr	r3, [pc, #12]	; (800f53c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f530:	4618      	mov	r0, r3
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr
 800f53c:	200000ec 	.word	0x200000ec

0800f540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	4603      	mov	r3, r0
 800f548:	6039      	str	r1, [r7, #0]
 800f54a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	2204      	movs	r2, #4
 800f550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f552:	4b03      	ldr	r3, [pc, #12]	; (800f560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f554:	4618      	mov	r0, r3
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr
 800f560:	20000100 	.word	0x20000100

0800f564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	4603      	mov	r3, r0
 800f56c:	6039      	str	r1, [r7, #0]
 800f56e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d105      	bne.n	800f582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f576:	683a      	ldr	r2, [r7, #0]
 800f578:	4907      	ldr	r1, [pc, #28]	; (800f598 <USBD_FS_ProductStrDescriptor+0x34>)
 800f57a:	4808      	ldr	r0, [pc, #32]	; (800f59c <USBD_FS_ProductStrDescriptor+0x38>)
 800f57c:	f7fd f9e2 	bl	800c944 <USBD_GetString>
 800f580:	e004      	b.n	800f58c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f582:	683a      	ldr	r2, [r7, #0]
 800f584:	4904      	ldr	r1, [pc, #16]	; (800f598 <USBD_FS_ProductStrDescriptor+0x34>)
 800f586:	4805      	ldr	r0, [pc, #20]	; (800f59c <USBD_FS_ProductStrDescriptor+0x38>)
 800f588:	f7fd f9dc 	bl	800c944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f58c:	4b02      	ldr	r3, [pc, #8]	; (800f598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3708      	adds	r7, #8
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	20001964 	.word	0x20001964
 800f59c:	0801416c 	.word	0x0801416c

0800f5a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	6039      	str	r1, [r7, #0]
 800f5aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f5ac:	683a      	ldr	r2, [r7, #0]
 800f5ae:	4904      	ldr	r1, [pc, #16]	; (800f5c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f5b0:	4804      	ldr	r0, [pc, #16]	; (800f5c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f5b2:	f7fd f9c7 	bl	800c944 <USBD_GetString>
  return USBD_StrDesc;
 800f5b6:	4b02      	ldr	r3, [pc, #8]	; (800f5c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	20001964 	.word	0x20001964
 800f5c4:	08014184 	.word	0x08014184

0800f5c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	6039      	str	r1, [r7, #0]
 800f5d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	221a      	movs	r2, #26
 800f5d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f5da:	f000 f843 	bl	800f664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f5de:	4b02      	ldr	r3, [pc, #8]	; (800f5e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	20000104 	.word	0x20000104

0800f5ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	6039      	str	r1, [r7, #0]
 800f5f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f5f8:	79fb      	ldrb	r3, [r7, #7]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d105      	bne.n	800f60a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f5fe:	683a      	ldr	r2, [r7, #0]
 800f600:	4907      	ldr	r1, [pc, #28]	; (800f620 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f602:	4808      	ldr	r0, [pc, #32]	; (800f624 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f604:	f7fd f99e 	bl	800c944 <USBD_GetString>
 800f608:	e004      	b.n	800f614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f60a:	683a      	ldr	r2, [r7, #0]
 800f60c:	4904      	ldr	r1, [pc, #16]	; (800f620 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f60e:	4805      	ldr	r0, [pc, #20]	; (800f624 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f610:	f7fd f998 	bl	800c944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f614:	4b02      	ldr	r3, [pc, #8]	; (800f620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f616:	4618      	mov	r0, r3
 800f618:	3708      	adds	r7, #8
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	20001964 	.word	0x20001964
 800f624:	08014198 	.word	0x08014198

0800f628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	4603      	mov	r3, r0
 800f630:	6039      	str	r1, [r7, #0]
 800f632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f634:	79fb      	ldrb	r3, [r7, #7]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d105      	bne.n	800f646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f63a:	683a      	ldr	r2, [r7, #0]
 800f63c:	4907      	ldr	r1, [pc, #28]	; (800f65c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f63e:	4808      	ldr	r0, [pc, #32]	; (800f660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f640:	f7fd f980 	bl	800c944 <USBD_GetString>
 800f644:	e004      	b.n	800f650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f646:	683a      	ldr	r2, [r7, #0]
 800f648:	4904      	ldr	r1, [pc, #16]	; (800f65c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f64a:	4805      	ldr	r0, [pc, #20]	; (800f660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f64c:	f7fd f97a 	bl	800c944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f650:	4b02      	ldr	r3, [pc, #8]	; (800f65c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f652:	4618      	mov	r0, r3
 800f654:	3708      	adds	r7, #8
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	20001964 	.word	0x20001964
 800f660:	080141a4 	.word	0x080141a4

0800f664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f66a:	4b0f      	ldr	r3, [pc, #60]	; (800f6a8 <Get_SerialNum+0x44>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f670:	4b0e      	ldr	r3, [pc, #56]	; (800f6ac <Get_SerialNum+0x48>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f676:	4b0e      	ldr	r3, [pc, #56]	; (800f6b0 <Get_SerialNum+0x4c>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f67c:	68fa      	ldr	r2, [r7, #12]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4413      	add	r3, r2
 800f682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d009      	beq.n	800f69e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f68a:	2208      	movs	r2, #8
 800f68c:	4909      	ldr	r1, [pc, #36]	; (800f6b4 <Get_SerialNum+0x50>)
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f000 f814 	bl	800f6bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f694:	2204      	movs	r2, #4
 800f696:	4908      	ldr	r1, [pc, #32]	; (800f6b8 <Get_SerialNum+0x54>)
 800f698:	68b8      	ldr	r0, [r7, #8]
 800f69a:	f000 f80f 	bl	800f6bc <IntToUnicode>
  }
}
 800f69e:	bf00      	nop
 800f6a0:	3710      	adds	r7, #16
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	1fff7a10 	.word	0x1fff7a10
 800f6ac:	1fff7a14 	.word	0x1fff7a14
 800f6b0:	1fff7a18 	.word	0x1fff7a18
 800f6b4:	20000106 	.word	0x20000106
 800f6b8:	20000116 	.word	0x20000116

0800f6bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b087      	sub	sp, #28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	75fb      	strb	r3, [r7, #23]
 800f6d2:	e027      	b.n	800f724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	0f1b      	lsrs	r3, r3, #28
 800f6d8:	2b09      	cmp	r3, #9
 800f6da:	d80b      	bhi.n	800f6f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	0f1b      	lsrs	r3, r3, #28
 800f6e0:	b2da      	uxtb	r2, r3
 800f6e2:	7dfb      	ldrb	r3, [r7, #23]
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	440b      	add	r3, r1
 800f6ec:	3230      	adds	r2, #48	; 0x30
 800f6ee:	b2d2      	uxtb	r2, r2
 800f6f0:	701a      	strb	r2, [r3, #0]
 800f6f2:	e00a      	b.n	800f70a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	0f1b      	lsrs	r3, r3, #28
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	7dfb      	ldrb	r3, [r7, #23]
 800f6fc:	005b      	lsls	r3, r3, #1
 800f6fe:	4619      	mov	r1, r3
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	440b      	add	r3, r1
 800f704:	3237      	adds	r2, #55	; 0x37
 800f706:	b2d2      	uxtb	r2, r2
 800f708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	011b      	lsls	r3, r3, #4
 800f70e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f710:	7dfb      	ldrb	r3, [r7, #23]
 800f712:	005b      	lsls	r3, r3, #1
 800f714:	3301      	adds	r3, #1
 800f716:	68ba      	ldr	r2, [r7, #8]
 800f718:	4413      	add	r3, r2
 800f71a:	2200      	movs	r2, #0
 800f71c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f71e:	7dfb      	ldrb	r3, [r7, #23]
 800f720:	3301      	adds	r3, #1
 800f722:	75fb      	strb	r3, [r7, #23]
 800f724:	7dfa      	ldrb	r2, [r7, #23]
 800f726:	79fb      	ldrb	r3, [r7, #7]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d3d3      	bcc.n	800f6d4 <IntToUnicode+0x18>
  }
}
 800f72c:	bf00      	nop
 800f72e:	bf00      	nop
 800f730:	371c      	adds	r7, #28
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
	...

0800f73c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b08a      	sub	sp, #40	; 0x28
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f744:	f107 0314 	add.w	r3, r7, #20
 800f748:	2200      	movs	r2, #0
 800f74a:	601a      	str	r2, [r3, #0]
 800f74c:	605a      	str	r2, [r3, #4]
 800f74e:	609a      	str	r2, [r3, #8]
 800f750:	60da      	str	r2, [r3, #12]
 800f752:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f75c:	d13a      	bne.n	800f7d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f75e:	2300      	movs	r3, #0
 800f760:	613b      	str	r3, [r7, #16]
 800f762:	4b1e      	ldr	r3, [pc, #120]	; (800f7dc <HAL_PCD_MspInit+0xa0>)
 800f764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f766:	4a1d      	ldr	r2, [pc, #116]	; (800f7dc <HAL_PCD_MspInit+0xa0>)
 800f768:	f043 0301 	orr.w	r3, r3, #1
 800f76c:	6313      	str	r3, [r2, #48]	; 0x30
 800f76e:	4b1b      	ldr	r3, [pc, #108]	; (800f7dc <HAL_PCD_MspInit+0xa0>)
 800f770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f772:	f003 0301 	and.w	r3, r3, #1
 800f776:	613b      	str	r3, [r7, #16]
 800f778:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f77a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f77e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f780:	2302      	movs	r3, #2
 800f782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f784:	2300      	movs	r3, #0
 800f786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f788:	2303      	movs	r3, #3
 800f78a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f78c:	230a      	movs	r3, #10
 800f78e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f790:	f107 0314 	add.w	r3, r7, #20
 800f794:	4619      	mov	r1, r3
 800f796:	4812      	ldr	r0, [pc, #72]	; (800f7e0 <HAL_PCD_MspInit+0xa4>)
 800f798:	f7f5 fb9a 	bl	8004ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f79c:	4b0f      	ldr	r3, [pc, #60]	; (800f7dc <HAL_PCD_MspInit+0xa0>)
 800f79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7a0:	4a0e      	ldr	r2, [pc, #56]	; (800f7dc <HAL_PCD_MspInit+0xa0>)
 800f7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7a6:	6353      	str	r3, [r2, #52]	; 0x34
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	60fb      	str	r3, [r7, #12]
 800f7ac:	4b0b      	ldr	r3, [pc, #44]	; (800f7dc <HAL_PCD_MspInit+0xa0>)
 800f7ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7b0:	4a0a      	ldr	r2, [pc, #40]	; (800f7dc <HAL_PCD_MspInit+0xa0>)
 800f7b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f7b6:	6453      	str	r3, [r2, #68]	; 0x44
 800f7b8:	4b08      	ldr	r3, [pc, #32]	; (800f7dc <HAL_PCD_MspInit+0xa0>)
 800f7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7c0:	60fb      	str	r3, [r7, #12]
 800f7c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	2105      	movs	r1, #5
 800f7c8:	2043      	movs	r0, #67	; 0x43
 800f7ca:	f7f5 f960 	bl	8004a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f7ce:	2043      	movs	r0, #67	; 0x43
 800f7d0:	f7f5 f979 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f7d4:	bf00      	nop
 800f7d6:	3728      	adds	r7, #40	; 0x28
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	40023800 	.word	0x40023800
 800f7e0:	40020000 	.word	0x40020000

0800f7e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f7f8:	4619      	mov	r1, r3
 800f7fa:	4610      	mov	r0, r2
 800f7fc:	f7fb ff43 	bl	800b686 <USBD_LL_SetupStage>
}
 800f800:	bf00      	nop
 800f802:	3708      	adds	r7, #8
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	460b      	mov	r3, r1
 800f812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f81a:	78fa      	ldrb	r2, [r7, #3]
 800f81c:	6879      	ldr	r1, [r7, #4]
 800f81e:	4613      	mov	r3, r2
 800f820:	00db      	lsls	r3, r3, #3
 800f822:	4413      	add	r3, r2
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	440b      	add	r3, r1
 800f828:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	78fb      	ldrb	r3, [r7, #3]
 800f830:	4619      	mov	r1, r3
 800f832:	f7fb ff7d 	bl	800b730 <USBD_LL_DataOutStage>
}
 800f836:	bf00      	nop
 800f838:	3708      	adds	r7, #8
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f83e:	b580      	push	{r7, lr}
 800f840:	b082      	sub	sp, #8
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
 800f846:	460b      	mov	r3, r1
 800f848:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f850:	78fa      	ldrb	r2, [r7, #3]
 800f852:	6879      	ldr	r1, [r7, #4]
 800f854:	4613      	mov	r3, r2
 800f856:	00db      	lsls	r3, r3, #3
 800f858:	4413      	add	r3, r2
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	440b      	add	r3, r1
 800f85e:	334c      	adds	r3, #76	; 0x4c
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	78fb      	ldrb	r3, [r7, #3]
 800f864:	4619      	mov	r1, r3
 800f866:	f7fc f816 	bl	800b896 <USBD_LL_DataInStage>
}
 800f86a:	bf00      	nop
 800f86c:	3708      	adds	r7, #8
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f872:	b580      	push	{r7, lr}
 800f874:	b082      	sub	sp, #8
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f880:	4618      	mov	r0, r3
 800f882:	f7fc f94a 	bl	800bb1a <USBD_LL_SOF>
}
 800f886:	bf00      	nop
 800f888:	3708      	adds	r7, #8
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f88e:	b580      	push	{r7, lr}
 800f890:	b084      	sub	sp, #16
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f896:	2301      	movs	r3, #1
 800f898:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	2b02      	cmp	r3, #2
 800f8a0:	d001      	beq.n	800f8a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f8a2:	f7f2 fad9 	bl	8001e58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8ac:	7bfa      	ldrb	r2, [r7, #15]
 800f8ae:	4611      	mov	r1, r2
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7fc f8f4 	bl	800ba9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7fc f89c 	bl	800b9fa <USBD_LL_Reset>
}
 800f8c2:	bf00      	nop
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
	...

0800f8cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fc f8ef 	bl	800babe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	6812      	ldr	r2, [r2, #0]
 800f8ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f8f2:	f043 0301 	orr.w	r3, r3, #1
 800f8f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a1b      	ldr	r3, [r3, #32]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d005      	beq.n	800f90c <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f900:	4b04      	ldr	r3, [pc, #16]	; (800f914 <HAL_PCD_SuspendCallback+0x48>)
 800f902:	691b      	ldr	r3, [r3, #16]
 800f904:	4a03      	ldr	r2, [pc, #12]	; (800f914 <HAL_PCD_SuspendCallback+0x48>)
 800f906:	f043 0306 	orr.w	r3, r3, #6
 800f90a:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800f90c:	bf00      	nop
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	e000ed00 	.word	0xe000ed00

0800f918 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f926:	4618      	mov	r0, r3
 800f928:	f7fc f8df 	bl	800baea <USBD_LL_Resume>
}
 800f92c:	bf00      	nop
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	460b      	mov	r3, r1
 800f93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f946:	78fa      	ldrb	r2, [r7, #3]
 800f948:	4611      	mov	r1, r2
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7fc f937 	bl	800bbbe <USBD_LL_IsoOUTIncomplete>
}
 800f950:	bf00      	nop
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	460b      	mov	r3, r1
 800f962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f96a:	78fa      	ldrb	r2, [r7, #3]
 800f96c:	4611      	mov	r1, r2
 800f96e:	4618      	mov	r0, r3
 800f970:	f7fc f8f3 	bl	800bb5a <USBD_LL_IsoINIncomplete>
}
 800f974:	bf00      	nop
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fc f949 	bl	800bc22 <USBD_LL_DevConnected>
}
 800f990:	bf00      	nop
 800f992:	3708      	adds	r7, #8
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fc f946 	bl	800bc38 <USBD_LL_DevDisconnected>
}
 800f9ac:	bf00      	nop
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}

0800f9b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d13c      	bne.n	800fa3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f9c4:	4a20      	ldr	r2, [pc, #128]	; (800fa48 <USBD_LL_Init+0x94>)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4a1e      	ldr	r2, [pc, #120]	; (800fa48 <USBD_LL_Init+0x94>)
 800f9d0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f9d4:	4b1c      	ldr	r3, [pc, #112]	; (800fa48 <USBD_LL_Init+0x94>)
 800f9d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f9da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f9dc:	4b1a      	ldr	r3, [pc, #104]	; (800fa48 <USBD_LL_Init+0x94>)
 800f9de:	2204      	movs	r2, #4
 800f9e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f9e2:	4b19      	ldr	r3, [pc, #100]	; (800fa48 <USBD_LL_Init+0x94>)
 800f9e4:	2202      	movs	r2, #2
 800f9e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f9e8:	4b17      	ldr	r3, [pc, #92]	; (800fa48 <USBD_LL_Init+0x94>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f9ee:	4b16      	ldr	r3, [pc, #88]	; (800fa48 <USBD_LL_Init+0x94>)
 800f9f0:	2202      	movs	r2, #2
 800f9f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f9f4:	4b14      	ldr	r3, [pc, #80]	; (800fa48 <USBD_LL_Init+0x94>)
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f9fa:	4b13      	ldr	r3, [pc, #76]	; (800fa48 <USBD_LL_Init+0x94>)
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fa00:	4b11      	ldr	r3, [pc, #68]	; (800fa48 <USBD_LL_Init+0x94>)
 800fa02:	2200      	movs	r2, #0
 800fa04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fa06:	4b10      	ldr	r3, [pc, #64]	; (800fa48 <USBD_LL_Init+0x94>)
 800fa08:	2200      	movs	r2, #0
 800fa0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fa0c:	4b0e      	ldr	r3, [pc, #56]	; (800fa48 <USBD_LL_Init+0x94>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fa12:	480d      	ldr	r0, [pc, #52]	; (800fa48 <USBD_LL_Init+0x94>)
 800fa14:	f7f6 fbeb 	bl	80061ee <HAL_PCD_Init>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d001      	beq.n	800fa22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fa1e:	f7f2 fa1b 	bl	8001e58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fa22:	2180      	movs	r1, #128	; 0x80
 800fa24:	4808      	ldr	r0, [pc, #32]	; (800fa48 <USBD_LL_Init+0x94>)
 800fa26:	f7f7 fe42 	bl	80076ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fa2a:	2240      	movs	r2, #64	; 0x40
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	4806      	ldr	r0, [pc, #24]	; (800fa48 <USBD_LL_Init+0x94>)
 800fa30:	f7f7 fdf6 	bl	8007620 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fa34:	2280      	movs	r2, #128	; 0x80
 800fa36:	2101      	movs	r1, #1
 800fa38:	4803      	ldr	r0, [pc, #12]	; (800fa48 <USBD_LL_Init+0x94>)
 800fa3a:	f7f7 fdf1 	bl	8007620 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fa3e:	2300      	movs	r3, #0
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	20001b64 	.word	0x20001b64

0800fa4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa54:	2300      	movs	r3, #0
 800fa56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7f6 fce0 	bl	8006428 <HAL_PCD_Start>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa6c:	7bfb      	ldrb	r3, [r7, #15]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 f942 	bl	800fcf8 <USBD_Get_USB_Status>
 800fa74:	4603      	mov	r3, r0
 800fa76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa78:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b084      	sub	sp, #16
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	4608      	mov	r0, r1
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	461a      	mov	r2, r3
 800fa90:	4603      	mov	r3, r0
 800fa92:	70fb      	strb	r3, [r7, #3]
 800fa94:	460b      	mov	r3, r1
 800fa96:	70bb      	strb	r3, [r7, #2]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faa0:	2300      	movs	r3, #0
 800faa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800faaa:	78bb      	ldrb	r3, [r7, #2]
 800faac:	883a      	ldrh	r2, [r7, #0]
 800faae:	78f9      	ldrb	r1, [r7, #3]
 800fab0:	f7f7 f9b1 	bl	8006e16 <HAL_PCD_EP_Open>
 800fab4:	4603      	mov	r3, r0
 800fab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fab8:	7bfb      	ldrb	r3, [r7, #15]
 800faba:	4618      	mov	r0, r3
 800fabc:	f000 f91c 	bl	800fcf8 <USBD_Get_USB_Status>
 800fac0:	4603      	mov	r3, r0
 800fac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fac4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3710      	adds	r7, #16
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b084      	sub	sp, #16
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	460b      	mov	r3, r1
 800fad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fada:	2300      	movs	r3, #0
 800fadc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fade:	2300      	movs	r3, #0
 800fae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fae8:	78fa      	ldrb	r2, [r7, #3]
 800faea:	4611      	mov	r1, r2
 800faec:	4618      	mov	r0, r3
 800faee:	f7f7 f9fa 	bl	8006ee6 <HAL_PCD_EP_Close>
 800faf2:	4603      	mov	r3, r0
 800faf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800faf6:	7bfb      	ldrb	r3, [r7, #15]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f000 f8fd 	bl	800fcf8 <USBD_Get_USB_Status>
 800fafe:	4603      	mov	r3, r0
 800fb00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb02:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	460b      	mov	r3, r1
 800fb16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb26:	78fa      	ldrb	r2, [r7, #3]
 800fb28:	4611      	mov	r1, r2
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7f7 fad2 	bl	80070d4 <HAL_PCD_EP_SetStall>
 800fb30:	4603      	mov	r3, r0
 800fb32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb34:	7bfb      	ldrb	r3, [r7, #15]
 800fb36:	4618      	mov	r0, r3
 800fb38:	f000 f8de 	bl	800fcf8 <USBD_Get_USB_Status>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb40:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb4a:	b580      	push	{r7, lr}
 800fb4c:	b084      	sub	sp, #16
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
 800fb52:	460b      	mov	r3, r1
 800fb54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb56:	2300      	movs	r3, #0
 800fb58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb64:	78fa      	ldrb	r2, [r7, #3]
 800fb66:	4611      	mov	r1, r2
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7f7 fb17 	bl	800719c <HAL_PCD_EP_ClrStall>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb72:	7bfb      	ldrb	r3, [r7, #15]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f000 f8bf 	bl	800fcf8 <USBD_Get_USB_Status>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	460b      	mov	r3, r1
 800fb92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fb9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	da0b      	bge.n	800fbbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fba4:	78fb      	ldrb	r3, [r7, #3]
 800fba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbaa:	68f9      	ldr	r1, [r7, #12]
 800fbac:	4613      	mov	r3, r2
 800fbae:	00db      	lsls	r3, r3, #3
 800fbb0:	4413      	add	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	440b      	add	r3, r1
 800fbb6:	333e      	adds	r3, #62	; 0x3e
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	e00b      	b.n	800fbd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fbbc:	78fb      	ldrb	r3, [r7, #3]
 800fbbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbc2:	68f9      	ldr	r1, [r7, #12]
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	00db      	lsls	r3, r3, #3
 800fbc8:	4413      	add	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	440b      	add	r3, r1
 800fbce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fbd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3714      	adds	r7, #20
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr

0800fbe0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	460b      	mov	r3, r1
 800fbea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbec:	2300      	movs	r3, #0
 800fbee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbfa:	78fa      	ldrb	r2, [r7, #3]
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7f7 f8e4 	bl	8006dcc <HAL_PCD_SetAddress>
 800fc04:	4603      	mov	r3, r0
 800fc06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc08:	7bfb      	ldrb	r3, [r7, #15]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f000 f874 	bl	800fcf8 <USBD_Get_USB_Status>
 800fc10:	4603      	mov	r3, r0
 800fc12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc14:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b086      	sub	sp, #24
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	60f8      	str	r0, [r7, #12]
 800fc26:	607a      	str	r2, [r7, #4]
 800fc28:	603b      	str	r3, [r7, #0]
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc32:	2300      	movs	r3, #0
 800fc34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc3c:	7af9      	ldrb	r1, [r7, #11]
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	f7f7 f9fd 	bl	8007040 <HAL_PCD_EP_Transmit>
 800fc46:	4603      	mov	r3, r0
 800fc48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc4a:	7dfb      	ldrb	r3, [r7, #23]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f000 f853 	bl	800fcf8 <USBD_Get_USB_Status>
 800fc52:	4603      	mov	r3, r0
 800fc54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc56:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3718      	adds	r7, #24
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	607a      	str	r2, [r7, #4]
 800fc6a:	603b      	str	r3, [r7, #0]
 800fc6c:	460b      	mov	r3, r1
 800fc6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc70:	2300      	movs	r3, #0
 800fc72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc74:	2300      	movs	r3, #0
 800fc76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc7e:	7af9      	ldrb	r1, [r7, #11]
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	f7f7 f979 	bl	8006f7a <HAL_PCD_EP_Receive>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc8c:	7dfb      	ldrb	r3, [r7, #23]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f000 f832 	bl	800fcf8 <USBD_Get_USB_Status>
 800fc94:	4603      	mov	r3, r0
 800fc96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc98:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3718      	adds	r7, #24
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b082      	sub	sp, #8
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
 800fcaa:	460b      	mov	r3, r1
 800fcac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcb4:	78fa      	ldrb	r2, [r7, #3]
 800fcb6:	4611      	mov	r1, r2
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7f7 f9a9 	bl	8007010 <HAL_PCD_EP_GetRxCount>
 800fcbe:	4603      	mov	r3, r0
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fcd0:	4b03      	ldr	r3, [pc, #12]	; (800fce0 <USBD_static_malloc+0x18>)
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	370c      	adds	r7, #12
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	20002070 	.word	0x20002070

0800fce4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]

}
 800fcec:	bf00      	nop
 800fcee:	370c      	adds	r7, #12
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b085      	sub	sp, #20
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	4603      	mov	r3, r0
 800fd00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd02:	2300      	movs	r3, #0
 800fd04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fd06:	79fb      	ldrb	r3, [r7, #7]
 800fd08:	2b03      	cmp	r3, #3
 800fd0a:	d817      	bhi.n	800fd3c <USBD_Get_USB_Status+0x44>
 800fd0c:	a201      	add	r2, pc, #4	; (adr r2, 800fd14 <USBD_Get_USB_Status+0x1c>)
 800fd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd12:	bf00      	nop
 800fd14:	0800fd25 	.word	0x0800fd25
 800fd18:	0800fd2b 	.word	0x0800fd2b
 800fd1c:	0800fd31 	.word	0x0800fd31
 800fd20:	0800fd37 	.word	0x0800fd37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fd24:	2300      	movs	r3, #0
 800fd26:	73fb      	strb	r3, [r7, #15]
    break;
 800fd28:	e00b      	b.n	800fd42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fd2a:	2303      	movs	r3, #3
 800fd2c:	73fb      	strb	r3, [r7, #15]
    break;
 800fd2e:	e008      	b.n	800fd42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fd30:	2301      	movs	r3, #1
 800fd32:	73fb      	strb	r3, [r7, #15]
    break;
 800fd34:	e005      	b.n	800fd42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fd36:	2303      	movs	r3, #3
 800fd38:	73fb      	strb	r3, [r7, #15]
    break;
 800fd3a:	e002      	b.n	800fd42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fd3c:	2303      	movs	r3, #3
 800fd3e:	73fb      	strb	r3, [r7, #15]
    break;
 800fd40:	bf00      	nop
  }
  return usb_status;
 800fd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3714      	adds	r7, #20
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <malloc>:
 800fd50:	4b02      	ldr	r3, [pc, #8]	; (800fd5c <malloc+0xc>)
 800fd52:	4601      	mov	r1, r0
 800fd54:	6818      	ldr	r0, [r3, #0]
 800fd56:	f000 b82b 	b.w	800fdb0 <_malloc_r>
 800fd5a:	bf00      	nop
 800fd5c:	20000178 	.word	0x20000178

0800fd60 <free>:
 800fd60:	4b02      	ldr	r3, [pc, #8]	; (800fd6c <free+0xc>)
 800fd62:	4601      	mov	r1, r0
 800fd64:	6818      	ldr	r0, [r3, #0]
 800fd66:	f001 bd4d 	b.w	8011804 <_free_r>
 800fd6a:	bf00      	nop
 800fd6c:	20000178 	.word	0x20000178

0800fd70 <sbrk_aligned>:
 800fd70:	b570      	push	{r4, r5, r6, lr}
 800fd72:	4e0e      	ldr	r6, [pc, #56]	; (800fdac <sbrk_aligned+0x3c>)
 800fd74:	460c      	mov	r4, r1
 800fd76:	6831      	ldr	r1, [r6, #0]
 800fd78:	4605      	mov	r5, r0
 800fd7a:	b911      	cbnz	r1, 800fd82 <sbrk_aligned+0x12>
 800fd7c:	f000 fe6c 	bl	8010a58 <_sbrk_r>
 800fd80:	6030      	str	r0, [r6, #0]
 800fd82:	4621      	mov	r1, r4
 800fd84:	4628      	mov	r0, r5
 800fd86:	f000 fe67 	bl	8010a58 <_sbrk_r>
 800fd8a:	1c43      	adds	r3, r0, #1
 800fd8c:	d00a      	beq.n	800fda4 <sbrk_aligned+0x34>
 800fd8e:	1cc4      	adds	r4, r0, #3
 800fd90:	f024 0403 	bic.w	r4, r4, #3
 800fd94:	42a0      	cmp	r0, r4
 800fd96:	d007      	beq.n	800fda8 <sbrk_aligned+0x38>
 800fd98:	1a21      	subs	r1, r4, r0
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f000 fe5c 	bl	8010a58 <_sbrk_r>
 800fda0:	3001      	adds	r0, #1
 800fda2:	d101      	bne.n	800fda8 <sbrk_aligned+0x38>
 800fda4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fda8:	4620      	mov	r0, r4
 800fdaa:	bd70      	pop	{r4, r5, r6, pc}
 800fdac:	20002294 	.word	0x20002294

0800fdb0 <_malloc_r>:
 800fdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdb4:	1ccd      	adds	r5, r1, #3
 800fdb6:	f025 0503 	bic.w	r5, r5, #3
 800fdba:	3508      	adds	r5, #8
 800fdbc:	2d0c      	cmp	r5, #12
 800fdbe:	bf38      	it	cc
 800fdc0:	250c      	movcc	r5, #12
 800fdc2:	2d00      	cmp	r5, #0
 800fdc4:	4607      	mov	r7, r0
 800fdc6:	db01      	blt.n	800fdcc <_malloc_r+0x1c>
 800fdc8:	42a9      	cmp	r1, r5
 800fdca:	d905      	bls.n	800fdd8 <_malloc_r+0x28>
 800fdcc:	230c      	movs	r3, #12
 800fdce:	603b      	str	r3, [r7, #0]
 800fdd0:	2600      	movs	r6, #0
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800feac <_malloc_r+0xfc>
 800fddc:	f000 f868 	bl	800feb0 <__malloc_lock>
 800fde0:	f8d8 3000 	ldr.w	r3, [r8]
 800fde4:	461c      	mov	r4, r3
 800fde6:	bb5c      	cbnz	r4, 800fe40 <_malloc_r+0x90>
 800fde8:	4629      	mov	r1, r5
 800fdea:	4638      	mov	r0, r7
 800fdec:	f7ff ffc0 	bl	800fd70 <sbrk_aligned>
 800fdf0:	1c43      	adds	r3, r0, #1
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	d155      	bne.n	800fea2 <_malloc_r+0xf2>
 800fdf6:	f8d8 4000 	ldr.w	r4, [r8]
 800fdfa:	4626      	mov	r6, r4
 800fdfc:	2e00      	cmp	r6, #0
 800fdfe:	d145      	bne.n	800fe8c <_malloc_r+0xdc>
 800fe00:	2c00      	cmp	r4, #0
 800fe02:	d048      	beq.n	800fe96 <_malloc_r+0xe6>
 800fe04:	6823      	ldr	r3, [r4, #0]
 800fe06:	4631      	mov	r1, r6
 800fe08:	4638      	mov	r0, r7
 800fe0a:	eb04 0903 	add.w	r9, r4, r3
 800fe0e:	f000 fe23 	bl	8010a58 <_sbrk_r>
 800fe12:	4581      	cmp	r9, r0
 800fe14:	d13f      	bne.n	800fe96 <_malloc_r+0xe6>
 800fe16:	6821      	ldr	r1, [r4, #0]
 800fe18:	1a6d      	subs	r5, r5, r1
 800fe1a:	4629      	mov	r1, r5
 800fe1c:	4638      	mov	r0, r7
 800fe1e:	f7ff ffa7 	bl	800fd70 <sbrk_aligned>
 800fe22:	3001      	adds	r0, #1
 800fe24:	d037      	beq.n	800fe96 <_malloc_r+0xe6>
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	442b      	add	r3, r5
 800fe2a:	6023      	str	r3, [r4, #0]
 800fe2c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d038      	beq.n	800fea6 <_malloc_r+0xf6>
 800fe34:	685a      	ldr	r2, [r3, #4]
 800fe36:	42a2      	cmp	r2, r4
 800fe38:	d12b      	bne.n	800fe92 <_malloc_r+0xe2>
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	605a      	str	r2, [r3, #4]
 800fe3e:	e00f      	b.n	800fe60 <_malloc_r+0xb0>
 800fe40:	6822      	ldr	r2, [r4, #0]
 800fe42:	1b52      	subs	r2, r2, r5
 800fe44:	d41f      	bmi.n	800fe86 <_malloc_r+0xd6>
 800fe46:	2a0b      	cmp	r2, #11
 800fe48:	d917      	bls.n	800fe7a <_malloc_r+0xca>
 800fe4a:	1961      	adds	r1, r4, r5
 800fe4c:	42a3      	cmp	r3, r4
 800fe4e:	6025      	str	r5, [r4, #0]
 800fe50:	bf18      	it	ne
 800fe52:	6059      	strne	r1, [r3, #4]
 800fe54:	6863      	ldr	r3, [r4, #4]
 800fe56:	bf08      	it	eq
 800fe58:	f8c8 1000 	streq.w	r1, [r8]
 800fe5c:	5162      	str	r2, [r4, r5]
 800fe5e:	604b      	str	r3, [r1, #4]
 800fe60:	4638      	mov	r0, r7
 800fe62:	f104 060b 	add.w	r6, r4, #11
 800fe66:	f000 f829 	bl	800febc <__malloc_unlock>
 800fe6a:	f026 0607 	bic.w	r6, r6, #7
 800fe6e:	1d23      	adds	r3, r4, #4
 800fe70:	1af2      	subs	r2, r6, r3
 800fe72:	d0ae      	beq.n	800fdd2 <_malloc_r+0x22>
 800fe74:	1b9b      	subs	r3, r3, r6
 800fe76:	50a3      	str	r3, [r4, r2]
 800fe78:	e7ab      	b.n	800fdd2 <_malloc_r+0x22>
 800fe7a:	42a3      	cmp	r3, r4
 800fe7c:	6862      	ldr	r2, [r4, #4]
 800fe7e:	d1dd      	bne.n	800fe3c <_malloc_r+0x8c>
 800fe80:	f8c8 2000 	str.w	r2, [r8]
 800fe84:	e7ec      	b.n	800fe60 <_malloc_r+0xb0>
 800fe86:	4623      	mov	r3, r4
 800fe88:	6864      	ldr	r4, [r4, #4]
 800fe8a:	e7ac      	b.n	800fde6 <_malloc_r+0x36>
 800fe8c:	4634      	mov	r4, r6
 800fe8e:	6876      	ldr	r6, [r6, #4]
 800fe90:	e7b4      	b.n	800fdfc <_malloc_r+0x4c>
 800fe92:	4613      	mov	r3, r2
 800fe94:	e7cc      	b.n	800fe30 <_malloc_r+0x80>
 800fe96:	230c      	movs	r3, #12
 800fe98:	603b      	str	r3, [r7, #0]
 800fe9a:	4638      	mov	r0, r7
 800fe9c:	f000 f80e 	bl	800febc <__malloc_unlock>
 800fea0:	e797      	b.n	800fdd2 <_malloc_r+0x22>
 800fea2:	6025      	str	r5, [r4, #0]
 800fea4:	e7dc      	b.n	800fe60 <_malloc_r+0xb0>
 800fea6:	605b      	str	r3, [r3, #4]
 800fea8:	deff      	udf	#255	; 0xff
 800feaa:	bf00      	nop
 800feac:	20002290 	.word	0x20002290

0800feb0 <__malloc_lock>:
 800feb0:	4801      	ldr	r0, [pc, #4]	; (800feb8 <__malloc_lock+0x8>)
 800feb2:	f000 be1d 	b.w	8010af0 <__retarget_lock_acquire_recursive>
 800feb6:	bf00      	nop
 800feb8:	200023d8 	.word	0x200023d8

0800febc <__malloc_unlock>:
 800febc:	4801      	ldr	r0, [pc, #4]	; (800fec4 <__malloc_unlock+0x8>)
 800febe:	f000 be18 	b.w	8010af2 <__retarget_lock_release_recursive>
 800fec2:	bf00      	nop
 800fec4:	200023d8 	.word	0x200023d8

0800fec8 <__cvt>:
 800fec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fecc:	ec55 4b10 	vmov	r4, r5, d0
 800fed0:	2d00      	cmp	r5, #0
 800fed2:	460e      	mov	r6, r1
 800fed4:	4619      	mov	r1, r3
 800fed6:	462b      	mov	r3, r5
 800fed8:	bfbb      	ittet	lt
 800feda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fede:	461d      	movlt	r5, r3
 800fee0:	2300      	movge	r3, #0
 800fee2:	232d      	movlt	r3, #45	; 0x2d
 800fee4:	700b      	strb	r3, [r1, #0]
 800fee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fee8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800feec:	4691      	mov	r9, r2
 800feee:	f023 0820 	bic.w	r8, r3, #32
 800fef2:	bfbc      	itt	lt
 800fef4:	4622      	movlt	r2, r4
 800fef6:	4614      	movlt	r4, r2
 800fef8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fefc:	d005      	beq.n	800ff0a <__cvt+0x42>
 800fefe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ff02:	d100      	bne.n	800ff06 <__cvt+0x3e>
 800ff04:	3601      	adds	r6, #1
 800ff06:	2102      	movs	r1, #2
 800ff08:	e000      	b.n	800ff0c <__cvt+0x44>
 800ff0a:	2103      	movs	r1, #3
 800ff0c:	ab03      	add	r3, sp, #12
 800ff0e:	9301      	str	r3, [sp, #4]
 800ff10:	ab02      	add	r3, sp, #8
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	ec45 4b10 	vmov	d0, r4, r5
 800ff18:	4653      	mov	r3, sl
 800ff1a:	4632      	mov	r2, r6
 800ff1c:	f000 fe80 	bl	8010c20 <_dtoa_r>
 800ff20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ff24:	4607      	mov	r7, r0
 800ff26:	d102      	bne.n	800ff2e <__cvt+0x66>
 800ff28:	f019 0f01 	tst.w	r9, #1
 800ff2c:	d022      	beq.n	800ff74 <__cvt+0xac>
 800ff2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff32:	eb07 0906 	add.w	r9, r7, r6
 800ff36:	d110      	bne.n	800ff5a <__cvt+0x92>
 800ff38:	783b      	ldrb	r3, [r7, #0]
 800ff3a:	2b30      	cmp	r3, #48	; 0x30
 800ff3c:	d10a      	bne.n	800ff54 <__cvt+0x8c>
 800ff3e:	2200      	movs	r2, #0
 800ff40:	2300      	movs	r3, #0
 800ff42:	4620      	mov	r0, r4
 800ff44:	4629      	mov	r1, r5
 800ff46:	f7f0 fdc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff4a:	b918      	cbnz	r0, 800ff54 <__cvt+0x8c>
 800ff4c:	f1c6 0601 	rsb	r6, r6, #1
 800ff50:	f8ca 6000 	str.w	r6, [sl]
 800ff54:	f8da 3000 	ldr.w	r3, [sl]
 800ff58:	4499      	add	r9, r3
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	4620      	mov	r0, r4
 800ff60:	4629      	mov	r1, r5
 800ff62:	f7f0 fdb9 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff66:	b108      	cbz	r0, 800ff6c <__cvt+0xa4>
 800ff68:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff6c:	2230      	movs	r2, #48	; 0x30
 800ff6e:	9b03      	ldr	r3, [sp, #12]
 800ff70:	454b      	cmp	r3, r9
 800ff72:	d307      	bcc.n	800ff84 <__cvt+0xbc>
 800ff74:	9b03      	ldr	r3, [sp, #12]
 800ff76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff78:	1bdb      	subs	r3, r3, r7
 800ff7a:	4638      	mov	r0, r7
 800ff7c:	6013      	str	r3, [r2, #0]
 800ff7e:	b004      	add	sp, #16
 800ff80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff84:	1c59      	adds	r1, r3, #1
 800ff86:	9103      	str	r1, [sp, #12]
 800ff88:	701a      	strb	r2, [r3, #0]
 800ff8a:	e7f0      	b.n	800ff6e <__cvt+0xa6>

0800ff8c <__exponent>:
 800ff8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2900      	cmp	r1, #0
 800ff92:	bfb8      	it	lt
 800ff94:	4249      	neglt	r1, r1
 800ff96:	f803 2b02 	strb.w	r2, [r3], #2
 800ff9a:	bfb4      	ite	lt
 800ff9c:	222d      	movlt	r2, #45	; 0x2d
 800ff9e:	222b      	movge	r2, #43	; 0x2b
 800ffa0:	2909      	cmp	r1, #9
 800ffa2:	7042      	strb	r2, [r0, #1]
 800ffa4:	dd2a      	ble.n	800fffc <__exponent+0x70>
 800ffa6:	f10d 0207 	add.w	r2, sp, #7
 800ffaa:	4617      	mov	r7, r2
 800ffac:	260a      	movs	r6, #10
 800ffae:	4694      	mov	ip, r2
 800ffb0:	fb91 f5f6 	sdiv	r5, r1, r6
 800ffb4:	fb06 1415 	mls	r4, r6, r5, r1
 800ffb8:	3430      	adds	r4, #48	; 0x30
 800ffba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	2c63      	cmp	r4, #99	; 0x63
 800ffc2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	dcf1      	bgt.n	800ffae <__exponent+0x22>
 800ffca:	3130      	adds	r1, #48	; 0x30
 800ffcc:	f1ac 0402 	sub.w	r4, ip, #2
 800ffd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ffd4:	1c41      	adds	r1, r0, #1
 800ffd6:	4622      	mov	r2, r4
 800ffd8:	42ba      	cmp	r2, r7
 800ffda:	d30a      	bcc.n	800fff2 <__exponent+0x66>
 800ffdc:	f10d 0209 	add.w	r2, sp, #9
 800ffe0:	eba2 020c 	sub.w	r2, r2, ip
 800ffe4:	42bc      	cmp	r4, r7
 800ffe6:	bf88      	it	hi
 800ffe8:	2200      	movhi	r2, #0
 800ffea:	4413      	add	r3, r2
 800ffec:	1a18      	subs	r0, r3, r0
 800ffee:	b003      	add	sp, #12
 800fff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fff2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fff6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800fffa:	e7ed      	b.n	800ffd8 <__exponent+0x4c>
 800fffc:	2330      	movs	r3, #48	; 0x30
 800fffe:	3130      	adds	r1, #48	; 0x30
 8010000:	7083      	strb	r3, [r0, #2]
 8010002:	70c1      	strb	r1, [r0, #3]
 8010004:	1d03      	adds	r3, r0, #4
 8010006:	e7f1      	b.n	800ffec <__exponent+0x60>

08010008 <_printf_float>:
 8010008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	ed2d 8b02 	vpush	{d8}
 8010010:	b08d      	sub	sp, #52	; 0x34
 8010012:	460c      	mov	r4, r1
 8010014:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010018:	4616      	mov	r6, r2
 801001a:	461f      	mov	r7, r3
 801001c:	4605      	mov	r5, r0
 801001e:	f000 fce3 	bl	80109e8 <_localeconv_r>
 8010022:	f8d0 a000 	ldr.w	sl, [r0]
 8010026:	4650      	mov	r0, sl
 8010028:	f7f0 f92a 	bl	8000280 <strlen>
 801002c:	2300      	movs	r3, #0
 801002e:	930a      	str	r3, [sp, #40]	; 0x28
 8010030:	6823      	ldr	r3, [r4, #0]
 8010032:	9305      	str	r3, [sp, #20]
 8010034:	f8d8 3000 	ldr.w	r3, [r8]
 8010038:	f894 b018 	ldrb.w	fp, [r4, #24]
 801003c:	3307      	adds	r3, #7
 801003e:	f023 0307 	bic.w	r3, r3, #7
 8010042:	f103 0208 	add.w	r2, r3, #8
 8010046:	f8c8 2000 	str.w	r2, [r8]
 801004a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801004e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010052:	9307      	str	r3, [sp, #28]
 8010054:	f8cd 8018 	str.w	r8, [sp, #24]
 8010058:	ee08 0a10 	vmov	s16, r0
 801005c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010064:	4b9e      	ldr	r3, [pc, #632]	; (80102e0 <_printf_float+0x2d8>)
 8010066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801006a:	f7f0 fd67 	bl	8000b3c <__aeabi_dcmpun>
 801006e:	bb88      	cbnz	r0, 80100d4 <_printf_float+0xcc>
 8010070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010074:	4b9a      	ldr	r3, [pc, #616]	; (80102e0 <_printf_float+0x2d8>)
 8010076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801007a:	f7f0 fd41 	bl	8000b00 <__aeabi_dcmple>
 801007e:	bb48      	cbnz	r0, 80100d4 <_printf_float+0xcc>
 8010080:	2200      	movs	r2, #0
 8010082:	2300      	movs	r3, #0
 8010084:	4640      	mov	r0, r8
 8010086:	4649      	mov	r1, r9
 8010088:	f7f0 fd30 	bl	8000aec <__aeabi_dcmplt>
 801008c:	b110      	cbz	r0, 8010094 <_printf_float+0x8c>
 801008e:	232d      	movs	r3, #45	; 0x2d
 8010090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010094:	4a93      	ldr	r2, [pc, #588]	; (80102e4 <_printf_float+0x2dc>)
 8010096:	4b94      	ldr	r3, [pc, #592]	; (80102e8 <_printf_float+0x2e0>)
 8010098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801009c:	bf94      	ite	ls
 801009e:	4690      	movls	r8, r2
 80100a0:	4698      	movhi	r8, r3
 80100a2:	2303      	movs	r3, #3
 80100a4:	6123      	str	r3, [r4, #16]
 80100a6:	9b05      	ldr	r3, [sp, #20]
 80100a8:	f023 0304 	bic.w	r3, r3, #4
 80100ac:	6023      	str	r3, [r4, #0]
 80100ae:	f04f 0900 	mov.w	r9, #0
 80100b2:	9700      	str	r7, [sp, #0]
 80100b4:	4633      	mov	r3, r6
 80100b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80100b8:	4621      	mov	r1, r4
 80100ba:	4628      	mov	r0, r5
 80100bc:	f000 f9da 	bl	8010474 <_printf_common>
 80100c0:	3001      	adds	r0, #1
 80100c2:	f040 8090 	bne.w	80101e6 <_printf_float+0x1de>
 80100c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100ca:	b00d      	add	sp, #52	; 0x34
 80100cc:	ecbd 8b02 	vpop	{d8}
 80100d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d4:	4642      	mov	r2, r8
 80100d6:	464b      	mov	r3, r9
 80100d8:	4640      	mov	r0, r8
 80100da:	4649      	mov	r1, r9
 80100dc:	f7f0 fd2e 	bl	8000b3c <__aeabi_dcmpun>
 80100e0:	b140      	cbz	r0, 80100f4 <_printf_float+0xec>
 80100e2:	464b      	mov	r3, r9
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	bfbc      	itt	lt
 80100e8:	232d      	movlt	r3, #45	; 0x2d
 80100ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80100ee:	4a7f      	ldr	r2, [pc, #508]	; (80102ec <_printf_float+0x2e4>)
 80100f0:	4b7f      	ldr	r3, [pc, #508]	; (80102f0 <_printf_float+0x2e8>)
 80100f2:	e7d1      	b.n	8010098 <_printf_float+0x90>
 80100f4:	6863      	ldr	r3, [r4, #4]
 80100f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80100fa:	9206      	str	r2, [sp, #24]
 80100fc:	1c5a      	adds	r2, r3, #1
 80100fe:	d13f      	bne.n	8010180 <_printf_float+0x178>
 8010100:	2306      	movs	r3, #6
 8010102:	6063      	str	r3, [r4, #4]
 8010104:	9b05      	ldr	r3, [sp, #20]
 8010106:	6861      	ldr	r1, [r4, #4]
 8010108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801010c:	2300      	movs	r3, #0
 801010e:	9303      	str	r3, [sp, #12]
 8010110:	ab0a      	add	r3, sp, #40	; 0x28
 8010112:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010116:	ab09      	add	r3, sp, #36	; 0x24
 8010118:	ec49 8b10 	vmov	d0, r8, r9
 801011c:	9300      	str	r3, [sp, #0]
 801011e:	6022      	str	r2, [r4, #0]
 8010120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010124:	4628      	mov	r0, r5
 8010126:	f7ff fecf 	bl	800fec8 <__cvt>
 801012a:	9b06      	ldr	r3, [sp, #24]
 801012c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801012e:	2b47      	cmp	r3, #71	; 0x47
 8010130:	4680      	mov	r8, r0
 8010132:	d108      	bne.n	8010146 <_printf_float+0x13e>
 8010134:	1cc8      	adds	r0, r1, #3
 8010136:	db02      	blt.n	801013e <_printf_float+0x136>
 8010138:	6863      	ldr	r3, [r4, #4]
 801013a:	4299      	cmp	r1, r3
 801013c:	dd41      	ble.n	80101c2 <_printf_float+0x1ba>
 801013e:	f1ab 0302 	sub.w	r3, fp, #2
 8010142:	fa5f fb83 	uxtb.w	fp, r3
 8010146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801014a:	d820      	bhi.n	801018e <_printf_float+0x186>
 801014c:	3901      	subs	r1, #1
 801014e:	465a      	mov	r2, fp
 8010150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010154:	9109      	str	r1, [sp, #36]	; 0x24
 8010156:	f7ff ff19 	bl	800ff8c <__exponent>
 801015a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801015c:	1813      	adds	r3, r2, r0
 801015e:	2a01      	cmp	r2, #1
 8010160:	4681      	mov	r9, r0
 8010162:	6123      	str	r3, [r4, #16]
 8010164:	dc02      	bgt.n	801016c <_printf_float+0x164>
 8010166:	6822      	ldr	r2, [r4, #0]
 8010168:	07d2      	lsls	r2, r2, #31
 801016a:	d501      	bpl.n	8010170 <_printf_float+0x168>
 801016c:	3301      	adds	r3, #1
 801016e:	6123      	str	r3, [r4, #16]
 8010170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010174:	2b00      	cmp	r3, #0
 8010176:	d09c      	beq.n	80100b2 <_printf_float+0xaa>
 8010178:	232d      	movs	r3, #45	; 0x2d
 801017a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801017e:	e798      	b.n	80100b2 <_printf_float+0xaa>
 8010180:	9a06      	ldr	r2, [sp, #24]
 8010182:	2a47      	cmp	r2, #71	; 0x47
 8010184:	d1be      	bne.n	8010104 <_printf_float+0xfc>
 8010186:	2b00      	cmp	r3, #0
 8010188:	d1bc      	bne.n	8010104 <_printf_float+0xfc>
 801018a:	2301      	movs	r3, #1
 801018c:	e7b9      	b.n	8010102 <_printf_float+0xfa>
 801018e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010192:	d118      	bne.n	80101c6 <_printf_float+0x1be>
 8010194:	2900      	cmp	r1, #0
 8010196:	6863      	ldr	r3, [r4, #4]
 8010198:	dd0b      	ble.n	80101b2 <_printf_float+0x1aa>
 801019a:	6121      	str	r1, [r4, #16]
 801019c:	b913      	cbnz	r3, 80101a4 <_printf_float+0x19c>
 801019e:	6822      	ldr	r2, [r4, #0]
 80101a0:	07d0      	lsls	r0, r2, #31
 80101a2:	d502      	bpl.n	80101aa <_printf_float+0x1a2>
 80101a4:	3301      	adds	r3, #1
 80101a6:	440b      	add	r3, r1
 80101a8:	6123      	str	r3, [r4, #16]
 80101aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80101ac:	f04f 0900 	mov.w	r9, #0
 80101b0:	e7de      	b.n	8010170 <_printf_float+0x168>
 80101b2:	b913      	cbnz	r3, 80101ba <_printf_float+0x1b2>
 80101b4:	6822      	ldr	r2, [r4, #0]
 80101b6:	07d2      	lsls	r2, r2, #31
 80101b8:	d501      	bpl.n	80101be <_printf_float+0x1b6>
 80101ba:	3302      	adds	r3, #2
 80101bc:	e7f4      	b.n	80101a8 <_printf_float+0x1a0>
 80101be:	2301      	movs	r3, #1
 80101c0:	e7f2      	b.n	80101a8 <_printf_float+0x1a0>
 80101c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80101c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101c8:	4299      	cmp	r1, r3
 80101ca:	db05      	blt.n	80101d8 <_printf_float+0x1d0>
 80101cc:	6823      	ldr	r3, [r4, #0]
 80101ce:	6121      	str	r1, [r4, #16]
 80101d0:	07d8      	lsls	r0, r3, #31
 80101d2:	d5ea      	bpl.n	80101aa <_printf_float+0x1a2>
 80101d4:	1c4b      	adds	r3, r1, #1
 80101d6:	e7e7      	b.n	80101a8 <_printf_float+0x1a0>
 80101d8:	2900      	cmp	r1, #0
 80101da:	bfd4      	ite	le
 80101dc:	f1c1 0202 	rsble	r2, r1, #2
 80101e0:	2201      	movgt	r2, #1
 80101e2:	4413      	add	r3, r2
 80101e4:	e7e0      	b.n	80101a8 <_printf_float+0x1a0>
 80101e6:	6823      	ldr	r3, [r4, #0]
 80101e8:	055a      	lsls	r2, r3, #21
 80101ea:	d407      	bmi.n	80101fc <_printf_float+0x1f4>
 80101ec:	6923      	ldr	r3, [r4, #16]
 80101ee:	4642      	mov	r2, r8
 80101f0:	4631      	mov	r1, r6
 80101f2:	4628      	mov	r0, r5
 80101f4:	47b8      	blx	r7
 80101f6:	3001      	adds	r0, #1
 80101f8:	d12c      	bne.n	8010254 <_printf_float+0x24c>
 80101fa:	e764      	b.n	80100c6 <_printf_float+0xbe>
 80101fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010200:	f240 80e0 	bls.w	80103c4 <_printf_float+0x3bc>
 8010204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010208:	2200      	movs	r2, #0
 801020a:	2300      	movs	r3, #0
 801020c:	f7f0 fc64 	bl	8000ad8 <__aeabi_dcmpeq>
 8010210:	2800      	cmp	r0, #0
 8010212:	d034      	beq.n	801027e <_printf_float+0x276>
 8010214:	4a37      	ldr	r2, [pc, #220]	; (80102f4 <_printf_float+0x2ec>)
 8010216:	2301      	movs	r3, #1
 8010218:	4631      	mov	r1, r6
 801021a:	4628      	mov	r0, r5
 801021c:	47b8      	blx	r7
 801021e:	3001      	adds	r0, #1
 8010220:	f43f af51 	beq.w	80100c6 <_printf_float+0xbe>
 8010224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010228:	429a      	cmp	r2, r3
 801022a:	db02      	blt.n	8010232 <_printf_float+0x22a>
 801022c:	6823      	ldr	r3, [r4, #0]
 801022e:	07d8      	lsls	r0, r3, #31
 8010230:	d510      	bpl.n	8010254 <_printf_float+0x24c>
 8010232:	ee18 3a10 	vmov	r3, s16
 8010236:	4652      	mov	r2, sl
 8010238:	4631      	mov	r1, r6
 801023a:	4628      	mov	r0, r5
 801023c:	47b8      	blx	r7
 801023e:	3001      	adds	r0, #1
 8010240:	f43f af41 	beq.w	80100c6 <_printf_float+0xbe>
 8010244:	f04f 0800 	mov.w	r8, #0
 8010248:	f104 091a 	add.w	r9, r4, #26
 801024c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801024e:	3b01      	subs	r3, #1
 8010250:	4543      	cmp	r3, r8
 8010252:	dc09      	bgt.n	8010268 <_printf_float+0x260>
 8010254:	6823      	ldr	r3, [r4, #0]
 8010256:	079b      	lsls	r3, r3, #30
 8010258:	f100 8107 	bmi.w	801046a <_printf_float+0x462>
 801025c:	68e0      	ldr	r0, [r4, #12]
 801025e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010260:	4298      	cmp	r0, r3
 8010262:	bfb8      	it	lt
 8010264:	4618      	movlt	r0, r3
 8010266:	e730      	b.n	80100ca <_printf_float+0xc2>
 8010268:	2301      	movs	r3, #1
 801026a:	464a      	mov	r2, r9
 801026c:	4631      	mov	r1, r6
 801026e:	4628      	mov	r0, r5
 8010270:	47b8      	blx	r7
 8010272:	3001      	adds	r0, #1
 8010274:	f43f af27 	beq.w	80100c6 <_printf_float+0xbe>
 8010278:	f108 0801 	add.w	r8, r8, #1
 801027c:	e7e6      	b.n	801024c <_printf_float+0x244>
 801027e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010280:	2b00      	cmp	r3, #0
 8010282:	dc39      	bgt.n	80102f8 <_printf_float+0x2f0>
 8010284:	4a1b      	ldr	r2, [pc, #108]	; (80102f4 <_printf_float+0x2ec>)
 8010286:	2301      	movs	r3, #1
 8010288:	4631      	mov	r1, r6
 801028a:	4628      	mov	r0, r5
 801028c:	47b8      	blx	r7
 801028e:	3001      	adds	r0, #1
 8010290:	f43f af19 	beq.w	80100c6 <_printf_float+0xbe>
 8010294:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010298:	4313      	orrs	r3, r2
 801029a:	d102      	bne.n	80102a2 <_printf_float+0x29a>
 801029c:	6823      	ldr	r3, [r4, #0]
 801029e:	07d9      	lsls	r1, r3, #31
 80102a0:	d5d8      	bpl.n	8010254 <_printf_float+0x24c>
 80102a2:	ee18 3a10 	vmov	r3, s16
 80102a6:	4652      	mov	r2, sl
 80102a8:	4631      	mov	r1, r6
 80102aa:	4628      	mov	r0, r5
 80102ac:	47b8      	blx	r7
 80102ae:	3001      	adds	r0, #1
 80102b0:	f43f af09 	beq.w	80100c6 <_printf_float+0xbe>
 80102b4:	f04f 0900 	mov.w	r9, #0
 80102b8:	f104 0a1a 	add.w	sl, r4, #26
 80102bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102be:	425b      	negs	r3, r3
 80102c0:	454b      	cmp	r3, r9
 80102c2:	dc01      	bgt.n	80102c8 <_printf_float+0x2c0>
 80102c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102c6:	e792      	b.n	80101ee <_printf_float+0x1e6>
 80102c8:	2301      	movs	r3, #1
 80102ca:	4652      	mov	r2, sl
 80102cc:	4631      	mov	r1, r6
 80102ce:	4628      	mov	r0, r5
 80102d0:	47b8      	blx	r7
 80102d2:	3001      	adds	r0, #1
 80102d4:	f43f aef7 	beq.w	80100c6 <_printf_float+0xbe>
 80102d8:	f109 0901 	add.w	r9, r9, #1
 80102dc:	e7ee      	b.n	80102bc <_printf_float+0x2b4>
 80102de:	bf00      	nop
 80102e0:	7fefffff 	.word	0x7fefffff
 80102e4:	080141d4 	.word	0x080141d4
 80102e8:	080141d8 	.word	0x080141d8
 80102ec:	080141dc 	.word	0x080141dc
 80102f0:	080141e0 	.word	0x080141e0
 80102f4:	080141e4 	.word	0x080141e4
 80102f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80102fc:	429a      	cmp	r2, r3
 80102fe:	bfa8      	it	ge
 8010300:	461a      	movge	r2, r3
 8010302:	2a00      	cmp	r2, #0
 8010304:	4691      	mov	r9, r2
 8010306:	dc37      	bgt.n	8010378 <_printf_float+0x370>
 8010308:	f04f 0b00 	mov.w	fp, #0
 801030c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010310:	f104 021a 	add.w	r2, r4, #26
 8010314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010316:	9305      	str	r3, [sp, #20]
 8010318:	eba3 0309 	sub.w	r3, r3, r9
 801031c:	455b      	cmp	r3, fp
 801031e:	dc33      	bgt.n	8010388 <_printf_float+0x380>
 8010320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010324:	429a      	cmp	r2, r3
 8010326:	db3b      	blt.n	80103a0 <_printf_float+0x398>
 8010328:	6823      	ldr	r3, [r4, #0]
 801032a:	07da      	lsls	r2, r3, #31
 801032c:	d438      	bmi.n	80103a0 <_printf_float+0x398>
 801032e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010332:	eba2 0903 	sub.w	r9, r2, r3
 8010336:	9b05      	ldr	r3, [sp, #20]
 8010338:	1ad2      	subs	r2, r2, r3
 801033a:	4591      	cmp	r9, r2
 801033c:	bfa8      	it	ge
 801033e:	4691      	movge	r9, r2
 8010340:	f1b9 0f00 	cmp.w	r9, #0
 8010344:	dc35      	bgt.n	80103b2 <_printf_float+0x3aa>
 8010346:	f04f 0800 	mov.w	r8, #0
 801034a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801034e:	f104 0a1a 	add.w	sl, r4, #26
 8010352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010356:	1a9b      	subs	r3, r3, r2
 8010358:	eba3 0309 	sub.w	r3, r3, r9
 801035c:	4543      	cmp	r3, r8
 801035e:	f77f af79 	ble.w	8010254 <_printf_float+0x24c>
 8010362:	2301      	movs	r3, #1
 8010364:	4652      	mov	r2, sl
 8010366:	4631      	mov	r1, r6
 8010368:	4628      	mov	r0, r5
 801036a:	47b8      	blx	r7
 801036c:	3001      	adds	r0, #1
 801036e:	f43f aeaa 	beq.w	80100c6 <_printf_float+0xbe>
 8010372:	f108 0801 	add.w	r8, r8, #1
 8010376:	e7ec      	b.n	8010352 <_printf_float+0x34a>
 8010378:	4613      	mov	r3, r2
 801037a:	4631      	mov	r1, r6
 801037c:	4642      	mov	r2, r8
 801037e:	4628      	mov	r0, r5
 8010380:	47b8      	blx	r7
 8010382:	3001      	adds	r0, #1
 8010384:	d1c0      	bne.n	8010308 <_printf_float+0x300>
 8010386:	e69e      	b.n	80100c6 <_printf_float+0xbe>
 8010388:	2301      	movs	r3, #1
 801038a:	4631      	mov	r1, r6
 801038c:	4628      	mov	r0, r5
 801038e:	9205      	str	r2, [sp, #20]
 8010390:	47b8      	blx	r7
 8010392:	3001      	adds	r0, #1
 8010394:	f43f ae97 	beq.w	80100c6 <_printf_float+0xbe>
 8010398:	9a05      	ldr	r2, [sp, #20]
 801039a:	f10b 0b01 	add.w	fp, fp, #1
 801039e:	e7b9      	b.n	8010314 <_printf_float+0x30c>
 80103a0:	ee18 3a10 	vmov	r3, s16
 80103a4:	4652      	mov	r2, sl
 80103a6:	4631      	mov	r1, r6
 80103a8:	4628      	mov	r0, r5
 80103aa:	47b8      	blx	r7
 80103ac:	3001      	adds	r0, #1
 80103ae:	d1be      	bne.n	801032e <_printf_float+0x326>
 80103b0:	e689      	b.n	80100c6 <_printf_float+0xbe>
 80103b2:	9a05      	ldr	r2, [sp, #20]
 80103b4:	464b      	mov	r3, r9
 80103b6:	4442      	add	r2, r8
 80103b8:	4631      	mov	r1, r6
 80103ba:	4628      	mov	r0, r5
 80103bc:	47b8      	blx	r7
 80103be:	3001      	adds	r0, #1
 80103c0:	d1c1      	bne.n	8010346 <_printf_float+0x33e>
 80103c2:	e680      	b.n	80100c6 <_printf_float+0xbe>
 80103c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103c6:	2a01      	cmp	r2, #1
 80103c8:	dc01      	bgt.n	80103ce <_printf_float+0x3c6>
 80103ca:	07db      	lsls	r3, r3, #31
 80103cc:	d53a      	bpl.n	8010444 <_printf_float+0x43c>
 80103ce:	2301      	movs	r3, #1
 80103d0:	4642      	mov	r2, r8
 80103d2:	4631      	mov	r1, r6
 80103d4:	4628      	mov	r0, r5
 80103d6:	47b8      	blx	r7
 80103d8:	3001      	adds	r0, #1
 80103da:	f43f ae74 	beq.w	80100c6 <_printf_float+0xbe>
 80103de:	ee18 3a10 	vmov	r3, s16
 80103e2:	4652      	mov	r2, sl
 80103e4:	4631      	mov	r1, r6
 80103e6:	4628      	mov	r0, r5
 80103e8:	47b8      	blx	r7
 80103ea:	3001      	adds	r0, #1
 80103ec:	f43f ae6b 	beq.w	80100c6 <_printf_float+0xbe>
 80103f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80103f4:	2200      	movs	r2, #0
 80103f6:	2300      	movs	r3, #0
 80103f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80103fc:	f7f0 fb6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010400:	b9d8      	cbnz	r0, 801043a <_printf_float+0x432>
 8010402:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010406:	f108 0201 	add.w	r2, r8, #1
 801040a:	4631      	mov	r1, r6
 801040c:	4628      	mov	r0, r5
 801040e:	47b8      	blx	r7
 8010410:	3001      	adds	r0, #1
 8010412:	d10e      	bne.n	8010432 <_printf_float+0x42a>
 8010414:	e657      	b.n	80100c6 <_printf_float+0xbe>
 8010416:	2301      	movs	r3, #1
 8010418:	4652      	mov	r2, sl
 801041a:	4631      	mov	r1, r6
 801041c:	4628      	mov	r0, r5
 801041e:	47b8      	blx	r7
 8010420:	3001      	adds	r0, #1
 8010422:	f43f ae50 	beq.w	80100c6 <_printf_float+0xbe>
 8010426:	f108 0801 	add.w	r8, r8, #1
 801042a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801042c:	3b01      	subs	r3, #1
 801042e:	4543      	cmp	r3, r8
 8010430:	dcf1      	bgt.n	8010416 <_printf_float+0x40e>
 8010432:	464b      	mov	r3, r9
 8010434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010438:	e6da      	b.n	80101f0 <_printf_float+0x1e8>
 801043a:	f04f 0800 	mov.w	r8, #0
 801043e:	f104 0a1a 	add.w	sl, r4, #26
 8010442:	e7f2      	b.n	801042a <_printf_float+0x422>
 8010444:	2301      	movs	r3, #1
 8010446:	4642      	mov	r2, r8
 8010448:	e7df      	b.n	801040a <_printf_float+0x402>
 801044a:	2301      	movs	r3, #1
 801044c:	464a      	mov	r2, r9
 801044e:	4631      	mov	r1, r6
 8010450:	4628      	mov	r0, r5
 8010452:	47b8      	blx	r7
 8010454:	3001      	adds	r0, #1
 8010456:	f43f ae36 	beq.w	80100c6 <_printf_float+0xbe>
 801045a:	f108 0801 	add.w	r8, r8, #1
 801045e:	68e3      	ldr	r3, [r4, #12]
 8010460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010462:	1a5b      	subs	r3, r3, r1
 8010464:	4543      	cmp	r3, r8
 8010466:	dcf0      	bgt.n	801044a <_printf_float+0x442>
 8010468:	e6f8      	b.n	801025c <_printf_float+0x254>
 801046a:	f04f 0800 	mov.w	r8, #0
 801046e:	f104 0919 	add.w	r9, r4, #25
 8010472:	e7f4      	b.n	801045e <_printf_float+0x456>

08010474 <_printf_common>:
 8010474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010478:	4616      	mov	r6, r2
 801047a:	4699      	mov	r9, r3
 801047c:	688a      	ldr	r2, [r1, #8]
 801047e:	690b      	ldr	r3, [r1, #16]
 8010480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010484:	4293      	cmp	r3, r2
 8010486:	bfb8      	it	lt
 8010488:	4613      	movlt	r3, r2
 801048a:	6033      	str	r3, [r6, #0]
 801048c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010490:	4607      	mov	r7, r0
 8010492:	460c      	mov	r4, r1
 8010494:	b10a      	cbz	r2, 801049a <_printf_common+0x26>
 8010496:	3301      	adds	r3, #1
 8010498:	6033      	str	r3, [r6, #0]
 801049a:	6823      	ldr	r3, [r4, #0]
 801049c:	0699      	lsls	r1, r3, #26
 801049e:	bf42      	ittt	mi
 80104a0:	6833      	ldrmi	r3, [r6, #0]
 80104a2:	3302      	addmi	r3, #2
 80104a4:	6033      	strmi	r3, [r6, #0]
 80104a6:	6825      	ldr	r5, [r4, #0]
 80104a8:	f015 0506 	ands.w	r5, r5, #6
 80104ac:	d106      	bne.n	80104bc <_printf_common+0x48>
 80104ae:	f104 0a19 	add.w	sl, r4, #25
 80104b2:	68e3      	ldr	r3, [r4, #12]
 80104b4:	6832      	ldr	r2, [r6, #0]
 80104b6:	1a9b      	subs	r3, r3, r2
 80104b8:	42ab      	cmp	r3, r5
 80104ba:	dc26      	bgt.n	801050a <_printf_common+0x96>
 80104bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104c0:	1e13      	subs	r3, r2, #0
 80104c2:	6822      	ldr	r2, [r4, #0]
 80104c4:	bf18      	it	ne
 80104c6:	2301      	movne	r3, #1
 80104c8:	0692      	lsls	r2, r2, #26
 80104ca:	d42b      	bmi.n	8010524 <_printf_common+0xb0>
 80104cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104d0:	4649      	mov	r1, r9
 80104d2:	4638      	mov	r0, r7
 80104d4:	47c0      	blx	r8
 80104d6:	3001      	adds	r0, #1
 80104d8:	d01e      	beq.n	8010518 <_printf_common+0xa4>
 80104da:	6823      	ldr	r3, [r4, #0]
 80104dc:	6922      	ldr	r2, [r4, #16]
 80104de:	f003 0306 	and.w	r3, r3, #6
 80104e2:	2b04      	cmp	r3, #4
 80104e4:	bf02      	ittt	eq
 80104e6:	68e5      	ldreq	r5, [r4, #12]
 80104e8:	6833      	ldreq	r3, [r6, #0]
 80104ea:	1aed      	subeq	r5, r5, r3
 80104ec:	68a3      	ldr	r3, [r4, #8]
 80104ee:	bf0c      	ite	eq
 80104f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104f4:	2500      	movne	r5, #0
 80104f6:	4293      	cmp	r3, r2
 80104f8:	bfc4      	itt	gt
 80104fa:	1a9b      	subgt	r3, r3, r2
 80104fc:	18ed      	addgt	r5, r5, r3
 80104fe:	2600      	movs	r6, #0
 8010500:	341a      	adds	r4, #26
 8010502:	42b5      	cmp	r5, r6
 8010504:	d11a      	bne.n	801053c <_printf_common+0xc8>
 8010506:	2000      	movs	r0, #0
 8010508:	e008      	b.n	801051c <_printf_common+0xa8>
 801050a:	2301      	movs	r3, #1
 801050c:	4652      	mov	r2, sl
 801050e:	4649      	mov	r1, r9
 8010510:	4638      	mov	r0, r7
 8010512:	47c0      	blx	r8
 8010514:	3001      	adds	r0, #1
 8010516:	d103      	bne.n	8010520 <_printf_common+0xac>
 8010518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010520:	3501      	adds	r5, #1
 8010522:	e7c6      	b.n	80104b2 <_printf_common+0x3e>
 8010524:	18e1      	adds	r1, r4, r3
 8010526:	1c5a      	adds	r2, r3, #1
 8010528:	2030      	movs	r0, #48	; 0x30
 801052a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801052e:	4422      	add	r2, r4
 8010530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010538:	3302      	adds	r3, #2
 801053a:	e7c7      	b.n	80104cc <_printf_common+0x58>
 801053c:	2301      	movs	r3, #1
 801053e:	4622      	mov	r2, r4
 8010540:	4649      	mov	r1, r9
 8010542:	4638      	mov	r0, r7
 8010544:	47c0      	blx	r8
 8010546:	3001      	adds	r0, #1
 8010548:	d0e6      	beq.n	8010518 <_printf_common+0xa4>
 801054a:	3601      	adds	r6, #1
 801054c:	e7d9      	b.n	8010502 <_printf_common+0x8e>
	...

08010550 <_printf_i>:
 8010550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010554:	7e0f      	ldrb	r7, [r1, #24]
 8010556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010558:	2f78      	cmp	r7, #120	; 0x78
 801055a:	4691      	mov	r9, r2
 801055c:	4680      	mov	r8, r0
 801055e:	460c      	mov	r4, r1
 8010560:	469a      	mov	sl, r3
 8010562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010566:	d807      	bhi.n	8010578 <_printf_i+0x28>
 8010568:	2f62      	cmp	r7, #98	; 0x62
 801056a:	d80a      	bhi.n	8010582 <_printf_i+0x32>
 801056c:	2f00      	cmp	r7, #0
 801056e:	f000 80d4 	beq.w	801071a <_printf_i+0x1ca>
 8010572:	2f58      	cmp	r7, #88	; 0x58
 8010574:	f000 80c0 	beq.w	80106f8 <_printf_i+0x1a8>
 8010578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801057c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010580:	e03a      	b.n	80105f8 <_printf_i+0xa8>
 8010582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010586:	2b15      	cmp	r3, #21
 8010588:	d8f6      	bhi.n	8010578 <_printf_i+0x28>
 801058a:	a101      	add	r1, pc, #4	; (adr r1, 8010590 <_printf_i+0x40>)
 801058c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010590:	080105e9 	.word	0x080105e9
 8010594:	080105fd 	.word	0x080105fd
 8010598:	08010579 	.word	0x08010579
 801059c:	08010579 	.word	0x08010579
 80105a0:	08010579 	.word	0x08010579
 80105a4:	08010579 	.word	0x08010579
 80105a8:	080105fd 	.word	0x080105fd
 80105ac:	08010579 	.word	0x08010579
 80105b0:	08010579 	.word	0x08010579
 80105b4:	08010579 	.word	0x08010579
 80105b8:	08010579 	.word	0x08010579
 80105bc:	08010701 	.word	0x08010701
 80105c0:	08010629 	.word	0x08010629
 80105c4:	080106bb 	.word	0x080106bb
 80105c8:	08010579 	.word	0x08010579
 80105cc:	08010579 	.word	0x08010579
 80105d0:	08010723 	.word	0x08010723
 80105d4:	08010579 	.word	0x08010579
 80105d8:	08010629 	.word	0x08010629
 80105dc:	08010579 	.word	0x08010579
 80105e0:	08010579 	.word	0x08010579
 80105e4:	080106c3 	.word	0x080106c3
 80105e8:	682b      	ldr	r3, [r5, #0]
 80105ea:	1d1a      	adds	r2, r3, #4
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	602a      	str	r2, [r5, #0]
 80105f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105f8:	2301      	movs	r3, #1
 80105fa:	e09f      	b.n	801073c <_printf_i+0x1ec>
 80105fc:	6820      	ldr	r0, [r4, #0]
 80105fe:	682b      	ldr	r3, [r5, #0]
 8010600:	0607      	lsls	r7, r0, #24
 8010602:	f103 0104 	add.w	r1, r3, #4
 8010606:	6029      	str	r1, [r5, #0]
 8010608:	d501      	bpl.n	801060e <_printf_i+0xbe>
 801060a:	681e      	ldr	r6, [r3, #0]
 801060c:	e003      	b.n	8010616 <_printf_i+0xc6>
 801060e:	0646      	lsls	r6, r0, #25
 8010610:	d5fb      	bpl.n	801060a <_printf_i+0xba>
 8010612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010616:	2e00      	cmp	r6, #0
 8010618:	da03      	bge.n	8010622 <_printf_i+0xd2>
 801061a:	232d      	movs	r3, #45	; 0x2d
 801061c:	4276      	negs	r6, r6
 801061e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010622:	485a      	ldr	r0, [pc, #360]	; (801078c <_printf_i+0x23c>)
 8010624:	230a      	movs	r3, #10
 8010626:	e012      	b.n	801064e <_printf_i+0xfe>
 8010628:	682b      	ldr	r3, [r5, #0]
 801062a:	6820      	ldr	r0, [r4, #0]
 801062c:	1d19      	adds	r1, r3, #4
 801062e:	6029      	str	r1, [r5, #0]
 8010630:	0605      	lsls	r5, r0, #24
 8010632:	d501      	bpl.n	8010638 <_printf_i+0xe8>
 8010634:	681e      	ldr	r6, [r3, #0]
 8010636:	e002      	b.n	801063e <_printf_i+0xee>
 8010638:	0641      	lsls	r1, r0, #25
 801063a:	d5fb      	bpl.n	8010634 <_printf_i+0xe4>
 801063c:	881e      	ldrh	r6, [r3, #0]
 801063e:	4853      	ldr	r0, [pc, #332]	; (801078c <_printf_i+0x23c>)
 8010640:	2f6f      	cmp	r7, #111	; 0x6f
 8010642:	bf0c      	ite	eq
 8010644:	2308      	moveq	r3, #8
 8010646:	230a      	movne	r3, #10
 8010648:	2100      	movs	r1, #0
 801064a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801064e:	6865      	ldr	r5, [r4, #4]
 8010650:	60a5      	str	r5, [r4, #8]
 8010652:	2d00      	cmp	r5, #0
 8010654:	bfa2      	ittt	ge
 8010656:	6821      	ldrge	r1, [r4, #0]
 8010658:	f021 0104 	bicge.w	r1, r1, #4
 801065c:	6021      	strge	r1, [r4, #0]
 801065e:	b90e      	cbnz	r6, 8010664 <_printf_i+0x114>
 8010660:	2d00      	cmp	r5, #0
 8010662:	d04b      	beq.n	80106fc <_printf_i+0x1ac>
 8010664:	4615      	mov	r5, r2
 8010666:	fbb6 f1f3 	udiv	r1, r6, r3
 801066a:	fb03 6711 	mls	r7, r3, r1, r6
 801066e:	5dc7      	ldrb	r7, [r0, r7]
 8010670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010674:	4637      	mov	r7, r6
 8010676:	42bb      	cmp	r3, r7
 8010678:	460e      	mov	r6, r1
 801067a:	d9f4      	bls.n	8010666 <_printf_i+0x116>
 801067c:	2b08      	cmp	r3, #8
 801067e:	d10b      	bne.n	8010698 <_printf_i+0x148>
 8010680:	6823      	ldr	r3, [r4, #0]
 8010682:	07de      	lsls	r6, r3, #31
 8010684:	d508      	bpl.n	8010698 <_printf_i+0x148>
 8010686:	6923      	ldr	r3, [r4, #16]
 8010688:	6861      	ldr	r1, [r4, #4]
 801068a:	4299      	cmp	r1, r3
 801068c:	bfde      	ittt	le
 801068e:	2330      	movle	r3, #48	; 0x30
 8010690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010694:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010698:	1b52      	subs	r2, r2, r5
 801069a:	6122      	str	r2, [r4, #16]
 801069c:	f8cd a000 	str.w	sl, [sp]
 80106a0:	464b      	mov	r3, r9
 80106a2:	aa03      	add	r2, sp, #12
 80106a4:	4621      	mov	r1, r4
 80106a6:	4640      	mov	r0, r8
 80106a8:	f7ff fee4 	bl	8010474 <_printf_common>
 80106ac:	3001      	adds	r0, #1
 80106ae:	d14a      	bne.n	8010746 <_printf_i+0x1f6>
 80106b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106b4:	b004      	add	sp, #16
 80106b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ba:	6823      	ldr	r3, [r4, #0]
 80106bc:	f043 0320 	orr.w	r3, r3, #32
 80106c0:	6023      	str	r3, [r4, #0]
 80106c2:	4833      	ldr	r0, [pc, #204]	; (8010790 <_printf_i+0x240>)
 80106c4:	2778      	movs	r7, #120	; 0x78
 80106c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80106ca:	6823      	ldr	r3, [r4, #0]
 80106cc:	6829      	ldr	r1, [r5, #0]
 80106ce:	061f      	lsls	r7, r3, #24
 80106d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80106d4:	d402      	bmi.n	80106dc <_printf_i+0x18c>
 80106d6:	065f      	lsls	r7, r3, #25
 80106d8:	bf48      	it	mi
 80106da:	b2b6      	uxthmi	r6, r6
 80106dc:	07df      	lsls	r7, r3, #31
 80106de:	bf48      	it	mi
 80106e0:	f043 0320 	orrmi.w	r3, r3, #32
 80106e4:	6029      	str	r1, [r5, #0]
 80106e6:	bf48      	it	mi
 80106e8:	6023      	strmi	r3, [r4, #0]
 80106ea:	b91e      	cbnz	r6, 80106f4 <_printf_i+0x1a4>
 80106ec:	6823      	ldr	r3, [r4, #0]
 80106ee:	f023 0320 	bic.w	r3, r3, #32
 80106f2:	6023      	str	r3, [r4, #0]
 80106f4:	2310      	movs	r3, #16
 80106f6:	e7a7      	b.n	8010648 <_printf_i+0xf8>
 80106f8:	4824      	ldr	r0, [pc, #144]	; (801078c <_printf_i+0x23c>)
 80106fa:	e7e4      	b.n	80106c6 <_printf_i+0x176>
 80106fc:	4615      	mov	r5, r2
 80106fe:	e7bd      	b.n	801067c <_printf_i+0x12c>
 8010700:	682b      	ldr	r3, [r5, #0]
 8010702:	6826      	ldr	r6, [r4, #0]
 8010704:	6961      	ldr	r1, [r4, #20]
 8010706:	1d18      	adds	r0, r3, #4
 8010708:	6028      	str	r0, [r5, #0]
 801070a:	0635      	lsls	r5, r6, #24
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	d501      	bpl.n	8010714 <_printf_i+0x1c4>
 8010710:	6019      	str	r1, [r3, #0]
 8010712:	e002      	b.n	801071a <_printf_i+0x1ca>
 8010714:	0670      	lsls	r0, r6, #25
 8010716:	d5fb      	bpl.n	8010710 <_printf_i+0x1c0>
 8010718:	8019      	strh	r1, [r3, #0]
 801071a:	2300      	movs	r3, #0
 801071c:	6123      	str	r3, [r4, #16]
 801071e:	4615      	mov	r5, r2
 8010720:	e7bc      	b.n	801069c <_printf_i+0x14c>
 8010722:	682b      	ldr	r3, [r5, #0]
 8010724:	1d1a      	adds	r2, r3, #4
 8010726:	602a      	str	r2, [r5, #0]
 8010728:	681d      	ldr	r5, [r3, #0]
 801072a:	6862      	ldr	r2, [r4, #4]
 801072c:	2100      	movs	r1, #0
 801072e:	4628      	mov	r0, r5
 8010730:	f7ef fd56 	bl	80001e0 <memchr>
 8010734:	b108      	cbz	r0, 801073a <_printf_i+0x1ea>
 8010736:	1b40      	subs	r0, r0, r5
 8010738:	6060      	str	r0, [r4, #4]
 801073a:	6863      	ldr	r3, [r4, #4]
 801073c:	6123      	str	r3, [r4, #16]
 801073e:	2300      	movs	r3, #0
 8010740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010744:	e7aa      	b.n	801069c <_printf_i+0x14c>
 8010746:	6923      	ldr	r3, [r4, #16]
 8010748:	462a      	mov	r2, r5
 801074a:	4649      	mov	r1, r9
 801074c:	4640      	mov	r0, r8
 801074e:	47d0      	blx	sl
 8010750:	3001      	adds	r0, #1
 8010752:	d0ad      	beq.n	80106b0 <_printf_i+0x160>
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	079b      	lsls	r3, r3, #30
 8010758:	d413      	bmi.n	8010782 <_printf_i+0x232>
 801075a:	68e0      	ldr	r0, [r4, #12]
 801075c:	9b03      	ldr	r3, [sp, #12]
 801075e:	4298      	cmp	r0, r3
 8010760:	bfb8      	it	lt
 8010762:	4618      	movlt	r0, r3
 8010764:	e7a6      	b.n	80106b4 <_printf_i+0x164>
 8010766:	2301      	movs	r3, #1
 8010768:	4632      	mov	r2, r6
 801076a:	4649      	mov	r1, r9
 801076c:	4640      	mov	r0, r8
 801076e:	47d0      	blx	sl
 8010770:	3001      	adds	r0, #1
 8010772:	d09d      	beq.n	80106b0 <_printf_i+0x160>
 8010774:	3501      	adds	r5, #1
 8010776:	68e3      	ldr	r3, [r4, #12]
 8010778:	9903      	ldr	r1, [sp, #12]
 801077a:	1a5b      	subs	r3, r3, r1
 801077c:	42ab      	cmp	r3, r5
 801077e:	dcf2      	bgt.n	8010766 <_printf_i+0x216>
 8010780:	e7eb      	b.n	801075a <_printf_i+0x20a>
 8010782:	2500      	movs	r5, #0
 8010784:	f104 0619 	add.w	r6, r4, #25
 8010788:	e7f5      	b.n	8010776 <_printf_i+0x226>
 801078a:	bf00      	nop
 801078c:	080141e6 	.word	0x080141e6
 8010790:	080141f7 	.word	0x080141f7

08010794 <std>:
 8010794:	2300      	movs	r3, #0
 8010796:	b510      	push	{r4, lr}
 8010798:	4604      	mov	r4, r0
 801079a:	e9c0 3300 	strd	r3, r3, [r0]
 801079e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107a2:	6083      	str	r3, [r0, #8]
 80107a4:	8181      	strh	r1, [r0, #12]
 80107a6:	6643      	str	r3, [r0, #100]	; 0x64
 80107a8:	81c2      	strh	r2, [r0, #14]
 80107aa:	6183      	str	r3, [r0, #24]
 80107ac:	4619      	mov	r1, r3
 80107ae:	2208      	movs	r2, #8
 80107b0:	305c      	adds	r0, #92	; 0x5c
 80107b2:	f000 f902 	bl	80109ba <memset>
 80107b6:	4b05      	ldr	r3, [pc, #20]	; (80107cc <std+0x38>)
 80107b8:	6263      	str	r3, [r4, #36]	; 0x24
 80107ba:	4b05      	ldr	r3, [pc, #20]	; (80107d0 <std+0x3c>)
 80107bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80107be:	4b05      	ldr	r3, [pc, #20]	; (80107d4 <std+0x40>)
 80107c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80107c2:	4b05      	ldr	r3, [pc, #20]	; (80107d8 <std+0x44>)
 80107c4:	6224      	str	r4, [r4, #32]
 80107c6:	6323      	str	r3, [r4, #48]	; 0x30
 80107c8:	bd10      	pop	{r4, pc}
 80107ca:	bf00      	nop
 80107cc:	08010935 	.word	0x08010935
 80107d0:	08010957 	.word	0x08010957
 80107d4:	0801098f 	.word	0x0801098f
 80107d8:	080109b3 	.word	0x080109b3

080107dc <stdio_exit_handler>:
 80107dc:	4a02      	ldr	r2, [pc, #8]	; (80107e8 <stdio_exit_handler+0xc>)
 80107de:	4903      	ldr	r1, [pc, #12]	; (80107ec <stdio_exit_handler+0x10>)
 80107e0:	4803      	ldr	r0, [pc, #12]	; (80107f0 <stdio_exit_handler+0x14>)
 80107e2:	f000 b869 	b.w	80108b8 <_fwalk_sglue>
 80107e6:	bf00      	nop
 80107e8:	20000120 	.word	0x20000120
 80107ec:	08012351 	.word	0x08012351
 80107f0:	2000012c 	.word	0x2000012c

080107f4 <cleanup_stdio>:
 80107f4:	6841      	ldr	r1, [r0, #4]
 80107f6:	4b0c      	ldr	r3, [pc, #48]	; (8010828 <cleanup_stdio+0x34>)
 80107f8:	4299      	cmp	r1, r3
 80107fa:	b510      	push	{r4, lr}
 80107fc:	4604      	mov	r4, r0
 80107fe:	d001      	beq.n	8010804 <cleanup_stdio+0x10>
 8010800:	f001 fda6 	bl	8012350 <_fflush_r>
 8010804:	68a1      	ldr	r1, [r4, #8]
 8010806:	4b09      	ldr	r3, [pc, #36]	; (801082c <cleanup_stdio+0x38>)
 8010808:	4299      	cmp	r1, r3
 801080a:	d002      	beq.n	8010812 <cleanup_stdio+0x1e>
 801080c:	4620      	mov	r0, r4
 801080e:	f001 fd9f 	bl	8012350 <_fflush_r>
 8010812:	68e1      	ldr	r1, [r4, #12]
 8010814:	4b06      	ldr	r3, [pc, #24]	; (8010830 <cleanup_stdio+0x3c>)
 8010816:	4299      	cmp	r1, r3
 8010818:	d004      	beq.n	8010824 <cleanup_stdio+0x30>
 801081a:	4620      	mov	r0, r4
 801081c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010820:	f001 bd96 	b.w	8012350 <_fflush_r>
 8010824:	bd10      	pop	{r4, pc}
 8010826:	bf00      	nop
 8010828:	20002298 	.word	0x20002298
 801082c:	20002300 	.word	0x20002300
 8010830:	20002368 	.word	0x20002368

08010834 <global_stdio_init.part.0>:
 8010834:	b510      	push	{r4, lr}
 8010836:	4b0b      	ldr	r3, [pc, #44]	; (8010864 <global_stdio_init.part.0+0x30>)
 8010838:	4c0b      	ldr	r4, [pc, #44]	; (8010868 <global_stdio_init.part.0+0x34>)
 801083a:	4a0c      	ldr	r2, [pc, #48]	; (801086c <global_stdio_init.part.0+0x38>)
 801083c:	601a      	str	r2, [r3, #0]
 801083e:	4620      	mov	r0, r4
 8010840:	2200      	movs	r2, #0
 8010842:	2104      	movs	r1, #4
 8010844:	f7ff ffa6 	bl	8010794 <std>
 8010848:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801084c:	2201      	movs	r2, #1
 801084e:	2109      	movs	r1, #9
 8010850:	f7ff ffa0 	bl	8010794 <std>
 8010854:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010858:	2202      	movs	r2, #2
 801085a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801085e:	2112      	movs	r1, #18
 8010860:	f7ff bf98 	b.w	8010794 <std>
 8010864:	200023d0 	.word	0x200023d0
 8010868:	20002298 	.word	0x20002298
 801086c:	080107dd 	.word	0x080107dd

08010870 <__sfp_lock_acquire>:
 8010870:	4801      	ldr	r0, [pc, #4]	; (8010878 <__sfp_lock_acquire+0x8>)
 8010872:	f000 b93d 	b.w	8010af0 <__retarget_lock_acquire_recursive>
 8010876:	bf00      	nop
 8010878:	200023d9 	.word	0x200023d9

0801087c <__sfp_lock_release>:
 801087c:	4801      	ldr	r0, [pc, #4]	; (8010884 <__sfp_lock_release+0x8>)
 801087e:	f000 b938 	b.w	8010af2 <__retarget_lock_release_recursive>
 8010882:	bf00      	nop
 8010884:	200023d9 	.word	0x200023d9

08010888 <__sinit>:
 8010888:	b510      	push	{r4, lr}
 801088a:	4604      	mov	r4, r0
 801088c:	f7ff fff0 	bl	8010870 <__sfp_lock_acquire>
 8010890:	6a23      	ldr	r3, [r4, #32]
 8010892:	b11b      	cbz	r3, 801089c <__sinit+0x14>
 8010894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010898:	f7ff bff0 	b.w	801087c <__sfp_lock_release>
 801089c:	4b04      	ldr	r3, [pc, #16]	; (80108b0 <__sinit+0x28>)
 801089e:	6223      	str	r3, [r4, #32]
 80108a0:	4b04      	ldr	r3, [pc, #16]	; (80108b4 <__sinit+0x2c>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d1f5      	bne.n	8010894 <__sinit+0xc>
 80108a8:	f7ff ffc4 	bl	8010834 <global_stdio_init.part.0>
 80108ac:	e7f2      	b.n	8010894 <__sinit+0xc>
 80108ae:	bf00      	nop
 80108b0:	080107f5 	.word	0x080107f5
 80108b4:	200023d0 	.word	0x200023d0

080108b8 <_fwalk_sglue>:
 80108b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108bc:	4607      	mov	r7, r0
 80108be:	4688      	mov	r8, r1
 80108c0:	4614      	mov	r4, r2
 80108c2:	2600      	movs	r6, #0
 80108c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80108c8:	f1b9 0901 	subs.w	r9, r9, #1
 80108cc:	d505      	bpl.n	80108da <_fwalk_sglue+0x22>
 80108ce:	6824      	ldr	r4, [r4, #0]
 80108d0:	2c00      	cmp	r4, #0
 80108d2:	d1f7      	bne.n	80108c4 <_fwalk_sglue+0xc>
 80108d4:	4630      	mov	r0, r6
 80108d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108da:	89ab      	ldrh	r3, [r5, #12]
 80108dc:	2b01      	cmp	r3, #1
 80108de:	d907      	bls.n	80108f0 <_fwalk_sglue+0x38>
 80108e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80108e4:	3301      	adds	r3, #1
 80108e6:	d003      	beq.n	80108f0 <_fwalk_sglue+0x38>
 80108e8:	4629      	mov	r1, r5
 80108ea:	4638      	mov	r0, r7
 80108ec:	47c0      	blx	r8
 80108ee:	4306      	orrs	r6, r0
 80108f0:	3568      	adds	r5, #104	; 0x68
 80108f2:	e7e9      	b.n	80108c8 <_fwalk_sglue+0x10>

080108f4 <siprintf>:
 80108f4:	b40e      	push	{r1, r2, r3}
 80108f6:	b500      	push	{lr}
 80108f8:	b09c      	sub	sp, #112	; 0x70
 80108fa:	ab1d      	add	r3, sp, #116	; 0x74
 80108fc:	9002      	str	r0, [sp, #8]
 80108fe:	9006      	str	r0, [sp, #24]
 8010900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010904:	4809      	ldr	r0, [pc, #36]	; (801092c <siprintf+0x38>)
 8010906:	9107      	str	r1, [sp, #28]
 8010908:	9104      	str	r1, [sp, #16]
 801090a:	4909      	ldr	r1, [pc, #36]	; (8010930 <siprintf+0x3c>)
 801090c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010910:	9105      	str	r1, [sp, #20]
 8010912:	6800      	ldr	r0, [r0, #0]
 8010914:	9301      	str	r3, [sp, #4]
 8010916:	a902      	add	r1, sp, #8
 8010918:	f001 fb96 	bl	8012048 <_svfiprintf_r>
 801091c:	9b02      	ldr	r3, [sp, #8]
 801091e:	2200      	movs	r2, #0
 8010920:	701a      	strb	r2, [r3, #0]
 8010922:	b01c      	add	sp, #112	; 0x70
 8010924:	f85d eb04 	ldr.w	lr, [sp], #4
 8010928:	b003      	add	sp, #12
 801092a:	4770      	bx	lr
 801092c:	20000178 	.word	0x20000178
 8010930:	ffff0208 	.word	0xffff0208

08010934 <__sread>:
 8010934:	b510      	push	{r4, lr}
 8010936:	460c      	mov	r4, r1
 8010938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801093c:	f000 f87a 	bl	8010a34 <_read_r>
 8010940:	2800      	cmp	r0, #0
 8010942:	bfab      	itete	ge
 8010944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010946:	89a3      	ldrhlt	r3, [r4, #12]
 8010948:	181b      	addge	r3, r3, r0
 801094a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801094e:	bfac      	ite	ge
 8010950:	6563      	strge	r3, [r4, #84]	; 0x54
 8010952:	81a3      	strhlt	r3, [r4, #12]
 8010954:	bd10      	pop	{r4, pc}

08010956 <__swrite>:
 8010956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801095a:	461f      	mov	r7, r3
 801095c:	898b      	ldrh	r3, [r1, #12]
 801095e:	05db      	lsls	r3, r3, #23
 8010960:	4605      	mov	r5, r0
 8010962:	460c      	mov	r4, r1
 8010964:	4616      	mov	r6, r2
 8010966:	d505      	bpl.n	8010974 <__swrite+0x1e>
 8010968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801096c:	2302      	movs	r3, #2
 801096e:	2200      	movs	r2, #0
 8010970:	f000 f84e 	bl	8010a10 <_lseek_r>
 8010974:	89a3      	ldrh	r3, [r4, #12]
 8010976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801097a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801097e:	81a3      	strh	r3, [r4, #12]
 8010980:	4632      	mov	r2, r6
 8010982:	463b      	mov	r3, r7
 8010984:	4628      	mov	r0, r5
 8010986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801098a:	f000 b875 	b.w	8010a78 <_write_r>

0801098e <__sseek>:
 801098e:	b510      	push	{r4, lr}
 8010990:	460c      	mov	r4, r1
 8010992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010996:	f000 f83b 	bl	8010a10 <_lseek_r>
 801099a:	1c43      	adds	r3, r0, #1
 801099c:	89a3      	ldrh	r3, [r4, #12]
 801099e:	bf15      	itete	ne
 80109a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80109a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80109a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80109aa:	81a3      	strheq	r3, [r4, #12]
 80109ac:	bf18      	it	ne
 80109ae:	81a3      	strhne	r3, [r4, #12]
 80109b0:	bd10      	pop	{r4, pc}

080109b2 <__sclose>:
 80109b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109b6:	f000 b81b 	b.w	80109f0 <_close_r>

080109ba <memset>:
 80109ba:	4402      	add	r2, r0
 80109bc:	4603      	mov	r3, r0
 80109be:	4293      	cmp	r3, r2
 80109c0:	d100      	bne.n	80109c4 <memset+0xa>
 80109c2:	4770      	bx	lr
 80109c4:	f803 1b01 	strb.w	r1, [r3], #1
 80109c8:	e7f9      	b.n	80109be <memset+0x4>

080109ca <strcat>:
 80109ca:	b510      	push	{r4, lr}
 80109cc:	4602      	mov	r2, r0
 80109ce:	7814      	ldrb	r4, [r2, #0]
 80109d0:	4613      	mov	r3, r2
 80109d2:	3201      	adds	r2, #1
 80109d4:	2c00      	cmp	r4, #0
 80109d6:	d1fa      	bne.n	80109ce <strcat+0x4>
 80109d8:	3b01      	subs	r3, #1
 80109da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109e2:	2a00      	cmp	r2, #0
 80109e4:	d1f9      	bne.n	80109da <strcat+0x10>
 80109e6:	bd10      	pop	{r4, pc}

080109e8 <_localeconv_r>:
 80109e8:	4800      	ldr	r0, [pc, #0]	; (80109ec <_localeconv_r+0x4>)
 80109ea:	4770      	bx	lr
 80109ec:	2000026c 	.word	0x2000026c

080109f0 <_close_r>:
 80109f0:	b538      	push	{r3, r4, r5, lr}
 80109f2:	4d06      	ldr	r5, [pc, #24]	; (8010a0c <_close_r+0x1c>)
 80109f4:	2300      	movs	r3, #0
 80109f6:	4604      	mov	r4, r0
 80109f8:	4608      	mov	r0, r1
 80109fa:	602b      	str	r3, [r5, #0]
 80109fc:	f7f1 fc67 	bl	80022ce <_close>
 8010a00:	1c43      	adds	r3, r0, #1
 8010a02:	d102      	bne.n	8010a0a <_close_r+0x1a>
 8010a04:	682b      	ldr	r3, [r5, #0]
 8010a06:	b103      	cbz	r3, 8010a0a <_close_r+0x1a>
 8010a08:	6023      	str	r3, [r4, #0]
 8010a0a:	bd38      	pop	{r3, r4, r5, pc}
 8010a0c:	200023d4 	.word	0x200023d4

08010a10 <_lseek_r>:
 8010a10:	b538      	push	{r3, r4, r5, lr}
 8010a12:	4d07      	ldr	r5, [pc, #28]	; (8010a30 <_lseek_r+0x20>)
 8010a14:	4604      	mov	r4, r0
 8010a16:	4608      	mov	r0, r1
 8010a18:	4611      	mov	r1, r2
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	602a      	str	r2, [r5, #0]
 8010a1e:	461a      	mov	r2, r3
 8010a20:	f7f1 fc7c 	bl	800231c <_lseek>
 8010a24:	1c43      	adds	r3, r0, #1
 8010a26:	d102      	bne.n	8010a2e <_lseek_r+0x1e>
 8010a28:	682b      	ldr	r3, [r5, #0]
 8010a2a:	b103      	cbz	r3, 8010a2e <_lseek_r+0x1e>
 8010a2c:	6023      	str	r3, [r4, #0]
 8010a2e:	bd38      	pop	{r3, r4, r5, pc}
 8010a30:	200023d4 	.word	0x200023d4

08010a34 <_read_r>:
 8010a34:	b538      	push	{r3, r4, r5, lr}
 8010a36:	4d07      	ldr	r5, [pc, #28]	; (8010a54 <_read_r+0x20>)
 8010a38:	4604      	mov	r4, r0
 8010a3a:	4608      	mov	r0, r1
 8010a3c:	4611      	mov	r1, r2
 8010a3e:	2200      	movs	r2, #0
 8010a40:	602a      	str	r2, [r5, #0]
 8010a42:	461a      	mov	r2, r3
 8010a44:	f7f1 fc0a 	bl	800225c <_read>
 8010a48:	1c43      	adds	r3, r0, #1
 8010a4a:	d102      	bne.n	8010a52 <_read_r+0x1e>
 8010a4c:	682b      	ldr	r3, [r5, #0]
 8010a4e:	b103      	cbz	r3, 8010a52 <_read_r+0x1e>
 8010a50:	6023      	str	r3, [r4, #0]
 8010a52:	bd38      	pop	{r3, r4, r5, pc}
 8010a54:	200023d4 	.word	0x200023d4

08010a58 <_sbrk_r>:
 8010a58:	b538      	push	{r3, r4, r5, lr}
 8010a5a:	4d06      	ldr	r5, [pc, #24]	; (8010a74 <_sbrk_r+0x1c>)
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	4604      	mov	r4, r0
 8010a60:	4608      	mov	r0, r1
 8010a62:	602b      	str	r3, [r5, #0]
 8010a64:	f7f1 fc68 	bl	8002338 <_sbrk>
 8010a68:	1c43      	adds	r3, r0, #1
 8010a6a:	d102      	bne.n	8010a72 <_sbrk_r+0x1a>
 8010a6c:	682b      	ldr	r3, [r5, #0]
 8010a6e:	b103      	cbz	r3, 8010a72 <_sbrk_r+0x1a>
 8010a70:	6023      	str	r3, [r4, #0]
 8010a72:	bd38      	pop	{r3, r4, r5, pc}
 8010a74:	200023d4 	.word	0x200023d4

08010a78 <_write_r>:
 8010a78:	b538      	push	{r3, r4, r5, lr}
 8010a7a:	4d07      	ldr	r5, [pc, #28]	; (8010a98 <_write_r+0x20>)
 8010a7c:	4604      	mov	r4, r0
 8010a7e:	4608      	mov	r0, r1
 8010a80:	4611      	mov	r1, r2
 8010a82:	2200      	movs	r2, #0
 8010a84:	602a      	str	r2, [r5, #0]
 8010a86:	461a      	mov	r2, r3
 8010a88:	f7f1 fc05 	bl	8002296 <_write>
 8010a8c:	1c43      	adds	r3, r0, #1
 8010a8e:	d102      	bne.n	8010a96 <_write_r+0x1e>
 8010a90:	682b      	ldr	r3, [r5, #0]
 8010a92:	b103      	cbz	r3, 8010a96 <_write_r+0x1e>
 8010a94:	6023      	str	r3, [r4, #0]
 8010a96:	bd38      	pop	{r3, r4, r5, pc}
 8010a98:	200023d4 	.word	0x200023d4

08010a9c <__errno>:
 8010a9c:	4b01      	ldr	r3, [pc, #4]	; (8010aa4 <__errno+0x8>)
 8010a9e:	6818      	ldr	r0, [r3, #0]
 8010aa0:	4770      	bx	lr
 8010aa2:	bf00      	nop
 8010aa4:	20000178 	.word	0x20000178

08010aa8 <__libc_init_array>:
 8010aa8:	b570      	push	{r4, r5, r6, lr}
 8010aaa:	4d0d      	ldr	r5, [pc, #52]	; (8010ae0 <__libc_init_array+0x38>)
 8010aac:	4c0d      	ldr	r4, [pc, #52]	; (8010ae4 <__libc_init_array+0x3c>)
 8010aae:	1b64      	subs	r4, r4, r5
 8010ab0:	10a4      	asrs	r4, r4, #2
 8010ab2:	2600      	movs	r6, #0
 8010ab4:	42a6      	cmp	r6, r4
 8010ab6:	d109      	bne.n	8010acc <__libc_init_array+0x24>
 8010ab8:	4d0b      	ldr	r5, [pc, #44]	; (8010ae8 <__libc_init_array+0x40>)
 8010aba:	4c0c      	ldr	r4, [pc, #48]	; (8010aec <__libc_init_array+0x44>)
 8010abc:	f003 f99e 	bl	8013dfc <_init>
 8010ac0:	1b64      	subs	r4, r4, r5
 8010ac2:	10a4      	asrs	r4, r4, #2
 8010ac4:	2600      	movs	r6, #0
 8010ac6:	42a6      	cmp	r6, r4
 8010ac8:	d105      	bne.n	8010ad6 <__libc_init_array+0x2e>
 8010aca:	bd70      	pop	{r4, r5, r6, pc}
 8010acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ad0:	4798      	blx	r3
 8010ad2:	3601      	adds	r6, #1
 8010ad4:	e7ee      	b.n	8010ab4 <__libc_init_array+0xc>
 8010ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ada:	4798      	blx	r3
 8010adc:	3601      	adds	r6, #1
 8010ade:	e7f2      	b.n	8010ac6 <__libc_init_array+0x1e>
 8010ae0:	080145f0 	.word	0x080145f0
 8010ae4:	080145f0 	.word	0x080145f0
 8010ae8:	080145f0 	.word	0x080145f0
 8010aec:	080145f4 	.word	0x080145f4

08010af0 <__retarget_lock_acquire_recursive>:
 8010af0:	4770      	bx	lr

08010af2 <__retarget_lock_release_recursive>:
 8010af2:	4770      	bx	lr

08010af4 <memcpy>:
 8010af4:	440a      	add	r2, r1
 8010af6:	4291      	cmp	r1, r2
 8010af8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010afc:	d100      	bne.n	8010b00 <memcpy+0xc>
 8010afe:	4770      	bx	lr
 8010b00:	b510      	push	{r4, lr}
 8010b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b0a:	4291      	cmp	r1, r2
 8010b0c:	d1f9      	bne.n	8010b02 <memcpy+0xe>
 8010b0e:	bd10      	pop	{r4, pc}

08010b10 <quorem>:
 8010b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b14:	6903      	ldr	r3, [r0, #16]
 8010b16:	690c      	ldr	r4, [r1, #16]
 8010b18:	42a3      	cmp	r3, r4
 8010b1a:	4607      	mov	r7, r0
 8010b1c:	db7e      	blt.n	8010c1c <quorem+0x10c>
 8010b1e:	3c01      	subs	r4, #1
 8010b20:	f101 0814 	add.w	r8, r1, #20
 8010b24:	f100 0514 	add.w	r5, r0, #20
 8010b28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b2c:	9301      	str	r3, [sp, #4]
 8010b2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010b32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b36:	3301      	adds	r3, #1
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010b3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010b42:	fbb2 f6f3 	udiv	r6, r2, r3
 8010b46:	d331      	bcc.n	8010bac <quorem+0x9c>
 8010b48:	f04f 0e00 	mov.w	lr, #0
 8010b4c:	4640      	mov	r0, r8
 8010b4e:	46ac      	mov	ip, r5
 8010b50:	46f2      	mov	sl, lr
 8010b52:	f850 2b04 	ldr.w	r2, [r0], #4
 8010b56:	b293      	uxth	r3, r2
 8010b58:	fb06 e303 	mla	r3, r6, r3, lr
 8010b5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010b60:	0c1a      	lsrs	r2, r3, #16
 8010b62:	b29b      	uxth	r3, r3
 8010b64:	ebaa 0303 	sub.w	r3, sl, r3
 8010b68:	f8dc a000 	ldr.w	sl, [ip]
 8010b6c:	fa13 f38a 	uxtah	r3, r3, sl
 8010b70:	fb06 220e 	mla	r2, r6, lr, r2
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	9b00      	ldr	r3, [sp, #0]
 8010b78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010b7c:	b292      	uxth	r2, r2
 8010b7e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010b82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b86:	f8bd 3000 	ldrh.w	r3, [sp]
 8010b8a:	4581      	cmp	r9, r0
 8010b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b90:	f84c 3b04 	str.w	r3, [ip], #4
 8010b94:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010b98:	d2db      	bcs.n	8010b52 <quorem+0x42>
 8010b9a:	f855 300b 	ldr.w	r3, [r5, fp]
 8010b9e:	b92b      	cbnz	r3, 8010bac <quorem+0x9c>
 8010ba0:	9b01      	ldr	r3, [sp, #4]
 8010ba2:	3b04      	subs	r3, #4
 8010ba4:	429d      	cmp	r5, r3
 8010ba6:	461a      	mov	r2, r3
 8010ba8:	d32c      	bcc.n	8010c04 <quorem+0xf4>
 8010baa:	613c      	str	r4, [r7, #16]
 8010bac:	4638      	mov	r0, r7
 8010bae:	f001 f8f1 	bl	8011d94 <__mcmp>
 8010bb2:	2800      	cmp	r0, #0
 8010bb4:	db22      	blt.n	8010bfc <quorem+0xec>
 8010bb6:	3601      	adds	r6, #1
 8010bb8:	4629      	mov	r1, r5
 8010bba:	2000      	movs	r0, #0
 8010bbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8010bc0:	f8d1 c000 	ldr.w	ip, [r1]
 8010bc4:	b293      	uxth	r3, r2
 8010bc6:	1ac3      	subs	r3, r0, r3
 8010bc8:	0c12      	lsrs	r2, r2, #16
 8010bca:	fa13 f38c 	uxtah	r3, r3, ip
 8010bce:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010bd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bdc:	45c1      	cmp	r9, r8
 8010bde:	f841 3b04 	str.w	r3, [r1], #4
 8010be2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010be6:	d2e9      	bcs.n	8010bbc <quorem+0xac>
 8010be8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010bec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010bf0:	b922      	cbnz	r2, 8010bfc <quorem+0xec>
 8010bf2:	3b04      	subs	r3, #4
 8010bf4:	429d      	cmp	r5, r3
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	d30a      	bcc.n	8010c10 <quorem+0x100>
 8010bfa:	613c      	str	r4, [r7, #16]
 8010bfc:	4630      	mov	r0, r6
 8010bfe:	b003      	add	sp, #12
 8010c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c04:	6812      	ldr	r2, [r2, #0]
 8010c06:	3b04      	subs	r3, #4
 8010c08:	2a00      	cmp	r2, #0
 8010c0a:	d1ce      	bne.n	8010baa <quorem+0x9a>
 8010c0c:	3c01      	subs	r4, #1
 8010c0e:	e7c9      	b.n	8010ba4 <quorem+0x94>
 8010c10:	6812      	ldr	r2, [r2, #0]
 8010c12:	3b04      	subs	r3, #4
 8010c14:	2a00      	cmp	r2, #0
 8010c16:	d1f0      	bne.n	8010bfa <quorem+0xea>
 8010c18:	3c01      	subs	r4, #1
 8010c1a:	e7eb      	b.n	8010bf4 <quorem+0xe4>
 8010c1c:	2000      	movs	r0, #0
 8010c1e:	e7ee      	b.n	8010bfe <quorem+0xee>

08010c20 <_dtoa_r>:
 8010c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c24:	ed2d 8b04 	vpush	{d8-d9}
 8010c28:	69c5      	ldr	r5, [r0, #28]
 8010c2a:	b093      	sub	sp, #76	; 0x4c
 8010c2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010c30:	ec57 6b10 	vmov	r6, r7, d0
 8010c34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010c38:	9107      	str	r1, [sp, #28]
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	920a      	str	r2, [sp, #40]	; 0x28
 8010c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8010c40:	b975      	cbnz	r5, 8010c60 <_dtoa_r+0x40>
 8010c42:	2010      	movs	r0, #16
 8010c44:	f7ff f884 	bl	800fd50 <malloc>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	61e0      	str	r0, [r4, #28]
 8010c4c:	b920      	cbnz	r0, 8010c58 <_dtoa_r+0x38>
 8010c4e:	4bae      	ldr	r3, [pc, #696]	; (8010f08 <_dtoa_r+0x2e8>)
 8010c50:	21ef      	movs	r1, #239	; 0xef
 8010c52:	48ae      	ldr	r0, [pc, #696]	; (8010f0c <_dtoa_r+0x2ec>)
 8010c54:	f001 fbbe 	bl	80123d4 <__assert_func>
 8010c58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010c5c:	6005      	str	r5, [r0, #0]
 8010c5e:	60c5      	str	r5, [r0, #12]
 8010c60:	69e3      	ldr	r3, [r4, #28]
 8010c62:	6819      	ldr	r1, [r3, #0]
 8010c64:	b151      	cbz	r1, 8010c7c <_dtoa_r+0x5c>
 8010c66:	685a      	ldr	r2, [r3, #4]
 8010c68:	604a      	str	r2, [r1, #4]
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	4093      	lsls	r3, r2
 8010c6e:	608b      	str	r3, [r1, #8]
 8010c70:	4620      	mov	r0, r4
 8010c72:	f000 fe53 	bl	801191c <_Bfree>
 8010c76:	69e3      	ldr	r3, [r4, #28]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	601a      	str	r2, [r3, #0]
 8010c7c:	1e3b      	subs	r3, r7, #0
 8010c7e:	bfbb      	ittet	lt
 8010c80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010c84:	9303      	strlt	r3, [sp, #12]
 8010c86:	2300      	movge	r3, #0
 8010c88:	2201      	movlt	r2, #1
 8010c8a:	bfac      	ite	ge
 8010c8c:	f8c8 3000 	strge.w	r3, [r8]
 8010c90:	f8c8 2000 	strlt.w	r2, [r8]
 8010c94:	4b9e      	ldr	r3, [pc, #632]	; (8010f10 <_dtoa_r+0x2f0>)
 8010c96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010c9a:	ea33 0308 	bics.w	r3, r3, r8
 8010c9e:	d11b      	bne.n	8010cd8 <_dtoa_r+0xb8>
 8010ca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ca2:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ca6:	6013      	str	r3, [r2, #0]
 8010ca8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010cac:	4333      	orrs	r3, r6
 8010cae:	f000 8593 	beq.w	80117d8 <_dtoa_r+0xbb8>
 8010cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010cb4:	b963      	cbnz	r3, 8010cd0 <_dtoa_r+0xb0>
 8010cb6:	4b97      	ldr	r3, [pc, #604]	; (8010f14 <_dtoa_r+0x2f4>)
 8010cb8:	e027      	b.n	8010d0a <_dtoa_r+0xea>
 8010cba:	4b97      	ldr	r3, [pc, #604]	; (8010f18 <_dtoa_r+0x2f8>)
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	3308      	adds	r3, #8
 8010cc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010cc2:	6013      	str	r3, [r2, #0]
 8010cc4:	9800      	ldr	r0, [sp, #0]
 8010cc6:	b013      	add	sp, #76	; 0x4c
 8010cc8:	ecbd 8b04 	vpop	{d8-d9}
 8010ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd0:	4b90      	ldr	r3, [pc, #576]	; (8010f14 <_dtoa_r+0x2f4>)
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	3303      	adds	r3, #3
 8010cd6:	e7f3      	b.n	8010cc0 <_dtoa_r+0xa0>
 8010cd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	ec51 0b17 	vmov	r0, r1, d7
 8010ce2:	eeb0 8a47 	vmov.f32	s16, s14
 8010ce6:	eef0 8a67 	vmov.f32	s17, s15
 8010cea:	2300      	movs	r3, #0
 8010cec:	f7ef fef4 	bl	8000ad8 <__aeabi_dcmpeq>
 8010cf0:	4681      	mov	r9, r0
 8010cf2:	b160      	cbz	r0, 8010d0e <_dtoa_r+0xee>
 8010cf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	6013      	str	r3, [r2, #0]
 8010cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	f000 8568 	beq.w	80117d2 <_dtoa_r+0xbb2>
 8010d02:	4b86      	ldr	r3, [pc, #536]	; (8010f1c <_dtoa_r+0x2fc>)
 8010d04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010d06:	6013      	str	r3, [r2, #0]
 8010d08:	3b01      	subs	r3, #1
 8010d0a:	9300      	str	r3, [sp, #0]
 8010d0c:	e7da      	b.n	8010cc4 <_dtoa_r+0xa4>
 8010d0e:	aa10      	add	r2, sp, #64	; 0x40
 8010d10:	a911      	add	r1, sp, #68	; 0x44
 8010d12:	4620      	mov	r0, r4
 8010d14:	eeb0 0a48 	vmov.f32	s0, s16
 8010d18:	eef0 0a68 	vmov.f32	s1, s17
 8010d1c:	f001 f8e0 	bl	8011ee0 <__d2b>
 8010d20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010d24:	4682      	mov	sl, r0
 8010d26:	2d00      	cmp	r5, #0
 8010d28:	d07f      	beq.n	8010e2a <_dtoa_r+0x20a>
 8010d2a:	ee18 3a90 	vmov	r3, s17
 8010d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010d36:	ec51 0b18 	vmov	r0, r1, d8
 8010d3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010d3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010d42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010d46:	4619      	mov	r1, r3
 8010d48:	2200      	movs	r2, #0
 8010d4a:	4b75      	ldr	r3, [pc, #468]	; (8010f20 <_dtoa_r+0x300>)
 8010d4c:	f7ef faa4 	bl	8000298 <__aeabi_dsub>
 8010d50:	a367      	add	r3, pc, #412	; (adr r3, 8010ef0 <_dtoa_r+0x2d0>)
 8010d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d56:	f7ef fc57 	bl	8000608 <__aeabi_dmul>
 8010d5a:	a367      	add	r3, pc, #412	; (adr r3, 8010ef8 <_dtoa_r+0x2d8>)
 8010d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d60:	f7ef fa9c 	bl	800029c <__adddf3>
 8010d64:	4606      	mov	r6, r0
 8010d66:	4628      	mov	r0, r5
 8010d68:	460f      	mov	r7, r1
 8010d6a:	f7ef fbe3 	bl	8000534 <__aeabi_i2d>
 8010d6e:	a364      	add	r3, pc, #400	; (adr r3, 8010f00 <_dtoa_r+0x2e0>)
 8010d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d74:	f7ef fc48 	bl	8000608 <__aeabi_dmul>
 8010d78:	4602      	mov	r2, r0
 8010d7a:	460b      	mov	r3, r1
 8010d7c:	4630      	mov	r0, r6
 8010d7e:	4639      	mov	r1, r7
 8010d80:	f7ef fa8c 	bl	800029c <__adddf3>
 8010d84:	4606      	mov	r6, r0
 8010d86:	460f      	mov	r7, r1
 8010d88:	f7ef feee 	bl	8000b68 <__aeabi_d2iz>
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	4683      	mov	fp, r0
 8010d90:	2300      	movs	r3, #0
 8010d92:	4630      	mov	r0, r6
 8010d94:	4639      	mov	r1, r7
 8010d96:	f7ef fea9 	bl	8000aec <__aeabi_dcmplt>
 8010d9a:	b148      	cbz	r0, 8010db0 <_dtoa_r+0x190>
 8010d9c:	4658      	mov	r0, fp
 8010d9e:	f7ef fbc9 	bl	8000534 <__aeabi_i2d>
 8010da2:	4632      	mov	r2, r6
 8010da4:	463b      	mov	r3, r7
 8010da6:	f7ef fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 8010daa:	b908      	cbnz	r0, 8010db0 <_dtoa_r+0x190>
 8010dac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010db0:	f1bb 0f16 	cmp.w	fp, #22
 8010db4:	d857      	bhi.n	8010e66 <_dtoa_r+0x246>
 8010db6:	4b5b      	ldr	r3, [pc, #364]	; (8010f24 <_dtoa_r+0x304>)
 8010db8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc0:	ec51 0b18 	vmov	r0, r1, d8
 8010dc4:	f7ef fe92 	bl	8000aec <__aeabi_dcmplt>
 8010dc8:	2800      	cmp	r0, #0
 8010dca:	d04e      	beq.n	8010e6a <_dtoa_r+0x24a>
 8010dcc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	930c      	str	r3, [sp, #48]	; 0x30
 8010dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010dd6:	1b5b      	subs	r3, r3, r5
 8010dd8:	1e5a      	subs	r2, r3, #1
 8010dda:	bf45      	ittet	mi
 8010ddc:	f1c3 0301 	rsbmi	r3, r3, #1
 8010de0:	9305      	strmi	r3, [sp, #20]
 8010de2:	2300      	movpl	r3, #0
 8010de4:	2300      	movmi	r3, #0
 8010de6:	9206      	str	r2, [sp, #24]
 8010de8:	bf54      	ite	pl
 8010dea:	9305      	strpl	r3, [sp, #20]
 8010dec:	9306      	strmi	r3, [sp, #24]
 8010dee:	f1bb 0f00 	cmp.w	fp, #0
 8010df2:	db3c      	blt.n	8010e6e <_dtoa_r+0x24e>
 8010df4:	9b06      	ldr	r3, [sp, #24]
 8010df6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010dfa:	445b      	add	r3, fp
 8010dfc:	9306      	str	r3, [sp, #24]
 8010dfe:	2300      	movs	r3, #0
 8010e00:	9308      	str	r3, [sp, #32]
 8010e02:	9b07      	ldr	r3, [sp, #28]
 8010e04:	2b09      	cmp	r3, #9
 8010e06:	d868      	bhi.n	8010eda <_dtoa_r+0x2ba>
 8010e08:	2b05      	cmp	r3, #5
 8010e0a:	bfc4      	itt	gt
 8010e0c:	3b04      	subgt	r3, #4
 8010e0e:	9307      	strgt	r3, [sp, #28]
 8010e10:	9b07      	ldr	r3, [sp, #28]
 8010e12:	f1a3 0302 	sub.w	r3, r3, #2
 8010e16:	bfcc      	ite	gt
 8010e18:	2500      	movgt	r5, #0
 8010e1a:	2501      	movle	r5, #1
 8010e1c:	2b03      	cmp	r3, #3
 8010e1e:	f200 8085 	bhi.w	8010f2c <_dtoa_r+0x30c>
 8010e22:	e8df f003 	tbb	[pc, r3]
 8010e26:	3b2e      	.short	0x3b2e
 8010e28:	5839      	.short	0x5839
 8010e2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010e2e:	441d      	add	r5, r3
 8010e30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010e34:	2b20      	cmp	r3, #32
 8010e36:	bfc1      	itttt	gt
 8010e38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010e3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010e40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010e44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010e48:	bfd6      	itet	le
 8010e4a:	f1c3 0320 	rsble	r3, r3, #32
 8010e4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010e52:	fa06 f003 	lslle.w	r0, r6, r3
 8010e56:	f7ef fb5d 	bl	8000514 <__aeabi_ui2d>
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010e60:	3d01      	subs	r5, #1
 8010e62:	920e      	str	r2, [sp, #56]	; 0x38
 8010e64:	e76f      	b.n	8010d46 <_dtoa_r+0x126>
 8010e66:	2301      	movs	r3, #1
 8010e68:	e7b3      	b.n	8010dd2 <_dtoa_r+0x1b2>
 8010e6a:	900c      	str	r0, [sp, #48]	; 0x30
 8010e6c:	e7b2      	b.n	8010dd4 <_dtoa_r+0x1b4>
 8010e6e:	9b05      	ldr	r3, [sp, #20]
 8010e70:	eba3 030b 	sub.w	r3, r3, fp
 8010e74:	9305      	str	r3, [sp, #20]
 8010e76:	f1cb 0300 	rsb	r3, fp, #0
 8010e7a:	9308      	str	r3, [sp, #32]
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e80:	e7bf      	b.n	8010e02 <_dtoa_r+0x1e2>
 8010e82:	2300      	movs	r3, #0
 8010e84:	9309      	str	r3, [sp, #36]	; 0x24
 8010e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	dc52      	bgt.n	8010f32 <_dtoa_r+0x312>
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	9301      	str	r3, [sp, #4]
 8010e90:	9304      	str	r3, [sp, #16]
 8010e92:	461a      	mov	r2, r3
 8010e94:	920a      	str	r2, [sp, #40]	; 0x28
 8010e96:	e00b      	b.n	8010eb0 <_dtoa_r+0x290>
 8010e98:	2301      	movs	r3, #1
 8010e9a:	e7f3      	b.n	8010e84 <_dtoa_r+0x264>
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ea2:	445b      	add	r3, fp
 8010ea4:	9301      	str	r3, [sp, #4]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	9304      	str	r3, [sp, #16]
 8010eac:	bfb8      	it	lt
 8010eae:	2301      	movlt	r3, #1
 8010eb0:	69e0      	ldr	r0, [r4, #28]
 8010eb2:	2100      	movs	r1, #0
 8010eb4:	2204      	movs	r2, #4
 8010eb6:	f102 0614 	add.w	r6, r2, #20
 8010eba:	429e      	cmp	r6, r3
 8010ebc:	d93d      	bls.n	8010f3a <_dtoa_r+0x31a>
 8010ebe:	6041      	str	r1, [r0, #4]
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	f000 fceb 	bl	801189c <_Balloc>
 8010ec6:	9000      	str	r0, [sp, #0]
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	d139      	bne.n	8010f40 <_dtoa_r+0x320>
 8010ecc:	4b16      	ldr	r3, [pc, #88]	; (8010f28 <_dtoa_r+0x308>)
 8010ece:	4602      	mov	r2, r0
 8010ed0:	f240 11af 	movw	r1, #431	; 0x1af
 8010ed4:	e6bd      	b.n	8010c52 <_dtoa_r+0x32>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	e7e1      	b.n	8010e9e <_dtoa_r+0x27e>
 8010eda:	2501      	movs	r5, #1
 8010edc:	2300      	movs	r3, #0
 8010ede:	9307      	str	r3, [sp, #28]
 8010ee0:	9509      	str	r5, [sp, #36]	; 0x24
 8010ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ee6:	9301      	str	r3, [sp, #4]
 8010ee8:	9304      	str	r3, [sp, #16]
 8010eea:	2200      	movs	r2, #0
 8010eec:	2312      	movs	r3, #18
 8010eee:	e7d1      	b.n	8010e94 <_dtoa_r+0x274>
 8010ef0:	636f4361 	.word	0x636f4361
 8010ef4:	3fd287a7 	.word	0x3fd287a7
 8010ef8:	8b60c8b3 	.word	0x8b60c8b3
 8010efc:	3fc68a28 	.word	0x3fc68a28
 8010f00:	509f79fb 	.word	0x509f79fb
 8010f04:	3fd34413 	.word	0x3fd34413
 8010f08:	08014215 	.word	0x08014215
 8010f0c:	0801422c 	.word	0x0801422c
 8010f10:	7ff00000 	.word	0x7ff00000
 8010f14:	08014211 	.word	0x08014211
 8010f18:	08014208 	.word	0x08014208
 8010f1c:	080141e5 	.word	0x080141e5
 8010f20:	3ff80000 	.word	0x3ff80000
 8010f24:	08014318 	.word	0x08014318
 8010f28:	08014284 	.word	0x08014284
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f30:	e7d7      	b.n	8010ee2 <_dtoa_r+0x2c2>
 8010f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f34:	9301      	str	r3, [sp, #4]
 8010f36:	9304      	str	r3, [sp, #16]
 8010f38:	e7ba      	b.n	8010eb0 <_dtoa_r+0x290>
 8010f3a:	3101      	adds	r1, #1
 8010f3c:	0052      	lsls	r2, r2, #1
 8010f3e:	e7ba      	b.n	8010eb6 <_dtoa_r+0x296>
 8010f40:	69e3      	ldr	r3, [r4, #28]
 8010f42:	9a00      	ldr	r2, [sp, #0]
 8010f44:	601a      	str	r2, [r3, #0]
 8010f46:	9b04      	ldr	r3, [sp, #16]
 8010f48:	2b0e      	cmp	r3, #14
 8010f4a:	f200 80a8 	bhi.w	801109e <_dtoa_r+0x47e>
 8010f4e:	2d00      	cmp	r5, #0
 8010f50:	f000 80a5 	beq.w	801109e <_dtoa_r+0x47e>
 8010f54:	f1bb 0f00 	cmp.w	fp, #0
 8010f58:	dd38      	ble.n	8010fcc <_dtoa_r+0x3ac>
 8010f5a:	4bc0      	ldr	r3, [pc, #768]	; (801125c <_dtoa_r+0x63c>)
 8010f5c:	f00b 020f 	and.w	r2, fp, #15
 8010f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010f68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010f6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010f70:	d019      	beq.n	8010fa6 <_dtoa_r+0x386>
 8010f72:	4bbb      	ldr	r3, [pc, #748]	; (8011260 <_dtoa_r+0x640>)
 8010f74:	ec51 0b18 	vmov	r0, r1, d8
 8010f78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010f7c:	f7ef fc6e 	bl	800085c <__aeabi_ddiv>
 8010f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f84:	f008 080f 	and.w	r8, r8, #15
 8010f88:	2503      	movs	r5, #3
 8010f8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011260 <_dtoa_r+0x640>
 8010f8e:	f1b8 0f00 	cmp.w	r8, #0
 8010f92:	d10a      	bne.n	8010faa <_dtoa_r+0x38a>
 8010f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f98:	4632      	mov	r2, r6
 8010f9a:	463b      	mov	r3, r7
 8010f9c:	f7ef fc5e 	bl	800085c <__aeabi_ddiv>
 8010fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fa4:	e02b      	b.n	8010ffe <_dtoa_r+0x3de>
 8010fa6:	2502      	movs	r5, #2
 8010fa8:	e7ef      	b.n	8010f8a <_dtoa_r+0x36a>
 8010faa:	f018 0f01 	tst.w	r8, #1
 8010fae:	d008      	beq.n	8010fc2 <_dtoa_r+0x3a2>
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	4639      	mov	r1, r7
 8010fb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010fb8:	f7ef fb26 	bl	8000608 <__aeabi_dmul>
 8010fbc:	3501      	adds	r5, #1
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	460f      	mov	r7, r1
 8010fc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010fc6:	f109 0908 	add.w	r9, r9, #8
 8010fca:	e7e0      	b.n	8010f8e <_dtoa_r+0x36e>
 8010fcc:	f000 809f 	beq.w	801110e <_dtoa_r+0x4ee>
 8010fd0:	f1cb 0600 	rsb	r6, fp, #0
 8010fd4:	4ba1      	ldr	r3, [pc, #644]	; (801125c <_dtoa_r+0x63c>)
 8010fd6:	4fa2      	ldr	r7, [pc, #648]	; (8011260 <_dtoa_r+0x640>)
 8010fd8:	f006 020f 	and.w	r2, r6, #15
 8010fdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe4:	ec51 0b18 	vmov	r0, r1, d8
 8010fe8:	f7ef fb0e 	bl	8000608 <__aeabi_dmul>
 8010fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ff0:	1136      	asrs	r6, r6, #4
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	2502      	movs	r5, #2
 8010ff6:	2e00      	cmp	r6, #0
 8010ff8:	d17e      	bne.n	80110f8 <_dtoa_r+0x4d8>
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d1d0      	bne.n	8010fa0 <_dtoa_r+0x380>
 8010ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011000:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011004:	2b00      	cmp	r3, #0
 8011006:	f000 8084 	beq.w	8011112 <_dtoa_r+0x4f2>
 801100a:	4b96      	ldr	r3, [pc, #600]	; (8011264 <_dtoa_r+0x644>)
 801100c:	2200      	movs	r2, #0
 801100e:	4640      	mov	r0, r8
 8011010:	4649      	mov	r1, r9
 8011012:	f7ef fd6b 	bl	8000aec <__aeabi_dcmplt>
 8011016:	2800      	cmp	r0, #0
 8011018:	d07b      	beq.n	8011112 <_dtoa_r+0x4f2>
 801101a:	9b04      	ldr	r3, [sp, #16]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d078      	beq.n	8011112 <_dtoa_r+0x4f2>
 8011020:	9b01      	ldr	r3, [sp, #4]
 8011022:	2b00      	cmp	r3, #0
 8011024:	dd39      	ble.n	801109a <_dtoa_r+0x47a>
 8011026:	4b90      	ldr	r3, [pc, #576]	; (8011268 <_dtoa_r+0x648>)
 8011028:	2200      	movs	r2, #0
 801102a:	4640      	mov	r0, r8
 801102c:	4649      	mov	r1, r9
 801102e:	f7ef faeb 	bl	8000608 <__aeabi_dmul>
 8011032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011036:	9e01      	ldr	r6, [sp, #4]
 8011038:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801103c:	3501      	adds	r5, #1
 801103e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011042:	4628      	mov	r0, r5
 8011044:	f7ef fa76 	bl	8000534 <__aeabi_i2d>
 8011048:	4642      	mov	r2, r8
 801104a:	464b      	mov	r3, r9
 801104c:	f7ef fadc 	bl	8000608 <__aeabi_dmul>
 8011050:	4b86      	ldr	r3, [pc, #536]	; (801126c <_dtoa_r+0x64c>)
 8011052:	2200      	movs	r2, #0
 8011054:	f7ef f922 	bl	800029c <__adddf3>
 8011058:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801105c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011060:	9303      	str	r3, [sp, #12]
 8011062:	2e00      	cmp	r6, #0
 8011064:	d158      	bne.n	8011118 <_dtoa_r+0x4f8>
 8011066:	4b82      	ldr	r3, [pc, #520]	; (8011270 <_dtoa_r+0x650>)
 8011068:	2200      	movs	r2, #0
 801106a:	4640      	mov	r0, r8
 801106c:	4649      	mov	r1, r9
 801106e:	f7ef f913 	bl	8000298 <__aeabi_dsub>
 8011072:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011076:	4680      	mov	r8, r0
 8011078:	4689      	mov	r9, r1
 801107a:	f7ef fd55 	bl	8000b28 <__aeabi_dcmpgt>
 801107e:	2800      	cmp	r0, #0
 8011080:	f040 8296 	bne.w	80115b0 <_dtoa_r+0x990>
 8011084:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011088:	4640      	mov	r0, r8
 801108a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801108e:	4649      	mov	r1, r9
 8011090:	f7ef fd2c 	bl	8000aec <__aeabi_dcmplt>
 8011094:	2800      	cmp	r0, #0
 8011096:	f040 8289 	bne.w	80115ac <_dtoa_r+0x98c>
 801109a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801109e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	f2c0 814e 	blt.w	8011342 <_dtoa_r+0x722>
 80110a6:	f1bb 0f0e 	cmp.w	fp, #14
 80110aa:	f300 814a 	bgt.w	8011342 <_dtoa_r+0x722>
 80110ae:	4b6b      	ldr	r3, [pc, #428]	; (801125c <_dtoa_r+0x63c>)
 80110b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80110b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80110b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	f280 80dc 	bge.w	8011278 <_dtoa_r+0x658>
 80110c0:	9b04      	ldr	r3, [sp, #16]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	f300 80d8 	bgt.w	8011278 <_dtoa_r+0x658>
 80110c8:	f040 826f 	bne.w	80115aa <_dtoa_r+0x98a>
 80110cc:	4b68      	ldr	r3, [pc, #416]	; (8011270 <_dtoa_r+0x650>)
 80110ce:	2200      	movs	r2, #0
 80110d0:	4640      	mov	r0, r8
 80110d2:	4649      	mov	r1, r9
 80110d4:	f7ef fa98 	bl	8000608 <__aeabi_dmul>
 80110d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110dc:	f7ef fd1a 	bl	8000b14 <__aeabi_dcmpge>
 80110e0:	9e04      	ldr	r6, [sp, #16]
 80110e2:	4637      	mov	r7, r6
 80110e4:	2800      	cmp	r0, #0
 80110e6:	f040 8245 	bne.w	8011574 <_dtoa_r+0x954>
 80110ea:	9d00      	ldr	r5, [sp, #0]
 80110ec:	2331      	movs	r3, #49	; 0x31
 80110ee:	f805 3b01 	strb.w	r3, [r5], #1
 80110f2:	f10b 0b01 	add.w	fp, fp, #1
 80110f6:	e241      	b.n	801157c <_dtoa_r+0x95c>
 80110f8:	07f2      	lsls	r2, r6, #31
 80110fa:	d505      	bpl.n	8011108 <_dtoa_r+0x4e8>
 80110fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011100:	f7ef fa82 	bl	8000608 <__aeabi_dmul>
 8011104:	3501      	adds	r5, #1
 8011106:	2301      	movs	r3, #1
 8011108:	1076      	asrs	r6, r6, #1
 801110a:	3708      	adds	r7, #8
 801110c:	e773      	b.n	8010ff6 <_dtoa_r+0x3d6>
 801110e:	2502      	movs	r5, #2
 8011110:	e775      	b.n	8010ffe <_dtoa_r+0x3de>
 8011112:	9e04      	ldr	r6, [sp, #16]
 8011114:	465f      	mov	r7, fp
 8011116:	e792      	b.n	801103e <_dtoa_r+0x41e>
 8011118:	9900      	ldr	r1, [sp, #0]
 801111a:	4b50      	ldr	r3, [pc, #320]	; (801125c <_dtoa_r+0x63c>)
 801111c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011120:	4431      	add	r1, r6
 8011122:	9102      	str	r1, [sp, #8]
 8011124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011126:	eeb0 9a47 	vmov.f32	s18, s14
 801112a:	eef0 9a67 	vmov.f32	s19, s15
 801112e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011132:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011136:	2900      	cmp	r1, #0
 8011138:	d044      	beq.n	80111c4 <_dtoa_r+0x5a4>
 801113a:	494e      	ldr	r1, [pc, #312]	; (8011274 <_dtoa_r+0x654>)
 801113c:	2000      	movs	r0, #0
 801113e:	f7ef fb8d 	bl	800085c <__aeabi_ddiv>
 8011142:	ec53 2b19 	vmov	r2, r3, d9
 8011146:	f7ef f8a7 	bl	8000298 <__aeabi_dsub>
 801114a:	9d00      	ldr	r5, [sp, #0]
 801114c:	ec41 0b19 	vmov	d9, r0, r1
 8011150:	4649      	mov	r1, r9
 8011152:	4640      	mov	r0, r8
 8011154:	f7ef fd08 	bl	8000b68 <__aeabi_d2iz>
 8011158:	4606      	mov	r6, r0
 801115a:	f7ef f9eb 	bl	8000534 <__aeabi_i2d>
 801115e:	4602      	mov	r2, r0
 8011160:	460b      	mov	r3, r1
 8011162:	4640      	mov	r0, r8
 8011164:	4649      	mov	r1, r9
 8011166:	f7ef f897 	bl	8000298 <__aeabi_dsub>
 801116a:	3630      	adds	r6, #48	; 0x30
 801116c:	f805 6b01 	strb.w	r6, [r5], #1
 8011170:	ec53 2b19 	vmov	r2, r3, d9
 8011174:	4680      	mov	r8, r0
 8011176:	4689      	mov	r9, r1
 8011178:	f7ef fcb8 	bl	8000aec <__aeabi_dcmplt>
 801117c:	2800      	cmp	r0, #0
 801117e:	d164      	bne.n	801124a <_dtoa_r+0x62a>
 8011180:	4642      	mov	r2, r8
 8011182:	464b      	mov	r3, r9
 8011184:	4937      	ldr	r1, [pc, #220]	; (8011264 <_dtoa_r+0x644>)
 8011186:	2000      	movs	r0, #0
 8011188:	f7ef f886 	bl	8000298 <__aeabi_dsub>
 801118c:	ec53 2b19 	vmov	r2, r3, d9
 8011190:	f7ef fcac 	bl	8000aec <__aeabi_dcmplt>
 8011194:	2800      	cmp	r0, #0
 8011196:	f040 80b6 	bne.w	8011306 <_dtoa_r+0x6e6>
 801119a:	9b02      	ldr	r3, [sp, #8]
 801119c:	429d      	cmp	r5, r3
 801119e:	f43f af7c 	beq.w	801109a <_dtoa_r+0x47a>
 80111a2:	4b31      	ldr	r3, [pc, #196]	; (8011268 <_dtoa_r+0x648>)
 80111a4:	ec51 0b19 	vmov	r0, r1, d9
 80111a8:	2200      	movs	r2, #0
 80111aa:	f7ef fa2d 	bl	8000608 <__aeabi_dmul>
 80111ae:	4b2e      	ldr	r3, [pc, #184]	; (8011268 <_dtoa_r+0x648>)
 80111b0:	ec41 0b19 	vmov	d9, r0, r1
 80111b4:	2200      	movs	r2, #0
 80111b6:	4640      	mov	r0, r8
 80111b8:	4649      	mov	r1, r9
 80111ba:	f7ef fa25 	bl	8000608 <__aeabi_dmul>
 80111be:	4680      	mov	r8, r0
 80111c0:	4689      	mov	r9, r1
 80111c2:	e7c5      	b.n	8011150 <_dtoa_r+0x530>
 80111c4:	ec51 0b17 	vmov	r0, r1, d7
 80111c8:	f7ef fa1e 	bl	8000608 <__aeabi_dmul>
 80111cc:	9b02      	ldr	r3, [sp, #8]
 80111ce:	9d00      	ldr	r5, [sp, #0]
 80111d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80111d2:	ec41 0b19 	vmov	d9, r0, r1
 80111d6:	4649      	mov	r1, r9
 80111d8:	4640      	mov	r0, r8
 80111da:	f7ef fcc5 	bl	8000b68 <__aeabi_d2iz>
 80111de:	4606      	mov	r6, r0
 80111e0:	f7ef f9a8 	bl	8000534 <__aeabi_i2d>
 80111e4:	3630      	adds	r6, #48	; 0x30
 80111e6:	4602      	mov	r2, r0
 80111e8:	460b      	mov	r3, r1
 80111ea:	4640      	mov	r0, r8
 80111ec:	4649      	mov	r1, r9
 80111ee:	f7ef f853 	bl	8000298 <__aeabi_dsub>
 80111f2:	f805 6b01 	strb.w	r6, [r5], #1
 80111f6:	9b02      	ldr	r3, [sp, #8]
 80111f8:	429d      	cmp	r5, r3
 80111fa:	4680      	mov	r8, r0
 80111fc:	4689      	mov	r9, r1
 80111fe:	f04f 0200 	mov.w	r2, #0
 8011202:	d124      	bne.n	801124e <_dtoa_r+0x62e>
 8011204:	4b1b      	ldr	r3, [pc, #108]	; (8011274 <_dtoa_r+0x654>)
 8011206:	ec51 0b19 	vmov	r0, r1, d9
 801120a:	f7ef f847 	bl	800029c <__adddf3>
 801120e:	4602      	mov	r2, r0
 8011210:	460b      	mov	r3, r1
 8011212:	4640      	mov	r0, r8
 8011214:	4649      	mov	r1, r9
 8011216:	f7ef fc87 	bl	8000b28 <__aeabi_dcmpgt>
 801121a:	2800      	cmp	r0, #0
 801121c:	d173      	bne.n	8011306 <_dtoa_r+0x6e6>
 801121e:	ec53 2b19 	vmov	r2, r3, d9
 8011222:	4914      	ldr	r1, [pc, #80]	; (8011274 <_dtoa_r+0x654>)
 8011224:	2000      	movs	r0, #0
 8011226:	f7ef f837 	bl	8000298 <__aeabi_dsub>
 801122a:	4602      	mov	r2, r0
 801122c:	460b      	mov	r3, r1
 801122e:	4640      	mov	r0, r8
 8011230:	4649      	mov	r1, r9
 8011232:	f7ef fc5b 	bl	8000aec <__aeabi_dcmplt>
 8011236:	2800      	cmp	r0, #0
 8011238:	f43f af2f 	beq.w	801109a <_dtoa_r+0x47a>
 801123c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801123e:	1e6b      	subs	r3, r5, #1
 8011240:	930f      	str	r3, [sp, #60]	; 0x3c
 8011242:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011246:	2b30      	cmp	r3, #48	; 0x30
 8011248:	d0f8      	beq.n	801123c <_dtoa_r+0x61c>
 801124a:	46bb      	mov	fp, r7
 801124c:	e04a      	b.n	80112e4 <_dtoa_r+0x6c4>
 801124e:	4b06      	ldr	r3, [pc, #24]	; (8011268 <_dtoa_r+0x648>)
 8011250:	f7ef f9da 	bl	8000608 <__aeabi_dmul>
 8011254:	4680      	mov	r8, r0
 8011256:	4689      	mov	r9, r1
 8011258:	e7bd      	b.n	80111d6 <_dtoa_r+0x5b6>
 801125a:	bf00      	nop
 801125c:	08014318 	.word	0x08014318
 8011260:	080142f0 	.word	0x080142f0
 8011264:	3ff00000 	.word	0x3ff00000
 8011268:	40240000 	.word	0x40240000
 801126c:	401c0000 	.word	0x401c0000
 8011270:	40140000 	.word	0x40140000
 8011274:	3fe00000 	.word	0x3fe00000
 8011278:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801127c:	9d00      	ldr	r5, [sp, #0]
 801127e:	4642      	mov	r2, r8
 8011280:	464b      	mov	r3, r9
 8011282:	4630      	mov	r0, r6
 8011284:	4639      	mov	r1, r7
 8011286:	f7ef fae9 	bl	800085c <__aeabi_ddiv>
 801128a:	f7ef fc6d 	bl	8000b68 <__aeabi_d2iz>
 801128e:	9001      	str	r0, [sp, #4]
 8011290:	f7ef f950 	bl	8000534 <__aeabi_i2d>
 8011294:	4642      	mov	r2, r8
 8011296:	464b      	mov	r3, r9
 8011298:	f7ef f9b6 	bl	8000608 <__aeabi_dmul>
 801129c:	4602      	mov	r2, r0
 801129e:	460b      	mov	r3, r1
 80112a0:	4630      	mov	r0, r6
 80112a2:	4639      	mov	r1, r7
 80112a4:	f7ee fff8 	bl	8000298 <__aeabi_dsub>
 80112a8:	9e01      	ldr	r6, [sp, #4]
 80112aa:	9f04      	ldr	r7, [sp, #16]
 80112ac:	3630      	adds	r6, #48	; 0x30
 80112ae:	f805 6b01 	strb.w	r6, [r5], #1
 80112b2:	9e00      	ldr	r6, [sp, #0]
 80112b4:	1bae      	subs	r6, r5, r6
 80112b6:	42b7      	cmp	r7, r6
 80112b8:	4602      	mov	r2, r0
 80112ba:	460b      	mov	r3, r1
 80112bc:	d134      	bne.n	8011328 <_dtoa_r+0x708>
 80112be:	f7ee ffed 	bl	800029c <__adddf3>
 80112c2:	4642      	mov	r2, r8
 80112c4:	464b      	mov	r3, r9
 80112c6:	4606      	mov	r6, r0
 80112c8:	460f      	mov	r7, r1
 80112ca:	f7ef fc2d 	bl	8000b28 <__aeabi_dcmpgt>
 80112ce:	b9c8      	cbnz	r0, 8011304 <_dtoa_r+0x6e4>
 80112d0:	4642      	mov	r2, r8
 80112d2:	464b      	mov	r3, r9
 80112d4:	4630      	mov	r0, r6
 80112d6:	4639      	mov	r1, r7
 80112d8:	f7ef fbfe 	bl	8000ad8 <__aeabi_dcmpeq>
 80112dc:	b110      	cbz	r0, 80112e4 <_dtoa_r+0x6c4>
 80112de:	9b01      	ldr	r3, [sp, #4]
 80112e0:	07db      	lsls	r3, r3, #31
 80112e2:	d40f      	bmi.n	8011304 <_dtoa_r+0x6e4>
 80112e4:	4651      	mov	r1, sl
 80112e6:	4620      	mov	r0, r4
 80112e8:	f000 fb18 	bl	801191c <_Bfree>
 80112ec:	2300      	movs	r3, #0
 80112ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80112f0:	702b      	strb	r3, [r5, #0]
 80112f2:	f10b 0301 	add.w	r3, fp, #1
 80112f6:	6013      	str	r3, [r2, #0]
 80112f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f43f ace2 	beq.w	8010cc4 <_dtoa_r+0xa4>
 8011300:	601d      	str	r5, [r3, #0]
 8011302:	e4df      	b.n	8010cc4 <_dtoa_r+0xa4>
 8011304:	465f      	mov	r7, fp
 8011306:	462b      	mov	r3, r5
 8011308:	461d      	mov	r5, r3
 801130a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801130e:	2a39      	cmp	r2, #57	; 0x39
 8011310:	d106      	bne.n	8011320 <_dtoa_r+0x700>
 8011312:	9a00      	ldr	r2, [sp, #0]
 8011314:	429a      	cmp	r2, r3
 8011316:	d1f7      	bne.n	8011308 <_dtoa_r+0x6e8>
 8011318:	9900      	ldr	r1, [sp, #0]
 801131a:	2230      	movs	r2, #48	; 0x30
 801131c:	3701      	adds	r7, #1
 801131e:	700a      	strb	r2, [r1, #0]
 8011320:	781a      	ldrb	r2, [r3, #0]
 8011322:	3201      	adds	r2, #1
 8011324:	701a      	strb	r2, [r3, #0]
 8011326:	e790      	b.n	801124a <_dtoa_r+0x62a>
 8011328:	4ba3      	ldr	r3, [pc, #652]	; (80115b8 <_dtoa_r+0x998>)
 801132a:	2200      	movs	r2, #0
 801132c:	f7ef f96c 	bl	8000608 <__aeabi_dmul>
 8011330:	2200      	movs	r2, #0
 8011332:	2300      	movs	r3, #0
 8011334:	4606      	mov	r6, r0
 8011336:	460f      	mov	r7, r1
 8011338:	f7ef fbce 	bl	8000ad8 <__aeabi_dcmpeq>
 801133c:	2800      	cmp	r0, #0
 801133e:	d09e      	beq.n	801127e <_dtoa_r+0x65e>
 8011340:	e7d0      	b.n	80112e4 <_dtoa_r+0x6c4>
 8011342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011344:	2a00      	cmp	r2, #0
 8011346:	f000 80ca 	beq.w	80114de <_dtoa_r+0x8be>
 801134a:	9a07      	ldr	r2, [sp, #28]
 801134c:	2a01      	cmp	r2, #1
 801134e:	f300 80ad 	bgt.w	80114ac <_dtoa_r+0x88c>
 8011352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011354:	2a00      	cmp	r2, #0
 8011356:	f000 80a5 	beq.w	80114a4 <_dtoa_r+0x884>
 801135a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801135e:	9e08      	ldr	r6, [sp, #32]
 8011360:	9d05      	ldr	r5, [sp, #20]
 8011362:	9a05      	ldr	r2, [sp, #20]
 8011364:	441a      	add	r2, r3
 8011366:	9205      	str	r2, [sp, #20]
 8011368:	9a06      	ldr	r2, [sp, #24]
 801136a:	2101      	movs	r1, #1
 801136c:	441a      	add	r2, r3
 801136e:	4620      	mov	r0, r4
 8011370:	9206      	str	r2, [sp, #24]
 8011372:	f000 fb89 	bl	8011a88 <__i2b>
 8011376:	4607      	mov	r7, r0
 8011378:	b165      	cbz	r5, 8011394 <_dtoa_r+0x774>
 801137a:	9b06      	ldr	r3, [sp, #24]
 801137c:	2b00      	cmp	r3, #0
 801137e:	dd09      	ble.n	8011394 <_dtoa_r+0x774>
 8011380:	42ab      	cmp	r3, r5
 8011382:	9a05      	ldr	r2, [sp, #20]
 8011384:	bfa8      	it	ge
 8011386:	462b      	movge	r3, r5
 8011388:	1ad2      	subs	r2, r2, r3
 801138a:	9205      	str	r2, [sp, #20]
 801138c:	9a06      	ldr	r2, [sp, #24]
 801138e:	1aed      	subs	r5, r5, r3
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	9306      	str	r3, [sp, #24]
 8011394:	9b08      	ldr	r3, [sp, #32]
 8011396:	b1f3      	cbz	r3, 80113d6 <_dtoa_r+0x7b6>
 8011398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801139a:	2b00      	cmp	r3, #0
 801139c:	f000 80a3 	beq.w	80114e6 <_dtoa_r+0x8c6>
 80113a0:	2e00      	cmp	r6, #0
 80113a2:	dd10      	ble.n	80113c6 <_dtoa_r+0x7a6>
 80113a4:	4639      	mov	r1, r7
 80113a6:	4632      	mov	r2, r6
 80113a8:	4620      	mov	r0, r4
 80113aa:	f000 fc2d 	bl	8011c08 <__pow5mult>
 80113ae:	4652      	mov	r2, sl
 80113b0:	4601      	mov	r1, r0
 80113b2:	4607      	mov	r7, r0
 80113b4:	4620      	mov	r0, r4
 80113b6:	f000 fb7d 	bl	8011ab4 <__multiply>
 80113ba:	4651      	mov	r1, sl
 80113bc:	4680      	mov	r8, r0
 80113be:	4620      	mov	r0, r4
 80113c0:	f000 faac 	bl	801191c <_Bfree>
 80113c4:	46c2      	mov	sl, r8
 80113c6:	9b08      	ldr	r3, [sp, #32]
 80113c8:	1b9a      	subs	r2, r3, r6
 80113ca:	d004      	beq.n	80113d6 <_dtoa_r+0x7b6>
 80113cc:	4651      	mov	r1, sl
 80113ce:	4620      	mov	r0, r4
 80113d0:	f000 fc1a 	bl	8011c08 <__pow5mult>
 80113d4:	4682      	mov	sl, r0
 80113d6:	2101      	movs	r1, #1
 80113d8:	4620      	mov	r0, r4
 80113da:	f000 fb55 	bl	8011a88 <__i2b>
 80113de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	4606      	mov	r6, r0
 80113e4:	f340 8081 	ble.w	80114ea <_dtoa_r+0x8ca>
 80113e8:	461a      	mov	r2, r3
 80113ea:	4601      	mov	r1, r0
 80113ec:	4620      	mov	r0, r4
 80113ee:	f000 fc0b 	bl	8011c08 <__pow5mult>
 80113f2:	9b07      	ldr	r3, [sp, #28]
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	4606      	mov	r6, r0
 80113f8:	dd7a      	ble.n	80114f0 <_dtoa_r+0x8d0>
 80113fa:	f04f 0800 	mov.w	r8, #0
 80113fe:	6933      	ldr	r3, [r6, #16]
 8011400:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011404:	6918      	ldr	r0, [r3, #16]
 8011406:	f000 faf1 	bl	80119ec <__hi0bits>
 801140a:	f1c0 0020 	rsb	r0, r0, #32
 801140e:	9b06      	ldr	r3, [sp, #24]
 8011410:	4418      	add	r0, r3
 8011412:	f010 001f 	ands.w	r0, r0, #31
 8011416:	f000 8094 	beq.w	8011542 <_dtoa_r+0x922>
 801141a:	f1c0 0320 	rsb	r3, r0, #32
 801141e:	2b04      	cmp	r3, #4
 8011420:	f340 8085 	ble.w	801152e <_dtoa_r+0x90e>
 8011424:	9b05      	ldr	r3, [sp, #20]
 8011426:	f1c0 001c 	rsb	r0, r0, #28
 801142a:	4403      	add	r3, r0
 801142c:	9305      	str	r3, [sp, #20]
 801142e:	9b06      	ldr	r3, [sp, #24]
 8011430:	4403      	add	r3, r0
 8011432:	4405      	add	r5, r0
 8011434:	9306      	str	r3, [sp, #24]
 8011436:	9b05      	ldr	r3, [sp, #20]
 8011438:	2b00      	cmp	r3, #0
 801143a:	dd05      	ble.n	8011448 <_dtoa_r+0x828>
 801143c:	4651      	mov	r1, sl
 801143e:	461a      	mov	r2, r3
 8011440:	4620      	mov	r0, r4
 8011442:	f000 fc3b 	bl	8011cbc <__lshift>
 8011446:	4682      	mov	sl, r0
 8011448:	9b06      	ldr	r3, [sp, #24]
 801144a:	2b00      	cmp	r3, #0
 801144c:	dd05      	ble.n	801145a <_dtoa_r+0x83a>
 801144e:	4631      	mov	r1, r6
 8011450:	461a      	mov	r2, r3
 8011452:	4620      	mov	r0, r4
 8011454:	f000 fc32 	bl	8011cbc <__lshift>
 8011458:	4606      	mov	r6, r0
 801145a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801145c:	2b00      	cmp	r3, #0
 801145e:	d072      	beq.n	8011546 <_dtoa_r+0x926>
 8011460:	4631      	mov	r1, r6
 8011462:	4650      	mov	r0, sl
 8011464:	f000 fc96 	bl	8011d94 <__mcmp>
 8011468:	2800      	cmp	r0, #0
 801146a:	da6c      	bge.n	8011546 <_dtoa_r+0x926>
 801146c:	2300      	movs	r3, #0
 801146e:	4651      	mov	r1, sl
 8011470:	220a      	movs	r2, #10
 8011472:	4620      	mov	r0, r4
 8011474:	f000 fa74 	bl	8011960 <__multadd>
 8011478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801147a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801147e:	4682      	mov	sl, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	f000 81b0 	beq.w	80117e6 <_dtoa_r+0xbc6>
 8011486:	2300      	movs	r3, #0
 8011488:	4639      	mov	r1, r7
 801148a:	220a      	movs	r2, #10
 801148c:	4620      	mov	r0, r4
 801148e:	f000 fa67 	bl	8011960 <__multadd>
 8011492:	9b01      	ldr	r3, [sp, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	4607      	mov	r7, r0
 8011498:	f300 8096 	bgt.w	80115c8 <_dtoa_r+0x9a8>
 801149c:	9b07      	ldr	r3, [sp, #28]
 801149e:	2b02      	cmp	r3, #2
 80114a0:	dc59      	bgt.n	8011556 <_dtoa_r+0x936>
 80114a2:	e091      	b.n	80115c8 <_dtoa_r+0x9a8>
 80114a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80114a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80114aa:	e758      	b.n	801135e <_dtoa_r+0x73e>
 80114ac:	9b04      	ldr	r3, [sp, #16]
 80114ae:	1e5e      	subs	r6, r3, #1
 80114b0:	9b08      	ldr	r3, [sp, #32]
 80114b2:	42b3      	cmp	r3, r6
 80114b4:	bfbf      	itttt	lt
 80114b6:	9b08      	ldrlt	r3, [sp, #32]
 80114b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80114ba:	9608      	strlt	r6, [sp, #32]
 80114bc:	1af3      	sublt	r3, r6, r3
 80114be:	bfb4      	ite	lt
 80114c0:	18d2      	addlt	r2, r2, r3
 80114c2:	1b9e      	subge	r6, r3, r6
 80114c4:	9b04      	ldr	r3, [sp, #16]
 80114c6:	bfbc      	itt	lt
 80114c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80114ca:	2600      	movlt	r6, #0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	bfb7      	itett	lt
 80114d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80114d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80114d8:	1a9d      	sublt	r5, r3, r2
 80114da:	2300      	movlt	r3, #0
 80114dc:	e741      	b.n	8011362 <_dtoa_r+0x742>
 80114de:	9e08      	ldr	r6, [sp, #32]
 80114e0:	9d05      	ldr	r5, [sp, #20]
 80114e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80114e4:	e748      	b.n	8011378 <_dtoa_r+0x758>
 80114e6:	9a08      	ldr	r2, [sp, #32]
 80114e8:	e770      	b.n	80113cc <_dtoa_r+0x7ac>
 80114ea:	9b07      	ldr	r3, [sp, #28]
 80114ec:	2b01      	cmp	r3, #1
 80114ee:	dc19      	bgt.n	8011524 <_dtoa_r+0x904>
 80114f0:	9b02      	ldr	r3, [sp, #8]
 80114f2:	b9bb      	cbnz	r3, 8011524 <_dtoa_r+0x904>
 80114f4:	9b03      	ldr	r3, [sp, #12]
 80114f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80114fa:	b99b      	cbnz	r3, 8011524 <_dtoa_r+0x904>
 80114fc:	9b03      	ldr	r3, [sp, #12]
 80114fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011502:	0d1b      	lsrs	r3, r3, #20
 8011504:	051b      	lsls	r3, r3, #20
 8011506:	b183      	cbz	r3, 801152a <_dtoa_r+0x90a>
 8011508:	9b05      	ldr	r3, [sp, #20]
 801150a:	3301      	adds	r3, #1
 801150c:	9305      	str	r3, [sp, #20]
 801150e:	9b06      	ldr	r3, [sp, #24]
 8011510:	3301      	adds	r3, #1
 8011512:	9306      	str	r3, [sp, #24]
 8011514:	f04f 0801 	mov.w	r8, #1
 8011518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801151a:	2b00      	cmp	r3, #0
 801151c:	f47f af6f 	bne.w	80113fe <_dtoa_r+0x7de>
 8011520:	2001      	movs	r0, #1
 8011522:	e774      	b.n	801140e <_dtoa_r+0x7ee>
 8011524:	f04f 0800 	mov.w	r8, #0
 8011528:	e7f6      	b.n	8011518 <_dtoa_r+0x8f8>
 801152a:	4698      	mov	r8, r3
 801152c:	e7f4      	b.n	8011518 <_dtoa_r+0x8f8>
 801152e:	d082      	beq.n	8011436 <_dtoa_r+0x816>
 8011530:	9a05      	ldr	r2, [sp, #20]
 8011532:	331c      	adds	r3, #28
 8011534:	441a      	add	r2, r3
 8011536:	9205      	str	r2, [sp, #20]
 8011538:	9a06      	ldr	r2, [sp, #24]
 801153a:	441a      	add	r2, r3
 801153c:	441d      	add	r5, r3
 801153e:	9206      	str	r2, [sp, #24]
 8011540:	e779      	b.n	8011436 <_dtoa_r+0x816>
 8011542:	4603      	mov	r3, r0
 8011544:	e7f4      	b.n	8011530 <_dtoa_r+0x910>
 8011546:	9b04      	ldr	r3, [sp, #16]
 8011548:	2b00      	cmp	r3, #0
 801154a:	dc37      	bgt.n	80115bc <_dtoa_r+0x99c>
 801154c:	9b07      	ldr	r3, [sp, #28]
 801154e:	2b02      	cmp	r3, #2
 8011550:	dd34      	ble.n	80115bc <_dtoa_r+0x99c>
 8011552:	9b04      	ldr	r3, [sp, #16]
 8011554:	9301      	str	r3, [sp, #4]
 8011556:	9b01      	ldr	r3, [sp, #4]
 8011558:	b963      	cbnz	r3, 8011574 <_dtoa_r+0x954>
 801155a:	4631      	mov	r1, r6
 801155c:	2205      	movs	r2, #5
 801155e:	4620      	mov	r0, r4
 8011560:	f000 f9fe 	bl	8011960 <__multadd>
 8011564:	4601      	mov	r1, r0
 8011566:	4606      	mov	r6, r0
 8011568:	4650      	mov	r0, sl
 801156a:	f000 fc13 	bl	8011d94 <__mcmp>
 801156e:	2800      	cmp	r0, #0
 8011570:	f73f adbb 	bgt.w	80110ea <_dtoa_r+0x4ca>
 8011574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011576:	9d00      	ldr	r5, [sp, #0]
 8011578:	ea6f 0b03 	mvn.w	fp, r3
 801157c:	f04f 0800 	mov.w	r8, #0
 8011580:	4631      	mov	r1, r6
 8011582:	4620      	mov	r0, r4
 8011584:	f000 f9ca 	bl	801191c <_Bfree>
 8011588:	2f00      	cmp	r7, #0
 801158a:	f43f aeab 	beq.w	80112e4 <_dtoa_r+0x6c4>
 801158e:	f1b8 0f00 	cmp.w	r8, #0
 8011592:	d005      	beq.n	80115a0 <_dtoa_r+0x980>
 8011594:	45b8      	cmp	r8, r7
 8011596:	d003      	beq.n	80115a0 <_dtoa_r+0x980>
 8011598:	4641      	mov	r1, r8
 801159a:	4620      	mov	r0, r4
 801159c:	f000 f9be 	bl	801191c <_Bfree>
 80115a0:	4639      	mov	r1, r7
 80115a2:	4620      	mov	r0, r4
 80115a4:	f000 f9ba 	bl	801191c <_Bfree>
 80115a8:	e69c      	b.n	80112e4 <_dtoa_r+0x6c4>
 80115aa:	2600      	movs	r6, #0
 80115ac:	4637      	mov	r7, r6
 80115ae:	e7e1      	b.n	8011574 <_dtoa_r+0x954>
 80115b0:	46bb      	mov	fp, r7
 80115b2:	4637      	mov	r7, r6
 80115b4:	e599      	b.n	80110ea <_dtoa_r+0x4ca>
 80115b6:	bf00      	nop
 80115b8:	40240000 	.word	0x40240000
 80115bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115be:	2b00      	cmp	r3, #0
 80115c0:	f000 80c8 	beq.w	8011754 <_dtoa_r+0xb34>
 80115c4:	9b04      	ldr	r3, [sp, #16]
 80115c6:	9301      	str	r3, [sp, #4]
 80115c8:	2d00      	cmp	r5, #0
 80115ca:	dd05      	ble.n	80115d8 <_dtoa_r+0x9b8>
 80115cc:	4639      	mov	r1, r7
 80115ce:	462a      	mov	r2, r5
 80115d0:	4620      	mov	r0, r4
 80115d2:	f000 fb73 	bl	8011cbc <__lshift>
 80115d6:	4607      	mov	r7, r0
 80115d8:	f1b8 0f00 	cmp.w	r8, #0
 80115dc:	d05b      	beq.n	8011696 <_dtoa_r+0xa76>
 80115de:	6879      	ldr	r1, [r7, #4]
 80115e0:	4620      	mov	r0, r4
 80115e2:	f000 f95b 	bl	801189c <_Balloc>
 80115e6:	4605      	mov	r5, r0
 80115e8:	b928      	cbnz	r0, 80115f6 <_dtoa_r+0x9d6>
 80115ea:	4b83      	ldr	r3, [pc, #524]	; (80117f8 <_dtoa_r+0xbd8>)
 80115ec:	4602      	mov	r2, r0
 80115ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80115f2:	f7ff bb2e 	b.w	8010c52 <_dtoa_r+0x32>
 80115f6:	693a      	ldr	r2, [r7, #16]
 80115f8:	3202      	adds	r2, #2
 80115fa:	0092      	lsls	r2, r2, #2
 80115fc:	f107 010c 	add.w	r1, r7, #12
 8011600:	300c      	adds	r0, #12
 8011602:	f7ff fa77 	bl	8010af4 <memcpy>
 8011606:	2201      	movs	r2, #1
 8011608:	4629      	mov	r1, r5
 801160a:	4620      	mov	r0, r4
 801160c:	f000 fb56 	bl	8011cbc <__lshift>
 8011610:	9b00      	ldr	r3, [sp, #0]
 8011612:	3301      	adds	r3, #1
 8011614:	9304      	str	r3, [sp, #16]
 8011616:	e9dd 2300 	ldrd	r2, r3, [sp]
 801161a:	4413      	add	r3, r2
 801161c:	9308      	str	r3, [sp, #32]
 801161e:	9b02      	ldr	r3, [sp, #8]
 8011620:	f003 0301 	and.w	r3, r3, #1
 8011624:	46b8      	mov	r8, r7
 8011626:	9306      	str	r3, [sp, #24]
 8011628:	4607      	mov	r7, r0
 801162a:	9b04      	ldr	r3, [sp, #16]
 801162c:	4631      	mov	r1, r6
 801162e:	3b01      	subs	r3, #1
 8011630:	4650      	mov	r0, sl
 8011632:	9301      	str	r3, [sp, #4]
 8011634:	f7ff fa6c 	bl	8010b10 <quorem>
 8011638:	4641      	mov	r1, r8
 801163a:	9002      	str	r0, [sp, #8]
 801163c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011640:	4650      	mov	r0, sl
 8011642:	f000 fba7 	bl	8011d94 <__mcmp>
 8011646:	463a      	mov	r2, r7
 8011648:	9005      	str	r0, [sp, #20]
 801164a:	4631      	mov	r1, r6
 801164c:	4620      	mov	r0, r4
 801164e:	f000 fbbd 	bl	8011dcc <__mdiff>
 8011652:	68c2      	ldr	r2, [r0, #12]
 8011654:	4605      	mov	r5, r0
 8011656:	bb02      	cbnz	r2, 801169a <_dtoa_r+0xa7a>
 8011658:	4601      	mov	r1, r0
 801165a:	4650      	mov	r0, sl
 801165c:	f000 fb9a 	bl	8011d94 <__mcmp>
 8011660:	4602      	mov	r2, r0
 8011662:	4629      	mov	r1, r5
 8011664:	4620      	mov	r0, r4
 8011666:	9209      	str	r2, [sp, #36]	; 0x24
 8011668:	f000 f958 	bl	801191c <_Bfree>
 801166c:	9b07      	ldr	r3, [sp, #28]
 801166e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011670:	9d04      	ldr	r5, [sp, #16]
 8011672:	ea43 0102 	orr.w	r1, r3, r2
 8011676:	9b06      	ldr	r3, [sp, #24]
 8011678:	4319      	orrs	r1, r3
 801167a:	d110      	bne.n	801169e <_dtoa_r+0xa7e>
 801167c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011680:	d029      	beq.n	80116d6 <_dtoa_r+0xab6>
 8011682:	9b05      	ldr	r3, [sp, #20]
 8011684:	2b00      	cmp	r3, #0
 8011686:	dd02      	ble.n	801168e <_dtoa_r+0xa6e>
 8011688:	9b02      	ldr	r3, [sp, #8]
 801168a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801168e:	9b01      	ldr	r3, [sp, #4]
 8011690:	f883 9000 	strb.w	r9, [r3]
 8011694:	e774      	b.n	8011580 <_dtoa_r+0x960>
 8011696:	4638      	mov	r0, r7
 8011698:	e7ba      	b.n	8011610 <_dtoa_r+0x9f0>
 801169a:	2201      	movs	r2, #1
 801169c:	e7e1      	b.n	8011662 <_dtoa_r+0xa42>
 801169e:	9b05      	ldr	r3, [sp, #20]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	db04      	blt.n	80116ae <_dtoa_r+0xa8e>
 80116a4:	9907      	ldr	r1, [sp, #28]
 80116a6:	430b      	orrs	r3, r1
 80116a8:	9906      	ldr	r1, [sp, #24]
 80116aa:	430b      	orrs	r3, r1
 80116ac:	d120      	bne.n	80116f0 <_dtoa_r+0xad0>
 80116ae:	2a00      	cmp	r2, #0
 80116b0:	dded      	ble.n	801168e <_dtoa_r+0xa6e>
 80116b2:	4651      	mov	r1, sl
 80116b4:	2201      	movs	r2, #1
 80116b6:	4620      	mov	r0, r4
 80116b8:	f000 fb00 	bl	8011cbc <__lshift>
 80116bc:	4631      	mov	r1, r6
 80116be:	4682      	mov	sl, r0
 80116c0:	f000 fb68 	bl	8011d94 <__mcmp>
 80116c4:	2800      	cmp	r0, #0
 80116c6:	dc03      	bgt.n	80116d0 <_dtoa_r+0xab0>
 80116c8:	d1e1      	bne.n	801168e <_dtoa_r+0xa6e>
 80116ca:	f019 0f01 	tst.w	r9, #1
 80116ce:	d0de      	beq.n	801168e <_dtoa_r+0xa6e>
 80116d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80116d4:	d1d8      	bne.n	8011688 <_dtoa_r+0xa68>
 80116d6:	9a01      	ldr	r2, [sp, #4]
 80116d8:	2339      	movs	r3, #57	; 0x39
 80116da:	7013      	strb	r3, [r2, #0]
 80116dc:	462b      	mov	r3, r5
 80116de:	461d      	mov	r5, r3
 80116e0:	3b01      	subs	r3, #1
 80116e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80116e6:	2a39      	cmp	r2, #57	; 0x39
 80116e8:	d06c      	beq.n	80117c4 <_dtoa_r+0xba4>
 80116ea:	3201      	adds	r2, #1
 80116ec:	701a      	strb	r2, [r3, #0]
 80116ee:	e747      	b.n	8011580 <_dtoa_r+0x960>
 80116f0:	2a00      	cmp	r2, #0
 80116f2:	dd07      	ble.n	8011704 <_dtoa_r+0xae4>
 80116f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80116f8:	d0ed      	beq.n	80116d6 <_dtoa_r+0xab6>
 80116fa:	9a01      	ldr	r2, [sp, #4]
 80116fc:	f109 0301 	add.w	r3, r9, #1
 8011700:	7013      	strb	r3, [r2, #0]
 8011702:	e73d      	b.n	8011580 <_dtoa_r+0x960>
 8011704:	9b04      	ldr	r3, [sp, #16]
 8011706:	9a08      	ldr	r2, [sp, #32]
 8011708:	f803 9c01 	strb.w	r9, [r3, #-1]
 801170c:	4293      	cmp	r3, r2
 801170e:	d043      	beq.n	8011798 <_dtoa_r+0xb78>
 8011710:	4651      	mov	r1, sl
 8011712:	2300      	movs	r3, #0
 8011714:	220a      	movs	r2, #10
 8011716:	4620      	mov	r0, r4
 8011718:	f000 f922 	bl	8011960 <__multadd>
 801171c:	45b8      	cmp	r8, r7
 801171e:	4682      	mov	sl, r0
 8011720:	f04f 0300 	mov.w	r3, #0
 8011724:	f04f 020a 	mov.w	r2, #10
 8011728:	4641      	mov	r1, r8
 801172a:	4620      	mov	r0, r4
 801172c:	d107      	bne.n	801173e <_dtoa_r+0xb1e>
 801172e:	f000 f917 	bl	8011960 <__multadd>
 8011732:	4680      	mov	r8, r0
 8011734:	4607      	mov	r7, r0
 8011736:	9b04      	ldr	r3, [sp, #16]
 8011738:	3301      	adds	r3, #1
 801173a:	9304      	str	r3, [sp, #16]
 801173c:	e775      	b.n	801162a <_dtoa_r+0xa0a>
 801173e:	f000 f90f 	bl	8011960 <__multadd>
 8011742:	4639      	mov	r1, r7
 8011744:	4680      	mov	r8, r0
 8011746:	2300      	movs	r3, #0
 8011748:	220a      	movs	r2, #10
 801174a:	4620      	mov	r0, r4
 801174c:	f000 f908 	bl	8011960 <__multadd>
 8011750:	4607      	mov	r7, r0
 8011752:	e7f0      	b.n	8011736 <_dtoa_r+0xb16>
 8011754:	9b04      	ldr	r3, [sp, #16]
 8011756:	9301      	str	r3, [sp, #4]
 8011758:	9d00      	ldr	r5, [sp, #0]
 801175a:	4631      	mov	r1, r6
 801175c:	4650      	mov	r0, sl
 801175e:	f7ff f9d7 	bl	8010b10 <quorem>
 8011762:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011766:	9b00      	ldr	r3, [sp, #0]
 8011768:	f805 9b01 	strb.w	r9, [r5], #1
 801176c:	1aea      	subs	r2, r5, r3
 801176e:	9b01      	ldr	r3, [sp, #4]
 8011770:	4293      	cmp	r3, r2
 8011772:	dd07      	ble.n	8011784 <_dtoa_r+0xb64>
 8011774:	4651      	mov	r1, sl
 8011776:	2300      	movs	r3, #0
 8011778:	220a      	movs	r2, #10
 801177a:	4620      	mov	r0, r4
 801177c:	f000 f8f0 	bl	8011960 <__multadd>
 8011780:	4682      	mov	sl, r0
 8011782:	e7ea      	b.n	801175a <_dtoa_r+0xb3a>
 8011784:	9b01      	ldr	r3, [sp, #4]
 8011786:	2b00      	cmp	r3, #0
 8011788:	bfc8      	it	gt
 801178a:	461d      	movgt	r5, r3
 801178c:	9b00      	ldr	r3, [sp, #0]
 801178e:	bfd8      	it	le
 8011790:	2501      	movle	r5, #1
 8011792:	441d      	add	r5, r3
 8011794:	f04f 0800 	mov.w	r8, #0
 8011798:	4651      	mov	r1, sl
 801179a:	2201      	movs	r2, #1
 801179c:	4620      	mov	r0, r4
 801179e:	f000 fa8d 	bl	8011cbc <__lshift>
 80117a2:	4631      	mov	r1, r6
 80117a4:	4682      	mov	sl, r0
 80117a6:	f000 faf5 	bl	8011d94 <__mcmp>
 80117aa:	2800      	cmp	r0, #0
 80117ac:	dc96      	bgt.n	80116dc <_dtoa_r+0xabc>
 80117ae:	d102      	bne.n	80117b6 <_dtoa_r+0xb96>
 80117b0:	f019 0f01 	tst.w	r9, #1
 80117b4:	d192      	bne.n	80116dc <_dtoa_r+0xabc>
 80117b6:	462b      	mov	r3, r5
 80117b8:	461d      	mov	r5, r3
 80117ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117be:	2a30      	cmp	r2, #48	; 0x30
 80117c0:	d0fa      	beq.n	80117b8 <_dtoa_r+0xb98>
 80117c2:	e6dd      	b.n	8011580 <_dtoa_r+0x960>
 80117c4:	9a00      	ldr	r2, [sp, #0]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d189      	bne.n	80116de <_dtoa_r+0xabe>
 80117ca:	f10b 0b01 	add.w	fp, fp, #1
 80117ce:	2331      	movs	r3, #49	; 0x31
 80117d0:	e796      	b.n	8011700 <_dtoa_r+0xae0>
 80117d2:	4b0a      	ldr	r3, [pc, #40]	; (80117fc <_dtoa_r+0xbdc>)
 80117d4:	f7ff ba99 	b.w	8010d0a <_dtoa_r+0xea>
 80117d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117da:	2b00      	cmp	r3, #0
 80117dc:	f47f aa6d 	bne.w	8010cba <_dtoa_r+0x9a>
 80117e0:	4b07      	ldr	r3, [pc, #28]	; (8011800 <_dtoa_r+0xbe0>)
 80117e2:	f7ff ba92 	b.w	8010d0a <_dtoa_r+0xea>
 80117e6:	9b01      	ldr	r3, [sp, #4]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	dcb5      	bgt.n	8011758 <_dtoa_r+0xb38>
 80117ec:	9b07      	ldr	r3, [sp, #28]
 80117ee:	2b02      	cmp	r3, #2
 80117f0:	f73f aeb1 	bgt.w	8011556 <_dtoa_r+0x936>
 80117f4:	e7b0      	b.n	8011758 <_dtoa_r+0xb38>
 80117f6:	bf00      	nop
 80117f8:	08014284 	.word	0x08014284
 80117fc:	080141e4 	.word	0x080141e4
 8011800:	08014208 	.word	0x08014208

08011804 <_free_r>:
 8011804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011806:	2900      	cmp	r1, #0
 8011808:	d044      	beq.n	8011894 <_free_r+0x90>
 801180a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801180e:	9001      	str	r0, [sp, #4]
 8011810:	2b00      	cmp	r3, #0
 8011812:	f1a1 0404 	sub.w	r4, r1, #4
 8011816:	bfb8      	it	lt
 8011818:	18e4      	addlt	r4, r4, r3
 801181a:	f7fe fb49 	bl	800feb0 <__malloc_lock>
 801181e:	4a1e      	ldr	r2, [pc, #120]	; (8011898 <_free_r+0x94>)
 8011820:	9801      	ldr	r0, [sp, #4]
 8011822:	6813      	ldr	r3, [r2, #0]
 8011824:	b933      	cbnz	r3, 8011834 <_free_r+0x30>
 8011826:	6063      	str	r3, [r4, #4]
 8011828:	6014      	str	r4, [r2, #0]
 801182a:	b003      	add	sp, #12
 801182c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011830:	f7fe bb44 	b.w	800febc <__malloc_unlock>
 8011834:	42a3      	cmp	r3, r4
 8011836:	d908      	bls.n	801184a <_free_r+0x46>
 8011838:	6825      	ldr	r5, [r4, #0]
 801183a:	1961      	adds	r1, r4, r5
 801183c:	428b      	cmp	r3, r1
 801183e:	bf01      	itttt	eq
 8011840:	6819      	ldreq	r1, [r3, #0]
 8011842:	685b      	ldreq	r3, [r3, #4]
 8011844:	1949      	addeq	r1, r1, r5
 8011846:	6021      	streq	r1, [r4, #0]
 8011848:	e7ed      	b.n	8011826 <_free_r+0x22>
 801184a:	461a      	mov	r2, r3
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	b10b      	cbz	r3, 8011854 <_free_r+0x50>
 8011850:	42a3      	cmp	r3, r4
 8011852:	d9fa      	bls.n	801184a <_free_r+0x46>
 8011854:	6811      	ldr	r1, [r2, #0]
 8011856:	1855      	adds	r5, r2, r1
 8011858:	42a5      	cmp	r5, r4
 801185a:	d10b      	bne.n	8011874 <_free_r+0x70>
 801185c:	6824      	ldr	r4, [r4, #0]
 801185e:	4421      	add	r1, r4
 8011860:	1854      	adds	r4, r2, r1
 8011862:	42a3      	cmp	r3, r4
 8011864:	6011      	str	r1, [r2, #0]
 8011866:	d1e0      	bne.n	801182a <_free_r+0x26>
 8011868:	681c      	ldr	r4, [r3, #0]
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	6053      	str	r3, [r2, #4]
 801186e:	440c      	add	r4, r1
 8011870:	6014      	str	r4, [r2, #0]
 8011872:	e7da      	b.n	801182a <_free_r+0x26>
 8011874:	d902      	bls.n	801187c <_free_r+0x78>
 8011876:	230c      	movs	r3, #12
 8011878:	6003      	str	r3, [r0, #0]
 801187a:	e7d6      	b.n	801182a <_free_r+0x26>
 801187c:	6825      	ldr	r5, [r4, #0]
 801187e:	1961      	adds	r1, r4, r5
 8011880:	428b      	cmp	r3, r1
 8011882:	bf04      	itt	eq
 8011884:	6819      	ldreq	r1, [r3, #0]
 8011886:	685b      	ldreq	r3, [r3, #4]
 8011888:	6063      	str	r3, [r4, #4]
 801188a:	bf04      	itt	eq
 801188c:	1949      	addeq	r1, r1, r5
 801188e:	6021      	streq	r1, [r4, #0]
 8011890:	6054      	str	r4, [r2, #4]
 8011892:	e7ca      	b.n	801182a <_free_r+0x26>
 8011894:	b003      	add	sp, #12
 8011896:	bd30      	pop	{r4, r5, pc}
 8011898:	20002290 	.word	0x20002290

0801189c <_Balloc>:
 801189c:	b570      	push	{r4, r5, r6, lr}
 801189e:	69c6      	ldr	r6, [r0, #28]
 80118a0:	4604      	mov	r4, r0
 80118a2:	460d      	mov	r5, r1
 80118a4:	b976      	cbnz	r6, 80118c4 <_Balloc+0x28>
 80118a6:	2010      	movs	r0, #16
 80118a8:	f7fe fa52 	bl	800fd50 <malloc>
 80118ac:	4602      	mov	r2, r0
 80118ae:	61e0      	str	r0, [r4, #28]
 80118b0:	b920      	cbnz	r0, 80118bc <_Balloc+0x20>
 80118b2:	4b18      	ldr	r3, [pc, #96]	; (8011914 <_Balloc+0x78>)
 80118b4:	4818      	ldr	r0, [pc, #96]	; (8011918 <_Balloc+0x7c>)
 80118b6:	216b      	movs	r1, #107	; 0x6b
 80118b8:	f000 fd8c 	bl	80123d4 <__assert_func>
 80118bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118c0:	6006      	str	r6, [r0, #0]
 80118c2:	60c6      	str	r6, [r0, #12]
 80118c4:	69e6      	ldr	r6, [r4, #28]
 80118c6:	68f3      	ldr	r3, [r6, #12]
 80118c8:	b183      	cbz	r3, 80118ec <_Balloc+0x50>
 80118ca:	69e3      	ldr	r3, [r4, #28]
 80118cc:	68db      	ldr	r3, [r3, #12]
 80118ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80118d2:	b9b8      	cbnz	r0, 8011904 <_Balloc+0x68>
 80118d4:	2101      	movs	r1, #1
 80118d6:	fa01 f605 	lsl.w	r6, r1, r5
 80118da:	1d72      	adds	r2, r6, #5
 80118dc:	0092      	lsls	r2, r2, #2
 80118de:	4620      	mov	r0, r4
 80118e0:	f000 fd96 	bl	8012410 <_calloc_r>
 80118e4:	b160      	cbz	r0, 8011900 <_Balloc+0x64>
 80118e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80118ea:	e00e      	b.n	801190a <_Balloc+0x6e>
 80118ec:	2221      	movs	r2, #33	; 0x21
 80118ee:	2104      	movs	r1, #4
 80118f0:	4620      	mov	r0, r4
 80118f2:	f000 fd8d 	bl	8012410 <_calloc_r>
 80118f6:	69e3      	ldr	r3, [r4, #28]
 80118f8:	60f0      	str	r0, [r6, #12]
 80118fa:	68db      	ldr	r3, [r3, #12]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d1e4      	bne.n	80118ca <_Balloc+0x2e>
 8011900:	2000      	movs	r0, #0
 8011902:	bd70      	pop	{r4, r5, r6, pc}
 8011904:	6802      	ldr	r2, [r0, #0]
 8011906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801190a:	2300      	movs	r3, #0
 801190c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011910:	e7f7      	b.n	8011902 <_Balloc+0x66>
 8011912:	bf00      	nop
 8011914:	08014215 	.word	0x08014215
 8011918:	08014295 	.word	0x08014295

0801191c <_Bfree>:
 801191c:	b570      	push	{r4, r5, r6, lr}
 801191e:	69c6      	ldr	r6, [r0, #28]
 8011920:	4605      	mov	r5, r0
 8011922:	460c      	mov	r4, r1
 8011924:	b976      	cbnz	r6, 8011944 <_Bfree+0x28>
 8011926:	2010      	movs	r0, #16
 8011928:	f7fe fa12 	bl	800fd50 <malloc>
 801192c:	4602      	mov	r2, r0
 801192e:	61e8      	str	r0, [r5, #28]
 8011930:	b920      	cbnz	r0, 801193c <_Bfree+0x20>
 8011932:	4b09      	ldr	r3, [pc, #36]	; (8011958 <_Bfree+0x3c>)
 8011934:	4809      	ldr	r0, [pc, #36]	; (801195c <_Bfree+0x40>)
 8011936:	218f      	movs	r1, #143	; 0x8f
 8011938:	f000 fd4c 	bl	80123d4 <__assert_func>
 801193c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011940:	6006      	str	r6, [r0, #0]
 8011942:	60c6      	str	r6, [r0, #12]
 8011944:	b13c      	cbz	r4, 8011956 <_Bfree+0x3a>
 8011946:	69eb      	ldr	r3, [r5, #28]
 8011948:	6862      	ldr	r2, [r4, #4]
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011950:	6021      	str	r1, [r4, #0]
 8011952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011956:	bd70      	pop	{r4, r5, r6, pc}
 8011958:	08014215 	.word	0x08014215
 801195c:	08014295 	.word	0x08014295

08011960 <__multadd>:
 8011960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011964:	690d      	ldr	r5, [r1, #16]
 8011966:	4607      	mov	r7, r0
 8011968:	460c      	mov	r4, r1
 801196a:	461e      	mov	r6, r3
 801196c:	f101 0c14 	add.w	ip, r1, #20
 8011970:	2000      	movs	r0, #0
 8011972:	f8dc 3000 	ldr.w	r3, [ip]
 8011976:	b299      	uxth	r1, r3
 8011978:	fb02 6101 	mla	r1, r2, r1, r6
 801197c:	0c1e      	lsrs	r6, r3, #16
 801197e:	0c0b      	lsrs	r3, r1, #16
 8011980:	fb02 3306 	mla	r3, r2, r6, r3
 8011984:	b289      	uxth	r1, r1
 8011986:	3001      	adds	r0, #1
 8011988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801198c:	4285      	cmp	r5, r0
 801198e:	f84c 1b04 	str.w	r1, [ip], #4
 8011992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011996:	dcec      	bgt.n	8011972 <__multadd+0x12>
 8011998:	b30e      	cbz	r6, 80119de <__multadd+0x7e>
 801199a:	68a3      	ldr	r3, [r4, #8]
 801199c:	42ab      	cmp	r3, r5
 801199e:	dc19      	bgt.n	80119d4 <__multadd+0x74>
 80119a0:	6861      	ldr	r1, [r4, #4]
 80119a2:	4638      	mov	r0, r7
 80119a4:	3101      	adds	r1, #1
 80119a6:	f7ff ff79 	bl	801189c <_Balloc>
 80119aa:	4680      	mov	r8, r0
 80119ac:	b928      	cbnz	r0, 80119ba <__multadd+0x5a>
 80119ae:	4602      	mov	r2, r0
 80119b0:	4b0c      	ldr	r3, [pc, #48]	; (80119e4 <__multadd+0x84>)
 80119b2:	480d      	ldr	r0, [pc, #52]	; (80119e8 <__multadd+0x88>)
 80119b4:	21ba      	movs	r1, #186	; 0xba
 80119b6:	f000 fd0d 	bl	80123d4 <__assert_func>
 80119ba:	6922      	ldr	r2, [r4, #16]
 80119bc:	3202      	adds	r2, #2
 80119be:	f104 010c 	add.w	r1, r4, #12
 80119c2:	0092      	lsls	r2, r2, #2
 80119c4:	300c      	adds	r0, #12
 80119c6:	f7ff f895 	bl	8010af4 <memcpy>
 80119ca:	4621      	mov	r1, r4
 80119cc:	4638      	mov	r0, r7
 80119ce:	f7ff ffa5 	bl	801191c <_Bfree>
 80119d2:	4644      	mov	r4, r8
 80119d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80119d8:	3501      	adds	r5, #1
 80119da:	615e      	str	r6, [r3, #20]
 80119dc:	6125      	str	r5, [r4, #16]
 80119de:	4620      	mov	r0, r4
 80119e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119e4:	08014284 	.word	0x08014284
 80119e8:	08014295 	.word	0x08014295

080119ec <__hi0bits>:
 80119ec:	0c03      	lsrs	r3, r0, #16
 80119ee:	041b      	lsls	r3, r3, #16
 80119f0:	b9d3      	cbnz	r3, 8011a28 <__hi0bits+0x3c>
 80119f2:	0400      	lsls	r0, r0, #16
 80119f4:	2310      	movs	r3, #16
 80119f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80119fa:	bf04      	itt	eq
 80119fc:	0200      	lsleq	r0, r0, #8
 80119fe:	3308      	addeq	r3, #8
 8011a00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011a04:	bf04      	itt	eq
 8011a06:	0100      	lsleq	r0, r0, #4
 8011a08:	3304      	addeq	r3, #4
 8011a0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011a0e:	bf04      	itt	eq
 8011a10:	0080      	lsleq	r0, r0, #2
 8011a12:	3302      	addeq	r3, #2
 8011a14:	2800      	cmp	r0, #0
 8011a16:	db05      	blt.n	8011a24 <__hi0bits+0x38>
 8011a18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011a1c:	f103 0301 	add.w	r3, r3, #1
 8011a20:	bf08      	it	eq
 8011a22:	2320      	moveq	r3, #32
 8011a24:	4618      	mov	r0, r3
 8011a26:	4770      	bx	lr
 8011a28:	2300      	movs	r3, #0
 8011a2a:	e7e4      	b.n	80119f6 <__hi0bits+0xa>

08011a2c <__lo0bits>:
 8011a2c:	6803      	ldr	r3, [r0, #0]
 8011a2e:	f013 0207 	ands.w	r2, r3, #7
 8011a32:	d00c      	beq.n	8011a4e <__lo0bits+0x22>
 8011a34:	07d9      	lsls	r1, r3, #31
 8011a36:	d422      	bmi.n	8011a7e <__lo0bits+0x52>
 8011a38:	079a      	lsls	r2, r3, #30
 8011a3a:	bf49      	itett	mi
 8011a3c:	085b      	lsrmi	r3, r3, #1
 8011a3e:	089b      	lsrpl	r3, r3, #2
 8011a40:	6003      	strmi	r3, [r0, #0]
 8011a42:	2201      	movmi	r2, #1
 8011a44:	bf5c      	itt	pl
 8011a46:	6003      	strpl	r3, [r0, #0]
 8011a48:	2202      	movpl	r2, #2
 8011a4a:	4610      	mov	r0, r2
 8011a4c:	4770      	bx	lr
 8011a4e:	b299      	uxth	r1, r3
 8011a50:	b909      	cbnz	r1, 8011a56 <__lo0bits+0x2a>
 8011a52:	0c1b      	lsrs	r3, r3, #16
 8011a54:	2210      	movs	r2, #16
 8011a56:	b2d9      	uxtb	r1, r3
 8011a58:	b909      	cbnz	r1, 8011a5e <__lo0bits+0x32>
 8011a5a:	3208      	adds	r2, #8
 8011a5c:	0a1b      	lsrs	r3, r3, #8
 8011a5e:	0719      	lsls	r1, r3, #28
 8011a60:	bf04      	itt	eq
 8011a62:	091b      	lsreq	r3, r3, #4
 8011a64:	3204      	addeq	r2, #4
 8011a66:	0799      	lsls	r1, r3, #30
 8011a68:	bf04      	itt	eq
 8011a6a:	089b      	lsreq	r3, r3, #2
 8011a6c:	3202      	addeq	r2, #2
 8011a6e:	07d9      	lsls	r1, r3, #31
 8011a70:	d403      	bmi.n	8011a7a <__lo0bits+0x4e>
 8011a72:	085b      	lsrs	r3, r3, #1
 8011a74:	f102 0201 	add.w	r2, r2, #1
 8011a78:	d003      	beq.n	8011a82 <__lo0bits+0x56>
 8011a7a:	6003      	str	r3, [r0, #0]
 8011a7c:	e7e5      	b.n	8011a4a <__lo0bits+0x1e>
 8011a7e:	2200      	movs	r2, #0
 8011a80:	e7e3      	b.n	8011a4a <__lo0bits+0x1e>
 8011a82:	2220      	movs	r2, #32
 8011a84:	e7e1      	b.n	8011a4a <__lo0bits+0x1e>
	...

08011a88 <__i2b>:
 8011a88:	b510      	push	{r4, lr}
 8011a8a:	460c      	mov	r4, r1
 8011a8c:	2101      	movs	r1, #1
 8011a8e:	f7ff ff05 	bl	801189c <_Balloc>
 8011a92:	4602      	mov	r2, r0
 8011a94:	b928      	cbnz	r0, 8011aa2 <__i2b+0x1a>
 8011a96:	4b05      	ldr	r3, [pc, #20]	; (8011aac <__i2b+0x24>)
 8011a98:	4805      	ldr	r0, [pc, #20]	; (8011ab0 <__i2b+0x28>)
 8011a9a:	f240 1145 	movw	r1, #325	; 0x145
 8011a9e:	f000 fc99 	bl	80123d4 <__assert_func>
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	6144      	str	r4, [r0, #20]
 8011aa6:	6103      	str	r3, [r0, #16]
 8011aa8:	bd10      	pop	{r4, pc}
 8011aaa:	bf00      	nop
 8011aac:	08014284 	.word	0x08014284
 8011ab0:	08014295 	.word	0x08014295

08011ab4 <__multiply>:
 8011ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab8:	4691      	mov	r9, r2
 8011aba:	690a      	ldr	r2, [r1, #16]
 8011abc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	bfb8      	it	lt
 8011ac4:	460b      	movlt	r3, r1
 8011ac6:	460c      	mov	r4, r1
 8011ac8:	bfbc      	itt	lt
 8011aca:	464c      	movlt	r4, r9
 8011acc:	4699      	movlt	r9, r3
 8011ace:	6927      	ldr	r7, [r4, #16]
 8011ad0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011ad4:	68a3      	ldr	r3, [r4, #8]
 8011ad6:	6861      	ldr	r1, [r4, #4]
 8011ad8:	eb07 060a 	add.w	r6, r7, sl
 8011adc:	42b3      	cmp	r3, r6
 8011ade:	b085      	sub	sp, #20
 8011ae0:	bfb8      	it	lt
 8011ae2:	3101      	addlt	r1, #1
 8011ae4:	f7ff feda 	bl	801189c <_Balloc>
 8011ae8:	b930      	cbnz	r0, 8011af8 <__multiply+0x44>
 8011aea:	4602      	mov	r2, r0
 8011aec:	4b44      	ldr	r3, [pc, #272]	; (8011c00 <__multiply+0x14c>)
 8011aee:	4845      	ldr	r0, [pc, #276]	; (8011c04 <__multiply+0x150>)
 8011af0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011af4:	f000 fc6e 	bl	80123d4 <__assert_func>
 8011af8:	f100 0514 	add.w	r5, r0, #20
 8011afc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011b00:	462b      	mov	r3, r5
 8011b02:	2200      	movs	r2, #0
 8011b04:	4543      	cmp	r3, r8
 8011b06:	d321      	bcc.n	8011b4c <__multiply+0x98>
 8011b08:	f104 0314 	add.w	r3, r4, #20
 8011b0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011b10:	f109 0314 	add.w	r3, r9, #20
 8011b14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011b18:	9202      	str	r2, [sp, #8]
 8011b1a:	1b3a      	subs	r2, r7, r4
 8011b1c:	3a15      	subs	r2, #21
 8011b1e:	f022 0203 	bic.w	r2, r2, #3
 8011b22:	3204      	adds	r2, #4
 8011b24:	f104 0115 	add.w	r1, r4, #21
 8011b28:	428f      	cmp	r7, r1
 8011b2a:	bf38      	it	cc
 8011b2c:	2204      	movcc	r2, #4
 8011b2e:	9201      	str	r2, [sp, #4]
 8011b30:	9a02      	ldr	r2, [sp, #8]
 8011b32:	9303      	str	r3, [sp, #12]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d80c      	bhi.n	8011b52 <__multiply+0x9e>
 8011b38:	2e00      	cmp	r6, #0
 8011b3a:	dd03      	ble.n	8011b44 <__multiply+0x90>
 8011b3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d05b      	beq.n	8011bfc <__multiply+0x148>
 8011b44:	6106      	str	r6, [r0, #16]
 8011b46:	b005      	add	sp, #20
 8011b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b4c:	f843 2b04 	str.w	r2, [r3], #4
 8011b50:	e7d8      	b.n	8011b04 <__multiply+0x50>
 8011b52:	f8b3 a000 	ldrh.w	sl, [r3]
 8011b56:	f1ba 0f00 	cmp.w	sl, #0
 8011b5a:	d024      	beq.n	8011ba6 <__multiply+0xf2>
 8011b5c:	f104 0e14 	add.w	lr, r4, #20
 8011b60:	46a9      	mov	r9, r5
 8011b62:	f04f 0c00 	mov.w	ip, #0
 8011b66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011b6a:	f8d9 1000 	ldr.w	r1, [r9]
 8011b6e:	fa1f fb82 	uxth.w	fp, r2
 8011b72:	b289      	uxth	r1, r1
 8011b74:	fb0a 110b 	mla	r1, sl, fp, r1
 8011b78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011b7c:	f8d9 2000 	ldr.w	r2, [r9]
 8011b80:	4461      	add	r1, ip
 8011b82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011b86:	fb0a c20b 	mla	r2, sl, fp, ip
 8011b8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011b8e:	b289      	uxth	r1, r1
 8011b90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011b94:	4577      	cmp	r7, lr
 8011b96:	f849 1b04 	str.w	r1, [r9], #4
 8011b9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011b9e:	d8e2      	bhi.n	8011b66 <__multiply+0xb2>
 8011ba0:	9a01      	ldr	r2, [sp, #4]
 8011ba2:	f845 c002 	str.w	ip, [r5, r2]
 8011ba6:	9a03      	ldr	r2, [sp, #12]
 8011ba8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011bac:	3304      	adds	r3, #4
 8011bae:	f1b9 0f00 	cmp.w	r9, #0
 8011bb2:	d021      	beq.n	8011bf8 <__multiply+0x144>
 8011bb4:	6829      	ldr	r1, [r5, #0]
 8011bb6:	f104 0c14 	add.w	ip, r4, #20
 8011bba:	46ae      	mov	lr, r5
 8011bbc:	f04f 0a00 	mov.w	sl, #0
 8011bc0:	f8bc b000 	ldrh.w	fp, [ip]
 8011bc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011bc8:	fb09 220b 	mla	r2, r9, fp, r2
 8011bcc:	4452      	add	r2, sl
 8011bce:	b289      	uxth	r1, r1
 8011bd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011bd4:	f84e 1b04 	str.w	r1, [lr], #4
 8011bd8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011bdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011be0:	f8be 1000 	ldrh.w	r1, [lr]
 8011be4:	fb09 110a 	mla	r1, r9, sl, r1
 8011be8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011bec:	4567      	cmp	r7, ip
 8011bee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011bf2:	d8e5      	bhi.n	8011bc0 <__multiply+0x10c>
 8011bf4:	9a01      	ldr	r2, [sp, #4]
 8011bf6:	50a9      	str	r1, [r5, r2]
 8011bf8:	3504      	adds	r5, #4
 8011bfa:	e799      	b.n	8011b30 <__multiply+0x7c>
 8011bfc:	3e01      	subs	r6, #1
 8011bfe:	e79b      	b.n	8011b38 <__multiply+0x84>
 8011c00:	08014284 	.word	0x08014284
 8011c04:	08014295 	.word	0x08014295

08011c08 <__pow5mult>:
 8011c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c0c:	4615      	mov	r5, r2
 8011c0e:	f012 0203 	ands.w	r2, r2, #3
 8011c12:	4606      	mov	r6, r0
 8011c14:	460f      	mov	r7, r1
 8011c16:	d007      	beq.n	8011c28 <__pow5mult+0x20>
 8011c18:	4c25      	ldr	r4, [pc, #148]	; (8011cb0 <__pow5mult+0xa8>)
 8011c1a:	3a01      	subs	r2, #1
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c22:	f7ff fe9d 	bl	8011960 <__multadd>
 8011c26:	4607      	mov	r7, r0
 8011c28:	10ad      	asrs	r5, r5, #2
 8011c2a:	d03d      	beq.n	8011ca8 <__pow5mult+0xa0>
 8011c2c:	69f4      	ldr	r4, [r6, #28]
 8011c2e:	b97c      	cbnz	r4, 8011c50 <__pow5mult+0x48>
 8011c30:	2010      	movs	r0, #16
 8011c32:	f7fe f88d 	bl	800fd50 <malloc>
 8011c36:	4602      	mov	r2, r0
 8011c38:	61f0      	str	r0, [r6, #28]
 8011c3a:	b928      	cbnz	r0, 8011c48 <__pow5mult+0x40>
 8011c3c:	4b1d      	ldr	r3, [pc, #116]	; (8011cb4 <__pow5mult+0xac>)
 8011c3e:	481e      	ldr	r0, [pc, #120]	; (8011cb8 <__pow5mult+0xb0>)
 8011c40:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011c44:	f000 fbc6 	bl	80123d4 <__assert_func>
 8011c48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c4c:	6004      	str	r4, [r0, #0]
 8011c4e:	60c4      	str	r4, [r0, #12]
 8011c50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011c54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011c58:	b94c      	cbnz	r4, 8011c6e <__pow5mult+0x66>
 8011c5a:	f240 2171 	movw	r1, #625	; 0x271
 8011c5e:	4630      	mov	r0, r6
 8011c60:	f7ff ff12 	bl	8011a88 <__i2b>
 8011c64:	2300      	movs	r3, #0
 8011c66:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	6003      	str	r3, [r0, #0]
 8011c6e:	f04f 0900 	mov.w	r9, #0
 8011c72:	07eb      	lsls	r3, r5, #31
 8011c74:	d50a      	bpl.n	8011c8c <__pow5mult+0x84>
 8011c76:	4639      	mov	r1, r7
 8011c78:	4622      	mov	r2, r4
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	f7ff ff1a 	bl	8011ab4 <__multiply>
 8011c80:	4639      	mov	r1, r7
 8011c82:	4680      	mov	r8, r0
 8011c84:	4630      	mov	r0, r6
 8011c86:	f7ff fe49 	bl	801191c <_Bfree>
 8011c8a:	4647      	mov	r7, r8
 8011c8c:	106d      	asrs	r5, r5, #1
 8011c8e:	d00b      	beq.n	8011ca8 <__pow5mult+0xa0>
 8011c90:	6820      	ldr	r0, [r4, #0]
 8011c92:	b938      	cbnz	r0, 8011ca4 <__pow5mult+0x9c>
 8011c94:	4622      	mov	r2, r4
 8011c96:	4621      	mov	r1, r4
 8011c98:	4630      	mov	r0, r6
 8011c9a:	f7ff ff0b 	bl	8011ab4 <__multiply>
 8011c9e:	6020      	str	r0, [r4, #0]
 8011ca0:	f8c0 9000 	str.w	r9, [r0]
 8011ca4:	4604      	mov	r4, r0
 8011ca6:	e7e4      	b.n	8011c72 <__pow5mult+0x6a>
 8011ca8:	4638      	mov	r0, r7
 8011caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cae:	bf00      	nop
 8011cb0:	080143e0 	.word	0x080143e0
 8011cb4:	08014215 	.word	0x08014215
 8011cb8:	08014295 	.word	0x08014295

08011cbc <__lshift>:
 8011cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cc0:	460c      	mov	r4, r1
 8011cc2:	6849      	ldr	r1, [r1, #4]
 8011cc4:	6923      	ldr	r3, [r4, #16]
 8011cc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011cca:	68a3      	ldr	r3, [r4, #8]
 8011ccc:	4607      	mov	r7, r0
 8011cce:	4691      	mov	r9, r2
 8011cd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011cd4:	f108 0601 	add.w	r6, r8, #1
 8011cd8:	42b3      	cmp	r3, r6
 8011cda:	db0b      	blt.n	8011cf4 <__lshift+0x38>
 8011cdc:	4638      	mov	r0, r7
 8011cde:	f7ff fddd 	bl	801189c <_Balloc>
 8011ce2:	4605      	mov	r5, r0
 8011ce4:	b948      	cbnz	r0, 8011cfa <__lshift+0x3e>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	4b28      	ldr	r3, [pc, #160]	; (8011d8c <__lshift+0xd0>)
 8011cea:	4829      	ldr	r0, [pc, #164]	; (8011d90 <__lshift+0xd4>)
 8011cec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011cf0:	f000 fb70 	bl	80123d4 <__assert_func>
 8011cf4:	3101      	adds	r1, #1
 8011cf6:	005b      	lsls	r3, r3, #1
 8011cf8:	e7ee      	b.n	8011cd8 <__lshift+0x1c>
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	f100 0114 	add.w	r1, r0, #20
 8011d00:	f100 0210 	add.w	r2, r0, #16
 8011d04:	4618      	mov	r0, r3
 8011d06:	4553      	cmp	r3, sl
 8011d08:	db33      	blt.n	8011d72 <__lshift+0xb6>
 8011d0a:	6920      	ldr	r0, [r4, #16]
 8011d0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d10:	f104 0314 	add.w	r3, r4, #20
 8011d14:	f019 091f 	ands.w	r9, r9, #31
 8011d18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011d20:	d02b      	beq.n	8011d7a <__lshift+0xbe>
 8011d22:	f1c9 0e20 	rsb	lr, r9, #32
 8011d26:	468a      	mov	sl, r1
 8011d28:	2200      	movs	r2, #0
 8011d2a:	6818      	ldr	r0, [r3, #0]
 8011d2c:	fa00 f009 	lsl.w	r0, r0, r9
 8011d30:	4310      	orrs	r0, r2
 8011d32:	f84a 0b04 	str.w	r0, [sl], #4
 8011d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d3a:	459c      	cmp	ip, r3
 8011d3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011d40:	d8f3      	bhi.n	8011d2a <__lshift+0x6e>
 8011d42:	ebac 0304 	sub.w	r3, ip, r4
 8011d46:	3b15      	subs	r3, #21
 8011d48:	f023 0303 	bic.w	r3, r3, #3
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	f104 0015 	add.w	r0, r4, #21
 8011d52:	4584      	cmp	ip, r0
 8011d54:	bf38      	it	cc
 8011d56:	2304      	movcc	r3, #4
 8011d58:	50ca      	str	r2, [r1, r3]
 8011d5a:	b10a      	cbz	r2, 8011d60 <__lshift+0xa4>
 8011d5c:	f108 0602 	add.w	r6, r8, #2
 8011d60:	3e01      	subs	r6, #1
 8011d62:	4638      	mov	r0, r7
 8011d64:	612e      	str	r6, [r5, #16]
 8011d66:	4621      	mov	r1, r4
 8011d68:	f7ff fdd8 	bl	801191c <_Bfree>
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d72:	f842 0f04 	str.w	r0, [r2, #4]!
 8011d76:	3301      	adds	r3, #1
 8011d78:	e7c5      	b.n	8011d06 <__lshift+0x4a>
 8011d7a:	3904      	subs	r1, #4
 8011d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d80:	f841 2f04 	str.w	r2, [r1, #4]!
 8011d84:	459c      	cmp	ip, r3
 8011d86:	d8f9      	bhi.n	8011d7c <__lshift+0xc0>
 8011d88:	e7ea      	b.n	8011d60 <__lshift+0xa4>
 8011d8a:	bf00      	nop
 8011d8c:	08014284 	.word	0x08014284
 8011d90:	08014295 	.word	0x08014295

08011d94 <__mcmp>:
 8011d94:	b530      	push	{r4, r5, lr}
 8011d96:	6902      	ldr	r2, [r0, #16]
 8011d98:	690c      	ldr	r4, [r1, #16]
 8011d9a:	1b12      	subs	r2, r2, r4
 8011d9c:	d10e      	bne.n	8011dbc <__mcmp+0x28>
 8011d9e:	f100 0314 	add.w	r3, r0, #20
 8011da2:	3114      	adds	r1, #20
 8011da4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011da8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011dac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011db0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011db4:	42a5      	cmp	r5, r4
 8011db6:	d003      	beq.n	8011dc0 <__mcmp+0x2c>
 8011db8:	d305      	bcc.n	8011dc6 <__mcmp+0x32>
 8011dba:	2201      	movs	r2, #1
 8011dbc:	4610      	mov	r0, r2
 8011dbe:	bd30      	pop	{r4, r5, pc}
 8011dc0:	4283      	cmp	r3, r0
 8011dc2:	d3f3      	bcc.n	8011dac <__mcmp+0x18>
 8011dc4:	e7fa      	b.n	8011dbc <__mcmp+0x28>
 8011dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011dca:	e7f7      	b.n	8011dbc <__mcmp+0x28>

08011dcc <__mdiff>:
 8011dcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd0:	460c      	mov	r4, r1
 8011dd2:	4606      	mov	r6, r0
 8011dd4:	4611      	mov	r1, r2
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	4690      	mov	r8, r2
 8011dda:	f7ff ffdb 	bl	8011d94 <__mcmp>
 8011dde:	1e05      	subs	r5, r0, #0
 8011de0:	d110      	bne.n	8011e04 <__mdiff+0x38>
 8011de2:	4629      	mov	r1, r5
 8011de4:	4630      	mov	r0, r6
 8011de6:	f7ff fd59 	bl	801189c <_Balloc>
 8011dea:	b930      	cbnz	r0, 8011dfa <__mdiff+0x2e>
 8011dec:	4b3a      	ldr	r3, [pc, #232]	; (8011ed8 <__mdiff+0x10c>)
 8011dee:	4602      	mov	r2, r0
 8011df0:	f240 2137 	movw	r1, #567	; 0x237
 8011df4:	4839      	ldr	r0, [pc, #228]	; (8011edc <__mdiff+0x110>)
 8011df6:	f000 faed 	bl	80123d4 <__assert_func>
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011e00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e04:	bfa4      	itt	ge
 8011e06:	4643      	movge	r3, r8
 8011e08:	46a0      	movge	r8, r4
 8011e0a:	4630      	mov	r0, r6
 8011e0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011e10:	bfa6      	itte	ge
 8011e12:	461c      	movge	r4, r3
 8011e14:	2500      	movge	r5, #0
 8011e16:	2501      	movlt	r5, #1
 8011e18:	f7ff fd40 	bl	801189c <_Balloc>
 8011e1c:	b920      	cbnz	r0, 8011e28 <__mdiff+0x5c>
 8011e1e:	4b2e      	ldr	r3, [pc, #184]	; (8011ed8 <__mdiff+0x10c>)
 8011e20:	4602      	mov	r2, r0
 8011e22:	f240 2145 	movw	r1, #581	; 0x245
 8011e26:	e7e5      	b.n	8011df4 <__mdiff+0x28>
 8011e28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011e2c:	6926      	ldr	r6, [r4, #16]
 8011e2e:	60c5      	str	r5, [r0, #12]
 8011e30:	f104 0914 	add.w	r9, r4, #20
 8011e34:	f108 0514 	add.w	r5, r8, #20
 8011e38:	f100 0e14 	add.w	lr, r0, #20
 8011e3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011e40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011e44:	f108 0210 	add.w	r2, r8, #16
 8011e48:	46f2      	mov	sl, lr
 8011e4a:	2100      	movs	r1, #0
 8011e4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011e50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011e54:	fa11 f88b 	uxtah	r8, r1, fp
 8011e58:	b299      	uxth	r1, r3
 8011e5a:	0c1b      	lsrs	r3, r3, #16
 8011e5c:	eba8 0801 	sub.w	r8, r8, r1
 8011e60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011e64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011e68:	fa1f f888 	uxth.w	r8, r8
 8011e6c:	1419      	asrs	r1, r3, #16
 8011e6e:	454e      	cmp	r6, r9
 8011e70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011e74:	f84a 3b04 	str.w	r3, [sl], #4
 8011e78:	d8e8      	bhi.n	8011e4c <__mdiff+0x80>
 8011e7a:	1b33      	subs	r3, r6, r4
 8011e7c:	3b15      	subs	r3, #21
 8011e7e:	f023 0303 	bic.w	r3, r3, #3
 8011e82:	3304      	adds	r3, #4
 8011e84:	3415      	adds	r4, #21
 8011e86:	42a6      	cmp	r6, r4
 8011e88:	bf38      	it	cc
 8011e8a:	2304      	movcc	r3, #4
 8011e8c:	441d      	add	r5, r3
 8011e8e:	4473      	add	r3, lr
 8011e90:	469e      	mov	lr, r3
 8011e92:	462e      	mov	r6, r5
 8011e94:	4566      	cmp	r6, ip
 8011e96:	d30e      	bcc.n	8011eb6 <__mdiff+0xea>
 8011e98:	f10c 0203 	add.w	r2, ip, #3
 8011e9c:	1b52      	subs	r2, r2, r5
 8011e9e:	f022 0203 	bic.w	r2, r2, #3
 8011ea2:	3d03      	subs	r5, #3
 8011ea4:	45ac      	cmp	ip, r5
 8011ea6:	bf38      	it	cc
 8011ea8:	2200      	movcc	r2, #0
 8011eaa:	4413      	add	r3, r2
 8011eac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011eb0:	b17a      	cbz	r2, 8011ed2 <__mdiff+0x106>
 8011eb2:	6107      	str	r7, [r0, #16]
 8011eb4:	e7a4      	b.n	8011e00 <__mdiff+0x34>
 8011eb6:	f856 8b04 	ldr.w	r8, [r6], #4
 8011eba:	fa11 f288 	uxtah	r2, r1, r8
 8011ebe:	1414      	asrs	r4, r2, #16
 8011ec0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011ec4:	b292      	uxth	r2, r2
 8011ec6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011eca:	f84e 2b04 	str.w	r2, [lr], #4
 8011ece:	1421      	asrs	r1, r4, #16
 8011ed0:	e7e0      	b.n	8011e94 <__mdiff+0xc8>
 8011ed2:	3f01      	subs	r7, #1
 8011ed4:	e7ea      	b.n	8011eac <__mdiff+0xe0>
 8011ed6:	bf00      	nop
 8011ed8:	08014284 	.word	0x08014284
 8011edc:	08014295 	.word	0x08014295

08011ee0 <__d2b>:
 8011ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ee4:	460f      	mov	r7, r1
 8011ee6:	2101      	movs	r1, #1
 8011ee8:	ec59 8b10 	vmov	r8, r9, d0
 8011eec:	4616      	mov	r6, r2
 8011eee:	f7ff fcd5 	bl	801189c <_Balloc>
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	b930      	cbnz	r0, 8011f04 <__d2b+0x24>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	4b24      	ldr	r3, [pc, #144]	; (8011f8c <__d2b+0xac>)
 8011efa:	4825      	ldr	r0, [pc, #148]	; (8011f90 <__d2b+0xb0>)
 8011efc:	f240 310f 	movw	r1, #783	; 0x30f
 8011f00:	f000 fa68 	bl	80123d4 <__assert_func>
 8011f04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011f08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f0c:	bb2d      	cbnz	r5, 8011f5a <__d2b+0x7a>
 8011f0e:	9301      	str	r3, [sp, #4]
 8011f10:	f1b8 0300 	subs.w	r3, r8, #0
 8011f14:	d026      	beq.n	8011f64 <__d2b+0x84>
 8011f16:	4668      	mov	r0, sp
 8011f18:	9300      	str	r3, [sp, #0]
 8011f1a:	f7ff fd87 	bl	8011a2c <__lo0bits>
 8011f1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011f22:	b1e8      	cbz	r0, 8011f60 <__d2b+0x80>
 8011f24:	f1c0 0320 	rsb	r3, r0, #32
 8011f28:	fa02 f303 	lsl.w	r3, r2, r3
 8011f2c:	430b      	orrs	r3, r1
 8011f2e:	40c2      	lsrs	r2, r0
 8011f30:	6163      	str	r3, [r4, #20]
 8011f32:	9201      	str	r2, [sp, #4]
 8011f34:	9b01      	ldr	r3, [sp, #4]
 8011f36:	61a3      	str	r3, [r4, #24]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	bf14      	ite	ne
 8011f3c:	2202      	movne	r2, #2
 8011f3e:	2201      	moveq	r2, #1
 8011f40:	6122      	str	r2, [r4, #16]
 8011f42:	b1bd      	cbz	r5, 8011f74 <__d2b+0x94>
 8011f44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011f48:	4405      	add	r5, r0
 8011f4a:	603d      	str	r5, [r7, #0]
 8011f4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011f50:	6030      	str	r0, [r6, #0]
 8011f52:	4620      	mov	r0, r4
 8011f54:	b003      	add	sp, #12
 8011f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011f5e:	e7d6      	b.n	8011f0e <__d2b+0x2e>
 8011f60:	6161      	str	r1, [r4, #20]
 8011f62:	e7e7      	b.n	8011f34 <__d2b+0x54>
 8011f64:	a801      	add	r0, sp, #4
 8011f66:	f7ff fd61 	bl	8011a2c <__lo0bits>
 8011f6a:	9b01      	ldr	r3, [sp, #4]
 8011f6c:	6163      	str	r3, [r4, #20]
 8011f6e:	3020      	adds	r0, #32
 8011f70:	2201      	movs	r2, #1
 8011f72:	e7e5      	b.n	8011f40 <__d2b+0x60>
 8011f74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011f78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011f7c:	6038      	str	r0, [r7, #0]
 8011f7e:	6918      	ldr	r0, [r3, #16]
 8011f80:	f7ff fd34 	bl	80119ec <__hi0bits>
 8011f84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011f88:	e7e2      	b.n	8011f50 <__d2b+0x70>
 8011f8a:	bf00      	nop
 8011f8c:	08014284 	.word	0x08014284
 8011f90:	08014295 	.word	0x08014295

08011f94 <__ssputs_r>:
 8011f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f98:	688e      	ldr	r6, [r1, #8]
 8011f9a:	461f      	mov	r7, r3
 8011f9c:	42be      	cmp	r6, r7
 8011f9e:	680b      	ldr	r3, [r1, #0]
 8011fa0:	4682      	mov	sl, r0
 8011fa2:	460c      	mov	r4, r1
 8011fa4:	4690      	mov	r8, r2
 8011fa6:	d82c      	bhi.n	8012002 <__ssputs_r+0x6e>
 8011fa8:	898a      	ldrh	r2, [r1, #12]
 8011faa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011fae:	d026      	beq.n	8011ffe <__ssputs_r+0x6a>
 8011fb0:	6965      	ldr	r5, [r4, #20]
 8011fb2:	6909      	ldr	r1, [r1, #16]
 8011fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011fb8:	eba3 0901 	sub.w	r9, r3, r1
 8011fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011fc0:	1c7b      	adds	r3, r7, #1
 8011fc2:	444b      	add	r3, r9
 8011fc4:	106d      	asrs	r5, r5, #1
 8011fc6:	429d      	cmp	r5, r3
 8011fc8:	bf38      	it	cc
 8011fca:	461d      	movcc	r5, r3
 8011fcc:	0553      	lsls	r3, r2, #21
 8011fce:	d527      	bpl.n	8012020 <__ssputs_r+0x8c>
 8011fd0:	4629      	mov	r1, r5
 8011fd2:	f7fd feed 	bl	800fdb0 <_malloc_r>
 8011fd6:	4606      	mov	r6, r0
 8011fd8:	b360      	cbz	r0, 8012034 <__ssputs_r+0xa0>
 8011fda:	6921      	ldr	r1, [r4, #16]
 8011fdc:	464a      	mov	r2, r9
 8011fde:	f7fe fd89 	bl	8010af4 <memcpy>
 8011fe2:	89a3      	ldrh	r3, [r4, #12]
 8011fe4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fec:	81a3      	strh	r3, [r4, #12]
 8011fee:	6126      	str	r6, [r4, #16]
 8011ff0:	6165      	str	r5, [r4, #20]
 8011ff2:	444e      	add	r6, r9
 8011ff4:	eba5 0509 	sub.w	r5, r5, r9
 8011ff8:	6026      	str	r6, [r4, #0]
 8011ffa:	60a5      	str	r5, [r4, #8]
 8011ffc:	463e      	mov	r6, r7
 8011ffe:	42be      	cmp	r6, r7
 8012000:	d900      	bls.n	8012004 <__ssputs_r+0x70>
 8012002:	463e      	mov	r6, r7
 8012004:	6820      	ldr	r0, [r4, #0]
 8012006:	4632      	mov	r2, r6
 8012008:	4641      	mov	r1, r8
 801200a:	f000 f9c9 	bl	80123a0 <memmove>
 801200e:	68a3      	ldr	r3, [r4, #8]
 8012010:	1b9b      	subs	r3, r3, r6
 8012012:	60a3      	str	r3, [r4, #8]
 8012014:	6823      	ldr	r3, [r4, #0]
 8012016:	4433      	add	r3, r6
 8012018:	6023      	str	r3, [r4, #0]
 801201a:	2000      	movs	r0, #0
 801201c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012020:	462a      	mov	r2, r5
 8012022:	f000 fa1d 	bl	8012460 <_realloc_r>
 8012026:	4606      	mov	r6, r0
 8012028:	2800      	cmp	r0, #0
 801202a:	d1e0      	bne.n	8011fee <__ssputs_r+0x5a>
 801202c:	6921      	ldr	r1, [r4, #16]
 801202e:	4650      	mov	r0, sl
 8012030:	f7ff fbe8 	bl	8011804 <_free_r>
 8012034:	230c      	movs	r3, #12
 8012036:	f8ca 3000 	str.w	r3, [sl]
 801203a:	89a3      	ldrh	r3, [r4, #12]
 801203c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012040:	81a3      	strh	r3, [r4, #12]
 8012042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012046:	e7e9      	b.n	801201c <__ssputs_r+0x88>

08012048 <_svfiprintf_r>:
 8012048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801204c:	4698      	mov	r8, r3
 801204e:	898b      	ldrh	r3, [r1, #12]
 8012050:	061b      	lsls	r3, r3, #24
 8012052:	b09d      	sub	sp, #116	; 0x74
 8012054:	4607      	mov	r7, r0
 8012056:	460d      	mov	r5, r1
 8012058:	4614      	mov	r4, r2
 801205a:	d50e      	bpl.n	801207a <_svfiprintf_r+0x32>
 801205c:	690b      	ldr	r3, [r1, #16]
 801205e:	b963      	cbnz	r3, 801207a <_svfiprintf_r+0x32>
 8012060:	2140      	movs	r1, #64	; 0x40
 8012062:	f7fd fea5 	bl	800fdb0 <_malloc_r>
 8012066:	6028      	str	r0, [r5, #0]
 8012068:	6128      	str	r0, [r5, #16]
 801206a:	b920      	cbnz	r0, 8012076 <_svfiprintf_r+0x2e>
 801206c:	230c      	movs	r3, #12
 801206e:	603b      	str	r3, [r7, #0]
 8012070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012074:	e0d0      	b.n	8012218 <_svfiprintf_r+0x1d0>
 8012076:	2340      	movs	r3, #64	; 0x40
 8012078:	616b      	str	r3, [r5, #20]
 801207a:	2300      	movs	r3, #0
 801207c:	9309      	str	r3, [sp, #36]	; 0x24
 801207e:	2320      	movs	r3, #32
 8012080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012084:	f8cd 800c 	str.w	r8, [sp, #12]
 8012088:	2330      	movs	r3, #48	; 0x30
 801208a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012230 <_svfiprintf_r+0x1e8>
 801208e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012092:	f04f 0901 	mov.w	r9, #1
 8012096:	4623      	mov	r3, r4
 8012098:	469a      	mov	sl, r3
 801209a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801209e:	b10a      	cbz	r2, 80120a4 <_svfiprintf_r+0x5c>
 80120a0:	2a25      	cmp	r2, #37	; 0x25
 80120a2:	d1f9      	bne.n	8012098 <_svfiprintf_r+0x50>
 80120a4:	ebba 0b04 	subs.w	fp, sl, r4
 80120a8:	d00b      	beq.n	80120c2 <_svfiprintf_r+0x7a>
 80120aa:	465b      	mov	r3, fp
 80120ac:	4622      	mov	r2, r4
 80120ae:	4629      	mov	r1, r5
 80120b0:	4638      	mov	r0, r7
 80120b2:	f7ff ff6f 	bl	8011f94 <__ssputs_r>
 80120b6:	3001      	adds	r0, #1
 80120b8:	f000 80a9 	beq.w	801220e <_svfiprintf_r+0x1c6>
 80120bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120be:	445a      	add	r2, fp
 80120c0:	9209      	str	r2, [sp, #36]	; 0x24
 80120c2:	f89a 3000 	ldrb.w	r3, [sl]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	f000 80a1 	beq.w	801220e <_svfiprintf_r+0x1c6>
 80120cc:	2300      	movs	r3, #0
 80120ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120d6:	f10a 0a01 	add.w	sl, sl, #1
 80120da:	9304      	str	r3, [sp, #16]
 80120dc:	9307      	str	r3, [sp, #28]
 80120de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120e2:	931a      	str	r3, [sp, #104]	; 0x68
 80120e4:	4654      	mov	r4, sl
 80120e6:	2205      	movs	r2, #5
 80120e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ec:	4850      	ldr	r0, [pc, #320]	; (8012230 <_svfiprintf_r+0x1e8>)
 80120ee:	f7ee f877 	bl	80001e0 <memchr>
 80120f2:	9a04      	ldr	r2, [sp, #16]
 80120f4:	b9d8      	cbnz	r0, 801212e <_svfiprintf_r+0xe6>
 80120f6:	06d0      	lsls	r0, r2, #27
 80120f8:	bf44      	itt	mi
 80120fa:	2320      	movmi	r3, #32
 80120fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012100:	0711      	lsls	r1, r2, #28
 8012102:	bf44      	itt	mi
 8012104:	232b      	movmi	r3, #43	; 0x2b
 8012106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801210a:	f89a 3000 	ldrb.w	r3, [sl]
 801210e:	2b2a      	cmp	r3, #42	; 0x2a
 8012110:	d015      	beq.n	801213e <_svfiprintf_r+0xf6>
 8012112:	9a07      	ldr	r2, [sp, #28]
 8012114:	4654      	mov	r4, sl
 8012116:	2000      	movs	r0, #0
 8012118:	f04f 0c0a 	mov.w	ip, #10
 801211c:	4621      	mov	r1, r4
 801211e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012122:	3b30      	subs	r3, #48	; 0x30
 8012124:	2b09      	cmp	r3, #9
 8012126:	d94d      	bls.n	80121c4 <_svfiprintf_r+0x17c>
 8012128:	b1b0      	cbz	r0, 8012158 <_svfiprintf_r+0x110>
 801212a:	9207      	str	r2, [sp, #28]
 801212c:	e014      	b.n	8012158 <_svfiprintf_r+0x110>
 801212e:	eba0 0308 	sub.w	r3, r0, r8
 8012132:	fa09 f303 	lsl.w	r3, r9, r3
 8012136:	4313      	orrs	r3, r2
 8012138:	9304      	str	r3, [sp, #16]
 801213a:	46a2      	mov	sl, r4
 801213c:	e7d2      	b.n	80120e4 <_svfiprintf_r+0x9c>
 801213e:	9b03      	ldr	r3, [sp, #12]
 8012140:	1d19      	adds	r1, r3, #4
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	9103      	str	r1, [sp, #12]
 8012146:	2b00      	cmp	r3, #0
 8012148:	bfbb      	ittet	lt
 801214a:	425b      	neglt	r3, r3
 801214c:	f042 0202 	orrlt.w	r2, r2, #2
 8012150:	9307      	strge	r3, [sp, #28]
 8012152:	9307      	strlt	r3, [sp, #28]
 8012154:	bfb8      	it	lt
 8012156:	9204      	strlt	r2, [sp, #16]
 8012158:	7823      	ldrb	r3, [r4, #0]
 801215a:	2b2e      	cmp	r3, #46	; 0x2e
 801215c:	d10c      	bne.n	8012178 <_svfiprintf_r+0x130>
 801215e:	7863      	ldrb	r3, [r4, #1]
 8012160:	2b2a      	cmp	r3, #42	; 0x2a
 8012162:	d134      	bne.n	80121ce <_svfiprintf_r+0x186>
 8012164:	9b03      	ldr	r3, [sp, #12]
 8012166:	1d1a      	adds	r2, r3, #4
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	9203      	str	r2, [sp, #12]
 801216c:	2b00      	cmp	r3, #0
 801216e:	bfb8      	it	lt
 8012170:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012174:	3402      	adds	r4, #2
 8012176:	9305      	str	r3, [sp, #20]
 8012178:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012240 <_svfiprintf_r+0x1f8>
 801217c:	7821      	ldrb	r1, [r4, #0]
 801217e:	2203      	movs	r2, #3
 8012180:	4650      	mov	r0, sl
 8012182:	f7ee f82d 	bl	80001e0 <memchr>
 8012186:	b138      	cbz	r0, 8012198 <_svfiprintf_r+0x150>
 8012188:	9b04      	ldr	r3, [sp, #16]
 801218a:	eba0 000a 	sub.w	r0, r0, sl
 801218e:	2240      	movs	r2, #64	; 0x40
 8012190:	4082      	lsls	r2, r0
 8012192:	4313      	orrs	r3, r2
 8012194:	3401      	adds	r4, #1
 8012196:	9304      	str	r3, [sp, #16]
 8012198:	f814 1b01 	ldrb.w	r1, [r4], #1
 801219c:	4825      	ldr	r0, [pc, #148]	; (8012234 <_svfiprintf_r+0x1ec>)
 801219e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121a2:	2206      	movs	r2, #6
 80121a4:	f7ee f81c 	bl	80001e0 <memchr>
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d038      	beq.n	801221e <_svfiprintf_r+0x1d6>
 80121ac:	4b22      	ldr	r3, [pc, #136]	; (8012238 <_svfiprintf_r+0x1f0>)
 80121ae:	bb1b      	cbnz	r3, 80121f8 <_svfiprintf_r+0x1b0>
 80121b0:	9b03      	ldr	r3, [sp, #12]
 80121b2:	3307      	adds	r3, #7
 80121b4:	f023 0307 	bic.w	r3, r3, #7
 80121b8:	3308      	adds	r3, #8
 80121ba:	9303      	str	r3, [sp, #12]
 80121bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121be:	4433      	add	r3, r6
 80121c0:	9309      	str	r3, [sp, #36]	; 0x24
 80121c2:	e768      	b.n	8012096 <_svfiprintf_r+0x4e>
 80121c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80121c8:	460c      	mov	r4, r1
 80121ca:	2001      	movs	r0, #1
 80121cc:	e7a6      	b.n	801211c <_svfiprintf_r+0xd4>
 80121ce:	2300      	movs	r3, #0
 80121d0:	3401      	adds	r4, #1
 80121d2:	9305      	str	r3, [sp, #20]
 80121d4:	4619      	mov	r1, r3
 80121d6:	f04f 0c0a 	mov.w	ip, #10
 80121da:	4620      	mov	r0, r4
 80121dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121e0:	3a30      	subs	r2, #48	; 0x30
 80121e2:	2a09      	cmp	r2, #9
 80121e4:	d903      	bls.n	80121ee <_svfiprintf_r+0x1a6>
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d0c6      	beq.n	8012178 <_svfiprintf_r+0x130>
 80121ea:	9105      	str	r1, [sp, #20]
 80121ec:	e7c4      	b.n	8012178 <_svfiprintf_r+0x130>
 80121ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80121f2:	4604      	mov	r4, r0
 80121f4:	2301      	movs	r3, #1
 80121f6:	e7f0      	b.n	80121da <_svfiprintf_r+0x192>
 80121f8:	ab03      	add	r3, sp, #12
 80121fa:	9300      	str	r3, [sp, #0]
 80121fc:	462a      	mov	r2, r5
 80121fe:	4b0f      	ldr	r3, [pc, #60]	; (801223c <_svfiprintf_r+0x1f4>)
 8012200:	a904      	add	r1, sp, #16
 8012202:	4638      	mov	r0, r7
 8012204:	f7fd ff00 	bl	8010008 <_printf_float>
 8012208:	1c42      	adds	r2, r0, #1
 801220a:	4606      	mov	r6, r0
 801220c:	d1d6      	bne.n	80121bc <_svfiprintf_r+0x174>
 801220e:	89ab      	ldrh	r3, [r5, #12]
 8012210:	065b      	lsls	r3, r3, #25
 8012212:	f53f af2d 	bmi.w	8012070 <_svfiprintf_r+0x28>
 8012216:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012218:	b01d      	add	sp, #116	; 0x74
 801221a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221e:	ab03      	add	r3, sp, #12
 8012220:	9300      	str	r3, [sp, #0]
 8012222:	462a      	mov	r2, r5
 8012224:	4b05      	ldr	r3, [pc, #20]	; (801223c <_svfiprintf_r+0x1f4>)
 8012226:	a904      	add	r1, sp, #16
 8012228:	4638      	mov	r0, r7
 801222a:	f7fe f991 	bl	8010550 <_printf_i>
 801222e:	e7eb      	b.n	8012208 <_svfiprintf_r+0x1c0>
 8012230:	080143ec 	.word	0x080143ec
 8012234:	080143f6 	.word	0x080143f6
 8012238:	08010009 	.word	0x08010009
 801223c:	08011f95 	.word	0x08011f95
 8012240:	080143f2 	.word	0x080143f2

08012244 <__sflush_r>:
 8012244:	898a      	ldrh	r2, [r1, #12]
 8012246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801224a:	4605      	mov	r5, r0
 801224c:	0710      	lsls	r0, r2, #28
 801224e:	460c      	mov	r4, r1
 8012250:	d458      	bmi.n	8012304 <__sflush_r+0xc0>
 8012252:	684b      	ldr	r3, [r1, #4]
 8012254:	2b00      	cmp	r3, #0
 8012256:	dc05      	bgt.n	8012264 <__sflush_r+0x20>
 8012258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801225a:	2b00      	cmp	r3, #0
 801225c:	dc02      	bgt.n	8012264 <__sflush_r+0x20>
 801225e:	2000      	movs	r0, #0
 8012260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012266:	2e00      	cmp	r6, #0
 8012268:	d0f9      	beq.n	801225e <__sflush_r+0x1a>
 801226a:	2300      	movs	r3, #0
 801226c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012270:	682f      	ldr	r7, [r5, #0]
 8012272:	6a21      	ldr	r1, [r4, #32]
 8012274:	602b      	str	r3, [r5, #0]
 8012276:	d032      	beq.n	80122de <__sflush_r+0x9a>
 8012278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801227a:	89a3      	ldrh	r3, [r4, #12]
 801227c:	075a      	lsls	r2, r3, #29
 801227e:	d505      	bpl.n	801228c <__sflush_r+0x48>
 8012280:	6863      	ldr	r3, [r4, #4]
 8012282:	1ac0      	subs	r0, r0, r3
 8012284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012286:	b10b      	cbz	r3, 801228c <__sflush_r+0x48>
 8012288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801228a:	1ac0      	subs	r0, r0, r3
 801228c:	2300      	movs	r3, #0
 801228e:	4602      	mov	r2, r0
 8012290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012292:	6a21      	ldr	r1, [r4, #32]
 8012294:	4628      	mov	r0, r5
 8012296:	47b0      	blx	r6
 8012298:	1c43      	adds	r3, r0, #1
 801229a:	89a3      	ldrh	r3, [r4, #12]
 801229c:	d106      	bne.n	80122ac <__sflush_r+0x68>
 801229e:	6829      	ldr	r1, [r5, #0]
 80122a0:	291d      	cmp	r1, #29
 80122a2:	d82b      	bhi.n	80122fc <__sflush_r+0xb8>
 80122a4:	4a29      	ldr	r2, [pc, #164]	; (801234c <__sflush_r+0x108>)
 80122a6:	410a      	asrs	r2, r1
 80122a8:	07d6      	lsls	r6, r2, #31
 80122aa:	d427      	bmi.n	80122fc <__sflush_r+0xb8>
 80122ac:	2200      	movs	r2, #0
 80122ae:	6062      	str	r2, [r4, #4]
 80122b0:	04d9      	lsls	r1, r3, #19
 80122b2:	6922      	ldr	r2, [r4, #16]
 80122b4:	6022      	str	r2, [r4, #0]
 80122b6:	d504      	bpl.n	80122c2 <__sflush_r+0x7e>
 80122b8:	1c42      	adds	r2, r0, #1
 80122ba:	d101      	bne.n	80122c0 <__sflush_r+0x7c>
 80122bc:	682b      	ldr	r3, [r5, #0]
 80122be:	b903      	cbnz	r3, 80122c2 <__sflush_r+0x7e>
 80122c0:	6560      	str	r0, [r4, #84]	; 0x54
 80122c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122c4:	602f      	str	r7, [r5, #0]
 80122c6:	2900      	cmp	r1, #0
 80122c8:	d0c9      	beq.n	801225e <__sflush_r+0x1a>
 80122ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122ce:	4299      	cmp	r1, r3
 80122d0:	d002      	beq.n	80122d8 <__sflush_r+0x94>
 80122d2:	4628      	mov	r0, r5
 80122d4:	f7ff fa96 	bl	8011804 <_free_r>
 80122d8:	2000      	movs	r0, #0
 80122da:	6360      	str	r0, [r4, #52]	; 0x34
 80122dc:	e7c0      	b.n	8012260 <__sflush_r+0x1c>
 80122de:	2301      	movs	r3, #1
 80122e0:	4628      	mov	r0, r5
 80122e2:	47b0      	blx	r6
 80122e4:	1c41      	adds	r1, r0, #1
 80122e6:	d1c8      	bne.n	801227a <__sflush_r+0x36>
 80122e8:	682b      	ldr	r3, [r5, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d0c5      	beq.n	801227a <__sflush_r+0x36>
 80122ee:	2b1d      	cmp	r3, #29
 80122f0:	d001      	beq.n	80122f6 <__sflush_r+0xb2>
 80122f2:	2b16      	cmp	r3, #22
 80122f4:	d101      	bne.n	80122fa <__sflush_r+0xb6>
 80122f6:	602f      	str	r7, [r5, #0]
 80122f8:	e7b1      	b.n	801225e <__sflush_r+0x1a>
 80122fa:	89a3      	ldrh	r3, [r4, #12]
 80122fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012300:	81a3      	strh	r3, [r4, #12]
 8012302:	e7ad      	b.n	8012260 <__sflush_r+0x1c>
 8012304:	690f      	ldr	r7, [r1, #16]
 8012306:	2f00      	cmp	r7, #0
 8012308:	d0a9      	beq.n	801225e <__sflush_r+0x1a>
 801230a:	0793      	lsls	r3, r2, #30
 801230c:	680e      	ldr	r6, [r1, #0]
 801230e:	bf08      	it	eq
 8012310:	694b      	ldreq	r3, [r1, #20]
 8012312:	600f      	str	r7, [r1, #0]
 8012314:	bf18      	it	ne
 8012316:	2300      	movne	r3, #0
 8012318:	eba6 0807 	sub.w	r8, r6, r7
 801231c:	608b      	str	r3, [r1, #8]
 801231e:	f1b8 0f00 	cmp.w	r8, #0
 8012322:	dd9c      	ble.n	801225e <__sflush_r+0x1a>
 8012324:	6a21      	ldr	r1, [r4, #32]
 8012326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012328:	4643      	mov	r3, r8
 801232a:	463a      	mov	r2, r7
 801232c:	4628      	mov	r0, r5
 801232e:	47b0      	blx	r6
 8012330:	2800      	cmp	r0, #0
 8012332:	dc06      	bgt.n	8012342 <__sflush_r+0xfe>
 8012334:	89a3      	ldrh	r3, [r4, #12]
 8012336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801233a:	81a3      	strh	r3, [r4, #12]
 801233c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012340:	e78e      	b.n	8012260 <__sflush_r+0x1c>
 8012342:	4407      	add	r7, r0
 8012344:	eba8 0800 	sub.w	r8, r8, r0
 8012348:	e7e9      	b.n	801231e <__sflush_r+0xda>
 801234a:	bf00      	nop
 801234c:	dfbffffe 	.word	0xdfbffffe

08012350 <_fflush_r>:
 8012350:	b538      	push	{r3, r4, r5, lr}
 8012352:	690b      	ldr	r3, [r1, #16]
 8012354:	4605      	mov	r5, r0
 8012356:	460c      	mov	r4, r1
 8012358:	b913      	cbnz	r3, 8012360 <_fflush_r+0x10>
 801235a:	2500      	movs	r5, #0
 801235c:	4628      	mov	r0, r5
 801235e:	bd38      	pop	{r3, r4, r5, pc}
 8012360:	b118      	cbz	r0, 801236a <_fflush_r+0x1a>
 8012362:	6a03      	ldr	r3, [r0, #32]
 8012364:	b90b      	cbnz	r3, 801236a <_fflush_r+0x1a>
 8012366:	f7fe fa8f 	bl	8010888 <__sinit>
 801236a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d0f3      	beq.n	801235a <_fflush_r+0xa>
 8012372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012374:	07d0      	lsls	r0, r2, #31
 8012376:	d404      	bmi.n	8012382 <_fflush_r+0x32>
 8012378:	0599      	lsls	r1, r3, #22
 801237a:	d402      	bmi.n	8012382 <_fflush_r+0x32>
 801237c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801237e:	f7fe fbb7 	bl	8010af0 <__retarget_lock_acquire_recursive>
 8012382:	4628      	mov	r0, r5
 8012384:	4621      	mov	r1, r4
 8012386:	f7ff ff5d 	bl	8012244 <__sflush_r>
 801238a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801238c:	07da      	lsls	r2, r3, #31
 801238e:	4605      	mov	r5, r0
 8012390:	d4e4      	bmi.n	801235c <_fflush_r+0xc>
 8012392:	89a3      	ldrh	r3, [r4, #12]
 8012394:	059b      	lsls	r3, r3, #22
 8012396:	d4e1      	bmi.n	801235c <_fflush_r+0xc>
 8012398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801239a:	f7fe fbaa 	bl	8010af2 <__retarget_lock_release_recursive>
 801239e:	e7dd      	b.n	801235c <_fflush_r+0xc>

080123a0 <memmove>:
 80123a0:	4288      	cmp	r0, r1
 80123a2:	b510      	push	{r4, lr}
 80123a4:	eb01 0402 	add.w	r4, r1, r2
 80123a8:	d902      	bls.n	80123b0 <memmove+0x10>
 80123aa:	4284      	cmp	r4, r0
 80123ac:	4623      	mov	r3, r4
 80123ae:	d807      	bhi.n	80123c0 <memmove+0x20>
 80123b0:	1e43      	subs	r3, r0, #1
 80123b2:	42a1      	cmp	r1, r4
 80123b4:	d008      	beq.n	80123c8 <memmove+0x28>
 80123b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123be:	e7f8      	b.n	80123b2 <memmove+0x12>
 80123c0:	4402      	add	r2, r0
 80123c2:	4601      	mov	r1, r0
 80123c4:	428a      	cmp	r2, r1
 80123c6:	d100      	bne.n	80123ca <memmove+0x2a>
 80123c8:	bd10      	pop	{r4, pc}
 80123ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80123ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80123d2:	e7f7      	b.n	80123c4 <memmove+0x24>

080123d4 <__assert_func>:
 80123d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123d6:	4614      	mov	r4, r2
 80123d8:	461a      	mov	r2, r3
 80123da:	4b09      	ldr	r3, [pc, #36]	; (8012400 <__assert_func+0x2c>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	4605      	mov	r5, r0
 80123e0:	68d8      	ldr	r0, [r3, #12]
 80123e2:	b14c      	cbz	r4, 80123f8 <__assert_func+0x24>
 80123e4:	4b07      	ldr	r3, [pc, #28]	; (8012404 <__assert_func+0x30>)
 80123e6:	9100      	str	r1, [sp, #0]
 80123e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80123ec:	4906      	ldr	r1, [pc, #24]	; (8012408 <__assert_func+0x34>)
 80123ee:	462b      	mov	r3, r5
 80123f0:	f000 f872 	bl	80124d8 <fiprintf>
 80123f4:	f000 f882 	bl	80124fc <abort>
 80123f8:	4b04      	ldr	r3, [pc, #16]	; (801240c <__assert_func+0x38>)
 80123fa:	461c      	mov	r4, r3
 80123fc:	e7f3      	b.n	80123e6 <__assert_func+0x12>
 80123fe:	bf00      	nop
 8012400:	20000178 	.word	0x20000178
 8012404:	08014407 	.word	0x08014407
 8012408:	08014414 	.word	0x08014414
 801240c:	08014442 	.word	0x08014442

08012410 <_calloc_r>:
 8012410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012412:	fba1 2402 	umull	r2, r4, r1, r2
 8012416:	b94c      	cbnz	r4, 801242c <_calloc_r+0x1c>
 8012418:	4611      	mov	r1, r2
 801241a:	9201      	str	r2, [sp, #4]
 801241c:	f7fd fcc8 	bl	800fdb0 <_malloc_r>
 8012420:	9a01      	ldr	r2, [sp, #4]
 8012422:	4605      	mov	r5, r0
 8012424:	b930      	cbnz	r0, 8012434 <_calloc_r+0x24>
 8012426:	4628      	mov	r0, r5
 8012428:	b003      	add	sp, #12
 801242a:	bd30      	pop	{r4, r5, pc}
 801242c:	220c      	movs	r2, #12
 801242e:	6002      	str	r2, [r0, #0]
 8012430:	2500      	movs	r5, #0
 8012432:	e7f8      	b.n	8012426 <_calloc_r+0x16>
 8012434:	4621      	mov	r1, r4
 8012436:	f7fe fac0 	bl	80109ba <memset>
 801243a:	e7f4      	b.n	8012426 <_calloc_r+0x16>

0801243c <__ascii_mbtowc>:
 801243c:	b082      	sub	sp, #8
 801243e:	b901      	cbnz	r1, 8012442 <__ascii_mbtowc+0x6>
 8012440:	a901      	add	r1, sp, #4
 8012442:	b142      	cbz	r2, 8012456 <__ascii_mbtowc+0x1a>
 8012444:	b14b      	cbz	r3, 801245a <__ascii_mbtowc+0x1e>
 8012446:	7813      	ldrb	r3, [r2, #0]
 8012448:	600b      	str	r3, [r1, #0]
 801244a:	7812      	ldrb	r2, [r2, #0]
 801244c:	1e10      	subs	r0, r2, #0
 801244e:	bf18      	it	ne
 8012450:	2001      	movne	r0, #1
 8012452:	b002      	add	sp, #8
 8012454:	4770      	bx	lr
 8012456:	4610      	mov	r0, r2
 8012458:	e7fb      	b.n	8012452 <__ascii_mbtowc+0x16>
 801245a:	f06f 0001 	mvn.w	r0, #1
 801245e:	e7f8      	b.n	8012452 <__ascii_mbtowc+0x16>

08012460 <_realloc_r>:
 8012460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012464:	4680      	mov	r8, r0
 8012466:	4614      	mov	r4, r2
 8012468:	460e      	mov	r6, r1
 801246a:	b921      	cbnz	r1, 8012476 <_realloc_r+0x16>
 801246c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012470:	4611      	mov	r1, r2
 8012472:	f7fd bc9d 	b.w	800fdb0 <_malloc_r>
 8012476:	b92a      	cbnz	r2, 8012484 <_realloc_r+0x24>
 8012478:	f7ff f9c4 	bl	8011804 <_free_r>
 801247c:	4625      	mov	r5, r4
 801247e:	4628      	mov	r0, r5
 8012480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012484:	f000 f841 	bl	801250a <_malloc_usable_size_r>
 8012488:	4284      	cmp	r4, r0
 801248a:	4607      	mov	r7, r0
 801248c:	d802      	bhi.n	8012494 <_realloc_r+0x34>
 801248e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012492:	d812      	bhi.n	80124ba <_realloc_r+0x5a>
 8012494:	4621      	mov	r1, r4
 8012496:	4640      	mov	r0, r8
 8012498:	f7fd fc8a 	bl	800fdb0 <_malloc_r>
 801249c:	4605      	mov	r5, r0
 801249e:	2800      	cmp	r0, #0
 80124a0:	d0ed      	beq.n	801247e <_realloc_r+0x1e>
 80124a2:	42bc      	cmp	r4, r7
 80124a4:	4622      	mov	r2, r4
 80124a6:	4631      	mov	r1, r6
 80124a8:	bf28      	it	cs
 80124aa:	463a      	movcs	r2, r7
 80124ac:	f7fe fb22 	bl	8010af4 <memcpy>
 80124b0:	4631      	mov	r1, r6
 80124b2:	4640      	mov	r0, r8
 80124b4:	f7ff f9a6 	bl	8011804 <_free_r>
 80124b8:	e7e1      	b.n	801247e <_realloc_r+0x1e>
 80124ba:	4635      	mov	r5, r6
 80124bc:	e7df      	b.n	801247e <_realloc_r+0x1e>

080124be <__ascii_wctomb>:
 80124be:	b149      	cbz	r1, 80124d4 <__ascii_wctomb+0x16>
 80124c0:	2aff      	cmp	r2, #255	; 0xff
 80124c2:	bf85      	ittet	hi
 80124c4:	238a      	movhi	r3, #138	; 0x8a
 80124c6:	6003      	strhi	r3, [r0, #0]
 80124c8:	700a      	strbls	r2, [r1, #0]
 80124ca:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80124ce:	bf98      	it	ls
 80124d0:	2001      	movls	r0, #1
 80124d2:	4770      	bx	lr
 80124d4:	4608      	mov	r0, r1
 80124d6:	4770      	bx	lr

080124d8 <fiprintf>:
 80124d8:	b40e      	push	{r1, r2, r3}
 80124da:	b503      	push	{r0, r1, lr}
 80124dc:	4601      	mov	r1, r0
 80124de:	ab03      	add	r3, sp, #12
 80124e0:	4805      	ldr	r0, [pc, #20]	; (80124f8 <fiprintf+0x20>)
 80124e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80124e6:	6800      	ldr	r0, [r0, #0]
 80124e8:	9301      	str	r3, [sp, #4]
 80124ea:	f000 f83f 	bl	801256c <_vfiprintf_r>
 80124ee:	b002      	add	sp, #8
 80124f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80124f4:	b003      	add	sp, #12
 80124f6:	4770      	bx	lr
 80124f8:	20000178 	.word	0x20000178

080124fc <abort>:
 80124fc:	b508      	push	{r3, lr}
 80124fe:	2006      	movs	r0, #6
 8012500:	f000 fa0c 	bl	801291c <raise>
 8012504:	2001      	movs	r0, #1
 8012506:	f7ef fe9f 	bl	8002248 <_exit>

0801250a <_malloc_usable_size_r>:
 801250a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801250e:	1f18      	subs	r0, r3, #4
 8012510:	2b00      	cmp	r3, #0
 8012512:	bfbc      	itt	lt
 8012514:	580b      	ldrlt	r3, [r1, r0]
 8012516:	18c0      	addlt	r0, r0, r3
 8012518:	4770      	bx	lr

0801251a <__sfputc_r>:
 801251a:	6893      	ldr	r3, [r2, #8]
 801251c:	3b01      	subs	r3, #1
 801251e:	2b00      	cmp	r3, #0
 8012520:	b410      	push	{r4}
 8012522:	6093      	str	r3, [r2, #8]
 8012524:	da08      	bge.n	8012538 <__sfputc_r+0x1e>
 8012526:	6994      	ldr	r4, [r2, #24]
 8012528:	42a3      	cmp	r3, r4
 801252a:	db01      	blt.n	8012530 <__sfputc_r+0x16>
 801252c:	290a      	cmp	r1, #10
 801252e:	d103      	bne.n	8012538 <__sfputc_r+0x1e>
 8012530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012534:	f000 b934 	b.w	80127a0 <__swbuf_r>
 8012538:	6813      	ldr	r3, [r2, #0]
 801253a:	1c58      	adds	r0, r3, #1
 801253c:	6010      	str	r0, [r2, #0]
 801253e:	7019      	strb	r1, [r3, #0]
 8012540:	4608      	mov	r0, r1
 8012542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012546:	4770      	bx	lr

08012548 <__sfputs_r>:
 8012548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801254a:	4606      	mov	r6, r0
 801254c:	460f      	mov	r7, r1
 801254e:	4614      	mov	r4, r2
 8012550:	18d5      	adds	r5, r2, r3
 8012552:	42ac      	cmp	r4, r5
 8012554:	d101      	bne.n	801255a <__sfputs_r+0x12>
 8012556:	2000      	movs	r0, #0
 8012558:	e007      	b.n	801256a <__sfputs_r+0x22>
 801255a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801255e:	463a      	mov	r2, r7
 8012560:	4630      	mov	r0, r6
 8012562:	f7ff ffda 	bl	801251a <__sfputc_r>
 8012566:	1c43      	adds	r3, r0, #1
 8012568:	d1f3      	bne.n	8012552 <__sfputs_r+0xa>
 801256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801256c <_vfiprintf_r>:
 801256c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012570:	460d      	mov	r5, r1
 8012572:	b09d      	sub	sp, #116	; 0x74
 8012574:	4614      	mov	r4, r2
 8012576:	4698      	mov	r8, r3
 8012578:	4606      	mov	r6, r0
 801257a:	b118      	cbz	r0, 8012584 <_vfiprintf_r+0x18>
 801257c:	6a03      	ldr	r3, [r0, #32]
 801257e:	b90b      	cbnz	r3, 8012584 <_vfiprintf_r+0x18>
 8012580:	f7fe f982 	bl	8010888 <__sinit>
 8012584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012586:	07d9      	lsls	r1, r3, #31
 8012588:	d405      	bmi.n	8012596 <_vfiprintf_r+0x2a>
 801258a:	89ab      	ldrh	r3, [r5, #12]
 801258c:	059a      	lsls	r2, r3, #22
 801258e:	d402      	bmi.n	8012596 <_vfiprintf_r+0x2a>
 8012590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012592:	f7fe faad 	bl	8010af0 <__retarget_lock_acquire_recursive>
 8012596:	89ab      	ldrh	r3, [r5, #12]
 8012598:	071b      	lsls	r3, r3, #28
 801259a:	d501      	bpl.n	80125a0 <_vfiprintf_r+0x34>
 801259c:	692b      	ldr	r3, [r5, #16]
 801259e:	b99b      	cbnz	r3, 80125c8 <_vfiprintf_r+0x5c>
 80125a0:	4629      	mov	r1, r5
 80125a2:	4630      	mov	r0, r6
 80125a4:	f000 f93a 	bl	801281c <__swsetup_r>
 80125a8:	b170      	cbz	r0, 80125c8 <_vfiprintf_r+0x5c>
 80125aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125ac:	07dc      	lsls	r4, r3, #31
 80125ae:	d504      	bpl.n	80125ba <_vfiprintf_r+0x4e>
 80125b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125b4:	b01d      	add	sp, #116	; 0x74
 80125b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ba:	89ab      	ldrh	r3, [r5, #12]
 80125bc:	0598      	lsls	r0, r3, #22
 80125be:	d4f7      	bmi.n	80125b0 <_vfiprintf_r+0x44>
 80125c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125c2:	f7fe fa96 	bl	8010af2 <__retarget_lock_release_recursive>
 80125c6:	e7f3      	b.n	80125b0 <_vfiprintf_r+0x44>
 80125c8:	2300      	movs	r3, #0
 80125ca:	9309      	str	r3, [sp, #36]	; 0x24
 80125cc:	2320      	movs	r3, #32
 80125ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80125d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80125d6:	2330      	movs	r3, #48	; 0x30
 80125d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801278c <_vfiprintf_r+0x220>
 80125dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80125e0:	f04f 0901 	mov.w	r9, #1
 80125e4:	4623      	mov	r3, r4
 80125e6:	469a      	mov	sl, r3
 80125e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125ec:	b10a      	cbz	r2, 80125f2 <_vfiprintf_r+0x86>
 80125ee:	2a25      	cmp	r2, #37	; 0x25
 80125f0:	d1f9      	bne.n	80125e6 <_vfiprintf_r+0x7a>
 80125f2:	ebba 0b04 	subs.w	fp, sl, r4
 80125f6:	d00b      	beq.n	8012610 <_vfiprintf_r+0xa4>
 80125f8:	465b      	mov	r3, fp
 80125fa:	4622      	mov	r2, r4
 80125fc:	4629      	mov	r1, r5
 80125fe:	4630      	mov	r0, r6
 8012600:	f7ff ffa2 	bl	8012548 <__sfputs_r>
 8012604:	3001      	adds	r0, #1
 8012606:	f000 80a9 	beq.w	801275c <_vfiprintf_r+0x1f0>
 801260a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801260c:	445a      	add	r2, fp
 801260e:	9209      	str	r2, [sp, #36]	; 0x24
 8012610:	f89a 3000 	ldrb.w	r3, [sl]
 8012614:	2b00      	cmp	r3, #0
 8012616:	f000 80a1 	beq.w	801275c <_vfiprintf_r+0x1f0>
 801261a:	2300      	movs	r3, #0
 801261c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012624:	f10a 0a01 	add.w	sl, sl, #1
 8012628:	9304      	str	r3, [sp, #16]
 801262a:	9307      	str	r3, [sp, #28]
 801262c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012630:	931a      	str	r3, [sp, #104]	; 0x68
 8012632:	4654      	mov	r4, sl
 8012634:	2205      	movs	r2, #5
 8012636:	f814 1b01 	ldrb.w	r1, [r4], #1
 801263a:	4854      	ldr	r0, [pc, #336]	; (801278c <_vfiprintf_r+0x220>)
 801263c:	f7ed fdd0 	bl	80001e0 <memchr>
 8012640:	9a04      	ldr	r2, [sp, #16]
 8012642:	b9d8      	cbnz	r0, 801267c <_vfiprintf_r+0x110>
 8012644:	06d1      	lsls	r1, r2, #27
 8012646:	bf44      	itt	mi
 8012648:	2320      	movmi	r3, #32
 801264a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801264e:	0713      	lsls	r3, r2, #28
 8012650:	bf44      	itt	mi
 8012652:	232b      	movmi	r3, #43	; 0x2b
 8012654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012658:	f89a 3000 	ldrb.w	r3, [sl]
 801265c:	2b2a      	cmp	r3, #42	; 0x2a
 801265e:	d015      	beq.n	801268c <_vfiprintf_r+0x120>
 8012660:	9a07      	ldr	r2, [sp, #28]
 8012662:	4654      	mov	r4, sl
 8012664:	2000      	movs	r0, #0
 8012666:	f04f 0c0a 	mov.w	ip, #10
 801266a:	4621      	mov	r1, r4
 801266c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012670:	3b30      	subs	r3, #48	; 0x30
 8012672:	2b09      	cmp	r3, #9
 8012674:	d94d      	bls.n	8012712 <_vfiprintf_r+0x1a6>
 8012676:	b1b0      	cbz	r0, 80126a6 <_vfiprintf_r+0x13a>
 8012678:	9207      	str	r2, [sp, #28]
 801267a:	e014      	b.n	80126a6 <_vfiprintf_r+0x13a>
 801267c:	eba0 0308 	sub.w	r3, r0, r8
 8012680:	fa09 f303 	lsl.w	r3, r9, r3
 8012684:	4313      	orrs	r3, r2
 8012686:	9304      	str	r3, [sp, #16]
 8012688:	46a2      	mov	sl, r4
 801268a:	e7d2      	b.n	8012632 <_vfiprintf_r+0xc6>
 801268c:	9b03      	ldr	r3, [sp, #12]
 801268e:	1d19      	adds	r1, r3, #4
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	9103      	str	r1, [sp, #12]
 8012694:	2b00      	cmp	r3, #0
 8012696:	bfbb      	ittet	lt
 8012698:	425b      	neglt	r3, r3
 801269a:	f042 0202 	orrlt.w	r2, r2, #2
 801269e:	9307      	strge	r3, [sp, #28]
 80126a0:	9307      	strlt	r3, [sp, #28]
 80126a2:	bfb8      	it	lt
 80126a4:	9204      	strlt	r2, [sp, #16]
 80126a6:	7823      	ldrb	r3, [r4, #0]
 80126a8:	2b2e      	cmp	r3, #46	; 0x2e
 80126aa:	d10c      	bne.n	80126c6 <_vfiprintf_r+0x15a>
 80126ac:	7863      	ldrb	r3, [r4, #1]
 80126ae:	2b2a      	cmp	r3, #42	; 0x2a
 80126b0:	d134      	bne.n	801271c <_vfiprintf_r+0x1b0>
 80126b2:	9b03      	ldr	r3, [sp, #12]
 80126b4:	1d1a      	adds	r2, r3, #4
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	9203      	str	r2, [sp, #12]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	bfb8      	it	lt
 80126be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80126c2:	3402      	adds	r4, #2
 80126c4:	9305      	str	r3, [sp, #20]
 80126c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801279c <_vfiprintf_r+0x230>
 80126ca:	7821      	ldrb	r1, [r4, #0]
 80126cc:	2203      	movs	r2, #3
 80126ce:	4650      	mov	r0, sl
 80126d0:	f7ed fd86 	bl	80001e0 <memchr>
 80126d4:	b138      	cbz	r0, 80126e6 <_vfiprintf_r+0x17a>
 80126d6:	9b04      	ldr	r3, [sp, #16]
 80126d8:	eba0 000a 	sub.w	r0, r0, sl
 80126dc:	2240      	movs	r2, #64	; 0x40
 80126de:	4082      	lsls	r2, r0
 80126e0:	4313      	orrs	r3, r2
 80126e2:	3401      	adds	r4, #1
 80126e4:	9304      	str	r3, [sp, #16]
 80126e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126ea:	4829      	ldr	r0, [pc, #164]	; (8012790 <_vfiprintf_r+0x224>)
 80126ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80126f0:	2206      	movs	r2, #6
 80126f2:	f7ed fd75 	bl	80001e0 <memchr>
 80126f6:	2800      	cmp	r0, #0
 80126f8:	d03f      	beq.n	801277a <_vfiprintf_r+0x20e>
 80126fa:	4b26      	ldr	r3, [pc, #152]	; (8012794 <_vfiprintf_r+0x228>)
 80126fc:	bb1b      	cbnz	r3, 8012746 <_vfiprintf_r+0x1da>
 80126fe:	9b03      	ldr	r3, [sp, #12]
 8012700:	3307      	adds	r3, #7
 8012702:	f023 0307 	bic.w	r3, r3, #7
 8012706:	3308      	adds	r3, #8
 8012708:	9303      	str	r3, [sp, #12]
 801270a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801270c:	443b      	add	r3, r7
 801270e:	9309      	str	r3, [sp, #36]	; 0x24
 8012710:	e768      	b.n	80125e4 <_vfiprintf_r+0x78>
 8012712:	fb0c 3202 	mla	r2, ip, r2, r3
 8012716:	460c      	mov	r4, r1
 8012718:	2001      	movs	r0, #1
 801271a:	e7a6      	b.n	801266a <_vfiprintf_r+0xfe>
 801271c:	2300      	movs	r3, #0
 801271e:	3401      	adds	r4, #1
 8012720:	9305      	str	r3, [sp, #20]
 8012722:	4619      	mov	r1, r3
 8012724:	f04f 0c0a 	mov.w	ip, #10
 8012728:	4620      	mov	r0, r4
 801272a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801272e:	3a30      	subs	r2, #48	; 0x30
 8012730:	2a09      	cmp	r2, #9
 8012732:	d903      	bls.n	801273c <_vfiprintf_r+0x1d0>
 8012734:	2b00      	cmp	r3, #0
 8012736:	d0c6      	beq.n	80126c6 <_vfiprintf_r+0x15a>
 8012738:	9105      	str	r1, [sp, #20]
 801273a:	e7c4      	b.n	80126c6 <_vfiprintf_r+0x15a>
 801273c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012740:	4604      	mov	r4, r0
 8012742:	2301      	movs	r3, #1
 8012744:	e7f0      	b.n	8012728 <_vfiprintf_r+0x1bc>
 8012746:	ab03      	add	r3, sp, #12
 8012748:	9300      	str	r3, [sp, #0]
 801274a:	462a      	mov	r2, r5
 801274c:	4b12      	ldr	r3, [pc, #72]	; (8012798 <_vfiprintf_r+0x22c>)
 801274e:	a904      	add	r1, sp, #16
 8012750:	4630      	mov	r0, r6
 8012752:	f7fd fc59 	bl	8010008 <_printf_float>
 8012756:	4607      	mov	r7, r0
 8012758:	1c78      	adds	r0, r7, #1
 801275a:	d1d6      	bne.n	801270a <_vfiprintf_r+0x19e>
 801275c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801275e:	07d9      	lsls	r1, r3, #31
 8012760:	d405      	bmi.n	801276e <_vfiprintf_r+0x202>
 8012762:	89ab      	ldrh	r3, [r5, #12]
 8012764:	059a      	lsls	r2, r3, #22
 8012766:	d402      	bmi.n	801276e <_vfiprintf_r+0x202>
 8012768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801276a:	f7fe f9c2 	bl	8010af2 <__retarget_lock_release_recursive>
 801276e:	89ab      	ldrh	r3, [r5, #12]
 8012770:	065b      	lsls	r3, r3, #25
 8012772:	f53f af1d 	bmi.w	80125b0 <_vfiprintf_r+0x44>
 8012776:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012778:	e71c      	b.n	80125b4 <_vfiprintf_r+0x48>
 801277a:	ab03      	add	r3, sp, #12
 801277c:	9300      	str	r3, [sp, #0]
 801277e:	462a      	mov	r2, r5
 8012780:	4b05      	ldr	r3, [pc, #20]	; (8012798 <_vfiprintf_r+0x22c>)
 8012782:	a904      	add	r1, sp, #16
 8012784:	4630      	mov	r0, r6
 8012786:	f7fd fee3 	bl	8010550 <_printf_i>
 801278a:	e7e4      	b.n	8012756 <_vfiprintf_r+0x1ea>
 801278c:	080143ec 	.word	0x080143ec
 8012790:	080143f6 	.word	0x080143f6
 8012794:	08010009 	.word	0x08010009
 8012798:	08012549 	.word	0x08012549
 801279c:	080143f2 	.word	0x080143f2

080127a0 <__swbuf_r>:
 80127a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127a2:	460e      	mov	r6, r1
 80127a4:	4614      	mov	r4, r2
 80127a6:	4605      	mov	r5, r0
 80127a8:	b118      	cbz	r0, 80127b2 <__swbuf_r+0x12>
 80127aa:	6a03      	ldr	r3, [r0, #32]
 80127ac:	b90b      	cbnz	r3, 80127b2 <__swbuf_r+0x12>
 80127ae:	f7fe f86b 	bl	8010888 <__sinit>
 80127b2:	69a3      	ldr	r3, [r4, #24]
 80127b4:	60a3      	str	r3, [r4, #8]
 80127b6:	89a3      	ldrh	r3, [r4, #12]
 80127b8:	071a      	lsls	r2, r3, #28
 80127ba:	d525      	bpl.n	8012808 <__swbuf_r+0x68>
 80127bc:	6923      	ldr	r3, [r4, #16]
 80127be:	b31b      	cbz	r3, 8012808 <__swbuf_r+0x68>
 80127c0:	6823      	ldr	r3, [r4, #0]
 80127c2:	6922      	ldr	r2, [r4, #16]
 80127c4:	1a98      	subs	r0, r3, r2
 80127c6:	6963      	ldr	r3, [r4, #20]
 80127c8:	b2f6      	uxtb	r6, r6
 80127ca:	4283      	cmp	r3, r0
 80127cc:	4637      	mov	r7, r6
 80127ce:	dc04      	bgt.n	80127da <__swbuf_r+0x3a>
 80127d0:	4621      	mov	r1, r4
 80127d2:	4628      	mov	r0, r5
 80127d4:	f7ff fdbc 	bl	8012350 <_fflush_r>
 80127d8:	b9e0      	cbnz	r0, 8012814 <__swbuf_r+0x74>
 80127da:	68a3      	ldr	r3, [r4, #8]
 80127dc:	3b01      	subs	r3, #1
 80127de:	60a3      	str	r3, [r4, #8]
 80127e0:	6823      	ldr	r3, [r4, #0]
 80127e2:	1c5a      	adds	r2, r3, #1
 80127e4:	6022      	str	r2, [r4, #0]
 80127e6:	701e      	strb	r6, [r3, #0]
 80127e8:	6962      	ldr	r2, [r4, #20]
 80127ea:	1c43      	adds	r3, r0, #1
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d004      	beq.n	80127fa <__swbuf_r+0x5a>
 80127f0:	89a3      	ldrh	r3, [r4, #12]
 80127f2:	07db      	lsls	r3, r3, #31
 80127f4:	d506      	bpl.n	8012804 <__swbuf_r+0x64>
 80127f6:	2e0a      	cmp	r6, #10
 80127f8:	d104      	bne.n	8012804 <__swbuf_r+0x64>
 80127fa:	4621      	mov	r1, r4
 80127fc:	4628      	mov	r0, r5
 80127fe:	f7ff fda7 	bl	8012350 <_fflush_r>
 8012802:	b938      	cbnz	r0, 8012814 <__swbuf_r+0x74>
 8012804:	4638      	mov	r0, r7
 8012806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012808:	4621      	mov	r1, r4
 801280a:	4628      	mov	r0, r5
 801280c:	f000 f806 	bl	801281c <__swsetup_r>
 8012810:	2800      	cmp	r0, #0
 8012812:	d0d5      	beq.n	80127c0 <__swbuf_r+0x20>
 8012814:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012818:	e7f4      	b.n	8012804 <__swbuf_r+0x64>
	...

0801281c <__swsetup_r>:
 801281c:	b538      	push	{r3, r4, r5, lr}
 801281e:	4b2a      	ldr	r3, [pc, #168]	; (80128c8 <__swsetup_r+0xac>)
 8012820:	4605      	mov	r5, r0
 8012822:	6818      	ldr	r0, [r3, #0]
 8012824:	460c      	mov	r4, r1
 8012826:	b118      	cbz	r0, 8012830 <__swsetup_r+0x14>
 8012828:	6a03      	ldr	r3, [r0, #32]
 801282a:	b90b      	cbnz	r3, 8012830 <__swsetup_r+0x14>
 801282c:	f7fe f82c 	bl	8010888 <__sinit>
 8012830:	89a3      	ldrh	r3, [r4, #12]
 8012832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012836:	0718      	lsls	r0, r3, #28
 8012838:	d422      	bmi.n	8012880 <__swsetup_r+0x64>
 801283a:	06d9      	lsls	r1, r3, #27
 801283c:	d407      	bmi.n	801284e <__swsetup_r+0x32>
 801283e:	2309      	movs	r3, #9
 8012840:	602b      	str	r3, [r5, #0]
 8012842:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012846:	81a3      	strh	r3, [r4, #12]
 8012848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801284c:	e034      	b.n	80128b8 <__swsetup_r+0x9c>
 801284e:	0758      	lsls	r0, r3, #29
 8012850:	d512      	bpl.n	8012878 <__swsetup_r+0x5c>
 8012852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012854:	b141      	cbz	r1, 8012868 <__swsetup_r+0x4c>
 8012856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801285a:	4299      	cmp	r1, r3
 801285c:	d002      	beq.n	8012864 <__swsetup_r+0x48>
 801285e:	4628      	mov	r0, r5
 8012860:	f7fe ffd0 	bl	8011804 <_free_r>
 8012864:	2300      	movs	r3, #0
 8012866:	6363      	str	r3, [r4, #52]	; 0x34
 8012868:	89a3      	ldrh	r3, [r4, #12]
 801286a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801286e:	81a3      	strh	r3, [r4, #12]
 8012870:	2300      	movs	r3, #0
 8012872:	6063      	str	r3, [r4, #4]
 8012874:	6923      	ldr	r3, [r4, #16]
 8012876:	6023      	str	r3, [r4, #0]
 8012878:	89a3      	ldrh	r3, [r4, #12]
 801287a:	f043 0308 	orr.w	r3, r3, #8
 801287e:	81a3      	strh	r3, [r4, #12]
 8012880:	6923      	ldr	r3, [r4, #16]
 8012882:	b94b      	cbnz	r3, 8012898 <__swsetup_r+0x7c>
 8012884:	89a3      	ldrh	r3, [r4, #12]
 8012886:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801288a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801288e:	d003      	beq.n	8012898 <__swsetup_r+0x7c>
 8012890:	4621      	mov	r1, r4
 8012892:	4628      	mov	r0, r5
 8012894:	f000 f884 	bl	80129a0 <__smakebuf_r>
 8012898:	89a0      	ldrh	r0, [r4, #12]
 801289a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801289e:	f010 0301 	ands.w	r3, r0, #1
 80128a2:	d00a      	beq.n	80128ba <__swsetup_r+0x9e>
 80128a4:	2300      	movs	r3, #0
 80128a6:	60a3      	str	r3, [r4, #8]
 80128a8:	6963      	ldr	r3, [r4, #20]
 80128aa:	425b      	negs	r3, r3
 80128ac:	61a3      	str	r3, [r4, #24]
 80128ae:	6923      	ldr	r3, [r4, #16]
 80128b0:	b943      	cbnz	r3, 80128c4 <__swsetup_r+0xa8>
 80128b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80128b6:	d1c4      	bne.n	8012842 <__swsetup_r+0x26>
 80128b8:	bd38      	pop	{r3, r4, r5, pc}
 80128ba:	0781      	lsls	r1, r0, #30
 80128bc:	bf58      	it	pl
 80128be:	6963      	ldrpl	r3, [r4, #20]
 80128c0:	60a3      	str	r3, [r4, #8]
 80128c2:	e7f4      	b.n	80128ae <__swsetup_r+0x92>
 80128c4:	2000      	movs	r0, #0
 80128c6:	e7f7      	b.n	80128b8 <__swsetup_r+0x9c>
 80128c8:	20000178 	.word	0x20000178

080128cc <_raise_r>:
 80128cc:	291f      	cmp	r1, #31
 80128ce:	b538      	push	{r3, r4, r5, lr}
 80128d0:	4604      	mov	r4, r0
 80128d2:	460d      	mov	r5, r1
 80128d4:	d904      	bls.n	80128e0 <_raise_r+0x14>
 80128d6:	2316      	movs	r3, #22
 80128d8:	6003      	str	r3, [r0, #0]
 80128da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128de:	bd38      	pop	{r3, r4, r5, pc}
 80128e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80128e2:	b112      	cbz	r2, 80128ea <_raise_r+0x1e>
 80128e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80128e8:	b94b      	cbnz	r3, 80128fe <_raise_r+0x32>
 80128ea:	4620      	mov	r0, r4
 80128ec:	f000 f830 	bl	8012950 <_getpid_r>
 80128f0:	462a      	mov	r2, r5
 80128f2:	4601      	mov	r1, r0
 80128f4:	4620      	mov	r0, r4
 80128f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128fa:	f000 b817 	b.w	801292c <_kill_r>
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d00a      	beq.n	8012918 <_raise_r+0x4c>
 8012902:	1c59      	adds	r1, r3, #1
 8012904:	d103      	bne.n	801290e <_raise_r+0x42>
 8012906:	2316      	movs	r3, #22
 8012908:	6003      	str	r3, [r0, #0]
 801290a:	2001      	movs	r0, #1
 801290c:	e7e7      	b.n	80128de <_raise_r+0x12>
 801290e:	2400      	movs	r4, #0
 8012910:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012914:	4628      	mov	r0, r5
 8012916:	4798      	blx	r3
 8012918:	2000      	movs	r0, #0
 801291a:	e7e0      	b.n	80128de <_raise_r+0x12>

0801291c <raise>:
 801291c:	4b02      	ldr	r3, [pc, #8]	; (8012928 <raise+0xc>)
 801291e:	4601      	mov	r1, r0
 8012920:	6818      	ldr	r0, [r3, #0]
 8012922:	f7ff bfd3 	b.w	80128cc <_raise_r>
 8012926:	bf00      	nop
 8012928:	20000178 	.word	0x20000178

0801292c <_kill_r>:
 801292c:	b538      	push	{r3, r4, r5, lr}
 801292e:	4d07      	ldr	r5, [pc, #28]	; (801294c <_kill_r+0x20>)
 8012930:	2300      	movs	r3, #0
 8012932:	4604      	mov	r4, r0
 8012934:	4608      	mov	r0, r1
 8012936:	4611      	mov	r1, r2
 8012938:	602b      	str	r3, [r5, #0]
 801293a:	f7ef fc75 	bl	8002228 <_kill>
 801293e:	1c43      	adds	r3, r0, #1
 8012940:	d102      	bne.n	8012948 <_kill_r+0x1c>
 8012942:	682b      	ldr	r3, [r5, #0]
 8012944:	b103      	cbz	r3, 8012948 <_kill_r+0x1c>
 8012946:	6023      	str	r3, [r4, #0]
 8012948:	bd38      	pop	{r3, r4, r5, pc}
 801294a:	bf00      	nop
 801294c:	200023d4 	.word	0x200023d4

08012950 <_getpid_r>:
 8012950:	f7ef bc62 	b.w	8002218 <_getpid>

08012954 <__swhatbuf_r>:
 8012954:	b570      	push	{r4, r5, r6, lr}
 8012956:	460c      	mov	r4, r1
 8012958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801295c:	2900      	cmp	r1, #0
 801295e:	b096      	sub	sp, #88	; 0x58
 8012960:	4615      	mov	r5, r2
 8012962:	461e      	mov	r6, r3
 8012964:	da0d      	bge.n	8012982 <__swhatbuf_r+0x2e>
 8012966:	89a3      	ldrh	r3, [r4, #12]
 8012968:	f013 0f80 	tst.w	r3, #128	; 0x80
 801296c:	f04f 0100 	mov.w	r1, #0
 8012970:	bf0c      	ite	eq
 8012972:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012976:	2340      	movne	r3, #64	; 0x40
 8012978:	2000      	movs	r0, #0
 801297a:	6031      	str	r1, [r6, #0]
 801297c:	602b      	str	r3, [r5, #0]
 801297e:	b016      	add	sp, #88	; 0x58
 8012980:	bd70      	pop	{r4, r5, r6, pc}
 8012982:	466a      	mov	r2, sp
 8012984:	f000 f848 	bl	8012a18 <_fstat_r>
 8012988:	2800      	cmp	r0, #0
 801298a:	dbec      	blt.n	8012966 <__swhatbuf_r+0x12>
 801298c:	9901      	ldr	r1, [sp, #4]
 801298e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012992:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012996:	4259      	negs	r1, r3
 8012998:	4159      	adcs	r1, r3
 801299a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801299e:	e7eb      	b.n	8012978 <__swhatbuf_r+0x24>

080129a0 <__smakebuf_r>:
 80129a0:	898b      	ldrh	r3, [r1, #12]
 80129a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80129a4:	079d      	lsls	r5, r3, #30
 80129a6:	4606      	mov	r6, r0
 80129a8:	460c      	mov	r4, r1
 80129aa:	d507      	bpl.n	80129bc <__smakebuf_r+0x1c>
 80129ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80129b0:	6023      	str	r3, [r4, #0]
 80129b2:	6123      	str	r3, [r4, #16]
 80129b4:	2301      	movs	r3, #1
 80129b6:	6163      	str	r3, [r4, #20]
 80129b8:	b002      	add	sp, #8
 80129ba:	bd70      	pop	{r4, r5, r6, pc}
 80129bc:	ab01      	add	r3, sp, #4
 80129be:	466a      	mov	r2, sp
 80129c0:	f7ff ffc8 	bl	8012954 <__swhatbuf_r>
 80129c4:	9900      	ldr	r1, [sp, #0]
 80129c6:	4605      	mov	r5, r0
 80129c8:	4630      	mov	r0, r6
 80129ca:	f7fd f9f1 	bl	800fdb0 <_malloc_r>
 80129ce:	b948      	cbnz	r0, 80129e4 <__smakebuf_r+0x44>
 80129d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129d4:	059a      	lsls	r2, r3, #22
 80129d6:	d4ef      	bmi.n	80129b8 <__smakebuf_r+0x18>
 80129d8:	f023 0303 	bic.w	r3, r3, #3
 80129dc:	f043 0302 	orr.w	r3, r3, #2
 80129e0:	81a3      	strh	r3, [r4, #12]
 80129e2:	e7e3      	b.n	80129ac <__smakebuf_r+0xc>
 80129e4:	89a3      	ldrh	r3, [r4, #12]
 80129e6:	6020      	str	r0, [r4, #0]
 80129e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129ec:	81a3      	strh	r3, [r4, #12]
 80129ee:	9b00      	ldr	r3, [sp, #0]
 80129f0:	6163      	str	r3, [r4, #20]
 80129f2:	9b01      	ldr	r3, [sp, #4]
 80129f4:	6120      	str	r0, [r4, #16]
 80129f6:	b15b      	cbz	r3, 8012a10 <__smakebuf_r+0x70>
 80129f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129fc:	4630      	mov	r0, r6
 80129fe:	f000 f81d 	bl	8012a3c <_isatty_r>
 8012a02:	b128      	cbz	r0, 8012a10 <__smakebuf_r+0x70>
 8012a04:	89a3      	ldrh	r3, [r4, #12]
 8012a06:	f023 0303 	bic.w	r3, r3, #3
 8012a0a:	f043 0301 	orr.w	r3, r3, #1
 8012a0e:	81a3      	strh	r3, [r4, #12]
 8012a10:	89a3      	ldrh	r3, [r4, #12]
 8012a12:	431d      	orrs	r5, r3
 8012a14:	81a5      	strh	r5, [r4, #12]
 8012a16:	e7cf      	b.n	80129b8 <__smakebuf_r+0x18>

08012a18 <_fstat_r>:
 8012a18:	b538      	push	{r3, r4, r5, lr}
 8012a1a:	4d07      	ldr	r5, [pc, #28]	; (8012a38 <_fstat_r+0x20>)
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	4604      	mov	r4, r0
 8012a20:	4608      	mov	r0, r1
 8012a22:	4611      	mov	r1, r2
 8012a24:	602b      	str	r3, [r5, #0]
 8012a26:	f7ef fc5e 	bl	80022e6 <_fstat>
 8012a2a:	1c43      	adds	r3, r0, #1
 8012a2c:	d102      	bne.n	8012a34 <_fstat_r+0x1c>
 8012a2e:	682b      	ldr	r3, [r5, #0]
 8012a30:	b103      	cbz	r3, 8012a34 <_fstat_r+0x1c>
 8012a32:	6023      	str	r3, [r4, #0]
 8012a34:	bd38      	pop	{r3, r4, r5, pc}
 8012a36:	bf00      	nop
 8012a38:	200023d4 	.word	0x200023d4

08012a3c <_isatty_r>:
 8012a3c:	b538      	push	{r3, r4, r5, lr}
 8012a3e:	4d06      	ldr	r5, [pc, #24]	; (8012a58 <_isatty_r+0x1c>)
 8012a40:	2300      	movs	r3, #0
 8012a42:	4604      	mov	r4, r0
 8012a44:	4608      	mov	r0, r1
 8012a46:	602b      	str	r3, [r5, #0]
 8012a48:	f7ef fc5d 	bl	8002306 <_isatty>
 8012a4c:	1c43      	adds	r3, r0, #1
 8012a4e:	d102      	bne.n	8012a56 <_isatty_r+0x1a>
 8012a50:	682b      	ldr	r3, [r5, #0]
 8012a52:	b103      	cbz	r3, 8012a56 <_isatty_r+0x1a>
 8012a54:	6023      	str	r3, [r4, #0]
 8012a56:	bd38      	pop	{r3, r4, r5, pc}
 8012a58:	200023d4 	.word	0x200023d4

08012a5c <atan2>:
 8012a5c:	f000 bb2c 	b.w	80130b8 <__ieee754_atan2>

08012a60 <pow>:
 8012a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a62:	ed2d 8b02 	vpush	{d8}
 8012a66:	eeb0 8a40 	vmov.f32	s16, s0
 8012a6a:	eef0 8a60 	vmov.f32	s17, s1
 8012a6e:	ec55 4b11 	vmov	r4, r5, d1
 8012a72:	f000 fbe9 	bl	8013248 <__ieee754_pow>
 8012a76:	4622      	mov	r2, r4
 8012a78:	462b      	mov	r3, r5
 8012a7a:	4620      	mov	r0, r4
 8012a7c:	4629      	mov	r1, r5
 8012a7e:	ec57 6b10 	vmov	r6, r7, d0
 8012a82:	f7ee f85b 	bl	8000b3c <__aeabi_dcmpun>
 8012a86:	2800      	cmp	r0, #0
 8012a88:	d13b      	bne.n	8012b02 <pow+0xa2>
 8012a8a:	ec51 0b18 	vmov	r0, r1, d8
 8012a8e:	2200      	movs	r2, #0
 8012a90:	2300      	movs	r3, #0
 8012a92:	f7ee f821 	bl	8000ad8 <__aeabi_dcmpeq>
 8012a96:	b1b8      	cbz	r0, 8012ac8 <pow+0x68>
 8012a98:	2200      	movs	r2, #0
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	4629      	mov	r1, r5
 8012aa0:	f7ee f81a 	bl	8000ad8 <__aeabi_dcmpeq>
 8012aa4:	2800      	cmp	r0, #0
 8012aa6:	d146      	bne.n	8012b36 <pow+0xd6>
 8012aa8:	ec45 4b10 	vmov	d0, r4, r5
 8012aac:	f000 fa1d 	bl	8012eea <finite>
 8012ab0:	b338      	cbz	r0, 8012b02 <pow+0xa2>
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	4629      	mov	r1, r5
 8012aba:	f7ee f817 	bl	8000aec <__aeabi_dcmplt>
 8012abe:	b300      	cbz	r0, 8012b02 <pow+0xa2>
 8012ac0:	f7fd ffec 	bl	8010a9c <__errno>
 8012ac4:	2322      	movs	r3, #34	; 0x22
 8012ac6:	e01b      	b.n	8012b00 <pow+0xa0>
 8012ac8:	ec47 6b10 	vmov	d0, r6, r7
 8012acc:	f000 fa0d 	bl	8012eea <finite>
 8012ad0:	b9e0      	cbnz	r0, 8012b0c <pow+0xac>
 8012ad2:	eeb0 0a48 	vmov.f32	s0, s16
 8012ad6:	eef0 0a68 	vmov.f32	s1, s17
 8012ada:	f000 fa06 	bl	8012eea <finite>
 8012ade:	b1a8      	cbz	r0, 8012b0c <pow+0xac>
 8012ae0:	ec45 4b10 	vmov	d0, r4, r5
 8012ae4:	f000 fa01 	bl	8012eea <finite>
 8012ae8:	b180      	cbz	r0, 8012b0c <pow+0xac>
 8012aea:	4632      	mov	r2, r6
 8012aec:	463b      	mov	r3, r7
 8012aee:	4630      	mov	r0, r6
 8012af0:	4639      	mov	r1, r7
 8012af2:	f7ee f823 	bl	8000b3c <__aeabi_dcmpun>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	d0e2      	beq.n	8012ac0 <pow+0x60>
 8012afa:	f7fd ffcf 	bl	8010a9c <__errno>
 8012afe:	2321      	movs	r3, #33	; 0x21
 8012b00:	6003      	str	r3, [r0, #0]
 8012b02:	ecbd 8b02 	vpop	{d8}
 8012b06:	ec47 6b10 	vmov	d0, r6, r7
 8012b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	2300      	movs	r3, #0
 8012b10:	4630      	mov	r0, r6
 8012b12:	4639      	mov	r1, r7
 8012b14:	f7ed ffe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	d0f2      	beq.n	8012b02 <pow+0xa2>
 8012b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8012b20:	eef0 0a68 	vmov.f32	s1, s17
 8012b24:	f000 f9e1 	bl	8012eea <finite>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	d0ea      	beq.n	8012b02 <pow+0xa2>
 8012b2c:	ec45 4b10 	vmov	d0, r4, r5
 8012b30:	f000 f9db 	bl	8012eea <finite>
 8012b34:	e7c3      	b.n	8012abe <pow+0x5e>
 8012b36:	4f01      	ldr	r7, [pc, #4]	; (8012b3c <pow+0xdc>)
 8012b38:	2600      	movs	r6, #0
 8012b3a:	e7e2      	b.n	8012b02 <pow+0xa2>
 8012b3c:	3ff00000 	.word	0x3ff00000

08012b40 <sqrt>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	ed2d 8b02 	vpush	{d8}
 8012b46:	ec55 4b10 	vmov	r4, r5, d0
 8012b4a:	f000 f9d9 	bl	8012f00 <__ieee754_sqrt>
 8012b4e:	4622      	mov	r2, r4
 8012b50:	462b      	mov	r3, r5
 8012b52:	4620      	mov	r0, r4
 8012b54:	4629      	mov	r1, r5
 8012b56:	eeb0 8a40 	vmov.f32	s16, s0
 8012b5a:	eef0 8a60 	vmov.f32	s17, s1
 8012b5e:	f7ed ffed 	bl	8000b3c <__aeabi_dcmpun>
 8012b62:	b990      	cbnz	r0, 8012b8a <sqrt+0x4a>
 8012b64:	2200      	movs	r2, #0
 8012b66:	2300      	movs	r3, #0
 8012b68:	4620      	mov	r0, r4
 8012b6a:	4629      	mov	r1, r5
 8012b6c:	f7ed ffbe 	bl	8000aec <__aeabi_dcmplt>
 8012b70:	b158      	cbz	r0, 8012b8a <sqrt+0x4a>
 8012b72:	f7fd ff93 	bl	8010a9c <__errno>
 8012b76:	2321      	movs	r3, #33	; 0x21
 8012b78:	6003      	str	r3, [r0, #0]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	4610      	mov	r0, r2
 8012b80:	4619      	mov	r1, r3
 8012b82:	f7ed fe6b 	bl	800085c <__aeabi_ddiv>
 8012b86:	ec41 0b18 	vmov	d8, r0, r1
 8012b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8012b8e:	eef0 0a68 	vmov.f32	s1, s17
 8012b92:	ecbd 8b02 	vpop	{d8}
 8012b96:	bd38      	pop	{r3, r4, r5, pc}

08012b98 <atan>:
 8012b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9c:	ec55 4b10 	vmov	r4, r5, d0
 8012ba0:	4bc3      	ldr	r3, [pc, #780]	; (8012eb0 <atan+0x318>)
 8012ba2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012ba6:	429e      	cmp	r6, r3
 8012ba8:	46ab      	mov	fp, r5
 8012baa:	dd18      	ble.n	8012bde <atan+0x46>
 8012bac:	4bc1      	ldr	r3, [pc, #772]	; (8012eb4 <atan+0x31c>)
 8012bae:	429e      	cmp	r6, r3
 8012bb0:	dc01      	bgt.n	8012bb6 <atan+0x1e>
 8012bb2:	d109      	bne.n	8012bc8 <atan+0x30>
 8012bb4:	b144      	cbz	r4, 8012bc8 <atan+0x30>
 8012bb6:	4622      	mov	r2, r4
 8012bb8:	462b      	mov	r3, r5
 8012bba:	4620      	mov	r0, r4
 8012bbc:	4629      	mov	r1, r5
 8012bbe:	f7ed fb6d 	bl	800029c <__adddf3>
 8012bc2:	4604      	mov	r4, r0
 8012bc4:	460d      	mov	r5, r1
 8012bc6:	e006      	b.n	8012bd6 <atan+0x3e>
 8012bc8:	f1bb 0f00 	cmp.w	fp, #0
 8012bcc:	f300 8131 	bgt.w	8012e32 <atan+0x29a>
 8012bd0:	a59b      	add	r5, pc, #620	; (adr r5, 8012e40 <atan+0x2a8>)
 8012bd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012bd6:	ec45 4b10 	vmov	d0, r4, r5
 8012bda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bde:	4bb6      	ldr	r3, [pc, #728]	; (8012eb8 <atan+0x320>)
 8012be0:	429e      	cmp	r6, r3
 8012be2:	dc14      	bgt.n	8012c0e <atan+0x76>
 8012be4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012be8:	429e      	cmp	r6, r3
 8012bea:	dc0d      	bgt.n	8012c08 <atan+0x70>
 8012bec:	a396      	add	r3, pc, #600	; (adr r3, 8012e48 <atan+0x2b0>)
 8012bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf2:	ee10 0a10 	vmov	r0, s0
 8012bf6:	4629      	mov	r1, r5
 8012bf8:	f7ed fb50 	bl	800029c <__adddf3>
 8012bfc:	4baf      	ldr	r3, [pc, #700]	; (8012ebc <atan+0x324>)
 8012bfe:	2200      	movs	r2, #0
 8012c00:	f7ed ff92 	bl	8000b28 <__aeabi_dcmpgt>
 8012c04:	2800      	cmp	r0, #0
 8012c06:	d1e6      	bne.n	8012bd6 <atan+0x3e>
 8012c08:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012c0c:	e02b      	b.n	8012c66 <atan+0xce>
 8012c0e:	f000 f963 	bl	8012ed8 <fabs>
 8012c12:	4bab      	ldr	r3, [pc, #684]	; (8012ec0 <atan+0x328>)
 8012c14:	429e      	cmp	r6, r3
 8012c16:	ec55 4b10 	vmov	r4, r5, d0
 8012c1a:	f300 80bf 	bgt.w	8012d9c <atan+0x204>
 8012c1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012c22:	429e      	cmp	r6, r3
 8012c24:	f300 80a0 	bgt.w	8012d68 <atan+0x1d0>
 8012c28:	ee10 2a10 	vmov	r2, s0
 8012c2c:	ee10 0a10 	vmov	r0, s0
 8012c30:	462b      	mov	r3, r5
 8012c32:	4629      	mov	r1, r5
 8012c34:	f7ed fb32 	bl	800029c <__adddf3>
 8012c38:	4ba0      	ldr	r3, [pc, #640]	; (8012ebc <atan+0x324>)
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	f7ed fb2c 	bl	8000298 <__aeabi_dsub>
 8012c40:	2200      	movs	r2, #0
 8012c42:	4606      	mov	r6, r0
 8012c44:	460f      	mov	r7, r1
 8012c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	4629      	mov	r1, r5
 8012c4e:	f7ed fb25 	bl	800029c <__adddf3>
 8012c52:	4602      	mov	r2, r0
 8012c54:	460b      	mov	r3, r1
 8012c56:	4630      	mov	r0, r6
 8012c58:	4639      	mov	r1, r7
 8012c5a:	f7ed fdff 	bl	800085c <__aeabi_ddiv>
 8012c5e:	f04f 0a00 	mov.w	sl, #0
 8012c62:	4604      	mov	r4, r0
 8012c64:	460d      	mov	r5, r1
 8012c66:	4622      	mov	r2, r4
 8012c68:	462b      	mov	r3, r5
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	4629      	mov	r1, r5
 8012c6e:	f7ed fccb 	bl	8000608 <__aeabi_dmul>
 8012c72:	4602      	mov	r2, r0
 8012c74:	460b      	mov	r3, r1
 8012c76:	4680      	mov	r8, r0
 8012c78:	4689      	mov	r9, r1
 8012c7a:	f7ed fcc5 	bl	8000608 <__aeabi_dmul>
 8012c7e:	a374      	add	r3, pc, #464	; (adr r3, 8012e50 <atan+0x2b8>)
 8012c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c84:	4606      	mov	r6, r0
 8012c86:	460f      	mov	r7, r1
 8012c88:	f7ed fcbe 	bl	8000608 <__aeabi_dmul>
 8012c8c:	a372      	add	r3, pc, #456	; (adr r3, 8012e58 <atan+0x2c0>)
 8012c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c92:	f7ed fb03 	bl	800029c <__adddf3>
 8012c96:	4632      	mov	r2, r6
 8012c98:	463b      	mov	r3, r7
 8012c9a:	f7ed fcb5 	bl	8000608 <__aeabi_dmul>
 8012c9e:	a370      	add	r3, pc, #448	; (adr r3, 8012e60 <atan+0x2c8>)
 8012ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca4:	f7ed fafa 	bl	800029c <__adddf3>
 8012ca8:	4632      	mov	r2, r6
 8012caa:	463b      	mov	r3, r7
 8012cac:	f7ed fcac 	bl	8000608 <__aeabi_dmul>
 8012cb0:	a36d      	add	r3, pc, #436	; (adr r3, 8012e68 <atan+0x2d0>)
 8012cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb6:	f7ed faf1 	bl	800029c <__adddf3>
 8012cba:	4632      	mov	r2, r6
 8012cbc:	463b      	mov	r3, r7
 8012cbe:	f7ed fca3 	bl	8000608 <__aeabi_dmul>
 8012cc2:	a36b      	add	r3, pc, #428	; (adr r3, 8012e70 <atan+0x2d8>)
 8012cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc8:	f7ed fae8 	bl	800029c <__adddf3>
 8012ccc:	4632      	mov	r2, r6
 8012cce:	463b      	mov	r3, r7
 8012cd0:	f7ed fc9a 	bl	8000608 <__aeabi_dmul>
 8012cd4:	a368      	add	r3, pc, #416	; (adr r3, 8012e78 <atan+0x2e0>)
 8012cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cda:	f7ed fadf 	bl	800029c <__adddf3>
 8012cde:	4642      	mov	r2, r8
 8012ce0:	464b      	mov	r3, r9
 8012ce2:	f7ed fc91 	bl	8000608 <__aeabi_dmul>
 8012ce6:	a366      	add	r3, pc, #408	; (adr r3, 8012e80 <atan+0x2e8>)
 8012ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cec:	4680      	mov	r8, r0
 8012cee:	4689      	mov	r9, r1
 8012cf0:	4630      	mov	r0, r6
 8012cf2:	4639      	mov	r1, r7
 8012cf4:	f7ed fc88 	bl	8000608 <__aeabi_dmul>
 8012cf8:	a363      	add	r3, pc, #396	; (adr r3, 8012e88 <atan+0x2f0>)
 8012cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cfe:	f7ed facb 	bl	8000298 <__aeabi_dsub>
 8012d02:	4632      	mov	r2, r6
 8012d04:	463b      	mov	r3, r7
 8012d06:	f7ed fc7f 	bl	8000608 <__aeabi_dmul>
 8012d0a:	a361      	add	r3, pc, #388	; (adr r3, 8012e90 <atan+0x2f8>)
 8012d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d10:	f7ed fac2 	bl	8000298 <__aeabi_dsub>
 8012d14:	4632      	mov	r2, r6
 8012d16:	463b      	mov	r3, r7
 8012d18:	f7ed fc76 	bl	8000608 <__aeabi_dmul>
 8012d1c:	a35e      	add	r3, pc, #376	; (adr r3, 8012e98 <atan+0x300>)
 8012d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d22:	f7ed fab9 	bl	8000298 <__aeabi_dsub>
 8012d26:	4632      	mov	r2, r6
 8012d28:	463b      	mov	r3, r7
 8012d2a:	f7ed fc6d 	bl	8000608 <__aeabi_dmul>
 8012d2e:	a35c      	add	r3, pc, #368	; (adr r3, 8012ea0 <atan+0x308>)
 8012d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d34:	f7ed fab0 	bl	8000298 <__aeabi_dsub>
 8012d38:	4632      	mov	r2, r6
 8012d3a:	463b      	mov	r3, r7
 8012d3c:	f7ed fc64 	bl	8000608 <__aeabi_dmul>
 8012d40:	4602      	mov	r2, r0
 8012d42:	460b      	mov	r3, r1
 8012d44:	4640      	mov	r0, r8
 8012d46:	4649      	mov	r1, r9
 8012d48:	f7ed faa8 	bl	800029c <__adddf3>
 8012d4c:	4622      	mov	r2, r4
 8012d4e:	462b      	mov	r3, r5
 8012d50:	f7ed fc5a 	bl	8000608 <__aeabi_dmul>
 8012d54:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8012d58:	4602      	mov	r2, r0
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	d14b      	bne.n	8012df6 <atan+0x25e>
 8012d5e:	4620      	mov	r0, r4
 8012d60:	4629      	mov	r1, r5
 8012d62:	f7ed fa99 	bl	8000298 <__aeabi_dsub>
 8012d66:	e72c      	b.n	8012bc2 <atan+0x2a>
 8012d68:	ee10 0a10 	vmov	r0, s0
 8012d6c:	4b53      	ldr	r3, [pc, #332]	; (8012ebc <atan+0x324>)
 8012d6e:	2200      	movs	r2, #0
 8012d70:	4629      	mov	r1, r5
 8012d72:	f7ed fa91 	bl	8000298 <__aeabi_dsub>
 8012d76:	4b51      	ldr	r3, [pc, #324]	; (8012ebc <atan+0x324>)
 8012d78:	4606      	mov	r6, r0
 8012d7a:	460f      	mov	r7, r1
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	4620      	mov	r0, r4
 8012d80:	4629      	mov	r1, r5
 8012d82:	f7ed fa8b 	bl	800029c <__adddf3>
 8012d86:	4602      	mov	r2, r0
 8012d88:	460b      	mov	r3, r1
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	4639      	mov	r1, r7
 8012d8e:	f7ed fd65 	bl	800085c <__aeabi_ddiv>
 8012d92:	f04f 0a01 	mov.w	sl, #1
 8012d96:	4604      	mov	r4, r0
 8012d98:	460d      	mov	r5, r1
 8012d9a:	e764      	b.n	8012c66 <atan+0xce>
 8012d9c:	4b49      	ldr	r3, [pc, #292]	; (8012ec4 <atan+0x32c>)
 8012d9e:	429e      	cmp	r6, r3
 8012da0:	da1d      	bge.n	8012dde <atan+0x246>
 8012da2:	ee10 0a10 	vmov	r0, s0
 8012da6:	4b48      	ldr	r3, [pc, #288]	; (8012ec8 <atan+0x330>)
 8012da8:	2200      	movs	r2, #0
 8012daa:	4629      	mov	r1, r5
 8012dac:	f7ed fa74 	bl	8000298 <__aeabi_dsub>
 8012db0:	4b45      	ldr	r3, [pc, #276]	; (8012ec8 <atan+0x330>)
 8012db2:	4606      	mov	r6, r0
 8012db4:	460f      	mov	r7, r1
 8012db6:	2200      	movs	r2, #0
 8012db8:	4620      	mov	r0, r4
 8012dba:	4629      	mov	r1, r5
 8012dbc:	f7ed fc24 	bl	8000608 <__aeabi_dmul>
 8012dc0:	4b3e      	ldr	r3, [pc, #248]	; (8012ebc <atan+0x324>)
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	f7ed fa6a 	bl	800029c <__adddf3>
 8012dc8:	4602      	mov	r2, r0
 8012dca:	460b      	mov	r3, r1
 8012dcc:	4630      	mov	r0, r6
 8012dce:	4639      	mov	r1, r7
 8012dd0:	f7ed fd44 	bl	800085c <__aeabi_ddiv>
 8012dd4:	f04f 0a02 	mov.w	sl, #2
 8012dd8:	4604      	mov	r4, r0
 8012dda:	460d      	mov	r5, r1
 8012ddc:	e743      	b.n	8012c66 <atan+0xce>
 8012dde:	462b      	mov	r3, r5
 8012de0:	ee10 2a10 	vmov	r2, s0
 8012de4:	4939      	ldr	r1, [pc, #228]	; (8012ecc <atan+0x334>)
 8012de6:	2000      	movs	r0, #0
 8012de8:	f7ed fd38 	bl	800085c <__aeabi_ddiv>
 8012dec:	f04f 0a03 	mov.w	sl, #3
 8012df0:	4604      	mov	r4, r0
 8012df2:	460d      	mov	r5, r1
 8012df4:	e737      	b.n	8012c66 <atan+0xce>
 8012df6:	4b36      	ldr	r3, [pc, #216]	; (8012ed0 <atan+0x338>)
 8012df8:	4e36      	ldr	r6, [pc, #216]	; (8012ed4 <atan+0x33c>)
 8012dfa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e02:	f7ed fa49 	bl	8000298 <__aeabi_dsub>
 8012e06:	4622      	mov	r2, r4
 8012e08:	462b      	mov	r3, r5
 8012e0a:	f7ed fa45 	bl	8000298 <__aeabi_dsub>
 8012e0e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012e12:	4602      	mov	r2, r0
 8012e14:	460b      	mov	r3, r1
 8012e16:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012e1a:	f7ed fa3d 	bl	8000298 <__aeabi_dsub>
 8012e1e:	f1bb 0f00 	cmp.w	fp, #0
 8012e22:	4604      	mov	r4, r0
 8012e24:	460d      	mov	r5, r1
 8012e26:	f6bf aed6 	bge.w	8012bd6 <atan+0x3e>
 8012e2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e2e:	461d      	mov	r5, r3
 8012e30:	e6d1      	b.n	8012bd6 <atan+0x3e>
 8012e32:	a51d      	add	r5, pc, #116	; (adr r5, 8012ea8 <atan+0x310>)
 8012e34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012e38:	e6cd      	b.n	8012bd6 <atan+0x3e>
 8012e3a:	bf00      	nop
 8012e3c:	f3af 8000 	nop.w
 8012e40:	54442d18 	.word	0x54442d18
 8012e44:	bff921fb 	.word	0xbff921fb
 8012e48:	8800759c 	.word	0x8800759c
 8012e4c:	7e37e43c 	.word	0x7e37e43c
 8012e50:	e322da11 	.word	0xe322da11
 8012e54:	3f90ad3a 	.word	0x3f90ad3a
 8012e58:	24760deb 	.word	0x24760deb
 8012e5c:	3fa97b4b 	.word	0x3fa97b4b
 8012e60:	a0d03d51 	.word	0xa0d03d51
 8012e64:	3fb10d66 	.word	0x3fb10d66
 8012e68:	c54c206e 	.word	0xc54c206e
 8012e6c:	3fb745cd 	.word	0x3fb745cd
 8012e70:	920083ff 	.word	0x920083ff
 8012e74:	3fc24924 	.word	0x3fc24924
 8012e78:	5555550d 	.word	0x5555550d
 8012e7c:	3fd55555 	.word	0x3fd55555
 8012e80:	2c6a6c2f 	.word	0x2c6a6c2f
 8012e84:	bfa2b444 	.word	0xbfa2b444
 8012e88:	52defd9a 	.word	0x52defd9a
 8012e8c:	3fadde2d 	.word	0x3fadde2d
 8012e90:	af749a6d 	.word	0xaf749a6d
 8012e94:	3fb3b0f2 	.word	0x3fb3b0f2
 8012e98:	fe231671 	.word	0xfe231671
 8012e9c:	3fbc71c6 	.word	0x3fbc71c6
 8012ea0:	9998ebc4 	.word	0x9998ebc4
 8012ea4:	3fc99999 	.word	0x3fc99999
 8012ea8:	54442d18 	.word	0x54442d18
 8012eac:	3ff921fb 	.word	0x3ff921fb
 8012eb0:	440fffff 	.word	0x440fffff
 8012eb4:	7ff00000 	.word	0x7ff00000
 8012eb8:	3fdbffff 	.word	0x3fdbffff
 8012ebc:	3ff00000 	.word	0x3ff00000
 8012ec0:	3ff2ffff 	.word	0x3ff2ffff
 8012ec4:	40038000 	.word	0x40038000
 8012ec8:	3ff80000 	.word	0x3ff80000
 8012ecc:	bff00000 	.word	0xbff00000
 8012ed0:	08014568 	.word	0x08014568
 8012ed4:	08014548 	.word	0x08014548

08012ed8 <fabs>:
 8012ed8:	ec51 0b10 	vmov	r0, r1, d0
 8012edc:	ee10 2a10 	vmov	r2, s0
 8012ee0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012ee4:	ec43 2b10 	vmov	d0, r2, r3
 8012ee8:	4770      	bx	lr

08012eea <finite>:
 8012eea:	b082      	sub	sp, #8
 8012eec:	ed8d 0b00 	vstr	d0, [sp]
 8012ef0:	9801      	ldr	r0, [sp, #4]
 8012ef2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012ef6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012efa:	0fc0      	lsrs	r0, r0, #31
 8012efc:	b002      	add	sp, #8
 8012efe:	4770      	bx	lr

08012f00 <__ieee754_sqrt>:
 8012f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f04:	ec55 4b10 	vmov	r4, r5, d0
 8012f08:	4e67      	ldr	r6, [pc, #412]	; (80130a8 <__ieee754_sqrt+0x1a8>)
 8012f0a:	43ae      	bics	r6, r5
 8012f0c:	ee10 0a10 	vmov	r0, s0
 8012f10:	ee10 2a10 	vmov	r2, s0
 8012f14:	4629      	mov	r1, r5
 8012f16:	462b      	mov	r3, r5
 8012f18:	d10d      	bne.n	8012f36 <__ieee754_sqrt+0x36>
 8012f1a:	f7ed fb75 	bl	8000608 <__aeabi_dmul>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	460b      	mov	r3, r1
 8012f22:	4620      	mov	r0, r4
 8012f24:	4629      	mov	r1, r5
 8012f26:	f7ed f9b9 	bl	800029c <__adddf3>
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	460d      	mov	r5, r1
 8012f2e:	ec45 4b10 	vmov	d0, r4, r5
 8012f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f36:	2d00      	cmp	r5, #0
 8012f38:	dc0b      	bgt.n	8012f52 <__ieee754_sqrt+0x52>
 8012f3a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012f3e:	4326      	orrs	r6, r4
 8012f40:	d0f5      	beq.n	8012f2e <__ieee754_sqrt+0x2e>
 8012f42:	b135      	cbz	r5, 8012f52 <__ieee754_sqrt+0x52>
 8012f44:	f7ed f9a8 	bl	8000298 <__aeabi_dsub>
 8012f48:	4602      	mov	r2, r0
 8012f4a:	460b      	mov	r3, r1
 8012f4c:	f7ed fc86 	bl	800085c <__aeabi_ddiv>
 8012f50:	e7eb      	b.n	8012f2a <__ieee754_sqrt+0x2a>
 8012f52:	1509      	asrs	r1, r1, #20
 8012f54:	f000 808d 	beq.w	8013072 <__ieee754_sqrt+0x172>
 8012f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f5c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012f60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f64:	07c9      	lsls	r1, r1, #31
 8012f66:	bf5c      	itt	pl
 8012f68:	005b      	lslpl	r3, r3, #1
 8012f6a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8012f6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012f72:	bf58      	it	pl
 8012f74:	0052      	lslpl	r2, r2, #1
 8012f76:	2500      	movs	r5, #0
 8012f78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012f7c:	1076      	asrs	r6, r6, #1
 8012f7e:	0052      	lsls	r2, r2, #1
 8012f80:	f04f 0e16 	mov.w	lr, #22
 8012f84:	46ac      	mov	ip, r5
 8012f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012f8a:	eb0c 0001 	add.w	r0, ip, r1
 8012f8e:	4298      	cmp	r0, r3
 8012f90:	bfde      	ittt	le
 8012f92:	1a1b      	suble	r3, r3, r0
 8012f94:	eb00 0c01 	addle.w	ip, r0, r1
 8012f98:	186d      	addle	r5, r5, r1
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	f1be 0e01 	subs.w	lr, lr, #1
 8012fa0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012fa4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012fa8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012fac:	d1ed      	bne.n	8012f8a <__ieee754_sqrt+0x8a>
 8012fae:	4674      	mov	r4, lr
 8012fb0:	2720      	movs	r7, #32
 8012fb2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012fb6:	4563      	cmp	r3, ip
 8012fb8:	eb01 000e 	add.w	r0, r1, lr
 8012fbc:	dc02      	bgt.n	8012fc4 <__ieee754_sqrt+0xc4>
 8012fbe:	d113      	bne.n	8012fe8 <__ieee754_sqrt+0xe8>
 8012fc0:	4290      	cmp	r0, r2
 8012fc2:	d811      	bhi.n	8012fe8 <__ieee754_sqrt+0xe8>
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	eb00 0e01 	add.w	lr, r0, r1
 8012fca:	da57      	bge.n	801307c <__ieee754_sqrt+0x17c>
 8012fcc:	f1be 0f00 	cmp.w	lr, #0
 8012fd0:	db54      	blt.n	801307c <__ieee754_sqrt+0x17c>
 8012fd2:	f10c 0801 	add.w	r8, ip, #1
 8012fd6:	eba3 030c 	sub.w	r3, r3, ip
 8012fda:	4290      	cmp	r0, r2
 8012fdc:	bf88      	it	hi
 8012fde:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8012fe2:	1a12      	subs	r2, r2, r0
 8012fe4:	440c      	add	r4, r1
 8012fe6:	46c4      	mov	ip, r8
 8012fe8:	005b      	lsls	r3, r3, #1
 8012fea:	3f01      	subs	r7, #1
 8012fec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012ff0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012ff4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012ff8:	d1dd      	bne.n	8012fb6 <__ieee754_sqrt+0xb6>
 8012ffa:	4313      	orrs	r3, r2
 8012ffc:	d01b      	beq.n	8013036 <__ieee754_sqrt+0x136>
 8012ffe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80130ac <__ieee754_sqrt+0x1ac>
 8013002:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80130b0 <__ieee754_sqrt+0x1b0>
 8013006:	e9da 0100 	ldrd	r0, r1, [sl]
 801300a:	e9db 2300 	ldrd	r2, r3, [fp]
 801300e:	f7ed f943 	bl	8000298 <__aeabi_dsub>
 8013012:	e9da 8900 	ldrd	r8, r9, [sl]
 8013016:	4602      	mov	r2, r0
 8013018:	460b      	mov	r3, r1
 801301a:	4640      	mov	r0, r8
 801301c:	4649      	mov	r1, r9
 801301e:	f7ed fd6f 	bl	8000b00 <__aeabi_dcmple>
 8013022:	b140      	cbz	r0, 8013036 <__ieee754_sqrt+0x136>
 8013024:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8013028:	e9da 0100 	ldrd	r0, r1, [sl]
 801302c:	e9db 2300 	ldrd	r2, r3, [fp]
 8013030:	d126      	bne.n	8013080 <__ieee754_sqrt+0x180>
 8013032:	3501      	adds	r5, #1
 8013034:	463c      	mov	r4, r7
 8013036:	106a      	asrs	r2, r5, #1
 8013038:	0863      	lsrs	r3, r4, #1
 801303a:	07e9      	lsls	r1, r5, #31
 801303c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013040:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013044:	bf48      	it	mi
 8013046:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801304a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801304e:	461c      	mov	r4, r3
 8013050:	e76d      	b.n	8012f2e <__ieee754_sqrt+0x2e>
 8013052:	0ad3      	lsrs	r3, r2, #11
 8013054:	3815      	subs	r0, #21
 8013056:	0552      	lsls	r2, r2, #21
 8013058:	2b00      	cmp	r3, #0
 801305a:	d0fa      	beq.n	8013052 <__ieee754_sqrt+0x152>
 801305c:	02dc      	lsls	r4, r3, #11
 801305e:	d50a      	bpl.n	8013076 <__ieee754_sqrt+0x176>
 8013060:	f1c1 0420 	rsb	r4, r1, #32
 8013064:	fa22 f404 	lsr.w	r4, r2, r4
 8013068:	1e4d      	subs	r5, r1, #1
 801306a:	408a      	lsls	r2, r1
 801306c:	4323      	orrs	r3, r4
 801306e:	1b41      	subs	r1, r0, r5
 8013070:	e772      	b.n	8012f58 <__ieee754_sqrt+0x58>
 8013072:	4608      	mov	r0, r1
 8013074:	e7f0      	b.n	8013058 <__ieee754_sqrt+0x158>
 8013076:	005b      	lsls	r3, r3, #1
 8013078:	3101      	adds	r1, #1
 801307a:	e7ef      	b.n	801305c <__ieee754_sqrt+0x15c>
 801307c:	46e0      	mov	r8, ip
 801307e:	e7aa      	b.n	8012fd6 <__ieee754_sqrt+0xd6>
 8013080:	f7ed f90c 	bl	800029c <__adddf3>
 8013084:	e9da 8900 	ldrd	r8, r9, [sl]
 8013088:	4602      	mov	r2, r0
 801308a:	460b      	mov	r3, r1
 801308c:	4640      	mov	r0, r8
 801308e:	4649      	mov	r1, r9
 8013090:	f7ed fd2c 	bl	8000aec <__aeabi_dcmplt>
 8013094:	b120      	cbz	r0, 80130a0 <__ieee754_sqrt+0x1a0>
 8013096:	1ca0      	adds	r0, r4, #2
 8013098:	bf08      	it	eq
 801309a:	3501      	addeq	r5, #1
 801309c:	3402      	adds	r4, #2
 801309e:	e7ca      	b.n	8013036 <__ieee754_sqrt+0x136>
 80130a0:	3401      	adds	r4, #1
 80130a2:	f024 0401 	bic.w	r4, r4, #1
 80130a6:	e7c6      	b.n	8013036 <__ieee754_sqrt+0x136>
 80130a8:	7ff00000 	.word	0x7ff00000
 80130ac:	200002e8 	.word	0x200002e8
 80130b0:	200002f0 	.word	0x200002f0
 80130b4:	00000000 	.word	0x00000000

080130b8 <__ieee754_atan2>:
 80130b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130bc:	ec57 6b11 	vmov	r6, r7, d1
 80130c0:	4273      	negs	r3, r6
 80130c2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8013240 <__ieee754_atan2+0x188>
 80130c6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80130ca:	4333      	orrs	r3, r6
 80130cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80130d0:	4543      	cmp	r3, r8
 80130d2:	ec51 0b10 	vmov	r0, r1, d0
 80130d6:	ee11 5a10 	vmov	r5, s2
 80130da:	d80a      	bhi.n	80130f2 <__ieee754_atan2+0x3a>
 80130dc:	4244      	negs	r4, r0
 80130de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80130e2:	4304      	orrs	r4, r0
 80130e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80130e8:	4544      	cmp	r4, r8
 80130ea:	ee10 9a10 	vmov	r9, s0
 80130ee:	468e      	mov	lr, r1
 80130f0:	d907      	bls.n	8013102 <__ieee754_atan2+0x4a>
 80130f2:	4632      	mov	r2, r6
 80130f4:	463b      	mov	r3, r7
 80130f6:	f7ed f8d1 	bl	800029c <__adddf3>
 80130fa:	ec41 0b10 	vmov	d0, r0, r1
 80130fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013102:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8013106:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801310a:	4334      	orrs	r4, r6
 801310c:	d103      	bne.n	8013116 <__ieee754_atan2+0x5e>
 801310e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013112:	f7ff bd41 	b.w	8012b98 <atan>
 8013116:	17bc      	asrs	r4, r7, #30
 8013118:	f004 0402 	and.w	r4, r4, #2
 801311c:	ea53 0909 	orrs.w	r9, r3, r9
 8013120:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013124:	d107      	bne.n	8013136 <__ieee754_atan2+0x7e>
 8013126:	2c02      	cmp	r4, #2
 8013128:	d05f      	beq.n	80131ea <__ieee754_atan2+0x132>
 801312a:	2c03      	cmp	r4, #3
 801312c:	d1e5      	bne.n	80130fa <__ieee754_atan2+0x42>
 801312e:	a140      	add	r1, pc, #256	; (adr r1, 8013230 <__ieee754_atan2+0x178>)
 8013130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013134:	e7e1      	b.n	80130fa <__ieee754_atan2+0x42>
 8013136:	4315      	orrs	r5, r2
 8013138:	d106      	bne.n	8013148 <__ieee754_atan2+0x90>
 801313a:	f1be 0f00 	cmp.w	lr, #0
 801313e:	da5f      	bge.n	8013200 <__ieee754_atan2+0x148>
 8013140:	a13d      	add	r1, pc, #244	; (adr r1, 8013238 <__ieee754_atan2+0x180>)
 8013142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013146:	e7d8      	b.n	80130fa <__ieee754_atan2+0x42>
 8013148:	4542      	cmp	r2, r8
 801314a:	d10f      	bne.n	801316c <__ieee754_atan2+0xb4>
 801314c:	4293      	cmp	r3, r2
 801314e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8013152:	d107      	bne.n	8013164 <__ieee754_atan2+0xac>
 8013154:	2c02      	cmp	r4, #2
 8013156:	d84c      	bhi.n	80131f2 <__ieee754_atan2+0x13a>
 8013158:	4b33      	ldr	r3, [pc, #204]	; (8013228 <__ieee754_atan2+0x170>)
 801315a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801315e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013162:	e7ca      	b.n	80130fa <__ieee754_atan2+0x42>
 8013164:	2c02      	cmp	r4, #2
 8013166:	d848      	bhi.n	80131fa <__ieee754_atan2+0x142>
 8013168:	4b30      	ldr	r3, [pc, #192]	; (801322c <__ieee754_atan2+0x174>)
 801316a:	e7f6      	b.n	801315a <__ieee754_atan2+0xa2>
 801316c:	4543      	cmp	r3, r8
 801316e:	d0e4      	beq.n	801313a <__ieee754_atan2+0x82>
 8013170:	1a9b      	subs	r3, r3, r2
 8013172:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013176:	ea4f 5223 	mov.w	r2, r3, asr #20
 801317a:	da1e      	bge.n	80131ba <__ieee754_atan2+0x102>
 801317c:	2f00      	cmp	r7, #0
 801317e:	da01      	bge.n	8013184 <__ieee754_atan2+0xcc>
 8013180:	323c      	adds	r2, #60	; 0x3c
 8013182:	db1e      	blt.n	80131c2 <__ieee754_atan2+0x10a>
 8013184:	4632      	mov	r2, r6
 8013186:	463b      	mov	r3, r7
 8013188:	f7ed fb68 	bl	800085c <__aeabi_ddiv>
 801318c:	ec41 0b10 	vmov	d0, r0, r1
 8013190:	f7ff fea2 	bl	8012ed8 <fabs>
 8013194:	f7ff fd00 	bl	8012b98 <atan>
 8013198:	ec51 0b10 	vmov	r0, r1, d0
 801319c:	2c01      	cmp	r4, #1
 801319e:	d013      	beq.n	80131c8 <__ieee754_atan2+0x110>
 80131a0:	2c02      	cmp	r4, #2
 80131a2:	d015      	beq.n	80131d0 <__ieee754_atan2+0x118>
 80131a4:	2c00      	cmp	r4, #0
 80131a6:	d0a8      	beq.n	80130fa <__ieee754_atan2+0x42>
 80131a8:	a317      	add	r3, pc, #92	; (adr r3, 8013208 <__ieee754_atan2+0x150>)
 80131aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ae:	f7ed f873 	bl	8000298 <__aeabi_dsub>
 80131b2:	a317      	add	r3, pc, #92	; (adr r3, 8013210 <__ieee754_atan2+0x158>)
 80131b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b8:	e014      	b.n	80131e4 <__ieee754_atan2+0x12c>
 80131ba:	a117      	add	r1, pc, #92	; (adr r1, 8013218 <__ieee754_atan2+0x160>)
 80131bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131c0:	e7ec      	b.n	801319c <__ieee754_atan2+0xe4>
 80131c2:	2000      	movs	r0, #0
 80131c4:	2100      	movs	r1, #0
 80131c6:	e7e9      	b.n	801319c <__ieee754_atan2+0xe4>
 80131c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131cc:	4619      	mov	r1, r3
 80131ce:	e794      	b.n	80130fa <__ieee754_atan2+0x42>
 80131d0:	a30d      	add	r3, pc, #52	; (adr r3, 8013208 <__ieee754_atan2+0x150>)
 80131d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d6:	f7ed f85f 	bl	8000298 <__aeabi_dsub>
 80131da:	4602      	mov	r2, r0
 80131dc:	460b      	mov	r3, r1
 80131de:	a10c      	add	r1, pc, #48	; (adr r1, 8013210 <__ieee754_atan2+0x158>)
 80131e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131e4:	f7ed f858 	bl	8000298 <__aeabi_dsub>
 80131e8:	e787      	b.n	80130fa <__ieee754_atan2+0x42>
 80131ea:	a109      	add	r1, pc, #36	; (adr r1, 8013210 <__ieee754_atan2+0x158>)
 80131ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131f0:	e783      	b.n	80130fa <__ieee754_atan2+0x42>
 80131f2:	a10b      	add	r1, pc, #44	; (adr r1, 8013220 <__ieee754_atan2+0x168>)
 80131f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131f8:	e77f      	b.n	80130fa <__ieee754_atan2+0x42>
 80131fa:	2000      	movs	r0, #0
 80131fc:	2100      	movs	r1, #0
 80131fe:	e77c      	b.n	80130fa <__ieee754_atan2+0x42>
 8013200:	a105      	add	r1, pc, #20	; (adr r1, 8013218 <__ieee754_atan2+0x160>)
 8013202:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013206:	e778      	b.n	80130fa <__ieee754_atan2+0x42>
 8013208:	33145c07 	.word	0x33145c07
 801320c:	3ca1a626 	.word	0x3ca1a626
 8013210:	54442d18 	.word	0x54442d18
 8013214:	400921fb 	.word	0x400921fb
 8013218:	54442d18 	.word	0x54442d18
 801321c:	3ff921fb 	.word	0x3ff921fb
 8013220:	54442d18 	.word	0x54442d18
 8013224:	3fe921fb 	.word	0x3fe921fb
 8013228:	08014588 	.word	0x08014588
 801322c:	080145a0 	.word	0x080145a0
 8013230:	54442d18 	.word	0x54442d18
 8013234:	c00921fb 	.word	0xc00921fb
 8013238:	54442d18 	.word	0x54442d18
 801323c:	bff921fb 	.word	0xbff921fb
 8013240:	7ff00000 	.word	0x7ff00000
 8013244:	00000000 	.word	0x00000000

08013248 <__ieee754_pow>:
 8013248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801324c:	ed2d 8b06 	vpush	{d8-d10}
 8013250:	b089      	sub	sp, #36	; 0x24
 8013252:	ed8d 1b00 	vstr	d1, [sp]
 8013256:	e9dd 2900 	ldrd	r2, r9, [sp]
 801325a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801325e:	ea58 0102 	orrs.w	r1, r8, r2
 8013262:	ec57 6b10 	vmov	r6, r7, d0
 8013266:	d115      	bne.n	8013294 <__ieee754_pow+0x4c>
 8013268:	19b3      	adds	r3, r6, r6
 801326a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801326e:	4152      	adcs	r2, r2
 8013270:	4299      	cmp	r1, r3
 8013272:	4b89      	ldr	r3, [pc, #548]	; (8013498 <__ieee754_pow+0x250>)
 8013274:	4193      	sbcs	r3, r2
 8013276:	f080 84d1 	bcs.w	8013c1c <__ieee754_pow+0x9d4>
 801327a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801327e:	4630      	mov	r0, r6
 8013280:	4639      	mov	r1, r7
 8013282:	f7ed f80b 	bl	800029c <__adddf3>
 8013286:	ec41 0b10 	vmov	d0, r0, r1
 801328a:	b009      	add	sp, #36	; 0x24
 801328c:	ecbd 8b06 	vpop	{d8-d10}
 8013290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013294:	4b81      	ldr	r3, [pc, #516]	; (801349c <__ieee754_pow+0x254>)
 8013296:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801329a:	429c      	cmp	r4, r3
 801329c:	ee10 aa10 	vmov	sl, s0
 80132a0:	463d      	mov	r5, r7
 80132a2:	dc06      	bgt.n	80132b2 <__ieee754_pow+0x6a>
 80132a4:	d101      	bne.n	80132aa <__ieee754_pow+0x62>
 80132a6:	2e00      	cmp	r6, #0
 80132a8:	d1e7      	bne.n	801327a <__ieee754_pow+0x32>
 80132aa:	4598      	cmp	r8, r3
 80132ac:	dc01      	bgt.n	80132b2 <__ieee754_pow+0x6a>
 80132ae:	d10f      	bne.n	80132d0 <__ieee754_pow+0x88>
 80132b0:	b172      	cbz	r2, 80132d0 <__ieee754_pow+0x88>
 80132b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80132b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80132ba:	ea55 050a 	orrs.w	r5, r5, sl
 80132be:	d1dc      	bne.n	801327a <__ieee754_pow+0x32>
 80132c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80132c4:	18db      	adds	r3, r3, r3
 80132c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80132ca:	4152      	adcs	r2, r2
 80132cc:	429d      	cmp	r5, r3
 80132ce:	e7d0      	b.n	8013272 <__ieee754_pow+0x2a>
 80132d0:	2d00      	cmp	r5, #0
 80132d2:	da3b      	bge.n	801334c <__ieee754_pow+0x104>
 80132d4:	4b72      	ldr	r3, [pc, #456]	; (80134a0 <__ieee754_pow+0x258>)
 80132d6:	4598      	cmp	r8, r3
 80132d8:	dc51      	bgt.n	801337e <__ieee754_pow+0x136>
 80132da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80132de:	4598      	cmp	r8, r3
 80132e0:	f340 84ab 	ble.w	8013c3a <__ieee754_pow+0x9f2>
 80132e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80132e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80132ec:	2b14      	cmp	r3, #20
 80132ee:	dd0f      	ble.n	8013310 <__ieee754_pow+0xc8>
 80132f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80132f4:	fa22 f103 	lsr.w	r1, r2, r3
 80132f8:	fa01 f303 	lsl.w	r3, r1, r3
 80132fc:	4293      	cmp	r3, r2
 80132fe:	f040 849c 	bne.w	8013c3a <__ieee754_pow+0x9f2>
 8013302:	f001 0101 	and.w	r1, r1, #1
 8013306:	f1c1 0302 	rsb	r3, r1, #2
 801330a:	9304      	str	r3, [sp, #16]
 801330c:	b182      	cbz	r2, 8013330 <__ieee754_pow+0xe8>
 801330e:	e05f      	b.n	80133d0 <__ieee754_pow+0x188>
 8013310:	2a00      	cmp	r2, #0
 8013312:	d15b      	bne.n	80133cc <__ieee754_pow+0x184>
 8013314:	f1c3 0314 	rsb	r3, r3, #20
 8013318:	fa48 f103 	asr.w	r1, r8, r3
 801331c:	fa01 f303 	lsl.w	r3, r1, r3
 8013320:	4543      	cmp	r3, r8
 8013322:	f040 8487 	bne.w	8013c34 <__ieee754_pow+0x9ec>
 8013326:	f001 0101 	and.w	r1, r1, #1
 801332a:	f1c1 0302 	rsb	r3, r1, #2
 801332e:	9304      	str	r3, [sp, #16]
 8013330:	4b5c      	ldr	r3, [pc, #368]	; (80134a4 <__ieee754_pow+0x25c>)
 8013332:	4598      	cmp	r8, r3
 8013334:	d132      	bne.n	801339c <__ieee754_pow+0x154>
 8013336:	f1b9 0f00 	cmp.w	r9, #0
 801333a:	f280 8477 	bge.w	8013c2c <__ieee754_pow+0x9e4>
 801333e:	4959      	ldr	r1, [pc, #356]	; (80134a4 <__ieee754_pow+0x25c>)
 8013340:	4632      	mov	r2, r6
 8013342:	463b      	mov	r3, r7
 8013344:	2000      	movs	r0, #0
 8013346:	f7ed fa89 	bl	800085c <__aeabi_ddiv>
 801334a:	e79c      	b.n	8013286 <__ieee754_pow+0x3e>
 801334c:	2300      	movs	r3, #0
 801334e:	9304      	str	r3, [sp, #16]
 8013350:	2a00      	cmp	r2, #0
 8013352:	d13d      	bne.n	80133d0 <__ieee754_pow+0x188>
 8013354:	4b51      	ldr	r3, [pc, #324]	; (801349c <__ieee754_pow+0x254>)
 8013356:	4598      	cmp	r8, r3
 8013358:	d1ea      	bne.n	8013330 <__ieee754_pow+0xe8>
 801335a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801335e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013362:	ea53 030a 	orrs.w	r3, r3, sl
 8013366:	f000 8459 	beq.w	8013c1c <__ieee754_pow+0x9d4>
 801336a:	4b4f      	ldr	r3, [pc, #316]	; (80134a8 <__ieee754_pow+0x260>)
 801336c:	429c      	cmp	r4, r3
 801336e:	dd08      	ble.n	8013382 <__ieee754_pow+0x13a>
 8013370:	f1b9 0f00 	cmp.w	r9, #0
 8013374:	f2c0 8456 	blt.w	8013c24 <__ieee754_pow+0x9dc>
 8013378:	e9dd 0100 	ldrd	r0, r1, [sp]
 801337c:	e783      	b.n	8013286 <__ieee754_pow+0x3e>
 801337e:	2302      	movs	r3, #2
 8013380:	e7e5      	b.n	801334e <__ieee754_pow+0x106>
 8013382:	f1b9 0f00 	cmp.w	r9, #0
 8013386:	f04f 0000 	mov.w	r0, #0
 801338a:	f04f 0100 	mov.w	r1, #0
 801338e:	f6bf af7a 	bge.w	8013286 <__ieee754_pow+0x3e>
 8013392:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013396:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801339a:	e774      	b.n	8013286 <__ieee754_pow+0x3e>
 801339c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80133a0:	d106      	bne.n	80133b0 <__ieee754_pow+0x168>
 80133a2:	4632      	mov	r2, r6
 80133a4:	463b      	mov	r3, r7
 80133a6:	4630      	mov	r0, r6
 80133a8:	4639      	mov	r1, r7
 80133aa:	f7ed f92d 	bl	8000608 <__aeabi_dmul>
 80133ae:	e76a      	b.n	8013286 <__ieee754_pow+0x3e>
 80133b0:	4b3e      	ldr	r3, [pc, #248]	; (80134ac <__ieee754_pow+0x264>)
 80133b2:	4599      	cmp	r9, r3
 80133b4:	d10c      	bne.n	80133d0 <__ieee754_pow+0x188>
 80133b6:	2d00      	cmp	r5, #0
 80133b8:	db0a      	blt.n	80133d0 <__ieee754_pow+0x188>
 80133ba:	ec47 6b10 	vmov	d0, r6, r7
 80133be:	b009      	add	sp, #36	; 0x24
 80133c0:	ecbd 8b06 	vpop	{d8-d10}
 80133c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133c8:	f7ff bd9a 	b.w	8012f00 <__ieee754_sqrt>
 80133cc:	2300      	movs	r3, #0
 80133ce:	9304      	str	r3, [sp, #16]
 80133d0:	ec47 6b10 	vmov	d0, r6, r7
 80133d4:	f7ff fd80 	bl	8012ed8 <fabs>
 80133d8:	ec51 0b10 	vmov	r0, r1, d0
 80133dc:	f1ba 0f00 	cmp.w	sl, #0
 80133e0:	d129      	bne.n	8013436 <__ieee754_pow+0x1ee>
 80133e2:	b124      	cbz	r4, 80133ee <__ieee754_pow+0x1a6>
 80133e4:	4b2f      	ldr	r3, [pc, #188]	; (80134a4 <__ieee754_pow+0x25c>)
 80133e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d123      	bne.n	8013436 <__ieee754_pow+0x1ee>
 80133ee:	f1b9 0f00 	cmp.w	r9, #0
 80133f2:	da05      	bge.n	8013400 <__ieee754_pow+0x1b8>
 80133f4:	4602      	mov	r2, r0
 80133f6:	460b      	mov	r3, r1
 80133f8:	2000      	movs	r0, #0
 80133fa:	492a      	ldr	r1, [pc, #168]	; (80134a4 <__ieee754_pow+0x25c>)
 80133fc:	f7ed fa2e 	bl	800085c <__aeabi_ddiv>
 8013400:	2d00      	cmp	r5, #0
 8013402:	f6bf af40 	bge.w	8013286 <__ieee754_pow+0x3e>
 8013406:	9b04      	ldr	r3, [sp, #16]
 8013408:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801340c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013410:	431c      	orrs	r4, r3
 8013412:	d108      	bne.n	8013426 <__ieee754_pow+0x1de>
 8013414:	4602      	mov	r2, r0
 8013416:	460b      	mov	r3, r1
 8013418:	4610      	mov	r0, r2
 801341a:	4619      	mov	r1, r3
 801341c:	f7ec ff3c 	bl	8000298 <__aeabi_dsub>
 8013420:	4602      	mov	r2, r0
 8013422:	460b      	mov	r3, r1
 8013424:	e78f      	b.n	8013346 <__ieee754_pow+0xfe>
 8013426:	9b04      	ldr	r3, [sp, #16]
 8013428:	2b01      	cmp	r3, #1
 801342a:	f47f af2c 	bne.w	8013286 <__ieee754_pow+0x3e>
 801342e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013432:	4619      	mov	r1, r3
 8013434:	e727      	b.n	8013286 <__ieee754_pow+0x3e>
 8013436:	0feb      	lsrs	r3, r5, #31
 8013438:	3b01      	subs	r3, #1
 801343a:	9306      	str	r3, [sp, #24]
 801343c:	9a06      	ldr	r2, [sp, #24]
 801343e:	9b04      	ldr	r3, [sp, #16]
 8013440:	4313      	orrs	r3, r2
 8013442:	d102      	bne.n	801344a <__ieee754_pow+0x202>
 8013444:	4632      	mov	r2, r6
 8013446:	463b      	mov	r3, r7
 8013448:	e7e6      	b.n	8013418 <__ieee754_pow+0x1d0>
 801344a:	4b19      	ldr	r3, [pc, #100]	; (80134b0 <__ieee754_pow+0x268>)
 801344c:	4598      	cmp	r8, r3
 801344e:	f340 80fb 	ble.w	8013648 <__ieee754_pow+0x400>
 8013452:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013456:	4598      	cmp	r8, r3
 8013458:	4b13      	ldr	r3, [pc, #76]	; (80134a8 <__ieee754_pow+0x260>)
 801345a:	dd0c      	ble.n	8013476 <__ieee754_pow+0x22e>
 801345c:	429c      	cmp	r4, r3
 801345e:	dc0f      	bgt.n	8013480 <__ieee754_pow+0x238>
 8013460:	f1b9 0f00 	cmp.w	r9, #0
 8013464:	da0f      	bge.n	8013486 <__ieee754_pow+0x23e>
 8013466:	2000      	movs	r0, #0
 8013468:	b009      	add	sp, #36	; 0x24
 801346a:	ecbd 8b06 	vpop	{d8-d10}
 801346e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013472:	f000 bcba 	b.w	8013dea <__math_oflow>
 8013476:	429c      	cmp	r4, r3
 8013478:	dbf2      	blt.n	8013460 <__ieee754_pow+0x218>
 801347a:	4b0a      	ldr	r3, [pc, #40]	; (80134a4 <__ieee754_pow+0x25c>)
 801347c:	429c      	cmp	r4, r3
 801347e:	dd19      	ble.n	80134b4 <__ieee754_pow+0x26c>
 8013480:	f1b9 0f00 	cmp.w	r9, #0
 8013484:	dcef      	bgt.n	8013466 <__ieee754_pow+0x21e>
 8013486:	2000      	movs	r0, #0
 8013488:	b009      	add	sp, #36	; 0x24
 801348a:	ecbd 8b06 	vpop	{d8-d10}
 801348e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013492:	f000 bca1 	b.w	8013dd8 <__math_uflow>
 8013496:	bf00      	nop
 8013498:	fff00000 	.word	0xfff00000
 801349c:	7ff00000 	.word	0x7ff00000
 80134a0:	433fffff 	.word	0x433fffff
 80134a4:	3ff00000 	.word	0x3ff00000
 80134a8:	3fefffff 	.word	0x3fefffff
 80134ac:	3fe00000 	.word	0x3fe00000
 80134b0:	41e00000 	.word	0x41e00000
 80134b4:	4b60      	ldr	r3, [pc, #384]	; (8013638 <__ieee754_pow+0x3f0>)
 80134b6:	2200      	movs	r2, #0
 80134b8:	f7ec feee 	bl	8000298 <__aeabi_dsub>
 80134bc:	a354      	add	r3, pc, #336	; (adr r3, 8013610 <__ieee754_pow+0x3c8>)
 80134be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c2:	4604      	mov	r4, r0
 80134c4:	460d      	mov	r5, r1
 80134c6:	f7ed f89f 	bl	8000608 <__aeabi_dmul>
 80134ca:	a353      	add	r3, pc, #332	; (adr r3, 8013618 <__ieee754_pow+0x3d0>)
 80134cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d0:	4606      	mov	r6, r0
 80134d2:	460f      	mov	r7, r1
 80134d4:	4620      	mov	r0, r4
 80134d6:	4629      	mov	r1, r5
 80134d8:	f7ed f896 	bl	8000608 <__aeabi_dmul>
 80134dc:	4b57      	ldr	r3, [pc, #348]	; (801363c <__ieee754_pow+0x3f4>)
 80134de:	4682      	mov	sl, r0
 80134e0:	468b      	mov	fp, r1
 80134e2:	2200      	movs	r2, #0
 80134e4:	4620      	mov	r0, r4
 80134e6:	4629      	mov	r1, r5
 80134e8:	f7ed f88e 	bl	8000608 <__aeabi_dmul>
 80134ec:	4602      	mov	r2, r0
 80134ee:	460b      	mov	r3, r1
 80134f0:	a14b      	add	r1, pc, #300	; (adr r1, 8013620 <__ieee754_pow+0x3d8>)
 80134f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134f6:	f7ec fecf 	bl	8000298 <__aeabi_dsub>
 80134fa:	4622      	mov	r2, r4
 80134fc:	462b      	mov	r3, r5
 80134fe:	f7ed f883 	bl	8000608 <__aeabi_dmul>
 8013502:	4602      	mov	r2, r0
 8013504:	460b      	mov	r3, r1
 8013506:	2000      	movs	r0, #0
 8013508:	494d      	ldr	r1, [pc, #308]	; (8013640 <__ieee754_pow+0x3f8>)
 801350a:	f7ec fec5 	bl	8000298 <__aeabi_dsub>
 801350e:	4622      	mov	r2, r4
 8013510:	4680      	mov	r8, r0
 8013512:	4689      	mov	r9, r1
 8013514:	462b      	mov	r3, r5
 8013516:	4620      	mov	r0, r4
 8013518:	4629      	mov	r1, r5
 801351a:	f7ed f875 	bl	8000608 <__aeabi_dmul>
 801351e:	4602      	mov	r2, r0
 8013520:	460b      	mov	r3, r1
 8013522:	4640      	mov	r0, r8
 8013524:	4649      	mov	r1, r9
 8013526:	f7ed f86f 	bl	8000608 <__aeabi_dmul>
 801352a:	a33f      	add	r3, pc, #252	; (adr r3, 8013628 <__ieee754_pow+0x3e0>)
 801352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013530:	f7ed f86a 	bl	8000608 <__aeabi_dmul>
 8013534:	4602      	mov	r2, r0
 8013536:	460b      	mov	r3, r1
 8013538:	4650      	mov	r0, sl
 801353a:	4659      	mov	r1, fp
 801353c:	f7ec feac 	bl	8000298 <__aeabi_dsub>
 8013540:	4602      	mov	r2, r0
 8013542:	460b      	mov	r3, r1
 8013544:	4680      	mov	r8, r0
 8013546:	4689      	mov	r9, r1
 8013548:	4630      	mov	r0, r6
 801354a:	4639      	mov	r1, r7
 801354c:	f7ec fea6 	bl	800029c <__adddf3>
 8013550:	2000      	movs	r0, #0
 8013552:	4632      	mov	r2, r6
 8013554:	463b      	mov	r3, r7
 8013556:	4604      	mov	r4, r0
 8013558:	460d      	mov	r5, r1
 801355a:	f7ec fe9d 	bl	8000298 <__aeabi_dsub>
 801355e:	4602      	mov	r2, r0
 8013560:	460b      	mov	r3, r1
 8013562:	4640      	mov	r0, r8
 8013564:	4649      	mov	r1, r9
 8013566:	f7ec fe97 	bl	8000298 <__aeabi_dsub>
 801356a:	9b04      	ldr	r3, [sp, #16]
 801356c:	9a06      	ldr	r2, [sp, #24]
 801356e:	3b01      	subs	r3, #1
 8013570:	4313      	orrs	r3, r2
 8013572:	4682      	mov	sl, r0
 8013574:	468b      	mov	fp, r1
 8013576:	f040 81e7 	bne.w	8013948 <__ieee754_pow+0x700>
 801357a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013630 <__ieee754_pow+0x3e8>
 801357e:	eeb0 8a47 	vmov.f32	s16, s14
 8013582:	eef0 8a67 	vmov.f32	s17, s15
 8013586:	e9dd 6700 	ldrd	r6, r7, [sp]
 801358a:	2600      	movs	r6, #0
 801358c:	4632      	mov	r2, r6
 801358e:	463b      	mov	r3, r7
 8013590:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013594:	f7ec fe80 	bl	8000298 <__aeabi_dsub>
 8013598:	4622      	mov	r2, r4
 801359a:	462b      	mov	r3, r5
 801359c:	f7ed f834 	bl	8000608 <__aeabi_dmul>
 80135a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135a4:	4680      	mov	r8, r0
 80135a6:	4689      	mov	r9, r1
 80135a8:	4650      	mov	r0, sl
 80135aa:	4659      	mov	r1, fp
 80135ac:	f7ed f82c 	bl	8000608 <__aeabi_dmul>
 80135b0:	4602      	mov	r2, r0
 80135b2:	460b      	mov	r3, r1
 80135b4:	4640      	mov	r0, r8
 80135b6:	4649      	mov	r1, r9
 80135b8:	f7ec fe70 	bl	800029c <__adddf3>
 80135bc:	4632      	mov	r2, r6
 80135be:	463b      	mov	r3, r7
 80135c0:	4680      	mov	r8, r0
 80135c2:	4689      	mov	r9, r1
 80135c4:	4620      	mov	r0, r4
 80135c6:	4629      	mov	r1, r5
 80135c8:	f7ed f81e 	bl	8000608 <__aeabi_dmul>
 80135cc:	460b      	mov	r3, r1
 80135ce:	4604      	mov	r4, r0
 80135d0:	460d      	mov	r5, r1
 80135d2:	4602      	mov	r2, r0
 80135d4:	4649      	mov	r1, r9
 80135d6:	4640      	mov	r0, r8
 80135d8:	f7ec fe60 	bl	800029c <__adddf3>
 80135dc:	4b19      	ldr	r3, [pc, #100]	; (8013644 <__ieee754_pow+0x3fc>)
 80135de:	4299      	cmp	r1, r3
 80135e0:	ec45 4b19 	vmov	d9, r4, r5
 80135e4:	4606      	mov	r6, r0
 80135e6:	460f      	mov	r7, r1
 80135e8:	468b      	mov	fp, r1
 80135ea:	f340 82f0 	ble.w	8013bce <__ieee754_pow+0x986>
 80135ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80135f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80135f6:	4303      	orrs	r3, r0
 80135f8:	f000 81e4 	beq.w	80139c4 <__ieee754_pow+0x77c>
 80135fc:	ec51 0b18 	vmov	r0, r1, d8
 8013600:	2200      	movs	r2, #0
 8013602:	2300      	movs	r3, #0
 8013604:	f7ed fa72 	bl	8000aec <__aeabi_dcmplt>
 8013608:	3800      	subs	r0, #0
 801360a:	bf18      	it	ne
 801360c:	2001      	movne	r0, #1
 801360e:	e72b      	b.n	8013468 <__ieee754_pow+0x220>
 8013610:	60000000 	.word	0x60000000
 8013614:	3ff71547 	.word	0x3ff71547
 8013618:	f85ddf44 	.word	0xf85ddf44
 801361c:	3e54ae0b 	.word	0x3e54ae0b
 8013620:	55555555 	.word	0x55555555
 8013624:	3fd55555 	.word	0x3fd55555
 8013628:	652b82fe 	.word	0x652b82fe
 801362c:	3ff71547 	.word	0x3ff71547
 8013630:	00000000 	.word	0x00000000
 8013634:	bff00000 	.word	0xbff00000
 8013638:	3ff00000 	.word	0x3ff00000
 801363c:	3fd00000 	.word	0x3fd00000
 8013640:	3fe00000 	.word	0x3fe00000
 8013644:	408fffff 	.word	0x408fffff
 8013648:	4bd5      	ldr	r3, [pc, #852]	; (80139a0 <__ieee754_pow+0x758>)
 801364a:	402b      	ands	r3, r5
 801364c:	2200      	movs	r2, #0
 801364e:	b92b      	cbnz	r3, 801365c <__ieee754_pow+0x414>
 8013650:	4bd4      	ldr	r3, [pc, #848]	; (80139a4 <__ieee754_pow+0x75c>)
 8013652:	f7ec ffd9 	bl	8000608 <__aeabi_dmul>
 8013656:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801365a:	460c      	mov	r4, r1
 801365c:	1523      	asrs	r3, r4, #20
 801365e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013662:	4413      	add	r3, r2
 8013664:	9305      	str	r3, [sp, #20]
 8013666:	4bd0      	ldr	r3, [pc, #832]	; (80139a8 <__ieee754_pow+0x760>)
 8013668:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801366c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013670:	429c      	cmp	r4, r3
 8013672:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013676:	dd08      	ble.n	801368a <__ieee754_pow+0x442>
 8013678:	4bcc      	ldr	r3, [pc, #816]	; (80139ac <__ieee754_pow+0x764>)
 801367a:	429c      	cmp	r4, r3
 801367c:	f340 8162 	ble.w	8013944 <__ieee754_pow+0x6fc>
 8013680:	9b05      	ldr	r3, [sp, #20]
 8013682:	3301      	adds	r3, #1
 8013684:	9305      	str	r3, [sp, #20]
 8013686:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801368a:	2400      	movs	r4, #0
 801368c:	00e3      	lsls	r3, r4, #3
 801368e:	9307      	str	r3, [sp, #28]
 8013690:	4bc7      	ldr	r3, [pc, #796]	; (80139b0 <__ieee754_pow+0x768>)
 8013692:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013696:	ed93 7b00 	vldr	d7, [r3]
 801369a:	4629      	mov	r1, r5
 801369c:	ec53 2b17 	vmov	r2, r3, d7
 80136a0:	eeb0 9a47 	vmov.f32	s18, s14
 80136a4:	eef0 9a67 	vmov.f32	s19, s15
 80136a8:	4682      	mov	sl, r0
 80136aa:	f7ec fdf5 	bl	8000298 <__aeabi_dsub>
 80136ae:	4652      	mov	r2, sl
 80136b0:	4606      	mov	r6, r0
 80136b2:	460f      	mov	r7, r1
 80136b4:	462b      	mov	r3, r5
 80136b6:	ec51 0b19 	vmov	r0, r1, d9
 80136ba:	f7ec fdef 	bl	800029c <__adddf3>
 80136be:	4602      	mov	r2, r0
 80136c0:	460b      	mov	r3, r1
 80136c2:	2000      	movs	r0, #0
 80136c4:	49bb      	ldr	r1, [pc, #748]	; (80139b4 <__ieee754_pow+0x76c>)
 80136c6:	f7ed f8c9 	bl	800085c <__aeabi_ddiv>
 80136ca:	ec41 0b1a 	vmov	d10, r0, r1
 80136ce:	4602      	mov	r2, r0
 80136d0:	460b      	mov	r3, r1
 80136d2:	4630      	mov	r0, r6
 80136d4:	4639      	mov	r1, r7
 80136d6:	f7ec ff97 	bl	8000608 <__aeabi_dmul>
 80136da:	2300      	movs	r3, #0
 80136dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136e0:	9302      	str	r3, [sp, #8]
 80136e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80136e6:	46ab      	mov	fp, r5
 80136e8:	106d      	asrs	r5, r5, #1
 80136ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80136ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80136f2:	ec41 0b18 	vmov	d8, r0, r1
 80136f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80136fa:	2200      	movs	r2, #0
 80136fc:	4640      	mov	r0, r8
 80136fe:	4649      	mov	r1, r9
 8013700:	4614      	mov	r4, r2
 8013702:	461d      	mov	r5, r3
 8013704:	f7ec ff80 	bl	8000608 <__aeabi_dmul>
 8013708:	4602      	mov	r2, r0
 801370a:	460b      	mov	r3, r1
 801370c:	4630      	mov	r0, r6
 801370e:	4639      	mov	r1, r7
 8013710:	f7ec fdc2 	bl	8000298 <__aeabi_dsub>
 8013714:	ec53 2b19 	vmov	r2, r3, d9
 8013718:	4606      	mov	r6, r0
 801371a:	460f      	mov	r7, r1
 801371c:	4620      	mov	r0, r4
 801371e:	4629      	mov	r1, r5
 8013720:	f7ec fdba 	bl	8000298 <__aeabi_dsub>
 8013724:	4602      	mov	r2, r0
 8013726:	460b      	mov	r3, r1
 8013728:	4650      	mov	r0, sl
 801372a:	4659      	mov	r1, fp
 801372c:	f7ec fdb4 	bl	8000298 <__aeabi_dsub>
 8013730:	4642      	mov	r2, r8
 8013732:	464b      	mov	r3, r9
 8013734:	f7ec ff68 	bl	8000608 <__aeabi_dmul>
 8013738:	4602      	mov	r2, r0
 801373a:	460b      	mov	r3, r1
 801373c:	4630      	mov	r0, r6
 801373e:	4639      	mov	r1, r7
 8013740:	f7ec fdaa 	bl	8000298 <__aeabi_dsub>
 8013744:	ec53 2b1a 	vmov	r2, r3, d10
 8013748:	f7ec ff5e 	bl	8000608 <__aeabi_dmul>
 801374c:	ec53 2b18 	vmov	r2, r3, d8
 8013750:	ec41 0b19 	vmov	d9, r0, r1
 8013754:	ec51 0b18 	vmov	r0, r1, d8
 8013758:	f7ec ff56 	bl	8000608 <__aeabi_dmul>
 801375c:	a37c      	add	r3, pc, #496	; (adr r3, 8013950 <__ieee754_pow+0x708>)
 801375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013762:	4604      	mov	r4, r0
 8013764:	460d      	mov	r5, r1
 8013766:	f7ec ff4f 	bl	8000608 <__aeabi_dmul>
 801376a:	a37b      	add	r3, pc, #492	; (adr r3, 8013958 <__ieee754_pow+0x710>)
 801376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013770:	f7ec fd94 	bl	800029c <__adddf3>
 8013774:	4622      	mov	r2, r4
 8013776:	462b      	mov	r3, r5
 8013778:	f7ec ff46 	bl	8000608 <__aeabi_dmul>
 801377c:	a378      	add	r3, pc, #480	; (adr r3, 8013960 <__ieee754_pow+0x718>)
 801377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013782:	f7ec fd8b 	bl	800029c <__adddf3>
 8013786:	4622      	mov	r2, r4
 8013788:	462b      	mov	r3, r5
 801378a:	f7ec ff3d 	bl	8000608 <__aeabi_dmul>
 801378e:	a376      	add	r3, pc, #472	; (adr r3, 8013968 <__ieee754_pow+0x720>)
 8013790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013794:	f7ec fd82 	bl	800029c <__adddf3>
 8013798:	4622      	mov	r2, r4
 801379a:	462b      	mov	r3, r5
 801379c:	f7ec ff34 	bl	8000608 <__aeabi_dmul>
 80137a0:	a373      	add	r3, pc, #460	; (adr r3, 8013970 <__ieee754_pow+0x728>)
 80137a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a6:	f7ec fd79 	bl	800029c <__adddf3>
 80137aa:	4622      	mov	r2, r4
 80137ac:	462b      	mov	r3, r5
 80137ae:	f7ec ff2b 	bl	8000608 <__aeabi_dmul>
 80137b2:	a371      	add	r3, pc, #452	; (adr r3, 8013978 <__ieee754_pow+0x730>)
 80137b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b8:	f7ec fd70 	bl	800029c <__adddf3>
 80137bc:	4622      	mov	r2, r4
 80137be:	4606      	mov	r6, r0
 80137c0:	460f      	mov	r7, r1
 80137c2:	462b      	mov	r3, r5
 80137c4:	4620      	mov	r0, r4
 80137c6:	4629      	mov	r1, r5
 80137c8:	f7ec ff1e 	bl	8000608 <__aeabi_dmul>
 80137cc:	4602      	mov	r2, r0
 80137ce:	460b      	mov	r3, r1
 80137d0:	4630      	mov	r0, r6
 80137d2:	4639      	mov	r1, r7
 80137d4:	f7ec ff18 	bl	8000608 <__aeabi_dmul>
 80137d8:	4642      	mov	r2, r8
 80137da:	4604      	mov	r4, r0
 80137dc:	460d      	mov	r5, r1
 80137de:	464b      	mov	r3, r9
 80137e0:	ec51 0b18 	vmov	r0, r1, d8
 80137e4:	f7ec fd5a 	bl	800029c <__adddf3>
 80137e8:	ec53 2b19 	vmov	r2, r3, d9
 80137ec:	f7ec ff0c 	bl	8000608 <__aeabi_dmul>
 80137f0:	4622      	mov	r2, r4
 80137f2:	462b      	mov	r3, r5
 80137f4:	f7ec fd52 	bl	800029c <__adddf3>
 80137f8:	4642      	mov	r2, r8
 80137fa:	4682      	mov	sl, r0
 80137fc:	468b      	mov	fp, r1
 80137fe:	464b      	mov	r3, r9
 8013800:	4640      	mov	r0, r8
 8013802:	4649      	mov	r1, r9
 8013804:	f7ec ff00 	bl	8000608 <__aeabi_dmul>
 8013808:	4b6b      	ldr	r3, [pc, #428]	; (80139b8 <__ieee754_pow+0x770>)
 801380a:	2200      	movs	r2, #0
 801380c:	4606      	mov	r6, r0
 801380e:	460f      	mov	r7, r1
 8013810:	f7ec fd44 	bl	800029c <__adddf3>
 8013814:	4652      	mov	r2, sl
 8013816:	465b      	mov	r3, fp
 8013818:	f7ec fd40 	bl	800029c <__adddf3>
 801381c:	2000      	movs	r0, #0
 801381e:	4604      	mov	r4, r0
 8013820:	460d      	mov	r5, r1
 8013822:	4602      	mov	r2, r0
 8013824:	460b      	mov	r3, r1
 8013826:	4640      	mov	r0, r8
 8013828:	4649      	mov	r1, r9
 801382a:	f7ec feed 	bl	8000608 <__aeabi_dmul>
 801382e:	4b62      	ldr	r3, [pc, #392]	; (80139b8 <__ieee754_pow+0x770>)
 8013830:	4680      	mov	r8, r0
 8013832:	4689      	mov	r9, r1
 8013834:	2200      	movs	r2, #0
 8013836:	4620      	mov	r0, r4
 8013838:	4629      	mov	r1, r5
 801383a:	f7ec fd2d 	bl	8000298 <__aeabi_dsub>
 801383e:	4632      	mov	r2, r6
 8013840:	463b      	mov	r3, r7
 8013842:	f7ec fd29 	bl	8000298 <__aeabi_dsub>
 8013846:	4602      	mov	r2, r0
 8013848:	460b      	mov	r3, r1
 801384a:	4650      	mov	r0, sl
 801384c:	4659      	mov	r1, fp
 801384e:	f7ec fd23 	bl	8000298 <__aeabi_dsub>
 8013852:	ec53 2b18 	vmov	r2, r3, d8
 8013856:	f7ec fed7 	bl	8000608 <__aeabi_dmul>
 801385a:	4622      	mov	r2, r4
 801385c:	4606      	mov	r6, r0
 801385e:	460f      	mov	r7, r1
 8013860:	462b      	mov	r3, r5
 8013862:	ec51 0b19 	vmov	r0, r1, d9
 8013866:	f7ec fecf 	bl	8000608 <__aeabi_dmul>
 801386a:	4602      	mov	r2, r0
 801386c:	460b      	mov	r3, r1
 801386e:	4630      	mov	r0, r6
 8013870:	4639      	mov	r1, r7
 8013872:	f7ec fd13 	bl	800029c <__adddf3>
 8013876:	4606      	mov	r6, r0
 8013878:	460f      	mov	r7, r1
 801387a:	4602      	mov	r2, r0
 801387c:	460b      	mov	r3, r1
 801387e:	4640      	mov	r0, r8
 8013880:	4649      	mov	r1, r9
 8013882:	f7ec fd0b 	bl	800029c <__adddf3>
 8013886:	a33e      	add	r3, pc, #248	; (adr r3, 8013980 <__ieee754_pow+0x738>)
 8013888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801388c:	2000      	movs	r0, #0
 801388e:	4604      	mov	r4, r0
 8013890:	460d      	mov	r5, r1
 8013892:	f7ec feb9 	bl	8000608 <__aeabi_dmul>
 8013896:	4642      	mov	r2, r8
 8013898:	ec41 0b18 	vmov	d8, r0, r1
 801389c:	464b      	mov	r3, r9
 801389e:	4620      	mov	r0, r4
 80138a0:	4629      	mov	r1, r5
 80138a2:	f7ec fcf9 	bl	8000298 <__aeabi_dsub>
 80138a6:	4602      	mov	r2, r0
 80138a8:	460b      	mov	r3, r1
 80138aa:	4630      	mov	r0, r6
 80138ac:	4639      	mov	r1, r7
 80138ae:	f7ec fcf3 	bl	8000298 <__aeabi_dsub>
 80138b2:	a335      	add	r3, pc, #212	; (adr r3, 8013988 <__ieee754_pow+0x740>)
 80138b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138b8:	f7ec fea6 	bl	8000608 <__aeabi_dmul>
 80138bc:	a334      	add	r3, pc, #208	; (adr r3, 8013990 <__ieee754_pow+0x748>)
 80138be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c2:	4606      	mov	r6, r0
 80138c4:	460f      	mov	r7, r1
 80138c6:	4620      	mov	r0, r4
 80138c8:	4629      	mov	r1, r5
 80138ca:	f7ec fe9d 	bl	8000608 <__aeabi_dmul>
 80138ce:	4602      	mov	r2, r0
 80138d0:	460b      	mov	r3, r1
 80138d2:	4630      	mov	r0, r6
 80138d4:	4639      	mov	r1, r7
 80138d6:	f7ec fce1 	bl	800029c <__adddf3>
 80138da:	9a07      	ldr	r2, [sp, #28]
 80138dc:	4b37      	ldr	r3, [pc, #220]	; (80139bc <__ieee754_pow+0x774>)
 80138de:	4413      	add	r3, r2
 80138e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e4:	f7ec fcda 	bl	800029c <__adddf3>
 80138e8:	4682      	mov	sl, r0
 80138ea:	9805      	ldr	r0, [sp, #20]
 80138ec:	468b      	mov	fp, r1
 80138ee:	f7ec fe21 	bl	8000534 <__aeabi_i2d>
 80138f2:	9a07      	ldr	r2, [sp, #28]
 80138f4:	4b32      	ldr	r3, [pc, #200]	; (80139c0 <__ieee754_pow+0x778>)
 80138f6:	4413      	add	r3, r2
 80138f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80138fc:	4606      	mov	r6, r0
 80138fe:	460f      	mov	r7, r1
 8013900:	4652      	mov	r2, sl
 8013902:	465b      	mov	r3, fp
 8013904:	ec51 0b18 	vmov	r0, r1, d8
 8013908:	f7ec fcc8 	bl	800029c <__adddf3>
 801390c:	4642      	mov	r2, r8
 801390e:	464b      	mov	r3, r9
 8013910:	f7ec fcc4 	bl	800029c <__adddf3>
 8013914:	4632      	mov	r2, r6
 8013916:	463b      	mov	r3, r7
 8013918:	f7ec fcc0 	bl	800029c <__adddf3>
 801391c:	2000      	movs	r0, #0
 801391e:	4632      	mov	r2, r6
 8013920:	463b      	mov	r3, r7
 8013922:	4604      	mov	r4, r0
 8013924:	460d      	mov	r5, r1
 8013926:	f7ec fcb7 	bl	8000298 <__aeabi_dsub>
 801392a:	4642      	mov	r2, r8
 801392c:	464b      	mov	r3, r9
 801392e:	f7ec fcb3 	bl	8000298 <__aeabi_dsub>
 8013932:	ec53 2b18 	vmov	r2, r3, d8
 8013936:	f7ec fcaf 	bl	8000298 <__aeabi_dsub>
 801393a:	4602      	mov	r2, r0
 801393c:	460b      	mov	r3, r1
 801393e:	4650      	mov	r0, sl
 8013940:	4659      	mov	r1, fp
 8013942:	e610      	b.n	8013566 <__ieee754_pow+0x31e>
 8013944:	2401      	movs	r4, #1
 8013946:	e6a1      	b.n	801368c <__ieee754_pow+0x444>
 8013948:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013998 <__ieee754_pow+0x750>
 801394c:	e617      	b.n	801357e <__ieee754_pow+0x336>
 801394e:	bf00      	nop
 8013950:	4a454eef 	.word	0x4a454eef
 8013954:	3fca7e28 	.word	0x3fca7e28
 8013958:	93c9db65 	.word	0x93c9db65
 801395c:	3fcd864a 	.word	0x3fcd864a
 8013960:	a91d4101 	.word	0xa91d4101
 8013964:	3fd17460 	.word	0x3fd17460
 8013968:	518f264d 	.word	0x518f264d
 801396c:	3fd55555 	.word	0x3fd55555
 8013970:	db6fabff 	.word	0xdb6fabff
 8013974:	3fdb6db6 	.word	0x3fdb6db6
 8013978:	33333303 	.word	0x33333303
 801397c:	3fe33333 	.word	0x3fe33333
 8013980:	e0000000 	.word	0xe0000000
 8013984:	3feec709 	.word	0x3feec709
 8013988:	dc3a03fd 	.word	0xdc3a03fd
 801398c:	3feec709 	.word	0x3feec709
 8013990:	145b01f5 	.word	0x145b01f5
 8013994:	be3e2fe0 	.word	0xbe3e2fe0
 8013998:	00000000 	.word	0x00000000
 801399c:	3ff00000 	.word	0x3ff00000
 80139a0:	7ff00000 	.word	0x7ff00000
 80139a4:	43400000 	.word	0x43400000
 80139a8:	0003988e 	.word	0x0003988e
 80139ac:	000bb679 	.word	0x000bb679
 80139b0:	080145b8 	.word	0x080145b8
 80139b4:	3ff00000 	.word	0x3ff00000
 80139b8:	40080000 	.word	0x40080000
 80139bc:	080145d8 	.word	0x080145d8
 80139c0:	080145c8 	.word	0x080145c8
 80139c4:	a3b3      	add	r3, pc, #716	; (adr r3, 8013c94 <__ieee754_pow+0xa4c>)
 80139c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ca:	4640      	mov	r0, r8
 80139cc:	4649      	mov	r1, r9
 80139ce:	f7ec fc65 	bl	800029c <__adddf3>
 80139d2:	4622      	mov	r2, r4
 80139d4:	ec41 0b1a 	vmov	d10, r0, r1
 80139d8:	462b      	mov	r3, r5
 80139da:	4630      	mov	r0, r6
 80139dc:	4639      	mov	r1, r7
 80139de:	f7ec fc5b 	bl	8000298 <__aeabi_dsub>
 80139e2:	4602      	mov	r2, r0
 80139e4:	460b      	mov	r3, r1
 80139e6:	ec51 0b1a 	vmov	r0, r1, d10
 80139ea:	f7ed f89d 	bl	8000b28 <__aeabi_dcmpgt>
 80139ee:	2800      	cmp	r0, #0
 80139f0:	f47f ae04 	bne.w	80135fc <__ieee754_pow+0x3b4>
 80139f4:	4aa2      	ldr	r2, [pc, #648]	; (8013c80 <__ieee754_pow+0xa38>)
 80139f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80139fa:	4293      	cmp	r3, r2
 80139fc:	f340 8107 	ble.w	8013c0e <__ieee754_pow+0x9c6>
 8013a00:	151b      	asrs	r3, r3, #20
 8013a02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013a06:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013a0a:	fa4a fa03 	asr.w	sl, sl, r3
 8013a0e:	44da      	add	sl, fp
 8013a10:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013a14:	489b      	ldr	r0, [pc, #620]	; (8013c84 <__ieee754_pow+0xa3c>)
 8013a16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013a1a:	4108      	asrs	r0, r1
 8013a1c:	ea00 030a 	and.w	r3, r0, sl
 8013a20:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013a24:	f1c1 0114 	rsb	r1, r1, #20
 8013a28:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013a2c:	fa4a fa01 	asr.w	sl, sl, r1
 8013a30:	f1bb 0f00 	cmp.w	fp, #0
 8013a34:	f04f 0200 	mov.w	r2, #0
 8013a38:	4620      	mov	r0, r4
 8013a3a:	4629      	mov	r1, r5
 8013a3c:	bfb8      	it	lt
 8013a3e:	f1ca 0a00 	rsblt	sl, sl, #0
 8013a42:	f7ec fc29 	bl	8000298 <__aeabi_dsub>
 8013a46:	ec41 0b19 	vmov	d9, r0, r1
 8013a4a:	4642      	mov	r2, r8
 8013a4c:	464b      	mov	r3, r9
 8013a4e:	ec51 0b19 	vmov	r0, r1, d9
 8013a52:	f7ec fc23 	bl	800029c <__adddf3>
 8013a56:	a37a      	add	r3, pc, #488	; (adr r3, 8013c40 <__ieee754_pow+0x9f8>)
 8013a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5c:	2000      	movs	r0, #0
 8013a5e:	4604      	mov	r4, r0
 8013a60:	460d      	mov	r5, r1
 8013a62:	f7ec fdd1 	bl	8000608 <__aeabi_dmul>
 8013a66:	ec53 2b19 	vmov	r2, r3, d9
 8013a6a:	4606      	mov	r6, r0
 8013a6c:	460f      	mov	r7, r1
 8013a6e:	4620      	mov	r0, r4
 8013a70:	4629      	mov	r1, r5
 8013a72:	f7ec fc11 	bl	8000298 <__aeabi_dsub>
 8013a76:	4602      	mov	r2, r0
 8013a78:	460b      	mov	r3, r1
 8013a7a:	4640      	mov	r0, r8
 8013a7c:	4649      	mov	r1, r9
 8013a7e:	f7ec fc0b 	bl	8000298 <__aeabi_dsub>
 8013a82:	a371      	add	r3, pc, #452	; (adr r3, 8013c48 <__ieee754_pow+0xa00>)
 8013a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a88:	f7ec fdbe 	bl	8000608 <__aeabi_dmul>
 8013a8c:	a370      	add	r3, pc, #448	; (adr r3, 8013c50 <__ieee754_pow+0xa08>)
 8013a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a92:	4680      	mov	r8, r0
 8013a94:	4689      	mov	r9, r1
 8013a96:	4620      	mov	r0, r4
 8013a98:	4629      	mov	r1, r5
 8013a9a:	f7ec fdb5 	bl	8000608 <__aeabi_dmul>
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	460b      	mov	r3, r1
 8013aa2:	4640      	mov	r0, r8
 8013aa4:	4649      	mov	r1, r9
 8013aa6:	f7ec fbf9 	bl	800029c <__adddf3>
 8013aaa:	4604      	mov	r4, r0
 8013aac:	460d      	mov	r5, r1
 8013aae:	4602      	mov	r2, r0
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	4630      	mov	r0, r6
 8013ab4:	4639      	mov	r1, r7
 8013ab6:	f7ec fbf1 	bl	800029c <__adddf3>
 8013aba:	4632      	mov	r2, r6
 8013abc:	463b      	mov	r3, r7
 8013abe:	4680      	mov	r8, r0
 8013ac0:	4689      	mov	r9, r1
 8013ac2:	f7ec fbe9 	bl	8000298 <__aeabi_dsub>
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	460b      	mov	r3, r1
 8013aca:	4620      	mov	r0, r4
 8013acc:	4629      	mov	r1, r5
 8013ace:	f7ec fbe3 	bl	8000298 <__aeabi_dsub>
 8013ad2:	4642      	mov	r2, r8
 8013ad4:	4606      	mov	r6, r0
 8013ad6:	460f      	mov	r7, r1
 8013ad8:	464b      	mov	r3, r9
 8013ada:	4640      	mov	r0, r8
 8013adc:	4649      	mov	r1, r9
 8013ade:	f7ec fd93 	bl	8000608 <__aeabi_dmul>
 8013ae2:	a35d      	add	r3, pc, #372	; (adr r3, 8013c58 <__ieee754_pow+0xa10>)
 8013ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae8:	4604      	mov	r4, r0
 8013aea:	460d      	mov	r5, r1
 8013aec:	f7ec fd8c 	bl	8000608 <__aeabi_dmul>
 8013af0:	a35b      	add	r3, pc, #364	; (adr r3, 8013c60 <__ieee754_pow+0xa18>)
 8013af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af6:	f7ec fbcf 	bl	8000298 <__aeabi_dsub>
 8013afa:	4622      	mov	r2, r4
 8013afc:	462b      	mov	r3, r5
 8013afe:	f7ec fd83 	bl	8000608 <__aeabi_dmul>
 8013b02:	a359      	add	r3, pc, #356	; (adr r3, 8013c68 <__ieee754_pow+0xa20>)
 8013b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b08:	f7ec fbc8 	bl	800029c <__adddf3>
 8013b0c:	4622      	mov	r2, r4
 8013b0e:	462b      	mov	r3, r5
 8013b10:	f7ec fd7a 	bl	8000608 <__aeabi_dmul>
 8013b14:	a356      	add	r3, pc, #344	; (adr r3, 8013c70 <__ieee754_pow+0xa28>)
 8013b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b1a:	f7ec fbbd 	bl	8000298 <__aeabi_dsub>
 8013b1e:	4622      	mov	r2, r4
 8013b20:	462b      	mov	r3, r5
 8013b22:	f7ec fd71 	bl	8000608 <__aeabi_dmul>
 8013b26:	a354      	add	r3, pc, #336	; (adr r3, 8013c78 <__ieee754_pow+0xa30>)
 8013b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b2c:	f7ec fbb6 	bl	800029c <__adddf3>
 8013b30:	4622      	mov	r2, r4
 8013b32:	462b      	mov	r3, r5
 8013b34:	f7ec fd68 	bl	8000608 <__aeabi_dmul>
 8013b38:	4602      	mov	r2, r0
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	4640      	mov	r0, r8
 8013b3e:	4649      	mov	r1, r9
 8013b40:	f7ec fbaa 	bl	8000298 <__aeabi_dsub>
 8013b44:	4604      	mov	r4, r0
 8013b46:	460d      	mov	r5, r1
 8013b48:	4602      	mov	r2, r0
 8013b4a:	460b      	mov	r3, r1
 8013b4c:	4640      	mov	r0, r8
 8013b4e:	4649      	mov	r1, r9
 8013b50:	f7ec fd5a 	bl	8000608 <__aeabi_dmul>
 8013b54:	2200      	movs	r2, #0
 8013b56:	ec41 0b19 	vmov	d9, r0, r1
 8013b5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013b5e:	4620      	mov	r0, r4
 8013b60:	4629      	mov	r1, r5
 8013b62:	f7ec fb99 	bl	8000298 <__aeabi_dsub>
 8013b66:	4602      	mov	r2, r0
 8013b68:	460b      	mov	r3, r1
 8013b6a:	ec51 0b19 	vmov	r0, r1, d9
 8013b6e:	f7ec fe75 	bl	800085c <__aeabi_ddiv>
 8013b72:	4632      	mov	r2, r6
 8013b74:	4604      	mov	r4, r0
 8013b76:	460d      	mov	r5, r1
 8013b78:	463b      	mov	r3, r7
 8013b7a:	4640      	mov	r0, r8
 8013b7c:	4649      	mov	r1, r9
 8013b7e:	f7ec fd43 	bl	8000608 <__aeabi_dmul>
 8013b82:	4632      	mov	r2, r6
 8013b84:	463b      	mov	r3, r7
 8013b86:	f7ec fb89 	bl	800029c <__adddf3>
 8013b8a:	4602      	mov	r2, r0
 8013b8c:	460b      	mov	r3, r1
 8013b8e:	4620      	mov	r0, r4
 8013b90:	4629      	mov	r1, r5
 8013b92:	f7ec fb81 	bl	8000298 <__aeabi_dsub>
 8013b96:	4642      	mov	r2, r8
 8013b98:	464b      	mov	r3, r9
 8013b9a:	f7ec fb7d 	bl	8000298 <__aeabi_dsub>
 8013b9e:	460b      	mov	r3, r1
 8013ba0:	4602      	mov	r2, r0
 8013ba2:	4939      	ldr	r1, [pc, #228]	; (8013c88 <__ieee754_pow+0xa40>)
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	f7ec fb77 	bl	8000298 <__aeabi_dsub>
 8013baa:	ec41 0b10 	vmov	d0, r0, r1
 8013bae:	ee10 3a90 	vmov	r3, s1
 8013bb2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013bba:	da2b      	bge.n	8013c14 <__ieee754_pow+0x9cc>
 8013bbc:	4650      	mov	r0, sl
 8013bbe:	f000 f86f 	bl	8013ca0 <scalbn>
 8013bc2:	ec51 0b10 	vmov	r0, r1, d0
 8013bc6:	ec53 2b18 	vmov	r2, r3, d8
 8013bca:	f7ff bbee 	b.w	80133aa <__ieee754_pow+0x162>
 8013bce:	4b2f      	ldr	r3, [pc, #188]	; (8013c8c <__ieee754_pow+0xa44>)
 8013bd0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013bd4:	429e      	cmp	r6, r3
 8013bd6:	f77f af0d 	ble.w	80139f4 <__ieee754_pow+0x7ac>
 8013bda:	4b2d      	ldr	r3, [pc, #180]	; (8013c90 <__ieee754_pow+0xa48>)
 8013bdc:	440b      	add	r3, r1
 8013bde:	4303      	orrs	r3, r0
 8013be0:	d009      	beq.n	8013bf6 <__ieee754_pow+0x9ae>
 8013be2:	ec51 0b18 	vmov	r0, r1, d8
 8013be6:	2200      	movs	r2, #0
 8013be8:	2300      	movs	r3, #0
 8013bea:	f7ec ff7f 	bl	8000aec <__aeabi_dcmplt>
 8013bee:	3800      	subs	r0, #0
 8013bf0:	bf18      	it	ne
 8013bf2:	2001      	movne	r0, #1
 8013bf4:	e448      	b.n	8013488 <__ieee754_pow+0x240>
 8013bf6:	4622      	mov	r2, r4
 8013bf8:	462b      	mov	r3, r5
 8013bfa:	f7ec fb4d 	bl	8000298 <__aeabi_dsub>
 8013bfe:	4642      	mov	r2, r8
 8013c00:	464b      	mov	r3, r9
 8013c02:	f7ec ff87 	bl	8000b14 <__aeabi_dcmpge>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	f43f aef4 	beq.w	80139f4 <__ieee754_pow+0x7ac>
 8013c0c:	e7e9      	b.n	8013be2 <__ieee754_pow+0x99a>
 8013c0e:	f04f 0a00 	mov.w	sl, #0
 8013c12:	e71a      	b.n	8013a4a <__ieee754_pow+0x802>
 8013c14:	ec51 0b10 	vmov	r0, r1, d0
 8013c18:	4619      	mov	r1, r3
 8013c1a:	e7d4      	b.n	8013bc6 <__ieee754_pow+0x97e>
 8013c1c:	491a      	ldr	r1, [pc, #104]	; (8013c88 <__ieee754_pow+0xa40>)
 8013c1e:	2000      	movs	r0, #0
 8013c20:	f7ff bb31 	b.w	8013286 <__ieee754_pow+0x3e>
 8013c24:	2000      	movs	r0, #0
 8013c26:	2100      	movs	r1, #0
 8013c28:	f7ff bb2d 	b.w	8013286 <__ieee754_pow+0x3e>
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	4639      	mov	r1, r7
 8013c30:	f7ff bb29 	b.w	8013286 <__ieee754_pow+0x3e>
 8013c34:	9204      	str	r2, [sp, #16]
 8013c36:	f7ff bb7b 	b.w	8013330 <__ieee754_pow+0xe8>
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	f7ff bb65 	b.w	801330a <__ieee754_pow+0xc2>
 8013c40:	00000000 	.word	0x00000000
 8013c44:	3fe62e43 	.word	0x3fe62e43
 8013c48:	fefa39ef 	.word	0xfefa39ef
 8013c4c:	3fe62e42 	.word	0x3fe62e42
 8013c50:	0ca86c39 	.word	0x0ca86c39
 8013c54:	be205c61 	.word	0xbe205c61
 8013c58:	72bea4d0 	.word	0x72bea4d0
 8013c5c:	3e663769 	.word	0x3e663769
 8013c60:	c5d26bf1 	.word	0xc5d26bf1
 8013c64:	3ebbbd41 	.word	0x3ebbbd41
 8013c68:	af25de2c 	.word	0xaf25de2c
 8013c6c:	3f11566a 	.word	0x3f11566a
 8013c70:	16bebd93 	.word	0x16bebd93
 8013c74:	3f66c16c 	.word	0x3f66c16c
 8013c78:	5555553e 	.word	0x5555553e
 8013c7c:	3fc55555 	.word	0x3fc55555
 8013c80:	3fe00000 	.word	0x3fe00000
 8013c84:	fff00000 	.word	0xfff00000
 8013c88:	3ff00000 	.word	0x3ff00000
 8013c8c:	4090cbff 	.word	0x4090cbff
 8013c90:	3f6f3400 	.word	0x3f6f3400
 8013c94:	652b82fe 	.word	0x652b82fe
 8013c98:	3c971547 	.word	0x3c971547
 8013c9c:	00000000 	.word	0x00000000

08013ca0 <scalbn>:
 8013ca0:	b570      	push	{r4, r5, r6, lr}
 8013ca2:	ec55 4b10 	vmov	r4, r5, d0
 8013ca6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013caa:	4606      	mov	r6, r0
 8013cac:	462b      	mov	r3, r5
 8013cae:	b999      	cbnz	r1, 8013cd8 <scalbn+0x38>
 8013cb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013cb4:	4323      	orrs	r3, r4
 8013cb6:	d03f      	beq.n	8013d38 <scalbn+0x98>
 8013cb8:	4b35      	ldr	r3, [pc, #212]	; (8013d90 <scalbn+0xf0>)
 8013cba:	4629      	mov	r1, r5
 8013cbc:	ee10 0a10 	vmov	r0, s0
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f7ec fca1 	bl	8000608 <__aeabi_dmul>
 8013cc6:	4b33      	ldr	r3, [pc, #204]	; (8013d94 <scalbn+0xf4>)
 8013cc8:	429e      	cmp	r6, r3
 8013cca:	4604      	mov	r4, r0
 8013ccc:	460d      	mov	r5, r1
 8013cce:	da10      	bge.n	8013cf2 <scalbn+0x52>
 8013cd0:	a327      	add	r3, pc, #156	; (adr r3, 8013d70 <scalbn+0xd0>)
 8013cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd6:	e01f      	b.n	8013d18 <scalbn+0x78>
 8013cd8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013cdc:	4291      	cmp	r1, r2
 8013cde:	d10c      	bne.n	8013cfa <scalbn+0x5a>
 8013ce0:	ee10 2a10 	vmov	r2, s0
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	4629      	mov	r1, r5
 8013ce8:	f7ec fad8 	bl	800029c <__adddf3>
 8013cec:	4604      	mov	r4, r0
 8013cee:	460d      	mov	r5, r1
 8013cf0:	e022      	b.n	8013d38 <scalbn+0x98>
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013cf8:	3936      	subs	r1, #54	; 0x36
 8013cfa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013cfe:	4296      	cmp	r6, r2
 8013d00:	dd0d      	ble.n	8013d1e <scalbn+0x7e>
 8013d02:	2d00      	cmp	r5, #0
 8013d04:	a11c      	add	r1, pc, #112	; (adr r1, 8013d78 <scalbn+0xd8>)
 8013d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d0a:	da02      	bge.n	8013d12 <scalbn+0x72>
 8013d0c:	a11c      	add	r1, pc, #112	; (adr r1, 8013d80 <scalbn+0xe0>)
 8013d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d12:	a319      	add	r3, pc, #100	; (adr r3, 8013d78 <scalbn+0xd8>)
 8013d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d18:	f7ec fc76 	bl	8000608 <__aeabi_dmul>
 8013d1c:	e7e6      	b.n	8013cec <scalbn+0x4c>
 8013d1e:	1872      	adds	r2, r6, r1
 8013d20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013d24:	428a      	cmp	r2, r1
 8013d26:	dcec      	bgt.n	8013d02 <scalbn+0x62>
 8013d28:	2a00      	cmp	r2, #0
 8013d2a:	dd08      	ble.n	8013d3e <scalbn+0x9e>
 8013d2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013d30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013d34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013d38:	ec45 4b10 	vmov	d0, r4, r5
 8013d3c:	bd70      	pop	{r4, r5, r6, pc}
 8013d3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013d42:	da08      	bge.n	8013d56 <scalbn+0xb6>
 8013d44:	2d00      	cmp	r5, #0
 8013d46:	a10a      	add	r1, pc, #40	; (adr r1, 8013d70 <scalbn+0xd0>)
 8013d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d4c:	dac0      	bge.n	8013cd0 <scalbn+0x30>
 8013d4e:	a10e      	add	r1, pc, #56	; (adr r1, 8013d88 <scalbn+0xe8>)
 8013d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d54:	e7bc      	b.n	8013cd0 <scalbn+0x30>
 8013d56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013d5a:	3236      	adds	r2, #54	; 0x36
 8013d5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013d60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013d64:	4620      	mov	r0, r4
 8013d66:	4b0c      	ldr	r3, [pc, #48]	; (8013d98 <scalbn+0xf8>)
 8013d68:	2200      	movs	r2, #0
 8013d6a:	e7d5      	b.n	8013d18 <scalbn+0x78>
 8013d6c:	f3af 8000 	nop.w
 8013d70:	c2f8f359 	.word	0xc2f8f359
 8013d74:	01a56e1f 	.word	0x01a56e1f
 8013d78:	8800759c 	.word	0x8800759c
 8013d7c:	7e37e43c 	.word	0x7e37e43c
 8013d80:	8800759c 	.word	0x8800759c
 8013d84:	fe37e43c 	.word	0xfe37e43c
 8013d88:	c2f8f359 	.word	0xc2f8f359
 8013d8c:	81a56e1f 	.word	0x81a56e1f
 8013d90:	43500000 	.word	0x43500000
 8013d94:	ffff3cb0 	.word	0xffff3cb0
 8013d98:	3c900000 	.word	0x3c900000

08013d9c <with_errno>:
 8013d9c:	b570      	push	{r4, r5, r6, lr}
 8013d9e:	4604      	mov	r4, r0
 8013da0:	460d      	mov	r5, r1
 8013da2:	4616      	mov	r6, r2
 8013da4:	f7fc fe7a 	bl	8010a9c <__errno>
 8013da8:	4629      	mov	r1, r5
 8013daa:	6006      	str	r6, [r0, #0]
 8013dac:	4620      	mov	r0, r4
 8013dae:	bd70      	pop	{r4, r5, r6, pc}

08013db0 <xflow>:
 8013db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013db2:	4614      	mov	r4, r2
 8013db4:	461d      	mov	r5, r3
 8013db6:	b108      	cbz	r0, 8013dbc <xflow+0xc>
 8013db8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013dbc:	e9cd 2300 	strd	r2, r3, [sp]
 8013dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	4629      	mov	r1, r5
 8013dc8:	f7ec fc1e 	bl	8000608 <__aeabi_dmul>
 8013dcc:	2222      	movs	r2, #34	; 0x22
 8013dce:	b003      	add	sp, #12
 8013dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013dd4:	f7ff bfe2 	b.w	8013d9c <with_errno>

08013dd8 <__math_uflow>:
 8013dd8:	b508      	push	{r3, lr}
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013de0:	f7ff ffe6 	bl	8013db0 <xflow>
 8013de4:	ec41 0b10 	vmov	d0, r0, r1
 8013de8:	bd08      	pop	{r3, pc}

08013dea <__math_oflow>:
 8013dea:	b508      	push	{r3, lr}
 8013dec:	2200      	movs	r2, #0
 8013dee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013df2:	f7ff ffdd 	bl	8013db0 <xflow>
 8013df6:	ec41 0b10 	vmov	d0, r0, r1
 8013dfa:	bd08      	pop	{r3, pc}

08013dfc <_init>:
 8013dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dfe:	bf00      	nop
 8013e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e02:	bc08      	pop	{r3}
 8013e04:	469e      	mov	lr, r3
 8013e06:	4770      	bx	lr

08013e08 <_fini>:
 8013e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e0a:	bf00      	nop
 8013e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e0e:	bc08      	pop	{r3}
 8013e10:	469e      	mov	lr, r3
 8013e12:	4770      	bx	lr
