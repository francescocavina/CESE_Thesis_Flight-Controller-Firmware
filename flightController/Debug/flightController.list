
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0800978c  0800978c  0001978c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a0  080099a0  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099a8  080099a8  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  080099b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016b8  2000015c  08009b0c  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001814  08009b0c  00021814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a35e  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004096  00000000  00000000  0003a52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  0003e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ca  00000000  00000000  0003fcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b10e  00000000  00000000  00040e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f1cd  00000000  00000000  0005bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009461a  00000000  00000000  0007b15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006494  00000000  00000000  0010f778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00115c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000015c 	.word	0x2000015c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009774 	.word	0x08009774

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000160 	.word	0x20000160
 80001d4:	08009774 	.word	0x08009774

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009d8:	f000 b970 	b.w	8000cbc <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	460d      	mov	r5, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	460f      	mov	r7, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14a      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4694      	mov	ip, r2
 8000a08:	d965      	bls.n	8000ad6 <__udivmoddi4+0xe2>
 8000a0a:	fab2 f382 	clz	r3, r2
 8000a0e:	b143      	cbz	r3, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a14:	f1c3 0220 	rsb	r2, r3, #32
 8000a18:	409f      	lsls	r7, r3
 8000a1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	409c      	lsls	r4, r3
 8000a22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a26:	fa1f f58c 	uxth.w	r5, ip
 8000a2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a2e:	0c22      	lsrs	r2, r4, #16
 8000a30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a38:	fb01 f005 	mul.w	r0, r1, r5
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	d90a      	bls.n	8000a56 <__udivmoddi4+0x62>
 8000a40:	eb1c 0202 	adds.w	r2, ip, r2
 8000a44:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000a48:	f080 811c 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a4c:	4290      	cmp	r0, r2
 8000a4e:	f240 8119 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a52:	3902      	subs	r1, #2
 8000a54:	4462      	add	r2, ip
 8000a56:	1a12      	subs	r2, r2, r0
 8000a58:	b2a4      	uxth	r4, r4
 8000a5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a66:	fb00 f505 	mul.w	r5, r0, r5
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	d90a      	bls.n	8000a84 <__udivmoddi4+0x90>
 8000a6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a72:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a76:	f080 8107 	bcs.w	8000c88 <__udivmoddi4+0x294>
 8000a7a:	42a5      	cmp	r5, r4
 8000a7c:	f240 8104 	bls.w	8000c88 <__udivmoddi4+0x294>
 8000a80:	4464      	add	r4, ip
 8000a82:	3802      	subs	r0, #2
 8000a84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a88:	1b64      	subs	r4, r4, r5
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	b11e      	cbz	r6, 8000a96 <__udivmoddi4+0xa2>
 8000a8e:	40dc      	lsrs	r4, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	e9c6 4300 	strd	r4, r3, [r6]
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0xbc>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80ed 	beq.w	8000c7e <__udivmoddi4+0x28a>
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	fab3 f183 	clz	r1, r3
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	d149      	bne.n	8000b4c <__udivmoddi4+0x158>
 8000ab8:	42ab      	cmp	r3, r5
 8000aba:	d302      	bcc.n	8000ac2 <__udivmoddi4+0xce>
 8000abc:	4282      	cmp	r2, r0
 8000abe:	f200 80f8 	bhi.w	8000cb2 <__udivmoddi4+0x2be>
 8000ac2:	1a84      	subs	r4, r0, r2
 8000ac4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4617      	mov	r7, r2
 8000acc:	2e00      	cmp	r6, #0
 8000ace:	d0e2      	beq.n	8000a96 <__udivmoddi4+0xa2>
 8000ad0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ad4:	e7df      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000ad6:	b902      	cbnz	r2, 8000ada <__udivmoddi4+0xe6>
 8000ad8:	deff      	udf	#255	; 0xff
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8090 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae4:	1a8a      	subs	r2, r1, r2
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2101      	movs	r1, #1
 8000af0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000af4:	fb07 2015 	mls	r0, r7, r5, r2
 8000af8:	0c22      	lsrs	r2, r4, #16
 8000afa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000afe:	fb0e f005 	mul.w	r0, lr, r5
 8000b02:	4290      	cmp	r0, r2
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b06:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4290      	cmp	r0, r2
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2b8>
 8000b16:	4645      	mov	r5, r8
 8000b18:	1a12      	subs	r2, r2, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b20:	fb07 2210 	mls	r2, r7, r0, r2
 8000b24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x14e>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x14c>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2c2>
 8000b40:	4610      	mov	r0, r2
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b4a:	e79f      	b.n	8000a8c <__udivmoddi4+0x98>
 8000b4c:	f1c1 0720 	rsb	r7, r1, #32
 8000b50:	408b      	lsls	r3, r1
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b62:	40fd      	lsrs	r5, r7
 8000b64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b68:	4323      	orrs	r3, r4
 8000b6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b6e:	fa1f fe8c 	uxth.w	lr, ip
 8000b72:	fb09 5518 	mls	r5, r9, r8, r5
 8000b76:	0c1c      	lsrs	r4, r3, #16
 8000b78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b80:	42a5      	cmp	r5, r4
 8000b82:	fa02 f201 	lsl.w	r2, r2, r1
 8000b86:	fa00 f001 	lsl.w	r0, r0, r1
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b98:	42a5      	cmp	r5, r4
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4464      	add	r4, ip
 8000ba4:	1b64      	subs	r4, r4, r5
 8000ba6:	b29d      	uxth	r5, r3
 8000ba8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bac:	fb09 4413 	mls	r4, r9, r3, r4
 8000bb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bca:	3b02      	subs	r3, #2
 8000bcc:	4464      	add	r4, ip
 8000bce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bd6:	eba4 040e 	sub.w	r4, r4, lr
 8000bda:	42ac      	cmp	r4, r5
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46ae      	mov	lr, r5
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x29c>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x298>
 8000be4:	b156      	cbz	r6, 8000bfc <__udivmoddi4+0x208>
 8000be6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bea:	eb64 040e 	sbc.w	r4, r4, lr
 8000bee:	fa04 f707 	lsl.w	r7, r4, r7
 8000bf2:	40ca      	lsrs	r2, r1
 8000bf4:	40cc      	lsrs	r4, r1
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	f1c3 0120 	rsb	r1, r3, #32
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c10:	fa25 f101 	lsr.w	r1, r5, r1
 8000c14:	409d      	lsls	r5, r3
 8000c16:	432a      	orrs	r2, r5
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c24:	fb07 1510 	mls	r5, r7, r0, r1
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c32:	428d      	cmp	r5, r1
 8000c34:	fa04 f403 	lsl.w	r4, r4, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x258>
 8000c3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c44:	428d      	cmp	r5, r1
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4461      	add	r1, ip
 8000c4c:	1b49      	subs	r1, r1, r5
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c54:	fb07 1115 	mls	r1, r7, r5, r1
 8000c58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c60:	4291      	cmp	r1, r2
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x282>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2a8>
 8000c6e:	4291      	cmp	r1, r2
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2a8>
 8000c72:	3d02      	subs	r5, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a52      	subs	r2, r2, r1
 8000c78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0xfc>
 8000c7e:	4631      	mov	r1, r6
 8000c80:	4630      	mov	r0, r6
 8000c82:	e708      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000c84:	4639      	mov	r1, r7
 8000c86:	e6e6      	b.n	8000a56 <__udivmoddi4+0x62>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	e6fb      	b.n	8000a84 <__udivmoddi4+0x90>
 8000c8c:	4548      	cmp	r0, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9c:	4645      	mov	r5, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x282>
 8000ca0:	462b      	mov	r3, r5
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x258>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000cac:	3d02      	subs	r5, #2
 8000cae:	4462      	add	r2, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e70a      	b.n	8000acc <__udivmoddi4+0xd8>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x14e>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <flightController_App>:
extern TIM_HandleTypeDef htim3;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
    //    }

	ESC_HandleTypeDef_t * hesc;

	// Delay before start
	HAL_Delay(1000);
 8000cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cca:	f000 ff79 	bl	8001bc0 <HAL_Delay>

	LOG((uint8_t *) "Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	481a      	ldr	r0, [pc, #104]	; (8000d3c <flightController_App+0x7c>)
 8000cd2:	f000 fea1 	bl	8001a18 <LOG>
	HAL_Delay(50);
 8000cd6:	2032      	movs	r0, #50	; 0x32
 8000cd8:	f000 ff72 	bl	8001bc0 <HAL_Delay>

    hesc = ESC_Init(&htim3);
 8000cdc:	4818      	ldr	r0, [pc, #96]	; (8000d40 <flightController_App+0x80>)
 8000cde:	f000 fd93 	bl	8001808 <ESC_Init>
 8000ce2:	6078      	str	r0, [r7, #4]

	LOG((uint8_t *) "Flight Controller initialized.\r\n\n", LOG_INFORMATION);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4817      	ldr	r0, [pc, #92]	; (8000d44 <flightController_App+0x84>)
 8000ce8:	f000 fe96 	bl	8001a18 <LOG>
	HAL_Delay(50);
 8000cec:	2032      	movs	r0, #50	; 0x32
 8000cee:	f000 ff67 	bl	8001bc0 <HAL_Delay>

	HAL_Delay(3000);
 8000cf2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cf6:	f000 ff63 	bl	8001bc0 <HAL_Delay>
	ESC_SetSpeed(hesc, hesc->channel1, 100);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000d48 <flightController_App+0x88>
 8000d02:	4619      	mov	r1, r3
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 fe19 	bl	800193c <ESC_SetSpeed>
	ESC_SetSpeed(hesc, hesc->channel2, 100);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000d48 <flightController_App+0x88>
 8000d12:	4619      	mov	r1, r3
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 fe11 	bl	800193c <ESC_SetSpeed>
	ESC_SetSpeed(hesc, hesc->channel3, 100);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000d48 <flightController_App+0x88>
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 fe09 	bl	800193c <ESC_SetSpeed>
	ESC_SetSpeed(hesc, hesc->channel4, 100);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000d48 <flightController_App+0x88>
 8000d32:	4619      	mov	r1, r3
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 fe01 	bl	800193c <ESC_SetSpeed>

    while (1) {
 8000d3a:	e7fe      	b.n	8000d3a <flightController_App+0x7a>
 8000d3c:	0800978c 	.word	0x0800978c
 8000d40:	200001cc 	.word	0x200001cc
 8000d44:	080097b4 	.word	0x080097b4
 8000d48:	42c80000 	.word	0x42c80000

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f000 fec4 	bl	8001adc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f812 	bl	8000d7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f000 f966 	bl	8001028 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d5c:	f000 f94a 	bl	8000ff4 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000d60:	f007 fe9c 	bl	8008a9c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000d64:	f000 f874 	bl	8000e50 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000d68:	f000 f91a 	bl	8000fa0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d6c:	f000 f89e 	bl	8000eac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
    flightController_App();
 8000d70:	f7ff ffa6 	bl	8000cc0 <flightController_App>
 8000d74:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2230      	movs	r2, #48	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f008 fc52 	bl	8009634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <SystemClock_Config+0xcc>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <SystemClock_Config+0xcc>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SystemClock_Config+0xcc>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc8:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de6:	2302      	movs	r3, #2
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000df0:	2319      	movs	r3, #25
 8000df2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000df4:	2390      	movs	r3, #144	; 0x90
 8000df6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 feb7 	bl	8003b78 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e10:	f000 f940 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2102      	movs	r1, #2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 f919 	bl	8004068 <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e3c:	f000 f92a 	bl	8001094 <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3750      	adds	r7, #80	; 0x50
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e56:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <MX_I2C1_Init+0x54>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e5c:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <MX_I2C1_Init+0x58>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e8e:	f001 fab1 	bl	80023f4 <HAL_I2C_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e98:	f000 f8fc 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000178 	.word	0x20000178
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	00061a80 	.word	0x00061a80

08000eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000ed0:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <MX_TIM3_Init+0xf0>)
 8000ed2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 88-1;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000ed6:	2257      	movs	r2, #87	; 0x57
 8000ed8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16384-1;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000ee2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000ee6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ef4:	4828      	ldr	r0, [pc, #160]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000ef6:	f003 fa97 	bl	8004428 <HAL_TIM_PWM_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f00:	f000 f8c8 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	4619      	mov	r1, r3
 8000f12:	4821      	ldr	r0, [pc, #132]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000f14:	f003 fe7c 	bl	8004c10 <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f1e:	f000 f8b9 	bl	8001094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f22:	2360      	movs	r3, #96	; 0x60
 8000f24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	4817      	ldr	r0, [pc, #92]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000f3a:	f003 fb75 	bl	8004628 <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000f44:	f000 f8a6 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4812      	ldr	r0, [pc, #72]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000f50:	f003 fb6a 	bl	8004628 <HAL_TIM_PWM_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f5a:	f000 f89b 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2208      	movs	r2, #8
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000f66:	f003 fb5f 	bl	8004628 <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000f70:	f000 f890 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	220c      	movs	r2, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000f7c:	f003 fb54 	bl	8004628 <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000f86:	f000 f885 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <MX_TIM3_Init+0xec>)
 8000f8c:	f000 f91c 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200001cc 	.word	0x200001cc
 8000f9c:	40000400 	.word	0x40000400

08000fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART2_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fd8:	f003 fe88 	bl	8004cec <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f000 f857 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000214 	.word	0x20000214
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_DMA_Init+0x30>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <MX_DMA_Init+0x30>)
 8001004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_DMA_Init+0x30>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_GPIO_Init+0x68>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <MX_GPIO_Init+0x68>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_GPIO_Init+0x68>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_GPIO_Init+0x68>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <MX_GPIO_Init+0x68>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <MX_GPIO_Init+0x68>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_GPIO_Init+0x68>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <MX_GPIO_Init+0x68>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_GPIO_Init+0x68>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_MspInit+0x4c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_MspInit+0x4c>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_MspInit+0x4c>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <HAL_MspInit+0x4c>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_I2C_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_I2C_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001132:	23c0      	movs	r3, #192	; 0xc0
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001136:	2312      	movs	r3, #18
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001142:	2304      	movs	r3, #4
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <HAL_I2C_MspInit+0x8c>)
 800114e:	f000 ffcd 	bl	80020ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_I2C_MspInit+0x88>)
 800115c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40005400 	.word	0x40005400
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400

08001184 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10d      	bne.n	80011b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_TIM_PWM_MspInit+0x40>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <HAL_TIM_PWM_MspInit+0x40>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_TIM_PWM_MspInit+0x40>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40000400 	.word	0x40000400
 80011c4:	40023800 	.word	0x40023800

080011c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a21      	ldr	r2, [pc, #132]	; (800126c <HAL_TIM_MspPostInit+0xa4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d13b      	bne.n	8001262 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_TIM_MspPostInit+0xa8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_TIM_MspPostInit+0xa8>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_TIM_MspPostInit+0xa8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_TIM_MspPostInit+0xa8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <HAL_TIM_MspPostInit+0xa8>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_TIM_MspPostInit+0xa8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001222:	23c0      	movs	r3, #192	; 0xc0
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001232:	2302      	movs	r3, #2
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <HAL_TIM_MspPostInit+0xac>)
 800123e:	f000 ff55 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001242:	2303      	movs	r3, #3
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001252:	2302      	movs	r3, #2
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <HAL_TIM_MspPostInit+0xb0>)
 800125e:	f000 ff45 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40000400 	.word	0x40000400
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020400 	.word	0x40020400

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a30      	ldr	r2, [pc, #192]	; (800135c <HAL_UART_MspInit+0xe0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d15a      	bne.n	8001354 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_UART_MspInit+0xe4>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a2e      	ldr	r2, [pc, #184]	; (8001360 <HAL_UART_MspInit+0xe4>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <HAL_UART_MspInit+0xe4>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <HAL_UART_MspInit+0xe4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a27      	ldr	r2, [pc, #156]	; (8001360 <HAL_UART_MspInit+0xe4>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_UART_MspInit+0xe4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012d6:	230c      	movs	r3, #12
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e6:	2307      	movs	r3, #7
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <HAL_UART_MspInit+0xe8>)
 80012f2:	f000 fefb 	bl	80020ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_UART_MspInit+0xec>)
 80012f8:	4a1c      	ldr	r2, [pc, #112]	; (800136c <HAL_UART_MspInit+0xf0>)
 80012fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_UART_MspInit+0xec>)
 80012fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001302:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_UART_MspInit+0xec>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_UART_MspInit+0xec>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_UART_MspInit+0xec>)
 8001312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001316:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_UART_MspInit+0xec>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_UART_MspInit+0xec>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_UART_MspInit+0xec>)
 8001326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_UART_MspInit+0xec>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_UART_MspInit+0xec>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <HAL_UART_MspInit+0xec>)
 800133a:	f000 fd77 	bl	8001e2c <HAL_DMA_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001344:	f7ff fea6 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_UART_MspInit+0xec>)
 800134c:	639a      	str	r2, [r3, #56]	; 0x38
 800134e:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_UART_MspInit+0xec>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40004400 	.word	0x40004400
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	20000258 	.word	0x20000258
 800136c:	40026088 	.word	0x40026088

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 fbe0 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <OTG_FS_IRQHandler+0x10>)
 80013ca:	f001 faa7 	bl	800291c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000fa0 	.word	0x20000fa0

080013d8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
        errno = ENOMEM;
 8001408:	f008 f93c 	bl	8009684 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20010000 	.word	0x20010000
 8001438:	00000400 	.word	0x00000400
 800143c:	200002b8 	.word	0x200002b8
 8001440:	20001818 	.word	0x20001818

08001444 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800146e:	490e      	ldr	r1, [pc, #56]	; (80014a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001470:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001484:	4c0b      	ldr	r4, [pc, #44]	; (80014b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001492:	f7ff ffd7 	bl	8001444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f008 f8fb 	bl	8009690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff fc57 	bl	8000d4c <main>
  bx  lr
 800149e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80014ac:	080099b0 	.word	0x080099b0
  ldr r2, =_sbss
 80014b0:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80014b4:	20001814 	.word	0x20001814

080014b8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>
	...

080014bc <PWM_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc, uint32_t channel) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]

    /* Check parameters */
    if (NULL == hesc) {
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <PWM_Init+0x14>
        return false;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e043      	b.n	8001558 <PWM_Init+0x9c>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d010      	beq.n	80014fc <PWM_Init+0x40>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d00b      	beq.n	80014fc <PWM_Init+0x40>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d006      	beq.n	80014fc <PWM_Init+0x40>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <PWM_Init+0x40>
        return false;
 80014f8:	2300      	movs	r3, #0
 80014fa:	e02d      	b.n	8001558 <PWM_Init+0x9c>
    }

    /* Initialize ESC_HandleTypeDef structure */
    /* BEGIN MODIFY 1 */
    hesc->channel1 = TIM_CHANNEL_1;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
    hesc->channel2 = TIM_CHANNEL_2;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2204      	movs	r2, #4
 8001506:	609a      	str	r2, [r3, #8]
    hesc->channel3 = TIM_CHANNEL_3;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2208      	movs	r2, #8
 800150c:	60da      	str	r2, [r3, #12]
    hesc->channel4 = TIM_CHANNEL_4;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	220c      	movs	r2, #12
 8001512:	611a      	str	r2, [r3, #16]
    hesc->CCR1 = (uint32_t *) &(TIM3->CCR1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <PWM_Init+0xa4>)
 8001518:	615a      	str	r2, [r3, #20]
    hesc->CCR2 = (uint32_t *) &(TIM3->CCR2);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a11      	ldr	r2, [pc, #68]	; (8001564 <PWM_Init+0xa8>)
 800151e:	619a      	str	r2, [r3, #24]
    hesc->CCR3 = (uint32_t *) &(TIM3->CCR3);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a11      	ldr	r2, [pc, #68]	; (8001568 <PWM_Init+0xac>)
 8001524:	61da      	str	r2, [r3, #28]
    hesc->CCR4 = (uint32_t *) &(TIM3->CCR4);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a10      	ldr	r2, [pc, #64]	; (800156c <PWM_Init+0xb0>)
 800152a:	621a      	str	r2, [r3, #32]
    /* END MODIFY 1 */

    /* Initialize timer peripheral */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Init(hesc->htim)) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 ff79 	bl	8004428 <HAL_TIM_PWM_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <PWM_Init+0x84>
        /* END MODIFY 2 */
        return false;
 800153c:	2300      	movs	r3, #0
 800153e:	e00b      	b.n	8001558 <PWM_Init+0x9c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, channel)) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 ffbe 	bl	80044c8 <HAL_TIM_PWM_Start>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <PWM_Init+0x9a>
        /* END MODIFY 3 */
        return false;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <PWM_Init+0x9c>
    }

    return true;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40000434 	.word	0x40000434
 8001564:	40000438 	.word	0x40000438
 8001568:	4000043c 	.word	0x4000043c
 800156c:	40000440 	.word	0x40000440

08001570 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint32_t channel, uint16_t dutyCycle) {
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	4613      	mov	r3, r2
 800157c:	80fb      	strh	r3, [r7, #6]

    /* Check parameters */
    if (NULL == hesc) {
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <PWM_SetDutyCycle+0x18>
        return false;
 8001584:	2300      	movs	r3, #0
 8001586:	e046      	b.n	8001616 <PWM_SetDutyCycle+0xa6>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	429a      	cmp	r2, r3
 8001590:	d010      	beq.n	80015b4 <PWM_SetDutyCycle+0x44>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	429a      	cmp	r2, r3
 800159a:	d00b      	beq.n	80015b4 <PWM_SetDutyCycle+0x44>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d006      	beq.n	80015b4 <PWM_SetDutyCycle+0x44>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <PWM_SetDutyCycle+0x44>
        return false;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e030      	b.n	8001616 <PWM_SetDutyCycle+0xa6>
    }
    if (dutyCycle > MAX_PWM_VALUE) {
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015ba:	d301      	bcc.n	80015c0 <PWM_SetDutyCycle+0x50>
        return false;
 80015bc:	2300      	movs	r3, #0
 80015be:	e02a      	b.n	8001616 <PWM_SetDutyCycle+0xa6>
    }

    /* Set duty cycle */
    if(hesc->channel1 == channel) {
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d104      	bne.n	80015d4 <PWM_SetDutyCycle+0x64>

		*(hesc->CCR1) = dutyCycle;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e01f      	b.n	8001614 <PWM_SetDutyCycle+0xa4>
    } else if(hesc->channel2 == channel) {
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d104      	bne.n	80015e8 <PWM_SetDutyCycle+0x78>

    	*(hesc->CCR2) = dutyCycle;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	88fa      	ldrh	r2, [r7, #6]
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e015      	b.n	8001614 <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel3 == channel) {
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d104      	bne.n	80015fc <PWM_SetDutyCycle+0x8c>

    	*(hesc->CCR3) = dutyCycle;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	88fa      	ldrh	r2, [r7, #6]
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e00b      	b.n	8001614 <PWM_SetDutyCycle+0xa4>
	} else if(hesc->channel4 == channel) {
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	429a      	cmp	r2, r3
 8001604:	d104      	bne.n	8001610 <PWM_SetDutyCycle+0xa0>

		*(hesc->CCR4) = dutyCycle;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	88fa      	ldrh	r2, [r7, #6]
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e001      	b.n	8001614 <PWM_SetDutyCycle+0xa4>
	} else {

		return false;
 8001610:	2300      	movs	r3, #0
 8001612:	e000      	b.n	8001616 <PWM_SetDutyCycle+0xa6>
	}

    return true;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <ESC_SetTimeDelay>:

void ESC_SetTimeDelay(uint32_t delay) {
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
	/* Set delay */
	#ifdef USE_FREERTOS
	const TickType_t xDelay = pdMS_TO_TICKS(delay);
	vTaskDelay(xDelay);
	#else
	HAL_Delay(delay);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fac8 	bl	8001bc0 <HAL_Delay>
	#endif
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint16_t * pwmValue) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001642:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (speed < 0 || speed > 100) {
 8001644:	edd7 7a01 	vldr	s15, [r7, #4]
 8001648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d408      	bmi.n	8001664 <ESC_CalculatePWMDutyCycle+0x2c>
 8001652:	edd7 7a01 	vldr	s15, [r7, #4]
 8001656:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80016c0 <ESC_CalculatePWMDutyCycle+0x88>
 800165a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	dd01      	ble.n	8001668 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 8001664:	2300      	movs	r3, #0
 8001666:	e022      	b.n	80016ae <ESC_CalculatePWMDutyCycle+0x76>
    }

    /* Calculate PWM value */
    *pwmValue = (MAX_ESC_SPEED - MIN_ESC_SPEED) * (speed / 100) + MIN_ESC_SPEED;
 8001668:	edd7 7a01 	vldr	s15, [r7, #4]
 800166c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80016c0 <ESC_CalculatePWMDutyCycle+0x88>
 8001670:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001674:	ee16 0a90 	vmov	r0, s13
 8001678:	f7fe ff1a 	bl	80004b0 <__aeabi_f2d>
 800167c:	a30e      	add	r3, pc, #56	; (adr r3, 80016b8 <ESC_CalculatePWMDutyCycle+0x80>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe ff6d 	bl	8000560 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	a30a      	add	r3, pc, #40	; (adr r3, 80016b8 <ESC_CalculatePWMDutyCycle+0x80>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7fe fdae 	bl	80001f4 <__adddf3>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff f970 	bl	8000984 <__aeabi_d2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	801a      	strh	r2, [r3, #0]

    return true;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	33333334 	.word	0x33333334
 80016bc:	40899933 	.word	0x40899933
 80016c0:	42c80000 	.word	0x42c80000

080016c4 <ESC_AutoCalibrate>:

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <ESC_AutoCalibrate+0x12>
        return false;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e090      	b.n	80017f8 <ESC_AutoCalibrate+0x134>
    }

    LOG((uint8_t *) "Auto-calibrating ESCs...\r\n\n", LOG_INFORMATION);
 80016d6:	2100      	movs	r1, #0
 80016d8:	4849      	ldr	r0, [pc, #292]	; (8001800 <ESC_AutoCalibrate+0x13c>)
 80016da:	f000 f99d 	bl	8001a18 <LOG>

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->channel1, MAX_ESC_SPEED)) {
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f240 6266 	movw	r2, #1638	; 0x666
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff41 	bl	8001570 <PWM_SetDutyCycle>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f083 0301 	eor.w	r3, r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <ESC_AutoCalibrate+0x3a>
        return false;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e07c      	b.n	80017f8 <ESC_AutoCalibrate+0x134>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel2, MAX_ESC_SPEED)) {
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f240 6266 	movw	r2, #1638	; 0x666
 8001706:	4619      	mov	r1, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff31 	bl	8001570 <PWM_SetDutyCycle>
 800170e:	4603      	mov	r3, r0
 8001710:	f083 0301 	eor.w	r3, r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <ESC_AutoCalibrate+0x5a>
        return false;
 800171a:	2300      	movs	r3, #0
 800171c:	e06c      	b.n	80017f8 <ESC_AutoCalibrate+0x134>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel3, MAX_ESC_SPEED)) {
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f240 6266 	movw	r2, #1638	; 0x666
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff21 	bl	8001570 <PWM_SetDutyCycle>
 800172e:	4603      	mov	r3, r0
 8001730:	f083 0301 	eor.w	r3, r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <ESC_AutoCalibrate+0x7a>
        return false;
 800173a:	2300      	movs	r3, #0
 800173c:	e05c      	b.n	80017f8 <ESC_AutoCalibrate+0x134>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel4, MAX_ESC_SPEED)) {
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	f240 6266 	movw	r2, #1638	; 0x666
 8001746:	4619      	mov	r1, r3
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff11 	bl	8001570 <PWM_SetDutyCycle>
 800174e:	4603      	mov	r3, r0
 8001750:	f083 0301 	eor.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <ESC_AutoCalibrate+0x9a>
        return false;
 800175a:	2300      	movs	r3, #0
 800175c:	e04c      	b.n	80017f8 <ESC_AutoCalibrate+0x134>
    }

    /* Wait 2 seconds */
    ESC_SetTimeDelay(ESC_AUTOCALIBRATION_WAIT_TIME_1);
 800175e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001762:	f7ff ff5e 	bl	8001622 <ESC_SetTimeDelay>

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->channel1, MIN_ESC_SPEED)) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f240 3233 	movw	r2, #819	; 0x333
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fefd 	bl	8001570 <PWM_SetDutyCycle>
 8001776:	4603      	mov	r3, r0
 8001778:	f083 0301 	eor.w	r3, r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <ESC_AutoCalibrate+0xc2>
        return false;
 8001782:	2300      	movs	r3, #0
 8001784:	e038      	b.n	80017f8 <ESC_AutoCalibrate+0x134>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel2, MIN_ESC_SPEED)) {
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f240 3233 	movw	r2, #819	; 0x333
 800178e:	4619      	mov	r1, r3
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff feed 	bl	8001570 <PWM_SetDutyCycle>
 8001796:	4603      	mov	r3, r0
 8001798:	f083 0301 	eor.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <ESC_AutoCalibrate+0xe2>
        return false;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e028      	b.n	80017f8 <ESC_AutoCalibrate+0x134>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel3, MIN_ESC_SPEED)) {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f240 3233 	movw	r2, #819	; 0x333
 80017ae:	4619      	mov	r1, r3
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fedd 	bl	8001570 <PWM_SetDutyCycle>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f083 0301 	eor.w	r3, r3, #1
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <ESC_AutoCalibrate+0x102>
        return false;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e018      	b.n	80017f8 <ESC_AutoCalibrate+0x134>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel4, MIN_ESC_SPEED)) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f240 3233 	movw	r2, #819	; 0x333
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fecd 	bl	8001570 <PWM_SetDutyCycle>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f083 0301 	eor.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <ESC_AutoCalibrate+0x122>
    	return false;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e008      	b.n	80017f8 <ESC_AutoCalibrate+0x134>
    }

    /* Wait 1 second */
    ESC_SetTimeDelay(ESC_AUTOCALIBRATION_WAIT_TIME_2);
 80017e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ea:	f7ff ff1a 	bl	8001622 <ESC_SetTimeDelay>

    LOG((uint8_t *) "ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
 80017ee:	2100      	movs	r1, #0
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <ESC_AutoCalibrate+0x140>)
 80017f2:	f000 f911 	bl	8001a18 <LOG>

    return true;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	080097d8 	.word	0x080097d8
 8001804:	080097f4 	.word	0x080097f4

08001808 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <ESC_Init+0x12>
        return NULL;
 8001816:	2300      	movs	r3, #0
 8001818:	e07d      	b.n	8001916 <ESC_Init+0x10e>
    }

    LOG((uint8_t *) "Initializing ESCs...\r\n\n", LOG_INFORMATION);
 800181a:	2100      	movs	r1, #0
 800181c:	4840      	ldr	r0, [pc, #256]	; (8001920 <ESC_Init+0x118>)
 800181e:	f000 f8fb 	bl	8001a18 <LOG>

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortmalloc(sizeof(ESC_HandleTypeDef_t));
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
 8001822:	2024      	movs	r0, #36	; 0x24
 8001824:	f007 fe4a 	bl	80094bc <malloc>
 8001828:	4603      	mov	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if(hesc) {
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <ESC_Init+0x32>
    	hesc->htim = htim;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e002      	b.n	8001840 <ESC_Init+0x38>
    	/* Dynamic memory allocation was not successful */
    	/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
    	vPortFree(hesc);
#else
    	free(hesc);
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f007 fe46 	bl	80094cc <free>
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc, hesc->channel1)) {
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4619      	mov	r1, r3
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff fe38 	bl	80014bc <PWM_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	f083 0301 	eor.w	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <ESC_Init+0x62>
    	LOG((uint8_t *) "ESC 1 couldn't be initialized.\r\n\n", LOG_ERROR);
 8001858:	2103      	movs	r1, #3
 800185a:	4832      	ldr	r0, [pc, #200]	; (8001924 <ESC_Init+0x11c>)
 800185c:	f000 f8dc 	bl	8001a18 <LOG>

    	/* Free up dynamic allocated memory */
    	#ifdef USE_FREERTOS
    	vPortFree(hesc);
    	#else
    	free(hesc);
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f007 fe33 	bl	80094cc <free>
    	#endif

        return NULL;
 8001866:	2300      	movs	r3, #0
 8001868:	e055      	b.n	8001916 <ESC_Init+0x10e>
    }
    if (false == PWM_Init(hesc, hesc->channel2)) {
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	4619      	mov	r1, r3
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f7ff fe23 	bl	80014bc <PWM_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	f083 0301 	eor.w	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <ESC_Init+0x8c>
    	LOG((uint8_t *) "ESC 2 couldn't be initialized.\r\n\n", LOG_ERROR);
 8001882:	2103      	movs	r1, #3
 8001884:	4828      	ldr	r0, [pc, #160]	; (8001928 <ESC_Init+0x120>)
 8001886:	f000 f8c7 	bl	8001a18 <LOG>

    	/* Free up dynamic allocated memory */
    	#ifdef USE_FREERTOS
    	vPortFree(hesc);
    	#else
    	free(hesc);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f007 fe1e 	bl	80094cc <free>
    	#endif

        return NULL;
 8001890:	2300      	movs	r3, #0
 8001892:	e040      	b.n	8001916 <ESC_Init+0x10e>
    }
    if (false == PWM_Init(hesc, hesc->channel3)) {
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4619      	mov	r1, r3
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f7ff fe0e 	bl	80014bc <PWM_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f083 0301 	eor.w	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <ESC_Init+0xb6>
    	LOG((uint8_t *) "ESC 3 couldn't be initialized.\r\n\n", LOG_ERROR);
 80018ac:	2103      	movs	r1, #3
 80018ae:	481f      	ldr	r0, [pc, #124]	; (800192c <ESC_Init+0x124>)
 80018b0:	f000 f8b2 	bl	8001a18 <LOG>

    	/* Free up dynamic allocated memory */
    	#ifdef USE_FREERTOS
    	vPortFree(hesc);
    	#else
    	free(hesc);
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f007 fe09 	bl	80094cc <free>
    	#endif

        return NULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e02b      	b.n	8001916 <ESC_Init+0x10e>
    }
    if (false == PWM_Init(hesc, hesc->channel4)) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	4619      	mov	r1, r3
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f7ff fdf9 	bl	80014bc <PWM_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f083 0301 	eor.w	r3, r3, #1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <ESC_Init+0xe0>
    	LOG((uint8_t *) "ESC 4 couldn't be initialized.\r\n\n", LOG_ERROR);
 80018d6:	2103      	movs	r1, #3
 80018d8:	4815      	ldr	r0, [pc, #84]	; (8001930 <ESC_Init+0x128>)
 80018da:	f000 f89d 	bl	8001a18 <LOG>

    	/* Free up dynamic allocated memory */
    	#ifdef USE_FREERTOS
    	vPortFree(hesc);
    	#else
    	free(hesc);
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f007 fdf4 	bl	80094cc <free>
    	#endif

        return NULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e016      	b.n	8001916 <ESC_Init+0x10e>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff feeb 	bl	80016c4 <ESC_AutoCalibrate>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f083 0301 	eor.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <ESC_Init+0x104>
    	LOG((uint8_t *) "ESCs couldn't be auto-calibrated.\r\n\n", LOG_ERROR);
 80018fa:	2103      	movs	r1, #3
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <ESC_Init+0x12c>)
 80018fe:	f000 f88b 	bl	8001a18 <LOG>

    	/* Free up dynamic allocated memory */
    	#ifdef USE_FREERTOS
    	vPortFree(hesc);
    	#else
    	free(hesc);
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f007 fde2 	bl	80094cc <free>
    	#endif

        return NULL;
 8001908:	2300      	movs	r3, #0
 800190a:	e004      	b.n	8001916 <ESC_Init+0x10e>
    }

    LOG((uint8_t *) "ESCs initialized.\r\n\n", LOG_INFORMATION);
 800190c:	2100      	movs	r1, #0
 800190e:	480a      	ldr	r0, [pc, #40]	; (8001938 <ESC_Init+0x130>)
 8001910:	f000 f882 	bl	8001a18 <LOG>

    return hesc;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	08009810 	.word	0x08009810
 8001924:	08009828 	.word	0x08009828
 8001928:	0800984c 	.word	0x0800984c
 800192c:	08009870 	.word	0x08009870
 8001930:	08009894 	.word	0x08009894
 8001934:	080098b8 	.word	0x080098b8
 8001938:	080098e0 	.word	0x080098e0

0800193c <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint32_t channel, float speed) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	ed87 0a01 	vstr	s0, [r7, #4]

    uint16_t pwmValue;
    uint16_t * pwmValuePtr = &pwmValue;
 800194a:	f107 0312 	add.w	r3, r7, #18
 800194e:	617b      	str	r3, [r7, #20]

    /* Check parameters */
    if (NULL == hesc->htim) {
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <ESC_SetSpeed+0x20>
        return false;
 8001958:	2300      	movs	r3, #0
 800195a:	e044      	b.n	80019e6 <ESC_SetSpeed+0xaa>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	429a      	cmp	r2, r3
 8001964:	d010      	beq.n	8001988 <ESC_SetSpeed+0x4c>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	429a      	cmp	r2, r3
 800196e:	d00b      	beq.n	8001988 <ESC_SetSpeed+0x4c>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	429a      	cmp	r2, r3
 8001978:	d006      	beq.n	8001988 <ESC_SetSpeed+0x4c>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <ESC_SetSpeed+0x4c>
        return false;
 8001984:	2300      	movs	r3, #0
 8001986:	e02e      	b.n	80019e6 <ESC_SetSpeed+0xaa>
    }
    if (speed < 0 || speed > 100) {
 8001988:	edd7 7a01 	vldr	s15, [r7, #4]
 800198c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	d408      	bmi.n	80019a8 <ESC_SetSpeed+0x6c>
 8001996:	edd7 7a01 	vldr	s15, [r7, #4]
 800199a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80019f0 <ESC_SetSpeed+0xb4>
 800199e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	dd01      	ble.n	80019ac <ESC_SetSpeed+0x70>
        return false;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e01c      	b.n	80019e6 <ESC_SetSpeed+0xaa>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, pwmValuePtr)) {
 80019ac:	6978      	ldr	r0, [r7, #20]
 80019ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80019b2:	f7ff fe41 	bl	8001638 <ESC_CalculatePWMDutyCycle>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f083 0301 	eor.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <ESC_SetSpeed+0x8a>
        return false;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e00f      	b.n	80019e6 <ESC_SetSpeed+0xaa>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, *pwmValuePtr)) {
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7ff fdce 	bl	8001570 <PWM_SetDutyCycle>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f083 0301 	eor.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <ESC_SetSpeed+0xa8>
        return false;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e000      	b.n	80019e6 <ESC_SetSpeed+0xaa>
    };

    return true;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	42c80000 	.word	0x42c80000

080019f4 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

    CDC_Transmit_FS(string, strlen((const char *)string));
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7fe fbeb 	bl	80001d8 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4619      	mov	r1, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f007 f905 	bl	8008c18 <CDC_Transmit_FS>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
int8_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b090      	sub	sp, #64	; 0x40
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]

    /* Check parameters */
    if (NULL == message) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <LOG+0x18>
        return -1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a2e:	e049      	b.n	8001ac4 <LOG+0xac>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d902      	bls.n	8001a3c <LOG+0x24>
        return -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3a:	e043      	b.n	8001ac4 <LOG+0xac>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	222e      	movs	r2, #46	; 0x2e
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f007 fdf3 	bl	8009634 <memset>

    if (LOG_INFORMATION == logType) {
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d108      	bne.n	8001a66 <LOG+0x4e>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <LOG+0xb4>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f007 fdf0 	bl	8009644 <strcat>
 8001a64:	e022      	b.n	8001aac <LOG+0x94>
    } else if (LOG_DEBUGGING == logType) {
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <LOG+0x66>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <LOG+0xb8>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f007 fde4 	bl	8009644 <strcat>
 8001a7c:	e016      	b.n	8001aac <LOG+0x94>
    } else if (LOG_WARNING == logType) {
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d108      	bne.n	8001a96 <LOG+0x7e>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <LOG+0xbc>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f007 fdd8 	bl	8009644 <strcat>
 8001a94:	e00a      	b.n	8001aac <LOG+0x94>
    } else if (LOG_ERROR == logType) {
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d107      	bne.n	8001aac <LOG+0x94>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <LOG+0xc0>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f007 fdcc 	bl	8009644 <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f007 fdc6 	bl	8009644 <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff99 	bl	80019f4 <USB_Write>

    return 0;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3740      	adds	r7, #64	; 0x40
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	2000000c 	.word	0x2000000c
 8001ad8:	20000010 	.word	0x20000010

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <HAL_Init+0x40>)
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_Init+0x40>)
 8001af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_Init+0x40>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 f94f 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f000 f808 	bl	8001b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7ff fac8 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x54>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x58>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f967 	bl	8001e12 <HAL_SYSTICK_Config>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00e      	b.n	8001b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d80a      	bhi.n	8001b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b5c:	f000 f92f 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b60:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <HAL_InitTick+0x5c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000018 	.word	0x20000018
 8001b7c:	20000014 	.word	0x20000014

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x24>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_IncTick+0x24>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000018 	.word	0x20000018
 8001ba4:	200002bc 	.word	0x200002bc

08001ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <HAL_GetTick+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	200002bc 	.word	0x200002bc

08001bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff ffee 	bl	8001ba8 <HAL_GetTick>
 8001bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd8:	d005      	beq.n	8001be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_Delay+0x44>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be6:	bf00      	nop
 8001be8:	f7ff ffde 	bl	8001ba8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d8f7      	bhi.n	8001be8 <HAL_Delay+0x28>
  {
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000018 	.word	0x20000018

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4907      	ldr	r1, [pc, #28]	; (8001ca4 <__NVIC_EnableIRQ+0x38>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff29 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff3e 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff8e 	bl	8001cfc <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5d 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff31 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffa2 	bl	8001d64 <SysTick_Config>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff feb6 	bl	8001ba8 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e099      	b.n	8001f7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e68:	e00f      	b.n	8001e8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e6a:	f7ff fe9d 	bl	8001ba8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d908      	bls.n	8001e8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2203      	movs	r2, #3
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e078      	b.n	8001f7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e8      	bne.n	8001e6a <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <HAL_DMA_Init+0x158>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d107      	bne.n	8001ef4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	4313      	orrs	r3, r2
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f023 0307 	bic.w	r3, r3, #7
 8001f0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d117      	bne.n	8001f4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00e      	beq.n	8001f4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f85f 	bl	8001ff4 <DMA_CheckFifoParam>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e016      	b.n	8001f7c <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f816 	bl	8001f88 <DMA_CalcBaseAndBitshift>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	223f      	movs	r2, #63	; 0x3f
 8001f66:	409a      	lsls	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	f010803f 	.word	0xf010803f

08001f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3b10      	subs	r3, #16
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <DMA_CalcBaseAndBitshift+0x64>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <DMA_CalcBaseAndBitshift+0x68>)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d909      	bls.n	8001fca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	1d1a      	adds	r2, r3, #4
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	659a      	str	r2, [r3, #88]	; 0x58
 8001fc8:	e007      	b.n	8001fda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	aaaaaaab 	.word	0xaaaaaaab
 8001ff0:	08009998 	.word	0x08009998

08001ff4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11f      	bne.n	800204e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d856      	bhi.n	80020c2 <DMA_CheckFifoParam+0xce>
 8002014:	a201      	add	r2, pc, #4	; (adr r2, 800201c <DMA_CheckFifoParam+0x28>)
 8002016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201a:	bf00      	nop
 800201c:	0800202d 	.word	0x0800202d
 8002020:	0800203f 	.word	0x0800203f
 8002024:	0800202d 	.word	0x0800202d
 8002028:	080020c3 	.word	0x080020c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d046      	beq.n	80020c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203c:	e043      	b.n	80020c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002046:	d140      	bne.n	80020ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204c:	e03d      	b.n	80020ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002056:	d121      	bne.n	800209c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d837      	bhi.n	80020ce <DMA_CheckFifoParam+0xda>
 800205e:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <DMA_CheckFifoParam+0x70>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	08002075 	.word	0x08002075
 8002068:	0800207b 	.word	0x0800207b
 800206c:	08002075 	.word	0x08002075
 8002070:	0800208d 	.word	0x0800208d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	e030      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d025      	beq.n	80020d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208a:	e022      	b.n	80020d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002094:	d11f      	bne.n	80020d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209a:	e01c      	b.n	80020d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d903      	bls.n	80020aa <DMA_CheckFifoParam+0xb6>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d003      	beq.n	80020b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020a8:	e018      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
      break;
 80020ae:	e015      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00e      	beq.n	80020da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      break;
 80020c0:	e00b      	b.n	80020da <DMA_CheckFifoParam+0xe6>
      break;
 80020c2:	bf00      	nop
 80020c4:	e00a      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020c6:	bf00      	nop
 80020c8:	e008      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020ca:	bf00      	nop
 80020cc:	e006      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020ce:	bf00      	nop
 80020d0:	e004      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020d2:	bf00      	nop
 80020d4:	e002      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020d6:	bf00      	nop
 80020d8:	e000      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
    }
  }

  return status;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e159      	b.n	80023bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	429a      	cmp	r2, r3
 8002122:	f040 8148 	bne.w	80023b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d005      	beq.n	800213e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213a:	2b02      	cmp	r3, #2
 800213c:	d130      	bne.n	80021a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 0201 	and.w	r2, r3, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d017      	beq.n	80021dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d123      	bne.n	8002230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	08da      	lsrs	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3208      	adds	r2, #8
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80a2 	beq.w	80023b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b57      	ldr	r3, [pc, #348]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a56      	ldr	r2, [pc, #344]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228e:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_GPIO_Init+0x2ec>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a49      	ldr	r2, [pc, #292]	; (80023dc <HAL_GPIO_Init+0x2f0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d019      	beq.n	80022ee <HAL_GPIO_Init+0x202>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a48      	ldr	r2, [pc, #288]	; (80023e0 <HAL_GPIO_Init+0x2f4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x1fe>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a47      	ldr	r2, [pc, #284]	; (80023e4 <HAL_GPIO_Init+0x2f8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x1fa>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a46      	ldr	r2, [pc, #280]	; (80023e8 <HAL_GPIO_Init+0x2fc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x1f6>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a45      	ldr	r2, [pc, #276]	; (80023ec <HAL_GPIO_Init+0x300>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x1f2>
 80022da:	2304      	movs	r3, #4
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022de:	2307      	movs	r3, #7
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022ee:	2300      	movs	r3, #0
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002300:	4935      	ldr	r1, [pc, #212]	; (80023d8 <HAL_GPIO_Init+0x2ec>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002332:	4a2f      	ldr	r2, [pc, #188]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_GPIO_Init+0x304>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800235c:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <HAL_GPIO_Init+0x304>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002386:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_GPIO_Init+0x304>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b0:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	f67f aea2 	bls.w	8002108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40013c00 	.word	0x40013c00

080023f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e12b      	b.n	800265e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fe6a 	bl	80010f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002458:	f001 ffbe 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a81      	ldr	r2, [pc, #516]	; (8002668 <HAL_I2C_Init+0x274>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d807      	bhi.n	8002478 <HAL_I2C_Init+0x84>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a80      	ldr	r2, [pc, #512]	; (800266c <HAL_I2C_Init+0x278>)
 800246c:	4293      	cmp	r3, r2
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	e006      	b.n	8002486 <HAL_I2C_Init+0x92>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a7d      	ldr	r2, [pc, #500]	; (8002670 <HAL_I2C_Init+0x27c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	bf94      	ite	ls
 8002480:	2301      	movls	r3, #1
 8002482:	2300      	movhi	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0e7      	b.n	800265e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4a78      	ldr	r2, [pc, #480]	; (8002674 <HAL_I2C_Init+0x280>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9b      	lsrs	r3, r3, #18
 8002498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a6a      	ldr	r2, [pc, #424]	; (8002668 <HAL_I2C_Init+0x274>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d802      	bhi.n	80024c8 <HAL_I2C_Init+0xd4>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3301      	adds	r3, #1
 80024c6:	e009      	b.n	80024dc <HAL_I2C_Init+0xe8>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	4a69      	ldr	r2, [pc, #420]	; (8002678 <HAL_I2C_Init+0x284>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	099b      	lsrs	r3, r3, #6
 80024da:	3301      	adds	r3, #1
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	495c      	ldr	r1, [pc, #368]	; (8002668 <HAL_I2C_Init+0x274>)
 80024f8:	428b      	cmp	r3, r1
 80024fa:	d819      	bhi.n	8002530 <HAL_I2C_Init+0x13c>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1e59      	subs	r1, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fbb1 f3f3 	udiv	r3, r1, r3
 800250a:	1c59      	adds	r1, r3, #1
 800250c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002510:	400b      	ands	r3, r1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_I2C_Init+0x138>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1e59      	subs	r1, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fbb1 f3f3 	udiv	r3, r1, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252a:	e051      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 800252c:	2304      	movs	r3, #4
 800252e:	e04f      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d111      	bne.n	800255c <HAL_I2C_Init+0x168>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1e58      	subs	r0, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e012      	b.n	8002582 <HAL_I2C_Init+0x18e>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1e58      	subs	r0, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	0099      	lsls	r1, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Init+0x196>
 8002586:	2301      	movs	r3, #1
 8002588:	e022      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10e      	bne.n	80025b0 <HAL_I2C_Init+0x1bc>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1e58      	subs	r0, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	440b      	add	r3, r1
 80025a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ae:	e00f      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e58      	subs	r0, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	0099      	lsls	r1, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	6809      	ldr	r1, [r1, #0]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6911      	ldr	r1, [r2, #16]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68d2      	ldr	r2, [r2, #12]
 800260a:	4311      	orrs	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	430b      	orrs	r3, r1
 8002612:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	000186a0 	.word	0x000186a0
 800266c:	001e847f 	.word	0x001e847f
 8002670:	003d08ff 	.word	0x003d08ff
 8002674:	431bde83 	.word	0x431bde83
 8002678:	10624dd3 	.word	0x10624dd3

0800267c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800267c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267e:	b08f      	sub	sp, #60	; 0x3c
 8002680:	af0a      	add	r7, sp, #40	; 0x28
 8002682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e10f      	b.n	80028ae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d106      	bne.n	80026ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f006 fbfd 	bl	8008ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2203      	movs	r2, #3
 80026b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 fee4 	bl	800549a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	687e      	ldr	r6, [r7, #4]
 80026da:	466d      	mov	r5, sp
 80026dc:	f106 0410 	add.w	r4, r6, #16
 80026e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80026f0:	1d33      	adds	r3, r6, #4
 80026f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f4:	6838      	ldr	r0, [r7, #0]
 80026f6:	f002 fdbb 	bl	8005270 <USB_CoreInit>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0d0      	b.n	80028ae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fed2 	bl	80054bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	e04a      	b.n	80027b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	333d      	adds	r3, #61	; 0x3d
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	333c      	adds	r3, #60	; 0x3c
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	b298      	uxth	r0, r3
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3344      	adds	r3, #68	; 0x44
 800275a:	4602      	mov	r2, r0
 800275c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3340      	adds	r3, #64	; 0x40
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	3348      	adds	r3, #72	; 0x48
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	334c      	adds	r3, #76	; 0x4c
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3354      	adds	r3, #84	; 0x54
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	3301      	adds	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d3af      	bcc.n	800271e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	e044      	b.n	800284e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	3301      	adds	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	429a      	cmp	r2, r3
 8002856:	d3b5      	bcc.n	80027c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	687e      	ldr	r6, [r7, #4]
 8002860:	466d      	mov	r5, sp
 8002862:	f106 0410 	add.w	r4, r6, #16
 8002866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002872:	e885 0003 	stmia.w	r5, {r0, r1}
 8002876:	1d33      	adds	r3, r6, #4
 8002878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	f002 fe6a 	bl	8005554 <USB_DevInit>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00d      	b.n	80028ae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 ffb9 	bl	800681e <USB_DevDisconnect>

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_PCD_Start+0x1c>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e020      	b.n	8002914 <HAL_PCD_Start+0x5e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d109      	bne.n	80028f6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d005      	beq.n	80028f6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fdbc 	bl	8005478 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f003 ff69 	bl	80067dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b08d      	sub	sp, #52	; 0x34
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f004 f827 	bl	8006986 <USB_GetMode>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 848a 	bne.w	8003254 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f003 ff8b 	bl	8006860 <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8480 	beq.w	8003252 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 ff78 	bl	8006860 <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f002 0202 	and.w	r2, r2, #2
 8002988:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f003 ff66 	bl	8006860 <USB_ReadInterrupts>
 8002994:	4603      	mov	r3, r0
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b10      	cmp	r3, #16
 800299c:	d161      	bne.n	8002a62 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0210 	bic.w	r2, r2, #16
 80029ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f003 020f 	and.w	r2, r3, #15
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	0c5b      	lsrs	r3, r3, #17
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d124      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d035      	beq.n	8002a52 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	6a38      	ldr	r0, [r7, #32]
 80029fa:	f003 fd9d 	bl	8006538 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0a:	441a      	add	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	6a1a      	ldr	r2, [r3, #32]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a1c:	441a      	add	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	621a      	str	r2, [r3, #32]
 8002a22:	e016      	b.n	8002a52 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	0c5b      	lsrs	r3, r3, #17
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	2b06      	cmp	r3, #6
 8002a2e:	d110      	bne.n	8002a52 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a36:	2208      	movs	r2, #8
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6a38      	ldr	r0, [r7, #32]
 8002a3c:	f003 fd7c 	bl	8006538 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	6a1a      	ldr	r2, [r3, #32]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a4c:	441a      	add	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0210 	orr.w	r2, r2, #16
 8002a60:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fefa 	bl	8006860 <USB_ReadInterrupts>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a76:	f040 80a7 	bne.w	8002bc8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 feff 	bl	8006886 <USB_ReadDevAllOutEpInterrupt>
 8002a88:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a8a:	e099      	b.n	8002bc0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 808e 	beq.w	8002bb4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f003 ff23 	bl	80068ee <USB_ReadDevOutEPInterrupt>
 8002aa8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00c      	beq.n	8002ace <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fec3 	bl	8003854 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00c      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 ff99 	bl	8003a24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d030      	beq.n	8002b7a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d109      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b36:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	78db      	ldrb	r3, [r3, #3]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d108      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f006 fa9c 	bl	80090a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b74:	461a      	mov	r2, r3
 8002b76:	2302      	movs	r3, #2
 8002b78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	2320      	movs	r3, #32
 8002b94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bac:	461a      	mov	r2, r3
 8002bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	085b      	lsrs	r3, r3, #1
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f47f af62 	bne.w	8002a8c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 fe47 	bl	8006860 <USB_ReadInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bdc:	f040 80db 	bne.w	8002d96 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fe68 	bl	80068ba <USB_ReadDevAllInEpInterrupt>
 8002bea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bf0:	e0cd      	b.n	8002d8e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80c2 	beq.w	8002d82 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 fe8e 	bl	800692a <USB_ReadDevInEPInterrupt>
 8002c0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d057      	beq.n	8002cca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	2201      	movs	r2, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69f9      	ldr	r1, [r7, #28]
 8002c36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d132      	bne.n	8002cbe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	334c      	adds	r3, #76	; 0x4c
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4403      	add	r3, r0
 8002c78:	3348      	adds	r3, #72	; 0x48
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4419      	add	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4403      	add	r3, r0
 8002c8c:	334c      	adds	r3, #76	; 0x4c
 8002c8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d113      	bne.n	8002cbe <HAL_PCD_IRQHandler+0x3a2>
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3354      	adds	r3, #84	; 0x54
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d108      	bne.n	8002cbe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2101      	movs	r1, #1
 8002cba:	f003 fe95 	bl	80069e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f006 f970 	bl	8008faa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2310      	movs	r3, #16
 8002d00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2340      	movs	r3, #64	; 0x40
 8002d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d023      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d2a:	6a38      	ldr	r0, [r7, #32]
 8002d2c:	f002 fd76 	bl	800581c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	3338      	adds	r3, #56	; 0x38
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	78db      	ldrb	r3, [r3, #3]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d108      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4619      	mov	r1, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f006 f9b3 	bl	80090c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fcdb 	bl	8003738 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	3301      	adds	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f47f af2e 	bne.w	8002bf2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fd60 	bl	8006860 <USB_ReadInterrupts>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002daa:	d122      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fec3 	bl	8003b60 <HAL_PCDEx_LPM_Callback>
 8002dda:	e002      	b.n	8002de2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f006 f951 	bl	8009084 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fd32 	bl	8006860 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e06:	d112      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d102      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f006 f90d 	bl	8009038 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e2c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 fd14 	bl	8006860 <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e42:	f040 80b7 	bne.w	8002fb4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2110      	movs	r1, #16
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fcdb 	bl	800581c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e6a:	e046      	b.n	8002efa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e7e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e90:	0151      	lsls	r1, r2, #5
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	440a      	add	r2, r1
 8002e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eac:	461a      	mov	r2, r3
 8002eae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec4:	0151      	lsls	r1, r2, #5
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	440a      	add	r2, r1
 8002eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ed2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee4:	0151      	lsls	r1, r2, #5
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	440a      	add	r2, r1
 8002eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ef2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d3b3      	bcc.n	8002e6c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d016      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f30:	f043 030b 	orr.w	r3, r3, #11
 8002f34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f46:	f043 030b 	orr.w	r3, r3, #11
 8002f4a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4c:	e015      	b.n	8002f7a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f60:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f74:	f043 030b 	orr.w	r3, r3, #11
 8002f78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f003 fd22 	bl	80069e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fc51 	bl	8006860 <USB_ReadInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc8:	d124      	bne.n	8003014 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 fce7 	bl	80069a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 fc9c 	bl	8005916 <USB_GetDevSpeed>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681c      	ldr	r4, [r3, #0]
 8002fea:	f001 f9e9 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 8002fee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f002 f99b 	bl	8005334 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f005 fffb 	bl	8008ffa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003012:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f003 fc21 	bl	8006860 <USB_ReadInterrupts>
 800301e:	4603      	mov	r3, r0
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b08      	cmp	r3, #8
 8003026:	d10a      	bne.n	800303e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f005 ffd8 	bl	8008fde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f002 0208 	and.w	r2, r2, #8
 800303c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fc0c 	bl	8006860 <USB_ReadInterrupts>
 8003048:	4603      	mov	r3, r0
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d122      	bne.n	8003098 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800305e:	2301      	movs	r3, #1
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	e014      	b.n	800308e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	b2db      	uxtb	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fb27 	bl	80036d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	3301      	adds	r3, #1
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003094:	429a      	cmp	r2, r3
 8003096:	d3e5      	bcc.n	8003064 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fbdf 	bl	8006860 <USB_ReadInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ac:	d13b      	bne.n	8003126 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ae:	2301      	movs	r3, #1
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
 80030b2:	e02b      	b.n	800310c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3340      	adds	r3, #64	; 0x40
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d115      	bne.n	8003106 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030dc:	2b00      	cmp	r3, #0
 80030de:	da12      	bge.n	8003106 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	333f      	adds	r3, #63	; 0x3f
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	4619      	mov	r1, r3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fae8 	bl	80036d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	3301      	adds	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003112:	429a      	cmp	r2, r3
 8003114:	d3ce      	bcc.n	80030b4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f003 fb98 	bl	8006860 <USB_ReadInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800313a:	d155      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
 8003140:	e045      	b.n	80031ce <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d12e      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800316a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800316c:	2b00      	cmp	r3, #0
 800316e:	da2b      	bge.n	80031c8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800317c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003180:	429a      	cmp	r2, r3
 8003182:	d121      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10a      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c4:	6053      	str	r3, [r2, #4]
            break;
 80031c6:	e007      	b.n	80031d8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	3301      	adds	r3, #1
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d3b4      	bcc.n	8003142 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fb37 	bl	8006860 <USB_ReadInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fc:	d10a      	bne.n	8003214 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f005 ff72 	bl	80090e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003212:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f003 fb21 	bl	8006860 <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b04      	cmp	r3, #4
 8003226:	d115      	bne.n	8003254 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f005 ff62 	bl	8009104 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	e000      	b.n	8003254 <HAL_PCD_IRQHandler+0x938>
      return;
 8003252:	bf00      	nop
    }
  }
}
 8003254:	3734      	adds	r7, #52	; 0x34
 8003256:	46bd      	mov	sp, r7
 8003258:	bd90      	pop	{r4, r7, pc}

0800325a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_PCD_SetAddress+0x1a>
 8003270:	2302      	movs	r3, #2
 8003272:	e013      	b.n	800329c <HAL_PCD_SetAddress+0x42>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f003 fa7f 	bl	8006790 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	4608      	mov	r0, r1
 80032ae:	4611      	mov	r1, r2
 80032b0:	461a      	mov	r2, r3
 80032b2:	4603      	mov	r3, r0
 80032b4:	70fb      	strb	r3, [r7, #3]
 80032b6:	460b      	mov	r3, r1
 80032b8:	803b      	strh	r3, [r7, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	da0f      	bge.n	80032ea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f003 020f 	and.w	r2, r3, #15
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	3338      	adds	r3, #56	; 0x38
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	3304      	adds	r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	705a      	strb	r2, [r3, #1]
 80032e8:	e00f      	b.n	800330a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 020f 	and.w	r2, r3, #15
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003316:	883a      	ldrh	r2, [r7, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	78ba      	ldrb	r2, [r7, #2]
 8003320:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	785b      	ldrb	r3, [r3, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003334:	78bb      	ldrb	r3, [r7, #2]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d102      	bne.n	8003340 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_PCD_EP_Open+0xaa>
 800334a:	2302      	movs	r3, #2
 800334c:	e00e      	b.n	800336c <HAL_PCD_EP_Open+0xc8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	4618      	mov	r0, r3
 800335e:	f002 faff 	bl	8005960 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800336a:	7afb      	ldrb	r3, [r7, #11]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003384:	2b00      	cmp	r3, #0
 8003386:	da0f      	bge.n	80033a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f003 020f 	and.w	r2, r3, #15
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	3338      	adds	r3, #56	; 0x38
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	3304      	adds	r3, #4
 800339e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	705a      	strb	r2, [r3, #1]
 80033a6:	e00f      	b.n	80033c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	f003 020f 	and.w	r2, r3, #15
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	3304      	adds	r3, #4
 80033c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_PCD_EP_Close+0x6e>
 80033de:	2302      	movs	r3, #2
 80033e0:	e00e      	b.n	8003400 <HAL_PCD_EP_Close+0x8c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68f9      	ldr	r1, [r7, #12]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f002 fb3d 	bl	8005a70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	460b      	mov	r3, r1
 8003416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003418:	7afb      	ldrb	r3, [r7, #11]
 800341a:	f003 020f 	and.w	r2, r3, #15
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800344a:	7afb      	ldrb	r3, [r7, #11]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	b2da      	uxtb	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003464:	7afb      	ldrb	r3, [r7, #11]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	f002 fe1c 	bl	80060b8 <USB_EP0StartXfer>
 8003480:	e008      	b.n	8003494 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	6979      	ldr	r1, [r7, #20]
 8003490:	f002 fbca 	bl	8005c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80034c0:	681b      	ldr	r3, [r3, #0]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	460b      	mov	r3, r1
 80034dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034de:	7afb      	ldrb	r3, [r7, #11]
 80034e0:	f003 020f 	and.w	r2, r3, #15
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	3338      	adds	r3, #56	; 0x38
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4413      	add	r3, r2
 80034f2:	3304      	adds	r3, #4
 80034f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2200      	movs	r2, #0
 8003506:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2201      	movs	r2, #1
 800350c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800350e:	7afb      	ldrb	r3, [r7, #11]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	b2da      	uxtb	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003528:	7afb      	ldrb	r3, [r7, #11]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	6979      	ldr	r1, [r7, #20]
 8003540:	f002 fdba 	bl	80060b8 <USB_EP0StartXfer>
 8003544:	e008      	b.n	8003558 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	6979      	ldr	r1, [r7, #20]
 8003554:	f002 fb68 	bl	8005c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d901      	bls.n	8003580 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e050      	b.n	8003622 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003584:	2b00      	cmp	r3, #0
 8003586:	da0f      	bge.n	80035a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	f003 020f 	and.w	r2, r3, #15
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	3338      	adds	r3, #56	; 0x38
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	4413      	add	r3, r2
 800359c:	3304      	adds	r3, #4
 800359e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	705a      	strb	r2, [r3, #1]
 80035a6:	e00d      	b.n	80035c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	3304      	adds	r3, #4
 80035bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_PCD_EP_SetStall+0x82>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e01e      	b.n	8003622 <HAL_PCD_EP_SetStall+0xc0>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68f9      	ldr	r1, [r7, #12]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f002 fff8 	bl	80065e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10a      	bne.n	8003618 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	b2d9      	uxtb	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003612:	461a      	mov	r2, r3
 8003614:	f003 f9e8 	bl	80069e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	d901      	bls.n	8003648 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e042      	b.n	80036ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364c:	2b00      	cmp	r3, #0
 800364e:	da0f      	bge.n	8003670 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	f003 020f 	and.w	r2, r3, #15
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	3338      	adds	r3, #56	; 0x38
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	3304      	adds	r3, #4
 8003666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	705a      	strb	r2, [r3, #1]
 800366e:	e00f      	b.n	8003690 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 020f 	and.w	r2, r3, #15
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	3304      	adds	r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	b2da      	uxtb	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_PCD_EP_ClrStall+0x86>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e00e      	b.n	80036ce <HAL_PCD_EP_ClrStall+0xa4>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68f9      	ldr	r1, [r7, #12]
 80036be:	4618      	mov	r0, r3
 80036c0:	f003 f800 	bl	80066c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da0c      	bge.n	8003704 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	f003 020f 	and.w	r2, r3, #15
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	3338      	adds	r3, #56	; 0x38
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	3304      	adds	r3, #4
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e00c      	b.n	800371e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	f003 020f 	and.w	r2, r3, #15
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	3304      	adds	r3, #4
 800371c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68f9      	ldr	r1, [r7, #12]
 8003724:	4618      	mov	r0, r3
 8003726:	f002 fe1f 	bl	8006368 <USB_EPStopXfer>
 800372a:	4603      	mov	r3, r0
 800372c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800372e:	7afb      	ldrb	r3, [r7, #11]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af02      	add	r7, sp, #8
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	3338      	adds	r3, #56	; 0x38
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	429a      	cmp	r2, r3
 800376a:	d901      	bls.n	8003770 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e06c      	b.n	800384a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	429a      	cmp	r2, r3
 8003784:	d902      	bls.n	800378c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	3303      	adds	r3, #3
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003794:	e02b      	b.n	80037ee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d902      	bls.n	80037b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3303      	adds	r3, #3
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4603      	mov	r3, r0
 80037d0:	6978      	ldr	r0, [r7, #20]
 80037d2:	f002 fe73 	bl	80064bc <USB_WritePacket>

    ep->xfer_buff  += len;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a1a      	ldr	r2, [r3, #32]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	441a      	add	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	429a      	cmp	r2, r3
 8003802:	d809      	bhi.n	8003818 <PCD_WriteEmptyTxFifo+0xe0>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800380c:	429a      	cmp	r2, r3
 800380e:	d203      	bcs.n	8003818 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1be      	bne.n	8003796 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	429a      	cmp	r2, r3
 8003822:	d811      	bhi.n	8003848 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	2201      	movs	r2, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	43db      	mvns	r3, r3
 800383e:	6939      	ldr	r1, [r7, #16]
 8003840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003844:	4013      	ands	r3, r2
 8003846:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	333c      	adds	r3, #60	; 0x3c
 800386c:	3304      	adds	r3, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d17b      	bne.n	8003982 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d015      	beq.n	80038c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4a61      	ldr	r2, [pc, #388]	; (8003a1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	f240 80b9 	bls.w	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80b3 	beq.w	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b6:	461a      	mov	r2, r3
 80038b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038bc:	6093      	str	r3, [r2, #8]
 80038be:	e0a7      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d6:	461a      	mov	r2, r3
 80038d8:	2320      	movs	r3, #32
 80038da:	6093      	str	r3, [r2, #8]
 80038dc:	e098      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f040 8093 	bne.w	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	4a4b      	ldr	r2, [pc, #300]	; (8003a1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d90f      	bls.n	8003912 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	461a      	mov	r2, r3
 800390a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390e:	6093      	str	r3, [r2, #8]
 8003910:	e07e      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	0159      	lsls	r1, r3, #5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	440b      	add	r3, r1
 8003934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393e:	1ad2      	subs	r2, r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d114      	bne.n	8003974 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800395c:	461a      	mov	r2, r3
 800395e:	2101      	movs	r1, #1
 8003960:	f003 f842 	bl	80069e8 <USB_EP0_OutStart>
 8003964:	e006      	b.n	8003974 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	441a      	add	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f005 fafa 	bl	8008f74 <HAL_PCD_DataOutStageCallback>
 8003980:	e046      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d124      	bne.n	80039d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a0:	461a      	mov	r2, r3
 80039a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a6:	6093      	str	r3, [r2, #8]
 80039a8:	e032      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	2320      	movs	r3, #32
 80039c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f005 fad1 	bl	8008f74 <HAL_PCD_DataOutStageCallback>
 80039d2:	e01d      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d114      	bne.n	8003a04 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039fc:	461a      	mov	r2, r3
 80039fe:	2100      	movs	r1, #0
 8003a00:	f002 fff2 	bl	80069e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f005 fab2 	bl	8008f74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	4f54300a 	.word	0x4f54300a
 8003a20:	4f54310a 	.word	0x4f54310a

08003a24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	333c      	adds	r3, #60	; 0x3c
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a15      	ldr	r2, [pc, #84]	; (8003aac <PCD_EP_OutSetupPacket_int+0x88>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d90e      	bls.n	8003a78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d009      	beq.n	8003a78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a70:	461a      	mov	r2, r3
 8003a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f005 fa69 	bl	8008f50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <PCD_EP_OutSetupPacket_int+0x88>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d90c      	bls.n	8003aa0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d108      	bne.n	8003aa0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	f002 ffa4 	bl	80069e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	4f54300a 	.word	0x4f54300a

08003ab0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
 8003abc:	4613      	mov	r3, r2
 8003abe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d107      	bne.n	8003ade <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ace:	883b      	ldrh	r3, [r7, #0]
 8003ad0:	0419      	lsls	r1, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
 8003adc:	e028      	b.n	8003b30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4413      	add	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	e00d      	b.n	8003b0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	3340      	adds	r3, #64	; 0x40
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4413      	add	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d3ec      	bcc.n	8003af2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b18:	883b      	ldrh	r3, [r7, #0]
 8003b1a:	0418      	lsls	r0, r3, #16
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	4302      	orrs	r2, r0
 8003b28:	3340      	adds	r3, #64	; 0x40
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e267      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d075      	beq.n	8003c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b96:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d00c      	beq.n	8003bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba2:	4b85      	ldr	r3, [pc, #532]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d112      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bae:	4b82      	ldr	r3, [pc, #520]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bba:	d10b      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	4b7e      	ldr	r3, [pc, #504]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d05b      	beq.n	8003c80 <HAL_RCC_OscConfig+0x108>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d157      	bne.n	8003c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e242      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bdc:	d106      	bne.n	8003bec <HAL_RCC_OscConfig+0x74>
 8003bde:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a75      	ldr	r2, [pc, #468]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e01d      	b.n	8003c28 <HAL_RCC_OscConfig+0xb0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x98>
 8003bf6:	4b70      	ldr	r3, [pc, #448]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6f      	ldr	r2, [pc, #444]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b6d      	ldr	r3, [pc, #436]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6c      	ldr	r2, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0xb0>
 8003c10:	4b69      	ldr	r3, [pc, #420]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a68      	ldr	r2, [pc, #416]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b66      	ldr	r3, [pc, #408]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a65      	ldr	r2, [pc, #404]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fd ffba 	bl	8001ba8 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fd ffb6 	bl	8001ba8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e207      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b5b      	ldr	r3, [pc, #364]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0xc0>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fd ffa6 	bl	8001ba8 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fd ffa2 	bl	8001ba8 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e1f3      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0xe8>
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d063      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_RCC_OscConfig+0x152>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e1c7      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4937      	ldr	r1, [pc, #220]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	e03a      	b.n	8003d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <HAL_RCC_OscConfig+0x244>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fd ff5b 	bl	8001ba8 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf6:	f7fd ff57 	bl	8001ba8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e1a8      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4925      	ldr	r1, [pc, #148]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]
 8003d28:	e015      	b.n	8003d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <HAL_RCC_OscConfig+0x244>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fd ff3a 	bl	8001ba8 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d38:	f7fd ff36 	bl	8001ba8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e187      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d036      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <HAL_RCC_OscConfig+0x248>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd ff1a 	bl	8001ba8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d78:	f7fd ff16 	bl	8001ba8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e167      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x200>
 8003d96:	e01b      	b.n	8003dd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_OscConfig+0x248>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9e:	f7fd ff03 	bl	8001ba8 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da4:	e00e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da6:	f7fd feff 	bl	8001ba8 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d907      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e150      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	42470000 	.word	0x42470000
 8003dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	4b88      	ldr	r3, [pc, #544]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ea      	bne.n	8003da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8097 	beq.w	8003f0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de2:	4b81      	ldr	r3, [pc, #516]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	4b7d      	ldr	r3, [pc, #500]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a7c      	ldr	r2, [pc, #496]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b7a      	ldr	r3, [pc, #488]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b77      	ldr	r3, [pc, #476]	; (8003fec <HAL_RCC_OscConfig+0x474>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	4b74      	ldr	r3, [pc, #464]	; (8003fec <HAL_RCC_OscConfig+0x474>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a73      	ldr	r2, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0x474>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fd febf 	bl	8001ba8 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fd febb 	bl	8001ba8 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e10c      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <HAL_RCC_OscConfig+0x474>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x2ea>
 8003e54:	4b64      	ldr	r3, [pc, #400]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a63      	ldr	r2, [pc, #396]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x324>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x30c>
 8003e6a:	4b5f      	ldr	r3, [pc, #380]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a5e      	ldr	r2, [pc, #376]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	4b5c      	ldr	r3, [pc, #368]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a5b      	ldr	r2, [pc, #364]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0x324>
 8003e84:	4b58      	ldr	r3, [pc, #352]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a57      	ldr	r2, [pc, #348]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	4b55      	ldr	r3, [pc, #340]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a54      	ldr	r2, [pc, #336]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e96:	f023 0304 	bic.w	r3, r3, #4
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fd fe80 	bl	8001ba8 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eac:	f7fd fe7c 	bl	8001ba8 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e0cb      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	4b49      	ldr	r3, [pc, #292]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ee      	beq.n	8003eac <HAL_RCC_OscConfig+0x334>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed0:	f7fd fe6a 	bl	8001ba8 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fd fe66 	bl	8001ba8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0b5      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eee:	4b3e      	ldr	r3, [pc, #248]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ee      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f00:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80a1 	beq.w	8004058 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f16:	4b34      	ldr	r3, [pc, #208]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d05c      	beq.n	8003fdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d141      	bne.n	8003fae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b31      	ldr	r3, [pc, #196]	; (8003ff0 <HAL_RCC_OscConfig+0x478>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd fe3a 	bl	8001ba8 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fd fe36 	bl	8001ba8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e087      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	491b      	ldr	r1, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_RCC_OscConfig+0x478>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fd fe0f 	bl	8001ba8 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7fd fe0b 	bl	8001ba8 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e05c      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x416>
 8003fac:	e054      	b.n	8004058 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <HAL_RCC_OscConfig+0x478>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd fdf8 	bl	8001ba8 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fd fdf4 	bl	8001ba8 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e045      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x444>
 8003fda:	e03d      	b.n	8004058 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e038      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x4ec>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d028      	beq.n	8004054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d121      	bne.n	8004054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d11a      	bne.n	8004054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800402a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402c:	4293      	cmp	r3, r2
 800402e:	d111      	bne.n	8004054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	3b01      	subs	r3, #1
 800403e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d107      	bne.n	8004054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800

08004068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0cc      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b68      	ldr	r3, [pc, #416]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d90c      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b65      	ldr	r3, [pc, #404]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b63      	ldr	r3, [pc, #396]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0b8      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d020      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040bc:	4b59      	ldr	r3, [pc, #356]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a58      	ldr	r2, [pc, #352]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d4:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a52      	ldr	r2, [pc, #328]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e0:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	494d      	ldr	r1, [pc, #308]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d044      	beq.n	8004188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d119      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e07f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d003      	beq.n	8004126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	2b03      	cmp	r3, #3
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	4b3f      	ldr	r3, [pc, #252]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e06f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e067      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4934      	ldr	r1, [pc, #208]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004158:	f7fd fd26 	bl	8001ba8 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fd fd22 	bl	8001ba8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e04f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b25      	ldr	r3, [pc, #148]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d20c      	bcs.n	80041b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b22      	ldr	r3, [pc, #136]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e032      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041bc:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4916      	ldr	r1, [pc, #88]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	490e      	ldr	r1, [pc, #56]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ee:	f000 f821 	bl	8004234 <HAL_RCC_GetSysClockFreq>
 80041f2:	4602      	mov	r2, r0
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	490a      	ldr	r1, [pc, #40]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	5ccb      	ldrb	r3, [r1, r3]
 8004202:	fa22 f303 	lsr.w	r3, r2, r3
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd fc86 	bl	8001b20 <HAL_InitTick>

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023c00 	.word	0x40023c00
 8004224:	40023800 	.word	0x40023800
 8004228:	08009980 	.word	0x08009980
 800422c:	20000000 	.word	0x20000000
 8004230:	20000014 	.word	0x20000014

08004234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004238:	b090      	sub	sp, #64	; 0x40
 800423a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
 8004240:	2300      	movs	r3, #0
 8004242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004244:	2300      	movs	r3, #0
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b08      	cmp	r3, #8
 8004256:	d00d      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x40>
 8004258:	2b08      	cmp	r3, #8
 800425a:	f200 80a1 	bhi.w	80043a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x34>
 8004262:	2b04      	cmp	r3, #4
 8004264:	d003      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x3a>
 8004266:	e09b      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800426a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800426c:	e09b      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426e:	4b53      	ldr	r3, [pc, #332]	; (80043bc <HAL_RCC_GetSysClockFreq+0x188>)
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004272:	e098      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004274:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800427c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800427e:	4b4d      	ldr	r3, [pc, #308]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d028      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428a:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	099b      	lsrs	r3, r3, #6
 8004290:	2200      	movs	r2, #0
 8004292:	623b      	str	r3, [r7, #32]
 8004294:	627a      	str	r2, [r7, #36]	; 0x24
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800429c:	2100      	movs	r1, #0
 800429e:	4b47      	ldr	r3, [pc, #284]	; (80043bc <HAL_RCC_GetSysClockFreq+0x188>)
 80042a0:	fb03 f201 	mul.w	r2, r3, r1
 80042a4:	2300      	movs	r3, #0
 80042a6:	fb00 f303 	mul.w	r3, r0, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	4a43      	ldr	r2, [pc, #268]	; (80043bc <HAL_RCC_GetSysClockFreq+0x188>)
 80042ae:	fba0 1202 	umull	r1, r2, r0, r2
 80042b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042b4:	460a      	mov	r2, r1
 80042b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80042b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ba:	4413      	add	r3, r2
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c0:	2200      	movs	r2, #0
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	61fa      	str	r2, [r7, #28]
 80042c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042ce:	f7fc fb79 	bl	80009c4 <__aeabi_uldivmod>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4613      	mov	r3, r2
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042da:	e053      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042dc:	4b35      	ldr	r3, [pc, #212]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	099b      	lsrs	r3, r3, #6
 80042e2:	2200      	movs	r2, #0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	617a      	str	r2, [r7, #20]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042ee:	f04f 0b00 	mov.w	fp, #0
 80042f2:	4652      	mov	r2, sl
 80042f4:	465b      	mov	r3, fp
 80042f6:	f04f 0000 	mov.w	r0, #0
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	0159      	lsls	r1, r3, #5
 8004300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004304:	0150      	lsls	r0, r2, #5
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	ebb2 080a 	subs.w	r8, r2, sl
 800430e:	eb63 090b 	sbc.w	r9, r3, fp
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800431e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004322:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004326:	ebb2 0408 	subs.w	r4, r2, r8
 800432a:	eb63 0509 	sbc.w	r5, r3, r9
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	00eb      	lsls	r3, r5, #3
 8004338:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433c:	00e2      	lsls	r2, r4, #3
 800433e:	4614      	mov	r4, r2
 8004340:	461d      	mov	r5, r3
 8004342:	eb14 030a 	adds.w	r3, r4, sl
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	eb45 030b 	adc.w	r3, r5, fp
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435a:	4629      	mov	r1, r5
 800435c:	028b      	lsls	r3, r1, #10
 800435e:	4621      	mov	r1, r4
 8004360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004364:	4621      	mov	r1, r4
 8004366:	028a      	lsls	r2, r1, #10
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436e:	2200      	movs	r2, #0
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	60fa      	str	r2, [r7, #12]
 8004374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004378:	f7fc fb24 	bl	80009c4 <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4613      	mov	r3, r2
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	3301      	adds	r3, #1
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80043a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3740      	adds	r7, #64	; 0x40
 80043ac:	46bd      	mov	sp, r7
 80043ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800
 80043b8:	00f42400 	.word	0x00f42400
 80043bc:	017d7840 	.word	0x017d7840

080043c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c6:	681b      	ldr	r3, [r3, #0]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000000 	.word	0x20000000

080043d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043dc:	f7ff fff0 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	0a9b      	lsrs	r3, r3, #10
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40023800 	.word	0x40023800
 80043fc:	08009990 	.word	0x08009990

08004400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004404:	f7ff ffdc 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0b5b      	lsrs	r3, r3, #13
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	08009990 	.word	0x08009990

08004428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e041      	b.n	80044be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fc fe98 	bl	8001184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f000 f9a0 	bl	80047ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_TIM_PWM_Start+0x24>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e022      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d109      	bne.n	8004506 <HAL_TIM_PWM_Start+0x3e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e015      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d109      	bne.n	8004520 <HAL_TIM_PWM_Start+0x58>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e008      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e068      	b.n	800460c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_TIM_PWM_Start+0x82>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004548:	e013      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d104      	bne.n	800455a <HAL_TIM_PWM_Start+0x92>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004558:	e00b      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d104      	bne.n	800456a <HAL_TIM_PWM_Start+0xa2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004568:	e003      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2201      	movs	r2, #1
 8004578:	6839      	ldr	r1, [r7, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fb22 	bl	8004bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a23      	ldr	r2, [pc, #140]	; (8004614 <HAL_TIM_PWM_Start+0x14c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d107      	bne.n	800459a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004598:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <HAL_TIM_PWM_Start+0x14c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d018      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ac:	d013      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a19      	ldr	r2, [pc, #100]	; (8004618 <HAL_TIM_PWM_Start+0x150>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a17      	ldr	r2, [pc, #92]	; (800461c <HAL_TIM_PWM_Start+0x154>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a16      	ldr	r2, [pc, #88]	; (8004620 <HAL_TIM_PWM_Start+0x158>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <HAL_TIM_PWM_Start+0x15c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d111      	bne.n	80045fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d010      	beq.n	800460a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	e007      	b.n	800460a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40010000 	.word	0x40010000
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40014000 	.word	0x40014000

08004628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004642:	2302      	movs	r3, #2
 8004644:	e0ae      	b.n	80047a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b0c      	cmp	r3, #12
 8004652:	f200 809f 	bhi.w	8004794 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004656:	a201      	add	r2, pc, #4	; (adr r2, 800465c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004691 	.word	0x08004691
 8004660:	08004795 	.word	0x08004795
 8004664:	08004795 	.word	0x08004795
 8004668:	08004795 	.word	0x08004795
 800466c:	080046d1 	.word	0x080046d1
 8004670:	08004795 	.word	0x08004795
 8004674:	08004795 	.word	0x08004795
 8004678:	08004795 	.word	0x08004795
 800467c:	08004713 	.word	0x08004713
 8004680:	08004795 	.word	0x08004795
 8004684:	08004795 	.word	0x08004795
 8004688:	08004795 	.word	0x08004795
 800468c:	08004753 	.word	0x08004753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f908 	bl	80048ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0208 	orr.w	r2, r2, #8
 80046aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0204 	bic.w	r2, r2, #4
 80046ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6999      	ldr	r1, [r3, #24]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	619a      	str	r2, [r3, #24]
      break;
 80046ce:	e064      	b.n	800479a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f94e 	bl	8004978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6999      	ldr	r1, [r3, #24]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	021a      	lsls	r2, r3, #8
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	619a      	str	r2, [r3, #24]
      break;
 8004710:	e043      	b.n	800479a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	4618      	mov	r0, r3
 800471a:	f000 f999 	bl	8004a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0208 	orr.w	r2, r2, #8
 800472c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0204 	bic.w	r2, r2, #4
 800473c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69d9      	ldr	r1, [r3, #28]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	61da      	str	r2, [r3, #28]
      break;
 8004750:	e023      	b.n	800479a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 f9e3 	bl	8004b24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800476c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69d9      	ldr	r1, [r3, #28]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	021a      	lsls	r2, r3, #8
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	61da      	str	r2, [r3, #28]
      break;
 8004792:	e002      	b.n	800479a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
      break;
 8004798:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a34      	ldr	r2, [pc, #208]	; (8004890 <TIM_Base_SetConfig+0xe4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00f      	beq.n	80047e4 <TIM_Base_SetConfig+0x38>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ca:	d00b      	beq.n	80047e4 <TIM_Base_SetConfig+0x38>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a31      	ldr	r2, [pc, #196]	; (8004894 <TIM_Base_SetConfig+0xe8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d007      	beq.n	80047e4 <TIM_Base_SetConfig+0x38>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a30      	ldr	r2, [pc, #192]	; (8004898 <TIM_Base_SetConfig+0xec>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d003      	beq.n	80047e4 <TIM_Base_SetConfig+0x38>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a2f      	ldr	r2, [pc, #188]	; (800489c <TIM_Base_SetConfig+0xf0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d108      	bne.n	80047f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a25      	ldr	r2, [pc, #148]	; (8004890 <TIM_Base_SetConfig+0xe4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01b      	beq.n	8004836 <TIM_Base_SetConfig+0x8a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004804:	d017      	beq.n	8004836 <TIM_Base_SetConfig+0x8a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a22      	ldr	r2, [pc, #136]	; (8004894 <TIM_Base_SetConfig+0xe8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <TIM_Base_SetConfig+0x8a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <TIM_Base_SetConfig+0xec>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00f      	beq.n	8004836 <TIM_Base_SetConfig+0x8a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a20      	ldr	r2, [pc, #128]	; (800489c <TIM_Base_SetConfig+0xf0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00b      	beq.n	8004836 <TIM_Base_SetConfig+0x8a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <TIM_Base_SetConfig+0xf4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d007      	beq.n	8004836 <TIM_Base_SetConfig+0x8a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <TIM_Base_SetConfig+0xf8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_Base_SetConfig+0x8a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <TIM_Base_SetConfig+0xfc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a08      	ldr	r2, [pc, #32]	; (8004890 <TIM_Base_SetConfig+0xe4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d103      	bne.n	800487c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	615a      	str	r2, [r3, #20]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40014400 	.word	0x40014400
 80048a8:	40014800 	.word	0x40014800

080048ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f023 0201 	bic.w	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f023 0302 	bic.w	r3, r3, #2
 80048f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a1c      	ldr	r2, [pc, #112]	; (8004974 <TIM_OC1_SetConfig+0xc8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d10c      	bne.n	8004922 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0308 	bic.w	r3, r3, #8
 800490e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a13      	ldr	r2, [pc, #76]	; (8004974 <TIM_OC1_SetConfig+0xc8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d111      	bne.n	800494e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40010000 	.word	0x40010000

08004978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0210 	bic.w	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0320 	bic.w	r3, r3, #32
 80049c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a1e      	ldr	r2, [pc, #120]	; (8004a4c <TIM_OC2_SetConfig+0xd4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d10d      	bne.n	80049f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <TIM_OC2_SetConfig+0xd4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d113      	bne.n	8004a24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000

08004a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0303 	bic.w	r3, r3, #3
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <TIM_OC3_SetConfig+0xd0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d10d      	bne.n	8004aca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a14      	ldr	r2, [pc, #80]	; (8004b20 <TIM_OC3_SetConfig+0xd0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d113      	bne.n	8004afa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	621a      	str	r2, [r3, #32]
}
 8004b14:	bf00      	nop
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40010000 	.word	0x40010000

08004b24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	031b      	lsls	r3, r3, #12
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <TIM_OC4_SetConfig+0x9c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d109      	bne.n	8004b98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	019b      	lsls	r3, r3, #6
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	621a      	str	r2, [r3, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000

08004bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	401a      	ands	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a1a      	ldr	r2, [r3, #32]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e050      	b.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c74:	d013      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40014000 	.word	0x40014000

08004cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e03f      	b.n	8004d7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fc fab2 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	; 0x24
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f829 	bl	8004d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b0c0      	sub	sp, #256	; 0x100
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	68d9      	ldr	r1, [r3, #12]
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	ea40 0301 	orr.w	r3, r0, r1
 8004db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004de0:	f021 010c 	bic.w	r1, r1, #12
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dee:	430b      	orrs	r3, r1
 8004df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e02:	6999      	ldr	r1, [r3, #24]
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	ea40 0301 	orr.w	r3, r0, r1
 8004e0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b8f      	ldr	r3, [pc, #572]	; (8005054 <UART_SetConfig+0x2cc>)
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d005      	beq.n	8004e28 <UART_SetConfig+0xa0>
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b8d      	ldr	r3, [pc, #564]	; (8005058 <UART_SetConfig+0x2d0>)
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d104      	bne.n	8004e32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e28:	f7ff faea 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 8004e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e30:	e003      	b.n	8004e3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e32:	f7ff fad1 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8004e36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e44:	f040 810c 	bne.w	8005060 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e62:	415b      	adcs	r3, r3
 8004e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	eb12 0801 	adds.w	r8, r2, r1
 8004e70:	4629      	mov	r1, r5
 8004e72:	eb43 0901 	adc.w	r9, r3, r1
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e8a:	4690      	mov	r8, r2
 8004e8c:	4699      	mov	r9, r3
 8004e8e:	4623      	mov	r3, r4
 8004e90:	eb18 0303 	adds.w	r3, r8, r3
 8004e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e98:	462b      	mov	r3, r5
 8004e9a:	eb49 0303 	adc.w	r3, r9, r3
 8004e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	18db      	adds	r3, r3, r3
 8004eba:	653b      	str	r3, [r7, #80]	; 0x50
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	eb42 0303 	adc.w	r3, r2, r3
 8004ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ec8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ecc:	f7fb fd7a 	bl	80009c4 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4b61      	ldr	r3, [pc, #388]	; (800505c <UART_SetConfig+0x2d4>)
 8004ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	011c      	lsls	r4, r3, #4
 8004ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ee8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004eec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	1891      	adds	r1, r2, r2
 8004ef6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ef8:	415b      	adcs	r3, r3
 8004efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f00:	4641      	mov	r1, r8
 8004f02:	eb12 0a01 	adds.w	sl, r2, r1
 8004f06:	4649      	mov	r1, r9
 8004f08:	eb43 0b01 	adc.w	fp, r3, r1
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f20:	4692      	mov	sl, r2
 8004f22:	469b      	mov	fp, r3
 8004f24:	4643      	mov	r3, r8
 8004f26:	eb1a 0303 	adds.w	r3, sl, r3
 8004f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	eb4b 0303 	adc.w	r3, fp, r3
 8004f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	18db      	adds	r3, r3, r3
 8004f50:	643b      	str	r3, [r7, #64]	; 0x40
 8004f52:	4613      	mov	r3, r2
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	647b      	str	r3, [r7, #68]	; 0x44
 8004f5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f62:	f7fb fd2f 	bl	80009c4 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4b3b      	ldr	r3, [pc, #236]	; (800505c <UART_SetConfig+0x2d4>)
 8004f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2264      	movs	r2, #100	; 0x64
 8004f76:	fb02 f303 	mul.w	r3, r2, r3
 8004f7a:	1acb      	subs	r3, r1, r3
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f82:	4b36      	ldr	r3, [pc, #216]	; (800505c <UART_SetConfig+0x2d4>)
 8004f84:	fba3 2302 	umull	r2, r3, r3, r2
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f90:	441c      	add	r4, r3
 8004f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	1891      	adds	r1, r2, r2
 8004faa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fac:	415b      	adcs	r3, r3
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	1851      	adds	r1, r2, r1
 8004fb8:	6339      	str	r1, [r7, #48]	; 0x30
 8004fba:	4649      	mov	r1, r9
 8004fbc:	414b      	adcs	r3, r1
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fcc:	4659      	mov	r1, fp
 8004fce:	00cb      	lsls	r3, r1, #3
 8004fd0:	4651      	mov	r1, sl
 8004fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd6:	4651      	mov	r1, sl
 8004fd8:	00ca      	lsls	r2, r1, #3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	189b      	adds	r3, r3, r2
 8004fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fe8:	464b      	mov	r3, r9
 8004fea:	460a      	mov	r2, r1
 8004fec:	eb42 0303 	adc.w	r3, r2, r3
 8004ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005000:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005008:	460b      	mov	r3, r1
 800500a:	18db      	adds	r3, r3, r3
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
 800500e:	4613      	mov	r3, r2
 8005010:	eb42 0303 	adc.w	r3, r2, r3
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800501a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800501e:	f7fb fcd1 	bl	80009c4 <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4b0d      	ldr	r3, [pc, #52]	; (800505c <UART_SetConfig+0x2d4>)
 8005028:	fba3 1302 	umull	r1, r3, r3, r2
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	2164      	movs	r1, #100	; 0x64
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	3332      	adds	r3, #50	; 0x32
 800503a:	4a08      	ldr	r2, [pc, #32]	; (800505c <UART_SetConfig+0x2d4>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	f003 0207 	and.w	r2, r3, #7
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4422      	add	r2, r4
 800504e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005050:	e106      	b.n	8005260 <UART_SetConfig+0x4d8>
 8005052:	bf00      	nop
 8005054:	40011000 	.word	0x40011000
 8005058:	40011400 	.word	0x40011400
 800505c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005064:	2200      	movs	r2, #0
 8005066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800506a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800506e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005072:	4642      	mov	r2, r8
 8005074:	464b      	mov	r3, r9
 8005076:	1891      	adds	r1, r2, r2
 8005078:	6239      	str	r1, [r7, #32]
 800507a:	415b      	adcs	r3, r3
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
 800507e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005082:	4641      	mov	r1, r8
 8005084:	1854      	adds	r4, r2, r1
 8005086:	4649      	mov	r1, r9
 8005088:	eb43 0501 	adc.w	r5, r3, r1
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	00eb      	lsls	r3, r5, #3
 8005096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800509a:	00e2      	lsls	r2, r4, #3
 800509c:	4614      	mov	r4, r2
 800509e:	461d      	mov	r5, r3
 80050a0:	4643      	mov	r3, r8
 80050a2:	18e3      	adds	r3, r4, r3
 80050a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050a8:	464b      	mov	r3, r9
 80050aa:	eb45 0303 	adc.w	r3, r5, r3
 80050ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050ce:	4629      	mov	r1, r5
 80050d0:	008b      	lsls	r3, r1, #2
 80050d2:	4621      	mov	r1, r4
 80050d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d8:	4621      	mov	r1, r4
 80050da:	008a      	lsls	r2, r1, #2
 80050dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050e0:	f7fb fc70 	bl	80009c4 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4b60      	ldr	r3, [pc, #384]	; (800526c <UART_SetConfig+0x4e4>)
 80050ea:	fba3 2302 	umull	r2, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	011c      	lsls	r4, r3, #4
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	1891      	adds	r1, r2, r2
 800510a:	61b9      	str	r1, [r7, #24]
 800510c:	415b      	adcs	r3, r3
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005114:	4641      	mov	r1, r8
 8005116:	1851      	adds	r1, r2, r1
 8005118:	6139      	str	r1, [r7, #16]
 800511a:	4649      	mov	r1, r9
 800511c:	414b      	adcs	r3, r1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800512c:	4659      	mov	r1, fp
 800512e:	00cb      	lsls	r3, r1, #3
 8005130:	4651      	mov	r1, sl
 8005132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005136:	4651      	mov	r1, sl
 8005138:	00ca      	lsls	r2, r1, #3
 800513a:	4610      	mov	r0, r2
 800513c:	4619      	mov	r1, r3
 800513e:	4603      	mov	r3, r0
 8005140:	4642      	mov	r2, r8
 8005142:	189b      	adds	r3, r3, r2
 8005144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005148:	464b      	mov	r3, r9
 800514a:	460a      	mov	r2, r1
 800514c:	eb42 0303 	adc.w	r3, r2, r3
 8005150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	67bb      	str	r3, [r7, #120]	; 0x78
 800515e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800516c:	4649      	mov	r1, r9
 800516e:	008b      	lsls	r3, r1, #2
 8005170:	4641      	mov	r1, r8
 8005172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005176:	4641      	mov	r1, r8
 8005178:	008a      	lsls	r2, r1, #2
 800517a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800517e:	f7fb fc21 	bl	80009c4 <__aeabi_uldivmod>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4611      	mov	r1, r2
 8005188:	4b38      	ldr	r3, [pc, #224]	; (800526c <UART_SetConfig+0x4e4>)
 800518a:	fba3 2301 	umull	r2, r3, r3, r1
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2264      	movs	r2, #100	; 0x64
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	1acb      	subs	r3, r1, r3
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	3332      	adds	r3, #50	; 0x32
 800519c:	4a33      	ldr	r2, [pc, #204]	; (800526c <UART_SetConfig+0x4e4>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a8:	441c      	add	r4, r3
 80051aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ae:	2200      	movs	r2, #0
 80051b0:	673b      	str	r3, [r7, #112]	; 0x70
 80051b2:	677a      	str	r2, [r7, #116]	; 0x74
 80051b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051b8:	4642      	mov	r2, r8
 80051ba:	464b      	mov	r3, r9
 80051bc:	1891      	adds	r1, r2, r2
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	415b      	adcs	r3, r3
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051c8:	4641      	mov	r1, r8
 80051ca:	1851      	adds	r1, r2, r1
 80051cc:	6039      	str	r1, [r7, #0]
 80051ce:	4649      	mov	r1, r9
 80051d0:	414b      	adcs	r3, r1
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051e0:	4659      	mov	r1, fp
 80051e2:	00cb      	lsls	r3, r1, #3
 80051e4:	4651      	mov	r1, sl
 80051e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ea:	4651      	mov	r1, sl
 80051ec:	00ca      	lsls	r2, r1, #3
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	4642      	mov	r2, r8
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051fa:	464b      	mov	r3, r9
 80051fc:	460a      	mov	r2, r1
 80051fe:	eb42 0303 	adc.w	r3, r2, r3
 8005202:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	663b      	str	r3, [r7, #96]	; 0x60
 800520e:	667a      	str	r2, [r7, #100]	; 0x64
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800521c:	4649      	mov	r1, r9
 800521e:	008b      	lsls	r3, r1, #2
 8005220:	4641      	mov	r1, r8
 8005222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005226:	4641      	mov	r1, r8
 8005228:	008a      	lsls	r2, r1, #2
 800522a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800522e:	f7fb fbc9 	bl	80009c4 <__aeabi_uldivmod>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4b0d      	ldr	r3, [pc, #52]	; (800526c <UART_SetConfig+0x4e4>)
 8005238:	fba3 1302 	umull	r1, r3, r3, r2
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	2164      	movs	r1, #100	; 0x64
 8005240:	fb01 f303 	mul.w	r3, r1, r3
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	3332      	adds	r3, #50	; 0x32
 800524a:	4a08      	ldr	r2, [pc, #32]	; (800526c <UART_SetConfig+0x4e4>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	f003 020f 	and.w	r2, r3, #15
 8005256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4422      	add	r2, r4
 800525e:	609a      	str	r2, [r3, #8]
}
 8005260:	bf00      	nop
 8005262:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005266:	46bd      	mov	sp, r7
 8005268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526c:	51eb851f 	.word	0x51eb851f

08005270 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005270:	b084      	sub	sp, #16
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	f107 001c 	add.w	r0, r7, #28
 800527e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	2b01      	cmp	r3, #1
 8005286:	d122      	bne.n	80052ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800529c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d105      	bne.n	80052c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 fbee 	bl	8006aa4 <USB_CoreReset>
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]
 80052cc:	e01a      	b.n	8005304 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 fbe2 	bl	8006aa4 <USB_CoreReset>
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
 80052f6:	e005      	b.n	8005304 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	2b01      	cmp	r3, #1
 8005308:	d10b      	bne.n	8005322 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f043 0206 	orr.w	r2, r3, #6
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f043 0220 	orr.w	r2, r3, #32
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005322:	7bfb      	ldrb	r3, [r7, #15]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800532e:	b004      	add	sp, #16
 8005330:	4770      	bx	lr
	...

08005334 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	4613      	mov	r3, r2
 8005340:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d165      	bne.n	8005414 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4a41      	ldr	r2, [pc, #260]	; (8005450 <USB_SetTurnaroundTime+0x11c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d906      	bls.n	800535e <USB_SetTurnaroundTime+0x2a>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4a40      	ldr	r2, [pc, #256]	; (8005454 <USB_SetTurnaroundTime+0x120>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d202      	bcs.n	800535e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005358:	230f      	movs	r3, #15
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	e062      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4a3c      	ldr	r2, [pc, #240]	; (8005454 <USB_SetTurnaroundTime+0x120>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d306      	bcc.n	8005374 <USB_SetTurnaroundTime+0x40>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4a3b      	ldr	r2, [pc, #236]	; (8005458 <USB_SetTurnaroundTime+0x124>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d202      	bcs.n	8005374 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800536e:	230e      	movs	r3, #14
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e057      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a38      	ldr	r2, [pc, #224]	; (8005458 <USB_SetTurnaroundTime+0x124>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d306      	bcc.n	800538a <USB_SetTurnaroundTime+0x56>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4a37      	ldr	r2, [pc, #220]	; (800545c <USB_SetTurnaroundTime+0x128>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d202      	bcs.n	800538a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005384:	230d      	movs	r3, #13
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e04c      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a33      	ldr	r2, [pc, #204]	; (800545c <USB_SetTurnaroundTime+0x128>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d306      	bcc.n	80053a0 <USB_SetTurnaroundTime+0x6c>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4a32      	ldr	r2, [pc, #200]	; (8005460 <USB_SetTurnaroundTime+0x12c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d802      	bhi.n	80053a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800539a:	230c      	movs	r3, #12
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e041      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <USB_SetTurnaroundTime+0x12c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d906      	bls.n	80053b6 <USB_SetTurnaroundTime+0x82>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4a2e      	ldr	r2, [pc, #184]	; (8005464 <USB_SetTurnaroundTime+0x130>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d802      	bhi.n	80053b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053b0:	230b      	movs	r3, #11
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e036      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <USB_SetTurnaroundTime+0x130>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d906      	bls.n	80053cc <USB_SetTurnaroundTime+0x98>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4a29      	ldr	r2, [pc, #164]	; (8005468 <USB_SetTurnaroundTime+0x134>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d802      	bhi.n	80053cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053c6:	230a      	movs	r3, #10
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e02b      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a26      	ldr	r2, [pc, #152]	; (8005468 <USB_SetTurnaroundTime+0x134>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d906      	bls.n	80053e2 <USB_SetTurnaroundTime+0xae>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4a25      	ldr	r2, [pc, #148]	; (800546c <USB_SetTurnaroundTime+0x138>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d202      	bcs.n	80053e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053dc:	2309      	movs	r3, #9
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e020      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a21      	ldr	r2, [pc, #132]	; (800546c <USB_SetTurnaroundTime+0x138>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d306      	bcc.n	80053f8 <USB_SetTurnaroundTime+0xc4>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4a20      	ldr	r2, [pc, #128]	; (8005470 <USB_SetTurnaroundTime+0x13c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d802      	bhi.n	80053f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053f2:	2308      	movs	r3, #8
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e015      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <USB_SetTurnaroundTime+0x13c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d906      	bls.n	800540e <USB_SetTurnaroundTime+0xda>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a1c      	ldr	r2, [pc, #112]	; (8005474 <USB_SetTurnaroundTime+0x140>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d202      	bcs.n	800540e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005408:	2307      	movs	r3, #7
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e00a      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800540e:	2306      	movs	r3, #6
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e007      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d102      	bne.n	8005420 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800541a:	2309      	movs	r3, #9
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	e001      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005420:	2309      	movs	r3, #9
 8005422:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	029b      	lsls	r3, r3, #10
 8005438:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	00d8acbf 	.word	0x00d8acbf
 8005454:	00e4e1c0 	.word	0x00e4e1c0
 8005458:	00f42400 	.word	0x00f42400
 800545c:	01067380 	.word	0x01067380
 8005460:	011a499f 	.word	0x011a499f
 8005464:	01312cff 	.word	0x01312cff
 8005468:	014ca43f 	.word	0x014ca43f
 800546c:	016e3600 	.word	0x016e3600
 8005470:	01a6ab1f 	.word	0x01a6ab1f
 8005474:	01e84800 	.word	0x01e84800

08005478 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f043 0201 	orr.w	r2, r3, #1
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d115      	bne.n	800550a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054ea:	2001      	movs	r0, #1
 80054ec:	f7fc fb68 	bl	8001bc0 <HAL_Delay>
      ms++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 fa45 	bl	8006986 <USB_GetMode>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d01e      	beq.n	8005540 <USB_SetCurrentMode+0x84>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b31      	cmp	r3, #49	; 0x31
 8005506:	d9f0      	bls.n	80054ea <USB_SetCurrentMode+0x2e>
 8005508:	e01a      	b.n	8005540 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d115      	bne.n	800553c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800551c:	2001      	movs	r0, #1
 800551e:	f7fc fb4f 	bl	8001bc0 <HAL_Delay>
      ms++;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3301      	adds	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 fa2c 	bl	8006986 <USB_GetMode>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <USB_SetCurrentMode+0x84>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b31      	cmp	r3, #49	; 0x31
 8005538:	d9f0      	bls.n	800551c <USB_SetCurrentMode+0x60>
 800553a:	e001      	b.n	8005540 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e005      	b.n	800554c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b32      	cmp	r3, #50	; 0x32
 8005544:	d101      	bne.n	800554a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005554:	b084      	sub	sp, #16
 8005556:	b580      	push	{r7, lr}
 8005558:	b086      	sub	sp, #24
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e009      	b.n	8005588 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	3340      	adds	r3, #64	; 0x40
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	2200      	movs	r2, #0
 8005580:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	3301      	adds	r3, #1
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b0e      	cmp	r3, #14
 800558c:	d9f2      	bls.n	8005574 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800558e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11c      	bne.n	80055ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055a2:	f043 0302 	orr.w	r3, r3, #2
 80055a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
 80055cc:	e00b      	b.n	80055e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055ec:	461a      	mov	r2, r3
 80055ee:	2300      	movs	r3, #0
 80055f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f8:	4619      	mov	r1, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005600:	461a      	mov	r2, r3
 8005602:	680b      	ldr	r3, [r1, #0]
 8005604:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	2b01      	cmp	r3, #1
 800560a:	d10c      	bne.n	8005626 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005612:	2100      	movs	r1, #0
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f965 	bl	80058e4 <USB_SetDevSpeed>
 800561a:	e008      	b.n	800562e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800561c:	2101      	movs	r1, #1
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f960 	bl	80058e4 <USB_SetDevSpeed>
 8005624:	e003      	b.n	800562e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005626:	2103      	movs	r1, #3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f95b 	bl	80058e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800562e:	2110      	movs	r1, #16
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f8f3 	bl	800581c <USB_FlushTxFifo>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f91f 	bl	8005884 <USB_FlushRxFifo>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005656:	461a      	mov	r2, r3
 8005658:	2300      	movs	r3, #0
 800565a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	461a      	mov	r2, r3
 8005664:	2300      	movs	r3, #0
 8005666:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	461a      	mov	r2, r3
 8005670:	2300      	movs	r3, #0
 8005672:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	e043      	b.n	8005702 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800568c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005690:	d118      	bne.n	80056c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	461a      	mov	r2, r3
 80056a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e013      	b.n	80056d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	461a      	mov	r2, r3
 80056bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e008      	b.n	80056d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d0:	461a      	mov	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f4:	461a      	mov	r2, r3
 80056f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	3301      	adds	r3, #1
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	d3b7      	bcc.n	800567a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800570a:	2300      	movs	r3, #0
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	e043      	b.n	8005798 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005726:	d118      	bne.n	800575a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573a:	461a      	mov	r2, r3
 800573c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	e013      	b.n	800576c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	461a      	mov	r2, r3
 8005752:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e008      	b.n	800576c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005766:	461a      	mov	r2, r3
 8005768:	2300      	movs	r3, #0
 800576a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578a:	461a      	mov	r2, r3
 800578c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005790:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	3301      	adds	r3, #1
 8005796:	613b      	str	r3, [r7, #16]
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	429a      	cmp	r2, r3
 800579e:	d3b7      	bcc.n	8005710 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f043 0210 	orr.w	r2, r3, #16
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699a      	ldr	r2, [r3, #24]
 80057d8:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <USB_DevInit+0x2c4>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	f043 0208 	orr.w	r2, r3, #8
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d107      	bne.n	8005808 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005800:	f043 0304 	orr.w	r3, r3, #4
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005814:	b004      	add	sp, #16
 8005816:	4770      	bx	lr
 8005818:	803c3800 	.word	0x803c3800

0800581c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3301      	adds	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a13      	ldr	r2, [pc, #76]	; (8005880 <USB_FlushTxFifo+0x64>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d901      	bls.n	800583c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e01b      	b.n	8005874 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	daf2      	bge.n	800582a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	019b      	lsls	r3, r3, #6
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4a08      	ldr	r2, [pc, #32]	; (8005880 <USB_FlushTxFifo+0x64>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e006      	b.n	8005874 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b20      	cmp	r3, #32
 8005870:	d0f0      	beq.n	8005854 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	00030d40 	.word	0x00030d40

08005884 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <USB_FlushRxFifo+0x5c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e018      	b.n	80058d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	daf2      	bge.n	8005890 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2210      	movs	r2, #16
 80058b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3301      	adds	r3, #1
 80058b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4a08      	ldr	r2, [pc, #32]	; (80058e0 <USB_FlushRxFifo+0x5c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e006      	b.n	80058d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	2b10      	cmp	r3, #16
 80058d0:	d0f0      	beq.n	80058b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	00030d40 	.word	0x00030d40

080058e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005904:	4313      	orrs	r3, r2
 8005906:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005916:	b480      	push	{r7}
 8005918:	b087      	sub	sp, #28
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0306 	and.w	r3, r3, #6
 800592e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d102      	bne.n	800593c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005936:	2300      	movs	r3, #0
 8005938:	75fb      	strb	r3, [r7, #23]
 800593a:	e00a      	b.n	8005952 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d002      	beq.n	8005948 <USB_GetDevSpeed+0x32>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b06      	cmp	r3, #6
 8005946:	d102      	bne.n	800594e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005948:	2302      	movs	r3, #2
 800594a:	75fb      	strb	r3, [r7, #23]
 800594c:	e001      	b.n	8005952 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800594e:	230f      	movs	r3, #15
 8005950:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
}
 8005954:	4618      	mov	r0, r3
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d13a      	bne.n	80059f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	2101      	movs	r1, #1
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	b29b      	uxth	r3, r3
 8005994:	68f9      	ldr	r1, [r7, #12]
 8005996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599a:	4313      	orrs	r3, r2
 800599c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d155      	bne.n	8005a60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	791b      	ldrb	r3, [r3, #4]
 80059ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	059b      	lsls	r3, r3, #22
 80059d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059d8:	4313      	orrs	r3, r2
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	0151      	lsls	r1, r2, #5
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	440a      	add	r2, r1
 80059e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e036      	b.n	8005a60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	2101      	movs	r1, #1
 8005a04:	fa01 f303 	lsl.w	r3, r1, r3
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	68f9      	ldr	r1, [r7, #12]
 8005a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d11a      	bne.n	8005a60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	791b      	ldrb	r3, [r3, #4]
 8005a44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a46:	430b      	orrs	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d161      	bne.n	8005b50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa2:	d11f      	bne.n	8005ae4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005abe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ac2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	2101      	movs	r1, #1
 8005af6:	fa01 f303 	lsl.w	r3, r1, r3
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	43db      	mvns	r3, r3
 8005afe:	68f9      	ldr	r1, [r7, #12]
 8005b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b04:	4013      	ands	r3, r2
 8005b06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	2101      	movs	r1, #1
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	0159      	lsls	r1, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	440b      	add	r3, r1
 8005b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b46:	4619      	mov	r1, r3
 8005b48:	4b35      	ldr	r3, [pc, #212]	; (8005c20 <USB_DeactivateEndpoint+0x1b0>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]
 8005b4e:	e060      	b.n	8005c12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b66:	d11f      	bne.n	8005ba8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2101      	movs	r1, #1
 8005bba:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc8:	4013      	ands	r3, r2
 8005bca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	2101      	movs	r1, #1
 8005bde:	fa01 f303 	lsl.w	r3, r1, r3
 8005be2:	041b      	lsls	r3, r3, #16
 8005be4:	43db      	mvns	r3, r3
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bec:	4013      	ands	r3, r2
 8005bee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	0159      	lsls	r1, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	440b      	add	r3, r1
 8005c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <USB_DeactivateEndpoint+0x1b4>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	ec337800 	.word	0xec337800
 8005c24:	eff37800 	.word	0xeff37800

08005c28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	f040 815c 	bne.w	8005f02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d132      	bne.n	8005cb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb0:	0cdb      	lsrs	r3, r3, #19
 8005cb2:	04db      	lsls	r3, r3, #19
 8005cb4:	6113      	str	r3, [r2, #16]
 8005cb6:	e074      	b.n	8005da2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd2:	0cdb      	lsrs	r3, r3, #19
 8005cd4:	04db      	lsls	r3, r3, #19
 8005cd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6999      	ldr	r1, [r3, #24]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	440b      	add	r3, r1
 8005d14:	1e59      	subs	r1, r3, #1
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d1e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d20:	4b9d      	ldr	r3, [pc, #628]	; (8005f98 <USB_EPStartXfer+0x370>)
 8005d22:	400b      	ands	r3, r1
 8005d24:	69b9      	ldr	r1, [r7, #24]
 8005d26:	0148      	lsls	r0, r1, #5
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	4401      	add	r1, r0
 8005d2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d30:	4313      	orrs	r3, r2
 8005d32:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d4a:	69b9      	ldr	r1, [r7, #24]
 8005d4c:	0148      	lsls	r0, r1, #5
 8005d4e:	69f9      	ldr	r1, [r7, #28]
 8005d50:	4401      	add	r1, r0
 8005d52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d56:	4313      	orrs	r3, r2
 8005d58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	791b      	ldrb	r3, [r3, #4]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d11f      	bne.n	8005da2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005da0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d14b      	bne.n	8005e40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	791b      	ldrb	r3, [r3, #4]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d128      	bne.n	8005e1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d110      	bne.n	8005dfe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	e00f      	b.n	8005e1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e133      	b.n	80060a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	791b      	ldrb	r3, [r3, #4]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d015      	beq.n	8005e94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 811b 	beq.w	80060a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	69f9      	ldr	r1, [r7, #28]
 8005e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	634b      	str	r3, [r1, #52]	; 0x34
 8005e92:	e109      	b.n	80060a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d110      	bne.n	8005ec6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e00f      	b.n	8005ee6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6919      	ldr	r1, [r3, #16]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	b298      	uxth	r0, r3
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4603      	mov	r3, r0
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fade 	bl	80064bc <USB_WritePacket>
 8005f00:	e0d2      	b.n	80060a8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1c:	0cdb      	lsrs	r3, r3, #19
 8005f1e:	04db      	lsls	r3, r3, #19
 8005f20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d126      	bne.n	8005f9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f64:	69b9      	ldr	r1, [r7, #24]
 8005f66:	0148      	lsls	r0, r1, #5
 8005f68:	69f9      	ldr	r1, [r7, #28]
 8005f6a:	4401      	add	r1, r0
 8005f6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f70:	4313      	orrs	r3, r2
 8005f72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f92:	6113      	str	r3, [r2, #16]
 8005f94:	e03a      	b.n	800600c <USB_EPStartXfer+0x3e4>
 8005f96:	bf00      	nop
 8005f98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	699a      	ldr	r2, [r3, #24]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	1e5a      	subs	r2, r3, #1
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	8afa      	ldrh	r2, [r7, #22]
 8005fb8:	fb03 f202 	mul.w	r2, r3, r2
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	8afb      	ldrh	r3, [r7, #22]
 8005fd0:	04d9      	lsls	r1, r3, #19
 8005fd2:	4b38      	ldr	r3, [pc, #224]	; (80060b4 <USB_EPStartXfer+0x48c>)
 8005fd4:	400b      	ands	r3, r1
 8005fd6:	69b9      	ldr	r1, [r7, #24]
 8005fd8:	0148      	lsls	r0, r1, #5
 8005fda:	69f9      	ldr	r1, [r7, #28]
 8005fdc:	4401      	add	r1, r0
 8005fde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ffc:	69b9      	ldr	r1, [r7, #24]
 8005ffe:	0148      	lsls	r0, r1, #5
 8006000:	69f9      	ldr	r1, [r7, #28]
 8006002:	4401      	add	r1, r0
 8006004:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006008:	4313      	orrs	r3, r2
 800600a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d10d      	bne.n	800602e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6919      	ldr	r1, [r3, #16]
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	460a      	mov	r2, r1
 800602c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	791b      	ldrb	r3, [r3, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d128      	bne.n	8006088 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006042:	2b00      	cmp	r3, #0
 8006044:	d110      	bne.n	8006068 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	440a      	add	r2, r1
 800605c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006060:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e00f      	b.n	8006088 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006086:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	0151      	lsls	r1, r2, #5
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	440a      	add	r2, r1
 800609e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3720      	adds	r7, #32
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	1ff80000 	.word	0x1ff80000

080060b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	f040 80ce 	bne.w	8006276 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d132      	bne.n	8006148 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006100:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	440a      	add	r2, r1
 800611c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006124:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	440a      	add	r2, r1
 800613c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006140:	0cdb      	lsrs	r3, r3, #19
 8006142:	04db      	lsls	r3, r3, #19
 8006144:	6113      	str	r3, [r2, #16]
 8006146:	e04e      	b.n	80061e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006162:	0cdb      	lsrs	r3, r3, #19
 8006164:	04db      	lsls	r3, r3, #19
 8006166:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	440a      	add	r2, r1
 800617e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006182:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006186:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800618a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	699a      	ldr	r2, [r3, #24]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d903      	bls.n	80061a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d6:	6939      	ldr	r1, [r7, #16]
 80061d8:	0148      	lsls	r0, r1, #5
 80061da:	6979      	ldr	r1, [r7, #20]
 80061dc:	4401      	add	r1, r0
 80061de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061e2:	4313      	orrs	r3, r2
 80061e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d11e      	bne.n	800622a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006200:	461a      	mov	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	440a      	add	r2, r1
 800621e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	e097      	b.n	800635a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006244:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006248:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 8083 	beq.w	800635a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	2101      	movs	r1, #1
 8006266:	fa01 f303 	lsl.w	r3, r1, r3
 800626a:	6979      	ldr	r1, [r7, #20]
 800626c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006270:	4313      	orrs	r3, r2
 8006272:	634b      	str	r3, [r1, #52]	; 0x34
 8006274:	e071      	b.n	800635a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006290:	0cdb      	lsrs	r3, r3, #19
 8006292:	04db      	lsls	r3, r3, #19
 8006294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006308:	6939      	ldr	r1, [r7, #16]
 800630a:	0148      	lsls	r0, r1, #5
 800630c:	6979      	ldr	r1, [r7, #20]
 800630e:	4401      	add	r1, r0
 8006310:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006314:	4313      	orrs	r3, r2
 8006316:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d10d      	bne.n	800633a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d009      	beq.n	800633a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6919      	ldr	r1, [r3, #16]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006336:	460a      	mov	r2, r1
 8006338:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006354:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006358:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	371c      	adds	r7, #28
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d14a      	bne.n	800641c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800639a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800639e:	f040 8086 	bne.w	80064ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	7812      	ldrb	r2, [r2, #0]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d902      	bls.n	8006400 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
          break;
 80063fe:	e056      	b.n	80064ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006418:	d0e7      	beq.n	80063ea <USB_EPStopXfer+0x82>
 800641a:	e048      	b.n	80064ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006434:	d13b      	bne.n	80064ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	7812      	ldrb	r2, [r2, #0]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	440a      	add	r2, r1
 8006450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006458:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	7812      	ldrb	r2, [r2, #0]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	440a      	add	r2, r1
 8006474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006478:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800647c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f242 7210 	movw	r2, #10000	; 0x2710
 800648a:	4293      	cmp	r3, r2
 800648c:	d902      	bls.n	8006494 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
          break;
 8006492:	e00c      	b.n	80064ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ac:	d0e7      	beq.n	800647e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064bc:	b480      	push	{r7}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4611      	mov	r1, r2
 80064c8:	461a      	mov	r2, r3
 80064ca:	460b      	mov	r3, r1
 80064cc:	71fb      	strb	r3, [r7, #7]
 80064ce:	4613      	mov	r3, r2
 80064d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d123      	bne.n	800652a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064e2:	88bb      	ldrh	r3, [r7, #4]
 80064e4:	3303      	adds	r3, #3
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064ea:	2300      	movs	r3, #0
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	e018      	b.n	8006522 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	031a      	lsls	r2, r3, #12
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fc:	461a      	mov	r2, r3
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	3301      	adds	r3, #1
 8006508:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	3301      	adds	r3, #1
 800651a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	3301      	adds	r3, #1
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	429a      	cmp	r2, r3
 8006528:	d3e2      	bcc.n	80064f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3724      	adds	r7, #36	; 0x24
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006538:	b480      	push	{r7}
 800653a:	b08b      	sub	sp, #44	; 0x2c
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	4613      	mov	r3, r2
 8006544:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	089b      	lsrs	r3, r3, #2
 8006552:	b29b      	uxth	r3, r3
 8006554:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800655e:	2300      	movs	r3, #0
 8006560:	623b      	str	r3, [r7, #32]
 8006562:	e014      	b.n	800658e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	3301      	adds	r3, #1
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	3301      	adds	r3, #1
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	3301      	adds	r3, #1
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	3301      	adds	r3, #1
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	3301      	adds	r3, #1
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	6a3a      	ldr	r2, [r7, #32]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	429a      	cmp	r2, r3
 8006594:	d3e6      	bcc.n	8006564 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006596:	8bfb      	ldrh	r3, [r7, #30]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01e      	beq.n	80065da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a6:	461a      	mov	r2, r3
 80065a8:	f107 0310 	add.w	r3, r7, #16
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	fa22 f303 	lsr.w	r3, r2, r3
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	701a      	strb	r2, [r3, #0]
      i++;
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	3301      	adds	r3, #1
 80065c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	3301      	adds	r3, #1
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80065ce:	8bfb      	ldrh	r3, [r7, #30]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065d4:	8bfb      	ldrh	r3, [r7, #30]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1ea      	bne.n	80065b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065dc:	4618      	mov	r0, r3
 80065de:	372c      	adds	r7, #44	; 0x2c
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	785b      	ldrb	r3, [r3, #1]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d12c      	bne.n	800665e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	db12      	blt.n	800663c <USB_EPSetStall+0x54>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00f      	beq.n	800663c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006636:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800663a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006656:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	e02b      	b.n	80066b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	db12      	blt.n	8006696 <USB_EPSetStall+0xae>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00f      	beq.n	8006696 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006690:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006694:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d128      	bne.n	8006732 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	791b      	ldrb	r3, [r3, #4]
 8006704:	2b03      	cmp	r3, #3
 8006706:	d003      	beq.n	8006710 <USB_EPClearStall+0x4c>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	791b      	ldrb	r3, [r3, #4]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d138      	bne.n	8006782 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	e027      	b.n	8006782 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	0151      	lsls	r1, r2, #5
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	440a      	add	r2, r1
 8006748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800674c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006750:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	791b      	ldrb	r3, [r3, #4]
 8006756:	2b03      	cmp	r3, #3
 8006758:	d003      	beq.n	8006762 <USB_EPClearStall+0x9e>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	791b      	ldrb	r3, [r3, #4]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d10f      	bne.n	8006782 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800677c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006780:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80067c4:	68f9      	ldr	r1, [r7, #12]
 80067c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800680a:	f023 0302 	bic.w	r3, r3, #2
 800680e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006838:	f023 0303 	bic.w	r3, r3, #3
 800683c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800684c:	f043 0302 	orr.w	r3, r3, #2
 8006850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4013      	ands	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006878:	68fb      	ldr	r3, [r7, #12]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006886:	b480      	push	{r7}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	4013      	ands	r3, r2
 80068a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	0c1b      	lsrs	r3, r3, #16
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	4013      	ands	r3, r2
 80068dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	b29b      	uxth	r3, r3
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	4013      	ands	r3, r2
 800691a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800691c:	68bb      	ldr	r3, [r7, #8]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800692a:	b480      	push	{r7}
 800692c:	b087      	sub	sp, #28
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	fa22 f303 	lsr.w	r3, r2, r3
 800695a:	01db      	lsls	r3, r3, #7
 800695c:	b2db      	uxtb	r3, r3
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4013      	ands	r3, r2
 8006976:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006978:	68bb      	ldr	r3, [r7, #8]
}
 800697a:	4618      	mov	r0, r3
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f003 0301 	and.w	r3, r3, #1
}
 8006996:	4618      	mov	r0, r3
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069c0:	f023 0307 	bic.w	r3, r3, #7
 80069c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	460b      	mov	r3, r1
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	333c      	adds	r3, #60	; 0x3c
 80069fe:	3304      	adds	r3, #4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	4a26      	ldr	r2, [pc, #152]	; (8006aa0 <USB_EP0_OutStart+0xb8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d90a      	bls.n	8006a22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1c:	d101      	bne.n	8006a22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e037      	b.n	8006a92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	461a      	mov	r2, r3
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a50:	f043 0318 	orr.w	r3, r3, #24
 8006a54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d10f      	bne.n	8006a90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a76:	461a      	mov	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a8a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	4f54300a 	.word	0x4f54300a

08006aa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a13      	ldr	r2, [pc, #76]	; (8006b08 <USB_CoreReset+0x64>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d901      	bls.n	8006ac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e01b      	b.n	8006afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	daf2      	bge.n	8006ab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f043 0201 	orr.w	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3301      	adds	r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <USB_CoreReset+0x64>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d901      	bls.n	8006aec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e006      	b.n	8006afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d0f0      	beq.n	8006ada <USB_CoreReset+0x36>

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	00030d40 	.word	0x00030d40

08006b0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b1c:	f002 fc8a 	bl	8009434 <USBD_static_malloc>
 8006b20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d109      	bne.n	8006b3c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	32b0      	adds	r2, #176	; 0xb0
 8006b32:	2100      	movs	r1, #0
 8006b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e0d4      	b.n	8006ce6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b3c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006b40:	2100      	movs	r1, #0
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f002 fd76 	bl	8009634 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	32b0      	adds	r2, #176	; 0xb0
 8006b52:	68f9      	ldr	r1, [r7, #12]
 8006b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	32b0      	adds	r2, #176	; 0xb0
 8006b62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	7c1b      	ldrb	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d138      	bne.n	8006be6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b74:	4b5e      	ldr	r3, [pc, #376]	; (8006cf0 <USBD_CDC_Init+0x1e4>)
 8006b76:	7819      	ldrb	r1, [r3, #0]
 8006b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f002 fb35 	bl	80091ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b84:	4b5a      	ldr	r3, [pc, #360]	; (8006cf0 <USBD_CDC_Init+0x1e4>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f003 020f 	and.w	r2, r3, #15
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	3324      	adds	r3, #36	; 0x24
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b9e:	4b55      	ldr	r3, [pc, #340]	; (8006cf4 <USBD_CDC_Init+0x1e8>)
 8006ba0:	7819      	ldrb	r1, [r3, #0]
 8006ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f002 fb20 	bl	80091ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bae:	4b51      	ldr	r3, [pc, #324]	; (8006cf4 <USBD_CDC_Init+0x1e8>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	f003 020f 	and.w	r2, r3, #15
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006bca:	4b4b      	ldr	r3, [pc, #300]	; (8006cf8 <USBD_CDC_Init+0x1ec>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	f003 020f 	and.w	r2, r3, #15
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	440b      	add	r3, r1
 8006bde:	3326      	adds	r3, #38	; 0x26
 8006be0:	2210      	movs	r2, #16
 8006be2:	801a      	strh	r2, [r3, #0]
 8006be4:	e035      	b.n	8006c52 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006be6:	4b42      	ldr	r3, [pc, #264]	; (8006cf0 <USBD_CDC_Init+0x1e4>)
 8006be8:	7819      	ldrb	r1, [r3, #0]
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	2202      	movs	r2, #2
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f002 fafd 	bl	80091ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006bf4:	4b3e      	ldr	r3, [pc, #248]	; (8006cf0 <USBD_CDC_Init+0x1e4>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 020f 	and.w	r2, r3, #15
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	3324      	adds	r3, #36	; 0x24
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c0e:	4b39      	ldr	r3, [pc, #228]	; (8006cf4 <USBD_CDC_Init+0x1e8>)
 8006c10:	7819      	ldrb	r1, [r3, #0]
 8006c12:	2340      	movs	r3, #64	; 0x40
 8006c14:	2202      	movs	r2, #2
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f002 fae9 	bl	80091ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c1c:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <USBD_CDC_Init+0x1e8>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	f003 020f 	and.w	r2, r3, #15
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c34:	2201      	movs	r2, #1
 8006c36:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c38:	4b2f      	ldr	r3, [pc, #188]	; (8006cf8 <USBD_CDC_Init+0x1ec>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f003 020f 	and.w	r2, r3, #15
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3326      	adds	r3, #38	; 0x26
 8006c4e:	2210      	movs	r2, #16
 8006c50:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c52:	4b29      	ldr	r3, [pc, #164]	; (8006cf8 <USBD_CDC_Init+0x1ec>)
 8006c54:	7819      	ldrb	r1, [r3, #0]
 8006c56:	2308      	movs	r3, #8
 8006c58:	2203      	movs	r2, #3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f002 fac7 	bl	80091ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c60:	4b25      	ldr	r3, [pc, #148]	; (8006cf8 <USBD_CDC_Init+0x1ec>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	f003 020f 	and.w	r2, r3, #15
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	3324      	adds	r3, #36	; 0x24
 8006c76:	2201      	movs	r2, #1
 8006c78:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	33b0      	adds	r3, #176	; 0xb0
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e018      	b.n	8006ce6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	7c1b      	ldrb	r3, [r3, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cbc:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <USBD_CDC_Init+0x1e8>)
 8006cbe:	7819      	ldrb	r1, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f002 fb7e 	bl	80093cc <USBD_LL_PrepareReceive>
 8006cd0:	e008      	b.n	8006ce4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cd2:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <USBD_CDC_Init+0x1e8>)
 8006cd4:	7819      	ldrb	r1, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cdc:	2340      	movs	r3, #64	; 0x40
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f002 fb74 	bl	80093cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	200000a3 	.word	0x200000a3
 8006cf4:	200000a4 	.word	0x200000a4
 8006cf8:	200000a5 	.word	0x200000a5

08006cfc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d08:	4b3a      	ldr	r3, [pc, #232]	; (8006df4 <USBD_CDC_DeInit+0xf8>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f002 fa93 	bl	800923a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d14:	4b37      	ldr	r3, [pc, #220]	; (8006df4 <USBD_CDC_DeInit+0xf8>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f003 020f 	and.w	r2, r3, #15
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	440b      	add	r3, r1
 8006d28:	3324      	adds	r3, #36	; 0x24
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d2e:	4b32      	ldr	r3, [pc, #200]	; (8006df8 <USBD_CDC_DeInit+0xfc>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f002 fa80 	bl	800923a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d3a:	4b2f      	ldr	r3, [pc, #188]	; (8006df8 <USBD_CDC_DeInit+0xfc>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	f003 020f 	and.w	r2, r3, #15
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d52:	2200      	movs	r2, #0
 8006d54:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d56:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <USBD_CDC_DeInit+0x100>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f002 fa6c 	bl	800923a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d62:	4b26      	ldr	r3, [pc, #152]	; (8006dfc <USBD_CDC_DeInit+0x100>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	f003 020f 	and.w	r2, r3, #15
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	440b      	add	r3, r1
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	2200      	movs	r2, #0
 8006d7a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d7c:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <USBD_CDC_DeInit+0x100>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	f003 020f 	and.w	r2, r3, #15
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	440b      	add	r3, r1
 8006d90:	3326      	adds	r3, #38	; 0x26
 8006d92:	2200      	movs	r2, #0
 8006d94:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	32b0      	adds	r2, #176	; 0xb0
 8006da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01f      	beq.n	8006de8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	33b0      	adds	r3, #176	; 0xb0
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	32b0      	adds	r2, #176	; 0xb0
 8006dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f002 fb40 	bl	8009450 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	32b0      	adds	r2, #176	; 0xb0
 8006dda:	2100      	movs	r1, #0
 8006ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	200000a3 	.word	0x200000a3
 8006df8:	200000a4 	.word	0x200000a4
 8006dfc:	200000a5 	.word	0x200000a5

08006e00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	32b0      	adds	r2, #176	; 0xb0
 8006e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e0bf      	b.n	8006fb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d050      	beq.n	8006ede <USBD_CDC_Setup+0xde>
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	f040 80af 	bne.w	8006fa0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	88db      	ldrh	r3, [r3, #6]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d03a      	beq.n	8006ec0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	b25b      	sxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	da1b      	bge.n	8006e8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	33b0      	adds	r3, #176	; 0xb0
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	88d2      	ldrh	r2, [r2, #6]
 8006e70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	88db      	ldrh	r3, [r3, #6]
 8006e76:	2b07      	cmp	r3, #7
 8006e78:	bf28      	it	cs
 8006e7a:	2307      	movcs	r3, #7
 8006e7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	89fa      	ldrh	r2, [r7, #14]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fd89 	bl	800899c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e8a:	e090      	b.n	8006fae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	785a      	ldrb	r2, [r3, #1]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	88db      	ldrh	r3, [r3, #6]
 8006e9a:	2b3f      	cmp	r3, #63	; 0x3f
 8006e9c:	d803      	bhi.n	8006ea6 <USBD_CDC_Setup+0xa6>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	88db      	ldrh	r3, [r3, #6]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	e000      	b.n	8006ea8 <USBD_CDC_Setup+0xa8>
 8006ea6:	2240      	movs	r2, #64	; 0x40
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006eae:	6939      	ldr	r1, [r7, #16]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fd9b 	bl	80089f4 <USBD_CtlPrepareRx>
      break;
 8006ebe:	e076      	b.n	8006fae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	33b0      	adds	r3, #176	; 0xb0
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	7850      	ldrb	r0, [r2, #1]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	4798      	blx	r3
      break;
 8006edc:	e067      	b.n	8006fae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b0b      	cmp	r3, #11
 8006ee4:	d851      	bhi.n	8006f8a <USBD_CDC_Setup+0x18a>
 8006ee6:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <USBD_CDC_Setup+0xec>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f1d 	.word	0x08006f1d
 8006ef0:	08006f99 	.word	0x08006f99
 8006ef4:	08006f8b 	.word	0x08006f8b
 8006ef8:	08006f8b 	.word	0x08006f8b
 8006efc:	08006f8b 	.word	0x08006f8b
 8006f00:	08006f8b 	.word	0x08006f8b
 8006f04:	08006f8b 	.word	0x08006f8b
 8006f08:	08006f8b 	.word	0x08006f8b
 8006f0c:	08006f8b 	.word	0x08006f8b
 8006f10:	08006f8b 	.word	0x08006f8b
 8006f14:	08006f47 	.word	0x08006f47
 8006f18:	08006f71 	.word	0x08006f71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d107      	bne.n	8006f38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f28:	f107 030a 	add.w	r3, r7, #10
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 fd33 	bl	800899c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f36:	e032      	b.n	8006f9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 fcbd 	bl	80088ba <USBD_CtlError>
            ret = USBD_FAIL;
 8006f40:	2303      	movs	r3, #3
 8006f42:	75fb      	strb	r3, [r7, #23]
          break;
 8006f44:	e02b      	b.n	8006f9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d107      	bne.n	8006f62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f52:	f107 030d 	add.w	r3, r7, #13
 8006f56:	2201      	movs	r2, #1
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 fd1e 	bl	800899c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f60:	e01d      	b.n	8006f9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 fca8 	bl	80088ba <USBD_CtlError>
            ret = USBD_FAIL;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f6e:	e016      	b.n	8006f9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d00f      	beq.n	8006f9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 fc9b 	bl	80088ba <USBD_CtlError>
            ret = USBD_FAIL;
 8006f84:	2303      	movs	r3, #3
 8006f86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f88:	e008      	b.n	8006f9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 fc94 	bl	80088ba <USBD_CtlError>
          ret = USBD_FAIL;
 8006f92:	2303      	movs	r3, #3
 8006f94:	75fb      	strb	r3, [r7, #23]
          break;
 8006f96:	e002      	b.n	8006f9e <USBD_CDC_Setup+0x19e>
          break;
 8006f98:	bf00      	nop
 8006f9a:	e008      	b.n	8006fae <USBD_CDC_Setup+0x1ae>
          break;
 8006f9c:	bf00      	nop
      }
      break;
 8006f9e:	e006      	b.n	8006fae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fc89 	bl	80088ba <USBD_CtlError>
      ret = USBD_FAIL;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	75fb      	strb	r3, [r7, #23]
      break;
 8006fac:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	32b0      	adds	r2, #176	; 0xb0
 8006fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e065      	b.n	80070ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	32b0      	adds	r2, #176	; 0xb0
 8006fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	f003 020f 	and.w	r2, r3, #15
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	3318      	adds	r3, #24
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d02f      	beq.n	800706c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	f003 020f 	and.w	r2, r3, #15
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	3318      	adds	r3, #24
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	f003 010f 	and.w	r1, r3, #15
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	460b      	mov	r3, r1
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	440b      	add	r3, r1
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4403      	add	r3, r0
 8007034:	3348      	adds	r3, #72	; 0x48
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	fbb2 f1f3 	udiv	r1, r2, r3
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007042:	2b00      	cmp	r3, #0
 8007044:	d112      	bne.n	800706c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007046:	78fb      	ldrb	r3, [r7, #3]
 8007048:	f003 020f 	and.w	r2, r3, #15
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	3318      	adds	r3, #24
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800705e:	78f9      	ldrb	r1, [r7, #3]
 8007060:	2300      	movs	r3, #0
 8007062:	2200      	movs	r2, #0
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f002 f990 	bl	800938a <USBD_LL_Transmit>
 800706a:	e01f      	b.n	80070ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	33b0      	adds	r3, #176	; 0xb0
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d010      	beq.n	80070ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	33b0      	adds	r3, #176	; 0xb0
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80070a8:	78fa      	ldrb	r2, [r7, #3]
 80070aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	32b0      	adds	r2, #176	; 0xb0
 80070cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	32b0      	adds	r2, #176	; 0xb0
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e01a      	b.n	800711e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f002 f98e 	bl	800940e <USBD_LL_GetRxDataSize>
 80070f2:	4602      	mov	r2, r0
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	33b0      	adds	r3, #176	; 0xb0
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007118:	4611      	mov	r1, r2
 800711a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	32b0      	adds	r2, #176	; 0xb0
 8007138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007144:	2303      	movs	r3, #3
 8007146:	e025      	b.n	8007194 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	33b0      	adds	r3, #176	; 0xb0
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01a      	beq.n	8007192 <USBD_CDC_EP0_RxReady+0x6c>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007162:	2bff      	cmp	r3, #255	; 0xff
 8007164:	d015      	beq.n	8007192 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	33b0      	adds	r3, #176	; 0xb0
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800717e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007186:	b292      	uxth	r2, r2
 8007188:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	22ff      	movs	r2, #255	; 0xff
 800718e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071a4:	2182      	movs	r1, #130	; 0x82
 80071a6:	4818      	ldr	r0, [pc, #96]	; (8007208 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071a8:	f000 fd4f 	bl	8007c4a <USBD_GetEpDesc>
 80071ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071ae:	2101      	movs	r1, #1
 80071b0:	4815      	ldr	r0, [pc, #84]	; (8007208 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071b2:	f000 fd4a 	bl	8007c4a <USBD_GetEpDesc>
 80071b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071b8:	2181      	movs	r1, #129	; 0x81
 80071ba:	4813      	ldr	r0, [pc, #76]	; (8007208 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071bc:	f000 fd45 	bl	8007c4a <USBD_GetEpDesc>
 80071c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2210      	movs	r2, #16
 80071cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071dc:	711a      	strb	r2, [r3, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071f0:	711a      	strb	r2, [r3, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2243      	movs	r2, #67	; 0x43
 80071fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071fc:	4b02      	ldr	r3, [pc, #8]	; (8007208 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000060 	.word	0x20000060

0800720c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007214:	2182      	movs	r1, #130	; 0x82
 8007216:	4818      	ldr	r0, [pc, #96]	; (8007278 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007218:	f000 fd17 	bl	8007c4a <USBD_GetEpDesc>
 800721c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800721e:	2101      	movs	r1, #1
 8007220:	4815      	ldr	r0, [pc, #84]	; (8007278 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007222:	f000 fd12 	bl	8007c4a <USBD_GetEpDesc>
 8007226:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007228:	2181      	movs	r1, #129	; 0x81
 800722a:	4813      	ldr	r0, [pc, #76]	; (8007278 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800722c:	f000 fd0d 	bl	8007c4a <USBD_GetEpDesc>
 8007230:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2210      	movs	r2, #16
 800723c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d006      	beq.n	8007252 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	2200      	movs	r2, #0
 8007248:	711a      	strb	r2, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f042 0202 	orr.w	r2, r2, #2
 8007250:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d006      	beq.n	8007266 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	711a      	strb	r2, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f042 0202 	orr.w	r2, r2, #2
 8007264:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2243      	movs	r2, #67	; 0x43
 800726a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800726c:	4b02      	ldr	r3, [pc, #8]	; (8007278 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000060 	.word	0x20000060

0800727c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007284:	2182      	movs	r1, #130	; 0x82
 8007286:	4818      	ldr	r0, [pc, #96]	; (80072e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007288:	f000 fcdf 	bl	8007c4a <USBD_GetEpDesc>
 800728c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800728e:	2101      	movs	r1, #1
 8007290:	4815      	ldr	r0, [pc, #84]	; (80072e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007292:	f000 fcda 	bl	8007c4a <USBD_GetEpDesc>
 8007296:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007298:	2181      	movs	r1, #129	; 0x81
 800729a:	4813      	ldr	r0, [pc, #76]	; (80072e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800729c:	f000 fcd5 	bl	8007c4a <USBD_GetEpDesc>
 80072a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2210      	movs	r2, #16
 80072ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d006      	beq.n	80072c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072bc:	711a      	strb	r2, [r3, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d006      	beq.n	80072d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d0:	711a      	strb	r2, [r3, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2243      	movs	r2, #67	; 0x43
 80072da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072dc:	4b02      	ldr	r3, [pc, #8]	; (80072e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000060 	.word	0x20000060

080072ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	220a      	movs	r2, #10
 80072f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80072fa:	4b03      	ldr	r3, [pc, #12]	; (8007308 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	2000001c 	.word	0x2000001c

0800730c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	e009      	b.n	8007334 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	33b0      	adds	r3, #176	; 0xb0
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	32b0      	adds	r2, #176	; 0xb0
 8007356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007362:	2303      	movs	r3, #3
 8007364:	e008      	b.n	8007378 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	32b0      	adds	r2, #176	; 0xb0
 8007398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e004      	b.n	80073b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	32b0      	adds	r2, #176	; 0xb0
 80073d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	32b0      	adds	r2, #176	; 0xb0
 80073e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e025      	b.n	800743e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d11f      	bne.n	800743c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2201      	movs	r2, #1
 8007400:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007404:	4b10      	ldr	r3, [pc, #64]	; (8007448 <USBD_CDC_TransmitPacket+0x88>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	f003 020f 	and.w	r2, r3, #15
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4403      	add	r3, r0
 800741e:	3318      	adds	r3, #24
 8007420:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007422:	4b09      	ldr	r3, [pc, #36]	; (8007448 <USBD_CDC_TransmitPacket+0x88>)
 8007424:	7819      	ldrb	r1, [r3, #0]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 ffa9 	bl	800938a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	200000a3 	.word	0x200000a3

0800744c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	32b0      	adds	r2, #176	; 0xb0
 800745e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007462:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	32b0      	adds	r2, #176	; 0xb0
 800746e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007476:	2303      	movs	r3, #3
 8007478:	e018      	b.n	80074ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	7c1b      	ldrb	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007482:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <USBD_CDC_ReceivePacket+0x68>)
 8007484:	7819      	ldrb	r1, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800748c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 ff9b 	bl	80093cc <USBD_LL_PrepareReceive>
 8007496:	e008      	b.n	80074aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <USBD_CDC_ReceivePacket+0x68>)
 800749a:	7819      	ldrb	r1, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074a2:	2340      	movs	r3, #64	; 0x40
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 ff91 	bl	80093cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	200000a4 	.word	0x200000a4

080074b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	4613      	mov	r3, r2
 80074c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e01f      	b.n	8007510 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	79fa      	ldrb	r2, [r7, #7]
 8007502:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f001 fe0b 	bl	8009120 <USBD_LL_Init>
 800750a:	4603      	mov	r3, r0
 800750c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800750e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	e025      	b.n	800757c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	32ae      	adds	r2, #174	; 0xae
 8007542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00f      	beq.n	800756c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	32ae      	adds	r2, #174	; 0xae
 8007556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	f107 020e 	add.w	r2, r7, #14
 8007560:	4610      	mov	r0, r2
 8007562:	4798      	blx	r3
 8007564:	4602      	mov	r2, r0
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 fe13 	bl	80091b8 <USBD_LL_Start>
 8007592:	4603      	mov	r3, r0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	78fa      	ldrb	r2, [r7, #3]
 80075d6:	4611      	mov	r1, r2
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	4798      	blx	r3
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	78fa      	ldrb	r2, [r7, #3]
 8007604:	4611      	mov	r1, r2
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	4798      	blx	r3
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007610:	2303      	movs	r3, #3
 8007612:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f001 f908 	bl	8008846 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007644:	461a      	mov	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007652:	f003 031f 	and.w	r3, r3, #31
 8007656:	2b02      	cmp	r3, #2
 8007658:	d01a      	beq.n	8007690 <USBD_LL_SetupStage+0x72>
 800765a:	2b02      	cmp	r3, #2
 800765c:	d822      	bhi.n	80076a4 <USBD_LL_SetupStage+0x86>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <USBD_LL_SetupStage+0x4a>
 8007662:	2b01      	cmp	r3, #1
 8007664:	d00a      	beq.n	800767c <USBD_LL_SetupStage+0x5e>
 8007666:	e01d      	b.n	80076a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fb5f 	bl	8007d34 <USBD_StdDevReq>
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]
      break;
 800767a:	e020      	b.n	80076be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fbc7 	bl	8007e18 <USBD_StdItfReq>
 800768a:	4603      	mov	r3, r0
 800768c:	73fb      	strb	r3, [r7, #15]
      break;
 800768e:	e016      	b.n	80076be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fc29 	bl	8007ef0 <USBD_StdEPReq>
 800769e:	4603      	mov	r3, r0
 80076a0:	73fb      	strb	r3, [r7, #15]
      break;
 80076a2:	e00c      	b.n	80076be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fde0 	bl	8009278 <USBD_LL_StallEP>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73fb      	strb	r3, [r7, #15]
      break;
 80076bc:	bf00      	nop
  }

  return ret;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	460b      	mov	r3, r1
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d16e      	bne.n	80077be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80076e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	f040 8098 	bne.w	8007824 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d913      	bls.n	8007728 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	1ad2      	subs	r2, r2, r3
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	4293      	cmp	r3, r2
 8007718:	bf28      	it	cs
 800771a:	4613      	movcs	r3, r2
 800771c:	461a      	mov	r2, r3
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f001 f984 	bl	8008a2e <USBD_CtlContinueRx>
 8007726:	e07d      	b.n	8007824 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800772e:	f003 031f 	and.w	r3, r3, #31
 8007732:	2b02      	cmp	r3, #2
 8007734:	d014      	beq.n	8007760 <USBD_LL_DataOutStage+0x98>
 8007736:	2b02      	cmp	r3, #2
 8007738:	d81d      	bhi.n	8007776 <USBD_LL_DataOutStage+0xae>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <USBD_LL_DataOutStage+0x7c>
 800773e:	2b01      	cmp	r3, #1
 8007740:	d003      	beq.n	800774a <USBD_LL_DataOutStage+0x82>
 8007742:	e018      	b.n	8007776 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	75bb      	strb	r3, [r7, #22]
            break;
 8007748:	e018      	b.n	800777c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007750:	b2db      	uxtb	r3, r3
 8007752:	4619      	mov	r1, r3
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 fa5e 	bl	8007c16 <USBD_CoreFindIF>
 800775a:	4603      	mov	r3, r0
 800775c:	75bb      	strb	r3, [r7, #22]
            break;
 800775e:	e00d      	b.n	800777c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007766:	b2db      	uxtb	r3, r3
 8007768:	4619      	mov	r1, r3
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fa60 	bl	8007c30 <USBD_CoreFindEP>
 8007770:	4603      	mov	r3, r0
 8007772:	75bb      	strb	r3, [r7, #22]
            break;
 8007774:	e002      	b.n	800777c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	75bb      	strb	r3, [r7, #22]
            break;
 800777a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800777c:	7dbb      	ldrb	r3, [r7, #22]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d119      	bne.n	80077b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b03      	cmp	r3, #3
 800778c:	d113      	bne.n	80077b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800778e:	7dba      	ldrb	r2, [r7, #22]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	32ae      	adds	r2, #174	; 0xae
 8007794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00b      	beq.n	80077b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800779e:	7dba      	ldrb	r2, [r7, #22]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80077a6:	7dba      	ldrb	r2, [r7, #22]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	32ae      	adds	r2, #174	; 0xae
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f001 f94a 	bl	8008a50 <USBD_CtlSendStatus>
 80077bc:	e032      	b.n	8007824 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80077be:	7afb      	ldrb	r3, [r7, #11]
 80077c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	4619      	mov	r1, r3
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 fa31 	bl	8007c30 <USBD_CoreFindEP>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077d2:	7dbb      	ldrb	r3, [r7, #22]
 80077d4:	2bff      	cmp	r3, #255	; 0xff
 80077d6:	d025      	beq.n	8007824 <USBD_LL_DataOutStage+0x15c>
 80077d8:	7dbb      	ldrb	r3, [r7, #22]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d122      	bne.n	8007824 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d117      	bne.n	800781a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80077ea:	7dba      	ldrb	r2, [r7, #22]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	32ae      	adds	r2, #174	; 0xae
 80077f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00f      	beq.n	800781a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077fa:	7dba      	ldrb	r2, [r7, #22]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007802:	7dba      	ldrb	r2, [r7, #22]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	32ae      	adds	r2, #174	; 0xae
 8007808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	7afa      	ldrb	r2, [r7, #11]
 8007810:	4611      	mov	r1, r2
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	4798      	blx	r3
 8007816:	4603      	mov	r3, r0
 8007818:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007820:	7dfb      	ldrb	r3, [r7, #23]
 8007822:	e000      	b.n	8007826 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b086      	sub	sp, #24
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	460b      	mov	r3, r1
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d16f      	bne.n	8007922 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3314      	adds	r3, #20
 8007846:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800784e:	2b02      	cmp	r3, #2
 8007850:	d15a      	bne.n	8007908 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	429a      	cmp	r2, r3
 800785c:	d914      	bls.n	8007888 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	1ad2      	subs	r2, r2, r3
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	461a      	mov	r2, r3
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f001 f8ac 	bl	80089d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800787a:	2300      	movs	r3, #0
 800787c:	2200      	movs	r2, #0
 800787e:	2100      	movs	r1, #0
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f001 fda3 	bl	80093cc <USBD_LL_PrepareReceive>
 8007886:	e03f      	b.n	8007908 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	429a      	cmp	r2, r3
 8007892:	d11c      	bne.n	80078ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800789c:	429a      	cmp	r2, r3
 800789e:	d316      	bcc.n	80078ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d20f      	bcs.n	80078ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078ae:	2200      	movs	r2, #0
 80078b0:	2100      	movs	r1, #0
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f001 f88d 	bl	80089d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078c0:	2300      	movs	r3, #0
 80078c2:	2200      	movs	r2, #0
 80078c4:	2100      	movs	r1, #0
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f001 fd80 	bl	80093cc <USBD_LL_PrepareReceive>
 80078cc:	e01c      	b.n	8007908 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d10f      	bne.n	80078fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078fa:	2180      	movs	r1, #128	; 0x80
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f001 fcbb 	bl	8009278 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f001 f8b7 	bl	8008a76 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d03a      	beq.n	8007988 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f7ff fe42 	bl	800759c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007920:	e032      	b.n	8007988 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007922:	7afb      	ldrb	r3, [r7, #11]
 8007924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007928:	b2db      	uxtb	r3, r3
 800792a:	4619      	mov	r1, r3
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f97f 	bl	8007c30 <USBD_CoreFindEP>
 8007932:	4603      	mov	r3, r0
 8007934:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	2bff      	cmp	r3, #255	; 0xff
 800793a:	d025      	beq.n	8007988 <USBD_LL_DataInStage+0x15a>
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d122      	bne.n	8007988 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b03      	cmp	r3, #3
 800794c:	d11c      	bne.n	8007988 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800794e:	7dfa      	ldrb	r2, [r7, #23]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	32ae      	adds	r2, #174	; 0xae
 8007954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d014      	beq.n	8007988 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800795e:	7dfa      	ldrb	r2, [r7, #23]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007966:	7dfa      	ldrb	r2, [r7, #23]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	32ae      	adds	r2, #174	; 0xae
 800796c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	7afa      	ldrb	r2, [r7, #11]
 8007974:	4611      	mov	r1, r2
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	4798      	blx	r3
 800797a:	4603      	mov	r3, r0
 800797c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800797e:	7dbb      	ldrb	r3, [r7, #22]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007984:	7dbb      	ldrb	r3, [r7, #22]
 8007986:	e000      	b.n	800798a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d014      	beq.n	80079f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00e      	beq.n	80079f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6852      	ldr	r2, [r2, #4]
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	4611      	mov	r1, r2
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4798      	blx	r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079f4:	2303      	movs	r3, #3
 80079f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079f8:	2340      	movs	r3, #64	; 0x40
 80079fa:	2200      	movs	r2, #0
 80079fc:	2100      	movs	r1, #0
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f001 fbf5 	bl	80091ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2240      	movs	r2, #64	; 0x40
 8007a10:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a14:	2340      	movs	r3, #64	; 0x40
 8007a16:	2200      	movs	r2, #0
 8007a18:	2180      	movs	r1, #128	; 0x80
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f001 fbe7 	bl	80091ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2240      	movs	r2, #64	; 0x40
 8007a2a:	621a      	str	r2, [r3, #32]

  return ret;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	78fa      	ldrb	r2, [r7, #3]
 8007a46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2204      	movs	r2, #4
 8007a70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d106      	bne.n	8007aa4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d110      	bne.n	8007ae8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00b      	beq.n	8007ae8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	32ae      	adds	r2, #174	; 0xae
 8007b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e01c      	b.n	8007b4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d115      	bne.n	8007b4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	32ae      	adds	r2, #174	; 0xae
 8007b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	32ae      	adds	r2, #174	; 0xae
 8007b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	4611      	mov	r1, r2
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	32ae      	adds	r2, #174	; 0xae
 8007b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e01c      	b.n	8007bb2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d115      	bne.n	8007bb0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32ae      	adds	r2, #174	; 0xae
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	32ae      	adds	r2, #174	; 0xae
 8007ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	78fa      	ldrb	r2, [r7, #3]
 8007baa:	4611      	mov	r1, r2
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00e      	beq.n	8007c0c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6852      	ldr	r2, [r2, #4]
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c22:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b086      	sub	sp, #24
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	885b      	ldrh	r3, [r3, #2]
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d920      	bls.n	8007cb4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c7a:	e013      	b.n	8007ca4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c7c:	f107 030a 	add.w	r3, r7, #10
 8007c80:	4619      	mov	r1, r3
 8007c82:	6978      	ldr	r0, [r7, #20]
 8007c84:	f000 f81b 	bl	8007cbe <USBD_GetNextDesc>
 8007c88:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d108      	bne.n	8007ca4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	789b      	ldrb	r3, [r3, #2]
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d008      	beq.n	8007cb2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	885b      	ldrh	r3, [r3, #2]
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	897b      	ldrh	r3, [r7, #10]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d8e5      	bhi.n	8007c7c <USBD_GetEpDesc+0x32>
 8007cb0:	e000      	b.n	8007cb4 <USBD_GetEpDesc+0x6a>
          break;
 8007cb2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007cb4:	693b      	ldr	r3, [r7, #16]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	881a      	ldrh	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	4413      	add	r3, r2
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cea:	68fb      	ldr	r3, [r7, #12]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d16:	8a3b      	ldrh	r3, [r7, #16]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	b21a      	sxth	r2, r3
 8007d1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	b21b      	sxth	r3, r3
 8007d24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d26:	89fb      	ldrh	r3, [r7, #14]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d005      	beq.n	8007d5a <USBD_StdDevReq+0x26>
 8007d4e:	2b40      	cmp	r3, #64	; 0x40
 8007d50:	d857      	bhi.n	8007e02 <USBD_StdDevReq+0xce>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00f      	beq.n	8007d76 <USBD_StdDevReq+0x42>
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	d153      	bne.n	8007e02 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	32ae      	adds	r2, #174	; 0xae
 8007d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	4798      	blx	r3
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]
      break;
 8007d74:	e04a      	b.n	8007e0c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b09      	cmp	r3, #9
 8007d7c:	d83b      	bhi.n	8007df6 <USBD_StdDevReq+0xc2>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <USBD_StdDevReq+0x50>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007dd9 	.word	0x08007dd9
 8007d88:	08007ded 	.word	0x08007ded
 8007d8c:	08007df7 	.word	0x08007df7
 8007d90:	08007de3 	.word	0x08007de3
 8007d94:	08007df7 	.word	0x08007df7
 8007d98:	08007db7 	.word	0x08007db7
 8007d9c:	08007dad 	.word	0x08007dad
 8007da0:	08007df7 	.word	0x08007df7
 8007da4:	08007dcf 	.word	0x08007dcf
 8007da8:	08007dc1 	.word	0x08007dc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa3c 	bl	800822c <USBD_GetDescriptor>
          break;
 8007db4:	e024      	b.n	8007e00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fba1 	bl	8008500 <USBD_SetAddress>
          break;
 8007dbe:	e01f      	b.n	8007e00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fbe0 	bl	8008588 <USBD_SetConfig>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]
          break;
 8007dcc:	e018      	b.n	8007e00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fc83 	bl	80086dc <USBD_GetConfig>
          break;
 8007dd6:	e013      	b.n	8007e00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fcb4 	bl	8008748 <USBD_GetStatus>
          break;
 8007de0:	e00e      	b.n	8007e00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fce3 	bl	80087b0 <USBD_SetFeature>
          break;
 8007dea:	e009      	b.n	8007e00 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fd07 	bl	8008802 <USBD_ClrFeature>
          break;
 8007df4:	e004      	b.n	8007e00 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fd5e 	bl	80088ba <USBD_CtlError>
          break;
 8007dfe:	bf00      	nop
      }
      break;
 8007e00:	e004      	b.n	8007e0c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fd58 	bl	80088ba <USBD_CtlError>
      break;
 8007e0a:	bf00      	nop
  }

  return ret;
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop

08007e18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e2e:	2b40      	cmp	r3, #64	; 0x40
 8007e30:	d005      	beq.n	8007e3e <USBD_StdItfReq+0x26>
 8007e32:	2b40      	cmp	r3, #64	; 0x40
 8007e34:	d852      	bhi.n	8007edc <USBD_StdItfReq+0xc4>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <USBD_StdItfReq+0x26>
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d14e      	bne.n	8007edc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d840      	bhi.n	8007ece <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	889b      	ldrh	r3, [r3, #4]
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d836      	bhi.n	8007ec4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	889b      	ldrh	r3, [r3, #4]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff fed9 	bl	8007c16 <USBD_CoreFindIF>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	2bff      	cmp	r3, #255	; 0xff
 8007e6c:	d01d      	beq.n	8007eaa <USBD_StdItfReq+0x92>
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d11a      	bne.n	8007eaa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e74:	7bba      	ldrb	r2, [r7, #14]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	32ae      	adds	r2, #174	; 0xae
 8007e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00f      	beq.n	8007ea4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e84:	7bba      	ldrb	r2, [r7, #14]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e8c:	7bba      	ldrb	r2, [r7, #14]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	32ae      	adds	r2, #174	; 0xae
 8007e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ea2:	e004      	b.n	8007eae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ea8:	e001      	b.n	8007eae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	88db      	ldrh	r3, [r3, #6]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d110      	bne.n	8007ed8 <USBD_StdItfReq+0xc0>
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10d      	bne.n	8007ed8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fdc7 	bl	8008a50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ec2:	e009      	b.n	8007ed8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fcf7 	bl	80088ba <USBD_CtlError>
          break;
 8007ecc:	e004      	b.n	8007ed8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fcf2 	bl	80088ba <USBD_CtlError>
          break;
 8007ed6:	e000      	b.n	8007eda <USBD_StdItfReq+0xc2>
          break;
 8007ed8:	bf00      	nop
      }
      break;
 8007eda:	e004      	b.n	8007ee6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fceb 	bl	80088ba <USBD_CtlError>
      break;
 8007ee4:	bf00      	nop
  }

  return ret;
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	889b      	ldrh	r3, [r3, #4]
 8007f02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f0c:	2b40      	cmp	r3, #64	; 0x40
 8007f0e:	d007      	beq.n	8007f20 <USBD_StdEPReq+0x30>
 8007f10:	2b40      	cmp	r3, #64	; 0x40
 8007f12:	f200 817f 	bhi.w	8008214 <USBD_StdEPReq+0x324>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d02a      	beq.n	8007f70 <USBD_StdEPReq+0x80>
 8007f1a:	2b20      	cmp	r3, #32
 8007f1c:	f040 817a 	bne.w	8008214 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff fe83 	bl	8007c30 <USBD_CoreFindEP>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f2e:	7b7b      	ldrb	r3, [r7, #13]
 8007f30:	2bff      	cmp	r3, #255	; 0xff
 8007f32:	f000 8174 	beq.w	800821e <USBD_StdEPReq+0x32e>
 8007f36:	7b7b      	ldrb	r3, [r7, #13]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 8170 	bne.w	800821e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f3e:	7b7a      	ldrb	r2, [r7, #13]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f46:	7b7a      	ldrb	r2, [r7, #13]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	32ae      	adds	r2, #174	; 0xae
 8007f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 8163 	beq.w	800821e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f58:	7b7a      	ldrb	r2, [r7, #13]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	32ae      	adds	r2, #174	; 0xae
 8007f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f6e:	e156      	b.n	800821e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	785b      	ldrb	r3, [r3, #1]
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d008      	beq.n	8007f8a <USBD_StdEPReq+0x9a>
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	f300 8145 	bgt.w	8008208 <USBD_StdEPReq+0x318>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 809b 	beq.w	80080ba <USBD_StdEPReq+0x1ca>
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d03c      	beq.n	8008002 <USBD_StdEPReq+0x112>
 8007f88:	e13e      	b.n	8008208 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d002      	beq.n	8007f9c <USBD_StdEPReq+0xac>
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d016      	beq.n	8007fc8 <USBD_StdEPReq+0xd8>
 8007f9a:	e02c      	b.n	8007ff6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00d      	beq.n	8007fbe <USBD_StdEPReq+0xce>
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	2b80      	cmp	r3, #128	; 0x80
 8007fa6:	d00a      	beq.n	8007fbe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 f963 	bl	8009278 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fb2:	2180      	movs	r1, #128	; 0x80
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 f95f 	bl	8009278 <USBD_LL_StallEP>
 8007fba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fbc:	e020      	b.n	8008000 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fc7a 	bl	80088ba <USBD_CtlError>
              break;
 8007fc6:	e01b      	b.n	8008000 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	885b      	ldrh	r3, [r3, #2]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10e      	bne.n	8007fee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <USBD_StdEPReq+0xfe>
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b80      	cmp	r3, #128	; 0x80
 8007fda:	d008      	beq.n	8007fee <USBD_StdEPReq+0xfe>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	88db      	ldrh	r3, [r3, #6]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 f945 	bl	8009278 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fd2e 	bl	8008a50 <USBD_CtlSendStatus>

              break;
 8007ff4:	e004      	b.n	8008000 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fc5e 	bl	80088ba <USBD_CtlError>
              break;
 8007ffe:	bf00      	nop
          }
          break;
 8008000:	e107      	b.n	8008212 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d002      	beq.n	8008014 <USBD_StdEPReq+0x124>
 800800e:	2b03      	cmp	r3, #3
 8008010:	d016      	beq.n	8008040 <USBD_StdEPReq+0x150>
 8008012:	e04b      	b.n	80080ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00d      	beq.n	8008036 <USBD_StdEPReq+0x146>
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b80      	cmp	r3, #128	; 0x80
 800801e:	d00a      	beq.n	8008036 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 f927 	bl	8009278 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800802a:	2180      	movs	r1, #128	; 0x80
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 f923 	bl	8009278 <USBD_LL_StallEP>
 8008032:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008034:	e040      	b.n	80080b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fc3e 	bl	80088ba <USBD_CtlError>
              break;
 800803e:	e03b      	b.n	80080b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	885b      	ldrh	r3, [r3, #2]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d136      	bne.n	80080b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800804e:	2b00      	cmp	r3, #0
 8008050:	d004      	beq.n	800805c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 f92d 	bl	80092b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fcf7 	bl	8008a50 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff fde2 	bl	8007c30 <USBD_CoreFindEP>
 800806c:	4603      	mov	r3, r0
 800806e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008070:	7b7b      	ldrb	r3, [r7, #13]
 8008072:	2bff      	cmp	r3, #255	; 0xff
 8008074:	d01f      	beq.n	80080b6 <USBD_StdEPReq+0x1c6>
 8008076:	7b7b      	ldrb	r3, [r7, #13]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d11c      	bne.n	80080b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800807c:	7b7a      	ldrb	r2, [r7, #13]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008084:	7b7a      	ldrb	r2, [r7, #13]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	32ae      	adds	r2, #174	; 0xae
 800808a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d010      	beq.n	80080b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008094:	7b7a      	ldrb	r2, [r7, #13]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	32ae      	adds	r2, #174	; 0xae
 800809a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
 80080a6:	4603      	mov	r3, r0
 80080a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80080aa:	e004      	b.n	80080b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fc03 	bl	80088ba <USBD_CtlError>
              break;
 80080b4:	e000      	b.n	80080b8 <USBD_StdEPReq+0x1c8>
              break;
 80080b6:	bf00      	nop
          }
          break;
 80080b8:	e0ab      	b.n	8008212 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d002      	beq.n	80080cc <USBD_StdEPReq+0x1dc>
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d032      	beq.n	8008130 <USBD_StdEPReq+0x240>
 80080ca:	e097      	b.n	80081fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <USBD_StdEPReq+0x1f2>
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b80      	cmp	r3, #128	; 0x80
 80080d6:	d004      	beq.n	80080e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fbed 	bl	80088ba <USBD_CtlError>
                break;
 80080e0:	e091      	b.n	8008206 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da0b      	bge.n	8008102 <USBD_StdEPReq+0x212>
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	3310      	adds	r3, #16
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	3304      	adds	r3, #4
 8008100:	e00b      	b.n	800811a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	4413      	add	r3, r2
 8008118:	3304      	adds	r3, #4
 800811a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2202      	movs	r2, #2
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fc37 	bl	800899c <USBD_CtlSendData>
              break;
 800812e:	e06a      	b.n	8008206 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008134:	2b00      	cmp	r3, #0
 8008136:	da11      	bge.n	800815c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	f003 020f 	and.w	r2, r3, #15
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4613      	mov	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	3324      	adds	r3, #36	; 0x24
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d117      	bne.n	8008182 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fbb0 	bl	80088ba <USBD_CtlError>
                  break;
 800815a:	e054      	b.n	8008206 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	f003 020f 	and.w	r2, r3, #15
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d104      	bne.n	8008182 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fb9d 	bl	80088ba <USBD_CtlError>
                  break;
 8008180:	e041      	b.n	8008206 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008186:	2b00      	cmp	r3, #0
 8008188:	da0b      	bge.n	80081a2 <USBD_StdEPReq+0x2b2>
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008190:	4613      	mov	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	3310      	adds	r3, #16
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	4413      	add	r3, r2
 800819e:	3304      	adds	r3, #4
 80081a0:	e00b      	b.n	80081ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	4413      	add	r3, r2
 80081b8:	3304      	adds	r3, #4
 80081ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <USBD_StdEPReq+0x2d8>
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b80      	cmp	r3, #128	; 0x80
 80081c6:	d103      	bne.n	80081d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e00e      	b.n	80081ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 f88d 	bl	80092f4 <USBD_LL_IsStallEP>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2201      	movs	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e002      	b.n	80081ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2202      	movs	r2, #2
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fbd1 	bl	800899c <USBD_CtlSendData>
              break;
 80081fa:	e004      	b.n	8008206 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fb5b 	bl	80088ba <USBD_CtlError>
              break;
 8008204:	bf00      	nop
          }
          break;
 8008206:	e004      	b.n	8008212 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fb55 	bl	80088ba <USBD_CtlError>
          break;
 8008210:	bf00      	nop
      }
      break;
 8008212:	e005      	b.n	8008220 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fb4f 	bl	80088ba <USBD_CtlError>
      break;
 800821c:	e000      	b.n	8008220 <USBD_StdEPReq+0x330>
      break;
 800821e:	bf00      	nop
  }

  return ret;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800823a:	2300      	movs	r3, #0
 800823c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	885b      	ldrh	r3, [r3, #2]
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	2b06      	cmp	r3, #6
 800824e:	f200 8128 	bhi.w	80084a2 <USBD_GetDescriptor+0x276>
 8008252:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <USBD_GetDescriptor+0x2c>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	08008275 	.word	0x08008275
 800825c:	0800828d 	.word	0x0800828d
 8008260:	080082cd 	.word	0x080082cd
 8008264:	080084a3 	.word	0x080084a3
 8008268:	080084a3 	.word	0x080084a3
 800826c:	08008443 	.word	0x08008443
 8008270:	0800846f 	.word	0x0800846f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	7c12      	ldrb	r2, [r2, #16]
 8008280:	f107 0108 	add.w	r1, r7, #8
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
 8008288:	60f8      	str	r0, [r7, #12]
      break;
 800828a:	e112      	b.n	80084b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	7c1b      	ldrb	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10d      	bne.n	80082b0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	f107 0208 	add.w	r2, r7, #8
 80082a0:	4610      	mov	r0, r2
 80082a2:	4798      	blx	r3
 80082a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3301      	adds	r3, #1
 80082aa:	2202      	movs	r2, #2
 80082ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082ae:	e100      	b.n	80084b2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	f107 0208 	add.w	r2, r7, #8
 80082bc:	4610      	mov	r0, r2
 80082be:	4798      	blx	r3
 80082c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3301      	adds	r3, #1
 80082c6:	2202      	movs	r2, #2
 80082c8:	701a      	strb	r2, [r3, #0]
      break;
 80082ca:	e0f2      	b.n	80084b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	885b      	ldrh	r3, [r3, #2]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b05      	cmp	r3, #5
 80082d4:	f200 80ac 	bhi.w	8008430 <USBD_GetDescriptor+0x204>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <USBD_GetDescriptor+0xb4>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	080082f9 	.word	0x080082f9
 80082e4:	0800832d 	.word	0x0800832d
 80082e8:	08008361 	.word	0x08008361
 80082ec:	08008395 	.word	0x08008395
 80082f0:	080083c9 	.word	0x080083c9
 80082f4:	080083fd 	.word	0x080083fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	7c12      	ldrb	r2, [r2, #16]
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	4610      	mov	r0, r2
 8008316:	4798      	blx	r3
 8008318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800831a:	e091      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 facb 	bl	80088ba <USBD_CtlError>
            err++;
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	3301      	adds	r3, #1
 8008328:	72fb      	strb	r3, [r7, #11]
          break;
 800832a:	e089      	b.n	8008440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834e:	e077      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fab1 	bl	80088ba <USBD_CtlError>
            err++;
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	3301      	adds	r3, #1
 800835c:	72fb      	strb	r3, [r7, #11]
          break;
 800835e:	e06f      	b.n	8008440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	7c12      	ldrb	r2, [r2, #16]
 8008378:	f107 0108 	add.w	r1, r7, #8
 800837c:	4610      	mov	r0, r2
 800837e:	4798      	blx	r3
 8008380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008382:	e05d      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fa97 	bl	80088ba <USBD_CtlError>
            err++;
 800838c:	7afb      	ldrb	r3, [r7, #11]
 800838e:	3301      	adds	r3, #1
 8008390:	72fb      	strb	r3, [r7, #11]
          break;
 8008392:	e055      	b.n	8008440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	7c12      	ldrb	r2, [r2, #16]
 80083ac:	f107 0108 	add.w	r1, r7, #8
 80083b0:	4610      	mov	r0, r2
 80083b2:	4798      	blx	r3
 80083b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083b6:	e043      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fa7d 	bl	80088ba <USBD_CtlError>
            err++;
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	3301      	adds	r3, #1
 80083c4:	72fb      	strb	r3, [r7, #11]
          break;
 80083c6:	e03b      	b.n	8008440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	7c12      	ldrb	r2, [r2, #16]
 80083e0:	f107 0108 	add.w	r1, r7, #8
 80083e4:	4610      	mov	r0, r2
 80083e6:	4798      	blx	r3
 80083e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ea:	e029      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fa63 	bl	80088ba <USBD_CtlError>
            err++;
 80083f4:	7afb      	ldrb	r3, [r7, #11]
 80083f6:	3301      	adds	r3, #1
 80083f8:	72fb      	strb	r3, [r7, #11]
          break;
 80083fa:	e021      	b.n	8008440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	7c12      	ldrb	r2, [r2, #16]
 8008414:	f107 0108 	add.w	r1, r7, #8
 8008418:	4610      	mov	r0, r2
 800841a:	4798      	blx	r3
 800841c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800841e:	e00f      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa49 	bl	80088ba <USBD_CtlError>
            err++;
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	3301      	adds	r3, #1
 800842c:	72fb      	strb	r3, [r7, #11]
          break;
 800842e:	e007      	b.n	8008440 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa41 	bl	80088ba <USBD_CtlError>
          err++;
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	3301      	adds	r3, #1
 800843c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800843e:	bf00      	nop
      }
      break;
 8008440:	e037      	b.n	80084b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	7c1b      	ldrb	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d109      	bne.n	800845e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008452:	f107 0208 	add.w	r2, r7, #8
 8008456:	4610      	mov	r0, r2
 8008458:	4798      	blx	r3
 800845a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800845c:	e029      	b.n	80084b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fa2a 	bl	80088ba <USBD_CtlError>
        err++;
 8008466:	7afb      	ldrb	r3, [r7, #11]
 8008468:	3301      	adds	r3, #1
 800846a:	72fb      	strb	r3, [r7, #11]
      break;
 800846c:	e021      	b.n	80084b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	7c1b      	ldrb	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10d      	bne.n	8008492 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847e:	f107 0208 	add.w	r2, r7, #8
 8008482:	4610      	mov	r0, r2
 8008484:	4798      	blx	r3
 8008486:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3301      	adds	r3, #1
 800848c:	2207      	movs	r2, #7
 800848e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008490:	e00f      	b.n	80084b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fa10 	bl	80088ba <USBD_CtlError>
        err++;
 800849a:	7afb      	ldrb	r3, [r7, #11]
 800849c:	3301      	adds	r3, #1
 800849e:	72fb      	strb	r3, [r7, #11]
      break;
 80084a0:	e007      	b.n	80084b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fa08 	bl	80088ba <USBD_CtlError>
      err++;
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	3301      	adds	r3, #1
 80084ae:	72fb      	strb	r3, [r7, #11]
      break;
 80084b0:	bf00      	nop
  }

  if (err != 0U)
 80084b2:	7afb      	ldrb	r3, [r7, #11]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d11e      	bne.n	80084f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	88db      	ldrh	r3, [r3, #6]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d016      	beq.n	80084ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084c0:	893b      	ldrh	r3, [r7, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00e      	beq.n	80084e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	88da      	ldrh	r2, [r3, #6]
 80084ca:	893b      	ldrh	r3, [r7, #8]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	bf28      	it	cs
 80084d0:	4613      	movcs	r3, r2
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084d6:	893b      	ldrh	r3, [r7, #8]
 80084d8:	461a      	mov	r2, r3
 80084da:	68f9      	ldr	r1, [r7, #12]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fa5d 	bl	800899c <USBD_CtlSendData>
 80084e2:	e009      	b.n	80084f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f9e7 	bl	80088ba <USBD_CtlError>
 80084ec:	e004      	b.n	80084f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 faae 	bl	8008a50 <USBD_CtlSendStatus>
 80084f4:	e000      	b.n	80084f8 <USBD_GetDescriptor+0x2cc>
    return;
 80084f6:	bf00      	nop
  }
}
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop

08008500 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	889b      	ldrh	r3, [r3, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d131      	bne.n	8008576 <USBD_SetAddress+0x76>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	88db      	ldrh	r3, [r3, #6]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d12d      	bne.n	8008576 <USBD_SetAddress+0x76>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	885b      	ldrh	r3, [r3, #2]
 800851e:	2b7f      	cmp	r3, #127	; 0x7f
 8008520:	d829      	bhi.n	8008576 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	885b      	ldrh	r3, [r3, #2]
 8008526:	b2db      	uxtb	r3, r3
 8008528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b03      	cmp	r3, #3
 8008538:	d104      	bne.n	8008544 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f9bc 	bl	80088ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008542:	e01d      	b.n	8008580 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7bfa      	ldrb	r2, [r7, #15]
 8008548:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fefb 	bl	800934c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa7a 	bl	8008a50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d004      	beq.n	800856c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2202      	movs	r2, #2
 8008566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856a:	e009      	b.n	8008580 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008574:	e004      	b.n	8008580 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f99e 	bl	80088ba <USBD_CtlError>
  }
}
 800857e:	bf00      	nop
 8008580:	bf00      	nop
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	885b      	ldrh	r3, [r3, #2]
 800859a:	b2da      	uxtb	r2, r3
 800859c:	4b4e      	ldr	r3, [pc, #312]	; (80086d8 <USBD_SetConfig+0x150>)
 800859e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085a0:	4b4d      	ldr	r3, [pc, #308]	; (80086d8 <USBD_SetConfig+0x150>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d905      	bls.n	80085b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f985 	bl	80088ba <USBD_CtlError>
    return USBD_FAIL;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e08c      	b.n	80086ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d002      	beq.n	80085c6 <USBD_SetConfig+0x3e>
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d029      	beq.n	8008618 <USBD_SetConfig+0x90>
 80085c4:	e075      	b.n	80086b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085c6:	4b44      	ldr	r3, [pc, #272]	; (80086d8 <USBD_SetConfig+0x150>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d020      	beq.n	8008610 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085ce:	4b42      	ldr	r3, [pc, #264]	; (80086d8 <USBD_SetConfig+0x150>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085d8:	4b3f      	ldr	r3, [pc, #252]	; (80086d8 <USBD_SetConfig+0x150>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fe ffe7 	bl	80075b2 <USBD_SetClassConfig>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d008      	beq.n	8008600 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f962 	bl	80088ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2202      	movs	r2, #2
 80085fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085fe:	e065      	b.n	80086cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fa25 	bl	8008a50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2203      	movs	r2, #3
 800860a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800860e:	e05d      	b.n	80086cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fa1d 	bl	8008a50 <USBD_CtlSendStatus>
      break;
 8008616:	e059      	b.n	80086cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008618:	4b2f      	ldr	r3, [pc, #188]	; (80086d8 <USBD_SetConfig+0x150>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d112      	bne.n	8008646 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008628:	4b2b      	ldr	r3, [pc, #172]	; (80086d8 <USBD_SetConfig+0x150>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	461a      	mov	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008632:	4b29      	ldr	r3, [pc, #164]	; (80086d8 <USBD_SetConfig+0x150>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7fe ffd6 	bl	80075ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa06 	bl	8008a50 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008644:	e042      	b.n	80086cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008646:	4b24      	ldr	r3, [pc, #144]	; (80086d8 <USBD_SetConfig+0x150>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	429a      	cmp	r2, r3
 8008652:	d02a      	beq.n	80086aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7fe ffc4 	bl	80075ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008662:	4b1d      	ldr	r3, [pc, #116]	; (80086d8 <USBD_SetConfig+0x150>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800866c:	4b1a      	ldr	r3, [pc, #104]	; (80086d8 <USBD_SetConfig+0x150>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7fe ff9d 	bl	80075b2 <USBD_SetClassConfig>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00f      	beq.n	80086a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f918 	bl	80088ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7fe ffa9 	bl	80075ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086a0:	e014      	b.n	80086cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f9d4 	bl	8008a50 <USBD_CtlSendStatus>
      break;
 80086a8:	e010      	b.n	80086cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f9d0 	bl	8008a50 <USBD_CtlSendStatus>
      break;
 80086b0:	e00c      	b.n	80086cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f900 	bl	80088ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086ba:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <USBD_SetConfig+0x150>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7fe ff92 	bl	80075ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	73fb      	strb	r3, [r7, #15]
      break;
 80086ca:	bf00      	nop
  }

  return ret;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	200002c0 	.word	0x200002c0

080086dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	88db      	ldrh	r3, [r3, #6]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d004      	beq.n	80086f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f8e2 	bl	80088ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086f6:	e023      	b.n	8008740 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b02      	cmp	r3, #2
 8008702:	dc02      	bgt.n	800870a <USBD_GetConfig+0x2e>
 8008704:	2b00      	cmp	r3, #0
 8008706:	dc03      	bgt.n	8008710 <USBD_GetConfig+0x34>
 8008708:	e015      	b.n	8008736 <USBD_GetConfig+0x5a>
 800870a:	2b03      	cmp	r3, #3
 800870c:	d00b      	beq.n	8008726 <USBD_GetConfig+0x4a>
 800870e:	e012      	b.n	8008736 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3308      	adds	r3, #8
 800871a:	2201      	movs	r2, #1
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f93c 	bl	800899c <USBD_CtlSendData>
        break;
 8008724:	e00c      	b.n	8008740 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3304      	adds	r3, #4
 800872a:	2201      	movs	r2, #1
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f934 	bl	800899c <USBD_CtlSendData>
        break;
 8008734:	e004      	b.n	8008740 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f8be 	bl	80088ba <USBD_CtlError>
        break;
 800873e:	bf00      	nop
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008758:	b2db      	uxtb	r3, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	2b02      	cmp	r3, #2
 800875e:	d81e      	bhi.n	800879e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	88db      	ldrh	r3, [r3, #6]
 8008764:	2b02      	cmp	r3, #2
 8008766:	d004      	beq.n	8008772 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f8a5 	bl	80088ba <USBD_CtlError>
        break;
 8008770:	e01a      	b.n	80087a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f043 0202 	orr.w	r2, r3, #2
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	330c      	adds	r3, #12
 8008792:	2202      	movs	r2, #2
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f900 	bl	800899c <USBD_CtlSendData>
      break;
 800879c:	e004      	b.n	80087a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f88a 	bl	80088ba <USBD_CtlError>
      break;
 80087a6:	bf00      	nop
  }
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	885b      	ldrh	r3, [r3, #2]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d107      	bne.n	80087d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f940 	bl	8008a50 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087d0:	e013      	b.n	80087fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d10b      	bne.n	80087f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	889b      	ldrh	r3, [r3, #4]
 80087de:	0a1b      	lsrs	r3, r3, #8
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f930 	bl	8008a50 <USBD_CtlSendStatus>
}
 80087f0:	e003      	b.n	80087fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f860 	bl	80088ba <USBD_CtlError>
}
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008812:	b2db      	uxtb	r3, r3
 8008814:	3b01      	subs	r3, #1
 8008816:	2b02      	cmp	r3, #2
 8008818:	d80b      	bhi.n	8008832 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	885b      	ldrh	r3, [r3, #2]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d10c      	bne.n	800883c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f910 	bl	8008a50 <USBD_CtlSendStatus>
      }
      break;
 8008830:	e004      	b.n	800883c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f840 	bl	80088ba <USBD_CtlError>
      break;
 800883a:	e000      	b.n	800883e <USBD_ClrFeature+0x3c>
      break;
 800883c:	bf00      	nop
  }
}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	781a      	ldrb	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	781a      	ldrb	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3301      	adds	r3, #1
 800886e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f7ff fa41 	bl	8007cf8 <SWAPBYTE>
 8008876:	4603      	mov	r3, r0
 8008878:	461a      	mov	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3301      	adds	r3, #1
 8008882:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3301      	adds	r3, #1
 8008888:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f7ff fa34 	bl	8007cf8 <SWAPBYTE>
 8008890:	4603      	mov	r3, r0
 8008892:	461a      	mov	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3301      	adds	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3301      	adds	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f7ff fa27 	bl	8007cf8 <SWAPBYTE>
 80088aa:	4603      	mov	r3, r0
 80088ac:	461a      	mov	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	80da      	strh	r2, [r3, #6]
}
 80088b2:	bf00      	nop
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088c4:	2180      	movs	r1, #128	; 0x80
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fcd6 	bl	8009278 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088cc:	2100      	movs	r1, #0
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fcd2 	bl	8009278 <USBD_LL_StallEP>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d036      	beq.n	8008960 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088f6:	6938      	ldr	r0, [r7, #16]
 80088f8:	f000 f836 	bl	8008968 <USBD_GetLen>
 80088fc:	4603      	mov	r3, r0
 80088fe:	3301      	adds	r3, #1
 8008900:	b29b      	uxth	r3, r3
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	4413      	add	r3, r2
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	7812      	ldrb	r2, [r2, #0]
 8008914:	701a      	strb	r2, [r3, #0]
  idx++;
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	3301      	adds	r3, #1
 800891a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	4413      	add	r3, r2
 8008922:	2203      	movs	r2, #3
 8008924:	701a      	strb	r2, [r3, #0]
  idx++;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	3301      	adds	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800892c:	e013      	b.n	8008956 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	4413      	add	r3, r2
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	7812      	ldrb	r2, [r2, #0]
 8008938:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	3301      	adds	r3, #1
 800893e:	613b      	str	r3, [r7, #16]
    idx++;
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	3301      	adds	r3, #1
 8008944:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	4413      	add	r3, r2
 800894c:	2200      	movs	r2, #0
 800894e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	3301      	adds	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e7      	bne.n	800892e <USBD_GetString+0x52>
 800895e:	e000      	b.n	8008962 <USBD_GetString+0x86>
    return;
 8008960:	bf00      	nop
  }
}
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008978:	e005      	b.n	8008986 <USBD_GetLen+0x1e>
  {
    len++;
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	3301      	adds	r3, #1
 800897e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	3301      	adds	r3, #1
 8008984:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1f5      	bne.n	800897a <USBD_GetLen+0x12>
  }

  return len;
 800898e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	2100      	movs	r1, #0
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 fce1 	bl	800938a <USBD_LL_Transmit>

  return USBD_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	2100      	movs	r1, #0
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fcd0 	bl	800938a <USBD_LL_Transmit>

  return USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2203      	movs	r2, #3
 8008a04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 fcd4 	bl	80093cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	2100      	movs	r1, #0
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fcc3 	bl	80093cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2204      	movs	r2, #4
 8008a5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a60:	2300      	movs	r3, #0
 8008a62:	2200      	movs	r2, #0
 8008a64:	2100      	movs	r1, #0
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc8f 	bl	800938a <USBD_LL_Transmit>

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2205      	movs	r2, #5
 8008a82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a86:	2300      	movs	r3, #0
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fc9d 	bl	80093cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4912      	ldr	r1, [pc, #72]	; (8008aec <MX_USB_DEVICE_Init+0x50>)
 8008aa4:	4812      	ldr	r0, [pc, #72]	; (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008aa6:	f7fe fd07 	bl	80074b8 <USBD_Init>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ab0:	f7f8 faf0 	bl	8001094 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ab4:	490f      	ldr	r1, [pc, #60]	; (8008af4 <MX_USB_DEVICE_Init+0x58>)
 8008ab6:	480e      	ldr	r0, [pc, #56]	; (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008ab8:	f7fe fd2e 	bl	8007518 <USBD_RegisterClass>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ac2:	f7f8 fae7 	bl	8001094 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ac6:	490c      	ldr	r1, [pc, #48]	; (8008af8 <MX_USB_DEVICE_Init+0x5c>)
 8008ac8:	4809      	ldr	r0, [pc, #36]	; (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008aca:	f7fe fc1f 	bl	800730c <USBD_CDC_RegisterInterface>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ad4:	f7f8 fade 	bl	8001094 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ad8:	4805      	ldr	r0, [pc, #20]	; (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008ada:	f7fe fd53 	bl	8007584 <USBD_Start>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ae4:	f7f8 fad6 	bl	8001094 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ae8:	bf00      	nop
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	200000bc 	.word	0x200000bc
 8008af0:	200002c4 	.word	0x200002c4
 8008af4:	20000028 	.word	0x20000028
 8008af8:	200000a8 	.word	0x200000a8

08008afc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b00:	2200      	movs	r2, #0
 8008b02:	4905      	ldr	r1, [pc, #20]	; (8008b18 <CDC_Init_FS+0x1c>)
 8008b04:	4805      	ldr	r0, [pc, #20]	; (8008b1c <CDC_Init_FS+0x20>)
 8008b06:	f7fe fc1b 	bl	8007340 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b0a:	4905      	ldr	r1, [pc, #20]	; (8008b20 <CDC_Init_FS+0x24>)
 8008b0c:	4803      	ldr	r0, [pc, #12]	; (8008b1c <CDC_Init_FS+0x20>)
 8008b0e:	f7fe fc39 	bl	8007384 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8008b12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	200009a0 	.word	0x200009a0
 8008b1c:	200002c4 	.word	0x200002c4
 8008b20:	200005a0 	.word	0x200005a0

08008b24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8008b28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
 8008b40:	4613      	mov	r3, r2
 8008b42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	2b23      	cmp	r3, #35	; 0x23
 8008b48:	d84a      	bhi.n	8008be0 <CDC_Control_FS+0xac>
 8008b4a:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <CDC_Control_FS+0x1c>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008be1 	.word	0x08008be1
 8008b54:	08008be1 	.word	0x08008be1
 8008b58:	08008be1 	.word	0x08008be1
 8008b5c:	08008be1 	.word	0x08008be1
 8008b60:	08008be1 	.word	0x08008be1
 8008b64:	08008be1 	.word	0x08008be1
 8008b68:	08008be1 	.word	0x08008be1
 8008b6c:	08008be1 	.word	0x08008be1
 8008b70:	08008be1 	.word	0x08008be1
 8008b74:	08008be1 	.word	0x08008be1
 8008b78:	08008be1 	.word	0x08008be1
 8008b7c:	08008be1 	.word	0x08008be1
 8008b80:	08008be1 	.word	0x08008be1
 8008b84:	08008be1 	.word	0x08008be1
 8008b88:	08008be1 	.word	0x08008be1
 8008b8c:	08008be1 	.word	0x08008be1
 8008b90:	08008be1 	.word	0x08008be1
 8008b94:	08008be1 	.word	0x08008be1
 8008b98:	08008be1 	.word	0x08008be1
 8008b9c:	08008be1 	.word	0x08008be1
 8008ba0:	08008be1 	.word	0x08008be1
 8008ba4:	08008be1 	.word	0x08008be1
 8008ba8:	08008be1 	.word	0x08008be1
 8008bac:	08008be1 	.word	0x08008be1
 8008bb0:	08008be1 	.word	0x08008be1
 8008bb4:	08008be1 	.word	0x08008be1
 8008bb8:	08008be1 	.word	0x08008be1
 8008bbc:	08008be1 	.word	0x08008be1
 8008bc0:	08008be1 	.word	0x08008be1
 8008bc4:	08008be1 	.word	0x08008be1
 8008bc8:	08008be1 	.word	0x08008be1
 8008bcc:	08008be1 	.word	0x08008be1
 8008bd0:	08008be1 	.word	0x08008be1
 8008bd4:	08008be1 	.word	0x08008be1
 8008bd8:	08008be1 	.word	0x08008be1
 8008bdc:	08008be1 	.word	0x08008be1
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8008be0:	bf00      	nop
    }

    return (USBD_OK);
 8008be2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	4805      	ldr	r0, [pc, #20]	; (8008c14 <CDC_Receive_FS+0x24>)
 8008bfe:	f7fe fbc1 	bl	8007384 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c02:	4804      	ldr	r0, [pc, #16]	; (8008c14 <CDC_Receive_FS+0x24>)
 8008c04:	f7fe fc22 	bl	800744c <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8008c08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	200002c4 	.word	0x200002c4

08008c18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8008c28:	4b0d      	ldr	r3, [pc, #52]	; (8008c60 <CDC_Transmit_FS+0x48>)
 8008c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c2e:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e00b      	b.n	8008c56 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c3e:	887b      	ldrh	r3, [r7, #2]
 8008c40:	461a      	mov	r2, r3
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	4806      	ldr	r0, [pc, #24]	; (8008c60 <CDC_Transmit_FS+0x48>)
 8008c46:	f7fe fb7b 	bl	8007340 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c4a:	4805      	ldr	r0, [pc, #20]	; (8008c60 <CDC_Transmit_FS+0x48>)
 8008c4c:	f7fe fbb8 	bl	80073c0 <USBD_CDC_TransmitPacket>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	200002c4 	.word	0x200002c4

08008c64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	6039      	str	r1, [r7, #0]
 8008c92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2212      	movs	r2, #18
 8008c98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c9a:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	200000d8 	.word	0x200000d8

08008cac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6039      	str	r1, [r7, #0]
 8008cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2204      	movs	r2, #4
 8008cbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cbe:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	200000ec 	.word	0x200000ec

08008cd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	6039      	str	r1, [r7, #0]
 8008cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d105      	bne.n	8008cee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	4907      	ldr	r1, [pc, #28]	; (8008d04 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ce6:	4808      	ldr	r0, [pc, #32]	; (8008d08 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ce8:	f7ff fdf8 	bl	80088dc <USBD_GetString>
 8008cec:	e004      	b.n	8008cf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	4904      	ldr	r1, [pc, #16]	; (8008d04 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cf2:	4805      	ldr	r0, [pc, #20]	; (8008d08 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cf4:	f7ff fdf2 	bl	80088dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cf8:	4b02      	ldr	r3, [pc, #8]	; (8008d04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000da0 	.word	0x20000da0
 8008d08:	08009938 	.word	0x08009938

08008d0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	4904      	ldr	r1, [pc, #16]	; (8008d2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d1c:	4804      	ldr	r0, [pc, #16]	; (8008d30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d1e:	f7ff fddd 	bl	80088dc <USBD_GetString>
  return USBD_StrDesc;
 8008d22:	4b02      	ldr	r3, [pc, #8]	; (8008d2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20000da0 	.word	0x20000da0
 8008d30:	08009950 	.word	0x08009950

08008d34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	6039      	str	r1, [r7, #0]
 8008d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	221a      	movs	r2, #26
 8008d44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d46:	f000 f843 	bl	8008dd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d4a:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	200000f0 	.word	0x200000f0

08008d58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d64:	79fb      	ldrb	r3, [r7, #7]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d105      	bne.n	8008d76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	4907      	ldr	r1, [pc, #28]	; (8008d8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d6e:	4808      	ldr	r0, [pc, #32]	; (8008d90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d70:	f7ff fdb4 	bl	80088dc <USBD_GetString>
 8008d74:	e004      	b.n	8008d80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	4904      	ldr	r1, [pc, #16]	; (8008d8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d7a:	4805      	ldr	r0, [pc, #20]	; (8008d90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d7c:	f7ff fdae 	bl	80088dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d80:	4b02      	ldr	r3, [pc, #8]	; (8008d8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000da0 	.word	0x20000da0
 8008d90:	08009964 	.word	0x08009964

08008d94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d105      	bne.n	8008db2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	4907      	ldr	r1, [pc, #28]	; (8008dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008daa:	4808      	ldr	r0, [pc, #32]	; (8008dcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dac:	f7ff fd96 	bl	80088dc <USBD_GetString>
 8008db0:	e004      	b.n	8008dbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4904      	ldr	r1, [pc, #16]	; (8008dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008db6:	4805      	ldr	r0, [pc, #20]	; (8008dcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008db8:	f7ff fd90 	bl	80088dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dbc:	4b02      	ldr	r3, [pc, #8]	; (8008dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000da0 	.word	0x20000da0
 8008dcc:	08009970 	.word	0x08009970

08008dd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dd6:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <Get_SerialNum+0x44>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ddc:	4b0e      	ldr	r3, [pc, #56]	; (8008e18 <Get_SerialNum+0x48>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008de2:	4b0e      	ldr	r3, [pc, #56]	; (8008e1c <Get_SerialNum+0x4c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d009      	beq.n	8008e0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008df6:	2208      	movs	r2, #8
 8008df8:	4909      	ldr	r1, [pc, #36]	; (8008e20 <Get_SerialNum+0x50>)
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 f814 	bl	8008e28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e00:	2204      	movs	r2, #4
 8008e02:	4908      	ldr	r1, [pc, #32]	; (8008e24 <Get_SerialNum+0x54>)
 8008e04:	68b8      	ldr	r0, [r7, #8]
 8008e06:	f000 f80f 	bl	8008e28 <IntToUnicode>
  }
}
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	1fff7a10 	.word	0x1fff7a10
 8008e18:	1fff7a14 	.word	0x1fff7a14
 8008e1c:	1fff7a18 	.word	0x1fff7a18
 8008e20:	200000f2 	.word	0x200000f2
 8008e24:	20000102 	.word	0x20000102

08008e28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	4613      	mov	r3, r2
 8008e34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]
 8008e3e:	e027      	b.n	8008e90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	0f1b      	lsrs	r3, r3, #28
 8008e44:	2b09      	cmp	r3, #9
 8008e46:	d80b      	bhi.n	8008e60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	0f1b      	lsrs	r3, r3, #28
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	005b      	lsls	r3, r3, #1
 8008e52:	4619      	mov	r1, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	440b      	add	r3, r1
 8008e58:	3230      	adds	r2, #48	; 0x30
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	e00a      	b.n	8008e76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	0f1b      	lsrs	r3, r3, #28
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	440b      	add	r3, r1
 8008e70:	3237      	adds	r2, #55	; 0x37
 8008e72:	b2d2      	uxtb	r2, r2
 8008e74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	3301      	adds	r3, #1
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	4413      	add	r3, r2
 8008e86:	2200      	movs	r2, #0
 8008e88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	75fb      	strb	r3, [r7, #23]
 8008e90:	7dfa      	ldrb	r2, [r7, #23]
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d3d3      	bcc.n	8008e40 <IntToUnicode+0x18>
  }
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
	...

08008ea8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08a      	sub	sp, #40	; 0x28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb0:	f107 0314 	add.w	r3, r7, #20
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	605a      	str	r2, [r3, #4]
 8008eba:	609a      	str	r2, [r3, #8]
 8008ebc:	60da      	str	r2, [r3, #12]
 8008ebe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ec8:	d13a      	bne.n	8008f40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eca:	2300      	movs	r3, #0
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	4b1e      	ldr	r3, [pc, #120]	; (8008f48 <HAL_PCD_MspInit+0xa0>)
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	4a1d      	ldr	r2, [pc, #116]	; (8008f48 <HAL_PCD_MspInit+0xa0>)
 8008ed4:	f043 0301 	orr.w	r3, r3, #1
 8008ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8008eda:	4b1b      	ldr	r3, [pc, #108]	; (8008f48 <HAL_PCD_MspInit+0xa0>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	613b      	str	r3, [r7, #16]
 8008ee4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008ee6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eec:	2302      	movs	r3, #2
 8008eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ef8:	230a      	movs	r3, #10
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008efc:	f107 0314 	add.w	r3, r7, #20
 8008f00:	4619      	mov	r1, r3
 8008f02:	4812      	ldr	r0, [pc, #72]	; (8008f4c <HAL_PCD_MspInit+0xa4>)
 8008f04:	f7f9 f8f2 	bl	80020ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f08:	4b0f      	ldr	r3, [pc, #60]	; (8008f48 <HAL_PCD_MspInit+0xa0>)
 8008f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f0c:	4a0e      	ldr	r2, [pc, #56]	; (8008f48 <HAL_PCD_MspInit+0xa0>)
 8008f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f12:	6353      	str	r3, [r2, #52]	; 0x34
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <HAL_PCD_MspInit+0xa0>)
 8008f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f1c:	4a0a      	ldr	r2, [pc, #40]	; (8008f48 <HAL_PCD_MspInit+0xa0>)
 8008f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f22:	6453      	str	r3, [r2, #68]	; 0x44
 8008f24:	4b08      	ldr	r3, [pc, #32]	; (8008f48 <HAL_PCD_MspInit+0xa0>)
 8008f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f2c:	60fb      	str	r3, [r7, #12]
 8008f2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f30:	2200      	movs	r2, #0
 8008f32:	2100      	movs	r1, #0
 8008f34:	2043      	movs	r0, #67	; 0x43
 8008f36:	f7f8 ff42 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f3a:	2043      	movs	r0, #67	; 0x43
 8008f3c:	f7f8 ff5b 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f40:	bf00      	nop
 8008f42:	3728      	adds	r7, #40	; 0x28
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40023800 	.word	0x40023800
 8008f4c:	40020000 	.word	0x40020000

08008f50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7fe fb59 	bl	800761e <USBD_LL_SetupStage>
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f7fe fb93 	bl	80076c8 <USBD_LL_DataOutStage>
}
 8008fa2:	bf00      	nop
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008fbc:	78fa      	ldrb	r2, [r7, #3]
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	334c      	adds	r3, #76	; 0x4c
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	78fb      	ldrb	r3, [r7, #3]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	f7fe fc2c 	bl	800782e <USBD_LL_DataInStage>
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe fd60 	bl	8007ab2 <USBD_LL_SOF>
}
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009002:	2301      	movs	r3, #1
 8009004:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d001      	beq.n	8009012 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800900e:	f7f8 f841 	bl	8001094 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009018:	7bfa      	ldrb	r2, [r7, #15]
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f7fe fd0a 	bl	8007a36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fcb2 	bl	8007992 <USBD_LL_Reset>
}
 800902e:	bf00      	nop
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fd05 	bl	8007a56 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	6812      	ldr	r2, [r2, #0]
 800905a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d005      	beq.n	8009078 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800906c:	4b04      	ldr	r3, [pc, #16]	; (8009080 <HAL_PCD_SuspendCallback+0x48>)
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	4a03      	ldr	r2, [pc, #12]	; (8009080 <HAL_PCD_SuspendCallback+0x48>)
 8009072:	f043 0306 	orr.w	r3, r3, #6
 8009076:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8009078:	bf00      	nop
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	e000ed00 	.word	0xe000ed00

08009084 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fcf5 	bl	8007a82 <USBD_LL_Resume>
}
 8009098:	bf00      	nop
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090b2:	78fa      	ldrb	r2, [r7, #3]
 80090b4:	4611      	mov	r1, r2
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe fd4d 	bl	8007b56 <USBD_LL_IsoOUTIncomplete>
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090d6:	78fa      	ldrb	r2, [r7, #3]
 80090d8:	4611      	mov	r1, r2
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe fd09 	bl	8007af2 <USBD_LL_IsoINIncomplete>
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fe fd5f 	bl	8007bba <USBD_LL_DevConnected>
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe fd5c 	bl	8007bd0 <USBD_LL_DevDisconnected>
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d13c      	bne.n	80091aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009130:	4a20      	ldr	r2, [pc, #128]	; (80091b4 <USBD_LL_Init+0x94>)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a1e      	ldr	r2, [pc, #120]	; (80091b4 <USBD_LL_Init+0x94>)
 800913c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009140:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <USBD_LL_Init+0x94>)
 8009142:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009146:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009148:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <USBD_LL_Init+0x94>)
 800914a:	2204      	movs	r2, #4
 800914c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800914e:	4b19      	ldr	r3, [pc, #100]	; (80091b4 <USBD_LL_Init+0x94>)
 8009150:	2202      	movs	r2, #2
 8009152:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009154:	4b17      	ldr	r3, [pc, #92]	; (80091b4 <USBD_LL_Init+0x94>)
 8009156:	2200      	movs	r2, #0
 8009158:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800915a:	4b16      	ldr	r3, [pc, #88]	; (80091b4 <USBD_LL_Init+0x94>)
 800915c:	2202      	movs	r2, #2
 800915e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009160:	4b14      	ldr	r3, [pc, #80]	; (80091b4 <USBD_LL_Init+0x94>)
 8009162:	2200      	movs	r2, #0
 8009164:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009166:	4b13      	ldr	r3, [pc, #76]	; (80091b4 <USBD_LL_Init+0x94>)
 8009168:	2200      	movs	r2, #0
 800916a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800916c:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <USBD_LL_Init+0x94>)
 800916e:	2200      	movs	r2, #0
 8009170:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009172:	4b10      	ldr	r3, [pc, #64]	; (80091b4 <USBD_LL_Init+0x94>)
 8009174:	2200      	movs	r2, #0
 8009176:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009178:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <USBD_LL_Init+0x94>)
 800917a:	2200      	movs	r2, #0
 800917c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800917e:	480d      	ldr	r0, [pc, #52]	; (80091b4 <USBD_LL_Init+0x94>)
 8009180:	f7f9 fa7c 	bl	800267c <HAL_PCD_Init>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800918a:	f7f7 ff83 	bl	8001094 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800918e:	2180      	movs	r1, #128	; 0x80
 8009190:	4808      	ldr	r0, [pc, #32]	; (80091b4 <USBD_LL_Init+0x94>)
 8009192:	f7fa fcd4 	bl	8003b3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009196:	2240      	movs	r2, #64	; 0x40
 8009198:	2100      	movs	r1, #0
 800919a:	4806      	ldr	r0, [pc, #24]	; (80091b4 <USBD_LL_Init+0x94>)
 800919c:	f7fa fc88 	bl	8003ab0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091a0:	2280      	movs	r2, #128	; 0x80
 80091a2:	2101      	movs	r1, #1
 80091a4:	4803      	ldr	r0, [pc, #12]	; (80091b4 <USBD_LL_Init+0x94>)
 80091a6:	f7fa fc83 	bl	8003ab0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20000fa0 	.word	0x20000fa0

080091b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7f9 fb71 	bl	80028b6 <HAL_PCD_Start>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 f942 	bl	8009464 <USBD_Get_USB_Status>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	4608      	mov	r0, r1
 80091f8:	4611      	mov	r1, r2
 80091fa:	461a      	mov	r2, r3
 80091fc:	4603      	mov	r3, r0
 80091fe:	70fb      	strb	r3, [r7, #3]
 8009200:	460b      	mov	r3, r1
 8009202:	70bb      	strb	r3, [r7, #2]
 8009204:	4613      	mov	r3, r2
 8009206:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009216:	78bb      	ldrb	r3, [r7, #2]
 8009218:	883a      	ldrh	r2, [r7, #0]
 800921a:	78f9      	ldrb	r1, [r7, #3]
 800921c:	f7fa f842 	bl	80032a4 <HAL_PCD_EP_Open>
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	4618      	mov	r0, r3
 8009228:	f000 f91c 	bl	8009464 <USBD_Get_USB_Status>
 800922c:	4603      	mov	r3, r0
 800922e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009230:	7bbb      	ldrb	r3, [r7, #14]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	460b      	mov	r3, r1
 8009244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009254:	78fa      	ldrb	r2, [r7, #3]
 8009256:	4611      	mov	r1, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7fa f88b 	bl	8003374 <HAL_PCD_EP_Close>
 800925e:	4603      	mov	r3, r0
 8009260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	4618      	mov	r0, r3
 8009266:	f000 f8fd 	bl	8009464 <USBD_Get_USB_Status>
 800926a:	4603      	mov	r3, r0
 800926c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800926e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009292:	78fa      	ldrb	r2, [r7, #3]
 8009294:	4611      	mov	r1, r2
 8009296:	4618      	mov	r0, r3
 8009298:	f7fa f963 	bl	8003562 <HAL_PCD_EP_SetStall>
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 f8de 	bl	8009464 <USBD_Get_USB_Status>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	4611      	mov	r1, r2
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fa f9a8 	bl	800362a <HAL_PCD_EP_ClrStall>
 80092da:	4603      	mov	r3, r0
 80092dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 f8bf 	bl	8009464 <USBD_Get_USB_Status>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009306:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800930c:	2b00      	cmp	r3, #0
 800930e:	da0b      	bge.n	8009328 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	4613      	mov	r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4413      	add	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	333e      	adds	r3, #62	; 0x3e
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	e00b      	b.n	8009340 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009328:	78fb      	ldrb	r3, [r7, #3]
 800932a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800932e:	68f9      	ldr	r1, [r7, #12]
 8009330:	4613      	mov	r3, r2
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	440b      	add	r3, r1
 800933a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800933e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009366:	78fa      	ldrb	r2, [r7, #3]
 8009368:	4611      	mov	r1, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f7f9 ff75 	bl	800325a <HAL_PCD_SetAddress>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f874 	bl	8009464 <USBD_Get_USB_Status>
 800937c:	4603      	mov	r3, r0
 800937e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009380:	7bbb      	ldrb	r3, [r7, #14]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b086      	sub	sp, #24
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
 8009396:	460b      	mov	r3, r1
 8009398:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093a8:	7af9      	ldrb	r1, [r7, #11]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	f7fa f88e 	bl	80034ce <HAL_PCD_EP_Transmit>
 80093b2:	4603      	mov	r3, r0
 80093b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f853 	bl	8009464 <USBD_Get_USB_Status>
 80093be:	4603      	mov	r3, r0
 80093c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	607a      	str	r2, [r7, #4]
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	460b      	mov	r3, r1
 80093da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093ea:	7af9      	ldrb	r1, [r7, #11]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	f7fa f80a 	bl	8003408 <HAL_PCD_EP_Receive>
 80093f4:	4603      	mov	r3, r0
 80093f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 f832 	bl	8009464 <USBD_Get_USB_Status>
 8009400:	4603      	mov	r3, r0
 8009402:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009404:	7dbb      	ldrb	r3, [r7, #22]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009420:	78fa      	ldrb	r2, [r7, #3]
 8009422:	4611      	mov	r1, r2
 8009424:	4618      	mov	r0, r3
 8009426:	f7fa f83a 	bl	800349e <HAL_PCD_EP_GetRxCount>
 800942a:	4603      	mov	r3, r0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800943c:	4b03      	ldr	r3, [pc, #12]	; (800944c <USBD_static_malloc+0x18>)
}
 800943e:	4618      	mov	r0, r3
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	200014ac 	.word	0x200014ac

08009450 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]

}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009472:	79fb      	ldrb	r3, [r7, #7]
 8009474:	2b03      	cmp	r3, #3
 8009476:	d817      	bhi.n	80094a8 <USBD_Get_USB_Status+0x44>
 8009478:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <USBD_Get_USB_Status+0x1c>)
 800947a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947e:	bf00      	nop
 8009480:	08009491 	.word	0x08009491
 8009484:	08009497 	.word	0x08009497
 8009488:	0800949d 	.word	0x0800949d
 800948c:	080094a3 	.word	0x080094a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]
    break;
 8009494:	e00b      	b.n	80094ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009496:	2303      	movs	r3, #3
 8009498:	73fb      	strb	r3, [r7, #15]
    break;
 800949a:	e008      	b.n	80094ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800949c:	2301      	movs	r3, #1
 800949e:	73fb      	strb	r3, [r7, #15]
    break;
 80094a0:	e005      	b.n	80094ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094a2:	2303      	movs	r3, #3
 80094a4:	73fb      	strb	r3, [r7, #15]
    break;
 80094a6:	e002      	b.n	80094ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094a8:	2303      	movs	r3, #3
 80094aa:	73fb      	strb	r3, [r7, #15]
    break;
 80094ac:	bf00      	nop
  }
  return usb_status;
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <malloc>:
 80094bc:	4b02      	ldr	r3, [pc, #8]	; (80094c8 <malloc+0xc>)
 80094be:	4601      	mov	r1, r0
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	f000 b82b 	b.w	800951c <_malloc_r>
 80094c6:	bf00      	nop
 80094c8:	20000158 	.word	0x20000158

080094cc <free>:
 80094cc:	4b02      	ldr	r3, [pc, #8]	; (80094d8 <free+0xc>)
 80094ce:	4601      	mov	r1, r0
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	f000 b903 	b.w	80096dc <_free_r>
 80094d6:	bf00      	nop
 80094d8:	20000158 	.word	0x20000158

080094dc <sbrk_aligned>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	4e0e      	ldr	r6, [pc, #56]	; (8009518 <sbrk_aligned+0x3c>)
 80094e0:	460c      	mov	r4, r1
 80094e2:	6831      	ldr	r1, [r6, #0]
 80094e4:	4605      	mov	r5, r0
 80094e6:	b911      	cbnz	r1, 80094ee <sbrk_aligned+0x12>
 80094e8:	f000 f8bc 	bl	8009664 <_sbrk_r>
 80094ec:	6030      	str	r0, [r6, #0]
 80094ee:	4621      	mov	r1, r4
 80094f0:	4628      	mov	r0, r5
 80094f2:	f000 f8b7 	bl	8009664 <_sbrk_r>
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	d00a      	beq.n	8009510 <sbrk_aligned+0x34>
 80094fa:	1cc4      	adds	r4, r0, #3
 80094fc:	f024 0403 	bic.w	r4, r4, #3
 8009500:	42a0      	cmp	r0, r4
 8009502:	d007      	beq.n	8009514 <sbrk_aligned+0x38>
 8009504:	1a21      	subs	r1, r4, r0
 8009506:	4628      	mov	r0, r5
 8009508:	f000 f8ac 	bl	8009664 <_sbrk_r>
 800950c:	3001      	adds	r0, #1
 800950e:	d101      	bne.n	8009514 <sbrk_aligned+0x38>
 8009510:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009514:	4620      	mov	r0, r4
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	200016d0 	.word	0x200016d0

0800951c <_malloc_r>:
 800951c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009520:	1ccd      	adds	r5, r1, #3
 8009522:	f025 0503 	bic.w	r5, r5, #3
 8009526:	3508      	adds	r5, #8
 8009528:	2d0c      	cmp	r5, #12
 800952a:	bf38      	it	cc
 800952c:	250c      	movcc	r5, #12
 800952e:	2d00      	cmp	r5, #0
 8009530:	4607      	mov	r7, r0
 8009532:	db01      	blt.n	8009538 <_malloc_r+0x1c>
 8009534:	42a9      	cmp	r1, r5
 8009536:	d905      	bls.n	8009544 <_malloc_r+0x28>
 8009538:	230c      	movs	r3, #12
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	2600      	movs	r6, #0
 800953e:	4630      	mov	r0, r6
 8009540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009544:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009618 <_malloc_r+0xfc>
 8009548:	f000 f868 	bl	800961c <__malloc_lock>
 800954c:	f8d8 3000 	ldr.w	r3, [r8]
 8009550:	461c      	mov	r4, r3
 8009552:	bb5c      	cbnz	r4, 80095ac <_malloc_r+0x90>
 8009554:	4629      	mov	r1, r5
 8009556:	4638      	mov	r0, r7
 8009558:	f7ff ffc0 	bl	80094dc <sbrk_aligned>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	4604      	mov	r4, r0
 8009560:	d155      	bne.n	800960e <_malloc_r+0xf2>
 8009562:	f8d8 4000 	ldr.w	r4, [r8]
 8009566:	4626      	mov	r6, r4
 8009568:	2e00      	cmp	r6, #0
 800956a:	d145      	bne.n	80095f8 <_malloc_r+0xdc>
 800956c:	2c00      	cmp	r4, #0
 800956e:	d048      	beq.n	8009602 <_malloc_r+0xe6>
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	4631      	mov	r1, r6
 8009574:	4638      	mov	r0, r7
 8009576:	eb04 0903 	add.w	r9, r4, r3
 800957a:	f000 f873 	bl	8009664 <_sbrk_r>
 800957e:	4581      	cmp	r9, r0
 8009580:	d13f      	bne.n	8009602 <_malloc_r+0xe6>
 8009582:	6821      	ldr	r1, [r4, #0]
 8009584:	1a6d      	subs	r5, r5, r1
 8009586:	4629      	mov	r1, r5
 8009588:	4638      	mov	r0, r7
 800958a:	f7ff ffa7 	bl	80094dc <sbrk_aligned>
 800958e:	3001      	adds	r0, #1
 8009590:	d037      	beq.n	8009602 <_malloc_r+0xe6>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	442b      	add	r3, r5
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	f8d8 3000 	ldr.w	r3, [r8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d038      	beq.n	8009612 <_malloc_r+0xf6>
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	42a2      	cmp	r2, r4
 80095a4:	d12b      	bne.n	80095fe <_malloc_r+0xe2>
 80095a6:	2200      	movs	r2, #0
 80095a8:	605a      	str	r2, [r3, #4]
 80095aa:	e00f      	b.n	80095cc <_malloc_r+0xb0>
 80095ac:	6822      	ldr	r2, [r4, #0]
 80095ae:	1b52      	subs	r2, r2, r5
 80095b0:	d41f      	bmi.n	80095f2 <_malloc_r+0xd6>
 80095b2:	2a0b      	cmp	r2, #11
 80095b4:	d917      	bls.n	80095e6 <_malloc_r+0xca>
 80095b6:	1961      	adds	r1, r4, r5
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	6025      	str	r5, [r4, #0]
 80095bc:	bf18      	it	ne
 80095be:	6059      	strne	r1, [r3, #4]
 80095c0:	6863      	ldr	r3, [r4, #4]
 80095c2:	bf08      	it	eq
 80095c4:	f8c8 1000 	streq.w	r1, [r8]
 80095c8:	5162      	str	r2, [r4, r5]
 80095ca:	604b      	str	r3, [r1, #4]
 80095cc:	4638      	mov	r0, r7
 80095ce:	f104 060b 	add.w	r6, r4, #11
 80095d2:	f000 f829 	bl	8009628 <__malloc_unlock>
 80095d6:	f026 0607 	bic.w	r6, r6, #7
 80095da:	1d23      	adds	r3, r4, #4
 80095dc:	1af2      	subs	r2, r6, r3
 80095de:	d0ae      	beq.n	800953e <_malloc_r+0x22>
 80095e0:	1b9b      	subs	r3, r3, r6
 80095e2:	50a3      	str	r3, [r4, r2]
 80095e4:	e7ab      	b.n	800953e <_malloc_r+0x22>
 80095e6:	42a3      	cmp	r3, r4
 80095e8:	6862      	ldr	r2, [r4, #4]
 80095ea:	d1dd      	bne.n	80095a8 <_malloc_r+0x8c>
 80095ec:	f8c8 2000 	str.w	r2, [r8]
 80095f0:	e7ec      	b.n	80095cc <_malloc_r+0xb0>
 80095f2:	4623      	mov	r3, r4
 80095f4:	6864      	ldr	r4, [r4, #4]
 80095f6:	e7ac      	b.n	8009552 <_malloc_r+0x36>
 80095f8:	4634      	mov	r4, r6
 80095fa:	6876      	ldr	r6, [r6, #4]
 80095fc:	e7b4      	b.n	8009568 <_malloc_r+0x4c>
 80095fe:	4613      	mov	r3, r2
 8009600:	e7cc      	b.n	800959c <_malloc_r+0x80>
 8009602:	230c      	movs	r3, #12
 8009604:	603b      	str	r3, [r7, #0]
 8009606:	4638      	mov	r0, r7
 8009608:	f000 f80e 	bl	8009628 <__malloc_unlock>
 800960c:	e797      	b.n	800953e <_malloc_r+0x22>
 800960e:	6025      	str	r5, [r4, #0]
 8009610:	e7dc      	b.n	80095cc <_malloc_r+0xb0>
 8009612:	605b      	str	r3, [r3, #4]
 8009614:	deff      	udf	#255	; 0xff
 8009616:	bf00      	nop
 8009618:	200016cc 	.word	0x200016cc

0800961c <__malloc_lock>:
 800961c:	4801      	ldr	r0, [pc, #4]	; (8009624 <__malloc_lock+0x8>)
 800961e:	f000 b85b 	b.w	80096d8 <__retarget_lock_acquire_recursive>
 8009622:	bf00      	nop
 8009624:	20001810 	.word	0x20001810

08009628 <__malloc_unlock>:
 8009628:	4801      	ldr	r0, [pc, #4]	; (8009630 <__malloc_unlock+0x8>)
 800962a:	f000 b856 	b.w	80096da <__retarget_lock_release_recursive>
 800962e:	bf00      	nop
 8009630:	20001810 	.word	0x20001810

08009634 <memset>:
 8009634:	4402      	add	r2, r0
 8009636:	4603      	mov	r3, r0
 8009638:	4293      	cmp	r3, r2
 800963a:	d100      	bne.n	800963e <memset+0xa>
 800963c:	4770      	bx	lr
 800963e:	f803 1b01 	strb.w	r1, [r3], #1
 8009642:	e7f9      	b.n	8009638 <memset+0x4>

08009644 <strcat>:
 8009644:	b510      	push	{r4, lr}
 8009646:	4602      	mov	r2, r0
 8009648:	7814      	ldrb	r4, [r2, #0]
 800964a:	4613      	mov	r3, r2
 800964c:	3201      	adds	r2, #1
 800964e:	2c00      	cmp	r4, #0
 8009650:	d1fa      	bne.n	8009648 <strcat+0x4>
 8009652:	3b01      	subs	r3, #1
 8009654:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009658:	f803 2f01 	strb.w	r2, [r3, #1]!
 800965c:	2a00      	cmp	r2, #0
 800965e:	d1f9      	bne.n	8009654 <strcat+0x10>
 8009660:	bd10      	pop	{r4, pc}
	...

08009664 <_sbrk_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4d06      	ldr	r5, [pc, #24]	; (8009680 <_sbrk_r+0x1c>)
 8009668:	2300      	movs	r3, #0
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	602b      	str	r3, [r5, #0]
 8009670:	f7f7 feb2 	bl	80013d8 <_sbrk>
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d102      	bne.n	800967e <_sbrk_r+0x1a>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	b103      	cbz	r3, 800967e <_sbrk_r+0x1a>
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	bd38      	pop	{r3, r4, r5, pc}
 8009680:	2000180c 	.word	0x2000180c

08009684 <__errno>:
 8009684:	4b01      	ldr	r3, [pc, #4]	; (800968c <__errno+0x8>)
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	20000158 	.word	0x20000158

08009690 <__libc_init_array>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	4d0d      	ldr	r5, [pc, #52]	; (80096c8 <__libc_init_array+0x38>)
 8009694:	4c0d      	ldr	r4, [pc, #52]	; (80096cc <__libc_init_array+0x3c>)
 8009696:	1b64      	subs	r4, r4, r5
 8009698:	10a4      	asrs	r4, r4, #2
 800969a:	2600      	movs	r6, #0
 800969c:	42a6      	cmp	r6, r4
 800969e:	d109      	bne.n	80096b4 <__libc_init_array+0x24>
 80096a0:	4d0b      	ldr	r5, [pc, #44]	; (80096d0 <__libc_init_array+0x40>)
 80096a2:	4c0c      	ldr	r4, [pc, #48]	; (80096d4 <__libc_init_array+0x44>)
 80096a4:	f000 f866 	bl	8009774 <_init>
 80096a8:	1b64      	subs	r4, r4, r5
 80096aa:	10a4      	asrs	r4, r4, #2
 80096ac:	2600      	movs	r6, #0
 80096ae:	42a6      	cmp	r6, r4
 80096b0:	d105      	bne.n	80096be <__libc_init_array+0x2e>
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b8:	4798      	blx	r3
 80096ba:	3601      	adds	r6, #1
 80096bc:	e7ee      	b.n	800969c <__libc_init_array+0xc>
 80096be:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c2:	4798      	blx	r3
 80096c4:	3601      	adds	r6, #1
 80096c6:	e7f2      	b.n	80096ae <__libc_init_array+0x1e>
 80096c8:	080099a8 	.word	0x080099a8
 80096cc:	080099a8 	.word	0x080099a8
 80096d0:	080099a8 	.word	0x080099a8
 80096d4:	080099ac 	.word	0x080099ac

080096d8 <__retarget_lock_acquire_recursive>:
 80096d8:	4770      	bx	lr

080096da <__retarget_lock_release_recursive>:
 80096da:	4770      	bx	lr

080096dc <_free_r>:
 80096dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096de:	2900      	cmp	r1, #0
 80096e0:	d044      	beq.n	800976c <_free_r+0x90>
 80096e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e6:	9001      	str	r0, [sp, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f1a1 0404 	sub.w	r4, r1, #4
 80096ee:	bfb8      	it	lt
 80096f0:	18e4      	addlt	r4, r4, r3
 80096f2:	f7ff ff93 	bl	800961c <__malloc_lock>
 80096f6:	4a1e      	ldr	r2, [pc, #120]	; (8009770 <_free_r+0x94>)
 80096f8:	9801      	ldr	r0, [sp, #4]
 80096fa:	6813      	ldr	r3, [r2, #0]
 80096fc:	b933      	cbnz	r3, 800970c <_free_r+0x30>
 80096fe:	6063      	str	r3, [r4, #4]
 8009700:	6014      	str	r4, [r2, #0]
 8009702:	b003      	add	sp, #12
 8009704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009708:	f7ff bf8e 	b.w	8009628 <__malloc_unlock>
 800970c:	42a3      	cmp	r3, r4
 800970e:	d908      	bls.n	8009722 <_free_r+0x46>
 8009710:	6825      	ldr	r5, [r4, #0]
 8009712:	1961      	adds	r1, r4, r5
 8009714:	428b      	cmp	r3, r1
 8009716:	bf01      	itttt	eq
 8009718:	6819      	ldreq	r1, [r3, #0]
 800971a:	685b      	ldreq	r3, [r3, #4]
 800971c:	1949      	addeq	r1, r1, r5
 800971e:	6021      	streq	r1, [r4, #0]
 8009720:	e7ed      	b.n	80096fe <_free_r+0x22>
 8009722:	461a      	mov	r2, r3
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	b10b      	cbz	r3, 800972c <_free_r+0x50>
 8009728:	42a3      	cmp	r3, r4
 800972a:	d9fa      	bls.n	8009722 <_free_r+0x46>
 800972c:	6811      	ldr	r1, [r2, #0]
 800972e:	1855      	adds	r5, r2, r1
 8009730:	42a5      	cmp	r5, r4
 8009732:	d10b      	bne.n	800974c <_free_r+0x70>
 8009734:	6824      	ldr	r4, [r4, #0]
 8009736:	4421      	add	r1, r4
 8009738:	1854      	adds	r4, r2, r1
 800973a:	42a3      	cmp	r3, r4
 800973c:	6011      	str	r1, [r2, #0]
 800973e:	d1e0      	bne.n	8009702 <_free_r+0x26>
 8009740:	681c      	ldr	r4, [r3, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	6053      	str	r3, [r2, #4]
 8009746:	440c      	add	r4, r1
 8009748:	6014      	str	r4, [r2, #0]
 800974a:	e7da      	b.n	8009702 <_free_r+0x26>
 800974c:	d902      	bls.n	8009754 <_free_r+0x78>
 800974e:	230c      	movs	r3, #12
 8009750:	6003      	str	r3, [r0, #0]
 8009752:	e7d6      	b.n	8009702 <_free_r+0x26>
 8009754:	6825      	ldr	r5, [r4, #0]
 8009756:	1961      	adds	r1, r4, r5
 8009758:	428b      	cmp	r3, r1
 800975a:	bf04      	itt	eq
 800975c:	6819      	ldreq	r1, [r3, #0]
 800975e:	685b      	ldreq	r3, [r3, #4]
 8009760:	6063      	str	r3, [r4, #4]
 8009762:	bf04      	itt	eq
 8009764:	1949      	addeq	r1, r1, r5
 8009766:	6021      	streq	r1, [r4, #0]
 8009768:	6054      	str	r4, [r2, #4]
 800976a:	e7ca      	b.n	8009702 <_free_r+0x26>
 800976c:	b003      	add	sp, #12
 800976e:	bd30      	pop	{r4, r5, pc}
 8009770:	200016cc 	.word	0x200016cc

08009774 <_init>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	bf00      	nop
 8009778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977a:	bc08      	pop	{r3}
 800977c:	469e      	mov	lr, r3
 800977e:	4770      	bx	lr

08009780 <_fini>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr
