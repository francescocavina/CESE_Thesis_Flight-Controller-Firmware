
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a13c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800a2dc  0800a2dc  0001a2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a454  0800a454  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a454  0800a454  0001a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a45c  0800a45c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a45c  0800a45c  0001a45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800a464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001678  2000014c  0800a5b0  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017c4  0800a5b0  000217c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016cfb  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c37  00000000  00000000  00036eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  0003aaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da0  00000000  00000000  0003bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a277  00000000  00000000  0003ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d7fa  00000000  00000000  00056ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d537  00000000  00000000  000744e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e00  00000000  00000000  00101a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00106818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2c4 	.word	0x0800a2c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	0800a2c4 	.word	0x0800a2c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <flightController_App>:
extern DMA_HandleTypeDef hdma_usart2_rx;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b0b2      	sub	sp, #200	; 0xc8
 8000590:	af00      	add	r7, sp, #0
    uint8_t str3[50];
    uint8_t str4[50];

    MPU6050_HandleTypeDef_t * hmpu6050;

    rc_controller = FSA8S_RC_Init(&huart2);
 8000592:	4894      	ldr	r0, [pc, #592]	; (80007e4 <flightController_App+0x258>)
 8000594:	f000 fc1c 	bl	8000dd0 <FSA8S_RC_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	4a93      	ldr	r2, [pc, #588]	; (80007e8 <flightController_App+0x25c>)
 800059c:	6013      	str	r3, [r2, #0]

    hmpu6050 = MPU6050_IMU_Init(&hi2c1);
 800059e:	4893      	ldr	r0, [pc, #588]	; (80007ec <flightController_App+0x260>)
 80005a0:	f000 fe4e 	bl	8001240 <MPU6050_IMU_Init>
 80005a4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

    gyroscopeValues_t * gyroscopeValues;
    accelerometerValues_t * accelerometerValues;
    magnetometerValues_t * magnetometerValues;
    while (1) {
        HAL_Delay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ac:	f001 f83e 	bl	800162c <HAL_Delay>

        MPU6050_IMU_ReadGyroscope(hmpu6050, gyroscopeValues);
 80005b0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80005b4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80005b8:	f000 fe76 	bl	80012a8 <MPU6050_IMU_ReadGyroscope>

        sprintf((char *)str1, (const char *)"Value Gyro X: %d\r\n", gyroscopeValues->gyroscopeX);
 80005bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80005c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005c4:	461a      	mov	r2, r3
 80005c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005ca:	4989      	ldr	r1, [pc, #548]	; (80007f0 <flightController_App+0x264>)
 80005cc:	4618      	mov	r0, r3
 80005ce:	f009 fa81 	bl	8009ad4 <siprintf>
        CDC_Transmit_FS(str1, strlen((const char *)str1));
 80005d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fe02 	bl	80001e0 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fd66 	bl	80090b8 <CDC_Transmit_FS>
        HAL_Delay(10);
 80005ec:	200a      	movs	r0, #10
 80005ee:	f001 f81d 	bl	800162c <HAL_Delay>
        sprintf((char *)str1, (const char *)"Value Gyro Y: %d\r\n", gyroscopeValues->gyroscopeY);
 80005f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80005f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005fa:	461a      	mov	r2, r3
 80005fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000600:	497c      	ldr	r1, [pc, #496]	; (80007f4 <flightController_App+0x268>)
 8000602:	4618      	mov	r0, r3
 8000604:	f009 fa66 	bl	8009ad4 <siprintf>
        CDC_Transmit_FS(str1, strlen((const char *)str1));
 8000608:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fde7 	bl	80001e0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800061a:	4611      	mov	r1, r2
 800061c:	4618      	mov	r0, r3
 800061e:	f008 fd4b 	bl	80090b8 <CDC_Transmit_FS>
        HAL_Delay(10);
 8000622:	200a      	movs	r0, #10
 8000624:	f001 f802 	bl	800162c <HAL_Delay>
        sprintf((char *)str1, (const char *)"Value Gyro Z: %d\r\n\n\n\n", gyroscopeValues->gyroscopeZ);
 8000628:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800062c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000630:	461a      	mov	r2, r3
 8000632:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000636:	4970      	ldr	r1, [pc, #448]	; (80007f8 <flightController_App+0x26c>)
 8000638:	4618      	mov	r0, r3
 800063a:	f009 fa4b 	bl	8009ad4 <siprintf>
        CDC_Transmit_FS(str1, strlen((const char *)str1));
 800063e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fdcc 	bl	80001e0 <strlen>
 8000648:	4603      	mov	r3, r0
 800064a:	b29a      	uxth	r2, r3
 800064c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f008 fd30 	bl	80090b8 <CDC_Transmit_FS>
        HAL_Delay(100);
 8000658:	2064      	movs	r0, #100	; 0x64
 800065a:	f000 ffe7 	bl	800162c <HAL_Delay>


        MPU6050_IMU_ReadAccelerometer(hmpu6050, accelerometerValues);
 800065e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8000662:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000666:	f000 fe81 	bl	800136c <MPU6050_IMU_ReadAccelerometer>
        sprintf((char *)str2, (const char *)"Value Accel X: %d\r\n",
                accelerometerValues->accelerometerX);
 800066a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800066e:	f9b3 3000 	ldrsh.w	r3, [r3]
        sprintf((char *)str2, (const char *)"Value Accel X: %d\r\n",
 8000672:	461a      	mov	r2, r3
 8000674:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000678:	4960      	ldr	r1, [pc, #384]	; (80007fc <flightController_App+0x270>)
 800067a:	4618      	mov	r0, r3
 800067c:	f009 fa2a 	bl	8009ad4 <siprintf>
        CDC_Transmit_FS(str2, strlen((const char *)str2));
 8000680:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fdab 	bl	80001e0 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f008 fd0f 	bl	80090b8 <CDC_Transmit_FS>
        HAL_Delay(10);
 800069a:	200a      	movs	r0, #10
 800069c:	f000 ffc6 	bl	800162c <HAL_Delay>
        sprintf((char *)str2, (const char *)"Value Accel Y: %d\r\n",
                accelerometerValues->accelerometerY);
 80006a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        sprintf((char *)str2, (const char *)"Value Accel Y: %d\r\n",
 80006a8:	461a      	mov	r2, r3
 80006aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006ae:	4954      	ldr	r1, [pc, #336]	; (8000800 <flightController_App+0x274>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f009 fa0f 	bl	8009ad4 <siprintf>
        CDC_Transmit_FS(str2, strlen((const char *)str2));
 80006b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd90 	bl	80001e0 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f008 fcf4 	bl	80090b8 <CDC_Transmit_FS>
        HAL_Delay(10);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f000 ffab 	bl	800162c <HAL_Delay>
        sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n\n\n",
                accelerometerValues->accelerometerZ);
 80006d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
        sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n\n\n",
 80006de:	461a      	mov	r2, r3
 80006e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006e4:	4947      	ldr	r1, [pc, #284]	; (8000804 <flightController_App+0x278>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f009 f9f4 	bl	8009ad4 <siprintf>
        CDC_Transmit_FS(str2, strlen((const char *)str2));
 80006ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd75 	bl	80001e0 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f008 fcd9 	bl	80090b8 <CDC_Transmit_FS>
        HAL_Delay(100);
 8000706:	2064      	movs	r0, #100	; 0x64
 8000708:	f000 ff90 	bl	800162c <HAL_Delay>


        sprintf((char *)str3, (const char *)"Value Temperature: %d\r\n\n\n\n\n",
                      MPU6050_IMU_ReadTemperatureSensor(hmpu6050));
 800070c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000710:	f000 fe8f 	bl	8001432 <MPU6050_IMU_ReadTemperatureSensor>
 8000714:	4603      	mov	r3, r0
        sprintf((char *)str3, (const char *)"Value Temperature: %d\r\n\n\n\n\n",
 8000716:	461a      	mov	r2, r3
 8000718:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800071c:	493a      	ldr	r1, [pc, #232]	; (8000808 <flightController_App+0x27c>)
 800071e:	4618      	mov	r0, r3
 8000720:	f009 f9d8 	bl	8009ad4 <siprintf>
        CDC_Transmit_FS(str3, strlen((const char *)str3));
 8000724:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fd59 	bl	80001e0 <strlen>
 800072e:	4603      	mov	r3, r0
 8000730:	b29a      	uxth	r2, r3
 8000732:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f008 fcbd 	bl	80090b8 <CDC_Transmit_FS>
        HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	; 0x64
 8000740:	f000 ff74 	bl	800162c <HAL_Delay>

        MPU6050_IMU_ReadMagnetometer(hmpu6050, magnetometerValues);
 8000744:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000748:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800074c:	f000 fe9a 	bl	8001484 <MPU6050_IMU_ReadMagnetometer>
        sprintf((char *)str4, (const char *)"Value Mag X: %d\r\n",
        		magnetometerValues->magnetometerX);
 8000750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
        sprintf((char *)str4, (const char *)"Value Mag X: %d\r\n",
 8000758:	461a      	mov	r2, r3
 800075a:	463b      	mov	r3, r7
 800075c:	492b      	ldr	r1, [pc, #172]	; (800080c <flightController_App+0x280>)
 800075e:	4618      	mov	r0, r3
 8000760:	f009 f9b8 	bl	8009ad4 <siprintf>
        CDC_Transmit_FS(str4, strlen((const char *)str4));
 8000764:	463b      	mov	r3, r7
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fd3a 	bl	80001e0 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	463b      	mov	r3, r7
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f008 fc9f 	bl	80090b8 <CDC_Transmit_FS>
        HAL_Delay(10);
 800077a:	200a      	movs	r0, #10
 800077c:	f000 ff56 	bl	800162c <HAL_Delay>
        sprintf((char *)str4, (const char *)"Value Mag Y: %d\r\n",
        		magnetometerValues->magnetometerY);
 8000780:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000784:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        sprintf((char *)str4, (const char *)"Value Mag Y: %d\r\n",
 8000788:	461a      	mov	r2, r3
 800078a:	463b      	mov	r3, r7
 800078c:	4920      	ldr	r1, [pc, #128]	; (8000810 <flightController_App+0x284>)
 800078e:	4618      	mov	r0, r3
 8000790:	f009 f9a0 	bl	8009ad4 <siprintf>
        CDC_Transmit_FS(str4, strlen((const char *)str4));
 8000794:	463b      	mov	r3, r7
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd22 	bl	80001e0 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	463b      	mov	r3, r7
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f008 fc87 	bl	80090b8 <CDC_Transmit_FS>
        HAL_Delay(10);
 80007aa:	200a      	movs	r0, #10
 80007ac:	f000 ff3e 	bl	800162c <HAL_Delay>
        sprintf((char *)str4, (const char *)"Value Mag Z: %d\r\n\n\n\n",
        		magnetometerValues->magnetometerZ);
 80007b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80007b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
        sprintf((char *)str4, (const char *)"Value Mag Z: %d\r\n\n\n\n",
 80007b8:	461a      	mov	r2, r3
 80007ba:	463b      	mov	r3, r7
 80007bc:	4915      	ldr	r1, [pc, #84]	; (8000814 <flightController_App+0x288>)
 80007be:	4618      	mov	r0, r3
 80007c0:	f009 f988 	bl	8009ad4 <siprintf>
        CDC_Transmit_FS(str4, strlen((const char *)str4));
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fd0a 	bl	80001e0 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	463b      	mov	r3, r7
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f008 fc6f 	bl	80090b8 <CDC_Transmit_FS>
        HAL_Delay(10);
 80007da:	200a      	movs	r0, #10
 80007dc:	f000 ff26 	bl	800162c <HAL_Delay>
        HAL_Delay(1000);
 80007e0:	e6e2      	b.n	80005a8 <flightController_App+0x1c>
 80007e2:	bf00      	nop
 80007e4:	200001c0 	.word	0x200001c0
 80007e8:	20000168 	.word	0x20000168
 80007ec:	2000016c 	.word	0x2000016c
 80007f0:	0800a2dc 	.word	0x0800a2dc
 80007f4:	0800a2f0 	.word	0x0800a2f0
 80007f8:	0800a304 	.word	0x0800a304
 80007fc:	0800a31c 	.word	0x0800a31c
 8000800:	0800a330 	.word	0x0800a330
 8000804:	0800a344 	.word	0x0800a344
 8000808:	0800a35c 	.word	0x0800a35c
 800080c:	0800a378 	.word	0x0800a378
 8000810:	0800a38c 	.word	0x0800a38c
 8000814:	0800a3a0 	.word	0x0800a3a0

08000818 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800081c:	f000 fe94 	bl	8001548 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000820:	f000 f810 	bl	8000844 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000824:	f000 f8ea 	bl	80009fc <MX_GPIO_Init>
    MX_DMA_Init();
 8000828:	f000 f8ce 	bl	80009c8 <MX_DMA_Init>
    MX_USB_DEVICE_Init();
 800082c:	f008 fb86 	bl	8008f3c <MX_USB_DEVICE_Init>
    MX_I2C1_Init();
 8000830:	f000 f872 	bl	8000918 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000834:	f000 f89e 	bl	8000974 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    flightController_App();
 8000838:	f7ff fea8 	bl	800058c <flightController_App>
 800083c:	2300      	movs	r3, #0
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	; 0x50
 8000848:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	; 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f009 f95e 	bl	8009b14 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <SystemClock_Config+0xcc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a27      	ldr	r2, [pc, #156]	; (8000910 <SystemClock_Config+0xcc>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b25      	ldr	r3, [pc, #148]	; (8000910 <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <SystemClock_Config+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000890:	4a20      	ldr	r2, [pc, #128]	; (8000914 <SystemClock_Config+0xd0>)
 8000892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <SystemClock_Config+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 80008b8:	230f      	movs	r3, #15
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 80008bc:	2390      	movs	r3, #144	; 0x90
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 80008c4:	2305      	movs	r3, #5
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 fd89 	bl	80043e4 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x98>
        Error_Handler();
 80008d8:	f000 f8c6 	bl	8000a68 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2101      	movs	r1, #1
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 ffeb 	bl	80048d4 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xc4>
        Error_Handler();
 8000904:	f000 f8b0 	bl	8000a68 <Error_Handler>
    }
}
 8000908:	bf00      	nop
 800090a:	3750      	adds	r7, #80	; 0x50
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C1_Init+0x50>)
 800091e:	4a13      	ldr	r2, [pc, #76]	; (800096c <MX_I2C1_Init+0x54>)
 8000920:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_I2C1_Init+0x50>)
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_I2C1_Init+0x58>)
 8000926:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_I2C1_Init+0x50>)
 8000936:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800093a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_I2C1_Init+0x50>)
 8000956:	f001 fb09 	bl	8001f6c <HAL_I2C_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000960:	f000 f882 	bl	8000a68 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000016c 	.word	0x2000016c
 800096c:	40005400 	.word	0x40005400
 8000970:	00061a80 	.word	0x00061a80

08000974 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	2204      	movs	r2, #4
 800099c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f004 f972 	bl	8004c94 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80009b6:	f000 f857 	bl	8000a68 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001c0 	.word	0x200001c0
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_DMA_Init+0x30>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <MX_DMA_Init+0x30>)
 80009d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_DMA_Init+0x30>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_I2C_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12b      	bne.n	8000b42 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000b06:	23c0      	movs	r3, #192	; 0xc0
 8000b08:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0a:	2312      	movs	r3, #18
 8000b0c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b16:	2304      	movs	r3, #4
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <HAL_I2C_MspInit+0x8c>)
 8000b22:	f001 f89f 	bl	8001c64 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400

08000b58 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a30      	ldr	r2, [pc, #192]	; (8000c38 <HAL_UART_MspInit+0xe0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d15a      	bne.n	8000c30 <HAL_UART_MspInit+0xd8>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <HAL_UART_MspInit+0xe4>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <HAL_UART_MspInit+0xe4>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <HAL_UART_MspInit+0xe4>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <HAL_UART_MspInit+0xe4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a27      	ldr	r2, [pc, #156]	; (8000c3c <HAL_UART_MspInit+0xe4>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <HAL_UART_MspInit+0xe4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	481c      	ldr	r0, [pc, #112]	; (8000c40 <HAL_UART_MspInit+0xe8>)
 8000bce:	f001 f849 	bl	8001c64 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000bd4:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <HAL_UART_MspInit+0xf0>)
 8000bd6:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000bda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bde:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf2:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c06:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000c16:	f000 fe3f 	bl	8001898 <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_UART_MspInit+0xcc>
            Error_Handler();
 8000c20:	f7ff ff22 	bl	8000a68 <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_UART_MspInit+0xec>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	20000204 	.word	0x20000204
 8000c48:	40026088 	.word	0x40026088

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 fca8 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <OTG_FS_IRQHandler+0x10>)
 8000ca6:	f002 fa70 	bl	800318a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000f50 	.word	0x20000f50

08000cb4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
        errno = ENOMEM;
 8000ce4:	f008 ff2e 	bl	8009b44 <__errno>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <_sbrk+0x64>)
 8000d04:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20010000 	.word	0x20010000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	20000264 	.word	0x20000264
 8000d1c:	200017c8 	.word	0x200017c8

08000d20 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d6e:	f7ff ffd7 	bl	8000d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f008 feed 	bl	8009b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fd4f 	bl	8000818 <main>
  bx  lr
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000d88:	0800a464 	.word	0x0800a464
  ldr r2, =_sbss
 8000d8c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000d90:	200017c4 	.word	0x200017c4

08000d94 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>

08000d96 <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <IBUS_Init+0x12>
        return false;
 8000da4:	2300      	movs	r3, #0
 8000da6:	e00f      	b.n	8000dc8 <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6859      	ldr	r1, [r3, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7a1b      	ldrb	r3, [r3, #8]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	f003 ffb9 	bl	8004d2e <HAL_UART_Receive_DMA>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <FSA8S_RC_Init>:
        }
    }
}

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_RC_Init(UART_HandleTypeDef * huart) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <FSA8S_RC_Init+0x12>
        return NULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e049      	b.n	8000e76 <FSA8S_RC_Init+0xa6>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 8000de2:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <FSA8S_RC_Init+0xb0>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <FSA8S_RC_Init+0x1e>
        return NULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e043      	b.n	8000e76 <FSA8S_RC_Init+0xa6>
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(IBUS_HandleTypeDef_t));
    uint8_t * buffer = pvortMalloc(sizeof(IBUS_BUFFER_LENGTH));
    uint16_t * data = pvortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
#else
    IBUS_HandleTypeDef_t * hibus = malloc(sizeof(IBUS_HandleTypeDef_t));
 8000dee:	2014      	movs	r0, #20
 8000df0:	f008 fdb4 	bl	800995c <malloc>
 8000df4:	4603      	mov	r3, r0
 8000df6:	617b      	str	r3, [r7, #20]
    uint8_t * buffer = malloc(sizeof(IBUS_BUFFER_LENGTH));
 8000df8:	2004      	movs	r0, #4
 8000dfa:	f008 fdaf 	bl	800995c <malloc>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	613b      	str	r3, [r7, #16]
    uint16_t * data = malloc(sizeof(uint16_t));
 8000e02:	2002      	movs	r0, #2
 8000e04:	f008 fdaa 	bl	800995c <malloc>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60fb      	str	r3, [r7, #12]
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00f      	beq.n	8000e32 <FSA8S_RC_Init+0x62>
        hibus->huart = huart;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2220      	movs	r2, #32
 8000e22:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	220e      	movs	r2, #14
 8000e2e:	741a      	strb	r2, [r3, #16]
 8000e30:	e00a      	b.n	8000e48 <FSA8S_RC_Init+0x78>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f008 fd95 	bl	800996c <free>
        free(hibus);
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f008 fd92 	bl	800996c <free>
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 8000e48:	6978      	ldr	r0, [r7, #20]
 8000e4a:	f7ff ffa4 	bl	8000d96 <IBUS_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d004      	beq.n	8000e5e <FSA8S_RC_Init+0x8e>
        /* Initialization was successful */
        alreadyInitialized = true;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <FSA8S_RC_Init+0xb0>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
        return hibus;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	e00b      	b.n	8000e76 <FSA8S_RC_Init+0xa6>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f008 fd7f 	bl	800996c <free>
        free(hibus);
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f008 fd7c 	bl	800996c <free>
#endif
        return NULL;
 8000e74:	2300      	movs	r3, #0
    }
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000268 	.word	0x20000268

08000e84 <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hmpu6050) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <I2C_Init+0x12>
        return false;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e010      	b.n	8000eb8 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6858      	ldr	r0, [r3, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7a19      	ldrb	r1, [r3, #8]
 8000e9e:	f107 030f 	add.w	r3, r7, #15
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	9200      	str	r2, [sp, #0]
 8000ea6:	2275      	movs	r2, #117	; 0x75
 8000ea8:	f000 f80a 	bl	8000ec0 <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_VAL_WHO_AM_I) {
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	2b68      	cmp	r3, #104	; 0x68
 8000eb0:	d101      	bne.n	8000eb6 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8000eb6:	2300      	movs	r3, #0
    }
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	72fb      	strb	r3, [r7, #11]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <I2C_Read+0x1c>
        return false;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e02b      	b.n	8000f34 <I2C_Read+0x74>
    }
    if(0 == address) {
 8000edc:	7afb      	ldrb	r3, [r7, #11]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <I2C_Read+0x26>
    	return false;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e026      	b.n	8000f34 <I2C_Read+0x74>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000ee6:	7abb      	ldrb	r3, [r7, #10]
 8000ee8:	2b75      	cmp	r3, #117	; 0x75
 8000eea:	d901      	bls.n	8000ef0 <I2C_Read+0x30>
        return false;
 8000eec:	2300      	movs	r3, #0
 8000eee:	e021      	b.n	8000f34 <I2C_Read+0x74>
    }
    if (NULL == data) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <I2C_Read+0x3a>
        return false;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e01c      	b.n	8000f34 <I2C_Read+0x74>
    }
    if (dataSize < MPU_6050_MIN_DATA_SIZE || dataSize > MPU_6050_MAX_DATA_SIZE) {
 8000efa:	7e3b      	ldrb	r3, [r7, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <I2C_Read+0x46>
 8000f00:	7e3b      	ldrb	r3, [r7, #24]
 8000f02:	2b0a      	cmp	r3, #10
 8000f04:	d901      	bls.n	8000f0a <I2C_Read+0x4a>
        return false;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e014      	b.n	8000f34 <I2C_Read+0x74>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8000f0a:	7afb      	ldrb	r3, [r7, #11]
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	7abb      	ldrb	r3, [r7, #10]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	7e3b      	ldrb	r3, [r7, #24]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	2064      	movs	r0, #100	; 0x64
 8000f18:	9002      	str	r0, [sp, #8]
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f001 fa60 	bl	80023e8 <HAL_I2C_Mem_Read>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <I2C_Read+0x72>

        /* Data couldn't be read */
        return false;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <I2C_Read+0x74>
    } else {

        /* Data read successfully */
        return true;
 8000f32:	2301      	movs	r3, #1
    }
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data,
                 uint8_t dataSize) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	72fb      	strb	r3, [r7, #11]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <I2C_Write+0x1c>
        return false;
 8000f54:	2300      	movs	r3, #0
 8000f56:	e02b      	b.n	8000fb0 <I2C_Write+0x74>
    }
    if(0 == address) {
 8000f58:	7afb      	ldrb	r3, [r7, #11]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <I2C_Write+0x26>
    	return false;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e026      	b.n	8000fb0 <I2C_Write+0x74>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000f62:	7abb      	ldrb	r3, [r7, #10]
 8000f64:	2b75      	cmp	r3, #117	; 0x75
 8000f66:	d901      	bls.n	8000f6c <I2C_Write+0x30>
        return false;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e021      	b.n	8000fb0 <I2C_Write+0x74>
    }
    if (NULL == data) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <I2C_Write+0x3a>
        return false;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e01c      	b.n	8000fb0 <I2C_Write+0x74>
    }
    if (dataSize < MPU_6050_MIN_DATA_SIZE || dataSize > MPU_6050_MAX_DATA_SIZE) {
 8000f76:	7e3b      	ldrb	r3, [r7, #24]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <I2C_Write+0x46>
 8000f7c:	7e3b      	ldrb	r3, [r7, #24]
 8000f7e:	2b0a      	cmp	r3, #10
 8000f80:	d901      	bls.n	8000f86 <I2C_Write+0x4a>
        return false;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e014      	b.n	8000fb0 <I2C_Write+0x74>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_WRITE_TIMEOUT)) {
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	b299      	uxth	r1, r3
 8000f8a:	7abb      	ldrb	r3, [r7, #10]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	7e3b      	ldrb	r3, [r7, #24]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	2064      	movs	r0, #100	; 0x64
 8000f94:	9002      	str	r0, [sp, #8]
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f001 f928 	bl	80021f4 <HAL_I2C_Mem_Write>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <I2C_Write+0x72>

        /* Data couldn't be written */
        return false;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <I2C_Write+0x74>
    } else {

        /* Data written successfully */
        return true;
 8000fae:	2301      	movs	r3, #1
    }
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <MPU6050_IMU_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_IMU_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvortMalloc(sizeof(1));
#else
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = malloc(sizeof(MPU6050_HandleTypeDef_t));
 8000fc0:	2014      	movs	r0, #20
 8000fc2:	f008 fccb 	bl	800995c <malloc>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	60fb      	str	r3, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
 8000fca:	2004      	movs	r0, #4
 8000fcc:	f008 fcc6 	bl	800995c <malloc>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60bb      	str	r3, [r7, #8]
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <MPU6050_IMU_InstanceInit+0x28>
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10c      	bne.n	8000ffa <MPU6050_IMU_InstanceInit+0x42>
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
        vPortFree(hmpu6050);
#else
        /* Free up dynamic allocated memory */
        hmpu6050->buffer = 0;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
        free(hmpu6050->buffer);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f008 fcbe 	bl	800996c <free>
        free(hmpu6050);
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f008 fcbb 	bl	800996c <free>
#endif
        return NULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e01b      	b.n	8001032 <MPU6050_IMU_InstanceInit+0x7a>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MPU6050_IMU_InstanceInit+0x84>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <MPU6050_IMU_InstanceInit+0x58>
            hmpu6050->instance = 1;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	22d0      	movs	r2, #208	; 0xd0
 800100c:	721a      	strb	r2, [r3, #8]
 800100e:	e009      	b.n	8001024 <MPU6050_IMU_InstanceInit+0x6c>
        } else if (instancesNumber == 1) {
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MPU6050_IMU_InstanceInit+0x84>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d105      	bne.n	8001024 <MPU6050_IMU_InstanceInit+0x6c>
            hmpu6050->instance = 2;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2202      	movs	r2, #2
 800101c:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR2;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	22d1      	movs	r2, #209	; 0xd1
 8001022:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->hi2c = hi2c;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	605a      	str	r2, [r3, #4]
        hmpu6050->buffer = buffer;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 8001030:	68fb      	ldr	r3, [r7, #12]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000269 	.word	0x20000269

08001040 <MPU6050_IMU_Config>:

static void MPU6050_IMU_Config(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */
    uint8_t regValue;

    /* Wake up device */
    regValue = MPU_6050_VAL_PWR_MGMT_1_SLEEP_MODE;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regValue, sizeof(regValue));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6858      	ldr	r0, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7a19      	ldrb	r1, [r3, #8]
 8001054:	f107 030f 	add.w	r3, r7, #15
 8001058:	2201      	movs	r2, #1
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	226b      	movs	r2, #107	; 0x6b
 800105e:	f000 f8d9 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Set clock source */
    regValue = MPU_6050_VAL_PWR_MGMT_1_CLKSEL_1;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regValue, sizeof(regValue));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6858      	ldr	r0, [r3, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7a19      	ldrb	r1, [r3, #8]
 800106e:	f107 030f 	add.w	r3, r7, #15
 8001072:	2201      	movs	r2, #1
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	226b      	movs	r2, #107	; 0x6b
 8001078:	f000 f8cc 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Set sample rate divider */
    regValue = MPU_6050_VAL_SMPLRT_DIV;
 800107c:	2318      	movs	r3, #24
 800107e:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_SMPLRT_DIV, &regValue, sizeof(regValue));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6858      	ldr	r0, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7a19      	ldrb	r1, [r3, #8]
 8001088:	f107 030f 	add.w	r3, r7, #15
 800108c:	2201      	movs	r2, #1
 800108e:	9200      	str	r2, [sp, #0]
 8001090:	2219      	movs	r2, #25
 8001092:	f000 f8bf 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Configure gyroscope full scale range */
    regValue = MPU_6050_VAL_GYRO_CONFIG_FS_SEL_3;
 8001096:	2318      	movs	r3, #24
 8001098:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_CONFIG, &regValue, sizeof(regValue));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6858      	ldr	r0, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7a19      	ldrb	r1, [r3, #8]
 80010a2:	f107 030f 	add.w	r3, r7, #15
 80010a6:	2201      	movs	r2, #1
 80010a8:	9200      	str	r2, [sp, #0]
 80010aa:	221b      	movs	r2, #27
 80010ac:	f000 f8b2 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Configure accelerometer full scale range */
    regValue = MPU_6050_VAL_ACCEL_CONFIG_FS_SEL_3;
 80010b0:	2318      	movs	r3, #24
 80010b2:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_CONFIG, &regValue, sizeof(regValue));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6858      	ldr	r0, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7a19      	ldrb	r1, [r3, #8]
 80010bc:	f107 030f 	add.w	r3, r7, #15
 80010c0:	2201      	movs	r2, #1
 80010c2:	9200      	str	r2, [sp, #0]
 80010c4:	221c      	movs	r2, #28
 80010c6:	f000 f8a5 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Disable I2C Master Mode */
    regValue = MPU_6050_VAL_USER_CTRL_MST_DIS;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_USER_CTRL, &regValue, sizeof(regValue));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6858      	ldr	r0, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7a19      	ldrb	r1, [r3, #8]
 80010d6:	f107 030f 	add.w	r3, r7, #15
 80010da:	2201      	movs	r2, #1
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	226a      	movs	r2, #106	; 0x6a
 80010e0:	f000 f898 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Enable Bypass */
    regValue = MPU_6050_REG_INT_PIN_CFG_I2C_BP_EN;
 80010e4:	2302      	movs	r3, #2
 80010e6:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_INT_PIN_CFG, &regValue, sizeof(regValue));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6858      	ldr	r0, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7a19      	ldrb	r1, [r3, #8]
 80010f0:	f107 030f 	add.w	r3, r7, #15
 80010f4:	2201      	movs	r2, #1
 80010f6:	9200      	str	r2, [sp, #0]
 80010f8:	2237      	movs	r2, #55	; 0x37
 80010fa:	f000 f88b 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Configure HMC5883L itself */
	regValue = 0b00011000; //Fill Slave0 DO
 80010fe:	2318      	movs	r3, #24
 8001100:	73fb      	strb	r3, [r7, #15]
	MPU6050_IMU_WriteRegister(hmpu6050->hi2c, HMC5883L_AUX_VAL_I2C_ADDR << 1, HMC5883L_REG_CONFIG_A, &regValue, sizeof(regValue));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6858      	ldr	r0, [r3, #4]
 8001106:	f107 030f 	add.w	r3, r7, #15
 800110a:	2201      	movs	r2, #1
 800110c:	9200      	str	r2, [sp, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	213c      	movs	r1, #60	; 0x3c
 8001112:	f000 f87f 	bl	8001214 <MPU6050_IMU_WriteRegister>
	regValue = 0b00100000; //Fill Slave0 DO
 8001116:	2320      	movs	r3, #32
 8001118:	73fb      	strb	r3, [r7, #15]
	MPU6050_IMU_WriteRegister(hmpu6050->hi2c, HMC5883L_AUX_VAL_I2C_ADDR << 1, HMC5883L_REG_CONFIG_B, &regValue, sizeof(regValue));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6858      	ldr	r0, [r3, #4]
 800111e:	f107 030f 	add.w	r3, r7, #15
 8001122:	2201      	movs	r2, #1
 8001124:	9200      	str	r2, [sp, #0]
 8001126:	2201      	movs	r2, #1
 8001128:	213c      	movs	r1, #60	; 0x3c
 800112a:	f000 f873 	bl	8001214 <MPU6050_IMU_WriteRegister>
	regValue = 0x00; //Mode: Continuous
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
	MPU6050_IMU_WriteRegister(hmpu6050->hi2c, HMC5883L_AUX_VAL_I2C_ADDR << 1, HMC5883L_REG_MODE, &regValue, sizeof(regValue));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6858      	ldr	r0, [r3, #4]
 8001136:	f107 030f 	add.w	r3, r7, #15
 800113a:	2201      	movs	r2, #1
 800113c:	9200      	str	r2, [sp, #0]
 800113e:	2202      	movs	r2, #2
 8001140:	213c      	movs	r1, #60	; 0x3c
 8001142:	f000 f867 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Disable Bypass */
    regValue = MPU_6050_REG_INT_PIN_CFG_I2C_BP_DIS;
 8001146:	2302      	movs	r3, #2
 8001148:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_INT_PIN_CFG, &regValue, sizeof(regValue));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6858      	ldr	r0, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7a19      	ldrb	r1, [r3, #8]
 8001152:	f107 030f 	add.w	r3, r7, #15
 8001156:	2201      	movs	r2, #1
 8001158:	9200      	str	r2, [sp, #0]
 800115a:	2237      	movs	r2, #55	; 0x37
 800115c:	f000 f85a 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Enable I2C Master Mode */
    regValue = MPU_6050_VAL_USER_CTRL_MST_EN;
 8001160:	2320      	movs	r3, #32
 8001162:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_USER_CTRL, &regValue, sizeof(regValue));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6858      	ldr	r0, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7a19      	ldrb	r1, [r3, #8]
 800116c:	f107 030f 	add.w	r3, r7, #15
 8001170:	2201      	movs	r2, #1
 8001172:	9200      	str	r2, [sp, #0]
 8001174:	226a      	movs	r2, #106	; 0x6a
 8001176:	f000 f84d 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Set I2C Master Clock */
    regValue = MPU_6050_VAL_I2C_MST_CTRL_CLK_13;
 800117a:	230d      	movs	r3, #13
 800117c:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_MST_CTRL, &regValue, sizeof(regValue));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6858      	ldr	r0, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7a19      	ldrb	r1, [r3, #8]
 8001186:	f107 030f 	add.w	r3, r7, #15
 800118a:	2201      	movs	r2, #1
 800118c:	9200      	str	r2, [sp, #0]
 800118e:	2224      	movs	r2, #36	; 0x24
 8001190:	f000 f840 	bl	8001214 <MPU6050_IMU_WriteRegister>

    /* Configure HMC5883L in MPU-6050 */
    regValue = HMC5883L_AUX_VAL_I2C_ADDR | 0x80;
 8001194:	239e      	movs	r3, #158	; 0x9e
 8001196:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_ADDR, &regValue, sizeof(regValue));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6858      	ldr	r0, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7a19      	ldrb	r1, [r3, #8]
 80011a0:	f107 030f 	add.w	r3, r7, #15
 80011a4:	2201      	movs	r2, #1
 80011a6:	9200      	str	r2, [sp, #0]
 80011a8:	2225      	movs	r2, #37	; 0x25
 80011aa:	f000 f833 	bl	8001214 <MPU6050_IMU_WriteRegister>
    regValue = 0x03;
 80011ae:	2303      	movs	r3, #3
 80011b0:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_REG, &regValue, sizeof(regValue));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6858      	ldr	r0, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7a19      	ldrb	r1, [r3, #8]
 80011ba:	f107 030f 	add.w	r3, r7, #15
 80011be:	2201      	movs	r2, #1
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	2226      	movs	r2, #38	; 0x26
 80011c4:	f000 f826 	bl	8001214 <MPU6050_IMU_WriteRegister>
    regValue = 0x80 | 0x06; //Number of data bytes
 80011c8:	2386      	movs	r3, #134	; 0x86
 80011ca:	73fb      	strb	r3, [r7, #15]
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_CTRL, &regValue, sizeof(regValue));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6858      	ldr	r0, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7a19      	ldrb	r1, [r3, #8]
 80011d4:	f107 030f 	add.w	r3, r7, #15
 80011d8:	2201      	movs	r2, #1
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	2227      	movs	r2, #39	; 0x27
 80011de:	f000 f819 	bl	8001214 <MPU6050_IMU_WriteRegister>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <MPU6050_IMU_ReadRegister>:

static void MPU6050_IMU_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af02      	add	r7, sp, #8
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	72fb      	strb	r3, [r7, #11]
 80011f8:	4613      	mov	r3, r2
 80011fa:	72bb      	strb	r3, [r7, #10]

    I2C_Read(hi2c, address, reg, data, dataSize);
 80011fc:	7aba      	ldrb	r2, [r7, #10]
 80011fe:	7af9      	ldrb	r1, [r7, #11]
 8001200:	7e3b      	ldrb	r3, [r7, #24]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff fe5a 	bl	8000ec0 <I2C_Read>
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <MPU6050_IMU_WriteRegister>:

static void MPU6050_IMU_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af02      	add	r7, sp, #8
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	72fb      	strb	r3, [r7, #11]
 8001222:	4613      	mov	r3, r2
 8001224:	72bb      	strb	r3, [r7, #10]

    I2C_Write(hi2c, address, reg, data, dataSize);
 8001226:	7aba      	ldrb	r2, [r7, #10]
 8001228:	7af9      	ldrb	r1, [r7, #11]
 800122a:	7e3b      	ldrb	r3, [r7, #24]
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff fe83 	bl	8000f3c <I2C_Write>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <MPU6050_IMU_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_IMU_Init(I2C_HandleTypeDef * hi2c) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MPU6050_IMU_Init+0x64>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d101      	bne.n	8001254 <MPU6050_IMU_Init+0x14>
        return NULL;
 8001250:	2300      	movs	r3, #0
 8001252:	e022      	b.n	800129a <MPU6050_IMU_Init+0x5a>
    }

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_IMU_InstanceInit(hi2c);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff feaf 	bl	8000fb8 <MPU6050_IMU_InstanceInit>
 800125a:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d01a      	beq.n	8001298 <MPU6050_IMU_Init+0x58>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hmpu6050)) {
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f7ff fe0e 	bl	8000e84 <I2C_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00a      	beq.n	8001284 <MPU6050_IMU_Init+0x44>

            /* Initialization was successful */
            /* Configure device */
            MPU6050_IMU_Config(hmpu6050);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff fee6 	bl	8001040 <MPU6050_IMU_Config>

            instancesNumber++;
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MPU6050_IMU_Init+0x64>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MPU6050_IMU_Init+0x64>)
 800127e:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	e00a      	b.n	800129a <MPU6050_IMU_Init+0x5a>
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
            vPortFree(hmpu6050);
#else
            /* Free up dynamic allocated memory */
            free(hmpu6050->buffer);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	4618      	mov	r0, r3
 800128a:	f008 fb6f 	bl	800996c <free>
            free(hmpu6050);
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f008 fb6c 	bl	800996c <free>
#endif
            return NULL;
 8001294:	2300      	movs	r3, #0
 8001296:	e000      	b.n	800129a <MPU6050_IMU_Init+0x5a>
        }
    } else {

        /* Instance couldn't be created */
        return NULL;
 8001298:	2300      	movs	r3, #0
    }
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000269 	.word	0x20000269

080012a8 <MPU6050_IMU_ReadGyroscope>:
    /* Write '1' to PWR_MGMT_1 register to DEVICE_RESET bit (7) */
    MPU6050_IMU_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regValue, sizeof(regValue));
}

void MPU6050_IMU_ReadGyroscope(MPU6050_HandleTypeDef_t * hmpu6050,
                               gyroscopeValues_t * gyroscopeValues) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]

    gyroscopeValues->gyroscopeX = 0;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	801a      	strh	r2, [r3, #0]
    gyroscopeValues->gyroscopeY = 0;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	805a      	strh	r2, [r3, #2]
    gyroscopeValues->gyroscopeZ = 0;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	809a      	strh	r2, [r3, #4]

    uint8_t gyroscopeRawData[2];
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_2000;
 80012c4:	2310      	movs	r3, #16
 80012c6:	81fb      	strh	r3, [r7, #14]

    /* Read gyroscope in axis X */
    MPU6050_IMU_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6858      	ldr	r0, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7a19      	ldrb	r1, [r3, #8]
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2202      	movs	r2, #2
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	2243      	movs	r2, #67	; 0x43
 80012da:	f7ff ff86 	bl	80011ea <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    gyroscopeValues->gyroscopeX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 80012de:	7b3b      	ldrb	r3, [r7, #12]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	7b7b      	ldrb	r3, [r7, #13]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	801a      	strh	r2, [r3, #0]

    /* Read gyroscope in axis Y */
    MPU6050_IMU_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6858      	ldr	r0, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7a19      	ldrb	r1, [r3, #8]
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2202      	movs	r2, #2
 800130a:	9200      	str	r2, [sp, #0]
 800130c:	2245      	movs	r2, #69	; 0x45
 800130e:	f7ff ff6c 	bl	80011ea <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    gyroscopeValues->gyroscopeY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8001312:	7b3b      	ldrb	r3, [r7, #12]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	7b7b      	ldrb	r3, [r7, #13]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21b      	sxth	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001326:	fb92 f3f3 	sdiv	r3, r2, r3
 800132a:	b21a      	sxth	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	805a      	strh	r2, [r3, #2]

    /* Read gyroscope in axis Z */
    MPU6050_IMU_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6858      	ldr	r0, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7a19      	ldrb	r1, [r3, #8]
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2202      	movs	r2, #2
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	2247      	movs	r2, #71	; 0x47
 8001342:	f7ff ff52 	bl	80011ea <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    gyroscopeValues->gyroscopeZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8001346:	7b3b      	ldrb	r3, [r7, #12]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800135a:	fb92 f3f3 	sdiv	r3, r2, r3
 800135e:	b21a      	sxth	r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	809a      	strh	r2, [r3, #4]
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <MPU6050_IMU_ReadAccelerometer>:

void MPU6050_IMU_ReadAccelerometer(MPU6050_HandleTypeDef_t * hmpu6050,
                                   accelerometerValues_t * accelerometerValues) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af02      	add	r7, sp, #8
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]

    accelerometerValues->accelerometerX = 0;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	801a      	strh	r2, [r3, #0]
    accelerometerValues->accelerometerY = 0;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	805a      	strh	r2, [r3, #2]
    accelerometerValues->accelerometerZ = 0;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2200      	movs	r2, #0
 8001386:	809a      	strh	r2, [r3, #4]

    uint8_t accelerometerRawData[2];
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_SF_16;
 8001388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800138c:	81fb      	strh	r3, [r7, #14]

    /* Read accelerometer in axis X */
    MPU6050_IMU_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6858      	ldr	r0, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7a19      	ldrb	r1, [r3, #8]
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2202      	movs	r2, #2
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	223b      	movs	r2, #59	; 0x3b
 80013a0:	f7ff ff23 	bl	80011ea <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    accelerometerValues->accelerometerX =
        (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 80013a4:	7b3b      	ldrb	r3, [r7, #12]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	7b7b      	ldrb	r3, [r7, #13]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013b8:	fb92 f3f3 	sdiv	r3, r2, r3
    accelerometerValues->accelerometerX =
 80013bc:	b21a      	sxth	r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	801a      	strh	r2, [r3, #0]

    /* Read accelerometer in axis Y */
    MPU6050_IMU_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6858      	ldr	r0, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7a19      	ldrb	r1, [r3, #8]
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2202      	movs	r2, #2
 80013d0:	9200      	str	r2, [sp, #0]
 80013d2:	223d      	movs	r2, #61	; 0x3d
 80013d4:	f7ff ff09 	bl	80011ea <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    accelerometerValues->accelerometerY =
        (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 80013d8:	7b3b      	ldrb	r3, [r7, #12]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	7b7b      	ldrb	r3, [r7, #13]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ec:	fb92 f3f3 	sdiv	r3, r2, r3
    accelerometerValues->accelerometerY =
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	805a      	strh	r2, [r3, #2]

    /* Read accelerometer in axis Z */
    MPU6050_IMU_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6858      	ldr	r0, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a19      	ldrb	r1, [r3, #8]
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2202      	movs	r2, #2
 8001404:	9200      	str	r2, [sp, #0]
 8001406:	223f      	movs	r2, #63	; 0x3f
 8001408:	f7ff feef 	bl	80011ea <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    accelerometerValues->accelerometerZ =
        (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 800140c:	7b3b      	ldrb	r3, [r7, #12]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21b      	sxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001420:	fb92 f3f3 	sdiv	r3, r2, r3
    accelerometerValues->accelerometerZ =
 8001424:	b21a      	sxth	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	809a      	strh	r2, [r3, #4]
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <MPU6050_IMU_ReadTemperatureSensor>:

int16_t MPU6050_IMU_ReadTemperatureSensor(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af02      	add	r7, sp, #8
 8001438:	6078      	str	r0, [r7, #4]

	uint8_t temperatureSensorRawData[2];
	int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 800143a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800143e:	81fb      	strh	r3, [r7, #14]
	int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 8001440:	2324      	movs	r3, #36	; 0x24
 8001442:	81bb      	strh	r3, [r7, #12]

	/* Read temperature sensor */
	MPU6050_IMU_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6858      	ldr	r0, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7a19      	ldrb	r1, [r3, #8]
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2202      	movs	r2, #2
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	2241      	movs	r2, #65	; 0x41
 8001456:	f7ff fec8 	bl	80011ea <MPU6050_IMU_ReadRegister>
	                             sizeof(uint16_t));

	return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 800145a:	7a3b      	ldrb	r3, [r7, #8]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	7a7b      	ldrb	r3, [r7, #9]
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21b      	sxth	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001472:	b29a      	uxth	r2, r3
 8001474:	89bb      	ldrh	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	b21b      	sxth	r3, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <MPU6050_IMU_ReadMagnetometer>:

void MPU6050_IMU_ReadMagnetometer(MPU6050_HandleTypeDef_t * hmpu6050, magnetometerValues_t * magnetometerValues) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af02      	add	r7, sp, #8
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]

    magnetometerValues->magnetometerX = 0;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2200      	movs	r2, #0
 8001492:	801a      	strh	r2, [r3, #0]
    magnetometerValues->magnetometerY = 0;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	805a      	strh	r2, [r3, #2]
    magnetometerValues->magnetometerZ = 0;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2200      	movs	r2, #0
 800149e:	809a      	strh	r2, [r3, #4]

    uint8_t magnetometerRawData[2];
    int16_t scaleFactor = 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	81fb      	strh	r3, [r7, #14]

    /* Read accelerometer in axis X */
    MPU6050_IMU_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_14, magnetometerRawData,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6858      	ldr	r0, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7a19      	ldrb	r1, [r3, #8]
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2202      	movs	r2, #2
 80014b2:	9200      	str	r2, [sp, #0]
 80014b4:	2257      	movs	r2, #87	; 0x57
 80014b6:	f7ff fe98 	bl	80011ea <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    magnetometerValues->magnetometerX =
        (int16_t)(magnetometerRawData[0] << 8 | magnetometerRawData[1]) / scaleFactor;
 80014ba:	7b3b      	ldrb	r3, [r7, #12]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ce:	fb92 f3f3 	sdiv	r3, r2, r3
    magnetometerValues->magnetometerX =
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	801a      	strh	r2, [r3, #0]

    /* Read accelerometer in axis Y */
    MPU6050_IMU_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_16, magnetometerRawData,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6858      	ldr	r0, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7a19      	ldrb	r1, [r3, #8]
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2202      	movs	r2, #2
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	2259      	movs	r2, #89	; 0x59
 80014ea:	f7ff fe7e 	bl	80011ea <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    magnetometerValues->magnetometerY =
        (int16_t)(magnetometerRawData[0] << 8 | magnetometerRawData[1]) / scaleFactor;
 80014ee:	7b3b      	ldrb	r3, [r7, #12]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001502:	fb92 f3f3 	sdiv	r3, r2, r3
    magnetometerValues->magnetometerY =
 8001506:	b21a      	sxth	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	805a      	strh	r2, [r3, #2]

    /* Read accelerometer in axis Z */
    MPU6050_IMU_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_18, magnetometerRawData,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6858      	ldr	r0, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7a19      	ldrb	r1, [r3, #8]
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2202      	movs	r2, #2
 800151a:	9200      	str	r2, [sp, #0]
 800151c:	225b      	movs	r2, #91	; 0x5b
 800151e:	f7ff fe64 	bl	80011ea <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    magnetometerValues->magnetometerZ =
        (int16_t)(magnetometerRawData[0] << 8 | magnetometerRawData[1]) / scaleFactor;
 8001522:	7b3b      	ldrb	r3, [r7, #12]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	7b7b      	ldrb	r3, [r7, #13]
 800152a:	b21b      	sxth	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b21b      	sxth	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001536:	fb92 f3f3 	sdiv	r3, r2, r3
    magnetometerValues->magnetometerZ =
 800153a:	b21a      	sxth	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	809a      	strh	r2, [r3, #4]

}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_Init+0x40>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_Init+0x40>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x40>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f94f 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fa7c 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f967 	bl	800187e <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c8:	f000 f92f 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	2000026c 	.word	0x2000026c

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	2000026c 	.word	0x2000026c

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff feb6 	bl	8001614 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e099      	b.n	80019e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d4:	e00f      	b.n	80018f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d6:	f7ff fe9d 	bl	8001614 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d908      	bls.n	80018f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e078      	b.n	80019e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e8      	bne.n	80018d6 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_DMA_Init+0x158>)
 8001910:	4013      	ands	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	2b04      	cmp	r3, #4
 800194e:	d107      	bne.n	8001960 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4313      	orrs	r3, r2
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f023 0307 	bic.w	r3, r3, #7
 8001976:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	2b04      	cmp	r3, #4
 8001988:	d117      	bne.n	80019ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f8e5 	bl	8001b6c <DMA_CheckFifoParam>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e016      	b.n	80019e8 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f89c 	bl	8001b00 <DMA_CalcBaseAndBitshift>
 80019c8:	4603      	mov	r3, r0
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	223f      	movs	r2, #63	; 0x3f
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	f010803f 	.word	0xf010803f

080019f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_DMA_Start_IT+0x26>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e040      	b.n	8001a9c <HAL_DMA_Start_IT+0xa8>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d12f      	bne.n	8001a8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2202      	movs	r2, #2
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f82e 	bl	8001aa4 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	223f      	movs	r2, #63	; 0x3f
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0216 	orr.w	r2, r2, #22
 8001a62:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0208 	orr.w	r2, r2, #8
 8001a7a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e005      	b.n	8001a9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8001a96:	2302      	movs	r3, #2
 8001a98:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ac0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b40      	cmp	r3, #64	; 0x40
 8001ad0:	d108      	bne.n	8001ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ae2:	e007      	b.n	8001af4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	3b10      	subs	r3, #16
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <DMA_CalcBaseAndBitshift+0x64>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <DMA_CalcBaseAndBitshift+0x68>)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d909      	bls.n	8001b42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b36:	f023 0303 	bic.w	r3, r3, #3
 8001b3a:	1d1a      	adds	r2, r3, #4
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b40:	e007      	b.n	8001b52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	aaaaaaab 	.word	0xaaaaaaab
 8001b68:	0800a418 	.word	0x0800a418

08001b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11f      	bne.n	8001bc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d856      	bhi.n	8001c3a <DMA_CheckFifoParam+0xce>
 8001b8c:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <DMA_CheckFifoParam+0x28>)
 8001b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b92:	bf00      	nop
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bb7 	.word	0x08001bb7
 8001b9c:	08001ba5 	.word	0x08001ba5
 8001ba0:	08001c3b 	.word	0x08001c3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d046      	beq.n	8001c3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb4:	e043      	b.n	8001c3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bbe:	d140      	bne.n	8001c42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc4:	e03d      	b.n	8001c42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bce:	d121      	bne.n	8001c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d837      	bhi.n	8001c46 <DMA_CheckFifoParam+0xda>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <DMA_CheckFifoParam+0x70>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001bed 	.word	0x08001bed
 8001be0:	08001bf3 	.word	0x08001bf3
 8001be4:	08001bed 	.word	0x08001bed
 8001be8:	08001c05 	.word	0x08001c05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf0:	e030      	b.n	8001c54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d025      	beq.n	8001c4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c02:	e022      	b.n	8001c4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c0c:	d11f      	bne.n	8001c4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c12:	e01c      	b.n	8001c4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d903      	bls.n	8001c22 <DMA_CheckFifoParam+0xb6>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d003      	beq.n	8001c28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c20:	e018      	b.n	8001c54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
      break;
 8001c26:	e015      	b.n	8001c54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00e      	beq.n	8001c52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      break;
 8001c38:	e00b      	b.n	8001c52 <DMA_CheckFifoParam+0xe6>
      break;
 8001c3a:	bf00      	nop
 8001c3c:	e00a      	b.n	8001c54 <DMA_CheckFifoParam+0xe8>
      break;
 8001c3e:	bf00      	nop
 8001c40:	e008      	b.n	8001c54 <DMA_CheckFifoParam+0xe8>
      break;
 8001c42:	bf00      	nop
 8001c44:	e006      	b.n	8001c54 <DMA_CheckFifoParam+0xe8>
      break;
 8001c46:	bf00      	nop
 8001c48:	e004      	b.n	8001c54 <DMA_CheckFifoParam+0xe8>
      break;
 8001c4a:	bf00      	nop
 8001c4c:	e002      	b.n	8001c54 <DMA_CheckFifoParam+0xe8>
      break;
 8001c4e:	bf00      	nop
 8001c50:	e000      	b.n	8001c54 <DMA_CheckFifoParam+0xe8>
      break;
 8001c52:	bf00      	nop
    }
  }

  return status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e159      	b.n	8001f34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	f040 8148 	bne.w	8001f2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d005      	beq.n	8001cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d130      	bne.n	8001d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 0201 	and.w	r2, r3, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d017      	beq.n	8001d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d123      	bne.n	8001da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a2 	beq.w	8001f2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfa:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e06:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_GPIO_Init+0x2ec>)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a49      	ldr	r2, [pc, #292]	; (8001f54 <HAL_GPIO_Init+0x2f0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d019      	beq.n	8001e66 <HAL_GPIO_Init+0x202>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <HAL_GPIO_Init+0x2f4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0x1fe>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a47      	ldr	r2, [pc, #284]	; (8001f5c <HAL_GPIO_Init+0x2f8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00d      	beq.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a46      	ldr	r2, [pc, #280]	; (8001f60 <HAL_GPIO_Init+0x2fc>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d007      	beq.n	8001e5a <HAL_GPIO_Init+0x1f6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a45      	ldr	r2, [pc, #276]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_GPIO_Init+0x1f2>
 8001e52:	2304      	movs	r3, #4
 8001e54:	e008      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e56:	2307      	movs	r3, #7
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e66:	2300      	movs	r3, #0
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e78:	4935      	ldr	r1, [pc, #212]	; (8001f50 <HAL_GPIO_Init+0x2ec>)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e86:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eaa:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed4:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efe:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	f67f aea2 	bls.w	8001c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40013c00 	.word	0x40013c00

08001f6c <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e12b      	b.n	80021d6 <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fd98 	bl	8000ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2224      	movs	r2, #36	; 0x24
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fbe:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fce:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fd0:	f002 fe38 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 8001fd4:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4a81      	ldr	r2, [pc, #516]	; (80021e0 <HAL_I2C_Init+0x274>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d807      	bhi.n	8001ff0 <HAL_I2C_Init+0x84>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4a80      	ldr	r2, [pc, #512]	; (80021e4 <HAL_I2C_Init+0x278>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	bf94      	ite	ls
 8001fe8:	2301      	movls	r3, #1
 8001fea:	2300      	movhi	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	e006      	b.n	8001ffe <HAL_I2C_Init+0x92>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a7d      	ldr	r2, [pc, #500]	; (80021e8 <HAL_I2C_Init+0x27c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	bf94      	ite	ls
 8001ff8:	2301      	movls	r3, #1
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0e7      	b.n	80021d6 <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4a78      	ldr	r2, [pc, #480]	; (80021ec <HAL_I2C_Init+0x280>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0c9b      	lsrs	r3, r3, #18
 8002010:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	430a      	orrs	r2, r1
 8002024:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a6a      	ldr	r2, [pc, #424]	; (80021e0 <HAL_I2C_Init+0x274>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d802      	bhi.n	8002040 <HAL_I2C_Init+0xd4>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3301      	adds	r3, #1
 800203e:	e009      	b.n	8002054 <HAL_I2C_Init+0xe8>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	4a69      	ldr	r2, [pc, #420]	; (80021f0 <HAL_I2C_Init+0x284>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	3301      	adds	r3, #1
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	430b      	orrs	r3, r1
 800205a:	6213      	str	r3, [r2, #32]
               I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002066:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	495c      	ldr	r1, [pc, #368]	; (80021e0 <HAL_I2C_Init+0x274>)
 8002070:	428b      	cmp	r3, r1
 8002072:	d819      	bhi.n	80020a8 <HAL_I2C_Init+0x13c>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e59      	subs	r1, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002082:	1c59      	adds	r1, r3, #1
 8002084:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002088:	400b      	ands	r3, r1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_I2C_Init+0x138>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1e59      	subs	r1, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fbb1 f3f3 	udiv	r3, r1, r3
 800209c:	3301      	adds	r3, #1
 800209e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a2:	e051      	b.n	8002148 <HAL_I2C_Init+0x1dc>
 80020a4:	2304      	movs	r3, #4
 80020a6:	e04f      	b.n	8002148 <HAL_I2C_Init+0x1dc>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d111      	bne.n	80020d4 <HAL_I2C_Init+0x168>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1e58      	subs	r0, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	440b      	add	r3, r1
 80020be:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	e012      	b.n	80020fa <HAL_I2C_Init+0x18e>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1e58      	subs	r0, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	0099      	lsls	r1, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Init+0x196>
 80020fe:	2301      	movs	r3, #1
 8002100:	e022      	b.n	8002148 <HAL_I2C_Init+0x1dc>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10e      	bne.n	8002128 <HAL_I2C_Init+0x1bc>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1e58      	subs	r0, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6859      	ldr	r1, [r3, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	440b      	add	r3, r1
 8002118:	fbb0 f3f3 	udiv	r3, r0, r3
 800211c:	3301      	adds	r3, #1
 800211e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002126:	e00f      	b.n	8002148 <HAL_I2C_Init+0x1dc>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1e58      	subs	r0, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	0099      	lsls	r1, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	fbb0 f3f3 	udiv	r3, r0, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	6809      	ldr	r1, [r1, #0]
 800214c:	4313      	orrs	r3, r2
 800214e:	61cb      	str	r3, [r1, #28]
               I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69da      	ldr	r2, [r3, #28]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
               (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6911      	ldr	r1, [r2, #16]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68d2      	ldr	r2, [r2, #12]
 8002182:	4311      	orrs	r1, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	430b      	orrs	r3, r1
 800218a:	6093      	str	r3, [r2, #8]
               (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
               (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	60da      	str	r2, [r3, #12]
               (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	000186a0 	.word	0x000186a0
 80021e4:	001e847f 	.word	0x001e847f
 80021e8:	003d08ff 	.word	0x003d08ff
 80021ec:	431bde83 	.word	0x431bde83
 80021f0:	10624dd3 	.word	0x10624dd3

080021f4 <HAL_I2C_Mem_Write>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                    uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                    uint16_t Size, uint32_t Timeout) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4603      	mov	r3, r0
 8002204:	817b      	strh	r3, [r7, #10]
 8002206:	460b      	mov	r3, r1
 8002208:	813b      	strh	r3, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 800220e:	f7ff fa01 	bl	8001614 <HAL_GetTick>
 8002212:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b20      	cmp	r3, #32
 800221e:	f040 80d9 	bne.w	80023d4 <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2319      	movs	r3, #25
 8002228:	2201      	movs	r2, #1
 800222a:	496d      	ldr	r1, [pc, #436]	; (80023e0 <HAL_I2C_Mem_Write+0x1ec>)
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fc7f 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_I2C_Mem_Write+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
 800223a:	e0cc      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_I2C_Mem_Write+0x56>
 8002246:	2302      	movs	r3, #2
 8002248:	e0c5      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e2>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d007      	beq.n	8002270 <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2221      	movs	r2, #33	; 0x21
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a3a      	ldr	r2, [r7, #32]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4a4d      	ldr	r2, [pc, #308]	; (80023e4 <HAL_I2C_Mem_Write+0x1f0>)
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 80022b2:	88f8      	ldrh	r0, [r7, #6]
 80022b4:	893a      	ldrh	r2, [r7, #8]
 80022b6:	8979      	ldrh	r1, [r7, #10]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	4603      	mov	r3, r0
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fab6 	bl	8002834 <I2C_RequestMemoryWrite>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d052      	beq.n	8002374 <HAL_I2C_Mem_Write+0x180>
            HAL_OK) {
            return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e081      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fd00 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00d      	beq.n	80022fe <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d107      	bne.n	80022fa <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f8:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06b      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	625a      	str	r2, [r3, #36]	; 0x24

            /* Update counter */
            hi2c->XferSize--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	851a      	strh	r2, [r3, #40]	; 0x28
            hi2c->XferCount--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002324:	b29b      	uxth	r3, r3
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	855a      	strh	r2, [r3, #42]	; 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b04      	cmp	r3, #4
 800233a:	d11b      	bne.n	8002374 <HAL_I2C_Mem_Write+0x180>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	d017      	beq.n	8002374 <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1aa      	bne.n	80022d2 <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 fcec 	bl	8002d5e <I2C_WaitOnBTFFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00d      	beq.n	80023a8 <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	2b04      	cmp	r3, #4
 8002392:	d107      	bne.n	80023a4 <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a2:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e016      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e000      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
    }
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	00100002 	.word	0x00100002
 80023e4:	ffff0000 	.word	0xffff0000

080023e8 <HAL_I2C_Mem_Read>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                   uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                   uint16_t Size, uint32_t Timeout) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	4608      	mov	r0, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	817b      	strh	r3, [r7, #10]
 80023fa:	460b      	mov	r3, r1
 80023fc:	813b      	strh	r3, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8002402:	f7ff f907 	bl	8001614 <HAL_GetTick>
 8002406:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b20      	cmp	r3, #32
 8002412:	f040 8208 	bne.w	8002826 <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2319      	movs	r3, #25
 800241c:	2201      	movs	r2, #1
 800241e:	497b      	ldr	r1, [pc, #492]	; (800260c <HAL_I2C_Mem_Read+0x224>)
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fb85 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_Mem_Read+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
 800242e:	e1fb      	b.n	8002828 <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_I2C_Mem_Read+0x56>
 800243a:	2302      	movs	r3, #2
 800243c:	e1f4      	b.n	8002828 <HAL_I2C_Mem_Read+0x440>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d007      	beq.n	8002464 <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002472:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2222      	movs	r2, #34	; 0x22
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2240      	movs	r2, #64	; 0x40
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002494:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a5b      	ldr	r2, [pc, #364]	; (8002610 <HAL_I2C_Mem_Read+0x228>)
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 80024a6:	88f8      	ldrh	r0, [r7, #6]
 80024a8:	893a      	ldrh	r2, [r7, #8]
 80024aa:	8979      	ldrh	r1, [r7, #10]
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	4603      	mov	r3, r0
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fa52 	bl	8002960 <I2C_RequestMemoryRead>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Mem_Read+0xde>
            HAL_OK) {
            return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e1b0      	b.n	8002828 <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d113      	bne.n	80024f6 <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e184      	b.n	8002800 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d11b      	bne.n	8002536 <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e164      	b.n	8002800 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	2b02      	cmp	r3, #2
 800253c:	d11b      	bne.n	8002576 <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254c:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800255c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	e144      	b.n	8002800 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 800258c:	e138      	b.n	8002800 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002592:	2b03      	cmp	r3, #3
 8002594:	f200 80f1 	bhi.w	800277a <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	2b01      	cmp	r3, #1
 800259e:	d123      	bne.n	80025e8 <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80025a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fc1b 	bl	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e139      	b.n	8002828 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025e6:	e10b      	b.n	8002800 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d14e      	bne.n	800268e <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f6:	2200      	movs	r2, #0
 80025f8:	4906      	ldr	r1, [pc, #24]	; (8002614 <HAL_I2C_Mem_Read+0x22c>)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fa98 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_I2C_Mem_Read+0x230>
                        HAL_OK) {
                        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e10e      	b.n	8002828 <HAL_I2C_Mem_Read+0x440>
 800260a:	bf00      	nop
 800260c:	00100002 	.word	0x00100002
 8002610:	ffff0000 	.word	0xffff0000
 8002614:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800268c:	e0b8      	b.n	8002800 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	2200      	movs	r2, #0
 8002696:	4966      	ldr	r1, [pc, #408]	; (8002830 <HAL_I2C_Mem_Read+0x448>)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fa49 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x2c0>
                        HAL_OK) {
                        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0bf      	b.n	8002828 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b6:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	2200      	movs	r2, #0
 80026f2:	494f      	ldr	r1, [pc, #316]	; (8002830 <HAL_I2C_Mem_Read+0x448>)
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fa1b 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Mem_Read+0x31c>
                        HAL_OK) {
                        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e091      	b.n	8002828 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002712:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002778:	e042      	b.n	8002800 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fb2e 	bl	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e04c      	b.n	8002828 <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d118      	bne.n	8002800 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	2b00      	cmp	r3, #0
 8002806:	f47f aec2 	bne.w	800258e <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e000      	b.n	8002828 <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 8002826:	2302      	movs	r3, #2
    }
}
 8002828:	4618      	mov	r0, r3
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	00010004 	.word	0x00010004

08002834 <I2C_RequestMemoryWrite>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize,
                                                uint32_t Timeout, uint32_t Tickstart) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	4608      	mov	r0, r1
 800283e:	4611      	mov	r1, r2
 8002840:	461a      	mov	r2, r3
 8002842:	4603      	mov	r3, r0
 8002844:	817b      	strh	r3, [r7, #10]
 8002846:	460b      	mov	r3, r1
 8002848:	813b      	strh	r3, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	2200      	movs	r2, #0
 8002866:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f960 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00d      	beq.n	8002892 <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002884:	d103      	bne.n	800288e <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e05f      	b.n	8002952 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002892:	897b      	ldrh	r3, [r7, #10]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028a0:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	6a3a      	ldr	r2, [r7, #32]
 80028a6:	492d      	ldr	r1, [pc, #180]	; (800295c <I2C_RequestMemoryWrite+0x128>)
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f998 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <I2C_RequestMemoryWrite+0x84>
        HAL_OK) {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e04c      	b.n	8002952 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80028ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d0:	6a39      	ldr	r1, [r7, #32]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fa02 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d107      	bne.n	80028f6 <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e02b      	b.n	8002952 <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002900:	893b      	ldrh	r3, [r7, #8]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]
 800290a:	e021      	b.n	8002950 <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800290c:	893b      	ldrh	r3, [r7, #8]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	b29b      	uxth	r3, r3
 8002912:	b2da      	uxtb	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	6a39      	ldr	r1, [r7, #32]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f9dc 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2b04      	cmp	r3, #4
 8002930:	d107      	bne.n	8002942 <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002940:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e005      	b.n	8002952 <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002946:	893b      	ldrh	r3, [r7, #8]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	00010002 	.word	0x00010002

08002960 <I2C_RequestMemoryRead>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize,
                                               uint32_t Timeout, uint32_t Tickstart) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	4608      	mov	r0, r1
 800296a:	4611      	mov	r1, r2
 800296c:	461a      	mov	r2, r3
 800296e:	4603      	mov	r3, r0
 8002970:	817b      	strh	r3, [r7, #10]
 8002972:	460b      	mov	r3, r1
 8002974:	813b      	strh	r3, [r7, #8]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002988:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002998:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f8c2 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00d      	beq.n	80029ce <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c0:	d103      	bne.n	80029ca <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0aa      	b.n	8002b24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ce:	897b      	ldrh	r3, [r7, #10]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029dc:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	4952      	ldr	r1, [pc, #328]	; (8002b2c <I2C_RequestMemoryRead+0x1cc>)
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f8fa 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <I2C_RequestMemoryRead+0x94>
        HAL_OK) {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e097      	b.n	8002b24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	6a39      	ldr	r1, [r7, #32]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f964 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d107      	bne.n	8002a32 <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e076      	b.n	8002b24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d105      	bne.n	8002a48 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a3c:	893b      	ldrh	r3, [r7, #8]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	e021      	b.n	8002a8c <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a48:	893b      	ldrh	r3, [r7, #8]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	6a39      	ldr	r1, [r7, #32]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f93e 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d107      	bne.n	8002a7e <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7c:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e050      	b.n	8002b24 <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a82:	893b      	ldrh	r3, [r7, #8]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8002a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8e:	6a39      	ldr	r1, [r7, #32]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f923 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d107      	bne.n	8002ab4 <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e035      	b.n	8002b24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f82b 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00d      	beq.n	8002afc <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aee:	d103      	bne.n	8002af8 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e013      	b.n	8002b24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002afc:	897b      	ldrh	r3, [r7, #10]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	6a3a      	ldr	r2, [r7, #32]
 8002b10:	4906      	ldr	r1, [pc, #24]	; (8002b2c <I2C_RequestMemoryRead+0x1cc>)
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f863 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <I2C_RequestMemoryRead+0x1c2>
        HAL_OK) {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	00010002 	.word	0x00010002

08002b30 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag,
                                                    FlagStatus Status, uint32_t Timeout,
                                                    uint32_t Tickstart) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8002b40:	e025      	b.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b48:	d021      	beq.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002b4a:	f7fe fd63 	bl	8001614 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d116      	bne.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e023      	b.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d10d      	bne.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	e00c      	b.n	8002bce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d0b6      	beq.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c,
                                                                 uint32_t Flag, uint32_t Timeout,
                                                                 uint32_t Tickstart) {
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8002bec:	e051      	b.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfc:	d123      	bne.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0c:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c16:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f043 0204 	orr.w	r2, r3, #4
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e046      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c4c:	d021      	beq.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002c4e:	f7fe fce1 	bl	8001614 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e020      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d10c      	bne.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e00b      	b.n	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d18d      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_WaitOnTXEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8002ce8:	e02d      	b.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f8ce 	bl	8002e8c <I2C_IsAcknowledgeFailed>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e02d      	b.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d00:	d021      	beq.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002d02:	f7fe fc87 	bl	8001614 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d116      	bne.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f043 0220 	orr.w	r2, r3, #32
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e007      	b.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	d1ca      	bne.n	8002cea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <I2C_WaitOnBTFFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8002d6a:	e02d      	b.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f88d 	bl	8002e8c <I2C_IsAcknowledgeFailed>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e02d      	b.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d82:	d021      	beq.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002d84:	f7fe fc46 	bl	8001614 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d116      	bne.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e007      	b.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d1ca      	bne.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8002dec:	e042      	b.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d119      	bne.n	8002e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0210 	mvn.w	r2, #16
 8002e04:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e029      	b.n	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002e30:	f7fe fbf0 	bl	8001614 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d302      	bcc.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d116      	bne.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d1b5      	bne.n	8002dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea2:	d11b      	bne.n	8002edc <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eac:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eec:	b08f      	sub	sp, #60	; 0x3c
 8002eee:	af0a      	add	r7, sp, #40	; 0x28
 8002ef0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e10f      	b.n	800311c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f006 fa16 	bl	8009348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 fcfd 	bl	800593a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	687e      	ldr	r6, [r7, #4]
 8002f48:	466d      	mov	r5, sp
 8002f4a:	f106 0410 	add.w	r4, r6, #16
 8002f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f5e:	1d33      	adds	r3, r6, #4
 8002f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f62:	6838      	ldr	r0, [r7, #0]
 8002f64:	f002 fbd4 	bl	8005710 <USB_CoreInit>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0d0      	b.n	800311c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f002 fceb 	bl	800595c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e04a      	b.n	8003022 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	333d      	adds	r3, #61	; 0x3d
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	333c      	adds	r3, #60	; 0x3c
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	b298      	uxth	r0, r3
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3344      	adds	r3, #68	; 0x44
 8002fc8:	4602      	mov	r2, r0
 8002fca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	3340      	adds	r3, #64	; 0x40
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	3348      	adds	r3, #72	; 0x48
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	334c      	adds	r3, #76	; 0x4c
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3354      	adds	r3, #84	; 0x54
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	3301      	adds	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	d3af      	bcc.n	8002f8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	e044      	b.n	80030bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	3301      	adds	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d3b5      	bcc.n	8003032 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	687e      	ldr	r6, [r7, #4]
 80030ce:	466d      	mov	r5, sp
 80030d0:	f106 0410 	add.w	r4, r6, #16
 80030d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e4:	1d33      	adds	r3, r6, #4
 80030e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e8:	6838      	ldr	r0, [r7, #0]
 80030ea:	f002 fc83 	bl	80059f4 <USB_DevInit>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e00d      	b.n	800311c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f003 fdd2 	bl	8006cbe <USB_DevDisconnect>

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003124 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_PCD_Start+0x1c>
 800313c:	2302      	movs	r3, #2
 800313e:	e020      	b.n	8003182 <HAL_PCD_Start+0x5e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	2b01      	cmp	r3, #1
 800314e:	d109      	bne.n	8003164 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003154:	2b01      	cmp	r3, #1
 8003156:	d005      	beq.n	8003164 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f002 fbd5 	bl	8005918 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f003 fd82 	bl	8006c7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800318a:	b590      	push	{r4, r7, lr}
 800318c:	b08d      	sub	sp, #52	; 0x34
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fe40 	bl	8006e26 <USB_GetMode>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f040 848a 	bne.w	8003ac2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 fda4 	bl	8006d00 <USB_ReadInterrupts>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8480 	beq.w	8003ac0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fd91 	bl	8006d00 <USB_ReadInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d107      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f002 0202 	and.w	r2, r2, #2
 80031f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 fd7f 	bl	8006d00 <USB_ReadInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b10      	cmp	r3, #16
 800320a:	d161      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0210 	bic.w	r2, r2, #16
 800321a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 020f 	and.w	r2, r3, #15
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4413      	add	r3, r2
 8003238:	3304      	adds	r3, #4
 800323a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	0c5b      	lsrs	r3, r3, #17
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	2b02      	cmp	r3, #2
 8003246:	d124      	bne.n	8003292 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d035      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800325e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	6a38      	ldr	r0, [r7, #32]
 8003268:	f003 fbb6 	bl	80069d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003278:	441a      	add	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6a1a      	ldr	r2, [r3, #32]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800328a:	441a      	add	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	621a      	str	r2, [r3, #32]
 8003290:	e016      	b.n	80032c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	0c5b      	lsrs	r3, r3, #17
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	2b06      	cmp	r3, #6
 800329c:	d110      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032a4:	2208      	movs	r2, #8
 80032a6:	4619      	mov	r1, r3
 80032a8:	6a38      	ldr	r0, [r7, #32]
 80032aa:	f003 fb95 	bl	80069d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	6a1a      	ldr	r2, [r3, #32]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ba:	441a      	add	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0210 	orr.w	r2, r2, #16
 80032ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 fd13 	bl	8006d00 <USB_ReadInterrupts>
 80032da:	4603      	mov	r3, r0
 80032dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032e4:	f040 80a7 	bne.w	8003436 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 fd18 	bl	8006d26 <USB_ReadDevAllOutEpInterrupt>
 80032f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032f8:	e099      	b.n	800342e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 808e 	beq.w	8003422 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f003 fd3c 	bl	8006d8e <USB_ReadDevOutEPInterrupt>
 8003316:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00c      	beq.n	800333c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332e:	461a      	mov	r2, r3
 8003330:	2301      	movs	r3, #1
 8003332:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fec2 	bl	80040c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00c      	beq.n	8003360 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003352:	461a      	mov	r2, r3
 8003354:	2308      	movs	r3, #8
 8003356:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 ff98 	bl	8004290 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	461a      	mov	r2, r3
 8003378:	2310      	movs	r3, #16
 800337a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d030      	beq.n	80033e8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b80      	cmp	r3, #128	; 0x80
 8003390:	d109      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	3304      	adds	r3, #4
 80033ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	78db      	ldrb	r3, [r3, #3]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d108      	bne.n	80033d6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2200      	movs	r2, #0
 80033c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f006 f8b5 	bl	8009540 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e2:	461a      	mov	r2, r3
 80033e4:	2302      	movs	r3, #2
 80033e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fe:	461a      	mov	r2, r3
 8003400:	2320      	movs	r3, #32
 8003402:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341a:	461a      	mov	r2, r3
 800341c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003420:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	3301      	adds	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	f47f af62 	bne.w	80032fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f003 fc60 	bl	8006d00 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003446:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800344a:	f040 80db 	bne.w	8003604 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fc81 	bl	8006d5a <USB_ReadDevAllInEpInterrupt>
 8003458:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800345e:	e0cd      	b.n	80035fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80c2 	beq.w	80035f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f003 fca7 	bl	8006dca <USB_ReadDevInEPInterrupt>
 800347c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d057      	beq.n	8003538 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	2201      	movs	r2, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69f9      	ldr	r1, [r7, #28]
 80034a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034a8:	4013      	ands	r3, r2
 80034aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b8:	461a      	mov	r2, r3
 80034ba:	2301      	movs	r3, #1
 80034bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d132      	bne.n	800352c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	334c      	adds	r3, #76	; 0x4c
 80034d6:	6819      	ldr	r1, [r3, #0]
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4403      	add	r3, r0
 80034e6:	3348      	adds	r3, #72	; 0x48
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4419      	add	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4403      	add	r3, r0
 80034fa:	334c      	adds	r3, #76	; 0x4c
 80034fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d113      	bne.n	800352c <HAL_PCD_IRQHandler+0x3a2>
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3354      	adds	r3, #84	; 0x54
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d108      	bne.n	800352c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003524:	461a      	mov	r2, r3
 8003526:	2101      	movs	r1, #1
 8003528:	f003 fcae 	bl	8006e88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	b2db      	uxtb	r3, r3
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f005 ff89 	bl	800944a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354e:	461a      	mov	r2, r3
 8003550:	2308      	movs	r3, #8
 8003552:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356a:	461a      	mov	r2, r3
 800356c:	2310      	movs	r3, #16
 800356e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003586:	461a      	mov	r2, r3
 8003588:	2340      	movs	r3, #64	; 0x40
 800358a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d023      	beq.n	80035de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003598:	6a38      	ldr	r0, [r7, #32]
 800359a:	f002 fb8f 	bl	8005cbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800359e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	3338      	adds	r3, #56	; 0x38
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	3304      	adds	r3, #4
 80035b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	78db      	ldrb	r3, [r3, #3]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d108      	bne.n	80035cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	4619      	mov	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f005 ffcc 	bl	8009564 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d8:	461a      	mov	r2, r3
 80035da:	2302      	movs	r3, #2
 80035dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fcdb 	bl	8003fa6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	3301      	adds	r3, #1
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f47f af2e 	bne.w	8003460 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f003 fb79 	bl	8006d00 <USB_ReadInterrupts>
 800360e:	4603      	mov	r3, r0
 8003610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003618:	d122      	bne.n	8003660 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003634:	2b01      	cmp	r3, #1
 8003636:	d108      	bne.n	800364a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003640:	2100      	movs	r1, #0
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fec2 	bl	80043cc <HAL_PCDEx_LPM_Callback>
 8003648:	e002      	b.n	8003650 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f005 ff6a 	bl	8009524 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800365e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f003 fb4b 	bl	8006d00 <USB_ReadInterrupts>
 800366a:	4603      	mov	r3, r0
 800366c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003674:	d112      	bne.n	800369c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b01      	cmp	r3, #1
 8003684:	d102      	bne.n	800368c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f005 ff26 	bl	80094d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800369a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 fb2d 	bl	8006d00 <USB_ReadInterrupts>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b0:	f040 80b7 	bne.w	8003822 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2110      	movs	r1, #16
 80036ce:	4618      	mov	r0, r3
 80036d0:	f002 faf4 	bl	8005cbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d8:	e046      	b.n	8003768 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	461a      	mov	r2, r3
 80036e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fe:	0151      	lsls	r1, r2, #5
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	440a      	add	r2, r1
 8003704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003708:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800370c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371a:	461a      	mov	r2, r3
 800371c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003720:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003732:	0151      	lsls	r1, r2, #5
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	440a      	add	r2, r1
 8003738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800373c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003740:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003752:	0151      	lsls	r1, r2, #5
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	440a      	add	r2, r1
 8003758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800375c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003760:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	3301      	adds	r3, #1
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376e:	429a      	cmp	r2, r3
 8003770:	d3b3      	bcc.n	80036da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003780:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003784:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379e:	f043 030b 	orr.w	r3, r3, #11
 80037a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b4:	f043 030b 	orr.w	r3, r3, #11
 80037b8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ba:	e015      	b.n	80037e8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e2:	f043 030b 	orr.w	r3, r3, #11
 80037e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800380c:	461a      	mov	r2, r3
 800380e:	f003 fb3b 	bl	8006e88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f003 fa6a 	bl	8006d00 <USB_ReadInterrupts>
 800382c:	4603      	mov	r3, r0
 800382e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003836:	d124      	bne.n	8003882 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f003 fb00 	bl	8006e42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f002 fab5 	bl	8005db6 <USB_GetDevSpeed>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681c      	ldr	r4, [r3, #0]
 8003858:	f001 f9e8 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 800385c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	4620      	mov	r0, r4
 8003868:	f001 ffb4 	bl	80057d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f005 fe14 	bl	800949a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003880:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f003 fa3a 	bl	8006d00 <USB_ReadInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d10a      	bne.n	80038ac <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f005 fdf1 	bl	800947e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f002 0208 	and.w	r2, r2, #8
 80038aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 fa25 	bl	8006d00 <USB_ReadInterrupts>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d122      	bne.n	8003906 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038cc:	2301      	movs	r3, #1
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	e014      	b.n	80038fc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fb27 	bl	8003f44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	3301      	adds	r3, #1
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	429a      	cmp	r2, r3
 8003904:	d3e5      	bcc.n	80038d2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f003 f9f8 	bl	8006d00 <USB_ReadInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800391a:	d13b      	bne.n	8003994 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800391c:	2301      	movs	r3, #1
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
 8003920:	e02b      	b.n	800397a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	3340      	adds	r3, #64	; 0x40
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d115      	bne.n	8003974 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003948:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800394a:	2b00      	cmp	r3, #0
 800394c:	da12      	bge.n	8003974 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	333f      	adds	r3, #63	; 0x3f
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fae8 	bl	8003f44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	3301      	adds	r3, #1
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	429a      	cmp	r2, r3
 8003982:	d3ce      	bcc.n	8003922 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f003 f9b1 	bl	8006d00 <USB_ReadInterrupts>
 800399e:	4603      	mov	r3, r0
 80039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a8:	d155      	bne.n	8003a56 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039aa:	2301      	movs	r3, #1
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	e045      	b.n	8003a3c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d12e      	bne.n	8003a36 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	da2b      	bge.n	8003a36 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80039ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d121      	bne.n	8003a36 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a32:	6053      	str	r3, [r2, #4]
            break;
 8003a34:	e007      	b.n	8003a46 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	3301      	adds	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d3b4      	bcc.n	80039b0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f003 f950 	bl	8006d00 <USB_ReadInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6a:	d10a      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f005 fd8b 	bl	8009588 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f003 f93a 	bl	8006d00 <USB_ReadInterrupts>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d115      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f005 fd7b 	bl	80095a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	e000      	b.n	8003ac2 <HAL_PCD_IRQHandler+0x938>
      return;
 8003ac0:	bf00      	nop
    }
  }
}
 8003ac2:	3734      	adds	r7, #52	; 0x34
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd90      	pop	{r4, r7, pc}

08003ac8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_PCD_SetAddress+0x1a>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e013      	b.n	8003b0a <HAL_PCD_SetAddress+0x42>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f003 f898 	bl	8006c30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	4608      	mov	r0, r1
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4603      	mov	r3, r0
 8003b22:	70fb      	strb	r3, [r7, #3]
 8003b24:	460b      	mov	r3, r1
 8003b26:	803b      	strh	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	da0f      	bge.n	8003b58 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 020f 	and.w	r2, r3, #15
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	3338      	adds	r3, #56	; 0x38
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	705a      	strb	r2, [r3, #1]
 8003b56:	e00f      	b.n	8003b78 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 020f 	and.w	r2, r3, #15
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3304      	adds	r3, #4
 8003b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b84:	883a      	ldrh	r2, [r7, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	78ba      	ldrb	r2, [r7, #2]
 8003b8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ba2:	78bb      	ldrb	r3, [r7, #2]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d102      	bne.n	8003bae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_PCD_EP_Open+0xaa>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e00e      	b.n	8003bda <HAL_PCD_EP_Open+0xc8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68f9      	ldr	r1, [r7, #12]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f002 f918 	bl	8005e00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da0f      	bge.n	8003c16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	f003 020f 	and.w	r2, r3, #15
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	3338      	adds	r3, #56	; 0x38
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	705a      	strb	r2, [r3, #1]
 8003c14:	e00f      	b.n	8003c36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_PCD_EP_Close+0x6e>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e00e      	b.n	8003c6e <HAL_PCD_EP_Close+0x8c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68f9      	ldr	r1, [r7, #12]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f002 f956 	bl	8005f10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	460b      	mov	r3, r1
 8003c84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c86:	7afb      	ldrb	r3, [r7, #11]
 8003c88:	f003 020f 	and.w	r2, r3, #15
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d102      	bne.n	8003cd2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cd2:	7afb      	ldrb	r3, [r7, #11]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6979      	ldr	r1, [r7, #20]
 8003cea:	f002 fc35 	bl	8006558 <USB_EP0StartXfer>
 8003cee:	e008      	b.n	8003d02 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	6979      	ldr	r1, [r7, #20]
 8003cfe:	f002 f9e3 	bl	80060c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	f003 020f 	and.w	r2, r3, #15
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4c:	7afb      	ldrb	r3, [r7, #11]
 8003d4e:	f003 020f 	and.w	r2, r3, #15
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	3338      	adds	r3, #56	; 0x38
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2200      	movs	r2, #0
 8003d74:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d96:	7afb      	ldrb	r3, [r7, #11]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	6979      	ldr	r1, [r7, #20]
 8003dae:	f002 fbd3 	bl	8006558 <USB_EP0StartXfer>
 8003db2:	e008      	b.n	8003dc6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6979      	ldr	r1, [r7, #20]
 8003dc2:	f002 f981 	bl	80060c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 020f 	and.w	r2, r3, #15
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d901      	bls.n	8003dee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e050      	b.n	8003e90 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da0f      	bge.n	8003e16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	3338      	adds	r3, #56	; 0x38
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	705a      	strb	r2, [r3, #1]
 8003e14:	e00d      	b.n	8003e32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4413      	add	r3, r2
 8003e28:	3304      	adds	r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_PCD_EP_SetStall+0x82>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e01e      	b.n	8003e90 <HAL_PCD_EP_SetStall+0xc0>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f002 fe11 	bl	8006a88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	b2d9      	uxtb	r1, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e80:	461a      	mov	r2, r3
 8003e82:	f003 f801 	bl	8006e88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	f003 020f 	and.w	r2, r3, #15
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d901      	bls.n	8003eb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e042      	b.n	8003f3c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da0f      	bge.n	8003ede <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	f003 020f 	and.w	r2, r3, #15
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	3338      	adds	r3, #56	; 0x38
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	705a      	strb	r2, [r3, #1]
 8003edc:	e00f      	b.n	8003efe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	f003 020f 	and.w	r2, r3, #15
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_PCD_EP_ClrStall+0x86>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e00e      	b.n	8003f3c <HAL_PCD_EP_ClrStall+0xa4>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f002 fe19 	bl	8006b64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	da0c      	bge.n	8003f72 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	f003 020f 	and.w	r2, r3, #15
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	3338      	adds	r3, #56	; 0x38
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e00c      	b.n	8003f8c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	f003 020f 	and.w	r2, r3, #15
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4413      	add	r3, r2
 8003f88:	3304      	adds	r3, #4
 8003f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f002 fc38 	bl	8006808 <USB_EPStopXfer>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b08a      	sub	sp, #40	; 0x28
 8003faa:	af02      	add	r7, sp, #8
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	3338      	adds	r3, #56	; 0x38
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	3304      	adds	r3, #4
 8003fcc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1a      	ldr	r2, [r3, #32]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d901      	bls.n	8003fde <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e06c      	b.n	80040b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d902      	bls.n	8003ffa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3303      	adds	r3, #3
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004002:	e02b      	b.n	800405c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	429a      	cmp	r2, r3
 8004018:	d902      	bls.n	8004020 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	3303      	adds	r3, #3
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6919      	ldr	r1, [r3, #16]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004038:	b2db      	uxtb	r3, r3
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	4603      	mov	r3, r0
 800403e:	6978      	ldr	r0, [r7, #20]
 8004040:	f002 fc8c 	bl	800695c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	441a      	add	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1a      	ldr	r2, [r3, #32]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	441a      	add	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	429a      	cmp	r2, r3
 8004070:	d809      	bhi.n	8004086 <PCD_WriteEmptyTxFifo+0xe0>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800407a:	429a      	cmp	r2, r3
 800407c:	d203      	bcs.n	8004086 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1be      	bne.n	8004004 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	429a      	cmp	r2, r3
 8004090:	d811      	bhi.n	80040b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	2201      	movs	r2, #1
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	6939      	ldr	r1, [r7, #16]
 80040ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040b2:	4013      	ands	r3, r2
 80040b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	333c      	adds	r3, #60	; 0x3c
 80040d8:	3304      	adds	r3, #4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d17b      	bne.n	80041ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d015      	beq.n	800412c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	4a61      	ldr	r2, [pc, #388]	; (8004288 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	f240 80b9 	bls.w	800427c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80b3 	beq.w	800427c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	461a      	mov	r2, r3
 8004124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004128:	6093      	str	r3, [r2, #8]
 800412a:	e0a7      	b.n	800427c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004142:	461a      	mov	r2, r3
 8004144:	2320      	movs	r3, #32
 8004146:	6093      	str	r3, [r2, #8]
 8004148:	e098      	b.n	800427c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	f040 8093 	bne.w	800427c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	4a4b      	ldr	r2, [pc, #300]	; (8004288 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d90f      	bls.n	800417e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004174:	461a      	mov	r2, r3
 8004176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800417a:	6093      	str	r3, [r2, #8]
 800417c:	e07e      	b.n	800427c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4413      	add	r3, r2
 8004190:	3304      	adds	r3, #4
 8004192:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	0159      	lsls	r1, r3, #5
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	440b      	add	r3, r1
 80041a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041aa:	1ad2      	subs	r2, r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d114      	bne.n	80041e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041c8:	461a      	mov	r2, r3
 80041ca:	2101      	movs	r1, #1
 80041cc:	f002 fe5c 	bl	8006e88 <USB_EP0_OutStart>
 80041d0:	e006      	b.n	80041e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	441a      	add	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	4619      	mov	r1, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f005 f914 	bl	8009414 <HAL_PCD_DataOutStageCallback>
 80041ec:	e046      	b.n	800427c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4a26      	ldr	r2, [pc, #152]	; (800428c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d124      	bne.n	8004240 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	461a      	mov	r2, r3
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	6093      	str	r3, [r2, #8]
 8004214:	e032      	b.n	800427c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	2320      	movs	r3, #32
 8004230:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f005 f8eb 	bl	8009414 <HAL_PCD_DataOutStageCallback>
 800423e:	e01d      	b.n	800427c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d114      	bne.n	8004270 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004268:	461a      	mov	r2, r3
 800426a:	2100      	movs	r1, #0
 800426c:	f002 fe0c 	bl	8006e88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f005 f8cc 	bl	8009414 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	4f54300a 	.word	0x4f54300a
 800428c:	4f54310a 	.word	0x4f54310a

08004290 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	333c      	adds	r3, #60	; 0x3c
 80042a8:	3304      	adds	r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a15      	ldr	r2, [pc, #84]	; (8004318 <PCD_EP_OutSetupPacket_int+0x88>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d90e      	bls.n	80042e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d009      	beq.n	80042e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	461a      	mov	r2, r3
 80042de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f005 f883 	bl	80093f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d90c      	bls.n	800430c <PCD_EP_OutSetupPacket_int+0x7c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d108      	bne.n	800430c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004304:	461a      	mov	r2, r3
 8004306:	2101      	movs	r1, #1
 8004308:	f002 fdbe 	bl	8006e88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	4f54300a 	.word	0x4f54300a

0800431c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	70fb      	strb	r3, [r7, #3]
 8004328:	4613      	mov	r3, r2
 800432a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d107      	bne.n	800434a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800433a:	883b      	ldrh	r3, [r7, #0]
 800433c:	0419      	lsls	r1, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	430a      	orrs	r2, r1
 8004346:	629a      	str	r2, [r3, #40]	; 0x28
 8004348:	e028      	b.n	800439c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	4413      	add	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]
 800435c:	e00d      	b.n	800437a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	3340      	adds	r3, #64	; 0x40
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4413      	add	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	3301      	adds	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
 800437a:	7bfa      	ldrb	r2, [r7, #15]
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	3b01      	subs	r3, #1
 8004380:	429a      	cmp	r2, r3
 8004382:	d3ec      	bcc.n	800435e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004384:	883b      	ldrh	r3, [r7, #0]
 8004386:	0418      	lsls	r0, r3, #16
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6819      	ldr	r1, [r3, #0]
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	3b01      	subs	r3, #1
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	4302      	orrs	r2, r0
 8004394:	3340      	adds	r3, #64	; 0x40
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	887a      	ldrh	r2, [r7, #2]
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e267      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d075      	beq.n	80044ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004402:	4b88      	ldr	r3, [pc, #544]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b04      	cmp	r3, #4
 800440c:	d00c      	beq.n	8004428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800440e:	4b85      	ldr	r3, [pc, #532]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004416:	2b08      	cmp	r3, #8
 8004418:	d112      	bne.n	8004440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441a:	4b82      	ldr	r3, [pc, #520]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004426:	d10b      	bne.n	8004440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	4b7e      	ldr	r3, [pc, #504]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d05b      	beq.n	80044ec <HAL_RCC_OscConfig+0x108>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d157      	bne.n	80044ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e242      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004448:	d106      	bne.n	8004458 <HAL_RCC_OscConfig+0x74>
 800444a:	4b76      	ldr	r3, [pc, #472]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a75      	ldr	r2, [pc, #468]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e01d      	b.n	8004494 <HAL_RCC_OscConfig+0xb0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x98>
 8004462:	4b70      	ldr	r3, [pc, #448]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a6f      	ldr	r2, [pc, #444]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b6d      	ldr	r3, [pc, #436]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6c      	ldr	r2, [pc, #432]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e00b      	b.n	8004494 <HAL_RCC_OscConfig+0xb0>
 800447c:	4b69      	ldr	r3, [pc, #420]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a68      	ldr	r2, [pc, #416]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b66      	ldr	r3, [pc, #408]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a65      	ldr	r2, [pc, #404]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800448e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449c:	f7fd f8ba 	bl	8001614 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a4:	f7fd f8b6 	bl	8001614 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	; 0x64
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e207      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b6:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0xc0>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fd f8a6 	bl	8001614 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fd f8a2 	bl	8001614 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e1f3      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044de:	4b51      	ldr	r3, [pc, #324]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0xe8>
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d063      	beq.n	80045c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044fa:	4b4a      	ldr	r3, [pc, #296]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004506:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800450e:	2b08      	cmp	r3, #8
 8004510:	d11c      	bne.n	800454c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004512:	4b44      	ldr	r3, [pc, #272]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d116      	bne.n	800454c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451e:	4b41      	ldr	r3, [pc, #260]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_RCC_OscConfig+0x152>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e1c7      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004536:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4937      	ldr	r1, [pc, #220]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	e03a      	b.n	80045c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004554:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCC_OscConfig+0x244>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fd f85b 	bl	8001614 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004562:	f7fd f857 	bl	8001614 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e1a8      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b28      	ldr	r3, [pc, #160]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4925      	ldr	r1, [pc, #148]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004590:	4313      	orrs	r3, r2
 8004592:	600b      	str	r3, [r1, #0]
 8004594:	e015      	b.n	80045c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCC_OscConfig+0x244>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd f83a 	bl	8001614 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a4:	f7fd f836 	bl	8001614 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e187      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d036      	beq.n	800463c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_RCC_OscConfig+0x248>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fd f81a 	bl	8001614 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e4:	f7fd f816 	bl	8001614 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e167      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80045f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x200>
 8004602:	e01b      	b.n	800463c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCC_OscConfig+0x248>)
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460a:	f7fd f803 	bl	8001614 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004610:	e00e      	b.n	8004630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004612:	f7fc ffff 	bl	8001614 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d907      	bls.n	8004630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e150      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
 8004624:	40023800 	.word	0x40023800
 8004628:	42470000 	.word	0x42470000
 800462c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	4b88      	ldr	r3, [pc, #544]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ea      	bne.n	8004612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8097 	beq.w	8004778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464e:	4b81      	ldr	r3, [pc, #516]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	4b7d      	ldr	r3, [pc, #500]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4a7c      	ldr	r2, [pc, #496]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004668:	6413      	str	r3, [r2, #64]	; 0x40
 800466a:	4b7a      	ldr	r3, [pc, #488]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467a:	4b77      	ldr	r3, [pc, #476]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d118      	bne.n	80046b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004686:	4b74      	ldr	r3, [pc, #464]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a73      	ldr	r2, [pc, #460]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004692:	f7fc ffbf 	bl	8001614 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fc ffbb 	bl	8001614 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e10c      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d106      	bne.n	80046ce <HAL_RCC_OscConfig+0x2ea>
 80046c0:	4b64      	ldr	r3, [pc, #400]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a63      	ldr	r2, [pc, #396]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
 80046cc:	e01c      	b.n	8004708 <HAL_RCC_OscConfig+0x324>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x30c>
 80046d6:	4b5f      	ldr	r3, [pc, #380]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a5e      	ldr	r2, [pc, #376]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	6713      	str	r3, [r2, #112]	; 0x70
 80046e2:	4b5c      	ldr	r3, [pc, #368]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	4a5b      	ldr	r2, [pc, #364]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0x324>
 80046f0:	4b58      	ldr	r3, [pc, #352]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4a57      	ldr	r2, [pc, #348]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	6713      	str	r3, [r2, #112]	; 0x70
 80046fc:	4b55      	ldr	r3, [pc, #340]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a54      	ldr	r2, [pc, #336]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004702:	f023 0304 	bic.w	r3, r3, #4
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fc ff80 	bl	8001614 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fc ff7c 	bl	8001614 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e0cb      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	4b49      	ldr	r3, [pc, #292]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ee      	beq.n	8004718 <HAL_RCC_OscConfig+0x334>
 800473a:	e014      	b.n	8004766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473c:	f7fc ff6a 	bl	8001614 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fc ff66 	bl	8001614 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0b5      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475a:	4b3e      	ldr	r3, [pc, #248]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1ee      	bne.n	8004744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d105      	bne.n	8004778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476c:	4b39      	ldr	r3, [pc, #228]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	4a38      	ldr	r2, [pc, #224]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a1 	beq.w	80048c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004782:	4b34      	ldr	r3, [pc, #208]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b08      	cmp	r3, #8
 800478c:	d05c      	beq.n	8004848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d141      	bne.n	800481a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004796:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_RCC_OscConfig+0x478>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fc ff3a 	bl	8001614 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fc ff36 	bl	8001614 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e087      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	4b27      	ldr	r3, [pc, #156]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	019b      	lsls	r3, r3, #6
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	3b01      	subs	r3, #1
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	491b      	ldr	r1, [pc, #108]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x478>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fc ff0f 	bl	8001614 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fc ff0b 	bl	8001614 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e05c      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x416>
 8004818:	e054      	b.n	80048c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCC_OscConfig+0x478>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fc fef8 	bl	8001614 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004828:	f7fc fef4 	bl	8001614 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e045      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x444>
 8004846:	e03d      	b.n	80048c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d107      	bne.n	8004860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e038      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
 8004854:	40023800 	.word	0x40023800
 8004858:	40007000 	.word	0x40007000
 800485c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004860:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_RCC_OscConfig+0x4ec>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d028      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d121      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d11a      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004890:	4013      	ands	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004898:	4293      	cmp	r3, r2
 800489a:	d111      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	3b01      	subs	r3, #1
 80048aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d107      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800

080048d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0cc      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e8:	4b68      	ldr	r3, [pc, #416]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d90c      	bls.n	8004910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b65      	ldr	r3, [pc, #404]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0b8      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d020      	beq.n	800495e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004928:	4b59      	ldr	r3, [pc, #356]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a58      	ldr	r2, [pc, #352]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004940:	4b53      	ldr	r3, [pc, #332]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a52      	ldr	r2, [pc, #328]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800494a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494c:	4b50      	ldr	r3, [pc, #320]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	494d      	ldr	r1, [pc, #308]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d044      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	4b47      	ldr	r3, [pc, #284]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d119      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e07f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d003      	beq.n	8004992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498e:	2b03      	cmp	r3, #3
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e06f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a2:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e067      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b2:	4b37      	ldr	r3, [pc, #220]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f023 0203 	bic.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4934      	ldr	r1, [pc, #208]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c4:	f7fc fe26 	bl	8001614 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049cc:	f7fc fe22 	bl	8001614 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e04f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 020c 	and.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1eb      	bne.n	80049cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f4:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d20c      	bcs.n	8004a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b22      	ldr	r3, [pc, #136]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e032      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4916      	ldr	r1, [pc, #88]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	490e      	ldr	r1, [pc, #56]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a5a:	f000 f821 	bl	8004aa0 <HAL_RCC_GetSysClockFreq>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	490a      	ldr	r1, [pc, #40]	; (8004a94 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6c:	5ccb      	ldrb	r3, [r1, r3]
 8004a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a72:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 8004a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fc fd86 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023c00 	.word	0x40023c00
 8004a90:	40023800 	.word	0x40023800
 8004a94:	0800a400 	.word	0x0800a400
 8004a98:	20000000 	.word	0x20000000
 8004a9c:	20000004 	.word	0x20000004

08004aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa4:	b090      	sub	sp, #64	; 0x40
 8004aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8004aac:	2300      	movs	r3, #0
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ab8:	4b59      	ldr	r3, [pc, #356]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	f200 80a1 	bhi.w	8004c0c <HAL_RCC_GetSysClockFreq+0x16c>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d003      	beq.n	8004ada <HAL_RCC_GetSysClockFreq+0x3a>
 8004ad2:	e09b      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad4:	4b53      	ldr	r3, [pc, #332]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004ad8:	e09b      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ada:	4b53      	ldr	r3, [pc, #332]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ade:	e098      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae0:	4b4f      	ldr	r3, [pc, #316]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aea:	4b4d      	ldr	r3, [pc, #308]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d028      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af6:	4b4a      	ldr	r3, [pc, #296]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	2200      	movs	r2, #0
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	627a      	str	r2, [r7, #36]	; 0x24
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4b47      	ldr	r3, [pc, #284]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b0c:	fb03 f201 	mul.w	r2, r3, r1
 8004b10:	2300      	movs	r3, #0
 8004b12:	fb00 f303 	mul.w	r3, r0, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	4a43      	ldr	r2, [pc, #268]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b1a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b20:	460a      	mov	r2, r1
 8004b22:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b26:	4413      	add	r3, r2
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	61fa      	str	r2, [r7, #28]
 8004b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b3a:	f7fb fba9 	bl	8000290 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4613      	mov	r3, r2
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b46:	e053      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b48:	4b35      	ldr	r3, [pc, #212]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	2200      	movs	r2, #0
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	617a      	str	r2, [r7, #20]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b5a:	f04f 0b00 	mov.w	fp, #0
 8004b5e:	4652      	mov	r2, sl
 8004b60:	465b      	mov	r3, fp
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	0159      	lsls	r1, r3, #5
 8004b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b70:	0150      	lsls	r0, r2, #5
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	ebb2 080a 	subs.w	r8, r2, sl
 8004b7a:	eb63 090b 	sbc.w	r9, r3, fp
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b92:	ebb2 0408 	subs.w	r4, r2, r8
 8004b96:	eb63 0509 	sbc.w	r5, r3, r9
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	00eb      	lsls	r3, r5, #3
 8004ba4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba8:	00e2      	lsls	r2, r4, #3
 8004baa:	4614      	mov	r4, r2
 8004bac:	461d      	mov	r5, r3
 8004bae:	eb14 030a 	adds.w	r3, r4, sl
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	eb45 030b 	adc.w	r3, r5, fp
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	028b      	lsls	r3, r1, #10
 8004bca:	4621      	mov	r1, r4
 8004bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	028a      	lsls	r2, r1, #10
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	2200      	movs	r2, #0
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	60fa      	str	r2, [r7, #12]
 8004be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be4:	f7fb fb54 	bl	8000290 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4613      	mov	r3, r2
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c0a:	e002      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3740      	adds	r7, #64	; 0x40
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800
 8004c24:	00f42400 	.word	0x00f42400
 8004c28:	017d7840 	.word	0x017d7840

08004c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c32:	681b      	ldr	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000000 	.word	0x20000000

08004c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c48:	f7ff fff0 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	0a9b      	lsrs	r3, r3, #10
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4903      	ldr	r1, [pc, #12]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40023800 	.word	0x40023800
 8004c68:	0800a410 	.word	0x0800a410

08004c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c70:	f7ff ffdc 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c74:	4602      	mov	r2, r0
 8004c76:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	0b5b      	lsrs	r3, r3, #13
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	4903      	ldr	r1, [pc, #12]	; (8004c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c82:	5ccb      	ldrb	r3, [r1, r3]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	0800a410 	.word	0x0800a410

08004c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e03f      	b.n	8004d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fb ff4c 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2224      	movs	r2, #36	; 0x24
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 faa5 	bl	8005228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d11d      	bne.n	8004d84 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_UART_Receive_DMA+0x26>
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e016      	b.n	8004d86 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_UART_Receive_DMA+0x38>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e00f      	b.n	8004d86 <HAL_UART_Receive_DMA+0x58>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	461a      	mov	r2, r3
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f92a 	bl	8004fd4 <UART_Start_Receive_DMA>
 8004d80:	4603      	mov	r3, r0
 8004d82:	e000      	b.n	8004d86 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d84:	2302      	movs	r3, #2
  }
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b09c      	sub	sp, #112	; 0x70
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d172      	bne.n	8004ee4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e00:	2200      	movs	r2, #0
 8004e02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e26:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3314      	adds	r3, #20
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3314      	adds	r3, #20
 8004e56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e58:	647a      	str	r2, [r7, #68]	; 0x44
 8004e5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e5      	bne.n	8004e38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3314      	adds	r3, #20
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e82:	663b      	str	r3, [r7, #96]	; 0x60
 8004e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3314      	adds	r3, #20
 8004e8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e8c:	633a      	str	r2, [r7, #48]	; 0x30
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e5      	bne.n	8004e6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d119      	bne.n	8004ee4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ed0:	61fa      	str	r2, [r7, #28]
 8004ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	69b9      	ldr	r1, [r7, #24]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d106      	bne.n	8004efa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ef4:	f7ff ff69 	bl	8004dca <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ef8:	e002      	b.n	8004f00 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004efa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004efc:	f7ff ff47 	bl	8004d8e <HAL_UART_RxCpltCallback>
}
 8004f00:	bf00      	nop
 8004f02:	3770      	adds	r7, #112	; 0x70
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d108      	bne.n	8004f30 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	4619      	mov	r1, r3
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7ff ff4e 	bl	8004dca <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f2e:	e002      	b.n	8004f36 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff ff36 	bl	8004da2 <HAL_UART_RxHalfCpltCallback>
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b21      	cmp	r3, #33	; 0x21
 8004f70:	d108      	bne.n	8004f84 <UART_DMAError+0x46>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f7e:	68b8      	ldr	r0, [r7, #8]
 8004f80:	f000 f8c6 	bl	8005110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	bf0c      	ite	eq
 8004f92:	2301      	moveq	r3, #1
 8004f94:	2300      	movne	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b22      	cmp	r3, #34	; 0x22
 8004fa4:	d108      	bne.n	8004fb8 <UART_DMAError+0x7a>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004fb2:	68b8      	ldr	r0, [r7, #8]
 8004fb4:	f000 f8d4 	bl	8005160 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	f043 0210 	orr.w	r2, r3, #16
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fc4:	68b8      	ldr	r0, [r7, #8]
 8004fc6:	f7ff fef6 	bl	8004db6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b098      	sub	sp, #96	; 0x60
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2222      	movs	r2, #34	; 0x22
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	4a40      	ldr	r2, [pc, #256]	; (8005104 <UART_Start_Receive_DMA+0x130>)
 8005002:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	4a3f      	ldr	r2, [pc, #252]	; (8005108 <UART_Start_Receive_DMA+0x134>)
 800500a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	4a3e      	ldr	r2, [pc, #248]	; (800510c <UART_Start_Receive_DMA+0x138>)
 8005012:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	2200      	movs	r2, #0
 800501a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800501c:	f107 0308 	add.w	r3, r7, #8
 8005020:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	f7fc fcde 	bl	80019f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d019      	beq.n	8005092 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	330c      	adds	r3, #12
 8005064:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800506e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005074:	65bb      	str	r3, [r7, #88]	; 0x58
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800507e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005080:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005084:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800508c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e5      	bne.n	800505e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	657b      	str	r3, [r7, #84]	; 0x54
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3314      	adds	r3, #20
 80050b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e5      	bne.n	8005092 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	617b      	str	r3, [r7, #20]
   return(result);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050dc:	653b      	str	r3, [r7, #80]	; 0x50
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3314      	adds	r3, #20
 80050e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050e6:	627a      	str	r2, [r7, #36]	; 0x24
 80050e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6a39      	ldr	r1, [r7, #32]
 80050ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e5      	bne.n	80050c6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3760      	adds	r7, #96	; 0x60
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	08004de3 	.word	0x08004de3
 8005108:	08004f09 	.word	0x08004f09
 800510c:	08004f3f 	.word	0x08004f3f

08005110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b089      	sub	sp, #36	; 0x24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	60bb      	str	r3, [r7, #8]
   return(result);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	61ba      	str	r2, [r7, #24]
 800513a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6979      	ldr	r1, [r7, #20]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	613b      	str	r3, [r7, #16]
   return(result);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e5      	bne.n	8005118 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005154:	bf00      	nop
 8005156:	3724      	adds	r7, #36	; 0x24
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b095      	sub	sp, #84	; 0x54
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800517e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005188:	643a      	str	r2, [r7, #64]	; 0x40
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800518e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d119      	bne.n	800520c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f023 0310 	bic.w	r3, r3, #16
 80051ee:	647b      	str	r3, [r7, #68]	; 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051f8:	61ba      	str	r2, [r7, #24]
 80051fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6979      	ldr	r1, [r7, #20]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	613b      	str	r3, [r7, #16]
   return(result);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e5      	bne.n	80051d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
}
 800521a:	bf00      	nop
 800521c:	3754      	adds	r7, #84	; 0x54
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800522c:	b0c0      	sub	sp, #256	; 0x100
 800522e:	af00      	add	r7, sp, #0
 8005230:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	68d9      	ldr	r1, [r3, #12]
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	ea40 0301 	orr.w	r3, r0, r1
 8005250:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	431a      	orrs	r2, r3
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	431a      	orrs	r2, r3
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005280:	f021 010c 	bic.w	r1, r1, #12
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800528e:	430b      	orrs	r3, r1
 8005290:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a2:	6999      	ldr	r1, [r3, #24]
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	ea40 0301 	orr.w	r3, r0, r1
 80052ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b8f      	ldr	r3, [pc, #572]	; (80054f4 <UART_SetConfig+0x2cc>)
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d005      	beq.n	80052c8 <UART_SetConfig+0xa0>
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b8d      	ldr	r3, [pc, #564]	; (80054f8 <UART_SetConfig+0x2d0>)
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d104      	bne.n	80052d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7ff fcd0 	bl	8004c6c <HAL_RCC_GetPCLK2Freq>
 80052cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052d0:	e003      	b.n	80052da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052d2:	f7ff fcb7 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 80052d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e4:	f040 810c 	bne.w	8005500 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052fa:	4622      	mov	r2, r4
 80052fc:	462b      	mov	r3, r5
 80052fe:	1891      	adds	r1, r2, r2
 8005300:	65b9      	str	r1, [r7, #88]	; 0x58
 8005302:	415b      	adcs	r3, r3
 8005304:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005306:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800530a:	4621      	mov	r1, r4
 800530c:	eb12 0801 	adds.w	r8, r2, r1
 8005310:	4629      	mov	r1, r5
 8005312:	eb43 0901 	adc.w	r9, r3, r1
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800532a:	4690      	mov	r8, r2
 800532c:	4699      	mov	r9, r3
 800532e:	4623      	mov	r3, r4
 8005330:	eb18 0303 	adds.w	r3, r8, r3
 8005334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005338:	462b      	mov	r3, r5
 800533a:	eb49 0303 	adc.w	r3, r9, r3
 800533e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800534e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005352:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005356:	460b      	mov	r3, r1
 8005358:	18db      	adds	r3, r3, r3
 800535a:	653b      	str	r3, [r7, #80]	; 0x50
 800535c:	4613      	mov	r3, r2
 800535e:	eb42 0303 	adc.w	r3, r2, r3
 8005362:	657b      	str	r3, [r7, #84]	; 0x54
 8005364:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005368:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800536c:	f7fa ff90 	bl	8000290 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4b61      	ldr	r3, [pc, #388]	; (80054fc <UART_SetConfig+0x2d4>)
 8005376:	fba3 2302 	umull	r2, r3, r3, r2
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	011c      	lsls	r4, r3, #4
 800537e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005382:	2200      	movs	r2, #0
 8005384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005388:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800538c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	1891      	adds	r1, r2, r2
 8005396:	64b9      	str	r1, [r7, #72]	; 0x48
 8005398:	415b      	adcs	r3, r3
 800539a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800539c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053a0:	4641      	mov	r1, r8
 80053a2:	eb12 0a01 	adds.w	sl, r2, r1
 80053a6:	4649      	mov	r1, r9
 80053a8:	eb43 0b01 	adc.w	fp, r3, r1
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053c0:	4692      	mov	sl, r2
 80053c2:	469b      	mov	fp, r3
 80053c4:	4643      	mov	r3, r8
 80053c6:	eb1a 0303 	adds.w	r3, sl, r3
 80053ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053ce:	464b      	mov	r3, r9
 80053d0:	eb4b 0303 	adc.w	r3, fp, r3
 80053d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053ec:	460b      	mov	r3, r1
 80053ee:	18db      	adds	r3, r3, r3
 80053f0:	643b      	str	r3, [r7, #64]	; 0x40
 80053f2:	4613      	mov	r3, r2
 80053f4:	eb42 0303 	adc.w	r3, r2, r3
 80053f8:	647b      	str	r3, [r7, #68]	; 0x44
 80053fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005402:	f7fa ff45 	bl	8000290 <__aeabi_uldivmod>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4611      	mov	r1, r2
 800540c:	4b3b      	ldr	r3, [pc, #236]	; (80054fc <UART_SetConfig+0x2d4>)
 800540e:	fba3 2301 	umull	r2, r3, r3, r1
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	2264      	movs	r2, #100	; 0x64
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	1acb      	subs	r3, r1, r3
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005422:	4b36      	ldr	r3, [pc, #216]	; (80054fc <UART_SetConfig+0x2d4>)
 8005424:	fba3 2302 	umull	r2, r3, r3, r2
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005430:	441c      	add	r4, r3
 8005432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005436:	2200      	movs	r2, #0
 8005438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800543c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005440:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	1891      	adds	r1, r2, r2
 800544a:	63b9      	str	r1, [r7, #56]	; 0x38
 800544c:	415b      	adcs	r3, r3
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005454:	4641      	mov	r1, r8
 8005456:	1851      	adds	r1, r2, r1
 8005458:	6339      	str	r1, [r7, #48]	; 0x30
 800545a:	4649      	mov	r1, r9
 800545c:	414b      	adcs	r3, r1
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800546c:	4659      	mov	r1, fp
 800546e:	00cb      	lsls	r3, r1, #3
 8005470:	4651      	mov	r1, sl
 8005472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005476:	4651      	mov	r1, sl
 8005478:	00ca      	lsls	r2, r1, #3
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	4603      	mov	r3, r0
 8005480:	4642      	mov	r2, r8
 8005482:	189b      	adds	r3, r3, r2
 8005484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005488:	464b      	mov	r3, r9
 800548a:	460a      	mov	r2, r1
 800548c:	eb42 0303 	adc.w	r3, r2, r3
 8005490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054a8:	460b      	mov	r3, r1
 80054aa:	18db      	adds	r3, r3, r3
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ae:	4613      	mov	r3, r2
 80054b0:	eb42 0303 	adc.w	r3, r2, r3
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054be:	f7fa fee7 	bl	8000290 <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <UART_SetConfig+0x2d4>)
 80054c8:	fba3 1302 	umull	r1, r3, r3, r2
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	2164      	movs	r1, #100	; 0x64
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	3332      	adds	r3, #50	; 0x32
 80054da:	4a08      	ldr	r2, [pc, #32]	; (80054fc <UART_SetConfig+0x2d4>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	f003 0207 	and.w	r2, r3, #7
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4422      	add	r2, r4
 80054ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054f0:	e106      	b.n	8005700 <UART_SetConfig+0x4d8>
 80054f2:	bf00      	nop
 80054f4:	40011000 	.word	0x40011000
 80054f8:	40011400 	.word	0x40011400
 80054fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005504:	2200      	movs	r2, #0
 8005506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800550a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800550e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005512:	4642      	mov	r2, r8
 8005514:	464b      	mov	r3, r9
 8005516:	1891      	adds	r1, r2, r2
 8005518:	6239      	str	r1, [r7, #32]
 800551a:	415b      	adcs	r3, r3
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005522:	4641      	mov	r1, r8
 8005524:	1854      	adds	r4, r2, r1
 8005526:	4649      	mov	r1, r9
 8005528:	eb43 0501 	adc.w	r5, r3, r1
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	00eb      	lsls	r3, r5, #3
 8005536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800553a:	00e2      	lsls	r2, r4, #3
 800553c:	4614      	mov	r4, r2
 800553e:	461d      	mov	r5, r3
 8005540:	4643      	mov	r3, r8
 8005542:	18e3      	adds	r3, r4, r3
 8005544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005548:	464b      	mov	r3, r9
 800554a:	eb45 0303 	adc.w	r3, r5, r3
 800554e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800555e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800556e:	4629      	mov	r1, r5
 8005570:	008b      	lsls	r3, r1, #2
 8005572:	4621      	mov	r1, r4
 8005574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005578:	4621      	mov	r1, r4
 800557a:	008a      	lsls	r2, r1, #2
 800557c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005580:	f7fa fe86 	bl	8000290 <__aeabi_uldivmod>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4b60      	ldr	r3, [pc, #384]	; (800570c <UART_SetConfig+0x4e4>)
 800558a:	fba3 2302 	umull	r2, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	011c      	lsls	r4, r3, #4
 8005592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005596:	2200      	movs	r2, #0
 8005598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800559c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	1891      	adds	r1, r2, r2
 80055aa:	61b9      	str	r1, [r7, #24]
 80055ac:	415b      	adcs	r3, r3
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b4:	4641      	mov	r1, r8
 80055b6:	1851      	adds	r1, r2, r1
 80055b8:	6139      	str	r1, [r7, #16]
 80055ba:	4649      	mov	r1, r9
 80055bc:	414b      	adcs	r3, r1
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055cc:	4659      	mov	r1, fp
 80055ce:	00cb      	lsls	r3, r1, #3
 80055d0:	4651      	mov	r1, sl
 80055d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d6:	4651      	mov	r1, sl
 80055d8:	00ca      	lsls	r2, r1, #3
 80055da:	4610      	mov	r0, r2
 80055dc:	4619      	mov	r1, r3
 80055de:	4603      	mov	r3, r0
 80055e0:	4642      	mov	r2, r8
 80055e2:	189b      	adds	r3, r3, r2
 80055e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055e8:	464b      	mov	r3, r9
 80055ea:	460a      	mov	r2, r1
 80055ec:	eb42 0303 	adc.w	r3, r2, r3
 80055f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80055fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800560c:	4649      	mov	r1, r9
 800560e:	008b      	lsls	r3, r1, #2
 8005610:	4641      	mov	r1, r8
 8005612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005616:	4641      	mov	r1, r8
 8005618:	008a      	lsls	r2, r1, #2
 800561a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800561e:	f7fa fe37 	bl	8000290 <__aeabi_uldivmod>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4611      	mov	r1, r2
 8005628:	4b38      	ldr	r3, [pc, #224]	; (800570c <UART_SetConfig+0x4e4>)
 800562a:	fba3 2301 	umull	r2, r3, r3, r1
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	2264      	movs	r2, #100	; 0x64
 8005632:	fb02 f303 	mul.w	r3, r2, r3
 8005636:	1acb      	subs	r3, r1, r3
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	3332      	adds	r3, #50	; 0x32
 800563c:	4a33      	ldr	r2, [pc, #204]	; (800570c <UART_SetConfig+0x4e4>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005648:	441c      	add	r4, r3
 800564a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800564e:	2200      	movs	r2, #0
 8005650:	673b      	str	r3, [r7, #112]	; 0x70
 8005652:	677a      	str	r2, [r7, #116]	; 0x74
 8005654:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	1891      	adds	r1, r2, r2
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	415b      	adcs	r3, r3
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005668:	4641      	mov	r1, r8
 800566a:	1851      	adds	r1, r2, r1
 800566c:	6039      	str	r1, [r7, #0]
 800566e:	4649      	mov	r1, r9
 8005670:	414b      	adcs	r3, r1
 8005672:	607b      	str	r3, [r7, #4]
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005680:	4659      	mov	r1, fp
 8005682:	00cb      	lsls	r3, r1, #3
 8005684:	4651      	mov	r1, sl
 8005686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568a:	4651      	mov	r1, sl
 800568c:	00ca      	lsls	r2, r1, #3
 800568e:	4610      	mov	r0, r2
 8005690:	4619      	mov	r1, r3
 8005692:	4603      	mov	r3, r0
 8005694:	4642      	mov	r2, r8
 8005696:	189b      	adds	r3, r3, r2
 8005698:	66bb      	str	r3, [r7, #104]	; 0x68
 800569a:	464b      	mov	r3, r9
 800569c:	460a      	mov	r2, r1
 800569e:	eb42 0303 	adc.w	r3, r2, r3
 80056a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	663b      	str	r3, [r7, #96]	; 0x60
 80056ae:	667a      	str	r2, [r7, #100]	; 0x64
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056bc:	4649      	mov	r1, r9
 80056be:	008b      	lsls	r3, r1, #2
 80056c0:	4641      	mov	r1, r8
 80056c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c6:	4641      	mov	r1, r8
 80056c8:	008a      	lsls	r2, r1, #2
 80056ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056ce:	f7fa fddf 	bl	8000290 <__aeabi_uldivmod>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <UART_SetConfig+0x4e4>)
 80056d8:	fba3 1302 	umull	r1, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	2164      	movs	r1, #100	; 0x64
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	3332      	adds	r3, #50	; 0x32
 80056ea:	4a08      	ldr	r2, [pc, #32]	; (800570c <UART_SetConfig+0x4e4>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	f003 020f 	and.w	r2, r3, #15
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4422      	add	r2, r4
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005706:	46bd      	mov	sp, r7
 8005708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800570c:	51eb851f 	.word	0x51eb851f

08005710 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005710:	b084      	sub	sp, #16
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	f107 001c 	add.w	r0, r7, #28
 800571e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	2b01      	cmp	r3, #1
 8005726:	d122      	bne.n	800576e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800573c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d105      	bne.n	8005762 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fbee 	bl	8006f44 <USB_CoreReset>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]
 800576c:	e01a      	b.n	80057a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fbe2 	bl	8006f44 <USB_CoreReset>
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
 8005796:	e005      	b.n	80057a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d10b      	bne.n	80057c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f043 0206 	orr.w	r2, r3, #6
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f043 0220 	orr.w	r2, r3, #32
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ce:	b004      	add	sp, #16
 80057d0:	4770      	bx	lr
	...

080057d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	4613      	mov	r3, r2
 80057e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d165      	bne.n	80058b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a41      	ldr	r2, [pc, #260]	; (80058f0 <USB_SetTurnaroundTime+0x11c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d906      	bls.n	80057fe <USB_SetTurnaroundTime+0x2a>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4a40      	ldr	r2, [pc, #256]	; (80058f4 <USB_SetTurnaroundTime+0x120>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d202      	bcs.n	80057fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057f8:	230f      	movs	r3, #15
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e062      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4a3c      	ldr	r2, [pc, #240]	; (80058f4 <USB_SetTurnaroundTime+0x120>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d306      	bcc.n	8005814 <USB_SetTurnaroundTime+0x40>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4a3b      	ldr	r2, [pc, #236]	; (80058f8 <USB_SetTurnaroundTime+0x124>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d202      	bcs.n	8005814 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800580e:	230e      	movs	r3, #14
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e057      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4a38      	ldr	r2, [pc, #224]	; (80058f8 <USB_SetTurnaroundTime+0x124>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d306      	bcc.n	800582a <USB_SetTurnaroundTime+0x56>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4a37      	ldr	r2, [pc, #220]	; (80058fc <USB_SetTurnaroundTime+0x128>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d202      	bcs.n	800582a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005824:	230d      	movs	r3, #13
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	e04c      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4a33      	ldr	r2, [pc, #204]	; (80058fc <USB_SetTurnaroundTime+0x128>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d306      	bcc.n	8005840 <USB_SetTurnaroundTime+0x6c>
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4a32      	ldr	r2, [pc, #200]	; (8005900 <USB_SetTurnaroundTime+0x12c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d802      	bhi.n	8005840 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800583a:	230c      	movs	r3, #12
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e041      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4a2f      	ldr	r2, [pc, #188]	; (8005900 <USB_SetTurnaroundTime+0x12c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d906      	bls.n	8005856 <USB_SetTurnaroundTime+0x82>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4a2e      	ldr	r2, [pc, #184]	; (8005904 <USB_SetTurnaroundTime+0x130>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d802      	bhi.n	8005856 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005850:	230b      	movs	r3, #11
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e036      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4a2a      	ldr	r2, [pc, #168]	; (8005904 <USB_SetTurnaroundTime+0x130>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d906      	bls.n	800586c <USB_SetTurnaroundTime+0x98>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4a29      	ldr	r2, [pc, #164]	; (8005908 <USB_SetTurnaroundTime+0x134>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d802      	bhi.n	800586c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005866:	230a      	movs	r3, #10
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e02b      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4a26      	ldr	r2, [pc, #152]	; (8005908 <USB_SetTurnaroundTime+0x134>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d906      	bls.n	8005882 <USB_SetTurnaroundTime+0xae>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4a25      	ldr	r2, [pc, #148]	; (800590c <USB_SetTurnaroundTime+0x138>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d202      	bcs.n	8005882 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800587c:	2309      	movs	r3, #9
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e020      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4a21      	ldr	r2, [pc, #132]	; (800590c <USB_SetTurnaroundTime+0x138>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d306      	bcc.n	8005898 <USB_SetTurnaroundTime+0xc4>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4a20      	ldr	r2, [pc, #128]	; (8005910 <USB_SetTurnaroundTime+0x13c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d802      	bhi.n	8005898 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005892:	2308      	movs	r3, #8
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e015      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <USB_SetTurnaroundTime+0x13c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d906      	bls.n	80058ae <USB_SetTurnaroundTime+0xda>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <USB_SetTurnaroundTime+0x140>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d202      	bcs.n	80058ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058a8:	2307      	movs	r3, #7
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e00a      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80058ae:	2306      	movs	r3, #6
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e007      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058ba:	2309      	movs	r3, #9
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e001      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058c0:	2309      	movs	r3, #9
 80058c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	029b      	lsls	r3, r3, #10
 80058d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80058dc:	431a      	orrs	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	00d8acbf 	.word	0x00d8acbf
 80058f4:	00e4e1c0 	.word	0x00e4e1c0
 80058f8:	00f42400 	.word	0x00f42400
 80058fc:	01067380 	.word	0x01067380
 8005900:	011a499f 	.word	0x011a499f
 8005904:	01312cff 	.word	0x01312cff
 8005908:	014ca43f 	.word	0x014ca43f
 800590c:	016e3600 	.word	0x016e3600
 8005910:	01a6ab1f 	.word	0x01a6ab1f
 8005914:	01e84800 	.word	0x01e84800

08005918 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f043 0201 	orr.w	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f023 0201 	bic.w	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d115      	bne.n	80059aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800598a:	2001      	movs	r0, #1
 800598c:	f7fb fe4e 	bl	800162c <HAL_Delay>
      ms++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 fa45 	bl	8006e26 <USB_GetMode>
 800599c:	4603      	mov	r3, r0
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d01e      	beq.n	80059e0 <USB_SetCurrentMode+0x84>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b31      	cmp	r3, #49	; 0x31
 80059a6:	d9f0      	bls.n	800598a <USB_SetCurrentMode+0x2e>
 80059a8:	e01a      	b.n	80059e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d115      	bne.n	80059dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059bc:	2001      	movs	r0, #1
 80059be:	f7fb fe35 	bl	800162c <HAL_Delay>
      ms++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3301      	adds	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 fa2c 	bl	8006e26 <USB_GetMode>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <USB_SetCurrentMode+0x84>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b31      	cmp	r3, #49	; 0x31
 80059d8:	d9f0      	bls.n	80059bc <USB_SetCurrentMode+0x60>
 80059da:	e001      	b.n	80059e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e005      	b.n	80059ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b32      	cmp	r3, #50	; 0x32
 80059e4:	d101      	bne.n	80059ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059f4:	b084      	sub	sp, #16
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	e009      	b.n	8005a28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	3340      	adds	r3, #64	; 0x40
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	3301      	adds	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b0e      	cmp	r3, #14
 8005a2c:	d9f2      	bls.n	8005a14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11c      	bne.n	8005a6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a42:	f043 0302 	orr.w	r3, r3, #2
 8005a46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
 8005a6c:	e00b      	b.n	8005a86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a98:	4619      	mov	r1, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	680b      	ldr	r3, [r1, #0]
 8005aa4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d10c      	bne.n	8005ac6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f965 	bl	8005d84 <USB_SetDevSpeed>
 8005aba:	e008      	b.n	8005ace <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005abc:	2101      	movs	r1, #1
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f960 	bl	8005d84 <USB_SetDevSpeed>
 8005ac4:	e003      	b.n	8005ace <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ac6:	2103      	movs	r1, #3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f95b 	bl	8005d84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ace:	2110      	movs	r1, #16
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f8f3 	bl	8005cbc <USB_FlushTxFifo>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f91f 	bl	8005d24 <USB_FlushRxFifo>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	461a      	mov	r2, r3
 8005b04:	2300      	movs	r3, #0
 8005b06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2300      	movs	r3, #0
 8005b12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	e043      	b.n	8005ba2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b30:	d118      	bne.n	8005b64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	461a      	mov	r2, r3
 8005b46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e013      	b.n	8005b76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e008      	b.n	8005b76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	461a      	mov	r2, r3
 8005b72:	2300      	movs	r3, #0
 8005b74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	461a      	mov	r2, r3
 8005b84:	2300      	movs	r3, #0
 8005b86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	461a      	mov	r2, r3
 8005b96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d3b7      	bcc.n	8005b1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005baa:	2300      	movs	r3, #0
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	e043      	b.n	8005c38 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bc6:	d118      	bne.n	8005bfa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10a      	bne.n	8005be4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e013      	b.n	8005c0c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	e008      	b.n	8005c0c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c06:	461a      	mov	r2, r3
 8005c08:	2300      	movs	r3, #0
 8005c0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	3301      	adds	r3, #1
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d3b7      	bcc.n	8005bb0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f043 0210 	orr.w	r2, r3, #16
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699a      	ldr	r2, [r3, #24]
 8005c78:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <USB_DevInit+0x2c4>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f043 0208 	orr.w	r2, r3, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d107      	bne.n	8005ca8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ca0:	f043 0304 	orr.w	r3, r3, #4
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cb4:	b004      	add	sp, #16
 8005cb6:	4770      	bx	lr
 8005cb8:	803c3800 	.word	0x803c3800

08005cbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <USB_FlushTxFifo+0x64>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d901      	bls.n	8005cdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e01b      	b.n	8005d14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	daf2      	bge.n	8005cca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	019b      	lsls	r3, r3, #6
 8005cec:	f043 0220 	orr.w	r2, r3, #32
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <USB_FlushTxFifo+0x64>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e006      	b.n	8005d14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d0f0      	beq.n	8005cf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	00030d40 	.word	0x00030d40

08005d24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3301      	adds	r3, #1
 8005d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4a11      	ldr	r2, [pc, #68]	; (8005d80 <USB_FlushRxFifo+0x5c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e018      	b.n	8005d74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	daf2      	bge.n	8005d30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2210      	movs	r2, #16
 8005d52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3301      	adds	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4a08      	ldr	r2, [pc, #32]	; (8005d80 <USB_FlushRxFifo+0x5c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d901      	bls.n	8005d66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e006      	b.n	8005d74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b10      	cmp	r3, #16
 8005d70:	d0f0      	beq.n	8005d54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	00030d40 	.word	0x00030d40

08005d84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da4:	4313      	orrs	r3, r2
 8005da6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 0306 	and.w	r3, r3, #6
 8005dce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]
 8005dda:	e00a      	b.n	8005df2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d002      	beq.n	8005de8 <USB_GetDevSpeed+0x32>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b06      	cmp	r3, #6
 8005de6:	d102      	bne.n	8005dee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005de8:	2302      	movs	r3, #2
 8005dea:	75fb      	strb	r3, [r7, #23]
 8005dec:	e001      	b.n	8005df2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005dee:	230f      	movs	r3, #15
 8005df0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d13a      	bne.n	8005e92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	68f9      	ldr	r1, [r7, #12]
 8005e36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d155      	bne.n	8005f00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	791b      	ldrb	r3, [r3, #4]
 8005e6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	059b      	lsls	r3, r3, #22
 8005e76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	e036      	b.n	8005f00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e98:	69da      	ldr	r2, [r3, #28]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea8:	041b      	lsls	r3, r3, #16
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d11a      	bne.n	8005f00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	791b      	ldrb	r3, [r3, #4]
 8005ee4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d161      	bne.n	8005ff0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f42:	d11f      	bne.n	8005f84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	2101      	movs	r1, #1
 8005f96:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	2101      	movs	r1, #1
 8005fba:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc8:	4013      	ands	r3, r2
 8005fca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	0159      	lsls	r1, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	440b      	add	r3, r1
 8005fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4b35      	ldr	r3, [pc, #212]	; (80060c0 <USB_DeactivateEndpoint+0x1b0>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	600b      	str	r3, [r1, #0]
 8005fee:	e060      	b.n	80060b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006006:	d11f      	bne.n	8006048 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	440a      	add	r2, r1
 800601e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006022:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006026:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	0151      	lsls	r1, r2, #5
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	440a      	add	r2, r1
 800603e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006046:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f003 030f 	and.w	r3, r3, #15
 8006058:	2101      	movs	r1, #1
 800605a:	fa01 f303 	lsl.w	r3, r1, r3
 800605e:	041b      	lsls	r3, r3, #16
 8006060:	43db      	mvns	r3, r3
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006068:	4013      	ands	r3, r2
 800606a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	2101      	movs	r1, #1
 800607e:	fa01 f303 	lsl.w	r3, r1, r3
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	43db      	mvns	r3, r3
 8006086:	68f9      	ldr	r1, [r7, #12]
 8006088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800608c:	4013      	ands	r3, r2
 800608e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	0159      	lsls	r1, r3, #5
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	440b      	add	r3, r1
 80060a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060aa:	4619      	mov	r1, r3
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <USB_DeactivateEndpoint+0x1b4>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	ec337800 	.word	0xec337800
 80060c4:	eff37800 	.word	0xeff37800

080060c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08a      	sub	sp, #40	; 0x28
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	f040 815c 	bne.w	80063a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d132      	bne.n	8006158 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006110:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006134:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006150:	0cdb      	lsrs	r3, r3, #19
 8006152:	04db      	lsls	r3, r3, #19
 8006154:	6113      	str	r3, [r2, #16]
 8006156:	e074      	b.n	8006242 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006172:	0cdb      	lsrs	r3, r3, #19
 8006174:	04db      	lsls	r3, r3, #19
 8006176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006192:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006196:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800619a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6999      	ldr	r1, [r3, #24]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	440b      	add	r3, r1
 80061b4:	1e59      	subs	r1, r3, #1
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80061be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80061c0:	4b9d      	ldr	r3, [pc, #628]	; (8006438 <USB_EPStartXfer+0x370>)
 80061c2:	400b      	ands	r3, r1
 80061c4:	69b9      	ldr	r1, [r7, #24]
 80061c6:	0148      	lsls	r0, r1, #5
 80061c8:	69f9      	ldr	r1, [r7, #28]
 80061ca:	4401      	add	r1, r0
 80061cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061d0:	4313      	orrs	r3, r2
 80061d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ea:	69b9      	ldr	r1, [r7, #24]
 80061ec:	0148      	lsls	r0, r1, #5
 80061ee:	69f9      	ldr	r1, [r7, #28]
 80061f0:	4401      	add	r1, r0
 80061f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061f6:	4313      	orrs	r3, r2
 80061f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	791b      	ldrb	r3, [r3, #4]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d11f      	bne.n	8006242 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006220:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	440a      	add	r2, r1
 8006238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006240:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d14b      	bne.n	80062e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d009      	beq.n	8006264 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	461a      	mov	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	791b      	ldrb	r3, [r3, #4]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d128      	bne.n	80062be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d110      	bne.n	800629e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	440a      	add	r2, r1
 8006292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006296:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	e00f      	b.n	80062be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e133      	b.n	8006548 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	791b      	ldrb	r3, [r3, #4]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d015      	beq.n	8006334 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 811b 	beq.w	8006548 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	2101      	movs	r1, #1
 8006324:	fa01 f303 	lsl.w	r3, r1, r3
 8006328:	69f9      	ldr	r1, [r7, #28]
 800632a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800632e:	4313      	orrs	r3, r2
 8006330:	634b      	str	r3, [r1, #52]	; 0x34
 8006332:	e109      	b.n	8006548 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d110      	bne.n	8006366 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	e00f      	b.n	8006386 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006384:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6919      	ldr	r1, [r3, #16]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	781a      	ldrb	r2, [r3, #0]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	b298      	uxth	r0, r3
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	4603      	mov	r3, r0
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fade 	bl	800695c <USB_WritePacket>
 80063a0:	e0d2      	b.n	8006548 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063bc:	0cdb      	lsrs	r3, r3, #19
 80063be:	04db      	lsls	r3, r3, #19
 80063c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	0151      	lsls	r1, r2, #5
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	440a      	add	r2, r1
 80063d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d126      	bne.n	800643c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006404:	69b9      	ldr	r1, [r7, #24]
 8006406:	0148      	lsls	r0, r1, #5
 8006408:	69f9      	ldr	r1, [r7, #28]
 800640a:	4401      	add	r1, r0
 800640c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006410:	4313      	orrs	r3, r2
 8006412:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	440a      	add	r2, r1
 800642a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800642e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006432:	6113      	str	r3, [r2, #16]
 8006434:	e03a      	b.n	80064ac <USB_EPStartXfer+0x3e4>
 8006436:	bf00      	nop
 8006438:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	699a      	ldr	r2, [r3, #24]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	4413      	add	r3, r2
 8006446:	1e5a      	subs	r2, r3, #1
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	8afa      	ldrh	r2, [r7, #22]
 8006458:	fb03 f202 	mul.w	r2, r3, r2
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	8afb      	ldrh	r3, [r7, #22]
 8006470:	04d9      	lsls	r1, r3, #19
 8006472:	4b38      	ldr	r3, [pc, #224]	; (8006554 <USB_EPStartXfer+0x48c>)
 8006474:	400b      	ands	r3, r1
 8006476:	69b9      	ldr	r1, [r7, #24]
 8006478:	0148      	lsls	r0, r1, #5
 800647a:	69f9      	ldr	r1, [r7, #28]
 800647c:	4401      	add	r1, r0
 800647e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006482:	4313      	orrs	r3, r2
 8006484:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800649c:	69b9      	ldr	r1, [r7, #24]
 800649e:	0148      	lsls	r0, r1, #5
 80064a0:	69f9      	ldr	r1, [r7, #28]
 80064a2:	4401      	add	r1, r0
 80064a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064a8:	4313      	orrs	r3, r2
 80064aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d10d      	bne.n	80064ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	6919      	ldr	r1, [r3, #16]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	460a      	mov	r2, r1
 80064cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	791b      	ldrb	r3, [r3, #4]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d128      	bne.n	8006528 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d110      	bne.n	8006508 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006500:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	e00f      	b.n	8006528 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006526:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	440a      	add	r2, r1
 800653e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006542:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006546:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	1ff80000 	.word	0x1ff80000

08006558 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	4613      	mov	r3, r2
 8006564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b01      	cmp	r3, #1
 8006576:	f040 80ce 	bne.w	8006716 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d132      	bne.n	80065e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800659c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e0:	0cdb      	lsrs	r3, r3, #19
 80065e2:	04db      	lsls	r3, r3, #19
 80065e4:	6113      	str	r3, [r2, #16]
 80065e6:	e04e      	b.n	8006686 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	0151      	lsls	r1, r2, #5
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	440a      	add	r2, r1
 80065fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006602:	0cdb      	lsrs	r3, r3, #19
 8006604:	04db      	lsls	r3, r3, #19
 8006606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	0151      	lsls	r1, r2, #5
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	440a      	add	r2, r1
 800661e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800662a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	699a      	ldr	r2, [r3, #24]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	429a      	cmp	r2, r3
 8006636:	d903      	bls.n	8006640 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800665e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006676:	6939      	ldr	r1, [r7, #16]
 8006678:	0148      	lsls	r0, r1, #5
 800667a:	6979      	ldr	r1, [r7, #20]
 800667c:	4401      	add	r1, r0
 800667e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006682:	4313      	orrs	r3, r2
 8006684:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d11e      	bne.n	80066ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	461a      	mov	r2, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	e097      	b.n	80067fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8083 	beq.w	80067fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	2101      	movs	r1, #1
 8006706:	fa01 f303 	lsl.w	r3, r1, r3
 800670a:	6979      	ldr	r1, [r7, #20]
 800670c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006710:	4313      	orrs	r3, r2
 8006712:	634b      	str	r3, [r1, #52]	; 0x34
 8006714:	e071      	b.n	80067fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006730:	0cdb      	lsrs	r3, r3, #19
 8006732:	04db      	lsls	r3, r3, #19
 8006734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	440a      	add	r2, r1
 800674c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006750:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006754:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006758:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006790:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067a8:	6939      	ldr	r1, [r7, #16]
 80067aa:	0148      	lsls	r0, r1, #5
 80067ac:	6979      	ldr	r1, [r7, #20]
 80067ae:	4401      	add	r1, r0
 80067b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067b4:	4313      	orrs	r3, r2
 80067b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d10d      	bne.n	80067da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6919      	ldr	r1, [r3, #16]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	460a      	mov	r2, r1
 80067d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d14a      	bne.n	80068bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800683a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800683e:	f040 8086 	bne.w	800694e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	7812      	ldrb	r2, [r2, #0]
 8006856:	0151      	lsls	r1, r2, #5
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	440a      	add	r2, r1
 800685c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006860:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006864:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	7812      	ldrb	r2, [r2, #0]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	440a      	add	r2, r1
 8006880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006888:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3301      	adds	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f242 7210 	movw	r2, #10000	; 0x2710
 8006896:	4293      	cmp	r3, r2
 8006898:	d902      	bls.n	80068a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]
          break;
 800689e:	e056      	b.n	800694e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b8:	d0e7      	beq.n	800688a <USB_EPStopXfer+0x82>
 80068ba:	e048      	b.n	800694e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d4:	d13b      	bne.n	800694e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	7812      	ldrb	r2, [r2, #0]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	7812      	ldrb	r2, [r2, #0]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	440a      	add	r2, r1
 8006914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800691c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3301      	adds	r3, #1
 8006922:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f242 7210 	movw	r2, #10000	; 0x2710
 800692a:	4293      	cmp	r3, r2
 800692c:	d902      	bls.n	8006934 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	75fb      	strb	r3, [r7, #23]
          break;
 8006932:	e00c      	b.n	800694e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800694c:	d0e7      	beq.n	800691e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800694e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006950:	4618      	mov	r0, r3
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800695c:	b480      	push	{r7}
 800695e:	b089      	sub	sp, #36	; 0x24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4611      	mov	r1, r2
 8006968:	461a      	mov	r2, r3
 800696a:	460b      	mov	r3, r1
 800696c:	71fb      	strb	r3, [r7, #7]
 800696e:	4613      	mov	r3, r2
 8006970:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800697a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800697e:	2b00      	cmp	r3, #0
 8006980:	d123      	bne.n	80069ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006982:	88bb      	ldrh	r3, [r7, #4]
 8006984:	3303      	adds	r3, #3
 8006986:	089b      	lsrs	r3, r3, #2
 8006988:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800698a:	2300      	movs	r3, #0
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e018      	b.n	80069c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	031a      	lsls	r2, r3, #12
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4413      	add	r3, r2
 8006998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699c:	461a      	mov	r2, r3
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	3301      	adds	r3, #1
 80069a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	3301      	adds	r3, #1
 80069ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	3301      	adds	r3, #1
 80069b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	3301      	adds	r3, #1
 80069ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	3301      	adds	r3, #1
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d3e2      	bcc.n	8006990 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3724      	adds	r7, #36	; 0x24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069d8:	b480      	push	{r7}
 80069da:	b08b      	sub	sp, #44	; 0x2c
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	089b      	lsrs	r3, r3, #2
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069fe:	2300      	movs	r3, #0
 8006a00:	623b      	str	r3, [r7, #32]
 8006a02:	e014      	b.n	8006a2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	3301      	adds	r3, #1
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	3301      	adds	r3, #1
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	3301      	adds	r3, #1
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	3301      	adds	r3, #1
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	623b      	str	r3, [r7, #32]
 8006a2e:	6a3a      	ldr	r2, [r7, #32]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d3e6      	bcc.n	8006a04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a36:	8bfb      	ldrh	r3, [r7, #30]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01e      	beq.n	8006a7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a46:	461a      	mov	r2, r3
 8006a48:	f107 0310 	add.w	r3, r7, #16
 8006a4c:	6812      	ldr	r2, [r2, #0]
 8006a4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	701a      	strb	r2, [r3, #0]
      i++;
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	3301      	adds	r3, #1
 8006a66:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a6e:	8bfb      	ldrh	r3, [r7, #30]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a74:	8bfb      	ldrh	r3, [r7, #30]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1ea      	bne.n	8006a50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	372c      	adds	r7, #44	; 0x2c
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d12c      	bne.n	8006afe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	db12      	blt.n	8006adc <USB_EPSetStall+0x54>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00f      	beq.n	8006adc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ada:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	e02b      	b.n	8006b56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	db12      	blt.n	8006b36 <USB_EPSetStall+0xae>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00f      	beq.n	8006b36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d128      	bne.n	8006bd2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	791b      	ldrb	r3, [r3, #4]
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d003      	beq.n	8006bb0 <USB_EPClearStall+0x4c>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	791b      	ldrb	r3, [r3, #4]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d138      	bne.n	8006c22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	e027      	b.n	8006c22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d003      	beq.n	8006c02 <USB_EPClearStall+0x9e>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	791b      	ldrb	r3, [r3, #4]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d10f      	bne.n	8006c22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c64:	68f9      	ldr	r1, [r7, #12]
 8006c66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c96:	f023 0303 	bic.w	r3, r3, #3
 8006c9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006caa:	f023 0302 	bic.w	r3, r3, #2
 8006cae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cd8:	f023 0303 	bic.w	r3, r3, #3
 8006cdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cec:	f043 0302 	orr.w	r3, r3, #2
 8006cf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4013      	ands	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d18:	68fb      	ldr	r3, [r7, #12]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	4013      	ands	r3, r2
 8006d48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	0c1b      	lsrs	r3, r3, #16
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	b29b      	uxth	r3, r3
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d9e:	78fb      	ldrb	r3, [r7, #3]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	4013      	ands	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b087      	sub	sp, #28
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfa:	01db      	lsls	r3, r3, #7
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4013      	ands	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e18:	68bb      	ldr	r3, [r7, #8]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0301 	and.w	r3, r3, #1
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e60:	f023 0307 	bic.w	r3, r3, #7
 8006e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	460b      	mov	r3, r1
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	333c      	adds	r3, #60	; 0x3c
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4a26      	ldr	r2, [pc, #152]	; (8006f40 <USB_EP0_OutStart+0xb8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d90a      	bls.n	8006ec2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ebc:	d101      	bne.n	8006ec2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e037      	b.n	8006f32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef0:	f043 0318 	orr.w	r3, r3, #24
 8006ef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f0a:	7afb      	ldrb	r3, [r7, #11]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d10f      	bne.n	8006f30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	4f54300a 	.word	0x4f54300a

08006f44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3301      	adds	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4a13      	ldr	r2, [pc, #76]	; (8006fa8 <USB_CoreReset+0x64>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d901      	bls.n	8006f62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e01b      	b.n	8006f9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	daf2      	bge.n	8006f50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f043 0201 	orr.w	r2, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <USB_CoreReset+0x64>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d901      	bls.n	8006f8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e006      	b.n	8006f9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d0f0      	beq.n	8006f7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	00030d40 	.word	0x00030d40

08006fac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006fbc:	f002 fc8a 	bl	80098d4 <USBD_static_malloc>
 8006fc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d109      	bne.n	8006fdc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	32b0      	adds	r2, #176	; 0xb0
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e0d4      	b.n	8007186 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006fdc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f002 fd96 	bl	8009b14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	32b0      	adds	r2, #176	; 0xb0
 8006ff2:	68f9      	ldr	r1, [r7, #12]
 8006ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	32b0      	adds	r2, #176	; 0xb0
 8007002:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7c1b      	ldrb	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d138      	bne.n	8007086 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007014:	4b5e      	ldr	r3, [pc, #376]	; (8007190 <USBD_CDC_Init+0x1e4>)
 8007016:	7819      	ldrb	r1, [r3, #0]
 8007018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800701c:	2202      	movs	r2, #2
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f002 fb35 	bl	800968e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007024:	4b5a      	ldr	r3, [pc, #360]	; (8007190 <USBD_CDC_Init+0x1e4>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	f003 020f 	and.w	r2, r3, #15
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3324      	adds	r3, #36	; 0x24
 800703a:	2201      	movs	r2, #1
 800703c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800703e:	4b55      	ldr	r3, [pc, #340]	; (8007194 <USBD_CDC_Init+0x1e8>)
 8007040:	7819      	ldrb	r1, [r3, #0]
 8007042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007046:	2202      	movs	r2, #2
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f002 fb20 	bl	800968e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800704e:	4b51      	ldr	r3, [pc, #324]	; (8007194 <USBD_CDC_Init+0x1e8>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	f003 020f 	and.w	r2, r3, #15
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007066:	2201      	movs	r2, #1
 8007068:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800706a:	4b4b      	ldr	r3, [pc, #300]	; (8007198 <USBD_CDC_Init+0x1ec>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	f003 020f 	and.w	r2, r3, #15
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	3326      	adds	r3, #38	; 0x26
 8007080:	2210      	movs	r2, #16
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	e035      	b.n	80070f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007086:	4b42      	ldr	r3, [pc, #264]	; (8007190 <USBD_CDC_Init+0x1e4>)
 8007088:	7819      	ldrb	r1, [r3, #0]
 800708a:	2340      	movs	r3, #64	; 0x40
 800708c:	2202      	movs	r2, #2
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f002 fafd 	bl	800968e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007094:	4b3e      	ldr	r3, [pc, #248]	; (8007190 <USBD_CDC_Init+0x1e4>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f003 020f 	and.w	r2, r3, #15
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	440b      	add	r3, r1
 80070a8:	3324      	adds	r3, #36	; 0x24
 80070aa:	2201      	movs	r2, #1
 80070ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80070ae:	4b39      	ldr	r3, [pc, #228]	; (8007194 <USBD_CDC_Init+0x1e8>)
 80070b0:	7819      	ldrb	r1, [r3, #0]
 80070b2:	2340      	movs	r3, #64	; 0x40
 80070b4:	2202      	movs	r2, #2
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f002 fae9 	bl	800968e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070bc:	4b35      	ldr	r3, [pc, #212]	; (8007194 <USBD_CDC_Init+0x1e8>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	f003 020f 	and.w	r2, r3, #15
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070d4:	2201      	movs	r2, #1
 80070d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80070d8:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <USBD_CDC_Init+0x1ec>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	f003 020f 	and.w	r2, r3, #15
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	440b      	add	r3, r1
 80070ec:	3326      	adds	r3, #38	; 0x26
 80070ee:	2210      	movs	r2, #16
 80070f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070f2:	4b29      	ldr	r3, [pc, #164]	; (8007198 <USBD_CDC_Init+0x1ec>)
 80070f4:	7819      	ldrb	r1, [r3, #0]
 80070f6:	2308      	movs	r3, #8
 80070f8:	2203      	movs	r2, #3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f002 fac7 	bl	800968e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007100:	4b25      	ldr	r3, [pc, #148]	; (8007198 <USBD_CDC_Init+0x1ec>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	f003 020f 	and.w	r2, r3, #15
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	3324      	adds	r3, #36	; 0x24
 8007116:	2201      	movs	r2, #1
 8007118:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	33b0      	adds	r3, #176	; 0xb0
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007150:	2302      	movs	r3, #2
 8007152:	e018      	b.n	8007186 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7c1b      	ldrb	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800715c:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <USBD_CDC_Init+0x1e8>)
 800715e:	7819      	ldrb	r1, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f002 fb7e 	bl	800986c <USBD_LL_PrepareReceive>
 8007170:	e008      	b.n	8007184 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007172:	4b08      	ldr	r3, [pc, #32]	; (8007194 <USBD_CDC_Init+0x1e8>)
 8007174:	7819      	ldrb	r1, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800717c:	2340      	movs	r3, #64	; 0x40
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f002 fb74 	bl	800986c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000093 	.word	0x20000093
 8007194:	20000094 	.word	0x20000094
 8007198:	20000095 	.word	0x20000095

0800719c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80071a8:	4b3a      	ldr	r3, [pc, #232]	; (8007294 <USBD_CDC_DeInit+0xf8>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f002 fa93 	bl	80096da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80071b4:	4b37      	ldr	r3, [pc, #220]	; (8007294 <USBD_CDC_DeInit+0xf8>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	f003 020f 	and.w	r2, r3, #15
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	3324      	adds	r3, #36	; 0x24
 80071ca:	2200      	movs	r2, #0
 80071cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80071ce:	4b32      	ldr	r3, [pc, #200]	; (8007298 <USBD_CDC_DeInit+0xfc>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f002 fa80 	bl	80096da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80071da:	4b2f      	ldr	r3, [pc, #188]	; (8007298 <USBD_CDC_DeInit+0xfc>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	f003 020f 	and.w	r2, r3, #15
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071f2:	2200      	movs	r2, #0
 80071f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80071f6:	4b29      	ldr	r3, [pc, #164]	; (800729c <USBD_CDC_DeInit+0x100>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f002 fa6c 	bl	80096da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007202:	4b26      	ldr	r3, [pc, #152]	; (800729c <USBD_CDC_DeInit+0x100>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	f003 020f 	and.w	r2, r3, #15
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	3324      	adds	r3, #36	; 0x24
 8007218:	2200      	movs	r2, #0
 800721a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800721c:	4b1f      	ldr	r3, [pc, #124]	; (800729c <USBD_CDC_DeInit+0x100>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	f003 020f 	and.w	r2, r3, #15
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	3326      	adds	r3, #38	; 0x26
 8007232:	2200      	movs	r2, #0
 8007234:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	32b0      	adds	r2, #176	; 0xb0
 8007240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01f      	beq.n	8007288 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	33b0      	adds	r3, #176	; 0xb0
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	32b0      	adds	r2, #176	; 0xb0
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	4618      	mov	r0, r3
 800726c:	f002 fb40 	bl	80098f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	32b0      	adds	r2, #176	; 0xb0
 800727a:	2100      	movs	r1, #0
 800727c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000093 	.word	0x20000093
 8007298:	20000094 	.word	0x20000094
 800729c:	20000095 	.word	0x20000095

080072a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	32b0      	adds	r2, #176	; 0xb0
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e0bf      	b.n	8007450 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d050      	beq.n	800737e <USBD_CDC_Setup+0xde>
 80072dc:	2b20      	cmp	r3, #32
 80072de:	f040 80af 	bne.w	8007440 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	88db      	ldrh	r3, [r3, #6]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d03a      	beq.n	8007360 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	b25b      	sxtb	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	da1b      	bge.n	800732c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	33b0      	adds	r3, #176	; 0xb0
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800730a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	88d2      	ldrh	r2, [r2, #6]
 8007310:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	88db      	ldrh	r3, [r3, #6]
 8007316:	2b07      	cmp	r3, #7
 8007318:	bf28      	it	cs
 800731a:	2307      	movcs	r3, #7
 800731c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	89fa      	ldrh	r2, [r7, #14]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fd89 	bl	8008e3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800732a:	e090      	b.n	800744e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	785a      	ldrb	r2, [r3, #1]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	88db      	ldrh	r3, [r3, #6]
 800733a:	2b3f      	cmp	r3, #63	; 0x3f
 800733c:	d803      	bhi.n	8007346 <USBD_CDC_Setup+0xa6>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	88db      	ldrh	r3, [r3, #6]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	e000      	b.n	8007348 <USBD_CDC_Setup+0xa8>
 8007346:	2240      	movs	r2, #64	; 0x40
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800734e:	6939      	ldr	r1, [r7, #16]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007356:	461a      	mov	r2, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f001 fd9b 	bl	8008e94 <USBD_CtlPrepareRx>
      break;
 800735e:	e076      	b.n	800744e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	33b0      	adds	r3, #176	; 0xb0
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	7850      	ldrb	r0, [r2, #1]
 8007376:	2200      	movs	r2, #0
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	4798      	blx	r3
      break;
 800737c:	e067      	b.n	800744e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	2b0b      	cmp	r3, #11
 8007384:	d851      	bhi.n	800742a <USBD_CDC_Setup+0x18a>
 8007386:	a201      	add	r2, pc, #4	; (adr r2, 800738c <USBD_CDC_Setup+0xec>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	080073bd 	.word	0x080073bd
 8007390:	08007439 	.word	0x08007439
 8007394:	0800742b 	.word	0x0800742b
 8007398:	0800742b 	.word	0x0800742b
 800739c:	0800742b 	.word	0x0800742b
 80073a0:	0800742b 	.word	0x0800742b
 80073a4:	0800742b 	.word	0x0800742b
 80073a8:	0800742b 	.word	0x0800742b
 80073ac:	0800742b 	.word	0x0800742b
 80073b0:	0800742b 	.word	0x0800742b
 80073b4:	080073e7 	.word	0x080073e7
 80073b8:	08007411 	.word	0x08007411
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d107      	bne.n	80073d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80073c8:	f107 030a 	add.w	r3, r7, #10
 80073cc:	2202      	movs	r2, #2
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fd33 	bl	8008e3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073d6:	e032      	b.n	800743e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 fcbd 	bl	8008d5a <USBD_CtlError>
            ret = USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	75fb      	strb	r3, [r7, #23]
          break;
 80073e4:	e02b      	b.n	800743e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d107      	bne.n	8007402 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073f2:	f107 030d 	add.w	r3, r7, #13
 80073f6:	2201      	movs	r2, #1
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 fd1e 	bl	8008e3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007400:	e01d      	b.n	800743e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 fca8 	bl	8008d5a <USBD_CtlError>
            ret = USBD_FAIL;
 800740a:	2303      	movs	r3, #3
 800740c:	75fb      	strb	r3, [r7, #23]
          break;
 800740e:	e016      	b.n	800743e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b03      	cmp	r3, #3
 800741a:	d00f      	beq.n	800743c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 fc9b 	bl	8008d5a <USBD_CtlError>
            ret = USBD_FAIL;
 8007424:	2303      	movs	r3, #3
 8007426:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007428:	e008      	b.n	800743c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 fc94 	bl	8008d5a <USBD_CtlError>
          ret = USBD_FAIL;
 8007432:	2303      	movs	r3, #3
 8007434:	75fb      	strb	r3, [r7, #23]
          break;
 8007436:	e002      	b.n	800743e <USBD_CDC_Setup+0x19e>
          break;
 8007438:	bf00      	nop
 800743a:	e008      	b.n	800744e <USBD_CDC_Setup+0x1ae>
          break;
 800743c:	bf00      	nop
      }
      break;
 800743e:	e006      	b.n	800744e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 fc89 	bl	8008d5a <USBD_CtlError>
      ret = USBD_FAIL;
 8007448:	2303      	movs	r3, #3
 800744a:	75fb      	strb	r3, [r7, #23]
      break;
 800744c:	bf00      	nop
  }

  return (uint8_t)ret;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800746a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32b0      	adds	r2, #176	; 0xb0
 8007476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800747e:	2303      	movs	r3, #3
 8007480:	e065      	b.n	800754e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	32b0      	adds	r2, #176	; 0xb0
 800748c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007490:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	f003 020f 	and.w	r2, r3, #15
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	3318      	adds	r3, #24
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d02f      	beq.n	800750c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	f003 020f 	and.w	r2, r3, #15
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	3318      	adds	r3, #24
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	f003 010f 	and.w	r1, r3, #15
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	460b      	mov	r3, r1
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	440b      	add	r3, r1
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4403      	add	r3, r0
 80074d4:	3348      	adds	r3, #72	; 0x48
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d112      	bne.n	800750c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	f003 020f 	and.w	r2, r3, #15
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	3318      	adds	r3, #24
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074fe:	78f9      	ldrb	r1, [r7, #3]
 8007500:	2300      	movs	r3, #0
 8007502:	2200      	movs	r2, #0
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f002 f990 	bl	800982a <USBD_LL_Transmit>
 800750a:	e01f      	b.n	800754c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	33b0      	adds	r3, #176	; 0xb0
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d010      	beq.n	800754c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	33b0      	adds	r3, #176	; 0xb0
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	32b0      	adds	r2, #176	; 0xb0
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	32b0      	adds	r2, #176	; 0xb0
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007584:	2303      	movs	r3, #3
 8007586:	e01a      	b.n	80075be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f002 f98e 	bl	80098ae <USBD_LL_GetRxDataSize>
 8007592:	4602      	mov	r2, r0
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	33b0      	adds	r3, #176	; 0xb0
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80075b8:	4611      	mov	r1, r2
 80075ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	32b0      	adds	r2, #176	; 0xb0
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e025      	b.n	8007634 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	33b0      	adds	r3, #176	; 0xb0
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01a      	beq.n	8007632 <USBD_CDC_EP0_RxReady+0x6c>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007602:	2bff      	cmp	r3, #255	; 0xff
 8007604:	d015      	beq.n	8007632 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	33b0      	adds	r3, #176	; 0xb0
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800761e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007626:	b292      	uxth	r2, r2
 8007628:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	22ff      	movs	r2, #255	; 0xff
 800762e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007644:	2182      	movs	r1, #130	; 0x82
 8007646:	4818      	ldr	r0, [pc, #96]	; (80076a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007648:	f000 fd4f 	bl	80080ea <USBD_GetEpDesc>
 800764c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800764e:	2101      	movs	r1, #1
 8007650:	4815      	ldr	r0, [pc, #84]	; (80076a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007652:	f000 fd4a 	bl	80080ea <USBD_GetEpDesc>
 8007656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007658:	2181      	movs	r1, #129	; 0x81
 800765a:	4813      	ldr	r0, [pc, #76]	; (80076a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800765c:	f000 fd45 	bl	80080ea <USBD_GetEpDesc>
 8007660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2210      	movs	r2, #16
 800766c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d006      	beq.n	8007682 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	2200      	movs	r2, #0
 8007678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800767c:	711a      	strb	r2, [r3, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d006      	beq.n	8007696 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007690:	711a      	strb	r2, [r3, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2243      	movs	r2, #67	; 0x43
 800769a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800769c:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000050 	.word	0x20000050

080076ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076b4:	2182      	movs	r1, #130	; 0x82
 80076b6:	4818      	ldr	r0, [pc, #96]	; (8007718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076b8:	f000 fd17 	bl	80080ea <USBD_GetEpDesc>
 80076bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076be:	2101      	movs	r1, #1
 80076c0:	4815      	ldr	r0, [pc, #84]	; (8007718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076c2:	f000 fd12 	bl	80080ea <USBD_GetEpDesc>
 80076c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076c8:	2181      	movs	r1, #129	; 0x81
 80076ca:	4813      	ldr	r0, [pc, #76]	; (8007718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076cc:	f000 fd0d 	bl	80080ea <USBD_GetEpDesc>
 80076d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2210      	movs	r2, #16
 80076dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2200      	movs	r2, #0
 80076e8:	711a      	strb	r2, [r3, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f042 0202 	orr.w	r2, r2, #2
 80076f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	711a      	strb	r2, [r3, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f042 0202 	orr.w	r2, r2, #2
 8007704:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2243      	movs	r2, #67	; 0x43
 800770a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800770c:	4b02      	ldr	r3, [pc, #8]	; (8007718 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000050 	.word	0x20000050

0800771c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007724:	2182      	movs	r1, #130	; 0x82
 8007726:	4818      	ldr	r0, [pc, #96]	; (8007788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007728:	f000 fcdf 	bl	80080ea <USBD_GetEpDesc>
 800772c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800772e:	2101      	movs	r1, #1
 8007730:	4815      	ldr	r0, [pc, #84]	; (8007788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007732:	f000 fcda 	bl	80080ea <USBD_GetEpDesc>
 8007736:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007738:	2181      	movs	r1, #129	; 0x81
 800773a:	4813      	ldr	r0, [pc, #76]	; (8007788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800773c:	f000 fcd5 	bl	80080ea <USBD_GetEpDesc>
 8007740:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	2210      	movs	r2, #16
 800774c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d006      	beq.n	8007762 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2200      	movs	r2, #0
 8007758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800775c:	711a      	strb	r2, [r3, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d006      	beq.n	8007776 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007770:	711a      	strb	r2, [r3, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2243      	movs	r2, #67	; 0x43
 800777a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800777c:	4b02      	ldr	r3, [pc, #8]	; (8007788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000050 	.word	0x20000050

0800778c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	220a      	movs	r2, #10
 8007798:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800779a:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800779c:	4618      	mov	r0, r3
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	2000000c 	.word	0x2000000c

080077ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	e009      	b.n	80077d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	33b0      	adds	r3, #176	; 0xb0
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	32b0      	adds	r2, #176	; 0xb0
 80077f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	e008      	b.n	8007818 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	32b0      	adds	r2, #176	; 0xb0
 8007838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	e004      	b.n	8007852 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
	...

08007860 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	32b0      	adds	r2, #176	; 0xb0
 8007872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007876:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007878:	2301      	movs	r3, #1
 800787a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	32b0      	adds	r2, #176	; 0xb0
 8007886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800788e:	2303      	movs	r3, #3
 8007890:	e025      	b.n	80078de <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007898:	2b00      	cmp	r3, #0
 800789a:	d11f      	bne.n	80078dc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2201      	movs	r2, #1
 80078a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80078a4:	4b10      	ldr	r3, [pc, #64]	; (80078e8 <USBD_CDC_TransmitPacket+0x88>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	f003 020f 	and.w	r2, r3, #15
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4403      	add	r3, r0
 80078be:	3318      	adds	r3, #24
 80078c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80078c2:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <USBD_CDC_TransmitPacket+0x88>)
 80078c4:	7819      	ldrb	r1, [r3, #0]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 ffa9 	bl	800982a <USBD_LL_Transmit>

    ret = USBD_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000093 	.word	0x20000093

080078ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	32b0      	adds	r2, #176	; 0xb0
 80078fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007902:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	32b0      	adds	r2, #176	; 0xb0
 800790e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007916:	2303      	movs	r3, #3
 8007918:	e018      	b.n	800794c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7c1b      	ldrb	r3, [r3, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007922:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <USBD_CDC_ReceivePacket+0x68>)
 8007924:	7819      	ldrb	r1, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800792c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 ff9b 	bl	800986c <USBD_LL_PrepareReceive>
 8007936:	e008      	b.n	800794a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007938:	4b06      	ldr	r3, [pc, #24]	; (8007954 <USBD_CDC_ReceivePacket+0x68>)
 800793a:	7819      	ldrb	r1, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007942:	2340      	movs	r3, #64	; 0x40
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 ff91 	bl	800986c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20000094 	.word	0x20000094

08007958 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800796c:	2303      	movs	r3, #3
 800796e:	e01f      	b.n	80079b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	79fa      	ldrb	r2, [r7, #7]
 80079a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f001 fe0b 	bl	80095c0 <USBD_LL_Init>
 80079aa:	4603      	mov	r3, r0
 80079ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e025      	b.n	8007a1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	32ae      	adds	r2, #174	; 0xae
 80079e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00f      	beq.n	8007a0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	32ae      	adds	r2, #174	; 0xae
 80079f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fc:	f107 020e 	add.w	r2, r7, #14
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	4602      	mov	r2, r0
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fe13 	bl	8009658 <USBD_LL_Start>
 8007a32:	4603      	mov	r3, r0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d009      	beq.n	8007a80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	4611      	mov	r1, r2
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	460b      	mov	r3, r1
 8007a94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	78fa      	ldrb	r2, [r7, #3]
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	4798      	blx	r3
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 f908 	bl	8008ce6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d01a      	beq.n	8007b30 <USBD_LL_SetupStage+0x72>
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d822      	bhi.n	8007b44 <USBD_LL_SetupStage+0x86>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <USBD_LL_SetupStage+0x4a>
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d00a      	beq.n	8007b1c <USBD_LL_SetupStage+0x5e>
 8007b06:	e01d      	b.n	8007b44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fb5f 	bl	80081d4 <USBD_StdDevReq>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1a:	e020      	b.n	8007b5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fbc7 	bl	80082b8 <USBD_StdItfReq>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b2e:	e016      	b.n	8007b5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fc29 	bl	8008390 <USBD_StdEPReq>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	73fb      	strb	r3, [r7, #15]
      break;
 8007b42:	e00c      	b.n	8007b5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 fde0 	bl	8009718 <USBD_LL_StallEP>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5c:	bf00      	nop
  }

  return ret;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	460b      	mov	r3, r1
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d16e      	bne.n	8007c5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	f040 8098 	bne.w	8007cc4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d913      	bls.n	8007bc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	1ad2      	subs	r2, r2, r3
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	bf28      	it	cs
 8007bba:	4613      	movcs	r3, r2
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f001 f984 	bl	8008ece <USBD_CtlContinueRx>
 8007bc6:	e07d      	b.n	8007cc4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bce:	f003 031f 	and.w	r3, r3, #31
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d014      	beq.n	8007c00 <USBD_LL_DataOutStage+0x98>
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d81d      	bhi.n	8007c16 <USBD_LL_DataOutStage+0xae>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <USBD_LL_DataOutStage+0x7c>
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d003      	beq.n	8007bea <USBD_LL_DataOutStage+0x82>
 8007be2:	e018      	b.n	8007c16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	75bb      	strb	r3, [r7, #22]
            break;
 8007be8:	e018      	b.n	8007c1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 fa5e 	bl	80080b6 <USBD_CoreFindIF>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	75bb      	strb	r3, [r7, #22]
            break;
 8007bfe:	e00d      	b.n	8007c1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	4619      	mov	r1, r3
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fa60 	bl	80080d0 <USBD_CoreFindEP>
 8007c10:	4603      	mov	r3, r0
 8007c12:	75bb      	strb	r3, [r7, #22]
            break;
 8007c14:	e002      	b.n	8007c1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	75bb      	strb	r3, [r7, #22]
            break;
 8007c1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007c1c:	7dbb      	ldrb	r3, [r7, #22]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d119      	bne.n	8007c56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d113      	bne.n	8007c56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007c2e:	7dba      	ldrb	r2, [r7, #22]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	32ae      	adds	r2, #174	; 0xae
 8007c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00b      	beq.n	8007c56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007c3e:	7dba      	ldrb	r2, [r7, #22]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007c46:	7dba      	ldrb	r2, [r7, #22]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	32ae      	adds	r2, #174	; 0xae
 8007c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f001 f94a 	bl	8008ef0 <USBD_CtlSendStatus>
 8007c5c:	e032      	b.n	8007cc4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	4619      	mov	r1, r3
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fa31 	bl	80080d0 <USBD_CoreFindEP>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c72:	7dbb      	ldrb	r3, [r7, #22]
 8007c74:	2bff      	cmp	r3, #255	; 0xff
 8007c76:	d025      	beq.n	8007cc4 <USBD_LL_DataOutStage+0x15c>
 8007c78:	7dbb      	ldrb	r3, [r7, #22]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d122      	bne.n	8007cc4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d117      	bne.n	8007cba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007c8a:	7dba      	ldrb	r2, [r7, #22]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	32ae      	adds	r2, #174	; 0xae
 8007c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00f      	beq.n	8007cba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007c9a:	7dba      	ldrb	r2, [r7, #22]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ca2:	7dba      	ldrb	r2, [r7, #22]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	32ae      	adds	r2, #174	; 0xae
 8007ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	7afa      	ldrb	r2, [r7, #11]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	4798      	blx	r3
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	e000      	b.n	8007cc6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b086      	sub	sp, #24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	607a      	str	r2, [r7, #4]
 8007cda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007cdc:	7afb      	ldrb	r3, [r7, #11]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d16f      	bne.n	8007dc2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d15a      	bne.n	8007da8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d914      	bls.n	8007d28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f001 f8ac 	bl	8008e72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2100      	movs	r1, #0
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f001 fda3 	bl	800986c <USBD_LL_PrepareReceive>
 8007d26:	e03f      	b.n	8007da8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	68da      	ldr	r2, [r3, #12]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d11c      	bne.n	8007d6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d316      	bcc.n	8007d6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d20f      	bcs.n	8007d6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2100      	movs	r1, #0
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f001 f88d 	bl	8008e72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d60:	2300      	movs	r3, #0
 8007d62:	2200      	movs	r2, #0
 8007d64:	2100      	movs	r1, #0
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f001 fd80 	bl	800986c <USBD_LL_PrepareReceive>
 8007d6c:	e01c      	b.n	8007da8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d10f      	bne.n	8007d9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d009      	beq.n	8007d9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d9a:	2180      	movs	r1, #128	; 0x80
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f001 fcbb 	bl	8009718 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f001 f8b7 	bl	8008f16 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d03a      	beq.n	8007e28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff fe42 	bl	8007a3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007dc0:	e032      	b.n	8007e28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007dc2:	7afb      	ldrb	r3, [r7, #11]
 8007dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	4619      	mov	r1, r3
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f97f 	bl	80080d0 <USBD_CoreFindEP>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	2bff      	cmp	r3, #255	; 0xff
 8007dda:	d025      	beq.n	8007e28 <USBD_LL_DataInStage+0x15a>
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d122      	bne.n	8007e28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d11c      	bne.n	8007e28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007dee:	7dfa      	ldrb	r2, [r7, #23]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	32ae      	adds	r2, #174	; 0xae
 8007df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d014      	beq.n	8007e28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007dfe:	7dfa      	ldrb	r2, [r7, #23]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007e06:	7dfa      	ldrb	r2, [r7, #23]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	32ae      	adds	r2, #174	; 0xae
 8007e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	7afa      	ldrb	r2, [r7, #11]
 8007e14:	4611      	mov	r1, r2
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	4798      	blx	r3
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007e1e:	7dbb      	ldrb	r3, [r7, #22]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007e24:	7dbb      	ldrb	r3, [r7, #22]
 8007e26:	e000      	b.n	8007e2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d014      	beq.n	8007e98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00e      	beq.n	8007e98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6852      	ldr	r2, [r2, #4]
 8007e86:	b2d2      	uxtb	r2, r2
 8007e88:	4611      	mov	r1, r2
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e94:	2303      	movs	r3, #3
 8007e96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e98:	2340      	movs	r3, #64	; 0x40
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fbf5 	bl	800968e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2240      	movs	r2, #64	; 0x40
 8007eb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2180      	movs	r1, #128	; 0x80
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 fbe7 	bl	800968e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2240      	movs	r2, #64	; 0x40
 8007eca:	621a      	str	r2, [r3, #32]

  return ret;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	78fa      	ldrb	r2, [r7, #3]
 8007ee6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2204      	movs	r2, #4
 8007f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d106      	bne.n	8007f44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d110      	bne.n	8007f88 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00b      	beq.n	8007f88 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b082      	sub	sp, #8
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	32ae      	adds	r2, #174	; 0xae
 8007fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e01c      	b.n	8007fee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d115      	bne.n	8007fec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	32ae      	adds	r2, #174	; 0xae
 8007fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00b      	beq.n	8007fec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	32ae      	adds	r2, #174	; 0xae
 8007fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	32ae      	adds	r2, #174	; 0xae
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	e01c      	b.n	8008052 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b03      	cmp	r3, #3
 8008022:	d115      	bne.n	8008050 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	32ae      	adds	r2, #174	; 0xae
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	32ae      	adds	r2, #174	; 0xae
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	78fa      	ldrb	r2, [r7, #3]
 800804a:	4611      	mov	r1, r2
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00e      	beq.n	80080ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6852      	ldr	r2, [r2, #4]
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	4611      	mov	r1, r2
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080de:	4618      	mov	r0, r3
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b086      	sub	sp, #24
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	b29a      	uxth	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	429a      	cmp	r2, r3
 8008110:	d920      	bls.n	8008154 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800811a:	e013      	b.n	8008144 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800811c:	f107 030a 	add.w	r3, r7, #10
 8008120:	4619      	mov	r1, r3
 8008122:	6978      	ldr	r0, [r7, #20]
 8008124:	f000 f81b 	bl	800815e <USBD_GetNextDesc>
 8008128:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	2b05      	cmp	r3, #5
 8008130:	d108      	bne.n	8008144 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	789b      	ldrb	r3, [r3, #2]
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	429a      	cmp	r2, r3
 800813e:	d008      	beq.n	8008152 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008140:	2300      	movs	r3, #0
 8008142:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	885b      	ldrh	r3, [r3, #2]
 8008148:	b29a      	uxth	r2, r3
 800814a:	897b      	ldrh	r3, [r7, #10]
 800814c:	429a      	cmp	r2, r3
 800814e:	d8e5      	bhi.n	800811c <USBD_GetEpDesc+0x32>
 8008150:	e000      	b.n	8008154 <USBD_GetEpDesc+0x6a>
          break;
 8008152:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008154:	693b      	ldr	r3, [r7, #16]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	881a      	ldrh	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	4413      	add	r3, r2
 8008178:	b29a      	uxth	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4413      	add	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800818a:	68fb      	ldr	r3, [r7, #12]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	3301      	adds	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80081b6:	8a3b      	ldrh	r3, [r7, #16]
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	b21a      	sxth	r2, r3
 80081bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	b21b      	sxth	r3, r3
 80081c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80081c6:	89fb      	ldrh	r3, [r7, #14]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	d005      	beq.n	80081fa <USBD_StdDevReq+0x26>
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d857      	bhi.n	80082a2 <USBD_StdDevReq+0xce>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00f      	beq.n	8008216 <USBD_StdDevReq+0x42>
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d153      	bne.n	80082a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	32ae      	adds	r2, #174	; 0xae
 8008204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	4798      	blx	r3
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]
      break;
 8008214:	e04a      	b.n	80082ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	2b09      	cmp	r3, #9
 800821c:	d83b      	bhi.n	8008296 <USBD_StdDevReq+0xc2>
 800821e:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <USBD_StdDevReq+0x50>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	08008279 	.word	0x08008279
 8008228:	0800828d 	.word	0x0800828d
 800822c:	08008297 	.word	0x08008297
 8008230:	08008283 	.word	0x08008283
 8008234:	08008297 	.word	0x08008297
 8008238:	08008257 	.word	0x08008257
 800823c:	0800824d 	.word	0x0800824d
 8008240:	08008297 	.word	0x08008297
 8008244:	0800826f 	.word	0x0800826f
 8008248:	08008261 	.word	0x08008261
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa3c 	bl	80086cc <USBD_GetDescriptor>
          break;
 8008254:	e024      	b.n	80082a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fba1 	bl	80089a0 <USBD_SetAddress>
          break;
 800825e:	e01f      	b.n	80082a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fbe0 	bl	8008a28 <USBD_SetConfig>
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]
          break;
 800826c:	e018      	b.n	80082a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fc83 	bl	8008b7c <USBD_GetConfig>
          break;
 8008276:	e013      	b.n	80082a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fcb4 	bl	8008be8 <USBD_GetStatus>
          break;
 8008280:	e00e      	b.n	80082a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fce3 	bl	8008c50 <USBD_SetFeature>
          break;
 800828a:	e009      	b.n	80082a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fd07 	bl	8008ca2 <USBD_ClrFeature>
          break;
 8008294:	e004      	b.n	80082a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fd5e 	bl	8008d5a <USBD_CtlError>
          break;
 800829e:	bf00      	nop
      }
      break;
 80082a0:	e004      	b.n	80082ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fd58 	bl	8008d5a <USBD_CtlError>
      break;
 80082aa:	bf00      	nop
  }

  return ret;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop

080082b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ce:	2b40      	cmp	r3, #64	; 0x40
 80082d0:	d005      	beq.n	80082de <USBD_StdItfReq+0x26>
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d852      	bhi.n	800837c <USBD_StdItfReq+0xc4>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <USBD_StdItfReq+0x26>
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d14e      	bne.n	800837c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d840      	bhi.n	800836e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	889b      	ldrh	r3, [r3, #4]
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d836      	bhi.n	8008364 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	889b      	ldrh	r3, [r3, #4]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff fed9 	bl	80080b6 <USBD_CoreFindIF>
 8008304:	4603      	mov	r3, r0
 8008306:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	2bff      	cmp	r3, #255	; 0xff
 800830c:	d01d      	beq.n	800834a <USBD_StdItfReq+0x92>
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d11a      	bne.n	800834a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008314:	7bba      	ldrb	r2, [r7, #14]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	32ae      	adds	r2, #174	; 0xae
 800831a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00f      	beq.n	8008344 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008324:	7bba      	ldrb	r2, [r7, #14]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800832c:	7bba      	ldrb	r2, [r7, #14]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	32ae      	adds	r2, #174	; 0xae
 8008332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	4798      	blx	r3
 800833e:	4603      	mov	r3, r0
 8008340:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008342:	e004      	b.n	800834e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008344:	2303      	movs	r3, #3
 8008346:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008348:	e001      	b.n	800834e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800834a:	2303      	movs	r3, #3
 800834c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	88db      	ldrh	r3, [r3, #6]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d110      	bne.n	8008378 <USBD_StdItfReq+0xc0>
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10d      	bne.n	8008378 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fdc7 	bl	8008ef0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008362:	e009      	b.n	8008378 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fcf7 	bl	8008d5a <USBD_CtlError>
          break;
 800836c:	e004      	b.n	8008378 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fcf2 	bl	8008d5a <USBD_CtlError>
          break;
 8008376:	e000      	b.n	800837a <USBD_StdItfReq+0xc2>
          break;
 8008378:	bf00      	nop
      }
      break;
 800837a:	e004      	b.n	8008386 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fceb 	bl	8008d5a <USBD_CtlError>
      break;
 8008384:	bf00      	nop
  }

  return ret;
 8008386:	7bfb      	ldrb	r3, [r7, #15]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	889b      	ldrh	r3, [r3, #4]
 80083a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ac:	2b40      	cmp	r3, #64	; 0x40
 80083ae:	d007      	beq.n	80083c0 <USBD_StdEPReq+0x30>
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	f200 817f 	bhi.w	80086b4 <USBD_StdEPReq+0x324>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d02a      	beq.n	8008410 <USBD_StdEPReq+0x80>
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	f040 817a 	bne.w	80086b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7ff fe83 	bl	80080d0 <USBD_CoreFindEP>
 80083ca:	4603      	mov	r3, r0
 80083cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083ce:	7b7b      	ldrb	r3, [r7, #13]
 80083d0:	2bff      	cmp	r3, #255	; 0xff
 80083d2:	f000 8174 	beq.w	80086be <USBD_StdEPReq+0x32e>
 80083d6:	7b7b      	ldrb	r3, [r7, #13]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f040 8170 	bne.w	80086be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80083de:	7b7a      	ldrb	r2, [r7, #13]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80083e6:	7b7a      	ldrb	r2, [r7, #13]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	32ae      	adds	r2, #174	; 0xae
 80083ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8163 	beq.w	80086be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083f8:	7b7a      	ldrb	r2, [r7, #13]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	32ae      	adds	r2, #174	; 0xae
 80083fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	4798      	blx	r3
 800840a:	4603      	mov	r3, r0
 800840c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800840e:	e156      	b.n	80086be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	785b      	ldrb	r3, [r3, #1]
 8008414:	2b03      	cmp	r3, #3
 8008416:	d008      	beq.n	800842a <USBD_StdEPReq+0x9a>
 8008418:	2b03      	cmp	r3, #3
 800841a:	f300 8145 	bgt.w	80086a8 <USBD_StdEPReq+0x318>
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 809b 	beq.w	800855a <USBD_StdEPReq+0x1ca>
 8008424:	2b01      	cmp	r3, #1
 8008426:	d03c      	beq.n	80084a2 <USBD_StdEPReq+0x112>
 8008428:	e13e      	b.n	80086a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b02      	cmp	r3, #2
 8008434:	d002      	beq.n	800843c <USBD_StdEPReq+0xac>
 8008436:	2b03      	cmp	r3, #3
 8008438:	d016      	beq.n	8008468 <USBD_StdEPReq+0xd8>
 800843a:	e02c      	b.n	8008496 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00d      	beq.n	800845e <USBD_StdEPReq+0xce>
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b80      	cmp	r3, #128	; 0x80
 8008446:	d00a      	beq.n	800845e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 f963 	bl	8009718 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008452:	2180      	movs	r1, #128	; 0x80
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 f95f 	bl	8009718 <USBD_LL_StallEP>
 800845a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800845c:	e020      	b.n	80084a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fc7a 	bl	8008d5a <USBD_CtlError>
              break;
 8008466:	e01b      	b.n	80084a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	885b      	ldrh	r3, [r3, #2]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10e      	bne.n	800848e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00b      	beq.n	800848e <USBD_StdEPReq+0xfe>
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	2b80      	cmp	r3, #128	; 0x80
 800847a:	d008      	beq.n	800848e <USBD_StdEPReq+0xfe>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	88db      	ldrh	r3, [r3, #6]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d104      	bne.n	800848e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f001 f945 	bl	8009718 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fd2e 	bl	8008ef0 <USBD_CtlSendStatus>

              break;
 8008494:	e004      	b.n	80084a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fc5e 	bl	8008d5a <USBD_CtlError>
              break;
 800849e:	bf00      	nop
          }
          break;
 80084a0:	e107      	b.n	80086b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d002      	beq.n	80084b4 <USBD_StdEPReq+0x124>
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d016      	beq.n	80084e0 <USBD_StdEPReq+0x150>
 80084b2:	e04b      	b.n	800854c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00d      	beq.n	80084d6 <USBD_StdEPReq+0x146>
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b80      	cmp	r3, #128	; 0x80
 80084be:	d00a      	beq.n	80084d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f927 	bl	8009718 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084ca:	2180      	movs	r1, #128	; 0x80
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 f923 	bl	8009718 <USBD_LL_StallEP>
 80084d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084d4:	e040      	b.n	8008558 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fc3e 	bl	8008d5a <USBD_CtlError>
              break;
 80084de:	e03b      	b.n	8008558 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	885b      	ldrh	r3, [r3, #2]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d136      	bne.n	8008556 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f001 f92d 	bl	8009756 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fcf7 	bl	8008ef0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fde2 	bl	80080d0 <USBD_CoreFindEP>
 800850c:	4603      	mov	r3, r0
 800850e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008510:	7b7b      	ldrb	r3, [r7, #13]
 8008512:	2bff      	cmp	r3, #255	; 0xff
 8008514:	d01f      	beq.n	8008556 <USBD_StdEPReq+0x1c6>
 8008516:	7b7b      	ldrb	r3, [r7, #13]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d11c      	bne.n	8008556 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800851c:	7b7a      	ldrb	r2, [r7, #13]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008524:	7b7a      	ldrb	r2, [r7, #13]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	32ae      	adds	r2, #174	; 0xae
 800852a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d010      	beq.n	8008556 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008534:	7b7a      	ldrb	r2, [r7, #13]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	32ae      	adds	r2, #174	; 0xae
 800853a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
 8008546:	4603      	mov	r3, r0
 8008548:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800854a:	e004      	b.n	8008556 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fc03 	bl	8008d5a <USBD_CtlError>
              break;
 8008554:	e000      	b.n	8008558 <USBD_StdEPReq+0x1c8>
              break;
 8008556:	bf00      	nop
          }
          break;
 8008558:	e0ab      	b.n	80086b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d002      	beq.n	800856c <USBD_StdEPReq+0x1dc>
 8008566:	2b03      	cmp	r3, #3
 8008568:	d032      	beq.n	80085d0 <USBD_StdEPReq+0x240>
 800856a:	e097      	b.n	800869c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d007      	beq.n	8008582 <USBD_StdEPReq+0x1f2>
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b80      	cmp	r3, #128	; 0x80
 8008576:	d004      	beq.n	8008582 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fbed 	bl	8008d5a <USBD_CtlError>
                break;
 8008580:	e091      	b.n	80086a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008586:	2b00      	cmp	r3, #0
 8008588:	da0b      	bge.n	80085a2 <USBD_StdEPReq+0x212>
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	3310      	adds	r3, #16
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	3304      	adds	r3, #4
 80085a0:	e00b      	b.n	80085ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	4413      	add	r3, r2
 80085b8:	3304      	adds	r3, #4
 80085ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2202      	movs	r2, #2
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fc37 	bl	8008e3c <USBD_CtlSendData>
              break;
 80085ce:	e06a      	b.n	80086a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	da11      	bge.n	80085fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	f003 020f 	and.w	r2, r3, #15
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	440b      	add	r3, r1
 80085ea:	3324      	adds	r3, #36	; 0x24
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d117      	bne.n	8008622 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fbb0 	bl	8008d5a <USBD_CtlError>
                  break;
 80085fa:	e054      	b.n	80086a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	f003 020f 	and.w	r2, r3, #15
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	4613      	mov	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	440b      	add	r3, r1
 800860e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fb9d 	bl	8008d5a <USBD_CtlError>
                  break;
 8008620:	e041      	b.n	80086a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008622:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008626:	2b00      	cmp	r3, #0
 8008628:	da0b      	bge.n	8008642 <USBD_StdEPReq+0x2b2>
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	3310      	adds	r3, #16
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	3304      	adds	r3, #4
 8008640:	e00b      	b.n	800865a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	4413      	add	r3, r2
 8008658:	3304      	adds	r3, #4
 800865a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <USBD_StdEPReq+0x2d8>
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b80      	cmp	r3, #128	; 0x80
 8008666:	d103      	bne.n	8008670 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	e00e      	b.n	800868e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f88d 	bl	8009794 <USBD_LL_IsStallEP>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d003      	beq.n	8008688 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2201      	movs	r2, #1
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	e002      	b.n	800868e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2202      	movs	r2, #2
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fbd1 	bl	8008e3c <USBD_CtlSendData>
              break;
 800869a:	e004      	b.n	80086a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fb5b 	bl	8008d5a <USBD_CtlError>
              break;
 80086a4:	bf00      	nop
          }
          break;
 80086a6:	e004      	b.n	80086b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fb55 	bl	8008d5a <USBD_CtlError>
          break;
 80086b0:	bf00      	nop
      }
      break;
 80086b2:	e005      	b.n	80086c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fb4f 	bl	8008d5a <USBD_CtlError>
      break;
 80086bc:	e000      	b.n	80086c0 <USBD_StdEPReq+0x330>
      break;
 80086be:	bf00      	nop
  }

  return ret;
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	885b      	ldrh	r3, [r3, #2]
 80086e6:	0a1b      	lsrs	r3, r3, #8
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	2b06      	cmp	r3, #6
 80086ee:	f200 8128 	bhi.w	8008942 <USBD_GetDescriptor+0x276>
 80086f2:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <USBD_GetDescriptor+0x2c>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	08008715 	.word	0x08008715
 80086fc:	0800872d 	.word	0x0800872d
 8008700:	0800876d 	.word	0x0800876d
 8008704:	08008943 	.word	0x08008943
 8008708:	08008943 	.word	0x08008943
 800870c:	080088e3 	.word	0x080088e3
 8008710:	0800890f 	.word	0x0800890f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	7c12      	ldrb	r2, [r2, #16]
 8008720:	f107 0108 	add.w	r1, r7, #8
 8008724:	4610      	mov	r0, r2
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
      break;
 800872a:	e112      	b.n	8008952 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	7c1b      	ldrb	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10d      	bne.n	8008750 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873c:	f107 0208 	add.w	r2, r7, #8
 8008740:	4610      	mov	r0, r2
 8008742:	4798      	blx	r3
 8008744:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3301      	adds	r3, #1
 800874a:	2202      	movs	r2, #2
 800874c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800874e:	e100      	b.n	8008952 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	f107 0208 	add.w	r2, r7, #8
 800875c:	4610      	mov	r0, r2
 800875e:	4798      	blx	r3
 8008760:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3301      	adds	r3, #1
 8008766:	2202      	movs	r2, #2
 8008768:	701a      	strb	r2, [r3, #0]
      break;
 800876a:	e0f2      	b.n	8008952 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	885b      	ldrh	r3, [r3, #2]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b05      	cmp	r3, #5
 8008774:	f200 80ac 	bhi.w	80088d0 <USBD_GetDescriptor+0x204>
 8008778:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <USBD_GetDescriptor+0xb4>)
 800877a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877e:	bf00      	nop
 8008780:	08008799 	.word	0x08008799
 8008784:	080087cd 	.word	0x080087cd
 8008788:	08008801 	.word	0x08008801
 800878c:	08008835 	.word	0x08008835
 8008790:	08008869 	.word	0x08008869
 8008794:	0800889d 	.word	0x0800889d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	7c12      	ldrb	r2, [r2, #16]
 80087b0:	f107 0108 	add.w	r1, r7, #8
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
 80087b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ba:	e091      	b.n	80088e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 facb 	bl	8008d5a <USBD_CtlError>
            err++;
 80087c4:	7afb      	ldrb	r3, [r7, #11]
 80087c6:	3301      	adds	r3, #1
 80087c8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ca:	e089      	b.n	80088e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00b      	beq.n	80087f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	7c12      	ldrb	r2, [r2, #16]
 80087e4:	f107 0108 	add.w	r1, r7, #8
 80087e8:	4610      	mov	r0, r2
 80087ea:	4798      	blx	r3
 80087ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ee:	e077      	b.n	80088e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fab1 	bl	8008d5a <USBD_CtlError>
            err++;
 80087f8:	7afb      	ldrb	r3, [r7, #11]
 80087fa:	3301      	adds	r3, #1
 80087fc:	72fb      	strb	r3, [r7, #11]
          break;
 80087fe:	e06f      	b.n	80088e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00b      	beq.n	8008824 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	7c12      	ldrb	r2, [r2, #16]
 8008818:	f107 0108 	add.w	r1, r7, #8
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
 8008820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008822:	e05d      	b.n	80088e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa97 	bl	8008d5a <USBD_CtlError>
            err++;
 800882c:	7afb      	ldrb	r3, [r7, #11]
 800882e:	3301      	adds	r3, #1
 8008830:	72fb      	strb	r3, [r7, #11]
          break;
 8008832:	e055      	b.n	80088e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	7c12      	ldrb	r2, [r2, #16]
 800884c:	f107 0108 	add.w	r1, r7, #8
 8008850:	4610      	mov	r0, r2
 8008852:	4798      	blx	r3
 8008854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008856:	e043      	b.n	80088e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa7d 	bl	8008d5a <USBD_CtlError>
            err++;
 8008860:	7afb      	ldrb	r3, [r7, #11]
 8008862:	3301      	adds	r3, #1
 8008864:	72fb      	strb	r3, [r7, #11]
          break;
 8008866:	e03b      	b.n	80088e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	7c12      	ldrb	r2, [r2, #16]
 8008880:	f107 0108 	add.w	r1, r7, #8
 8008884:	4610      	mov	r0, r2
 8008886:	4798      	blx	r3
 8008888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800888a:	e029      	b.n	80088e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fa63 	bl	8008d5a <USBD_CtlError>
            err++;
 8008894:	7afb      	ldrb	r3, [r7, #11]
 8008896:	3301      	adds	r3, #1
 8008898:	72fb      	strb	r3, [r7, #11]
          break;
 800889a:	e021      	b.n	80088e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	7c12      	ldrb	r2, [r2, #16]
 80088b4:	f107 0108 	add.w	r1, r7, #8
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088be:	e00f      	b.n	80088e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa49 	bl	8008d5a <USBD_CtlError>
            err++;
 80088c8:	7afb      	ldrb	r3, [r7, #11]
 80088ca:	3301      	adds	r3, #1
 80088cc:	72fb      	strb	r3, [r7, #11]
          break;
 80088ce:	e007      	b.n	80088e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa41 	bl	8008d5a <USBD_CtlError>
          err++;
 80088d8:	7afb      	ldrb	r3, [r7, #11]
 80088da:	3301      	adds	r3, #1
 80088dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088de:	bf00      	nop
      }
      break;
 80088e0:	e037      	b.n	8008952 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	7c1b      	ldrb	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f2:	f107 0208 	add.w	r2, r7, #8
 80088f6:	4610      	mov	r0, r2
 80088f8:	4798      	blx	r3
 80088fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088fc:	e029      	b.n	8008952 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fa2a 	bl	8008d5a <USBD_CtlError>
        err++;
 8008906:	7afb      	ldrb	r3, [r7, #11]
 8008908:	3301      	adds	r3, #1
 800890a:	72fb      	strb	r3, [r7, #11]
      break;
 800890c:	e021      	b.n	8008952 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7c1b      	ldrb	r3, [r3, #16]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10d      	bne.n	8008932 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	f107 0208 	add.w	r2, r7, #8
 8008922:	4610      	mov	r0, r2
 8008924:	4798      	blx	r3
 8008926:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3301      	adds	r3, #1
 800892c:	2207      	movs	r2, #7
 800892e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008930:	e00f      	b.n	8008952 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fa10 	bl	8008d5a <USBD_CtlError>
        err++;
 800893a:	7afb      	ldrb	r3, [r7, #11]
 800893c:	3301      	adds	r3, #1
 800893e:	72fb      	strb	r3, [r7, #11]
      break;
 8008940:	e007      	b.n	8008952 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fa08 	bl	8008d5a <USBD_CtlError>
      err++;
 800894a:	7afb      	ldrb	r3, [r7, #11]
 800894c:	3301      	adds	r3, #1
 800894e:	72fb      	strb	r3, [r7, #11]
      break;
 8008950:	bf00      	nop
  }

  if (err != 0U)
 8008952:	7afb      	ldrb	r3, [r7, #11]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d11e      	bne.n	8008996 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	88db      	ldrh	r3, [r3, #6]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d016      	beq.n	800898e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008960:	893b      	ldrh	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00e      	beq.n	8008984 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	88da      	ldrh	r2, [r3, #6]
 800896a:	893b      	ldrh	r3, [r7, #8]
 800896c:	4293      	cmp	r3, r2
 800896e:	bf28      	it	cs
 8008970:	4613      	movcs	r3, r2
 8008972:	b29b      	uxth	r3, r3
 8008974:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008976:	893b      	ldrh	r3, [r7, #8]
 8008978:	461a      	mov	r2, r3
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fa5d 	bl	8008e3c <USBD_CtlSendData>
 8008982:	e009      	b.n	8008998 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f9e7 	bl	8008d5a <USBD_CtlError>
 800898c:	e004      	b.n	8008998 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 faae 	bl	8008ef0 <USBD_CtlSendStatus>
 8008994:	e000      	b.n	8008998 <USBD_GetDescriptor+0x2cc>
    return;
 8008996:	bf00      	nop
  }
}
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop

080089a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	889b      	ldrh	r3, [r3, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d131      	bne.n	8008a16 <USBD_SetAddress+0x76>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	88db      	ldrh	r3, [r3, #6]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d12d      	bne.n	8008a16 <USBD_SetAddress+0x76>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	885b      	ldrh	r3, [r3, #2]
 80089be:	2b7f      	cmp	r3, #127	; 0x7f
 80089c0:	d829      	bhi.n	8008a16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	885b      	ldrh	r3, [r3, #2]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d104      	bne.n	80089e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f9bc 	bl	8008d5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e2:	e01d      	b.n	8008a20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	7bfa      	ldrb	r2, [r7, #15]
 80089e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fefb 	bl	80097ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa7a 	bl	8008ef0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d004      	beq.n	8008a0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2202      	movs	r2, #2
 8008a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a0a:	e009      	b.n	8008a20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a14:	e004      	b.n	8008a20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f99e 	bl	8008d5a <USBD_CtlError>
  }
}
 8008a1e:	bf00      	nop
 8008a20:	bf00      	nop
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	885b      	ldrh	r3, [r3, #2]
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	4b4e      	ldr	r3, [pc, #312]	; (8008b78 <USBD_SetConfig+0x150>)
 8008a3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a40:	4b4d      	ldr	r3, [pc, #308]	; (8008b78 <USBD_SetConfig+0x150>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d905      	bls.n	8008a54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f985 	bl	8008d5a <USBD_CtlError>
    return USBD_FAIL;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e08c      	b.n	8008b6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d002      	beq.n	8008a66 <USBD_SetConfig+0x3e>
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d029      	beq.n	8008ab8 <USBD_SetConfig+0x90>
 8008a64:	e075      	b.n	8008b52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a66:	4b44      	ldr	r3, [pc, #272]	; (8008b78 <USBD_SetConfig+0x150>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d020      	beq.n	8008ab0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a6e:	4b42      	ldr	r3, [pc, #264]	; (8008b78 <USBD_SetConfig+0x150>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a78:	4b3f      	ldr	r3, [pc, #252]	; (8008b78 <USBD_SetConfig+0x150>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7fe ffe7 	bl	8007a52 <USBD_SetClassConfig>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d008      	beq.n	8008aa0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f962 	bl	8008d5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2202      	movs	r2, #2
 8008a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a9e:	e065      	b.n	8008b6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fa25 	bl	8008ef0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008aae:	e05d      	b.n	8008b6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fa1d 	bl	8008ef0 <USBD_CtlSendStatus>
      break;
 8008ab6:	e059      	b.n	8008b6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ab8:	4b2f      	ldr	r3, [pc, #188]	; (8008b78 <USBD_SetConfig+0x150>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d112      	bne.n	8008ae6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008ac8:	4b2b      	ldr	r3, [pc, #172]	; (8008b78 <USBD_SetConfig+0x150>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ad2:	4b29      	ldr	r3, [pc, #164]	; (8008b78 <USBD_SetConfig+0x150>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7fe ffd6 	bl	8007a8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa06 	bl	8008ef0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ae4:	e042      	b.n	8008b6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ae6:	4b24      	ldr	r3, [pc, #144]	; (8008b78 <USBD_SetConfig+0x150>)
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d02a      	beq.n	8008b4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7fe ffc4 	bl	8007a8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b02:	4b1d      	ldr	r3, [pc, #116]	; (8008b78 <USBD_SetConfig+0x150>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <USBD_SetConfig+0x150>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7fe ff9d 	bl	8007a52 <USBD_SetClassConfig>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00f      	beq.n	8008b42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f918 	bl	8008d5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7fe ffa9 	bl	8007a8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b40:	e014      	b.n	8008b6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f9d4 	bl	8008ef0 <USBD_CtlSendStatus>
      break;
 8008b48:	e010      	b.n	8008b6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f9d0 	bl	8008ef0 <USBD_CtlSendStatus>
      break;
 8008b50:	e00c      	b.n	8008b6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f900 	bl	8008d5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <USBD_SetConfig+0x150>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7fe ff92 	bl	8007a8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b66:	2303      	movs	r3, #3
 8008b68:	73fb      	strb	r3, [r7, #15]
      break;
 8008b6a:	bf00      	nop
  }

  return ret;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000270 	.word	0x20000270

08008b7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	88db      	ldrh	r3, [r3, #6]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d004      	beq.n	8008b98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f8e2 	bl	8008d5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b96:	e023      	b.n	8008be0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	dc02      	bgt.n	8008baa <USBD_GetConfig+0x2e>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dc03      	bgt.n	8008bb0 <USBD_GetConfig+0x34>
 8008ba8:	e015      	b.n	8008bd6 <USBD_GetConfig+0x5a>
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d00b      	beq.n	8008bc6 <USBD_GetConfig+0x4a>
 8008bae:	e012      	b.n	8008bd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	2201      	movs	r2, #1
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f93c 	bl	8008e3c <USBD_CtlSendData>
        break;
 8008bc4:	e00c      	b.n	8008be0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	2201      	movs	r2, #1
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f934 	bl	8008e3c <USBD_CtlSendData>
        break;
 8008bd4:	e004      	b.n	8008be0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f8be 	bl	8008d5a <USBD_CtlError>
        break;
 8008bde:	bf00      	nop
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d81e      	bhi.n	8008c3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	88db      	ldrh	r3, [r3, #6]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d004      	beq.n	8008c12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f8a5 	bl	8008d5a <USBD_CtlError>
        break;
 8008c10:	e01a      	b.n	8008c48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	f043 0202 	orr.w	r2, r3, #2
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	330c      	adds	r3, #12
 8008c32:	2202      	movs	r2, #2
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f900 	bl	8008e3c <USBD_CtlSendData>
      break;
 8008c3c:	e004      	b.n	8008c48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f88a 	bl	8008d5a <USBD_CtlError>
      break;
 8008c46:	bf00      	nop
  }
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	885b      	ldrh	r3, [r3, #2]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d107      	bne.n	8008c72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f940 	bl	8008ef0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c70:	e013      	b.n	8008c9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	885b      	ldrh	r3, [r3, #2]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d10b      	bne.n	8008c92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	889b      	ldrh	r3, [r3, #4]
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f930 	bl	8008ef0 <USBD_CtlSendStatus>
}
 8008c90:	e003      	b.n	8008c9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f860 	bl	8008d5a <USBD_CtlError>
}
 8008c9a:	bf00      	nop
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d80b      	bhi.n	8008cd2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	885b      	ldrh	r3, [r3, #2]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d10c      	bne.n	8008cdc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f910 	bl	8008ef0 <USBD_CtlSendStatus>
      }
      break;
 8008cd0:	e004      	b.n	8008cdc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f840 	bl	8008d5a <USBD_CtlError>
      break;
 8008cda:	e000      	b.n	8008cde <USBD_ClrFeature+0x3c>
      break;
 8008cdc:	bf00      	nop
  }
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	781a      	ldrb	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	781a      	ldrb	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f7ff fa41 	bl	8008198 <SWAPBYTE>
 8008d16:	4603      	mov	r3, r0
 8008d18:	461a      	mov	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3301      	adds	r3, #1
 8008d22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3301      	adds	r3, #1
 8008d28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f7ff fa34 	bl	8008198 <SWAPBYTE>
 8008d30:	4603      	mov	r3, r0
 8008d32:	461a      	mov	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3301      	adds	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f7ff fa27 	bl	8008198 <SWAPBYTE>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	80da      	strh	r2, [r3, #6]
}
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d64:	2180      	movs	r1, #128	; 0x80
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fcd6 	bl	8009718 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fcd2 	bl	8009718 <USBD_LL_StallEP>
}
 8008d74:	bf00      	nop
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d036      	beq.n	8008e00 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d96:	6938      	ldr	r0, [r7, #16]
 8008d98:	f000 f836 	bl	8008e08 <USBD_GetLen>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	3301      	adds	r3, #1
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	4413      	add	r3, r2
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7812      	ldrb	r2, [r2, #0]
 8008db4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008db6:	7dfb      	ldrb	r3, [r7, #23]
 8008db8:	3301      	adds	r3, #1
 8008dba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	2203      	movs	r2, #3
 8008dc4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008dcc:	e013      	b.n	8008df6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	7812      	ldrb	r2, [r2, #0]
 8008dd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	613b      	str	r3, [r7, #16]
    idx++;
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	3301      	adds	r3, #1
 8008de4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	4413      	add	r3, r2
 8008dec:	2200      	movs	r2, #0
 8008dee:	701a      	strb	r2, [r3, #0]
    idx++;
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	3301      	adds	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1e7      	bne.n	8008dce <USBD_GetString+0x52>
 8008dfe:	e000      	b.n	8008e02 <USBD_GetString+0x86>
    return;
 8008e00:	bf00      	nop
  }
}
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e18:	e005      	b.n	8008e26 <USBD_GetLen+0x1e>
  {
    len++;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1f5      	bne.n	8008e1a <USBD_GetLen+0x12>
  }

  return len;
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	2100      	movs	r1, #0
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fce1 	bl	800982a <USBD_LL_Transmit>

  return USBD_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	2100      	movs	r1, #0
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fcd0 	bl	800982a <USBD_LL_Transmit>

  return USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 fcd4 	bl	800986c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	2100      	movs	r1, #0
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 fcc3 	bl	800986c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2204      	movs	r2, #4
 8008efc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f00:	2300      	movs	r3, #0
 8008f02:	2200      	movs	r2, #0
 8008f04:	2100      	movs	r1, #0
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fc8f 	bl	800982a <USBD_LL_Transmit>

  return USBD_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b082      	sub	sp, #8
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2205      	movs	r2, #5
 8008f22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f26:	2300      	movs	r3, #0
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fc9d 	bl	800986c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f40:	2200      	movs	r2, #0
 8008f42:	4912      	ldr	r1, [pc, #72]	; (8008f8c <MX_USB_DEVICE_Init+0x50>)
 8008f44:	4812      	ldr	r0, [pc, #72]	; (8008f90 <MX_USB_DEVICE_Init+0x54>)
 8008f46:	f7fe fd07 	bl	8007958 <USBD_Init>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f50:	f7f7 fd8a 	bl	8000a68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f54:	490f      	ldr	r1, [pc, #60]	; (8008f94 <MX_USB_DEVICE_Init+0x58>)
 8008f56:	480e      	ldr	r0, [pc, #56]	; (8008f90 <MX_USB_DEVICE_Init+0x54>)
 8008f58:	f7fe fd2e 	bl	80079b8 <USBD_RegisterClass>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f62:	f7f7 fd81 	bl	8000a68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f66:	490c      	ldr	r1, [pc, #48]	; (8008f98 <MX_USB_DEVICE_Init+0x5c>)
 8008f68:	4809      	ldr	r0, [pc, #36]	; (8008f90 <MX_USB_DEVICE_Init+0x54>)
 8008f6a:	f7fe fc1f 	bl	80077ac <USBD_CDC_RegisterInterface>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f74:	f7f7 fd78 	bl	8000a68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f78:	4805      	ldr	r0, [pc, #20]	; (8008f90 <MX_USB_DEVICE_Init+0x54>)
 8008f7a:	f7fe fd53 	bl	8007a24 <USBD_Start>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f84:	f7f7 fd70 	bl	8000a68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f88:	bf00      	nop
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	200000ac 	.word	0x200000ac
 8008f90:	20000274 	.word	0x20000274
 8008f94:	20000018 	.word	0x20000018
 8008f98:	20000098 	.word	0x20000098

08008f9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4905      	ldr	r1, [pc, #20]	; (8008fb8 <CDC_Init_FS+0x1c>)
 8008fa4:	4805      	ldr	r0, [pc, #20]	; (8008fbc <CDC_Init_FS+0x20>)
 8008fa6:	f7fe fc1b 	bl	80077e0 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008faa:	4905      	ldr	r1, [pc, #20]	; (8008fc0 <CDC_Init_FS+0x24>)
 8008fac:	4803      	ldr	r0, [pc, #12]	; (8008fbc <CDC_Init_FS+0x20>)
 8008fae:	f7fe fc39 	bl	8007824 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8008fb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20000950 	.word	0x20000950
 8008fbc:	20000274 	.word	0x20000274
 8008fc0:	20000550 	.word	0x20000550

08008fc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8008fc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	6039      	str	r1, [r7, #0]
 8008fde:	71fb      	strb	r3, [r7, #7]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	2b23      	cmp	r3, #35	; 0x23
 8008fe8:	d84a      	bhi.n	8009080 <CDC_Control_FS+0xac>
 8008fea:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <CDC_Control_FS+0x1c>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009081 	.word	0x08009081
 8008ff4:	08009081 	.word	0x08009081
 8008ff8:	08009081 	.word	0x08009081
 8008ffc:	08009081 	.word	0x08009081
 8009000:	08009081 	.word	0x08009081
 8009004:	08009081 	.word	0x08009081
 8009008:	08009081 	.word	0x08009081
 800900c:	08009081 	.word	0x08009081
 8009010:	08009081 	.word	0x08009081
 8009014:	08009081 	.word	0x08009081
 8009018:	08009081 	.word	0x08009081
 800901c:	08009081 	.word	0x08009081
 8009020:	08009081 	.word	0x08009081
 8009024:	08009081 	.word	0x08009081
 8009028:	08009081 	.word	0x08009081
 800902c:	08009081 	.word	0x08009081
 8009030:	08009081 	.word	0x08009081
 8009034:	08009081 	.word	0x08009081
 8009038:	08009081 	.word	0x08009081
 800903c:	08009081 	.word	0x08009081
 8009040:	08009081 	.word	0x08009081
 8009044:	08009081 	.word	0x08009081
 8009048:	08009081 	.word	0x08009081
 800904c:	08009081 	.word	0x08009081
 8009050:	08009081 	.word	0x08009081
 8009054:	08009081 	.word	0x08009081
 8009058:	08009081 	.word	0x08009081
 800905c:	08009081 	.word	0x08009081
 8009060:	08009081 	.word	0x08009081
 8009064:	08009081 	.word	0x08009081
 8009068:	08009081 	.word	0x08009081
 800906c:	08009081 	.word	0x08009081
 8009070:	08009081 	.word	0x08009081
 8009074:	08009081 	.word	0x08009081
 8009078:	08009081 	.word	0x08009081
 800907c:	08009081 	.word	0x08009081
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8009080:	bf00      	nop
    }

    return (USBD_OK);
 8009082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	4805      	ldr	r0, [pc, #20]	; (80090b4 <CDC_Receive_FS+0x24>)
 800909e:	f7fe fbc1 	bl	8007824 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090a2:	4804      	ldr	r0, [pc, #16]	; (80090b4 <CDC_Receive_FS+0x24>)
 80090a4:	f7fe fc22 	bl	80078ec <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 80090a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20000274 	.word	0x20000274

080090b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 80090c8:	4b0d      	ldr	r3, [pc, #52]	; (8009100 <CDC_Transmit_FS+0x48>)
 80090ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090ce:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 80090da:	2301      	movs	r3, #1
 80090dc:	e00b      	b.n	80090f6 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090de:	887b      	ldrh	r3, [r7, #2]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	4806      	ldr	r0, [pc, #24]	; (8009100 <CDC_Transmit_FS+0x48>)
 80090e6:	f7fe fb7b 	bl	80077e0 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090ea:	4805      	ldr	r0, [pc, #20]	; (8009100 <CDC_Transmit_FS+0x48>)
 80090ec:	f7fe fbb8 	bl	8007860 <USBD_CDC_TransmitPacket>
 80090f0:	4603      	mov	r3, r0
 80090f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000274 	.word	0x20000274

08009104 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	4613      	mov	r3, r2
 8009110:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800911a:	4618      	mov	r0, r3
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
	...

08009128 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2212      	movs	r2, #18
 8009138:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800913a:	4b03      	ldr	r3, [pc, #12]	; (8009148 <USBD_FS_DeviceDescriptor+0x20>)
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	200000c8 	.word	0x200000c8

0800914c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	6039      	str	r1, [r7, #0]
 8009156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2204      	movs	r2, #4
 800915c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800915e:	4b03      	ldr	r3, [pc, #12]	; (800916c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	200000dc 	.word	0x200000dc

08009170 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	4603      	mov	r3, r0
 8009178:	6039      	str	r1, [r7, #0]
 800917a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d105      	bne.n	800918e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	4907      	ldr	r1, [pc, #28]	; (80091a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009186:	4808      	ldr	r0, [pc, #32]	; (80091a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009188:	f7ff fdf8 	bl	8008d7c <USBD_GetString>
 800918c:	e004      	b.n	8009198 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	4904      	ldr	r1, [pc, #16]	; (80091a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009192:	4805      	ldr	r0, [pc, #20]	; (80091a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009194:	f7ff fdf2 	bl	8008d7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009198:	4b02      	ldr	r3, [pc, #8]	; (80091a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000d50 	.word	0x20000d50
 80091a8:	0800a3b8 	.word	0x0800a3b8

080091ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	6039      	str	r1, [r7, #0]
 80091b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	4904      	ldr	r1, [pc, #16]	; (80091cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091bc:	4804      	ldr	r0, [pc, #16]	; (80091d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091be:	f7ff fddd 	bl	8008d7c <USBD_GetString>
  return USBD_StrDesc;
 80091c2:	4b02      	ldr	r3, [pc, #8]	; (80091cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3708      	adds	r7, #8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20000d50 	.word	0x20000d50
 80091d0:	0800a3d0 	.word	0x0800a3d0

080091d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	221a      	movs	r2, #26
 80091e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091e6:	f000 f843 	bl	8009270 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091ea:	4b02      	ldr	r3, [pc, #8]	; (80091f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	200000e0 	.word	0x200000e0

080091f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	6039      	str	r1, [r7, #0]
 8009202:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d105      	bne.n	8009216 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	4907      	ldr	r1, [pc, #28]	; (800922c <USBD_FS_ConfigStrDescriptor+0x34>)
 800920e:	4808      	ldr	r0, [pc, #32]	; (8009230 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009210:	f7ff fdb4 	bl	8008d7c <USBD_GetString>
 8009214:	e004      	b.n	8009220 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <USBD_FS_ConfigStrDescriptor+0x34>)
 800921a:	4805      	ldr	r0, [pc, #20]	; (8009230 <USBD_FS_ConfigStrDescriptor+0x38>)
 800921c:	f7ff fdae 	bl	8008d7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009220:	4b02      	ldr	r3, [pc, #8]	; (800922c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000d50 	.word	0x20000d50
 8009230:	0800a3e4 	.word	0x0800a3e4

08009234 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d105      	bne.n	8009252 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	4907      	ldr	r1, [pc, #28]	; (8009268 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800924a:	4808      	ldr	r0, [pc, #32]	; (800926c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800924c:	f7ff fd96 	bl	8008d7c <USBD_GetString>
 8009250:	e004      	b.n	800925c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	4904      	ldr	r1, [pc, #16]	; (8009268 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009256:	4805      	ldr	r0, [pc, #20]	; (800926c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009258:	f7ff fd90 	bl	8008d7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800925c:	4b02      	ldr	r3, [pc, #8]	; (8009268 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20000d50 	.word	0x20000d50
 800926c:	0800a3f0 	.word	0x0800a3f0

08009270 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009276:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <Get_SerialNum+0x44>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800927c:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <Get_SerialNum+0x48>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009282:	4b0e      	ldr	r3, [pc, #56]	; (80092bc <Get_SerialNum+0x4c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4413      	add	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d009      	beq.n	80092aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009296:	2208      	movs	r2, #8
 8009298:	4909      	ldr	r1, [pc, #36]	; (80092c0 <Get_SerialNum+0x50>)
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f000 f814 	bl	80092c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092a0:	2204      	movs	r2, #4
 80092a2:	4908      	ldr	r1, [pc, #32]	; (80092c4 <Get_SerialNum+0x54>)
 80092a4:	68b8      	ldr	r0, [r7, #8]
 80092a6:	f000 f80f 	bl	80092c8 <IntToUnicode>
  }
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	1fff7a10 	.word	0x1fff7a10
 80092b8:	1fff7a14 	.word	0x1fff7a14
 80092bc:	1fff7a18 	.word	0x1fff7a18
 80092c0:	200000e2 	.word	0x200000e2
 80092c4:	200000f2 	.word	0x200000f2

080092c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	4613      	mov	r3, r2
 80092d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]
 80092de:	e027      	b.n	8009330 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	0f1b      	lsrs	r3, r3, #28
 80092e4:	2b09      	cmp	r3, #9
 80092e6:	d80b      	bhi.n	8009300 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	0f1b      	lsrs	r3, r3, #28
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	4619      	mov	r1, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	440b      	add	r3, r1
 80092f8:	3230      	adds	r2, #48	; 0x30
 80092fa:	b2d2      	uxtb	r2, r2
 80092fc:	701a      	strb	r2, [r3, #0]
 80092fe:	e00a      	b.n	8009316 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	0f1b      	lsrs	r3, r3, #28
 8009304:	b2da      	uxtb	r2, r3
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	4619      	mov	r1, r3
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	440b      	add	r3, r1
 8009310:	3237      	adds	r2, #55	; 0x37
 8009312:	b2d2      	uxtb	r2, r2
 8009314:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	011b      	lsls	r3, r3, #4
 800931a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	3301      	adds	r3, #1
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	4413      	add	r3, r2
 8009326:	2200      	movs	r2, #0
 8009328:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	3301      	adds	r3, #1
 800932e:	75fb      	strb	r3, [r7, #23]
 8009330:	7dfa      	ldrb	r2, [r7, #23]
 8009332:	79fb      	ldrb	r3, [r7, #7]
 8009334:	429a      	cmp	r2, r3
 8009336:	d3d3      	bcc.n	80092e0 <IntToUnicode+0x18>
  }
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
	...

08009348 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08a      	sub	sp, #40	; 0x28
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009350:	f107 0314 	add.w	r3, r7, #20
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	605a      	str	r2, [r3, #4]
 800935a:	609a      	str	r2, [r3, #8]
 800935c:	60da      	str	r2, [r3, #12]
 800935e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009368:	d13a      	bne.n	80093e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800936a:	2300      	movs	r3, #0
 800936c:	613b      	str	r3, [r7, #16]
 800936e:	4b1e      	ldr	r3, [pc, #120]	; (80093e8 <HAL_PCD_MspInit+0xa0>)
 8009370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009372:	4a1d      	ldr	r2, [pc, #116]	; (80093e8 <HAL_PCD_MspInit+0xa0>)
 8009374:	f043 0301 	orr.w	r3, r3, #1
 8009378:	6313      	str	r3, [r2, #48]	; 0x30
 800937a:	4b1b      	ldr	r3, [pc, #108]	; (80093e8 <HAL_PCD_MspInit+0xa0>)
 800937c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	613b      	str	r3, [r7, #16]
 8009384:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009386:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800938a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800938c:	2302      	movs	r3, #2
 800938e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009390:	2300      	movs	r3, #0
 8009392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009394:	2303      	movs	r3, #3
 8009396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009398:	230a      	movs	r3, #10
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800939c:	f107 0314 	add.w	r3, r7, #20
 80093a0:	4619      	mov	r1, r3
 80093a2:	4812      	ldr	r0, [pc, #72]	; (80093ec <HAL_PCD_MspInit+0xa4>)
 80093a4:	f7f8 fc5e 	bl	8001c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093a8:	4b0f      	ldr	r3, [pc, #60]	; (80093e8 <HAL_PCD_MspInit+0xa0>)
 80093aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ac:	4a0e      	ldr	r2, [pc, #56]	; (80093e8 <HAL_PCD_MspInit+0xa0>)
 80093ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093b2:	6353      	str	r3, [r2, #52]	; 0x34
 80093b4:	2300      	movs	r3, #0
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <HAL_PCD_MspInit+0xa0>)
 80093ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093bc:	4a0a      	ldr	r2, [pc, #40]	; (80093e8 <HAL_PCD_MspInit+0xa0>)
 80093be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093c2:	6453      	str	r3, [r2, #68]	; 0x44
 80093c4:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <HAL_PCD_MspInit+0xa0>)
 80093c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093d0:	2200      	movs	r2, #0
 80093d2:	2100      	movs	r1, #0
 80093d4:	2043      	movs	r0, #67	; 0x43
 80093d6:	f7f8 fa28 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093da:	2043      	movs	r0, #67	; 0x43
 80093dc:	f7f8 fa41 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093e0:	bf00      	nop
 80093e2:	3728      	adds	r7, #40	; 0x28
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	40023800 	.word	0x40023800
 80093ec:	40020000 	.word	0x40020000

080093f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009404:	4619      	mov	r1, r3
 8009406:	4610      	mov	r0, r2
 8009408:	f7fe fb59 	bl	8007abe <USBD_LL_SetupStage>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	4613      	mov	r3, r2
 800942c:	00db      	lsls	r3, r3, #3
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	78fb      	ldrb	r3, [r7, #3]
 800943c:	4619      	mov	r1, r3
 800943e:	f7fe fb93 	bl	8007b68 <USBD_LL_DataOutStage>
}
 8009442:	bf00      	nop
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800945c:	78fa      	ldrb	r2, [r7, #3]
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	4613      	mov	r3, r2
 8009462:	00db      	lsls	r3, r3, #3
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	440b      	add	r3, r1
 800946a:	334c      	adds	r3, #76	; 0x4c
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	4619      	mov	r1, r3
 8009472:	f7fe fc2c 	bl	8007cce <USBD_LL_DataInStage>
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe fd60 	bl	8007f52 <USBD_LL_SOF>
}
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094a2:	2301      	movs	r3, #1
 80094a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d001      	beq.n	80094b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094ae:	f7f7 fadb 	bl	8000a68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094b8:	7bfa      	ldrb	r2, [r7, #15]
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fd0a 	bl	8007ed6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fe fcb2 	bl	8007e32 <USBD_LL_Reset>
}
 80094ce:	bf00      	nop
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
	...

080094d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fe fd05 	bl	8007ef6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	6812      	ldr	r2, [r2, #0]
 80094fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094fe:	f043 0301 	orr.w	r3, r3, #1
 8009502:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800950c:	4b04      	ldr	r3, [pc, #16]	; (8009520 <HAL_PCD_SuspendCallback+0x48>)
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	4a03      	ldr	r2, [pc, #12]	; (8009520 <HAL_PCD_SuspendCallback+0x48>)
 8009512:	f043 0306 	orr.w	r3, r3, #6
 8009516:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	e000ed00 	.word	0xe000ed00

08009524 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe fcf5 	bl	8007f22 <USBD_LL_Resume>
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fd4d 	bl	8007ff6 <USBD_LL_IsoOUTIncomplete>
}
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	4611      	mov	r1, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe fd09 	bl	8007f92 <USBD_LL_IsoINIncomplete>
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe fd5f 	bl	800805a <USBD_LL_DevConnected>
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fd5c 	bl	8008070 <USBD_LL_DevDisconnected>
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d13c      	bne.n	800964a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80095d0:	4a20      	ldr	r2, [pc, #128]	; (8009654 <USBD_LL_Init+0x94>)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a1e      	ldr	r2, [pc, #120]	; (8009654 <USBD_LL_Init+0x94>)
 80095dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095e0:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <USBD_LL_Init+0x94>)
 80095e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80095e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80095e8:	4b1a      	ldr	r3, [pc, #104]	; (8009654 <USBD_LL_Init+0x94>)
 80095ea:	2204      	movs	r2, #4
 80095ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095ee:	4b19      	ldr	r3, [pc, #100]	; (8009654 <USBD_LL_Init+0x94>)
 80095f0:	2202      	movs	r2, #2
 80095f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095f4:	4b17      	ldr	r3, [pc, #92]	; (8009654 <USBD_LL_Init+0x94>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095fa:	4b16      	ldr	r3, [pc, #88]	; (8009654 <USBD_LL_Init+0x94>)
 80095fc:	2202      	movs	r2, #2
 80095fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009600:	4b14      	ldr	r3, [pc, #80]	; (8009654 <USBD_LL_Init+0x94>)
 8009602:	2200      	movs	r2, #0
 8009604:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009606:	4b13      	ldr	r3, [pc, #76]	; (8009654 <USBD_LL_Init+0x94>)
 8009608:	2200      	movs	r2, #0
 800960a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800960c:	4b11      	ldr	r3, [pc, #68]	; (8009654 <USBD_LL_Init+0x94>)
 800960e:	2200      	movs	r2, #0
 8009610:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009612:	4b10      	ldr	r3, [pc, #64]	; (8009654 <USBD_LL_Init+0x94>)
 8009614:	2200      	movs	r2, #0
 8009616:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009618:	4b0e      	ldr	r3, [pc, #56]	; (8009654 <USBD_LL_Init+0x94>)
 800961a:	2200      	movs	r2, #0
 800961c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800961e:	480d      	ldr	r0, [pc, #52]	; (8009654 <USBD_LL_Init+0x94>)
 8009620:	f7f9 fc63 	bl	8002eea <HAL_PCD_Init>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800962a:	f7f7 fa1d 	bl	8000a68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800962e:	2180      	movs	r1, #128	; 0x80
 8009630:	4808      	ldr	r0, [pc, #32]	; (8009654 <USBD_LL_Init+0x94>)
 8009632:	f7fa feba 	bl	80043aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009636:	2240      	movs	r2, #64	; 0x40
 8009638:	2100      	movs	r1, #0
 800963a:	4806      	ldr	r0, [pc, #24]	; (8009654 <USBD_LL_Init+0x94>)
 800963c:	f7fa fe6e 	bl	800431c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009640:	2280      	movs	r2, #128	; 0x80
 8009642:	2101      	movs	r1, #1
 8009644:	4803      	ldr	r0, [pc, #12]	; (8009654 <USBD_LL_Init+0x94>)
 8009646:	f7fa fe69 	bl	800431c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	20000f50 	.word	0x20000f50

08009658 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800966e:	4618      	mov	r0, r3
 8009670:	f7f9 fd58 	bl	8003124 <HAL_PCD_Start>
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	4618      	mov	r0, r3
 800967c:	f000 f942 	bl	8009904 <USBD_Get_USB_Status>
 8009680:	4603      	mov	r3, r0
 8009682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009684:	7bbb      	ldrb	r3, [r7, #14]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	461a      	mov	r2, r3
 800969c:	4603      	mov	r3, r0
 800969e:	70fb      	strb	r3, [r7, #3]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70bb      	strb	r3, [r7, #2]
 80096a4:	4613      	mov	r3, r2
 80096a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096b6:	78bb      	ldrb	r3, [r7, #2]
 80096b8:	883a      	ldrh	r2, [r7, #0]
 80096ba:	78f9      	ldrb	r1, [r7, #3]
 80096bc:	f7fa fa29 	bl	8003b12 <HAL_PCD_EP_Open>
 80096c0:	4603      	mov	r3, r0
 80096c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 f91c 	bl	8009904 <USBD_Get_USB_Status>
 80096cc:	4603      	mov	r3, r0
 80096ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	460b      	mov	r3, r1
 80096e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fa fa72 	bl	8003be2 <HAL_PCD_EP_Close>
 80096fe:	4603      	mov	r3, r0
 8009700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	4618      	mov	r0, r3
 8009706:	f000 f8fd 	bl	8009904 <USBD_Get_USB_Status>
 800970a:	4603      	mov	r3, r0
 800970c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009732:	78fa      	ldrb	r2, [r7, #3]
 8009734:	4611      	mov	r1, r2
 8009736:	4618      	mov	r0, r3
 8009738:	f7fa fb4a 	bl	8003dd0 <HAL_PCD_EP_SetStall>
 800973c:	4603      	mov	r3, r0
 800973e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	4618      	mov	r0, r3
 8009744:	f000 f8de 	bl	8009904 <USBD_Get_USB_Status>
 8009748:	4603      	mov	r3, r0
 800974a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800974c:	7bbb      	ldrb	r3, [r7, #14]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	460b      	mov	r3, r1
 8009760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009770:	78fa      	ldrb	r2, [r7, #3]
 8009772:	4611      	mov	r1, r2
 8009774:	4618      	mov	r0, r3
 8009776:	f7fa fb8f 	bl	8003e98 <HAL_PCD_EP_ClrStall>
 800977a:	4603      	mov	r3, r0
 800977c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	4618      	mov	r0, r3
 8009782:	f000 f8bf 	bl	8009904 <USBD_Get_USB_Status>
 8009786:	4603      	mov	r3, r0
 8009788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800978a:	7bbb      	ldrb	r3, [r7, #14]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	da0b      	bge.n	80097c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097b6:	68f9      	ldr	r1, [r7, #12]
 80097b8:	4613      	mov	r3, r2
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	440b      	add	r3, r1
 80097c2:	333e      	adds	r3, #62	; 0x3e
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	e00b      	b.n	80097e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ce:	68f9      	ldr	r1, [r7, #12]
 80097d0:	4613      	mov	r3, r2
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	4413      	add	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	440b      	add	r3, r1
 80097da:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80097de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009806:	78fa      	ldrb	r2, [r7, #3]
 8009808:	4611      	mov	r1, r2
 800980a:	4618      	mov	r0, r3
 800980c:	f7fa f95c 	bl	8003ac8 <HAL_PCD_SetAddress>
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f874 	bl	8009904 <USBD_Get_USB_Status>
 800981c:	4603      	mov	r3, r0
 800981e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009820:	7bbb      	ldrb	r3, [r7, #14]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b086      	sub	sp, #24
 800982e:	af00      	add	r7, sp, #0
 8009830:	60f8      	str	r0, [r7, #12]
 8009832:	607a      	str	r2, [r7, #4]
 8009834:	603b      	str	r3, [r7, #0]
 8009836:	460b      	mov	r3, r1
 8009838:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009848:	7af9      	ldrb	r1, [r7, #11]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	f7fa fa75 	bl	8003d3c <HAL_PCD_EP_Transmit>
 8009852:	4603      	mov	r3, r0
 8009854:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009856:	7dfb      	ldrb	r3, [r7, #23]
 8009858:	4618      	mov	r0, r3
 800985a:	f000 f853 	bl	8009904 <USBD_Get_USB_Status>
 800985e:	4603      	mov	r3, r0
 8009860:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009862:	7dbb      	ldrb	r3, [r7, #22]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	607a      	str	r2, [r7, #4]
 8009876:	603b      	str	r3, [r7, #0]
 8009878:	460b      	mov	r3, r1
 800987a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800988a:	7af9      	ldrb	r1, [r7, #11]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	f7fa f9f1 	bl	8003c76 <HAL_PCD_EP_Receive>
 8009894:	4603      	mov	r3, r0
 8009896:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f832 	bl	8009904 <USBD_Get_USB_Status>
 80098a0:	4603      	mov	r3, r0
 80098a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098c0:	78fa      	ldrb	r2, [r7, #3]
 80098c2:	4611      	mov	r1, r2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fa fa21 	bl	8003d0c <HAL_PCD_EP_GetRxCount>
 80098ca:	4603      	mov	r3, r0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098dc:	4b03      	ldr	r3, [pc, #12]	; (80098ec <USBD_static_malloc+0x18>)
}
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	2000145c 	.word	0x2000145c

080098f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]

}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	2b03      	cmp	r3, #3
 8009916:	d817      	bhi.n	8009948 <USBD_Get_USB_Status+0x44>
 8009918:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <USBD_Get_USB_Status+0x1c>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	08009931 	.word	0x08009931
 8009924:	08009937 	.word	0x08009937
 8009928:	0800993d 	.word	0x0800993d
 800992c:	08009943 	.word	0x08009943
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
    break;
 8009934:	e00b      	b.n	800994e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009936:	2303      	movs	r3, #3
 8009938:	73fb      	strb	r3, [r7, #15]
    break;
 800993a:	e008      	b.n	800994e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800993c:	2301      	movs	r3, #1
 800993e:	73fb      	strb	r3, [r7, #15]
    break;
 8009940:	e005      	b.n	800994e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009942:	2303      	movs	r3, #3
 8009944:	73fb      	strb	r3, [r7, #15]
    break;
 8009946:	e002      	b.n	800994e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009948:	2303      	movs	r3, #3
 800994a:	73fb      	strb	r3, [r7, #15]
    break;
 800994c:	bf00      	nop
  }
  return usb_status;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <malloc>:
 800995c:	4b02      	ldr	r3, [pc, #8]	; (8009968 <malloc+0xc>)
 800995e:	4601      	mov	r1, r0
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	f000 b82b 	b.w	80099bc <_malloc_r>
 8009966:	bf00      	nop
 8009968:	20000148 	.word	0x20000148

0800996c <free>:
 800996c:	4b02      	ldr	r3, [pc, #8]	; (8009978 <free+0xc>)
 800996e:	4601      	mov	r1, r0
 8009970:	6818      	ldr	r0, [r3, #0]
 8009972:	f000 b913 	b.w	8009b9c <_free_r>
 8009976:	bf00      	nop
 8009978:	20000148 	.word	0x20000148

0800997c <sbrk_aligned>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	4e0e      	ldr	r6, [pc, #56]	; (80099b8 <sbrk_aligned+0x3c>)
 8009980:	460c      	mov	r4, r1
 8009982:	6831      	ldr	r1, [r6, #0]
 8009984:	4605      	mov	r5, r0
 8009986:	b911      	cbnz	r1, 800998e <sbrk_aligned+0x12>
 8009988:	f000 f8cc 	bl	8009b24 <_sbrk_r>
 800998c:	6030      	str	r0, [r6, #0]
 800998e:	4621      	mov	r1, r4
 8009990:	4628      	mov	r0, r5
 8009992:	f000 f8c7 	bl	8009b24 <_sbrk_r>
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	d00a      	beq.n	80099b0 <sbrk_aligned+0x34>
 800999a:	1cc4      	adds	r4, r0, #3
 800999c:	f024 0403 	bic.w	r4, r4, #3
 80099a0:	42a0      	cmp	r0, r4
 80099a2:	d007      	beq.n	80099b4 <sbrk_aligned+0x38>
 80099a4:	1a21      	subs	r1, r4, r0
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f8bc 	bl	8009b24 <_sbrk_r>
 80099ac:	3001      	adds	r0, #1
 80099ae:	d101      	bne.n	80099b4 <sbrk_aligned+0x38>
 80099b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80099b4:	4620      	mov	r0, r4
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	20001680 	.word	0x20001680

080099bc <_malloc_r>:
 80099bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c0:	1ccd      	adds	r5, r1, #3
 80099c2:	f025 0503 	bic.w	r5, r5, #3
 80099c6:	3508      	adds	r5, #8
 80099c8:	2d0c      	cmp	r5, #12
 80099ca:	bf38      	it	cc
 80099cc:	250c      	movcc	r5, #12
 80099ce:	2d00      	cmp	r5, #0
 80099d0:	4607      	mov	r7, r0
 80099d2:	db01      	blt.n	80099d8 <_malloc_r+0x1c>
 80099d4:	42a9      	cmp	r1, r5
 80099d6:	d905      	bls.n	80099e4 <_malloc_r+0x28>
 80099d8:	230c      	movs	r3, #12
 80099da:	603b      	str	r3, [r7, #0]
 80099dc:	2600      	movs	r6, #0
 80099de:	4630      	mov	r0, r6
 80099e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ab8 <_malloc_r+0xfc>
 80099e8:	f000 f868 	bl	8009abc <__malloc_lock>
 80099ec:	f8d8 3000 	ldr.w	r3, [r8]
 80099f0:	461c      	mov	r4, r3
 80099f2:	bb5c      	cbnz	r4, 8009a4c <_malloc_r+0x90>
 80099f4:	4629      	mov	r1, r5
 80099f6:	4638      	mov	r0, r7
 80099f8:	f7ff ffc0 	bl	800997c <sbrk_aligned>
 80099fc:	1c43      	adds	r3, r0, #1
 80099fe:	4604      	mov	r4, r0
 8009a00:	d155      	bne.n	8009aae <_malloc_r+0xf2>
 8009a02:	f8d8 4000 	ldr.w	r4, [r8]
 8009a06:	4626      	mov	r6, r4
 8009a08:	2e00      	cmp	r6, #0
 8009a0a:	d145      	bne.n	8009a98 <_malloc_r+0xdc>
 8009a0c:	2c00      	cmp	r4, #0
 8009a0e:	d048      	beq.n	8009aa2 <_malloc_r+0xe6>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	4631      	mov	r1, r6
 8009a14:	4638      	mov	r0, r7
 8009a16:	eb04 0903 	add.w	r9, r4, r3
 8009a1a:	f000 f883 	bl	8009b24 <_sbrk_r>
 8009a1e:	4581      	cmp	r9, r0
 8009a20:	d13f      	bne.n	8009aa2 <_malloc_r+0xe6>
 8009a22:	6821      	ldr	r1, [r4, #0]
 8009a24:	1a6d      	subs	r5, r5, r1
 8009a26:	4629      	mov	r1, r5
 8009a28:	4638      	mov	r0, r7
 8009a2a:	f7ff ffa7 	bl	800997c <sbrk_aligned>
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d037      	beq.n	8009aa2 <_malloc_r+0xe6>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	442b      	add	r3, r5
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	f8d8 3000 	ldr.w	r3, [r8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d038      	beq.n	8009ab2 <_malloc_r+0xf6>
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	42a2      	cmp	r2, r4
 8009a44:	d12b      	bne.n	8009a9e <_malloc_r+0xe2>
 8009a46:	2200      	movs	r2, #0
 8009a48:	605a      	str	r2, [r3, #4]
 8009a4a:	e00f      	b.n	8009a6c <_malloc_r+0xb0>
 8009a4c:	6822      	ldr	r2, [r4, #0]
 8009a4e:	1b52      	subs	r2, r2, r5
 8009a50:	d41f      	bmi.n	8009a92 <_malloc_r+0xd6>
 8009a52:	2a0b      	cmp	r2, #11
 8009a54:	d917      	bls.n	8009a86 <_malloc_r+0xca>
 8009a56:	1961      	adds	r1, r4, r5
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	6025      	str	r5, [r4, #0]
 8009a5c:	bf18      	it	ne
 8009a5e:	6059      	strne	r1, [r3, #4]
 8009a60:	6863      	ldr	r3, [r4, #4]
 8009a62:	bf08      	it	eq
 8009a64:	f8c8 1000 	streq.w	r1, [r8]
 8009a68:	5162      	str	r2, [r4, r5]
 8009a6a:	604b      	str	r3, [r1, #4]
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f104 060b 	add.w	r6, r4, #11
 8009a72:	f000 f829 	bl	8009ac8 <__malloc_unlock>
 8009a76:	f026 0607 	bic.w	r6, r6, #7
 8009a7a:	1d23      	adds	r3, r4, #4
 8009a7c:	1af2      	subs	r2, r6, r3
 8009a7e:	d0ae      	beq.n	80099de <_malloc_r+0x22>
 8009a80:	1b9b      	subs	r3, r3, r6
 8009a82:	50a3      	str	r3, [r4, r2]
 8009a84:	e7ab      	b.n	80099de <_malloc_r+0x22>
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	6862      	ldr	r2, [r4, #4]
 8009a8a:	d1dd      	bne.n	8009a48 <_malloc_r+0x8c>
 8009a8c:	f8c8 2000 	str.w	r2, [r8]
 8009a90:	e7ec      	b.n	8009a6c <_malloc_r+0xb0>
 8009a92:	4623      	mov	r3, r4
 8009a94:	6864      	ldr	r4, [r4, #4]
 8009a96:	e7ac      	b.n	80099f2 <_malloc_r+0x36>
 8009a98:	4634      	mov	r4, r6
 8009a9a:	6876      	ldr	r6, [r6, #4]
 8009a9c:	e7b4      	b.n	8009a08 <_malloc_r+0x4c>
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	e7cc      	b.n	8009a3c <_malloc_r+0x80>
 8009aa2:	230c      	movs	r3, #12
 8009aa4:	603b      	str	r3, [r7, #0]
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f000 f80e 	bl	8009ac8 <__malloc_unlock>
 8009aac:	e797      	b.n	80099de <_malloc_r+0x22>
 8009aae:	6025      	str	r5, [r4, #0]
 8009ab0:	e7dc      	b.n	8009a6c <_malloc_r+0xb0>
 8009ab2:	605b      	str	r3, [r3, #4]
 8009ab4:	deff      	udf	#255	; 0xff
 8009ab6:	bf00      	nop
 8009ab8:	2000167c 	.word	0x2000167c

08009abc <__malloc_lock>:
 8009abc:	4801      	ldr	r0, [pc, #4]	; (8009ac4 <__malloc_lock+0x8>)
 8009abe:	f000 b86b 	b.w	8009b98 <__retarget_lock_acquire_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	200017c0 	.word	0x200017c0

08009ac8 <__malloc_unlock>:
 8009ac8:	4801      	ldr	r0, [pc, #4]	; (8009ad0 <__malloc_unlock+0x8>)
 8009aca:	f000 b866 	b.w	8009b9a <__retarget_lock_release_recursive>
 8009ace:	bf00      	nop
 8009ad0:	200017c0 	.word	0x200017c0

08009ad4 <siprintf>:
 8009ad4:	b40e      	push	{r1, r2, r3}
 8009ad6:	b500      	push	{lr}
 8009ad8:	b09c      	sub	sp, #112	; 0x70
 8009ada:	ab1d      	add	r3, sp, #116	; 0x74
 8009adc:	9002      	str	r0, [sp, #8]
 8009ade:	9006      	str	r0, [sp, #24]
 8009ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ae4:	4809      	ldr	r0, [pc, #36]	; (8009b0c <siprintf+0x38>)
 8009ae6:	9107      	str	r1, [sp, #28]
 8009ae8:	9104      	str	r1, [sp, #16]
 8009aea:	4909      	ldr	r1, [pc, #36]	; (8009b10 <siprintf+0x3c>)
 8009aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af0:	9105      	str	r1, [sp, #20]
 8009af2:	6800      	ldr	r0, [r0, #0]
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	a902      	add	r1, sp, #8
 8009af8:	f000 f8f6 	bl	8009ce8 <_svfiprintf_r>
 8009afc:	9b02      	ldr	r3, [sp, #8]
 8009afe:	2200      	movs	r2, #0
 8009b00:	701a      	strb	r2, [r3, #0]
 8009b02:	b01c      	add	sp, #112	; 0x70
 8009b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b08:	b003      	add	sp, #12
 8009b0a:	4770      	bx	lr
 8009b0c:	20000148 	.word	0x20000148
 8009b10:	ffff0208 	.word	0xffff0208

08009b14 <memset>:
 8009b14:	4402      	add	r2, r0
 8009b16:	4603      	mov	r3, r0
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d100      	bne.n	8009b1e <memset+0xa>
 8009b1c:	4770      	bx	lr
 8009b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b22:	e7f9      	b.n	8009b18 <memset+0x4>

08009b24 <_sbrk_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d06      	ldr	r5, [pc, #24]	; (8009b40 <_sbrk_r+0x1c>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	602b      	str	r3, [r5, #0]
 8009b30:	f7f7 f8c0 	bl	8000cb4 <_sbrk>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_sbrk_r+0x1a>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_sbrk_r+0x1a>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	200017bc 	.word	0x200017bc

08009b44 <__errno>:
 8009b44:	4b01      	ldr	r3, [pc, #4]	; (8009b4c <__errno+0x8>)
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	20000148 	.word	0x20000148

08009b50 <__libc_init_array>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	4d0d      	ldr	r5, [pc, #52]	; (8009b88 <__libc_init_array+0x38>)
 8009b54:	4c0d      	ldr	r4, [pc, #52]	; (8009b8c <__libc_init_array+0x3c>)
 8009b56:	1b64      	subs	r4, r4, r5
 8009b58:	10a4      	asrs	r4, r4, #2
 8009b5a:	2600      	movs	r6, #0
 8009b5c:	42a6      	cmp	r6, r4
 8009b5e:	d109      	bne.n	8009b74 <__libc_init_array+0x24>
 8009b60:	4d0b      	ldr	r5, [pc, #44]	; (8009b90 <__libc_init_array+0x40>)
 8009b62:	4c0c      	ldr	r4, [pc, #48]	; (8009b94 <__libc_init_array+0x44>)
 8009b64:	f000 fbae 	bl	800a2c4 <_init>
 8009b68:	1b64      	subs	r4, r4, r5
 8009b6a:	10a4      	asrs	r4, r4, #2
 8009b6c:	2600      	movs	r6, #0
 8009b6e:	42a6      	cmp	r6, r4
 8009b70:	d105      	bne.n	8009b7e <__libc_init_array+0x2e>
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b78:	4798      	blx	r3
 8009b7a:	3601      	adds	r6, #1
 8009b7c:	e7ee      	b.n	8009b5c <__libc_init_array+0xc>
 8009b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b82:	4798      	blx	r3
 8009b84:	3601      	adds	r6, #1
 8009b86:	e7f2      	b.n	8009b6e <__libc_init_array+0x1e>
 8009b88:	0800a45c 	.word	0x0800a45c
 8009b8c:	0800a45c 	.word	0x0800a45c
 8009b90:	0800a45c 	.word	0x0800a45c
 8009b94:	0800a460 	.word	0x0800a460

08009b98 <__retarget_lock_acquire_recursive>:
 8009b98:	4770      	bx	lr

08009b9a <__retarget_lock_release_recursive>:
 8009b9a:	4770      	bx	lr

08009b9c <_free_r>:
 8009b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b9e:	2900      	cmp	r1, #0
 8009ba0:	d044      	beq.n	8009c2c <_free_r+0x90>
 8009ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba6:	9001      	str	r0, [sp, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f1a1 0404 	sub.w	r4, r1, #4
 8009bae:	bfb8      	it	lt
 8009bb0:	18e4      	addlt	r4, r4, r3
 8009bb2:	f7ff ff83 	bl	8009abc <__malloc_lock>
 8009bb6:	4a1e      	ldr	r2, [pc, #120]	; (8009c30 <_free_r+0x94>)
 8009bb8:	9801      	ldr	r0, [sp, #4]
 8009bba:	6813      	ldr	r3, [r2, #0]
 8009bbc:	b933      	cbnz	r3, 8009bcc <_free_r+0x30>
 8009bbe:	6063      	str	r3, [r4, #4]
 8009bc0:	6014      	str	r4, [r2, #0]
 8009bc2:	b003      	add	sp, #12
 8009bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bc8:	f7ff bf7e 	b.w	8009ac8 <__malloc_unlock>
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	d908      	bls.n	8009be2 <_free_r+0x46>
 8009bd0:	6825      	ldr	r5, [r4, #0]
 8009bd2:	1961      	adds	r1, r4, r5
 8009bd4:	428b      	cmp	r3, r1
 8009bd6:	bf01      	itttt	eq
 8009bd8:	6819      	ldreq	r1, [r3, #0]
 8009bda:	685b      	ldreq	r3, [r3, #4]
 8009bdc:	1949      	addeq	r1, r1, r5
 8009bde:	6021      	streq	r1, [r4, #0]
 8009be0:	e7ed      	b.n	8009bbe <_free_r+0x22>
 8009be2:	461a      	mov	r2, r3
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	b10b      	cbz	r3, 8009bec <_free_r+0x50>
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	d9fa      	bls.n	8009be2 <_free_r+0x46>
 8009bec:	6811      	ldr	r1, [r2, #0]
 8009bee:	1855      	adds	r5, r2, r1
 8009bf0:	42a5      	cmp	r5, r4
 8009bf2:	d10b      	bne.n	8009c0c <_free_r+0x70>
 8009bf4:	6824      	ldr	r4, [r4, #0]
 8009bf6:	4421      	add	r1, r4
 8009bf8:	1854      	adds	r4, r2, r1
 8009bfa:	42a3      	cmp	r3, r4
 8009bfc:	6011      	str	r1, [r2, #0]
 8009bfe:	d1e0      	bne.n	8009bc2 <_free_r+0x26>
 8009c00:	681c      	ldr	r4, [r3, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	6053      	str	r3, [r2, #4]
 8009c06:	440c      	add	r4, r1
 8009c08:	6014      	str	r4, [r2, #0]
 8009c0a:	e7da      	b.n	8009bc2 <_free_r+0x26>
 8009c0c:	d902      	bls.n	8009c14 <_free_r+0x78>
 8009c0e:	230c      	movs	r3, #12
 8009c10:	6003      	str	r3, [r0, #0]
 8009c12:	e7d6      	b.n	8009bc2 <_free_r+0x26>
 8009c14:	6825      	ldr	r5, [r4, #0]
 8009c16:	1961      	adds	r1, r4, r5
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	bf04      	itt	eq
 8009c1c:	6819      	ldreq	r1, [r3, #0]
 8009c1e:	685b      	ldreq	r3, [r3, #4]
 8009c20:	6063      	str	r3, [r4, #4]
 8009c22:	bf04      	itt	eq
 8009c24:	1949      	addeq	r1, r1, r5
 8009c26:	6021      	streq	r1, [r4, #0]
 8009c28:	6054      	str	r4, [r2, #4]
 8009c2a:	e7ca      	b.n	8009bc2 <_free_r+0x26>
 8009c2c:	b003      	add	sp, #12
 8009c2e:	bd30      	pop	{r4, r5, pc}
 8009c30:	2000167c 	.word	0x2000167c

08009c34 <__ssputs_r>:
 8009c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c38:	688e      	ldr	r6, [r1, #8]
 8009c3a:	461f      	mov	r7, r3
 8009c3c:	42be      	cmp	r6, r7
 8009c3e:	680b      	ldr	r3, [r1, #0]
 8009c40:	4682      	mov	sl, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	4690      	mov	r8, r2
 8009c46:	d82c      	bhi.n	8009ca2 <__ssputs_r+0x6e>
 8009c48:	898a      	ldrh	r2, [r1, #12]
 8009c4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c4e:	d026      	beq.n	8009c9e <__ssputs_r+0x6a>
 8009c50:	6965      	ldr	r5, [r4, #20]
 8009c52:	6909      	ldr	r1, [r1, #16]
 8009c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c58:	eba3 0901 	sub.w	r9, r3, r1
 8009c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c60:	1c7b      	adds	r3, r7, #1
 8009c62:	444b      	add	r3, r9
 8009c64:	106d      	asrs	r5, r5, #1
 8009c66:	429d      	cmp	r5, r3
 8009c68:	bf38      	it	cc
 8009c6a:	461d      	movcc	r5, r3
 8009c6c:	0553      	lsls	r3, r2, #21
 8009c6e:	d527      	bpl.n	8009cc0 <__ssputs_r+0x8c>
 8009c70:	4629      	mov	r1, r5
 8009c72:	f7ff fea3 	bl	80099bc <_malloc_r>
 8009c76:	4606      	mov	r6, r0
 8009c78:	b360      	cbz	r0, 8009cd4 <__ssputs_r+0xa0>
 8009c7a:	6921      	ldr	r1, [r4, #16]
 8009c7c:	464a      	mov	r2, r9
 8009c7e:	f000 fadb 	bl	800a238 <memcpy>
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	6126      	str	r6, [r4, #16]
 8009c90:	6165      	str	r5, [r4, #20]
 8009c92:	444e      	add	r6, r9
 8009c94:	eba5 0509 	sub.w	r5, r5, r9
 8009c98:	6026      	str	r6, [r4, #0]
 8009c9a:	60a5      	str	r5, [r4, #8]
 8009c9c:	463e      	mov	r6, r7
 8009c9e:	42be      	cmp	r6, r7
 8009ca0:	d900      	bls.n	8009ca4 <__ssputs_r+0x70>
 8009ca2:	463e      	mov	r6, r7
 8009ca4:	6820      	ldr	r0, [r4, #0]
 8009ca6:	4632      	mov	r2, r6
 8009ca8:	4641      	mov	r1, r8
 8009caa:	f000 faab 	bl	800a204 <memmove>
 8009cae:	68a3      	ldr	r3, [r4, #8]
 8009cb0:	1b9b      	subs	r3, r3, r6
 8009cb2:	60a3      	str	r3, [r4, #8]
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	4433      	add	r3, r6
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	2000      	movs	r0, #0
 8009cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	f000 fac7 	bl	800a254 <_realloc_r>
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d1e0      	bne.n	8009c8e <__ssputs_r+0x5a>
 8009ccc:	6921      	ldr	r1, [r4, #16]
 8009cce:	4650      	mov	r0, sl
 8009cd0:	f7ff ff64 	bl	8009b9c <_free_r>
 8009cd4:	230c      	movs	r3, #12
 8009cd6:	f8ca 3000 	str.w	r3, [sl]
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ce6:	e7e9      	b.n	8009cbc <__ssputs_r+0x88>

08009ce8 <_svfiprintf_r>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	4698      	mov	r8, r3
 8009cee:	898b      	ldrh	r3, [r1, #12]
 8009cf0:	061b      	lsls	r3, r3, #24
 8009cf2:	b09d      	sub	sp, #116	; 0x74
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	460d      	mov	r5, r1
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	d50e      	bpl.n	8009d1a <_svfiprintf_r+0x32>
 8009cfc:	690b      	ldr	r3, [r1, #16]
 8009cfe:	b963      	cbnz	r3, 8009d1a <_svfiprintf_r+0x32>
 8009d00:	2140      	movs	r1, #64	; 0x40
 8009d02:	f7ff fe5b 	bl	80099bc <_malloc_r>
 8009d06:	6028      	str	r0, [r5, #0]
 8009d08:	6128      	str	r0, [r5, #16]
 8009d0a:	b920      	cbnz	r0, 8009d16 <_svfiprintf_r+0x2e>
 8009d0c:	230c      	movs	r3, #12
 8009d0e:	603b      	str	r3, [r7, #0]
 8009d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d14:	e0d0      	b.n	8009eb8 <_svfiprintf_r+0x1d0>
 8009d16:	2340      	movs	r3, #64	; 0x40
 8009d18:	616b      	str	r3, [r5, #20]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d1e:	2320      	movs	r3, #32
 8009d20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d28:	2330      	movs	r3, #48	; 0x30
 8009d2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ed0 <_svfiprintf_r+0x1e8>
 8009d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d32:	f04f 0901 	mov.w	r9, #1
 8009d36:	4623      	mov	r3, r4
 8009d38:	469a      	mov	sl, r3
 8009d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3e:	b10a      	cbz	r2, 8009d44 <_svfiprintf_r+0x5c>
 8009d40:	2a25      	cmp	r2, #37	; 0x25
 8009d42:	d1f9      	bne.n	8009d38 <_svfiprintf_r+0x50>
 8009d44:	ebba 0b04 	subs.w	fp, sl, r4
 8009d48:	d00b      	beq.n	8009d62 <_svfiprintf_r+0x7a>
 8009d4a:	465b      	mov	r3, fp
 8009d4c:	4622      	mov	r2, r4
 8009d4e:	4629      	mov	r1, r5
 8009d50:	4638      	mov	r0, r7
 8009d52:	f7ff ff6f 	bl	8009c34 <__ssputs_r>
 8009d56:	3001      	adds	r0, #1
 8009d58:	f000 80a9 	beq.w	8009eae <_svfiprintf_r+0x1c6>
 8009d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d5e:	445a      	add	r2, fp
 8009d60:	9209      	str	r2, [sp, #36]	; 0x24
 8009d62:	f89a 3000 	ldrb.w	r3, [sl]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 80a1 	beq.w	8009eae <_svfiprintf_r+0x1c6>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d76:	f10a 0a01 	add.w	sl, sl, #1
 8009d7a:	9304      	str	r3, [sp, #16]
 8009d7c:	9307      	str	r3, [sp, #28]
 8009d7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d82:	931a      	str	r3, [sp, #104]	; 0x68
 8009d84:	4654      	mov	r4, sl
 8009d86:	2205      	movs	r2, #5
 8009d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8c:	4850      	ldr	r0, [pc, #320]	; (8009ed0 <_svfiprintf_r+0x1e8>)
 8009d8e:	f7f6 fa2f 	bl	80001f0 <memchr>
 8009d92:	9a04      	ldr	r2, [sp, #16]
 8009d94:	b9d8      	cbnz	r0, 8009dce <_svfiprintf_r+0xe6>
 8009d96:	06d0      	lsls	r0, r2, #27
 8009d98:	bf44      	itt	mi
 8009d9a:	2320      	movmi	r3, #32
 8009d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009da0:	0711      	lsls	r1, r2, #28
 8009da2:	bf44      	itt	mi
 8009da4:	232b      	movmi	r3, #43	; 0x2b
 8009da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009daa:	f89a 3000 	ldrb.w	r3, [sl]
 8009dae:	2b2a      	cmp	r3, #42	; 0x2a
 8009db0:	d015      	beq.n	8009dde <_svfiprintf_r+0xf6>
 8009db2:	9a07      	ldr	r2, [sp, #28]
 8009db4:	4654      	mov	r4, sl
 8009db6:	2000      	movs	r0, #0
 8009db8:	f04f 0c0a 	mov.w	ip, #10
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc2:	3b30      	subs	r3, #48	; 0x30
 8009dc4:	2b09      	cmp	r3, #9
 8009dc6:	d94d      	bls.n	8009e64 <_svfiprintf_r+0x17c>
 8009dc8:	b1b0      	cbz	r0, 8009df8 <_svfiprintf_r+0x110>
 8009dca:	9207      	str	r2, [sp, #28]
 8009dcc:	e014      	b.n	8009df8 <_svfiprintf_r+0x110>
 8009dce:	eba0 0308 	sub.w	r3, r0, r8
 8009dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	46a2      	mov	sl, r4
 8009ddc:	e7d2      	b.n	8009d84 <_svfiprintf_r+0x9c>
 8009dde:	9b03      	ldr	r3, [sp, #12]
 8009de0:	1d19      	adds	r1, r3, #4
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	9103      	str	r1, [sp, #12]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	bfbb      	ittet	lt
 8009dea:	425b      	neglt	r3, r3
 8009dec:	f042 0202 	orrlt.w	r2, r2, #2
 8009df0:	9307      	strge	r3, [sp, #28]
 8009df2:	9307      	strlt	r3, [sp, #28]
 8009df4:	bfb8      	it	lt
 8009df6:	9204      	strlt	r2, [sp, #16]
 8009df8:	7823      	ldrb	r3, [r4, #0]
 8009dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8009dfc:	d10c      	bne.n	8009e18 <_svfiprintf_r+0x130>
 8009dfe:	7863      	ldrb	r3, [r4, #1]
 8009e00:	2b2a      	cmp	r3, #42	; 0x2a
 8009e02:	d134      	bne.n	8009e6e <_svfiprintf_r+0x186>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	1d1a      	adds	r2, r3, #4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	9203      	str	r2, [sp, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	bfb8      	it	lt
 8009e10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e14:	3402      	adds	r4, #2
 8009e16:	9305      	str	r3, [sp, #20]
 8009e18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ee0 <_svfiprintf_r+0x1f8>
 8009e1c:	7821      	ldrb	r1, [r4, #0]
 8009e1e:	2203      	movs	r2, #3
 8009e20:	4650      	mov	r0, sl
 8009e22:	f7f6 f9e5 	bl	80001f0 <memchr>
 8009e26:	b138      	cbz	r0, 8009e38 <_svfiprintf_r+0x150>
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	eba0 000a 	sub.w	r0, r0, sl
 8009e2e:	2240      	movs	r2, #64	; 0x40
 8009e30:	4082      	lsls	r2, r0
 8009e32:	4313      	orrs	r3, r2
 8009e34:	3401      	adds	r4, #1
 8009e36:	9304      	str	r3, [sp, #16]
 8009e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3c:	4825      	ldr	r0, [pc, #148]	; (8009ed4 <_svfiprintf_r+0x1ec>)
 8009e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e42:	2206      	movs	r2, #6
 8009e44:	f7f6 f9d4 	bl	80001f0 <memchr>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d038      	beq.n	8009ebe <_svfiprintf_r+0x1d6>
 8009e4c:	4b22      	ldr	r3, [pc, #136]	; (8009ed8 <_svfiprintf_r+0x1f0>)
 8009e4e:	bb1b      	cbnz	r3, 8009e98 <_svfiprintf_r+0x1b0>
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	3307      	adds	r3, #7
 8009e54:	f023 0307 	bic.w	r3, r3, #7
 8009e58:	3308      	adds	r3, #8
 8009e5a:	9303      	str	r3, [sp, #12]
 8009e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5e:	4433      	add	r3, r6
 8009e60:	9309      	str	r3, [sp, #36]	; 0x24
 8009e62:	e768      	b.n	8009d36 <_svfiprintf_r+0x4e>
 8009e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e68:	460c      	mov	r4, r1
 8009e6a:	2001      	movs	r0, #1
 8009e6c:	e7a6      	b.n	8009dbc <_svfiprintf_r+0xd4>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	3401      	adds	r4, #1
 8009e72:	9305      	str	r3, [sp, #20]
 8009e74:	4619      	mov	r1, r3
 8009e76:	f04f 0c0a 	mov.w	ip, #10
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e80:	3a30      	subs	r2, #48	; 0x30
 8009e82:	2a09      	cmp	r2, #9
 8009e84:	d903      	bls.n	8009e8e <_svfiprintf_r+0x1a6>
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d0c6      	beq.n	8009e18 <_svfiprintf_r+0x130>
 8009e8a:	9105      	str	r1, [sp, #20]
 8009e8c:	e7c4      	b.n	8009e18 <_svfiprintf_r+0x130>
 8009e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e92:	4604      	mov	r4, r0
 8009e94:	2301      	movs	r3, #1
 8009e96:	e7f0      	b.n	8009e7a <_svfiprintf_r+0x192>
 8009e98:	ab03      	add	r3, sp, #12
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	4b0f      	ldr	r3, [pc, #60]	; (8009edc <_svfiprintf_r+0x1f4>)
 8009ea0:	a904      	add	r1, sp, #16
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	f3af 8000 	nop.w
 8009ea8:	1c42      	adds	r2, r0, #1
 8009eaa:	4606      	mov	r6, r0
 8009eac:	d1d6      	bne.n	8009e5c <_svfiprintf_r+0x174>
 8009eae:	89ab      	ldrh	r3, [r5, #12]
 8009eb0:	065b      	lsls	r3, r3, #25
 8009eb2:	f53f af2d 	bmi.w	8009d10 <_svfiprintf_r+0x28>
 8009eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eb8:	b01d      	add	sp, #116	; 0x74
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	ab03      	add	r3, sp, #12
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	462a      	mov	r2, r5
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <_svfiprintf_r+0x1f4>)
 8009ec6:	a904      	add	r1, sp, #16
 8009ec8:	4638      	mov	r0, r7
 8009eca:	f000 f879 	bl	8009fc0 <_printf_i>
 8009ece:	e7eb      	b.n	8009ea8 <_svfiprintf_r+0x1c0>
 8009ed0:	0800a420 	.word	0x0800a420
 8009ed4:	0800a42a 	.word	0x0800a42a
 8009ed8:	00000000 	.word	0x00000000
 8009edc:	08009c35 	.word	0x08009c35
 8009ee0:	0800a426 	.word	0x0800a426

08009ee4 <_printf_common>:
 8009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	4616      	mov	r6, r2
 8009eea:	4699      	mov	r9, r3
 8009eec:	688a      	ldr	r2, [r1, #8]
 8009eee:	690b      	ldr	r3, [r1, #16]
 8009ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	bfb8      	it	lt
 8009ef8:	4613      	movlt	r3, r2
 8009efa:	6033      	str	r3, [r6, #0]
 8009efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f00:	4607      	mov	r7, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	b10a      	cbz	r2, 8009f0a <_printf_common+0x26>
 8009f06:	3301      	adds	r3, #1
 8009f08:	6033      	str	r3, [r6, #0]
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	0699      	lsls	r1, r3, #26
 8009f0e:	bf42      	ittt	mi
 8009f10:	6833      	ldrmi	r3, [r6, #0]
 8009f12:	3302      	addmi	r3, #2
 8009f14:	6033      	strmi	r3, [r6, #0]
 8009f16:	6825      	ldr	r5, [r4, #0]
 8009f18:	f015 0506 	ands.w	r5, r5, #6
 8009f1c:	d106      	bne.n	8009f2c <_printf_common+0x48>
 8009f1e:	f104 0a19 	add.w	sl, r4, #25
 8009f22:	68e3      	ldr	r3, [r4, #12]
 8009f24:	6832      	ldr	r2, [r6, #0]
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dc26      	bgt.n	8009f7a <_printf_common+0x96>
 8009f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f30:	1e13      	subs	r3, r2, #0
 8009f32:	6822      	ldr	r2, [r4, #0]
 8009f34:	bf18      	it	ne
 8009f36:	2301      	movne	r3, #1
 8009f38:	0692      	lsls	r2, r2, #26
 8009f3a:	d42b      	bmi.n	8009f94 <_printf_common+0xb0>
 8009f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f40:	4649      	mov	r1, r9
 8009f42:	4638      	mov	r0, r7
 8009f44:	47c0      	blx	r8
 8009f46:	3001      	adds	r0, #1
 8009f48:	d01e      	beq.n	8009f88 <_printf_common+0xa4>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	6922      	ldr	r2, [r4, #16]
 8009f4e:	f003 0306 	and.w	r3, r3, #6
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	bf02      	ittt	eq
 8009f56:	68e5      	ldreq	r5, [r4, #12]
 8009f58:	6833      	ldreq	r3, [r6, #0]
 8009f5a:	1aed      	subeq	r5, r5, r3
 8009f5c:	68a3      	ldr	r3, [r4, #8]
 8009f5e:	bf0c      	ite	eq
 8009f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f64:	2500      	movne	r5, #0
 8009f66:	4293      	cmp	r3, r2
 8009f68:	bfc4      	itt	gt
 8009f6a:	1a9b      	subgt	r3, r3, r2
 8009f6c:	18ed      	addgt	r5, r5, r3
 8009f6e:	2600      	movs	r6, #0
 8009f70:	341a      	adds	r4, #26
 8009f72:	42b5      	cmp	r5, r6
 8009f74:	d11a      	bne.n	8009fac <_printf_common+0xc8>
 8009f76:	2000      	movs	r0, #0
 8009f78:	e008      	b.n	8009f8c <_printf_common+0xa8>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4652      	mov	r2, sl
 8009f7e:	4649      	mov	r1, r9
 8009f80:	4638      	mov	r0, r7
 8009f82:	47c0      	blx	r8
 8009f84:	3001      	adds	r0, #1
 8009f86:	d103      	bne.n	8009f90 <_printf_common+0xac>
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f90:	3501      	adds	r5, #1
 8009f92:	e7c6      	b.n	8009f22 <_printf_common+0x3e>
 8009f94:	18e1      	adds	r1, r4, r3
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	2030      	movs	r0, #48	; 0x30
 8009f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f9e:	4422      	add	r2, r4
 8009fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fa8:	3302      	adds	r3, #2
 8009faa:	e7c7      	b.n	8009f3c <_printf_common+0x58>
 8009fac:	2301      	movs	r3, #1
 8009fae:	4622      	mov	r2, r4
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	47c0      	blx	r8
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	d0e6      	beq.n	8009f88 <_printf_common+0xa4>
 8009fba:	3601      	adds	r6, #1
 8009fbc:	e7d9      	b.n	8009f72 <_printf_common+0x8e>
	...

08009fc0 <_printf_i>:
 8009fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc4:	7e0f      	ldrb	r7, [r1, #24]
 8009fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fc8:	2f78      	cmp	r7, #120	; 0x78
 8009fca:	4691      	mov	r9, r2
 8009fcc:	4680      	mov	r8, r0
 8009fce:	460c      	mov	r4, r1
 8009fd0:	469a      	mov	sl, r3
 8009fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fd6:	d807      	bhi.n	8009fe8 <_printf_i+0x28>
 8009fd8:	2f62      	cmp	r7, #98	; 0x62
 8009fda:	d80a      	bhi.n	8009ff2 <_printf_i+0x32>
 8009fdc:	2f00      	cmp	r7, #0
 8009fde:	f000 80d4 	beq.w	800a18a <_printf_i+0x1ca>
 8009fe2:	2f58      	cmp	r7, #88	; 0x58
 8009fe4:	f000 80c0 	beq.w	800a168 <_printf_i+0x1a8>
 8009fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ff0:	e03a      	b.n	800a068 <_printf_i+0xa8>
 8009ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ff6:	2b15      	cmp	r3, #21
 8009ff8:	d8f6      	bhi.n	8009fe8 <_printf_i+0x28>
 8009ffa:	a101      	add	r1, pc, #4	; (adr r1, 800a000 <_printf_i+0x40>)
 8009ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a06d 	.word	0x0800a06d
 800a008:	08009fe9 	.word	0x08009fe9
 800a00c:	08009fe9 	.word	0x08009fe9
 800a010:	08009fe9 	.word	0x08009fe9
 800a014:	08009fe9 	.word	0x08009fe9
 800a018:	0800a06d 	.word	0x0800a06d
 800a01c:	08009fe9 	.word	0x08009fe9
 800a020:	08009fe9 	.word	0x08009fe9
 800a024:	08009fe9 	.word	0x08009fe9
 800a028:	08009fe9 	.word	0x08009fe9
 800a02c:	0800a171 	.word	0x0800a171
 800a030:	0800a099 	.word	0x0800a099
 800a034:	0800a12b 	.word	0x0800a12b
 800a038:	08009fe9 	.word	0x08009fe9
 800a03c:	08009fe9 	.word	0x08009fe9
 800a040:	0800a193 	.word	0x0800a193
 800a044:	08009fe9 	.word	0x08009fe9
 800a048:	0800a099 	.word	0x0800a099
 800a04c:	08009fe9 	.word	0x08009fe9
 800a050:	08009fe9 	.word	0x08009fe9
 800a054:	0800a133 	.word	0x0800a133
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	1d1a      	adds	r2, r3, #4
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	602a      	str	r2, [r5, #0]
 800a060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a068:	2301      	movs	r3, #1
 800a06a:	e09f      	b.n	800a1ac <_printf_i+0x1ec>
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	682b      	ldr	r3, [r5, #0]
 800a070:	0607      	lsls	r7, r0, #24
 800a072:	f103 0104 	add.w	r1, r3, #4
 800a076:	6029      	str	r1, [r5, #0]
 800a078:	d501      	bpl.n	800a07e <_printf_i+0xbe>
 800a07a:	681e      	ldr	r6, [r3, #0]
 800a07c:	e003      	b.n	800a086 <_printf_i+0xc6>
 800a07e:	0646      	lsls	r6, r0, #25
 800a080:	d5fb      	bpl.n	800a07a <_printf_i+0xba>
 800a082:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a086:	2e00      	cmp	r6, #0
 800a088:	da03      	bge.n	800a092 <_printf_i+0xd2>
 800a08a:	232d      	movs	r3, #45	; 0x2d
 800a08c:	4276      	negs	r6, r6
 800a08e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a092:	485a      	ldr	r0, [pc, #360]	; (800a1fc <_printf_i+0x23c>)
 800a094:	230a      	movs	r3, #10
 800a096:	e012      	b.n	800a0be <_printf_i+0xfe>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	6820      	ldr	r0, [r4, #0]
 800a09c:	1d19      	adds	r1, r3, #4
 800a09e:	6029      	str	r1, [r5, #0]
 800a0a0:	0605      	lsls	r5, r0, #24
 800a0a2:	d501      	bpl.n	800a0a8 <_printf_i+0xe8>
 800a0a4:	681e      	ldr	r6, [r3, #0]
 800a0a6:	e002      	b.n	800a0ae <_printf_i+0xee>
 800a0a8:	0641      	lsls	r1, r0, #25
 800a0aa:	d5fb      	bpl.n	800a0a4 <_printf_i+0xe4>
 800a0ac:	881e      	ldrh	r6, [r3, #0]
 800a0ae:	4853      	ldr	r0, [pc, #332]	; (800a1fc <_printf_i+0x23c>)
 800a0b0:	2f6f      	cmp	r7, #111	; 0x6f
 800a0b2:	bf0c      	ite	eq
 800a0b4:	2308      	moveq	r3, #8
 800a0b6:	230a      	movne	r3, #10
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0be:	6865      	ldr	r5, [r4, #4]
 800a0c0:	60a5      	str	r5, [r4, #8]
 800a0c2:	2d00      	cmp	r5, #0
 800a0c4:	bfa2      	ittt	ge
 800a0c6:	6821      	ldrge	r1, [r4, #0]
 800a0c8:	f021 0104 	bicge.w	r1, r1, #4
 800a0cc:	6021      	strge	r1, [r4, #0]
 800a0ce:	b90e      	cbnz	r6, 800a0d4 <_printf_i+0x114>
 800a0d0:	2d00      	cmp	r5, #0
 800a0d2:	d04b      	beq.n	800a16c <_printf_i+0x1ac>
 800a0d4:	4615      	mov	r5, r2
 800a0d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0da:	fb03 6711 	mls	r7, r3, r1, r6
 800a0de:	5dc7      	ldrb	r7, [r0, r7]
 800a0e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0e4:	4637      	mov	r7, r6
 800a0e6:	42bb      	cmp	r3, r7
 800a0e8:	460e      	mov	r6, r1
 800a0ea:	d9f4      	bls.n	800a0d6 <_printf_i+0x116>
 800a0ec:	2b08      	cmp	r3, #8
 800a0ee:	d10b      	bne.n	800a108 <_printf_i+0x148>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	07de      	lsls	r6, r3, #31
 800a0f4:	d508      	bpl.n	800a108 <_printf_i+0x148>
 800a0f6:	6923      	ldr	r3, [r4, #16]
 800a0f8:	6861      	ldr	r1, [r4, #4]
 800a0fa:	4299      	cmp	r1, r3
 800a0fc:	bfde      	ittt	le
 800a0fe:	2330      	movle	r3, #48	; 0x30
 800a100:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a104:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a108:	1b52      	subs	r2, r2, r5
 800a10a:	6122      	str	r2, [r4, #16]
 800a10c:	f8cd a000 	str.w	sl, [sp]
 800a110:	464b      	mov	r3, r9
 800a112:	aa03      	add	r2, sp, #12
 800a114:	4621      	mov	r1, r4
 800a116:	4640      	mov	r0, r8
 800a118:	f7ff fee4 	bl	8009ee4 <_printf_common>
 800a11c:	3001      	adds	r0, #1
 800a11e:	d14a      	bne.n	800a1b6 <_printf_i+0x1f6>
 800a120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a124:	b004      	add	sp, #16
 800a126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	f043 0320 	orr.w	r3, r3, #32
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	4833      	ldr	r0, [pc, #204]	; (800a200 <_printf_i+0x240>)
 800a134:	2778      	movs	r7, #120	; 0x78
 800a136:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	6829      	ldr	r1, [r5, #0]
 800a13e:	061f      	lsls	r7, r3, #24
 800a140:	f851 6b04 	ldr.w	r6, [r1], #4
 800a144:	d402      	bmi.n	800a14c <_printf_i+0x18c>
 800a146:	065f      	lsls	r7, r3, #25
 800a148:	bf48      	it	mi
 800a14a:	b2b6      	uxthmi	r6, r6
 800a14c:	07df      	lsls	r7, r3, #31
 800a14e:	bf48      	it	mi
 800a150:	f043 0320 	orrmi.w	r3, r3, #32
 800a154:	6029      	str	r1, [r5, #0]
 800a156:	bf48      	it	mi
 800a158:	6023      	strmi	r3, [r4, #0]
 800a15a:	b91e      	cbnz	r6, 800a164 <_printf_i+0x1a4>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	f023 0320 	bic.w	r3, r3, #32
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	2310      	movs	r3, #16
 800a166:	e7a7      	b.n	800a0b8 <_printf_i+0xf8>
 800a168:	4824      	ldr	r0, [pc, #144]	; (800a1fc <_printf_i+0x23c>)
 800a16a:	e7e4      	b.n	800a136 <_printf_i+0x176>
 800a16c:	4615      	mov	r5, r2
 800a16e:	e7bd      	b.n	800a0ec <_printf_i+0x12c>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	6826      	ldr	r6, [r4, #0]
 800a174:	6961      	ldr	r1, [r4, #20]
 800a176:	1d18      	adds	r0, r3, #4
 800a178:	6028      	str	r0, [r5, #0]
 800a17a:	0635      	lsls	r5, r6, #24
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	d501      	bpl.n	800a184 <_printf_i+0x1c4>
 800a180:	6019      	str	r1, [r3, #0]
 800a182:	e002      	b.n	800a18a <_printf_i+0x1ca>
 800a184:	0670      	lsls	r0, r6, #25
 800a186:	d5fb      	bpl.n	800a180 <_printf_i+0x1c0>
 800a188:	8019      	strh	r1, [r3, #0]
 800a18a:	2300      	movs	r3, #0
 800a18c:	6123      	str	r3, [r4, #16]
 800a18e:	4615      	mov	r5, r2
 800a190:	e7bc      	b.n	800a10c <_printf_i+0x14c>
 800a192:	682b      	ldr	r3, [r5, #0]
 800a194:	1d1a      	adds	r2, r3, #4
 800a196:	602a      	str	r2, [r5, #0]
 800a198:	681d      	ldr	r5, [r3, #0]
 800a19a:	6862      	ldr	r2, [r4, #4]
 800a19c:	2100      	movs	r1, #0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f7f6 f826 	bl	80001f0 <memchr>
 800a1a4:	b108      	cbz	r0, 800a1aa <_printf_i+0x1ea>
 800a1a6:	1b40      	subs	r0, r0, r5
 800a1a8:	6060      	str	r0, [r4, #4]
 800a1aa:	6863      	ldr	r3, [r4, #4]
 800a1ac:	6123      	str	r3, [r4, #16]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1b4:	e7aa      	b.n	800a10c <_printf_i+0x14c>
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	462a      	mov	r2, r5
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	4640      	mov	r0, r8
 800a1be:	47d0      	blx	sl
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d0ad      	beq.n	800a120 <_printf_i+0x160>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	079b      	lsls	r3, r3, #30
 800a1c8:	d413      	bmi.n	800a1f2 <_printf_i+0x232>
 800a1ca:	68e0      	ldr	r0, [r4, #12]
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	4298      	cmp	r0, r3
 800a1d0:	bfb8      	it	lt
 800a1d2:	4618      	movlt	r0, r3
 800a1d4:	e7a6      	b.n	800a124 <_printf_i+0x164>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	4632      	mov	r2, r6
 800a1da:	4649      	mov	r1, r9
 800a1dc:	4640      	mov	r0, r8
 800a1de:	47d0      	blx	sl
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d09d      	beq.n	800a120 <_printf_i+0x160>
 800a1e4:	3501      	adds	r5, #1
 800a1e6:	68e3      	ldr	r3, [r4, #12]
 800a1e8:	9903      	ldr	r1, [sp, #12]
 800a1ea:	1a5b      	subs	r3, r3, r1
 800a1ec:	42ab      	cmp	r3, r5
 800a1ee:	dcf2      	bgt.n	800a1d6 <_printf_i+0x216>
 800a1f0:	e7eb      	b.n	800a1ca <_printf_i+0x20a>
 800a1f2:	2500      	movs	r5, #0
 800a1f4:	f104 0619 	add.w	r6, r4, #25
 800a1f8:	e7f5      	b.n	800a1e6 <_printf_i+0x226>
 800a1fa:	bf00      	nop
 800a1fc:	0800a431 	.word	0x0800a431
 800a200:	0800a442 	.word	0x0800a442

0800a204 <memmove>:
 800a204:	4288      	cmp	r0, r1
 800a206:	b510      	push	{r4, lr}
 800a208:	eb01 0402 	add.w	r4, r1, r2
 800a20c:	d902      	bls.n	800a214 <memmove+0x10>
 800a20e:	4284      	cmp	r4, r0
 800a210:	4623      	mov	r3, r4
 800a212:	d807      	bhi.n	800a224 <memmove+0x20>
 800a214:	1e43      	subs	r3, r0, #1
 800a216:	42a1      	cmp	r1, r4
 800a218:	d008      	beq.n	800a22c <memmove+0x28>
 800a21a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a21e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a222:	e7f8      	b.n	800a216 <memmove+0x12>
 800a224:	4402      	add	r2, r0
 800a226:	4601      	mov	r1, r0
 800a228:	428a      	cmp	r2, r1
 800a22a:	d100      	bne.n	800a22e <memmove+0x2a>
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a236:	e7f7      	b.n	800a228 <memmove+0x24>

0800a238 <memcpy>:
 800a238:	440a      	add	r2, r1
 800a23a:	4291      	cmp	r1, r2
 800a23c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a240:	d100      	bne.n	800a244 <memcpy+0xc>
 800a242:	4770      	bx	lr
 800a244:	b510      	push	{r4, lr}
 800a246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a24a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a24e:	4291      	cmp	r1, r2
 800a250:	d1f9      	bne.n	800a246 <memcpy+0xe>
 800a252:	bd10      	pop	{r4, pc}

0800a254 <_realloc_r>:
 800a254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a258:	4680      	mov	r8, r0
 800a25a:	4614      	mov	r4, r2
 800a25c:	460e      	mov	r6, r1
 800a25e:	b921      	cbnz	r1, 800a26a <_realloc_r+0x16>
 800a260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a264:	4611      	mov	r1, r2
 800a266:	f7ff bba9 	b.w	80099bc <_malloc_r>
 800a26a:	b92a      	cbnz	r2, 800a278 <_realloc_r+0x24>
 800a26c:	f7ff fc96 	bl	8009b9c <_free_r>
 800a270:	4625      	mov	r5, r4
 800a272:	4628      	mov	r0, r5
 800a274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a278:	f000 f81b 	bl	800a2b2 <_malloc_usable_size_r>
 800a27c:	4284      	cmp	r4, r0
 800a27e:	4607      	mov	r7, r0
 800a280:	d802      	bhi.n	800a288 <_realloc_r+0x34>
 800a282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a286:	d812      	bhi.n	800a2ae <_realloc_r+0x5a>
 800a288:	4621      	mov	r1, r4
 800a28a:	4640      	mov	r0, r8
 800a28c:	f7ff fb96 	bl	80099bc <_malloc_r>
 800a290:	4605      	mov	r5, r0
 800a292:	2800      	cmp	r0, #0
 800a294:	d0ed      	beq.n	800a272 <_realloc_r+0x1e>
 800a296:	42bc      	cmp	r4, r7
 800a298:	4622      	mov	r2, r4
 800a29a:	4631      	mov	r1, r6
 800a29c:	bf28      	it	cs
 800a29e:	463a      	movcs	r2, r7
 800a2a0:	f7ff ffca 	bl	800a238 <memcpy>
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	f7ff fc78 	bl	8009b9c <_free_r>
 800a2ac:	e7e1      	b.n	800a272 <_realloc_r+0x1e>
 800a2ae:	4635      	mov	r5, r6
 800a2b0:	e7df      	b.n	800a272 <_realloc_r+0x1e>

0800a2b2 <_malloc_usable_size_r>:
 800a2b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2b6:	1f18      	subs	r0, r3, #4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bfbc      	itt	lt
 800a2bc:	580b      	ldrlt	r3, [r1, r0]
 800a2be:	18c0      	addlt	r0, r0, r3
 800a2c0:	4770      	bx	lr
	...

0800a2c4 <_init>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	bf00      	nop
 800a2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ca:	bc08      	pop	{r3}
 800a2cc:	469e      	mov	lr, r3
 800a2ce:	4770      	bx	lr

0800a2d0 <_fini>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	bf00      	nop
 800a2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d6:	bc08      	pop	{r3}
 800a2d8:	469e      	mov	lr, r3
 800a2da:	4770      	bx	lr
