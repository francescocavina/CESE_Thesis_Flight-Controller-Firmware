
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af4  08008af4  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08008af4  08008af4  00018af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008afc  08008afc  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b00  08008b00  00018b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08008b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014e4  20000160  08008c64  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  08008c64  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013629  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033da  00000000  00000000  000337b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00036b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019182  00000000  00000000  00038720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143b7  00000000  00000000  000518a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000894b4  00000000  00000000  00065c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef10d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e1c  00000000  00000000  000ef160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a2c 	.word	0x08008a2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08008a2c 	.word	0x08008a2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800058a:	f000 fb5b 	bl	8000c44 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800058e:	f000 f843 	bl	8000618 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000592:	f000 f8ad 	bl	80006f0 <MX_GPIO_Init>
    // MX_DMA_Init();
    MX_USB_DEVICE_Init();
 8000596:	f007 f891 	bl	80076bc <MX_USB_DEVICE_Init>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint8_t buffer[32];
    uint8_t str[32] = {0};
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	619a      	str	r2, [r3, #24]

    iBus_HandleTypeDef_t * rc_controller = FSA8S_RC_Init(&huart2, buffer);
 80005b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b6:	4619      	mov	r1, r3
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <main+0x8c>)
 80005ba:	f000 fafa 	bl	8000bb2 <FSA8S_RC_Init>
 80005be:	64b8      	str	r0, [r7, #72]	; 0x48

    while (1) {
        for (uint8_t i = 1; i <= 4; i++) {
 80005c0:	2301      	movs	r3, #1
 80005c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80005c6:	e01a      	b.n	80005fe <main+0x7a>
            uint16_t value = FSA8S_RC_ReadChannel(rc_controller, i);
 80005c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005cc:	4619      	mov	r1, r3
 80005ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80005d0:	f000 fb12 	bl	8000bf8 <FSA8S_RC_ReadChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            sprintf(str, "Channel %i: %d\r\n", i, value);
 80005da:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80005de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80005e2:	1d38      	adds	r0, r7, #4
 80005e4:	490b      	ldr	r1, [pc, #44]	; (8000614 <main+0x90>)
 80005e6:	f007 fea3 	bl	8008330 <siprintf>
            CDC_Transmit_FS(str, sizeof(str));
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2120      	movs	r1, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 f922 	bl	8007838 <CDC_Transmit_FS>
        for (uint8_t i = 1; i <= 4; i++) {
 80005f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005f8:	3301      	adds	r3, #1
 80005fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80005fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000602:	2b04      	cmp	r3, #4
 8000604:	d9e0      	bls.n	80005c8 <main+0x44>
            // HAL_Delay(10);
        }

        HAL_Delay(1000);
 8000606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060a:	f000 fb8d 	bl	8000d28 <HAL_Delay>
        for (uint8_t i = 1; i <= 4; i++) {
 800060e:	e7d7      	b.n	80005c0 <main+0x3c>
 8000610:	2000017c 	.word	0x2000017c
 8000614:	08008a44 	.word	0x08008a44

08000618 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 fd8a 	bl	8008140 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <SystemClock_Config+0xd0>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <SystemClock_Config+0xd0>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd4>)
 8000666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 800068c:	2319      	movs	r3, #25
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000696:	2304      	movs	r3, #4
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 800069a:	2307      	movs	r3, #7
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fa5e 	bl	8002b64 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9a>
        Error_Handler();
 80006ae:	f000 f847 	bl	8000740 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 80006b2:	230f      	movs	r3, #15
 80006b4:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fcc0 	bl	8003054 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc6>
        Error_Handler();
 80006da:	f000 f831 	bl	8000740 <Error_Handler>
    }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_GPIO_Init+0x4c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <MX_GPIO_Init+0x4c>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_GPIO_Init+0x4c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_GPIO_Init+0x4c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <MX_GPIO_Init+0x4c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_GPIO_Init+0x4c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a31      	ldr	r2, [pc, #196]	; (8000884 <HAL_UART_MspInit+0xe4>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d15b      	bne.n	800087a <HAL_UART_MspInit+0xda>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <HAL_UART_MspInit+0xe8>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a2f      	ldr	r2, [pc, #188]	; (8000888 <HAL_UART_MspInit+0xe8>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <HAL_UART_MspInit+0xe8>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <HAL_UART_MspInit+0xe8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a28      	ldr	r2, [pc, #160]	; (8000888 <HAL_UART_MspInit+0xe8>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <HAL_UART_MspInit+0xe8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80007fa:	230c      	movs	r3, #12
 80007fc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800080a:	2307      	movs	r3, #7
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	481d      	ldr	r0, [pc, #116]	; (800088c <HAL_UART_MspInit+0xec>)
 8000816:	f000 fda3 	bl	8001360 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <HAL_UART_MspInit+0xf0>)
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <HAL_UART_MspInit+0xf4>)
 800081e:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <HAL_UART_MspInit+0xf0>)
 8000822:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000826:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_UART_MspInit+0xf0>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_UART_MspInit+0xf0>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <HAL_UART_MspInit+0xf0>)
 8000836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083a:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_UART_MspInit+0xf0>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <HAL_UART_MspInit+0xf0>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_UART_MspInit+0xf0>)
 800084a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084e:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_UART_MspInit+0xf0>)
 8000852:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000856:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_UART_MspInit+0xf0>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_UART_MspInit+0xf0>)
 8000860:	f000 fb98 	bl	8000f94 <HAL_DMA_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_UART_MspInit+0xce>
            Error_Handler();
 800086a:	f7ff ff69 	bl	8000740 <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_UART_MspInit+0xf0>)
 8000872:	639a      	str	r2, [r3, #56]	; 0x38
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <HAL_UART_MspInit+0xf0>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40004400 	.word	0x40004400
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	200001c0 	.word	0x200001c0
 8000894:	40026088 	.word	0x40026088

08000898 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 80008e4:	f000 fa00 	bl	8000ce8 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <OTG_FS_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <OTG_FS_IRQHandler+0x10>)
 80008f2:	f001 f809 	bl	8001908 <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000f08 	.word	0x20000f08

08000900 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <_sbrk+0x5c>)
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <_sbrk+0x60>)
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <_sbrk+0x64>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <_sbrk+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	429a      	cmp	r2, r3
 800092e:	d207      	bcs.n	8000940 <_sbrk+0x40>
        errno = ENOMEM;
 8000930:	f007 fbd4 	bl	80080dc <__errno>
 8000934:	4603      	mov	r3, r0
 8000936:	220c      	movs	r2, #12
 8000938:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800093e:	e009      	b.n	8000954 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <_sbrk+0x64>)
 8000950:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20010000 	.word	0x20010000
 8000960:	00000400 	.word	0x00000400
 8000964:	20000220 	.word	0x20000220
 8000968:	20001648 	.word	0x20001648

0800096c <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <SystemInit+0x20>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <SystemInit+0x20>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000996:	490e      	ldr	r1, [pc, #56]	; (80009d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009ac:	4c0b      	ldr	r4, [pc, #44]	; (80009dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ba:	f7ff ffd7 	bl	800096c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009be:	f007 fb93 	bl	80080e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c2:	f7ff fddf 	bl	8000584 <main>
  bx  lr
 80009c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80009d4:	08008b04 	.word	0x08008b04
  ldr r2, =_sbss
 80009d8:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80009dc:	20001644 	.word	0x20001644

080009e0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC_IRQHandler>
	...

080009e4 <MX_UART_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static void MX_UART_Init(UART_HandleTypeDef * huart) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    huart->Instance = FSA8S_RC_UART_INSTANCE;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_UART_Init+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]
    huart->Init.BaudRate = 115200;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_1;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_RX;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2204      	movs	r2, #4
 8000a10:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(huart) != HAL_OK) {
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f002 fcf8 	bl	8003414 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_UART_Init+0x4a>
        Error_Handler();
 8000a2a:	f000 f807 	bl	8000a3c <Error_Handler>
    }
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40004400 	.word	0x40004400

08000a3c <Error_Handler>:

static void Error_Handler(void) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
    /* TODO */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <MX_DMA_Init>:

static void MX_DMA_Init(void) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_DMA_Init+0x30>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <MX_DMA_Init+0x30>)
 8000a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_DMA_Init+0x30>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <iBus_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
bool_t iBus_Init(iBus_HandleTypeDef_t * hibus) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    MX_DMA_Init();
 8000a88:	f7ff ffe0 	bl	8000a4c <MX_DMA_Init>
    MX_UART_Init(hibus->huart);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffa7 	bl	80009e4 <MX_UART_Init>
    HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6859      	ldr	r1, [r3, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	7a1b      	ldrb	r3, [r3, #8]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	f002 fd02 	bl	80034ae <HAL_UART_Receive_DMA>

    return true;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <FSA8S_RC_CheckFirstByte>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_RC_CheckFirstByte(iBus_HandleTypeDef_t * hibus) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if (IBUS_BUFFER_LENGHT == hibus->buffer[0] && IBUS_CHANNELS == hibus->buffer[1]) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b20      	cmp	r3, #32
 8000ac4:	d107      	bne.n	8000ad6 <FSA8S_RC_CheckFirstByte+0x22>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b40      	cmp	r3, #64	; 0x40
 8000ad0:	d101      	bne.n	8000ad6 <FSA8S_RC_CheckFirstByte+0x22>
		return true;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <FSA8S_RC_CheckFirstByte+0x24>
	} else {
		return false;
 8000ad6:	2300      	movs	r3, #0
	}
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <FSA8S_RC_Checksum>:

static bool_t FSA8S_RC_Checksum(iBus_HandleTypeDef_t * hibus) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	uint16_t sentChecksum;
	uint16_t receivedChecksum = 0xFFFF;
 8000aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af0:	81fb      	strh	r3, [r7, #14]

	sentChecksum =
			(hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7a1b      	ldrb	r3, [r3, #8]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	b21a      	sxth	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6859      	ldr	r1, [r3, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7a1b      	ldrb	r3, [r3, #8]
 8000b0c:	3b02      	subs	r3, #2
 8000b0e:	440b      	add	r3, r1
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b21b      	sxth	r3, r3
	sentChecksum =
 8000b18:	817b      	strh	r3, [r7, #10]

	for (uint8_t i = 0; i < 30; i++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	737b      	strb	r3, [r7, #13]
 8000b1e:	e00b      	b.n	8000b38 <FSA8S_RC_Checksum+0x54>
		receivedChecksum -= hibus->buffer[i];
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	7b7b      	ldrb	r3, [r7, #13]
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	89fa      	ldrh	r2, [r7, #14]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < 30; i++) {
 8000b32:	7b7b      	ldrb	r3, [r7, #13]
 8000b34:	3301      	adds	r3, #1
 8000b36:	737b      	strb	r3, [r7, #13]
 8000b38:	7b7b      	ldrb	r3, [r7, #13]
 8000b3a:	2b1d      	cmp	r3, #29
 8000b3c:	d9f0      	bls.n	8000b20 <FSA8S_RC_Checksum+0x3c>
	}

	if (sentChecksum == receivedChecksum) {
 8000b3e:	897a      	ldrh	r2, [r7, #10]
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d101      	bne.n	8000b4a <FSA8S_RC_Checksum+0x66>
		return true;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <FSA8S_RC_Checksum+0x68>
	} else {
		return false;
 8000b4a:	2300      	movs	r3, #0
	}
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <FSA8S_RC_AmendData>:

static bool_t FSA8S_RC_AmendData(iBus_HandleTypeDef_t * hibus) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000b60:	2302      	movs	r3, #2
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e018      	b.n	8000b98 <FSA8S_RC_AmendData+0x40>
		hibus->buffer[i] = (hibus->buffer[i + 1] << 8) | (hibus->buffer[i]);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b25a      	sxtb	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6859      	ldr	r1, [r3, #4]
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b259      	sxtb	r1, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	3302      	adds	r3, #2
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7a1b      	ldrb	r3, [r3, #8]
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dce0      	bgt.n	8000b66 <FSA8S_RC_AmendData+0xe>
	}

	return true;
 8000ba4:	2301      	movs	r3, #1
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <FSA8S_RC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
iBus_HandleTypeDef_t * FSA8S_RC_Init(UART_HandleTypeDef * huart, uint8_t * buffer) {
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]

#ifdef USE_FREERTOS
	iBus_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(iBus_HandleTypeDef_t));
#else
	iBus_HandleTypeDef_t * hibus = malloc(sizeof(iBus_HandleTypeDef_t));
 8000bbc:	200c      	movs	r0, #12
 8000bbe:	f007 fab7 	bl	8008130 <malloc>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	60fb      	str	r3, [r7, #12]
#endif

	if (hibus) {
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d008      	beq.n	8000bde <FSA8S_RC_Init+0x2c>
		hibus->huart = huart;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
		hibus->buffer = buffer;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
		hibus->bufferSize = IBUS_BUFFER_LENGHT;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2220      	movs	r2, #32
 8000bdc:	721a      	strb	r2, [r3, #8]
	}

	if (iBus_Init(hibus)) {
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f7ff ff4e 	bl	8000a80 <iBus_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <FSA8S_RC_Init+0x3c>
		return hibus;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	e000      	b.n	8000bf0 <FSA8S_RC_Init+0x3e>
	} else {
		return NULL;
 8000bee:	2300      	movs	r3, #0
	}
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <FSA8S_RC_ReadChannel>:

uint16_t FSA8S_RC_ReadChannel(iBus_HandleTypeDef_t * hibus, FSA8S_RC_CHANNEL_t channel) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	int16_t channelValue;

	FSA8S_RC_CheckFirstByte(hibus);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff55 	bl	8000ab4 <FSA8S_RC_CheckFirstByte>
	FSA8S_RC_Checksum(hibus);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ff6a 	bl	8000ae4 <FSA8S_RC_Checksum>
	FSA8S_RC_AmendData(hibus);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffa1 	bl	8000b58 <FSA8S_RC_AmendData>

	channelValue = (hibus->buffer[(channel * 2) + 1] << 8) | (hibus->buffer[channel * 2]);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	021b      	lsls	r3, r3, #8
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	78f9      	ldrb	r1, [r7, #3]
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	440b      	add	r3, r1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	81fb      	strh	r3, [r7, #14]

	return channelValue;
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f94f 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

    /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
    HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

    /* Init the low level hardware */
    HAL_MspInit();
 8000c78:	f7ff fd6a 	bl	8000750 <HAL_MspInit>

    /* Return function status */
    return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f967 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
    }

    /* Configure the SysTick IRQ priority */
    if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc4:	f000 f92f 	bl	8000f26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
    } else {
        return HAL_ERROR;
    }

    /* Return function status */
    return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
        return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000224 	.word	0x20000224

08000d10 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
    return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000224 	.word	0x20000224

08000d28 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY) {
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
        wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
    }

    while ((HAL_GetTick() - tickstart) < wait) {
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
    }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           Only values from 0..7 are used.
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    uint32_t reg_value;
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

    reg_value = SCB->AIRCR; /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
    reg_value &=
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
        ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change */
    reg_value =
        (reg_value | ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
         (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
        (reg_value | ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
    reg_value =
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
    SCB->AIRCR = reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
/**
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
    return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \brief   Enable Interrupt
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
    if ((int32_t)(IRQn) >= 0) {
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
        NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
           or negative to specify a processor exception.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
    if ((int32_t)(IRQn) >= 0) {
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
        NVIC->IP[((uint32_t)IRQn)] =
            (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
        NVIC->IP[((uint32_t)IRQn)] =
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
            (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
        NVIC->IP[((uint32_t)IRQn)] =
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    } else {
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] =
            (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
            (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] =
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
            (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] =
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref
  NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority,
                                             uint32_t SubPriority) {
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
    uint32_t PreemptPriorityBits;
    uint32_t SubPriorityBits;

    PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS))
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
                              ? (uint32_t)(__NVIC_PRIO_BITS)
                              : (uint32_t)(7UL - PriorityGroupTmp);
    SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
                          ? (uint32_t)0UL
                          : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
    SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL)
 8000e96:	617b      	str	r3, [r7, #20]

    return (
        ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
        ((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL))));
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
        ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \return          1  Function failed.
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file
  <b><i>device</i>.h</b> must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
        return (1UL); /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
    }

    SysTick->LOAD = (uint32_t)(ticks - 1UL); /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
    NVIC_SetPriority(SysTick_IRQn,
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
                     (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    SysTick->VAL = 0UL;                                /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_ENABLE_Msk; /* Enable SysTick IRQ and SysTick Timer */
    return (0UL);                            /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    /* Check the parameters */
    assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

    /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
 * @param  SubPriority the subpriority level for the IRQ channel.
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
    uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

    prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]

    NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS
 * device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
    /* Check the parameters */
    assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

    /* Enable interrupt */
    NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
    return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_DMA_Init>:
 *         parameters in the DMA_InitTypeDef and create the associated handle.
 * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef * hdma) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    uint32_t tmp = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
    uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff feb6 	bl	8000d10 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]
    DMA_Base_Registers * regs;

    /* Check the DMA peripheral state */
    if (hdma == NULL) {
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_DMA_Init+0x1c>
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e099      	b.n	80010e4 <HAL_DMA_Init+0x150>
        assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
        assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0201 	bic.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8000fd0:	e00f      	b.n	8000ff2 <HAL_DMA_Init+0x5e>
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 8000fd2:	f7ff fe9d 	bl	8000d10 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	d908      	bls.n	8000ff2 <HAL_DMA_Init+0x5e>
            /* Update error code */
            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e078      	b.n	80010e4 <HAL_DMA_Init+0x150>
    while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1e8      	bne.n	8000fd2 <HAL_DMA_Init+0x3e>
        }
    }

    /* Get the CR register value */
    tmp = hdma->Instance->CR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL |
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_DMA_Init+0x158>)
 800100c:	4013      	ands	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
                         DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC |
                         DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	431a      	orrs	r2, r3
           hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment | hdma->Init.Mode |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
    tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc |
 800102a:	431a      	orrs	r2, r3
           hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment | hdma->Init.Mode |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	431a      	orrs	r2, r3
           hdma->Init.Priority;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
           hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment | hdma->Init.Mode |
 800103c:	4313      	orrs	r3, r2
    tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc |
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4313      	orrs	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	2b04      	cmp	r3, #4
 800104a:	d107      	bne.n	800105c <HAL_DMA_Init+0xc8>
        /* Get memory burst and peripheral burst */
        tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4313      	orrs	r3, r2
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	4313      	orrs	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    hdma->Instance->CR = tmp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    tmp = hdma->Instance->FCR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f023 0307 	bic.w	r3, r3, #7
 8001072:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    tmp |= hdma->Init.FIFOMode;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	4313      	orrs	r3, r2
 800107c:	617b      	str	r3, [r7, #20]

    /* The FIFO threshold is not used when the FIFO mode is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	2b04      	cmp	r3, #4
 8001084:	d117      	bne.n	80010b6 <HAL_DMA_Init+0x122>
        /* Get the FIFO threshold */
        tmp |= hdma->Init.FIFOThreshold;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4313      	orrs	r3, r2
 800108e:	617b      	str	r3, [r7, #20]

        /* Check compatibility between FIFO threshold level and size of the memory burst */
        /* for INCR4, INCR8, INCR16 bursts */
        if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00e      	beq.n	80010b6 <HAL_DMA_Init+0x122>
            if (DMA_CheckFifoParam(hdma) != HAL_OK) {
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f8e5 	bl	8001268 <DMA_CheckFifoParam>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <HAL_DMA_Init+0x122>
                /* Update error code */
                hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2240      	movs	r2, #64	; 0x40
 80010a8:	655a      	str	r2, [r3, #84]	; 0x54

                /* Change the DMA state */
                hdma->State = HAL_DMA_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

                return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e016      	b.n	80010e4 <HAL_DMA_Init+0x150>
            }
        }
    }

    /* Write to DMA Stream FCR */
    hdma->Instance->FCR = tmp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f89c 	bl	80011fc <DMA_CalcBaseAndBitshift>
 80010c4:	4603      	mov	r3, r0
 80010c6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010cc:	223f      	movs	r2, #63	; 0x3f
 80010ce:	409a      	lsls	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Initialize the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	f010803f 	.word	0xf010803f

080010f0 <HAL_DMA_Start_IT>:
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef * hdma, uint32_t SrcAddress,
                                   uint32_t DstAddress, uint32_t DataLength) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	75fb      	strb	r3, [r7, #23]

    /* calculate DMA base and stream number */
    DMA_Base_Registers * regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	613b      	str	r3, [r7, #16]

    /* Check the parameters */
    assert_param(IS_DMA_BUFFER_SIZE(DataLength));

    /* Process locked */
    __HAL_LOCK(hdma);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_DMA_Start_IT+0x26>
 8001112:	2302      	movs	r3, #2
 8001114:	e040      	b.n	8001198 <HAL_DMA_Start_IT+0xa8>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if (HAL_DMA_STATE_READY == hdma->State) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d12f      	bne.n	800118a <HAL_DMA_Start_IT+0x9a>
        /* Change DMA peripheral state */
        hdma->State = HAL_DMA_STATE_BUSY;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2202      	movs	r2, #2
 800112e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Initialize the error code */
        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	655a      	str	r2, [r3, #84]	; 0x54

        /* Configure the source, destination address and the data length */
        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f82e 	bl	80011a0 <DMA_SetConfig>

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001148:	223f      	movs	r2, #63	; 0x3f
 800114a:	409a      	lsls	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]

        /* Enable Common interrupts*/
        hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0216 	orr.w	r2, r2, #22
 800115e:	601a      	str	r2, [r3, #0]

        if (hdma->XferHalfCpltCallback != NULL) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	2b00      	cmp	r3, #0
 8001166:	d007      	beq.n	8001178 <HAL_DMA_Start_IT+0x88>
            hdma->Instance->CR |= DMA_IT_HT;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0208 	orr.w	r2, r2, #8
 8001176:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral */
        __HAL_DMA_ENABLE(hdma);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e005      	b.n	8001196 <HAL_DMA_Start_IT+0xa6>
    } else {
        /* Process unlocked */
        __HAL_UNLOCK(hdma);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Return error status */
        status = HAL_BUSY;
 8001192:	2302      	movs	r3, #2
 8001194:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8001196:	7dfb      	ldrb	r3, [r7, #23]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <DMA_SetConfig>:
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef * hdma, uint32_t SrcAddress, uint32_t DstAddress,
                          uint32_t DataLength) {
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
    /* Clear DBM bit */
    hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    hdma->Instance->NDTR = DataLength;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	605a      	str	r2, [r3, #4]

    /* Memory to Peripheral */
    if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b40      	cmp	r3, #64	; 0x40
 80011cc:	d108      	bne.n	80011e0 <DMA_SetConfig+0x40>
        /* Configure DMA Stream destination address */
        hdma->Instance->PAR = DstAddress;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	609a      	str	r2, [r3, #8]

        /* Configure DMA Stream source address */
        hdma->Instance->M0AR = SrcAddress;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	60da      	str	r2, [r3, #12]
        hdma->Instance->PAR = SrcAddress;

        /* Configure DMA Stream destination address */
        hdma->Instance->M0AR = DstAddress;
    }
}
 80011de:	e007      	b.n	80011f0 <DMA_SetConfig+0x50>
        hdma->Instance->PAR = SrcAddress;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	609a      	str	r2, [r3, #8]
        hdma->Instance->M0AR = DstAddress;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	60da      	str	r2, [r3, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <DMA_CalcBaseAndBitshift>:
 * @brief  Returns the DMA Stream base address depending on stream number
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef * hdma) {
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b10      	subs	r3, #16
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <DMA_CalcBaseAndBitshift+0x64>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <DMA_CalcBaseAndBitshift+0x68>)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U) {
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b03      	cmp	r3, #3
 8001228:	d909      	bls.n	800123e <DMA_CalcBaseAndBitshift+0x42>
        /* return pointer to HISR and HIFCR */
        hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001232:	f023 0303 	bic.w	r3, r3, #3
 8001236:	1d1a      	adds	r2, r3, #4
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	659a      	str	r2, [r3, #88]	; 0x58
 800123c:	e007      	b.n	800124e <DMA_CalcBaseAndBitshift+0x52>
    } else {
        /* return pointer to LISR and LIFCR */
        hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001246:	f023 0303 	bic.w	r3, r3, #3
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6593      	str	r3, [r2, #88]	; 0x58
    }

    return hdma->StreamBaseAddress;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	aaaaaaab 	.word	0xaaaaaaab
 8001264:	08008ab8 	.word	0x08008ab8

08001268 <DMA_CheckFifoParam>:
 * @brief  Check compatibility between FIFO threshold level and size of the memory burst
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef * hdma) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
    uint32_t tmp = hdma->Init.FIFOThreshold;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	60bb      	str	r3, [r7, #8]

    /* Memory Data size equal to Byte */
    if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d11f      	bne.n	80012c2 <DMA_CheckFifoParam+0x5a>
        switch (tmp) {
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b03      	cmp	r3, #3
 8001286:	d856      	bhi.n	8001336 <DMA_CheckFifoParam+0xce>
 8001288:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <DMA_CheckFifoParam+0x28>)
 800128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128e:	bf00      	nop
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012b3 	.word	0x080012b3
 8001298:	080012a1 	.word	0x080012a1
 800129c:	08001337 	.word	0x08001337
        case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d046      	beq.n	800133a <DMA_CheckFifoParam+0xd2>
                status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80012b0:	e043      	b.n	800133a <DMA_CheckFifoParam+0xd2>
        case DMA_FIFO_THRESHOLD_HALFFULL:
            if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012ba:	d140      	bne.n	800133e <DMA_CheckFifoParam+0xd6>
                status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80012c0:	e03d      	b.n	800133e <DMA_CheckFifoParam+0xd6>
            break;
        }
    }

    /* Memory Data size equal to Half-Word */
    else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012ca:	d121      	bne.n	8001310 <DMA_CheckFifoParam+0xa8>
        switch (tmp) {
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d837      	bhi.n	8001342 <DMA_CheckFifoParam+0xda>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <DMA_CheckFifoParam+0x70>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	080012e9 	.word	0x080012e9
 80012dc:	080012ef 	.word	0x080012ef
 80012e0:	080012e9 	.word	0x080012e9
 80012e4:	08001301 	.word	0x08001301
        case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
            status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
            break;
 80012ec:	e030      	b.n	8001350 <DMA_CheckFifoParam+0xe8>
        case DMA_FIFO_THRESHOLD_HALFFULL:
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d025      	beq.n	8001346 <DMA_CheckFifoParam+0xde>
                status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80012fe:	e022      	b.n	8001346 <DMA_CheckFifoParam+0xde>
        case DMA_FIFO_THRESHOLD_FULL:
            if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001308:	d11f      	bne.n	800134a <DMA_CheckFifoParam+0xe2>
                status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800130e:	e01c      	b.n	800134a <DMA_CheckFifoParam+0xe2>
        }
    }

    /* Memory Data size equal to Word */
    else {
        switch (tmp) {
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d903      	bls.n	800131e <DMA_CheckFifoParam+0xb6>
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d003      	beq.n	8001324 <DMA_CheckFifoParam+0xbc>
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
                status = HAL_ERROR;
            }
            break;
        default:
            break;
 800131c:	e018      	b.n	8001350 <DMA_CheckFifoParam+0xe8>
            status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
            break;
 8001322:	e015      	b.n	8001350 <DMA_CheckFifoParam+0xe8>
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00e      	beq.n	800134e <DMA_CheckFifoParam+0xe6>
                status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
            break;
 8001334:	e00b      	b.n	800134e <DMA_CheckFifoParam+0xe6>
            break;
 8001336:	bf00      	nop
 8001338:	e00a      	b.n	8001350 <DMA_CheckFifoParam+0xe8>
            break;
 800133a:	bf00      	nop
 800133c:	e008      	b.n	8001350 <DMA_CheckFifoParam+0xe8>
            break;
 800133e:	bf00      	nop
 8001340:	e006      	b.n	8001350 <DMA_CheckFifoParam+0xe8>
            break;
 8001342:	bf00      	nop
 8001344:	e004      	b.n	8001350 <DMA_CheckFifoParam+0xe8>
            break;
 8001346:	bf00      	nop
 8001348:	e002      	b.n	8001350 <DMA_CheckFifoParam+0xe8>
            break;
 800134a:	bf00      	nop
 800134c:	e000      	b.n	8001350 <DMA_CheckFifoParam+0xe8>
            break;
 800134e:	bf00      	nop
        }
    }

    return status;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop

08001360 <HAL_GPIO_Init>:
 * devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef * GPIOx, GPIO_InitTypeDef * GPIO_Init) {
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
    uint32_t position;
    uint32_t ioposition = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
    uint32_t iocurrent = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
    uint32_t temp = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

    /* Configure the port pins */
    for (position = 0U; position < GPIO_NUMBER; position++) {
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e159      	b.n	8001630 <HAL_GPIO_Init+0x2d0>
        /* Get the IO position */
        ioposition = 0x01U << position;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
        /* Get the current IO position */
        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]

        if (iocurrent == ioposition) {
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	f040 8148 	bne.w	800162a <HAL_GPIO_Init+0x2ca>
            /*--------------------- GPIO Mode Configuration ------------------------*/
            /* In case of Output or Alternate function mode selection */
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d005      	beq.n	80013b2 <HAL_GPIO_Init+0x52>
                (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d130      	bne.n	8001414 <HAL_GPIO_Init+0xb4>
                /* Check the Speed parameter */
                assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
                /* Configure the IO Speed */
                temp = GPIOx->OSPEEDR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_Init->Speed << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
                GPIOx->OSPEEDR = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	609a      	str	r2, [r3, #8]

                /* Configure the IO Output Type */
                temp = GPIOx->OTYPER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OTYPER_OT_0 << position);
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
                temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
                GPIOx->OTYPER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	605a      	str	r2, [r3, #4]
            }

            if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b03      	cmp	r3, #3
 800141e:	d017      	beq.n	8001450 <HAL_GPIO_Init+0xf0>
                /* Check the parameters */
                assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

                /* Activate the Pull-up or Pull down resistor for the current IO */
                temp = GPIOx->PUPDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
                temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
                GPIOx->PUPDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	60da      	str	r2, [r3, #12]
            }

            /* In case of Alternate function mode selection */
            if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d123      	bne.n	80014a4 <HAL_GPIO_Init+0x144>
                /* Check the Alternate function parameter */
                assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
                /* Configure Alternate function mapped with the current IO */
                temp = GPIOx->AFR[position >> 3U];
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001468:	61bb      	str	r3, [r7, #24]
                temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
                GPIOx->AFR[position >> 3U] = temp;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	69b9      	ldr	r1, [r7, #24]
 80014a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
            temp = GPIOx->MODER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
            temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0203 	and.w	r2, r3, #3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
            GPIOx->MODER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	601a      	str	r2, [r3, #0]

            /*--------------------- EXTI Mode Configuration ------------------------*/
            /* Configure the External Interrupt or event for the current IO */
            if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a2 	beq.w	800162a <HAL_GPIO_Init+0x2ca>
                /* Enable SYSCFG Clock */
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b57      	ldr	r3, [pc, #348]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a56      	ldr	r2, [pc, #344]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b54      	ldr	r3, [pc, #336]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

                temp = SYSCFG->EXTICR[position >> 2U];
 8001502:	4a52      	ldr	r2, [pc, #328]	; (800164c <HAL_GPIO_Init+0x2ec>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	61bb      	str	r3, [r7, #24]
                temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a49      	ldr	r2, [pc, #292]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0x202>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a48      	ldr	r2, [pc, #288]	; (8001654 <HAL_GPIO_Init+0x2f4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x1fe>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a47      	ldr	r2, [pc, #284]	; (8001658 <HAL_GPIO_Init+0x2f8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x1fa>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a46      	ldr	r2, [pc, #280]	; (800165c <HAL_GPIO_Init+0x2fc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x1f6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a45      	ldr	r2, [pc, #276]	; (8001660 <HAL_GPIO_Init+0x300>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x1f2>
 800154e:	2304      	movs	r3, #4
 8001550:	e008      	b.n	8001564 <HAL_GPIO_Init+0x204>
 8001552:	2307      	movs	r3, #7
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x204>
 8001556:	2303      	movs	r3, #3
 8001558:	e004      	b.n	8001564 <HAL_GPIO_Init+0x204>
 800155a:	2302      	movs	r3, #2
 800155c:	e002      	b.n	8001564 <HAL_GPIO_Init+0x204>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x204>
 8001562:	2300      	movs	r3, #0
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	f002 0203 	and.w	r2, r2, #3
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	4093      	lsls	r3, r2
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
                SYSCFG->EXTICR[position >> 2U] = temp;
 8001574:	4935      	ldr	r1, [pc, #212]	; (800164c <HAL_GPIO_Init+0x2ec>)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                /* Clear Rising Falling edge configuration */
                temp = EXTI->RTSR;
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x246>
                    temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
                }
                EXTI->RTSR = temp;
 80015a6:	4a2f      	ldr	r2, [pc, #188]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6093      	str	r3, [r2, #8]

                temp = EXTI->FTSR;
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x270>
                    temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
                }
                EXTI->FTSR = temp;
 80015d0:	4a24      	ldr	r2, [pc, #144]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	60d3      	str	r3, [r2, #12]

                temp = EXTI->EMR;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x29a>
                    temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
                }
                EXTI->EMR = temp;
 80015fa:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6053      	str	r3, [r2, #4]

                /* Clear EXTI line configuration */
                temp = EXTI->IMR;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x2c4>
                    temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
                }
                EXTI->IMR = temp;
 8001624:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	6013      	str	r3, [r2, #0]
    for (position = 0U; position < GPIO_NUMBER; position++) {
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3301      	adds	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	2b0f      	cmp	r3, #15
 8001634:	f67f aea2 	bls.w	800137c <HAL_GPIO_Init+0x1c>
            }
        }
    }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40013800 	.word	0x40013800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020400 	.word	0x40020400
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40021000 	.word	0x40021000
 8001664:	40013c00 	.word	0x40013c00

08001668 <HAL_PCD_Init>:
 * @brief  Initializes the PCD according to the specified
 *         parameters in the PCD_InitTypeDef and initialize the associated handle.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef * hpcd) {
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	b08f      	sub	sp, #60	; 0x3c
 800166c:	af0a      	add	r7, sp, #40	; 0x28
 800166e:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx;
    uint8_t i;

    /* Check the PCD handle allocation */
    if (hpcd == NULL) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_PCD_Init+0x12>
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e10f      	b.n	800189a <HAL_PCD_Init+0x232>
    }

    /* Check the parameters */
    assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

    USBx = hpcd->Instance;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	60bb      	str	r3, [r7, #8]

    if (hpcd->State == HAL_PCD_STATE_RESET) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d106      	bne.n	800169a <HAL_PCD_Init+0x32>
        /* Allocate lock resource and initialize it */
        hpcd->Lock = HAL_UNLOCKED;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

        /* Init the low level hardware */
        hpcd->MspInitCallback(hpcd);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
        HAL_PCD_MspInit(hpcd);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f006 fa17 	bl	8007ac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
    }

    hpcd->State = HAL_PCD_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

    /* Disable DMA mode for FS instance */
    if ((USBx->CID & (0x1U << 8)) == 0U) {
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_PCD_Init+0x4c>
        hpcd->Init.dma_enable = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
    }

    /* Disable the Interrupts */
    __HAL_PCD_DISABLE(hpcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fcfe 	bl	80040ba <USB_DisableGlobalInt>

    /*Init the Core (common init.) */
    if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	687e      	ldr	r6, [r7, #4]
 80016c6:	466d      	mov	r5, sp
 80016c8:	f106 0410 	add.w	r4, r6, #16
 80016cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016dc:	1d33      	adds	r3, r6, #4
 80016de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f002 fbd5 	bl	8003e90 <USB_CoreInit>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_PCD_Init+0x90>
        hpcd->State = HAL_PCD_STATE_ERROR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2202      	movs	r2, #2
 80016f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0d0      	b.n	800189a <HAL_PCD_Init+0x232>
    }

    /* Force Device Mode*/
    (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 fcec 	bl	80040dc <USB_SetCurrentMode>

    /* Init endpoints structures */
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e04a      	b.n	80017a0 <HAL_PCD_Init+0x138>
        /* Init ep structure */
        hpcd->IN_ep[i].is_in = 1U;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	333d      	adds	r3, #61	; 0x3d
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].num = i;
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	333c      	adds	r3, #60	; 0x3c
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].tx_fifo_num = i;
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	b298      	uxth	r0, r3
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	3344      	adds	r3, #68	; 0x44
 8001746:	4602      	mov	r2, r0
 8001748:	801a      	strh	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	3340      	adds	r3, #64	; 0x40
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].maxpacket = 0U;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	3348      	adds	r3, #72	; 0x48
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_buff = 0U;
 8001772:	7bfa      	ldrb	r2, [r7, #15]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	334c      	adds	r3, #76	; 0x4c
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_len = 0U;
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	3354      	adds	r3, #84	; 0x54
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	3301      	adds	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d3af      	bcc.n	800170a <HAL_PCD_Init+0xa2>
    }

    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e044      	b.n	800183a <HAL_PCD_Init+0x1d2>
        hpcd->OUT_ep[i].is_in = 0U;
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].num = i;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	701a      	strb	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].maxpacket = 0U;
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_buff = 0U;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_len = 0U;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	3301      	adds	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	d3b5      	bcc.n	80017b0 <HAL_PCD_Init+0x148>
    }

    /* Init Device */
    if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	687e      	ldr	r6, [r7, #4]
 800184c:	466d      	mov	r5, sp
 800184e:	f106 0410 	add.w	r4, r6, #16
 8001852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800185e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001862:	1d33      	adds	r3, r6, #4
 8001864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001866:	6838      	ldr	r0, [r7, #0]
 8001868:	f002 fc84 	bl	8004174 <USB_DevInit>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_PCD_Init+0x216>
        hpcd->State = HAL_PCD_STATE_ERROR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2202      	movs	r2, #2
 8001876:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00d      	b.n	800189a <HAL_PCD_Init+0x232>
    }

    hpcd->USB_Address = 0U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    hpcd->State = HAL_PCD_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
        (void)HAL_PCDEx_ActivateLPM(hpcd);
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) ||                  \
          defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||                  \
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    (void)USB_DevDisconnect(hpcd->Instance);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fdd3 	bl	800543e <USB_DevDisconnect>

    return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018a2 <HAL_PCD_Start>:
/**
 * @brief  Start the USB device
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef * hpcd) {
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	60fb      	str	r3, [r7, #12]

    __HAL_LOCK(hpcd);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_PCD_Start+0x1c>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e020      	b.n	8001900 <HAL_PCD_Start+0x5e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    if ((hpcd->Init.battery_charging_enable == 1U) && (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY)) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d109      	bne.n	80018e2 <HAL_PCD_Start+0x40>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d005      	beq.n	80018e2 <HAL_PCD_Start+0x40>
        /* Enable USB Transceiver */
        USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	639a      	str	r2, [r3, #56]	; 0x38
    }

    __HAL_PCD_ENABLE(hpcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fbd6 	bl	8004098 <USB_EnableGlobalInt>
    (void)USB_DevConnect(hpcd->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 fd83 	bl	80053fc <USB_DevConnect>
    __HAL_UNLOCK(hpcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_PCD_IRQHandler>:
/**
 * @brief  Handles PCD interrupt request.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef * hpcd) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b08d      	sub	sp, #52	; 0x34
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	623b      	str	r3, [r7, #32]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	61fb      	str	r3, [r7, #28]
    uint32_t epnum;
    uint32_t fifoemptymsk;
    uint32_t RegVal;

    /* ensure that we are in device mode */
    if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE) {
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fe41 	bl	80055a6 <USB_GetMode>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 848a 	bne.w	8002240 <HAL_PCD_IRQHandler+0x938>
        /* avoid spurious interrupt */
        if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fda5 	bl	8005480 <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 8480 	beq.w	800223e <HAL_PCD_IRQHandler+0x936>
            return;
        }

        /* store current frame number */
        hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS)) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fd92 	bl	8005480 <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b02      	cmp	r3, #2
 8001964:	d107      	bne.n	8001976 <HAL_PCD_IRQHandler+0x6e>
            /* incorrect mode, acknowledge the interrupt */
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f002 0202 	and.w	r2, r2, #2
 8001974:	615a      	str	r2, [r3, #20]
        }

        /* Handle RxQLevel Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL)) {
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fd80 	bl	8005480 <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b10      	cmp	r3, #16
 8001988:	d161      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x146>
            USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0210 	bic.w	r2, r2, #16
 8001998:	619a      	str	r2, [r3, #24]

            RegVal = USBx->GRXSTSP;
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	61bb      	str	r3, [r7, #24]

            ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	f003 020f 	and.w	r2, r3, #15
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	3304      	adds	r3, #4
 80019b8:	617b      	str	r3, [r7, #20]

            if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	0c5b      	lsrs	r3, r3, #17
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d124      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x108>
                if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U) {
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d035      	beq.n	8001a3e <HAL_PCD_IRQHandler+0x136>
                    (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	6919      	ldr	r1, [r3, #16]
                                         (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	b29b      	uxth	r3, r3
                    (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	6a38      	ldr	r0, [r7, #32]
 80019e6:	f003 fbb7 	bl	8005158 <USB_ReadPacket>

                    ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019f6:	441a      	add	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	611a      	str	r2, [r3, #16]
                    ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a08:	441a      	add	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	621a      	str	r2, [r3, #32]
 8001a0e:	e016      	b.n	8001a3e <HAL_PCD_IRQHandler+0x136>
                }
            } else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT) {
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	0c5b      	lsrs	r3, r3, #17
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	2b06      	cmp	r3, #6
 8001a1a:	d110      	bne.n	8001a3e <HAL_PCD_IRQHandler+0x136>
                (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a22:	2208      	movs	r2, #8
 8001a24:	4619      	mov	r1, r3
 8001a26:	6a38      	ldr	r0, [r7, #32]
 8001a28:	f003 fb96 	bl	8005158 <USB_ReadPacket>
                ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a38:	441a      	add	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	621a      	str	r2, [r3, #32]
            } else {
                /* ... */
            }

            USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0210 	orr.w	r2, r2, #16
 8001a4c:	619a      	str	r2, [r3, #24]
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT)) {
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fd14 	bl	8005480 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a62:	f040 80a7 	bne.w	8001bb4 <HAL_PCD_IRQHandler+0x2ac>
            epnum = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24

            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fd19 	bl	80054a6 <USB_ReadDevAllOutEpInterrupt>
 8001a74:	62b8      	str	r0, [r7, #40]	; 0x28

            while (ep_intr != 0U) {
 8001a76:	e099      	b.n	8001bac <HAL_PCD_IRQHandler+0x2a4>
                if ((ep_intr & 0x1U) != 0U) {
 8001a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 808e 	beq.w	8001ba0 <HAL_PCD_IRQHandler+0x298>
                    epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fd3d 	bl	800550e <USB_ReadDevOutEPInterrupt>
 8001a94:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00c      	beq.n	8001aba <HAL_PCD_IRQHandler+0x1b2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aac:	461a      	mov	r2, r3
 8001aae:	2301      	movs	r3, #1
 8001ab0:	6093      	str	r3, [r2, #8]
                        (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fec3 	bl	8002840 <PCD_EP_OutXfrComplete_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00c      	beq.n	8001ade <HAL_PCD_IRQHandler+0x1d6>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	6093      	str	r3, [r2, #8]
                        /* Class B setup phase done for previous decoded setup */
                        (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ad6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 ff99 	bl	8002a10 <PCD_EP_OutSetupPacket_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_PCD_IRQHandler+0x1f2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	015a      	lsls	r2, r3, #5
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af4:	461a      	mov	r2, r3
 8001af6:	2310      	movs	r3, #16
 8001af8:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT Endpoint disable interrupt */
                    if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD) {
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d030      	beq.n	8001b66 <HAL_PCD_IRQHandler+0x25e>
                        if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) ==
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0c:	2b80      	cmp	r3, #128	; 0x80
 8001b0e:	d109      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x21c>
                            USB_OTG_GINTSTS_BOUTNAKEFF) {
                            USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6053      	str	r3, [r2, #4]
                        }

                        ep = &hpcd->OUT_ep[epnum];
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	3304      	adds	r3, #4
 8001b38:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	78db      	ldrb	r3, [r3, #3]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <HAL_PCD_IRQHandler+0x24c>
                            ep->is_iso_incomplete = 0U;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2200      	movs	r2, #0
 8001b46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                            hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f006 f8b6 	bl	8007cc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b60:	461a      	mov	r2, r3
 8001b62:	2302      	movs	r3, #2
 8001b64:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear Status Phase Received interrupt */
                    if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_PCD_IRQHandler+0x27a>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2320      	movs	r3, #32
 8001b80:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT NAK interrupt */
                    if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d009      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x298>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	015a      	lsls	r2, r3, #5
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9e:	6093      	str	r3, [r2, #8]
                    }
                }
                epnum++;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
                ep_intr >>= 1U;
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
            while (ep_intr != 0U) {
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f af62 	bne.w	8001a78 <HAL_PCD_IRQHandler+0x170>
            }
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT)) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fc61 	bl	8005480 <USB_ReadInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bc8:	f040 80db 	bne.w	8001d82 <HAL_PCD_IRQHandler+0x47a>
            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 fc82 	bl	80054da <USB_ReadDevAllInEpInterrupt>
 8001bd6:	62b8      	str	r0, [r7, #40]	; 0x28

            epnum = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24

            while (ep_intr != 0U) {
 8001bdc:	e0cd      	b.n	8001d7a <HAL_PCD_IRQHandler+0x472>
                if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80c2 	beq.w	8001d6e <HAL_PCD_IRQHandler+0x466>
                {
                    epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fca8 	bl	800554a <USB_ReadDevInEPInterrupt>
 8001bfa:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d057      	beq.n	8001cb6 <HAL_PCD_IRQHandler+0x3ae>
                        fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	60fb      	str	r3, [r7, #12]
                        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69f9      	ldr	r1, [r7, #28]
 8001c22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c26:	4013      	ands	r3, r2
 8001c28:	634b      	str	r3, [r1, #52]	; 0x34

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c36:	461a      	mov	r2, r3
 8001c38:	2301      	movs	r3, #1
 8001c3a:	6093      	str	r3, [r2, #8]

                        if (hpcd->Init.dma_enable == 1U) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d132      	bne.n	8001caa <HAL_PCD_IRQHandler+0x3a2>
                            hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	334c      	adds	r3, #76	; 0x4c
 8001c54:	6819      	ldr	r1, [r3, #0]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4403      	add	r3, r0
 8001c64:	3348      	adds	r3, #72	; 0x48
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4419      	add	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4403      	add	r3, r0
 8001c78:	334c      	adds	r3, #76	; 0x4c
 8001c7a:	6019      	str	r1, [r3, #0]

                            /* this is ZLP, so prepare EP0 for next setup */
                            if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U)) {
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d113      	bne.n	8001caa <HAL_PCD_IRQHandler+0x3a2>
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	3354      	adds	r3, #84	; 0x54
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d108      	bne.n	8001caa <HAL_PCD_IRQHandler+0x3a2>
                                /* prepare to rx more setup packets */
                                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	f003 fcaf 	bl	8005608 <USB_EP0_OutStart>
                        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                        hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
                        HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f005 ff8a 	bl	8007bca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                    }
                    if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <HAL_PCD_IRQHandler+0x3ca>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2308      	movs	r3, #8
 8001cd0:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_PCD_IRQHandler+0x3e6>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2310      	movs	r3, #16
 8001cec:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_PCD_IRQHandler+0x402>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d04:	461a      	mov	r2, r3
 8001d06:	2340      	movs	r3, #64	; 0x40
 8001d08:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <HAL_PCD_IRQHandler+0x454>
                        (void)USB_FlushTxFifo(USBx, epnum);
 8001d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d16:	6a38      	ldr	r0, [r7, #32]
 8001d18:	f002 fb90 	bl	800443c <USB_FlushTxFifo>

                        ep = &hpcd->IN_ep[epnum];
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	3338      	adds	r3, #56	; 0x38
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	78db      	ldrb	r3, [r3, #3]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d108      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x442>
                            ep->is_iso_incomplete = 0U;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                            hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f005 ffcd 	bl	8007ce4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d56:	461a      	mov	r2, r3
 8001d58:	2302      	movs	r3, #2
 8001d5a:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_PCD_IRQHandler+0x466>
                        (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fcdb 	bl	8002724 <PCD_WriteEmptyTxFifo>
                    }
                }
                epnum++;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	3301      	adds	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
                ep_intr >>= 1U;
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
            while (ep_intr != 0U) {
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f af2e 	bne.w	8001bde <HAL_PCD_IRQHandler+0x2d6>
            }
        }

        /* Handle Resume Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT)) {
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 fb7a 	bl	8005480 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d96:	d122      	bne.n	8001dde <HAL_PCD_IRQHandler+0x4d6>
            /* Clear the Remote Wake-up Signaling */
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	6053      	str	r3, [r2, #4]

            if (hpcd->LPM_State == LPM_L1) {
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x4c0>
                hpcd->LPM_State = LPM_L0;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
                HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fec3 	bl	8002b4c <HAL_PCDEx_LPM_Callback>
 8001dc6:	e002      	b.n	8001dce <HAL_PCD_IRQHandler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            } else {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->ResumeCallback(hpcd);
#else
                HAL_PCD_ResumeCallback(hpcd);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f005 ff6b 	bl	8007ca4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ddc:	615a      	str	r2, [r3, #20]
        }

        /* Handle Suspend Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP)) {
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fb4c 	bl	8005480 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001df2:	d112      	bne.n	8001e1a <HAL_PCD_IRQHandler+0x512>
            if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS) {
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d102      	bne.n	8001e0a <HAL_PCD_IRQHandler+0x502>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->SuspendCallback(hpcd);
#else
                HAL_PCD_SuspendCallback(hpcd);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f005 ff27 	bl	8007c58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e18:	615a      	str	r2, [r3, #20]
        }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) ||                  \
          defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||                  \
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
        /* Handle Reset Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST)) {
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fb2e 	bl	8005480 <USB_ReadInterrupts>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2e:	f040 80b7 	bne.w	8001fa0 <HAL_PCD_IRQHandler+0x698>
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
            (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2110      	movs	r1, #16
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 faf5 	bl	800443c <USB_FlushTxFifo>

            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e56:	e046      	b.n	8001ee6 <HAL_PCD_IRQHandler+0x5de>
                USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e64:	461a      	mov	r2, r3
 8001e66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e6a:	6093      	str	r3, [r2, #8]
                USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7c:	0151      	lsls	r1, r2, #5
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	440a      	add	r2, r1
 8001e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e8a:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e9e:	6093      	str	r3, [r2, #8]
                USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eb0:	0151      	lsls	r1, r2, #5
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	440a      	add	r2, r1
 8001eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ebe:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed0:	0151      	lsls	r1, r2, #5
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	440a      	add	r2, r1
 8001ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001eda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ede:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d3b3      	bcc.n	8001e58 <HAL_PCD_IRQHandler+0x550>
            }
            USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001efe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f02:	61d3      	str	r3, [r2, #28]

            if (hpcd->Init.use_dedicated_ep1 != 0U) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d016      	beq.n	8001f3a <HAL_PCD_IRQHandler+0x632>
                USBx_DEVICE->DOUTEP1MSK |=
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1c:	f043 030b 	orr.w	r3, r3, #11
 8001f20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                    USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM;

                USBx_DEVICE->DINEP1MSK |=
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f32:	f043 030b 	orr.w	r3, r3, #11
 8001f36:	6453      	str	r3, [r2, #68]	; 0x44
 8001f38:	e015      	b.n	8001f66 <HAL_PCD_IRQHandler+0x65e>
                    USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM;
            } else {
                USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM |
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f50:	6153      	str	r3, [r2, #20]
                                        USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM |
                                        USB_OTG_DOEPMSK_NAKM;

                USBx_DEVICE->DIEPMSK |=
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f60:	f043 030b 	orr.w	r3, r3, #11
 8001f64:	6113      	str	r3, [r2, #16]
                    USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM;
            }

            /* Set Default Address to 0 */
            USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f78:	6013      	str	r3, [r2, #0]

            /* setup EP0 to receive SETUP packets */
            (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	b2d9      	uxtb	r1, r3
                                   (uint8_t *)hpcd->Setup);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
            (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f003 fb3c 	bl	8005608 <USB_EP0_OutStart>

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f9e:	615a      	str	r2, [r3, #20]
        }

        /* Handle Enumeration done Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE)) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 fa6b 	bl	8005480 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb4:	d124      	bne.n	8002000 <HAL_PCD_IRQHandler+0x6f8>
            (void)USB_ActivateSetup(hpcd->Instance);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fb01 	bl	80055c2 <USB_ActivateSetup>
            hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 fab6 	bl	8004536 <USB_GetDevSpeed>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60da      	str	r2, [r3, #12]

            /* Set USB Turnaround time */
            (void)USB_SetTurnaroundTime(hpcd->Instance, HAL_RCC_GetHCLKFreq(),
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681c      	ldr	r4, [r3, #0]
 8001fd6:	f001 f9e9 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 8001fda:	4601      	mov	r1, r0
                                        (uint8_t)hpcd->Init.speed);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
            (void)USB_SetTurnaroundTime(hpcd->Instance, HAL_RCC_GetHCLKFreq(),
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f001 ffb5 	bl	8003f54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->ResetCallback(hpcd);
#else
            HAL_PCD_ResetCallback(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f005 fe15 	bl	8007c1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ffe:	615a      	str	r2, [r3, #20]
        }

        /* Handle SOF Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF)) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f003 fa3b 	bl	8005480 <USB_ReadInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b08      	cmp	r3, #8
 8002012:	d10a      	bne.n	800202a <HAL_PCD_IRQHandler+0x722>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->SOFCallback(hpcd);
#else
            HAL_PCD_SOFCallback(hpcd);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f005 fdf2 	bl	8007bfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f002 0208 	and.w	r2, r2, #8
 8002028:	615a      	str	r2, [r3, #20]
        }

        /* Handle Global OUT NAK effective Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF)) {
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fa26 	bl	8005480 <USB_ReadInterrupts>
 8002034:	4603      	mov	r3, r0
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b80      	cmp	r3, #128	; 0x80
 800203c:	d122      	bne.n	8002084 <HAL_PCD_IRQHandler+0x77c>
            USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	619a      	str	r2, [r3, #24]

            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 800204a:	2301      	movs	r3, #1
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	e014      	b.n	800207a <HAL_PCD_IRQHandler+0x772>
                if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U) {
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_PCD_IRQHandler+0x76c>
                    /* Abort current transaction and disable the EP */
                    (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	b2db      	uxtb	r3, r3
 800206c:	4619      	mov	r1, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fb27 	bl	80026c2 <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	3301      	adds	r3, #1
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	429a      	cmp	r2, r3
 8002082:	d3e5      	bcc.n	8002050 <HAL_PCD_IRQHandler+0x748>
                }
            }
        }

        /* Handle Incomplete ISO IN Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR)) {
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f003 f9f9 	bl	8005480 <USB_ReadInterrupts>
 800208e:	4603      	mov	r3, r0
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002098:	d13b      	bne.n	8002112 <HAL_PCD_IRQHandler+0x80a>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 800209a:	2301      	movs	r3, #1
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	e02b      	b.n	80020f8 <HAL_PCD_IRQHandler+0x7f0>
                RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]

                if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3340      	adds	r3, #64	; 0x40
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d115      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x7ea>
                    ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)) {
 80020c6:	69bb      	ldr	r3, [r7, #24]
                if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	da12      	bge.n	80020f2 <HAL_PCD_IRQHandler+0x7ea>
                    hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	333f      	adds	r3, #63	; 0x3f
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]

                    /* Abort current transaction and disable the EP */
                    (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	4619      	mov	r1, r3
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fae8 	bl	80026c2 <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3ce      	bcc.n	80020a0 <HAL_PCD_IRQHandler+0x798>
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002110:	615a      	str	r2, [r3, #20]
        }

        /* Handle Incomplete ISO OUT Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 f9b2 	bl	8005480 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002126:	d155      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x8cc>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8002128:	2301      	movs	r3, #1
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
 800212c:	e045      	b.n	80021ba <HAL_PCD_IRQHandler+0x8b2>
                RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]

                if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d12e      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x8ac>
                    ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002156:	69bb      	ldr	r3, [r7, #24]
                if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	da2b      	bge.n	80021b4 <HAL_PCD_IRQHandler+0x8ac>
                    ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U))) {
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002168:	f003 0301 	and.w	r3, r3, #1
                    ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800216c:	429a      	cmp	r2, r3
 800216e:	d121      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x8ac>
                    hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]

                    USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	619a      	str	r2, [r3, #24]

                    if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U) {
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x8ac>
                        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b0:	6053      	str	r3, [r2, #4]
                        break;
 80021b2:	e007      	b.n	80021c4 <HAL_PCD_IRQHandler+0x8bc>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	3301      	adds	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3b4      	bcc.n	800212e <HAL_PCD_IRQHandler+0x826>
                    }
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80021d2:	615a      	str	r2, [r3, #20]
        }

        /* Handle Connection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT)) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 f951 	bl	8005480 <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e8:	d10a      	bne.n	8002200 <HAL_PCD_IRQHandler+0x8f8>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->ConnectCallback(hpcd);
#else
            HAL_PCD_ConnectCallback(hpcd);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f005 fd8c 	bl	8007d08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021fe:	615a      	str	r2, [r3, #20]
        }

        /* Handle Disconnection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT)) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 f93b 	bl	8005480 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b04      	cmp	r3, #4
 8002212:	d115      	bne.n	8002240 <HAL_PCD_IRQHandler+0x938>
            RegVal = hpcd->Instance->GOTGINT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]

            if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET) {
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_PCD_IRQHandler+0x924>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DisconnectCallback(hpcd);
#else
                HAL_PCD_DisconnectCallback(hpcd);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f005 fd7c 	bl	8007d24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            hpcd->Instance->GOTGINT |= RegVal;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	430a      	orrs	r2, r1
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	e000      	b.n	8002240 <HAL_PCD_IRQHandler+0x938>
            return;
 800223e:	bf00      	nop
        }
    }
}
 8002240:	3734      	adds	r7, #52	; 0x34
 8002242:	46bd      	mov	sp, r7
 8002244:	bd90      	pop	{r4, r7, pc}

08002246 <HAL_PCD_SetAddress>:
 * @brief  Set the USB Device address.
 * @param  hpcd PCD handle
 * @param  address new device address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef * hpcd, uint8_t address) {
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	70fb      	strb	r3, [r7, #3]
    __HAL_LOCK(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_PCD_SetAddress+0x1a>
 800225c:	2302      	movs	r3, #2
 800225e:	e013      	b.n	8002288 <HAL_PCD_SetAddress+0x42>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    hpcd->USB_Address = address;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    (void)USB_SetDevAddress(hpcd->Instance, address);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f003 f899 	bl	80053b0 <USB_SetDevAddress>
    __HAL_UNLOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_PCD_EP_Open>:
 * @param  ep_mps endpoint max packet size
 * @param  ep_type endpoint type
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint16_t ep_mps,
                                  uint8_t ep_type) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	70fb      	strb	r3, [r7, #3]
 80022a2:	460b      	mov	r3, r1
 80022a4:	803b      	strh	r3, [r7, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef ret = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 80022ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	da0f      	bge.n	80022d6 <HAL_PCD_EP_Open+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f003 020f 	and.w	r2, r3, #15
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	3338      	adds	r3, #56	; 0x38
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	3304      	adds	r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	705a      	strb	r2, [r3, #1]
 80022d4:	e00f      	b.n	80022f6 <HAL_PCD_EP_Open+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 020f 	and.w	r2, r3, #15
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	705a      	strb	r2, [r3, #1]
    }

    ep->num = ep_addr & EP_ADDR_MSK;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	701a      	strb	r2, [r3, #0]
    ep->maxpacket = ep_mps;
 8002302:	883a      	ldrh	r2, [r7, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	60da      	str	r2, [r3, #12]
    ep->type = ep_type;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	78ba      	ldrb	r2, [r7, #2]
 800230c:	711a      	strb	r2, [r3, #4]

    if (ep->is_in != 0U) {
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	785b      	ldrb	r3, [r3, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d004      	beq.n	8002320 <HAL_PCD_EP_Open+0x90>
        /* Assign a Tx FIFO */
        ep->tx_fifo_num = ep->num;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	811a      	strh	r2, [r3, #8]
    }
    /* Set initial data PID. */
    if (ep_type == EP_TYPE_BULK) {
 8002320:	78bb      	ldrb	r3, [r7, #2]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d102      	bne.n	800232c <HAL_PCD_EP_Open+0x9c>
        ep->data_pid_start = 0U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	715a      	strb	r2, [r3, #5]
    }

    __HAL_LOCK(hpcd);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_PCD_EP_Open+0xaa>
 8002336:	2302      	movs	r3, #2
 8002338:	e00e      	b.n	8002358 <HAL_PCD_EP_Open+0xc8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	4618      	mov	r0, r3
 800234a:	f002 f919 	bl	8004580 <USB_ActivateEndpoint>
    __HAL_UNLOCK(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    return ret;
 8002356:	7afb      	ldrb	r3, [r7, #11]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_PCD_EP_Close>:
 * @brief  Deactivate an endpoint.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 800236c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0f      	bge.n	8002394 <HAL_PCD_EP_Close+0x34>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 020f 	and.w	r2, r3, #15
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3338      	adds	r3, #56	; 0x38
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	705a      	strb	r2, [r3, #1]
 8002392:	e00f      	b.n	80023b4 <HAL_PCD_EP_Close+0x54>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	3304      	adds	r3, #4
 80023ac:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	705a      	strb	r2, [r3, #1]
    }
    ep->num = ep_addr & EP_ADDR_MSK;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_PCD_EP_Close+0x6e>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e00e      	b.n	80023ec <HAL_PCD_EP_Close+0x8c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68f9      	ldr	r1, [r7, #12]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 f957 	bl	8004690 <USB_DeactivateEndpoint>
    __HAL_UNLOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_PCD_EP_Receive>:
 * @param  pBuf pointer to the reception buffer
 * @param  len amount of data to be received
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint8_t * pBuf,
                                     uint32_t len) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	460b      	mov	r3, r1
 8002402:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	611a      	str	r2, [r3, #16]
    ep->xfer_len = len;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	619a      	str	r2, [r3, #24]
    ep->xfer_count = 0U;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
    ep->is_in = 0U;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2200      	movs	r2, #0
 8002434:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	b2da      	uxtb	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <HAL_PCD_EP_Receive+0x5c>
        ep->dma_addr = (uint32_t)pBuf;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	615a      	str	r2, [r3, #20]
    }

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 8002450:	7afb      	ldrb	r3, [r7, #11]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_PCD_EP_Receive+0x7a>
        (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6979      	ldr	r1, [r7, #20]
 8002468:	f002 fc36 	bl	8004cd8 <USB_EP0StartXfer>
 800246c:	e008      	b.n	8002480 <HAL_PCD_EP_Receive+0x8c>
    } else {
        (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	6979      	ldr	r1, [r7, #20]
 800247c:	f002 f9e4 	bl	8004848 <USB_EPStartXfer>
    }

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_PCD_EP_GetRxCount>:
 * @brief  Get Received Data Size
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval Data Size
 */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	70fb      	strb	r3, [r7, #3]
    return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80024ac:	681b      	ldr	r3, [r3, #0]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_PCD_EP_Transmit>:
 * @param  pBuf pointer to the transmission buffer
 * @param  len amount of data to be sent
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint8_t * pBuf,
                                      uint32_t len) {
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	460b      	mov	r3, r1
 80024c8:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ca:	7afb      	ldrb	r3, [r7, #11]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	3338      	adds	r3, #56	; 0x38
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4413      	add	r3, r2
 80024de:	3304      	adds	r3, #4
 80024e0:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	611a      	str	r2, [r3, #16]
    ep->xfer_len = len;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	619a      	str	r2, [r3, #24]
    ep->xfer_count = 0U;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
    ep->is_in = 1U;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2201      	movs	r2, #1
 80024f8:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	b2da      	uxtb	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d102      	bne.n	8002514 <HAL_PCD_EP_Transmit+0x5a>
        ep->dma_addr = (uint32_t)pBuf;
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	615a      	str	r2, [r3, #20]
    }

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 8002514:	7afb      	ldrb	r3, [r7, #11]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_PCD_EP_Transmit+0x78>
        (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6979      	ldr	r1, [r7, #20]
 800252c:	f002 fbd4 	bl	8004cd8 <USB_EP0StartXfer>
 8002530:	e008      	b.n	8002544 <HAL_PCD_EP_Transmit+0x8a>
    } else {
        (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	6979      	ldr	r1, [r7, #20]
 8002540:	f002 f982 	bl	8004848 <USB_EPStartXfer>
    }

    return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_PCD_EP_SetStall>:
 * @brief  Set a STALL condition over an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints) {
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	f003 020f 	and.w	r2, r3, #15
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	d901      	bls.n	800256c <HAL_PCD_EP_SetStall+0x1e>
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e050      	b.n	800260e <HAL_PCD_EP_SetStall+0xc0>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 800256c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002570:	2b00      	cmp	r3, #0
 8002572:	da0f      	bge.n	8002594 <HAL_PCD_EP_SetStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f003 020f 	and.w	r2, r3, #15
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	3338      	adds	r3, #56	; 0x38
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	3304      	adds	r3, #4
 800258a:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	705a      	strb	r2, [r3, #1]
 8002592:	e00d      	b.n	80025b0 <HAL_PCD_EP_SetStall+0x62>
    } else {
        ep = &hpcd->OUT_ep[ep_addr];
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	3304      	adds	r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 1U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_PCD_EP_SetStall+0x82>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e01e      	b.n	800260e <HAL_PCD_EP_SetStall+0xc0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    (void)USB_EPSetStall(hpcd->Instance, ep);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68f9      	ldr	r1, [r7, #12]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fe12 	bl	8005208 <USB_EPSetStall>

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_PCD_EP_SetStall+0xb6>
        (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	b2d9      	uxtb	r1, r3
                               (uint8_t *)hpcd->Setup);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
        (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025fe:	461a      	mov	r2, r3
 8002600:	f003 f802 	bl	8005608 <USB_EP0_OutStart>
    }

    __HAL_UNLOCK(hpcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_PCD_EP_ClrStall>:
 * @brief  Clear a STALL condition over in an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints) {
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	f003 020f 	and.w	r2, r3, #15
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	d901      	bls.n	8002634 <HAL_PCD_EP_ClrStall+0x1e>
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e042      	b.n	80026ba <HAL_PCD_EP_ClrStall+0xa4>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 8002634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002638:	2b00      	cmp	r3, #0
 800263a:	da0f      	bge.n	800265c <HAL_PCD_EP_ClrStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	f003 020f 	and.w	r2, r3, #15
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	3338      	adds	r3, #56	; 0x38
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	3304      	adds	r3, #4
 8002652:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	705a      	strb	r2, [r3, #1]
 800265a:	e00f      	b.n	800267c <HAL_PCD_EP_ClrStall+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	f003 020f 	and.w	r2, r3, #15
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	3304      	adds	r3, #4
 8002674:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 0U;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_PCD_EP_ClrStall+0x86>
 8002698:	2302      	movs	r3, #2
 800269a:	e00e      	b.n	80026ba <HAL_PCD_EP_ClrStall+0xa4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    (void)USB_EPClearStall(hpcd->Instance, ep);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 fe1a 	bl	80052e4 <USB_EPClearStall>
    __HAL_UNLOCK(hpcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_PCD_EP_Abort>:
 * @brief  Abort an USB EP transaction.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret;
    PCD_EPTypeDef * ep;

    if ((0x80U & ep_addr) == 0x80U) {
 80026ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	da0c      	bge.n	80026f0 <HAL_PCD_EP_Abort+0x2e>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	f003 020f 	and.w	r2, r3, #15
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	3338      	adds	r3, #56	; 0x38
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	3304      	adds	r3, #4
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e00c      	b.n	800270a <HAL_PCD_EP_Abort+0x48>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	f003 020f 	and.w	r2, r3, #15
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	60fb      	str	r3, [r7, #12]
    }

    /* Stop Xfer */
    ret = USB_EPStopXfer(hpcd->Instance, ep);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68f9      	ldr	r1, [r7, #12]
 8002710:	4618      	mov	r0, r3
 8002712:	f002 fc39 	bl	8004f88 <USB_EPStopXfer>
 8002716:	4603      	mov	r3, r0
 8002718:	72fb      	strb	r3, [r7, #11]

    return ret;
 800271a:	7afb      	ldrb	r3, [r7, #11]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <PCD_WriteEmptyTxFifo>:
 * @brief  Check FIFO for the next packet to be loaded.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af02      	add	r7, sp, #8
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
    USB_OTG_EPTypeDef * ep;
    uint32_t len;
    uint32_t len32b;
    uint32_t fifoemptymsk;

    ep = &hpcd->IN_ep[epnum];
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	3338      	adds	r3, #56	; 0x38
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	60fb      	str	r3, [r7, #12]

    if (ep->xfer_count > ep->xfer_len) {
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	429a      	cmp	r2, r3
 8002756:	d901      	bls.n	800275c <PCD_WriteEmptyTxFifo+0x38>
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e06c      	b.n	8002836 <PCD_WriteEmptyTxFifo+0x112>
    }

    len = ep->xfer_len - ep->xfer_count;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket) {
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	429a      	cmp	r2, r3
 8002770:	d902      	bls.n	8002778 <PCD_WriteEmptyTxFifo+0x54>
        len = ep->maxpacket;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	61fb      	str	r3, [r7, #28]
    }

    len32b = (len + 3U) / 4U;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3303      	adds	r3, #3
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	61bb      	str	r3, [r7, #24]

    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002780:	e02b      	b.n	80027da <PCD_WriteEmptyTxFifo+0xb6>
           (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
        /* Write the FIFO */
        len = ep->xfer_len - ep->xfer_count;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	61fb      	str	r3, [r7, #28]

        if (len > ep->maxpacket) {
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	429a      	cmp	r2, r3
 8002796:	d902      	bls.n	800279e <PCD_WriteEmptyTxFifo+0x7a>
            len = ep->maxpacket;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	61fb      	str	r3, [r7, #28]
        }
        len32b = (len + 3U) / 4U;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3303      	adds	r3, #3
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]

        (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6919      	ldr	r1, [r3, #16]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	b298      	uxth	r0, r3
                              (uint8_t)hpcd->Init.dma_enable);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
        (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4603      	mov	r3, r0
 80027bc:	6978      	ldr	r0, [r7, #20]
 80027be:	f002 fc8d 	bl	80050dc <USB_WritePacket>

        ep->xfer_buff += len;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	441a      	add	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	611a      	str	r2, [r3, #16]
        ep->xfer_count += len;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	441a      	add	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	621a      	str	r2, [r3, #32]
    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d809      	bhi.n	8002804 <PCD_WriteEmptyTxFifo+0xe0>
           (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	699b      	ldr	r3, [r3, #24]
    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d203      	bcs.n	8002804 <PCD_WriteEmptyTxFifo+0xe0>
           (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1be      	bne.n	8002782 <PCD_WriteEmptyTxFifo+0x5e>
    }

    if (ep->xfer_len <= ep->xfer_count) {
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	429a      	cmp	r2, r3
 800280e:	d811      	bhi.n	8002834 <PCD_WriteEmptyTxFifo+0x110>
        fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	2201      	movs	r2, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	60bb      	str	r3, [r7, #8]
        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	43db      	mvns	r3, r3
 800282a:	6939      	ldr	r1, [r7, #16]
 800282c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002830:	4013      	ands	r3, r2
 8002832:	634b      	str	r3, [r1, #52]	; 0x34
    }

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <PCD_EP_OutXfrComplete_int>:
 * @brief  process EP OUT transfer complete interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    USB_OTG_EPTypeDef * ep;
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	61fb      	str	r3, [r7, #28]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	61bb      	str	r3, [r7, #24]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	333c      	adds	r3, #60	; 0x3c
 8002858:	3304      	adds	r3, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	613b      	str	r3, [r7, #16]

    if (hpcd->Init.dma_enable == 1U) {
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d17b      	bne.n	800296e <PCD_EP_OutXfrComplete_int+0x12e>
        if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <PCD_EP_OutXfrComplete_int+0x6c>
        {
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	4a61      	ldr	r2, [pc, #388]	; (8002a08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	f240 80b9 	bls.w	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
                ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80b3 	beq.w	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a2:	461a      	mov	r2, r3
 80028a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028a8:	6093      	str	r3, [r2, #8]
 80028aa:	e0a7      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <PCD_EP_OutXfrComplete_int+0x8a>
        {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c2:	461a      	mov	r2, r3
 80028c4:	2320      	movs	r3, #32
 80028c6:	6093      	str	r3, [r2, #8]
 80028c8:	e098      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
        } else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U) {
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 8093 	bne.w	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4a4b      	ldr	r2, [pc, #300]	; (8002a08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d90f      	bls.n	80028fe <PCD_EP_OutXfrComplete_int+0xbe>
                ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <PCD_EP_OutXfrComplete_int+0xbe>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f4:	461a      	mov	r2, r3
 80028f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fa:	6093      	str	r3, [r2, #8]
 80028fc:	e07e      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                ep = &hpcd->OUT_ep[epnum];
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	60fb      	str	r3, [r7, #12]

                /* out data packet received over EP */
                ep->xfer_count =
                    ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	0159      	lsls	r1, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	440b      	add	r3, r1
 8002920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292a:	1ad2      	subs	r2, r2, r3
                ep->xfer_count =
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	621a      	str	r2, [r3, #32]

                if (epnum == 0U) {
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d114      	bne.n	8002960 <PCD_EP_OutXfrComplete_int+0x120>
                    if (ep->xfer_len == 0U) {
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <PCD_EP_OutXfrComplete_int+0x112>
                        /* this is ZLP, so prepare EP0 for next setup */
                        (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002948:	461a      	mov	r2, r3
 800294a:	2101      	movs	r1, #1
 800294c:	f002 fe5c 	bl	8005608 <USB_EP0_OutStart>
 8002950:	e006      	b.n	8002960 <PCD_EP_OutXfrComplete_int+0x120>
                    } else {
                        ep->xfer_buff += ep->xfer_count;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	441a      	add	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	611a      	str	r2, [r3, #16]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f005 f914 	bl	8007b94 <HAL_PCD_DataOutStageCallback>
 800296c:	e046      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else {
            /* ... */
        }
    } else {
        if (gSNPSiD == USB_OTG_CORE_ID_310A) {
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d124      	bne.n	80029c0 <PCD_EP_OutXfrComplete_int+0x180>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX) {
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <PCD_EP_OutXfrComplete_int+0x156>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298c:	461a      	mov	r2, r3
 800298e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002992:	6093      	str	r3, [r2, #8]
 8002994:	e032      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <PCD_EP_OutXfrComplete_int+0x172>
                    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ac:	461a      	mov	r2, r3
 80029ae:	2320      	movs	r3, #32
 80029b0:	6093      	str	r3, [r2, #8]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f005 f8eb 	bl	8007b94 <HAL_PCD_DataOutStageCallback>
 80029be:	e01d      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
        } else {
            if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U)) {
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d114      	bne.n	80029f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <PCD_EP_OutXfrComplete_int+0x1b0>
                /* this is ZLP, so prepare EP0 for next setup */
                (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029e8:	461a      	mov	r2, r3
 80029ea:	2100      	movs	r1, #0
 80029ec:	f002 fe0c 	bl	8005608 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f005 f8cc 	bl	8007b94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
    }

    return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	4f54300a 	.word	0x4f54300a
 8002a0c:	4f54310a 	.word	0x4f54310a

08002a10 <PCD_EP_OutSetupPacket_int>:
 * @brief  process EP OUT setup packet received interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	613b      	str	r3, [r7, #16]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	333c      	adds	r3, #60	; 0x3c
 8002a28:	3304      	adds	r3, #4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	60bb      	str	r3, [r7, #8]

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d90e      	bls.n	8002a64 <PCD_EP_OutSetupPacket_int+0x54>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d009      	beq.n	8002a64 <PCD_EP_OutSetupPacket_int+0x54>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a62:	6093      	str	r3, [r2, #8]

    /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SetupStageCallback(hpcd);
#else
    HAL_PCD_SetupStageCallback(hpcd);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f005 f883 	bl	8007b70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U)) {
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d90c      	bls.n	8002a8c <PCD_EP_OutSetupPacket_int+0x7c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d108      	bne.n	8002a8c <PCD_EP_OutSetupPacket_int+0x7c>
        (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a84:	461a      	mov	r2, r3
 8002a86:	2101      	movs	r1, #1
 8002a88:	f002 fdbe 	bl	8005608 <USB_EP0_OutStart>
    }

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	4f54300a 	.word	0x4f54300a

08002a9c <HAL_PCDEx_SetTxFiFo>:
 * @param  hpcd PCD handle
 * @param  fifo The number of Tx fifo
 * @param  size Fifo size
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef * hpcd, uint8_t fifo, uint16_t size) {
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	803b      	strh	r3, [r7, #0]
           --> Txn should be configured with the minimum space of 16 words
       The FIFO is used optimally when used TxFIFOs are allocated in the top
           of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
       When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

    Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	60bb      	str	r3, [r7, #8]

    if (fifo == 0U) {
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d107      	bne.n	8002aca <HAL_PCDEx_SetTxFiFo+0x2e>
        hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002aba:	883b      	ldrh	r3, [r7, #0]
 8002abc:	0419      	lsls	r1, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac8:	e028      	b.n	8002b1c <HAL_PCDEx_SetTxFiFo+0x80>
    } else {
        Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	0c1b      	lsrs	r3, r3, #16
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e00d      	b.n	8002afa <HAL_PCDEx_SetTxFiFo+0x5e>
            Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	3340      	adds	r3, #64	; 0x40
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4413      	add	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	3301      	adds	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d3ec      	bcc.n	8002ade <HAL_PCDEx_SetTxFiFo+0x42>
        }

        /* Multiply Tx_Size by 2 to get higher performance */
        hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b04:	883b      	ldrh	r3, [r7, #0]
 8002b06:	0418      	lsls	r0, r3, #16
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	4302      	orrs	r2, r0
 8002b14:	3340      	adds	r3, #64	; 0x40
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_PCDEx_SetRxFiFo>:
 * @brief  Set Rx FIFO
 * @param  hpcd PCD handle
 * @param  size Size of Rx fifo
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef * hpcd, uint16_t size) {
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	807b      	strh	r3, [r7, #2]
    hpcd->Instance->GRXFSIZ = size;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_PCDEx_LPM_Callback>:
 * @brief  Send LPM message to user layer callback.
 * @param  hpcd PCD handle
 * @param  msg LPM message
 * @retval HAL status
 */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef * hpcd, PCD_LPM_MsgTypeDef msg) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
    UNUSED(msg);

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_PCDEx_LPM_Callback could be implemented in the user file
     */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef * RCC_OscInitStruct) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart, pll_config;

    /* Check Null pointer */
    if (RCC_OscInitStruct == NULL) {
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e267      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
    }

    /* Check the parameters */
    assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
    /*------------------------------- HSE Configuration ------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d075      	beq.n	8002c6e <HAL_RCC_OscConfig+0x10a>
        /* Check the parameters */
        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not
         * disabled */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8002b82:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x44>
            ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) &&
 8002b8e:	4b85      	ldr	r3, [pc, #532]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
             ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8002b9a:	4b82      	ldr	r3, [pc, #520]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
            ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) &&
 8002ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) &&
 8002ba8:	4b7e      	ldr	r3, [pc, #504]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x108>
                (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) &&
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d157      	bne.n	8002c6c <HAL_RCC_OscConfig+0x108>
                return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e242      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
            }
        } else {
            /* Set the new HSE configuration ---------------------------------------*/
            __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x74>
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a75      	ldr	r2, [pc, #468]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x98>
 8002be2:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6f      	ldr	r2, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6c      	ldr	r2, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a68      	ldr	r2, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a65      	ldr	r2, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

            /* Check the HSE State */
            if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0xe0>
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002c1c:	f7fe f878 	bl	8000d10 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xd2>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8002c24:	f7fe f874 	bl	8000d10 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xd2>
                        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e207      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002c36:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xc0>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
                    }
                }
            } else {
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002c44:	f7fe f864 	bl	8000d10 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is bypassed or disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xfa>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8002c4c:	f7fe f860 	bl	8000d10 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xfa>
                        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1f3      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0xe8>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) &&
 8002c6c:	bf00      	nop
                }
            }
        }
    }
    /*----------------------------- HSI Configuration --------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1de>
        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system
         * clock */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCC_OscConfig+0x13a>
            ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) &&
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d11c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
             ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
            ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) &&
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d116      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
            /* When HSI is used as system clock it will not disabled */
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) &&
 8002c9e:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
                (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) &&
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
                return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e1c7      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
            }
            /* Otherwise, just the calibration is allowed */
            else {
                /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4937      	ldr	r1, [pc, #220]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) &&
 8002cca:	e03a      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
            }
        } else {
            /* Check the HSI State */
            if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1b2>
                /* Enable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_ENABLE();
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8002cda:	f7fe f819 	bl	8000d10 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x190>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8002ce2:	f7fe f815 	bl	8000d10 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x190>
                        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1a8      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17e>
                    }
                }

                /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4925      	ldr	r1, [pc, #148]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
            } else {
                /* Disable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_DISABLE();
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8002d1c:	f7fd fff8 	bl	8000d10 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8002d24:	f7fd fff4 	bl	8000d10 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
                        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e187      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x1c0>
                }
            }
        }
    }
    /*------------------------------ LSI Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d036      	beq.n	8002dbc <HAL_RCC_OscConfig+0x258>
        /* Check the parameters */
        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

        /* Check the LSI State */
        if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCC_OscConfig+0x220>
            /* Enable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d5c:	f7fd ffd8 	bl	8000d10 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x212>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002d64:	f7fd ffd4 	bl	8000d10 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x212>
                    return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e167      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x200>
 8002d82:	e01b      	b.n	8002dbc <HAL_RCC_OscConfig+0x258>
                }
            }
        } else {
            /* Disable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_DISABLE();
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

            /* Get Start Tick */
            tickstart = HAL_GetTick();
 8002d8a:	f7fd ffc1 	bl	8000d10 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002d90:	e00e      	b.n	8002db0 <HAL_RCC_OscConfig+0x24c>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002d92:	f7fd ffbd 	bl	8000d10 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d907      	bls.n	8002db0 <HAL_RCC_OscConfig+0x24c>
                    return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e150      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
 8002dac:	42470e80 	.word	0x42470e80
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002db0:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ea      	bne.n	8002d92 <HAL_RCC_OscConfig+0x22e>
                }
            }
        }
    }
    /*------------------------------ LSE Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8097 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x394>
        FlagStatus pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
        /* Check the parameters */
        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

        /* Update LSE configuration in Backup Domain control register    */
        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8002dce:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_RCC_OscConfig+0x296>
            __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	4b7d      	ldr	r3, [pc, #500]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a7c      	ldr	r2, [pc, #496]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	4b7a      	ldr	r3, [pc, #488]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
            pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
        }

        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002dfa:	4b77      	ldr	r3, [pc, #476]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2d4>
            /* Enable write access to Backup domain */
            SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a73      	ldr	r2, [pc, #460]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	6013      	str	r3, [r2, #0]

            /* Wait for Backup domain Write protection disable */
            tickstart = HAL_GetTick();
 8002e12:	f7fd ff7d 	bl	8000d10 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
                if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8002e1a:	f7fd ff79 	bl	8000d10 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
                    return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e10c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2b6>
                }
            }
        }

        /* Set the new LSE configuration -----------------------------------------*/
        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2ea>
 8002e40:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a63      	ldr	r2, [pc, #396]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x30c>
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	4b5c      	ldr	r3, [pc, #368]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a5b      	ldr	r2, [pc, #364]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e70:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a54      	ldr	r2, [pc, #336]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
        /* Check the LSE State */
        if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_RCC_OscConfig+0x358>
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e90:	f7fd ff3e 	bl	8000d10 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x34a>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002e98:	f7fd ff3a 	bl	8000d10 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x34a>
                    return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0cb      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RCC_OscConfig+0x334>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x382>
                }
            }
        } else {
            /* Get Start Tick */
            tickstart = HAL_GetTick();
 8002ebc:	f7fd ff28 	bl	8000d10 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x376>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002ec4:	f7fd ff24 	bl	8000d10 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x376>
                    return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0b5      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x360>
                }
            }
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET) {
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x394>
            __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	4a38      	ldr	r2, [pc, #224]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6413      	str	r3, [r2, #64]	; 0x40
        }
    }
    /*-------------------------------- PLL Configuration -----------------------*/
    /* Check the parameters */
    assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
    if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a1 	beq.w	8003044 <HAL_RCC_OscConfig+0x4e0>
        /* Check if the PLL is used as system clock or not */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d05c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x464>
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d141      	bne.n	8002f9a <HAL_RCC_OscConfig+0x436>
                assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
                assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
                assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002f1c:	f7fd fef8 	bl	8000d10 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002f24:	f7fd fef4 	bl	8000d10 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
                        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e087      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002f36:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
                    }
                }

                /* Configure the main PLL clock source, multiplication and division factors. */
                WRITE_REG(RCC->PLLCFGR,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
                          (RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM |
                           (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) |
                           (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
                           (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
                /* Enable the main PLL. */
                __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002f72:	f7fd fecd 	bl	8000d10 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x428>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002f7a:	f7fd fec9 	bl	8000d10 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x428>
                        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e05c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x416>
 8002f98:	e054      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            } else {
                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002fa0:	f7fd feb6 	bl	8000d10 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x456>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002fa8:	f7fd feb2 	bl	8000d10 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x456>
                        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e045      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x444>
 8002fc6:	e03d      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            }
        } else {
            /* Check if there is a request to disable the PLL used as System clock source */
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
                return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e038      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	42470060 	.word	0x42470060
            } else {
                /* Do not return HAL_ERROR if request repeats the current configuration */
                pll_config = RCC->PLLCFGR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x4ec>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) !=
                     (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) !=
                     (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d028      	beq.n	8003040 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) !=
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
                     RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d121      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
                                                                   << RCC_PLLCFGR_PLLM_Pos) ||
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
                     RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d11a      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN)
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6a52      	ldr	r2, [r2, #36]	; 0x24
                                                                   << RCC_PLLCFGR_PLLN_Pos) ||
 8003016:	0192      	lsls	r2, r2, #6
                                                                   << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	4293      	cmp	r3, r2
 800301a:	d111      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) !=
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
                     (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	041b      	lsls	r3, r3, #16
                                                                   << RCC_PLLCFGR_PLLN_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) !=
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
                     (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	061b      	lsls	r3, r3, #24
                     (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x4e0>
#endif
                {
                    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
                }
            }
        }
    }
    return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_RCC_ClockConfig>:
 * @note   Depending on the device voltage range, the software has to set correctly
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef * RCC_ClkInitStruct, uint32_t FLatency) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
    uint32_t tickstart;

    /* Check Null pointer */
    if (RCC_ClkInitStruct == NULL) {
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0cc      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
      must be correctly programmed according to the frequency of the CPU clock
      (HCLK) and the supply voltage of the device. */

    /* Increasing the number of wait states because of higher CPU frequency */
    if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90c      	bls.n	8003090 <HAL_RCC_ClockConfig+0x3c>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b65      	ldr	r3, [pc, #404]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
        memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x3c>
            return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_ClockConfig+0x8a>
        /* Set the highest APBx dividers in order to ensure that we do not go through
           a non-spec phase whatever we decrease or increase HCLK. */
        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x60>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b59      	ldr	r3, [pc, #356]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a58      	ldr	r2, [pc, #352]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b2:	6093      	str	r3, [r2, #8]
        }

        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x78>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ca:	6093      	str	r3, [r2, #8]
        }

        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	494d      	ldr	r1, [pc, #308]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d044      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

        /* HSE is selected as System Clock Source */
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xae>
            /* Check the HSE ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* PLL is selected as System Clock Source */
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_ClockConfig+0xbe>
                 (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 800310e:	2b03      	cmp	r3, #3
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
            /* Check the PLL ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8003112:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* HSI is selected as System Clock Source */
        else {
            /* Check the HSI ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e067      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
            }
        }

        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4934      	ldr	r1, [pc, #208]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fd fde4 	bl	8000d10 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
               (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
            if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 800314c:	f7fd fde0 	bl	8000d10 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
                return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e04f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
               (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
            }
        }
    }

    /* Decreasing the number of wait states because of lower CPU frequency */
    if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20c      	bcs.n	800319c <HAL_RCC_ClockConfig+0x148>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
        memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x148>
            return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- PCLK1 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x166>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4916      	ldr	r1, [pc, #88]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
    }

    /*-------------------------- PCLK2 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x186>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	490e      	ldr	r1, [pc, #56]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
    }

    /* Update the SystemCoreClock global variable */
    SystemCoreClock = HAL_RCC_GetSysClockFreq() >>
 80031da:	f000 f821 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031de:	4602      	mov	r2, r0
                      AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	490a      	ldr	r1, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	5ccb      	ldrb	r3, [r1, r3]
    SystemCoreClock = HAL_RCC_GetSysClockFreq() >>
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	6013      	str	r3, [r2, #0]

    /* Configure the source of time base considering new system clocks settings */
    HAL_InitTick(uwTickPrio);
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd fd44 	bl	8000c88 <HAL_InitTick>

    return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00
 8003210:	40023800 	.word	0x40023800
 8003214:	08008aa0 	.word	0x08008aa0
 8003218:	20000000 	.word	0x20000000
 800321c:	20000004 	.word	0x20000004

08003220 <HAL_RCC_GetSysClockFreq>:
 * incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8003220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b090      	sub	sp, #64	; 0x40
 8003226:	af00      	add	r7, sp, #0
    uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
 800322c:	2300      	movs	r3, #0
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003230:	2300      	movs	r3, #0
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t sysclockfreq = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Get SYSCLK source -------------------------------------------------------*/
    switch (RCC->CFGR & RCC_CFGR_SWS) {
 8003238:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d00d      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x40>
 8003244:	2b08      	cmp	r3, #8
 8003246:	f200 80a1 	bhi.w	800338c <HAL_RCC_GetSysClockFreq+0x16c>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x34>
 800324e:	2b04      	cmp	r3, #4
 8003250:	d003      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x3a>
 8003252:	e09b      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x16c>
    case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
    {
        sysclockfreq = HSI_VALUE;
 8003254:	4b53      	ldr	r3, [pc, #332]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
        break;
 8003258:	e09b      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
    {
        sysclockfreq = HSE_VALUE;
 800325a:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800325c:	63bb      	str	r3, [r7, #56]	; 0x38
        break;
 800325e:	e098      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
    {
        /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
        SYSCLK = PLL_VCO / PLLP */
        pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003260:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003268:	637b      	str	r3, [r7, #52]	; 0x34
        if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 800326a:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d028      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0xa8>
            /* HSE used as PLL clock source */
            pllvco =
                (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >>
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	099b      	lsrs	r3, r3, #6
 800327c:	2200      	movs	r2, #0
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	627a      	str	r2, [r7, #36]	; 0x24
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003288:	2100      	movs	r1, #0
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800328c:	fb03 f201 	mul.w	r2, r3, r1
 8003290:	2300      	movs	r3, #0
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	4413      	add	r3, r2
 8003298:	4a43      	ldr	r2, [pc, #268]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800329a:	fba0 1202 	umull	r1, r2, r0, r2
 800329e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a0:	460a      	mov	r2, r1
 80032a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80032a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a6:	4413      	add	r3, r2
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                                               RCC_PLLCFGR_PLLN_Pos)))) /
                           (uint64_t)pllm);
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	2200      	movs	r2, #0
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	61fa      	str	r2, [r7, #28]
                                                               RCC_PLLCFGR_PLLN_Pos)))) /
 80032b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032ba:	f7fc ffe1 	bl	8000280 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
            pllvco =
 80032c2:	4613      	mov	r3, r2
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c6:	e053      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x150>
        } else {
            /* HSI used as PLL clock source */
            pllvco =
                (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >>
 80032c8:	4b35      	ldr	r3, [pc, #212]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	2200      	movs	r2, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	617a      	str	r2, [r7, #20]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032da:	f04f 0b00 	mov.w	fp, #0
 80032de:	4652      	mov	r2, sl
 80032e0:	465b      	mov	r3, fp
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	0159      	lsls	r1, r3, #5
 80032ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f0:	0150      	lsls	r0, r2, #5
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	ebb2 080a 	subs.w	r8, r2, sl
 80032fa:	eb63 090b 	sbc.w	r9, r3, fp
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800330a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800330e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003312:	ebb2 0408 	subs.w	r4, r2, r8
 8003316:	eb63 0509 	sbc.w	r5, r3, r9
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	00eb      	lsls	r3, r5, #3
 8003324:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003328:	00e2      	lsls	r2, r4, #3
 800332a:	4614      	mov	r4, r2
 800332c:	461d      	mov	r5, r3
 800332e:	eb14 030a 	adds.w	r3, r4, sl
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	eb45 030b 	adc.w	r3, r5, fp
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003346:	4629      	mov	r1, r5
 8003348:	028b      	lsls	r3, r1, #10
 800334a:	4621      	mov	r1, r4
 800334c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003350:	4621      	mov	r1, r4
 8003352:	028a      	lsls	r2, r1, #10
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
                                                               RCC_PLLCFGR_PLLN_Pos)))) /
                           (uint64_t)pllm);
 8003358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335a:	2200      	movs	r2, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	60fa      	str	r2, [r7, #12]
                                                               RCC_PLLCFGR_PLLN_Pos)))) /
 8003360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003364:	f7fc ff8c 	bl	8000280 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
            pllvco =
 800336c:	4613      	mov	r3, r2
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	3301      	adds	r3, #1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	633b      	str	r3, [r7, #48]	; 0x30

        sysclockfreq = pllvco / pllp;
 8003380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38
        break;
 800338a:	e002      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default: {
        sysclockfreq = HSI_VALUE;
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
        break;
 8003390:	bf00      	nop
    }
    }
    return sysclockfreq;
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003394:	4618      	mov	r0, r3
 8003396:	3740      	adds	r7, #64	; 0x40
 8003398:	46bd      	mov	sp, r7
 800339a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	00f42400 	.word	0x00f42400
 80033a8:	017d7840 	.word	0x017d7840

080033ac <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000000 	.word	0x20000000

080033c4 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >>
 80033c8:	f7ff fff0 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
            APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0a9b      	lsrs	r3, r3, #10
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
    return (HAL_RCC_GetHCLKFreq() >>
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40023800 	.word	0x40023800
 80033e8:	08008ab0 	.word	0x08008ab0

080033ec <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >>
 80033f0:	f7ff ffdc 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
            APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	0b5b      	lsrs	r3, r3, #13
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
    return (HAL_RCC_GetHCLKFreq() >>
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	08008ab0 	.word	0x08008ab0

08003414 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef * huart) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    /* Check the UART handle allocation */
    if (huart == NULL) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_UART_Init+0x12>
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e03f      	b.n	80034a6 <HAL_UART_Init+0x92>
        assert_param(IS_UART_INSTANCE(huart->Instance));
    }
    assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
    assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

    if (huart->gState == HAL_UART_STATE_RESET) {
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_UART_Init+0x2c>
        /* Allocate lock resource and initialize it */
        huart->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware */
        huart->MspInitCallback(huart);
#else
        /* Init the low level hardware : GPIO, CLOCK */
        HAL_UART_MspInit(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd f9b0 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
    }

    huart->gState = HAL_UART_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2224      	movs	r2, #36	; 0x24
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the peripheral */
    __HAL_UART_DISABLE(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003456:	60da      	str	r2, [r3, #12]

    /* Set the UART Communication parameters */
    UART_SetConfig(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 faa5 	bl	80039a8 <UART_SetConfig>

    /* In asynchronous mode, the following bits must be kept cleared:
       - LINEN and CLKEN bits in the USART_CR2 register,
       - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
    CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800346c:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800347c:	615a      	str	r2, [r3, #20]

    /* Enable the peripheral */
    __HAL_UART_ENABLE(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800348c:	60da      	str	r2, [r3, #12]

    /* Initialize the UART state */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_UART_Receive_DMA>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef * huart, uint8_t * pData, uint16_t Size) {
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	4613      	mov	r3, r2
 80034ba:	80fb      	strh	r3, [r7, #6]
    /* Check that a Rx process is not already ongoing */
    if (huart->RxState == HAL_UART_STATE_READY) {
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d11d      	bne.n	8003504 <HAL_UART_Receive_DMA+0x56>
        if ((pData == NULL) || (Size == 0U)) {
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_UART_Receive_DMA+0x26>
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_UART_Receive_DMA+0x2a>
            return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e016      	b.n	8003506 <HAL_UART_Receive_DMA+0x58>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Receive_DMA+0x38>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e00f      	b.n	8003506 <HAL_UART_Receive_DMA+0x58>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Set Reception type to Standard reception */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30

        return (UART_Start_Receive_DMA(huart, pData, Size));
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	461a      	mov	r2, r3
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f92a 	bl	8003754 <UART_Start_Receive_DMA>
 8003500:	4603      	mov	r3, r0
 8003502:	e000      	b.n	8003506 <HAL_UART_Receive_DMA+0x58>
    } else {
        return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
    }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxCpltCallback could be implemented in the user file
     */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_UART_RxHalfCpltCallback>:
 * @brief  Rx Half Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef * huart) {
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxHalfCpltCallback could be implemented in the user file
     */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_UART_ErrorCallback>:
 * @brief  UART error callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef * huart) {
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_ErrorCallback could be implemented in the user file
     */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_UARTEx_RxEventCallback>:
 * @param  huart UART handle
 * @param  Size  Number of data available in application reception buffer (indicates a position in
 *               reception buffer until which, data are available)
 * @retval None
 */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef * huart, uint16_t Size) {
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	807b      	strh	r3, [r7, #2]
    UNUSED(Size);

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UARTEx_RxEventCallback can be implemented in the user file.
     */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <UART_DMAReceiveCplt>:
 * @brief  DMA UART receive process complete callback.
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef * hdma) {
 8003562:	b580      	push	{r7, lr}
 8003564:	b09c      	sub	sp, #112	; 0x70
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* DMA Normal mode*/
    if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d172      	bne.n	8003664 <UART_DMAReceiveCplt+0x102>
        huart->RxXferCount = 0U;
 800357e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003580:	2200      	movs	r2, #0
 8003582:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
  \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t * addr) {
    uint32_t result;

    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	64bb      	str	r3, [r7, #72]	; 0x48
    return (result);
 8003594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800359a:	66bb      	str	r3, [r7, #104]	; 0x68
 800359c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	330c      	adds	r3, #12
 80035a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80035a6:	657b      	str	r3, [r7, #84]	; 0x54
  \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t * addr) {
    uint32_t result;

    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80035a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	653b      	str	r3, [r7, #80]	; 0x50
    return (result);
 80035b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e5      	bne.n	8003584 <UART_DMAReceiveCplt+0x22>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3314      	adds	r3, #20
 80035be:	63bb      	str	r3, [r7, #56]	; 0x38
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
    return (result);
 80035c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	667b      	str	r3, [r7, #100]	; 0x64
 80035d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3314      	adds	r3, #20
 80035d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035d8:	647a      	str	r2, [r7, #68]	; 0x44
 80035da:	643b      	str	r3, [r7, #64]	; 0x40
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80035dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    return (result);
 80035e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e5      	bne.n	80035b8 <UART_DMAReceiveCplt+0x56>

        /* Disable the DMA transfer for the receiver request by setting the DMAR bit
           in the UART CR3 register */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3314      	adds	r3, #20
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	623b      	str	r3, [r7, #32]
    return (result);
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003602:	663b      	str	r3, [r7, #96]	; 0x60
 8003604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3314      	adds	r3, #20
 800360a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800360c:	633a      	str	r2, [r7, #48]	; 0x30
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8003610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
    return (result);
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_DMAReceiveCplt+0x8a>

        /* At end of Rx process, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8003628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	2b01      	cmp	r3, #1
 800362e:	d119      	bne.n	8003664 <UART_DMAReceiveCplt+0x102>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	613b      	str	r3, [r7, #16]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	60fb      	str	r3, [r7, #12]
    return (result);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0310 	bic.w	r3, r3, #16
 8003646:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003650:	61fa      	str	r2, [r7, #28]
 8003652:	61bb      	str	r3, [r7, #24]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8003654:	69b9      	ldr	r1, [r7, #24]
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	617b      	str	r3, [r7, #20]
    return (result);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e5      	bne.n	8003630 <UART_DMAReceiveCplt+0xce>
        }
    }

    /* Check current reception Mode :
       If Reception till IDLE event has been selected : use Rx Event callback */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8003664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	2b01      	cmp	r3, #1
 800366a:	d106      	bne.n	800367a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800366c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003670:	4619      	mov	r1, r3
 8003672:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003674:	f7ff ff69 	bl	800354a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    }
}
 8003678:	e002      	b.n	8003680 <UART_DMAReceiveCplt+0x11e>
        HAL_UART_RxCpltCallback(huart);
 800367a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800367c:	f7ff ff47 	bl	800350e <HAL_UART_RxCpltCallback>
}
 8003680:	bf00      	nop
 8003682:	3770      	adds	r7, #112	; 0x70
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <UART_DMARxHalfCplt>:
 * @brief DMA UART receive process half complete callback
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef * hdma) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	60fb      	str	r3, [r7, #12]

    /* Check current reception Mode :
       If Reception till IDLE event has been selected : use Rx Event callback */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	2b01      	cmp	r3, #1
 800369c:	d108      	bne.n	80036b0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	4619      	mov	r1, r3
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff ff4e 	bl	800354a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx Half complete callback*/
        HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    }
}
 80036ae:	e002      	b.n	80036b6 <UART_DMARxHalfCplt+0x2e>
        HAL_UART_RxHalfCpltCallback(huart);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff ff36 	bl	8003522 <HAL_UART_RxHalfCpltCallback>
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <UART_DMAError>:
 * @brief  DMA UART communication error callback.
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAError(DMA_HandleTypeDef * hdma) {
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
    uint32_t dmarequest = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	60bb      	str	r3, [r7, #8]

    /* Stop UART DMA Tx request if ongoing */
    dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b80      	cmp	r3, #128	; 0x80
 80036dc:	bf0c      	ite	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	2300      	movne	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	60fb      	str	r3, [r7, #12]
    if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b21      	cmp	r3, #33	; 0x21
 80036f0:	d108      	bne.n	8003704 <UART_DMAError+0x46>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <UART_DMAError+0x46>
        huart->TxXferCount = 0x00U;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2200      	movs	r2, #0
 80036fc:	84da      	strh	r2, [r3, #38]	; 0x26
        UART_EndTxTransfer(huart);
 80036fe:	68b8      	ldr	r0, [r7, #8]
 8003700:	f000 f8c6 	bl	8003890 <UART_EndTxTransfer>
    }

    /* Stop UART DMA Rx request if ongoing */
    dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	60fb      	str	r3, [r7, #12]
    if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b22      	cmp	r3, #34	; 0x22
 8003724:	d108      	bne.n	8003738 <UART_DMAError+0x7a>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <UART_DMAError+0x7a>
        huart->RxXferCount = 0x00U;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2200      	movs	r2, #0
 8003730:	85da      	strh	r2, [r3, #46]	; 0x2e
        UART_EndRxTransfer(huart);
 8003732:	68b8      	ldr	r0, [r7, #8]
 8003734:	f000 f8d4 	bl	80038e0 <UART_EndRxTransfer>
    }

    huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f043 0210 	orr.w	r2, r3, #16
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    huart->ErrorCallback(huart);
#else
    /*Call legacy weak error callback*/
    HAL_UART_ErrorCallback(huart);
 8003744:	68b8      	ldr	r0, [r7, #8]
 8003746:	f7ff fef6 	bl	8003536 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <UART_Start_Receive_DMA>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef * huart, uint8_t * pData,
                                         uint16_t Size) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b098      	sub	sp, #96	; 0x60
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
    uint32_t * tmp;

    huart->pRxBuffPtr = pData;
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	88fa      	ldrh	r2, [r7, #6]
 800376c:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2222      	movs	r2, #34	; 0x22
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	4a40      	ldr	r2, [pc, #256]	; (8003884 <UART_Start_Receive_DMA+0x130>)
 8003782:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	4a3f      	ldr	r2, [pc, #252]	; (8003888 <UART_Start_Receive_DMA+0x134>)
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	4a3e      	ldr	r2, [pc, #248]	; (800388c <UART_Start_Receive_DMA+0x138>)
 8003792:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	2200      	movs	r2, #0
 800379a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800379c:	f107 0308 	add.w	r3, r7, #8
 80037a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	f7fd fc9c 	bl	80010f0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the
     * second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (huart->Init.Parity != UART_PARITY_NONE) {
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d019      	beq.n	8003812 <UART_Start_Receive_DMA+0xbe>
        /* Enable the UART Parity Error Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	643b      	str	r3, [r7, #64]	; 0x40
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80037e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    return (result);
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	330c      	adds	r3, #12
 80037fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003800:	64bb      	str	r3, [r7, #72]	; 0x48
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8003802:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	647b      	str	r3, [r7, #68]	; 0x44
    return (result);
 800380c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e5      	bne.n	80037de <UART_Start_Receive_DMA+0x8a>
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3314      	adds	r3, #20
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
    return (result);
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	657b      	str	r3, [r7, #84]	; 0x54
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3314      	adds	r3, #20
 8003830:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003832:	63ba      	str	r2, [r7, #56]	; 0x38
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8003836:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	633b      	str	r3, [r7, #48]	; 0x30
    return (result);
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e5      	bne.n	8003812 <UART_Start_Receive_DMA+0xbe>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3314      	adds	r3, #20
 800384c:	61bb      	str	r3, [r7, #24]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	617b      	str	r3, [r7, #20]
    return (result);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385c:	653b      	str	r3, [r7, #80]	; 0x50
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3314      	adds	r3, #20
 8003864:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003866:	627a      	str	r2, [r7, #36]	; 0x24
 8003868:	623b      	str	r3, [r7, #32]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800386a:	6a39      	ldr	r1, [r7, #32]
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	61fb      	str	r3, [r7, #28]
    return (result);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e5      	bne.n	8003846 <UART_Start_Receive_DMA+0xf2>

    return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3760      	adds	r7, #96	; 0x60
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	08003563 	.word	0x08003563
 8003888:	08003689 	.word	0x08003689
 800388c:	080036bf 	.word	0x080036bf

08003890 <UART_EndTxTransfer>:
 * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit
 * completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndTxTransfer(UART_HandleTypeDef * huart) {
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
    /* Disable TXEIE and TCIE interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	60fb      	str	r3, [r7, #12]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	60bb      	str	r3, [r7, #8]
    return (result);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	61ba      	str	r2, [r7, #24]
 80038ba:	617b      	str	r3, [r7, #20]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80038bc:	6979      	ldr	r1, [r7, #20]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	613b      	str	r3, [r7, #16]
    return (result);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e5      	bne.n	8003898 <UART_EndTxTransfer+0x8>

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80038d4:	bf00      	nop
 80038d6:	3724      	adds	r7, #36	; 0x24
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <UART_EndRxTransfer>:
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception
 * completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef * huart) {
 80038e0:	b480      	push	{r7}
 80038e2:	b095      	sub	sp, #84	; 0x54
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
    return (result);
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003908:	643a      	str	r2, [r7, #64]	; 0x40
 800390a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800390c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800390e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	63bb      	str	r3, [r7, #56]	; 0x38
    return (result);
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e5      	bne.n	80038e8 <UART_EndRxTransfer+0x8>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3314      	adds	r3, #20
 8003922:	623b      	str	r3, [r7, #32]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	61fb      	str	r3, [r7, #28]
    return (result);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	64bb      	str	r3, [r7, #72]	; 0x48
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3314      	adds	r3, #20
 800393a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800393c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8003940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
    return (result);
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e5      	bne.n	800391c <UART_EndRxTransfer+0x3c>

    /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	2b01      	cmp	r3, #1
 8003956:	d119      	bne.n	800398c <UART_EndRxTransfer+0xac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	60fb      	str	r3, [r7, #12]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	60bb      	str	r3, [r7, #8]
    return (result);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f023 0310 	bic.w	r3, r3, #16
 800396e:	647b      	str	r3, [r7, #68]	; 0x44
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003978:	61ba      	str	r2, [r7, #24]
 800397a:	617b      	str	r3, [r7, #20]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800397c:	6979      	ldr	r1, [r7, #20]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	613b      	str	r3, [r7, #16]
    return (result);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e5      	bne.n	8003958 <UART_EndRxTransfer+0x78>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	631a      	str	r2, [r3, #48]	; 0x30
}
 800399a:	bf00      	nop
 800399c:	3754      	adds	r7, #84	; 0x54
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef * huart) {
 80039a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ac:	b0c0      	sub	sp, #256	; 0x100
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    assert_param(IS_UART_MODE(huart->Init.Mode));

    /*-------------------------- USART CR2 Configuration -----------------------*/
    /* Configure the UART Stop Bits: Set STOP[13:12] bits
       according to huart->Init.StopBits value */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	68d9      	ldr	r1, [r3, #12]
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	ea40 0301 	orr.w	r3, r0, r1
 80039d0:	6113      	str	r3, [r2, #16]
       Set the M bits according to huart->Init.WordLength value
       Set PCE and PS bits according to huart->Init.Parity value
       Set TE and RE bits according to huart->Init.Mode value
       Set OVER8 bit according to huart->Init.OverSampling value */

    tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode |
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	431a      	orrs	r2, r3
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	431a      	orrs	r2, r3
             huart->Init.OverSampling;
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	69db      	ldr	r3, [r3, #28]
    tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode |
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    MODIFY_REG(huart->Instance->CR1,
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a00:	f021 010c 	bic.w	r1, r1, #12
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	60d3      	str	r3, [r2, #12]
                          USART_CR1_OVER8),
               tmpreg);

    /*-------------------------- USART CR3 Configuration -----------------------*/
    /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
    MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a22:	6999      	ldr	r1, [r3, #24]
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	ea40 0301 	orr.w	r3, r0, r1
 8003a2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) ||
        (huart->Instance == UART10)) {
        pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b8f      	ldr	r3, [pc, #572]	; (8003c74 <UART_SetConfig+0x2cc>)
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d005      	beq.n	8003a48 <UART_SetConfig+0xa0>
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4b8d      	ldr	r3, [pc, #564]	; (8003c78 <UART_SetConfig+0x2d0>)
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d104      	bne.n	8003a52 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a48:	f7ff fcd0 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 8003a4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a50:	e003      	b.n	8003a5a <UART_SetConfig+0xb2>
    if (huart->Instance == USART1) {
        pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else {
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a52:	f7ff fcb7 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8003a56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
    /*-------------------------- USART BRR Configuration ---------------------*/
    if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a64:	f040 810c 	bne.w	8003c80 <UART_SetConfig+0x2d8>
        huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	1891      	adds	r1, r2, r2
 8003a80:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a82:	415b      	adcs	r3, r3
 8003a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	eb12 0801 	adds.w	r8, r2, r1
 8003a90:	4629      	mov	r1, r5
 8003a92:	eb43 0901 	adc.w	r9, r3, r1
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aaa:	4690      	mov	r8, r2
 8003aac:	4699      	mov	r9, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	eb18 0303 	adds.w	r3, r8, r3
 8003ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ab8:	462b      	mov	r3, r5
 8003aba:	eb49 0303 	adc.w	r3, r9, r3
 8003abe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ace:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ad2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	18db      	adds	r3, r3, r3
 8003ada:	653b      	str	r3, [r7, #80]	; 0x50
 8003adc:	4613      	mov	r3, r2
 8003ade:	eb42 0303 	adc.w	r3, r2, r3
 8003ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ae4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ae8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003aec:	f7fc fbc8 	bl	8000280 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <UART_SetConfig+0x2d4>)
 8003af6:	fba3 2302 	umull	r2, r3, r3, r2
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	011c      	lsls	r4, r3, #4
 8003afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b20:	4641      	mov	r1, r8
 8003b22:	eb12 0a01 	adds.w	sl, r2, r1
 8003b26:	4649      	mov	r1, r9
 8003b28:	eb43 0b01 	adc.w	fp, r3, r1
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b40:	4692      	mov	sl, r2
 8003b42:	469b      	mov	fp, r3
 8003b44:	4643      	mov	r3, r8
 8003b46:	eb1a 0303 	adds.w	r3, sl, r3
 8003b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	eb4b 0303 	adc.w	r3, fp, r3
 8003b54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	18db      	adds	r3, r3, r3
 8003b70:	643b      	str	r3, [r7, #64]	; 0x40
 8003b72:	4613      	mov	r3, r2
 8003b74:	eb42 0303 	adc.w	r3, r2, r3
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
 8003b7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b82:	f7fc fb7d 	bl	8000280 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <UART_SetConfig+0x2d4>)
 8003b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2264      	movs	r2, #100	; 0x64
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	1acb      	subs	r3, r1, r3
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ba2:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <UART_SetConfig+0x2d4>)
 8003ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb0:	441c      	add	r4, r3
 8003bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	1851      	adds	r1, r2, r1
 8003bd8:	6339      	str	r1, [r7, #48]	; 0x30
 8003bda:	4649      	mov	r1, r9
 8003bdc:	414b      	adcs	r3, r1
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bec:	4659      	mov	r1, fp
 8003bee:	00cb      	lsls	r3, r1, #3
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	00ca      	lsls	r2, r1, #3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4642      	mov	r2, r8
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c08:	464b      	mov	r3, r9
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	eb42 0303 	adc.w	r3, r2, r3
 8003c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c28:	460b      	mov	r3, r1
 8003c2a:	18db      	adds	r3, r3, r3
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2e:	4613      	mov	r3, r2
 8003c30:	eb42 0303 	adc.w	r3, r2, r3
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c3e:	f7fc fb1f 	bl	8000280 <__aeabi_uldivmod>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <UART_SetConfig+0x2d4>)
 8003c48:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	2164      	movs	r1, #100	; 0x64
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	3332      	adds	r3, #50	; 0x32
 8003c5a:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <UART_SetConfig+0x2d4>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	f003 0207 	and.w	r2, r3, #7
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4422      	add	r2, r4
 8003c6e:	609a      	str	r2, [r3, #8]
    } else {
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
}
 8003c70:	e105      	b.n	8003e7e <UART_SetConfig+0x4d6>
 8003c72:	bf00      	nop
 8003c74:	40011000 	.word	0x40011000
 8003c78:	40011400 	.word	0x40011400
 8003c7c:	51eb851f 	.word	0x51eb851f
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c92:	4642      	mov	r2, r8
 8003c94:	464b      	mov	r3, r9
 8003c96:	1891      	adds	r1, r2, r2
 8003c98:	6239      	str	r1, [r7, #32]
 8003c9a:	415b      	adcs	r3, r3
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	1854      	adds	r4, r2, r1
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	eb43 0501 	adc.w	r5, r3, r1
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	00eb      	lsls	r3, r5, #3
 8003cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cba:	00e2      	lsls	r2, r4, #3
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	4643      	mov	r3, r8
 8003cc2:	18e3      	adds	r3, r4, r3
 8003cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cc8:	464b      	mov	r3, r9
 8003cca:	eb45 0303 	adc.w	r3, r5, r3
 8003cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cee:	4629      	mov	r1, r5
 8003cf0:	008b      	lsls	r3, r1, #2
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	008a      	lsls	r2, r1, #2
 8003cfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d00:	f7fc fabe 	bl	8000280 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4b60      	ldr	r3, [pc, #384]	; (8003e8c <UART_SetConfig+0x4e4>)
 8003d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	011c      	lsls	r4, r3, #4
 8003d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d24:	4642      	mov	r2, r8
 8003d26:	464b      	mov	r3, r9
 8003d28:	1891      	adds	r1, r2, r2
 8003d2a:	61b9      	str	r1, [r7, #24]
 8003d2c:	415b      	adcs	r3, r3
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d34:	4641      	mov	r1, r8
 8003d36:	1851      	adds	r1, r2, r1
 8003d38:	6139      	str	r1, [r7, #16]
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	414b      	adcs	r3, r1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	00cb      	lsls	r3, r1, #3
 8003d50:	4651      	mov	r1, sl
 8003d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d56:	4651      	mov	r1, sl
 8003d58:	00ca      	lsls	r2, r1, #3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4642      	mov	r2, r8
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d68:	464b      	mov	r3, r9
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	008b      	lsls	r3, r1, #2
 8003d90:	4641      	mov	r1, r8
 8003d92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d96:	4641      	mov	r1, r8
 8003d98:	008a      	lsls	r2, r1, #2
 8003d9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d9e:	f7fc fa6f 	bl	8000280 <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <UART_SetConfig+0x4e4>)
 8003da8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	2164      	movs	r1, #100	; 0x64
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	3332      	adds	r3, #50	; 0x32
 8003dba:	4a34      	ldr	r2, [pc, #208]	; (8003e8c <UART_SetConfig+0x4e4>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc6:	441c      	add	r4, r3
 8003dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dcc:	2200      	movs	r2, #0
 8003dce:	673b      	str	r3, [r7, #112]	; 0x70
 8003dd0:	677a      	str	r2, [r7, #116]	; 0x74
 8003dd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003dd6:	4642      	mov	r2, r8
 8003dd8:	464b      	mov	r3, r9
 8003dda:	1891      	adds	r1, r2, r2
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	415b      	adcs	r3, r3
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003de6:	4641      	mov	r1, r8
 8003de8:	1851      	adds	r1, r2, r1
 8003dea:	6039      	str	r1, [r7, #0]
 8003dec:	4649      	mov	r1, r9
 8003dee:	414b      	adcs	r3, r1
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dfe:	4659      	mov	r1, fp
 8003e00:	00cb      	lsls	r3, r1, #3
 8003e02:	4651      	mov	r1, sl
 8003e04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e08:	4651      	mov	r1, sl
 8003e0a:	00ca      	lsls	r2, r1, #3
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4603      	mov	r3, r0
 8003e12:	4642      	mov	r2, r8
 8003e14:	189b      	adds	r3, r3, r2
 8003e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e18:	464b      	mov	r3, r9
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e2c:	667a      	str	r2, [r7, #100]	; 0x64
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	008b      	lsls	r3, r1, #2
 8003e3e:	4641      	mov	r1, r8
 8003e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e44:	4641      	mov	r1, r8
 8003e46:	008a      	lsls	r2, r1, #2
 8003e48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e4c:	f7fc fa18 	bl	8000280 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <UART_SetConfig+0x4e4>)
 8003e56:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2164      	movs	r1, #100	; 0x64
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	3332      	adds	r3, #50	; 0x32
 8003e68:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <UART_SetConfig+0x4e4>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	f003 020f 	and.w	r2, r3, #15
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4422      	add	r2, r4
 8003e7c:	609a      	str	r2, [r3, #8]
}
 8003e7e:	bf00      	nop
 8003e80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e84:	46bd      	mov	sp, r7
 8003e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e8a:	bf00      	nop
 8003e8c:	51eb851f 	.word	0x51eb851f

08003e90 <USB_CoreInit>:
 * @param  USBx USB Instance
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef * USBx, USB_OTG_CfgTypeDef cfg) {
 8003e90:	b084      	sub	sp, #16
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	f107 001c 	add.w	r0, r7, #28
 8003e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret;
    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d122      	bne.n	8003eee <USB_CoreInit+0x5e>
        USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Init The ULPI Interface */
        USBx->GUSBCFG &=
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	60d3      	str	r3, [r2, #12]
            ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

        /* Select vbus source */
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
        if (cfg.use_external_vbus == 1U) {
 8003ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <USB_CoreInit+0x52>
            USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60da      	str	r2, [r3, #12]
        }

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f001 fbee 	bl	80056c4 <USB_CoreReset>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	73fb      	strb	r3, [r7, #15]
 8003eec:	e01a      	b.n	8003f24 <USB_CoreInit+0x94>
    } else /* FS interface (embedded Phy) */
    {
        /* Select FS Embedded PHY */
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	60da      	str	r2, [r3, #12]

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f001 fbe2 	bl	80056c4 <USB_CoreReset>
 8003f00:	4603      	mov	r3, r0
 8003f02:	73fb      	strb	r3, [r7, #15]

        if (cfg.battery_charging_enable == 0U) {
 8003f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <USB_CoreInit+0x88>
            /* Activate the USB Transceiver */
            USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
 8003f16:	e005      	b.n	8003f24 <USB_CoreInit+0x94>
        } else {
            /* Deactivate the USB Transceiver */
            USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if (cfg.dma_enable == 1U) {
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10b      	bne.n	8003f42 <USB_CoreInit+0xb2>
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f043 0206 	orr.w	r2, r3, #6
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	609a      	str	r2, [r3, #8]
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	609a      	str	r2, [r3, #8]
    }

    return ret;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f4e:	b004      	add	sp, #16
 8003f50:	4770      	bx	lr
	...

08003f54 <USB_SetTurnaroundTime>:
 * @param  USBx USB Instance
 * @param  hclk: AHB clock frequency
 * @retval USB turnaround time In PHY Clocks number
 */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef * USBx, uint32_t hclk,
                                        uint8_t speed) {
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	71fb      	strb	r3, [r7, #7]

    /* The USBTRD is configured according to the tables below, depending on AHB frequency
    used by application. In the low AHB frequency range it is used to stretch enough the USB
    response time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read
    access latency to the Data FIFO */
    if (speed == USBD_FS_SPEED) {
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d165      	bne.n	8004034 <USB_SetTurnaroundTime+0xe0>
        if ((hclk >= 14200000U) && (hclk < 15000000U)) {
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4a41      	ldr	r2, [pc, #260]	; (8004070 <USB_SetTurnaroundTime+0x11c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d906      	bls.n	8003f7e <USB_SetTurnaroundTime+0x2a>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4a40      	ldr	r2, [pc, #256]	; (8004074 <USB_SetTurnaroundTime+0x120>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d202      	bcs.n	8003f7e <USB_SetTurnaroundTime+0x2a>
            /* hclk Clock Range between 14.2-15 MHz */
            UsbTrd = 0xFU;
 8003f78:	230f      	movs	r3, #15
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e062      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 15000000U) && (hclk < 16000000U)) {
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4a3c      	ldr	r2, [pc, #240]	; (8004074 <USB_SetTurnaroundTime+0x120>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d306      	bcc.n	8003f94 <USB_SetTurnaroundTime+0x40>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4a3b      	ldr	r2, [pc, #236]	; (8004078 <USB_SetTurnaroundTime+0x124>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d202      	bcs.n	8003f94 <USB_SetTurnaroundTime+0x40>
            /* hclk Clock Range between 15-16 MHz */
            UsbTrd = 0xEU;
 8003f8e:	230e      	movs	r3, #14
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e057      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 16000000U) && (hclk < 17200000U)) {
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4a38      	ldr	r2, [pc, #224]	; (8004078 <USB_SetTurnaroundTime+0x124>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d306      	bcc.n	8003faa <USB_SetTurnaroundTime+0x56>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4a37      	ldr	r2, [pc, #220]	; (800407c <USB_SetTurnaroundTime+0x128>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d202      	bcs.n	8003faa <USB_SetTurnaroundTime+0x56>
            /* hclk Clock Range between 16-17.2 MHz */
            UsbTrd = 0xDU;
 8003fa4:	230d      	movs	r3, #13
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e04c      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 17200000U) && (hclk < 18500000U)) {
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4a33      	ldr	r2, [pc, #204]	; (800407c <USB_SetTurnaroundTime+0x128>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d306      	bcc.n	8003fc0 <USB_SetTurnaroundTime+0x6c>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4a32      	ldr	r2, [pc, #200]	; (8004080 <USB_SetTurnaroundTime+0x12c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d802      	bhi.n	8003fc0 <USB_SetTurnaroundTime+0x6c>
            /* hclk Clock Range between 17.2-18.5 MHz */
            UsbTrd = 0xCU;
 8003fba:	230c      	movs	r3, #12
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	e041      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 18500000U) && (hclk < 20000000U)) {
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4a2f      	ldr	r2, [pc, #188]	; (8004080 <USB_SetTurnaroundTime+0x12c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d906      	bls.n	8003fd6 <USB_SetTurnaroundTime+0x82>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4a2e      	ldr	r2, [pc, #184]	; (8004084 <USB_SetTurnaroundTime+0x130>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d802      	bhi.n	8003fd6 <USB_SetTurnaroundTime+0x82>
            /* hclk Clock Range between 18.5-20 MHz */
            UsbTrd = 0xBU;
 8003fd0:	230b      	movs	r3, #11
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e036      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 20000000U) && (hclk < 21800000U)) {
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <USB_SetTurnaroundTime+0x130>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d906      	bls.n	8003fec <USB_SetTurnaroundTime+0x98>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4a29      	ldr	r2, [pc, #164]	; (8004088 <USB_SetTurnaroundTime+0x134>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d802      	bhi.n	8003fec <USB_SetTurnaroundTime+0x98>
            /* hclk Clock Range between 20-21.8 MHz */
            UsbTrd = 0xAU;
 8003fe6:	230a      	movs	r3, #10
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	e02b      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 21800000U) && (hclk < 24000000U)) {
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4a26      	ldr	r2, [pc, #152]	; (8004088 <USB_SetTurnaroundTime+0x134>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d906      	bls.n	8004002 <USB_SetTurnaroundTime+0xae>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4a25      	ldr	r2, [pc, #148]	; (800408c <USB_SetTurnaroundTime+0x138>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d202      	bcs.n	8004002 <USB_SetTurnaroundTime+0xae>
            /* hclk Clock Range between 21.8-24 MHz */
            UsbTrd = 0x9U;
 8003ffc:	2309      	movs	r3, #9
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e020      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 24000000U) && (hclk < 27700000U)) {
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4a21      	ldr	r2, [pc, #132]	; (800408c <USB_SetTurnaroundTime+0x138>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d306      	bcc.n	8004018 <USB_SetTurnaroundTime+0xc4>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4a20      	ldr	r2, [pc, #128]	; (8004090 <USB_SetTurnaroundTime+0x13c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d802      	bhi.n	8004018 <USB_SetTurnaroundTime+0xc4>
            /* hclk Clock Range between 24-27.7 MHz */
            UsbTrd = 0x8U;
 8004012:	2308      	movs	r3, #8
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	e015      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 27700000U) && (hclk < 32000000U)) {
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <USB_SetTurnaroundTime+0x13c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d906      	bls.n	800402e <USB_SetTurnaroundTime+0xda>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <USB_SetTurnaroundTime+0x140>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d202      	bcs.n	800402e <USB_SetTurnaroundTime+0xda>
            /* hclk Clock Range between 27.7-32 MHz */
            UsbTrd = 0x7U;
 8004028:	2307      	movs	r3, #7
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e00a      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
        } else /* if(hclk >= 32000000) */
        {
            /* hclk Clock Range between 32-200 MHz */
            UsbTrd = 0x6U;
 800402e:	2306      	movs	r3, #6
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e007      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
        }
    } else if (speed == USBD_HS_SPEED) {
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <USB_SetTurnaroundTime+0xec>
        UsbTrd = USBD_HS_TRDT_VALUE;
 800403a:	2309      	movs	r3, #9
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e001      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    } else {
        UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004040:	2309      	movs	r3, #9
 8004042:	617b      	str	r3, [r7, #20]
    }

    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	60da      	str	r2, [r3, #12]
    USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	029b      	lsls	r3, r3, #10
 8004058:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	00d8acbf 	.word	0x00d8acbf
 8004074:	00e4e1c0 	.word	0x00e4e1c0
 8004078:	00f42400 	.word	0x00f42400
 800407c:	01067380 	.word	0x01067380
 8004080:	011a499f 	.word	0x011a499f
 8004084:	01312cff 	.word	0x01312cff
 8004088:	014ca43f 	.word	0x014ca43f
 800408c:	016e3600 	.word	0x016e3600
 8004090:	01a6ab1f 	.word	0x01a6ab1f
 8004094:	01e84800 	.word	0x01e84800

08004098 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef * USBx) {
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f043 0201 	orr.w	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef * USBx) {
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f023 0201 	bic.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <USB_SetCurrentMode>:
 *          This parameter can be one of these values:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef * USBx, USB_OTG_ModeTypeDef mode) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
    uint32_t ms = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]

    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]

    if (mode == USB_HOST_MODE) {
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d115      	bne.n	800412a <USB_SetCurrentMode+0x4e>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(1U);
 800410a:	2001      	movs	r0, #1
 800410c:	f7fc fe0c 	bl	8000d28 <HAL_Delay>
            ms++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3301      	adds	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f001 fa45 	bl	80055a6 <USB_GetMode>
 800411c:	4603      	mov	r3, r0
 800411e:	2b01      	cmp	r3, #1
 8004120:	d01e      	beq.n	8004160 <USB_SetCurrentMode+0x84>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b31      	cmp	r3, #49	; 0x31
 8004126:	d9f0      	bls.n	800410a <USB_SetCurrentMode+0x2e>
 8004128:	e01a      	b.n	8004160 <USB_SetCurrentMode+0x84>
    } else if (mode == USB_DEVICE_MODE) {
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d115      	bne.n	800415c <USB_SetCurrentMode+0x80>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(1U);
 800413c:	2001      	movs	r0, #1
 800413e:	f7fc fdf3 	bl	8000d28 <HAL_Delay>
            ms++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3301      	adds	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f001 fa2c 	bl	80055a6 <USB_GetMode>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <USB_SetCurrentMode+0x84>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b31      	cmp	r3, #49	; 0x31
 8004158:	d9f0      	bls.n	800413c <USB_SetCurrentMode+0x60>
 800415a:	e001      	b.n	8004160 <USB_SetCurrentMode+0x84>
    } else {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e005      	b.n	800416c <USB_SetCurrentMode+0x90>
    }

    if (ms == 50U) {
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b32      	cmp	r3, #50	; 0x32
 8004164:	d101      	bne.n	800416a <USB_SetCurrentMode+0x8e>
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <USB_SetCurrentMode+0x90>
    }

    return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <USB_DevInit>:
 * @param  USBx  Selected device
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef * USBx, USB_OTG_CfgTypeDef cfg) {
 8004174:	b084      	sub	sp, #16
 8004176:	b580      	push	{r7, lr}
 8004178:	b086      	sub	sp, #24
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60fb      	str	r3, [r7, #12]
    uint32_t i;

    for (i = 0U; i < 15U; i++) {
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	e009      	b.n	80041a8 <USB_DevInit+0x34>
        USBx->DIEPTXF[i] = 0U;
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3340      	adds	r3, #64	; 0x40
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	2200      	movs	r2, #0
 80041a0:	605a      	str	r2, [r3, #4]
    for (i = 0U; i < 15U; i++) {
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3301      	adds	r3, #1
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b0e      	cmp	r3, #14
 80041ac:	d9f2      	bls.n	8004194 <USB_DevInit+0x20>
        /* Enable HW VBUS sensing */
        USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
    }
#else
    /* VBUS Sensing setup */
    if (cfg.vbus_sensing_enable == 0U) {
 80041ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d11c      	bne.n	80041ee <USB_DevInit+0x7a>
        /*
         * Disable HW VBUS sensing. VBUS is internally considered to be always
         * at VBUS-Valid level (5V).
         */
        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c2:	f043 0302 	orr.w	r3, r3, #2
 80041c6:	6053      	str	r3, [r2, #4]
        USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38
 80041ec:	e00b      	b.n	8004206 <USB_DevInit+0x92>
    } else {
        /* Enable HW VBUS sensing */
        USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
        USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) ||                  \
          defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||                  \
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

    /* Restart the Phy Clock */
    USBx_PCGCCTL = 0U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800420c:	461a      	mov	r2, r3
 800420e:	2300      	movs	r3, #0
 8004210:	6013      	str	r3, [r2, #0]

    /* Device mode configuration */
    USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004218:	4619      	mov	r1, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	461a      	mov	r2, r3
 8004222:	680b      	ldr	r3, [r1, #0]
 8004224:	6013      	str	r3, [r2, #0]

    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8004226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004228:	2b01      	cmp	r3, #1
 800422a:	d10c      	bne.n	8004246 <USB_DevInit+0xd2>
        if (cfg.speed == USBD_HS_SPEED) {
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <USB_DevInit+0xc8>
            /* Set Core speed to High speed mode */
            (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004232:	2100      	movs	r1, #0
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f965 	bl	8004504 <USB_SetDevSpeed>
 800423a:	e008      	b.n	800424e <USB_DevInit+0xda>
        } else {
            /* Set Core speed to Full speed mode */
            (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800423c:	2101      	movs	r1, #1
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f960 	bl	8004504 <USB_SetDevSpeed>
 8004244:	e003      	b.n	800424e <USB_DevInit+0xda>
        }
    } else {
        /* Set Core speed to Full speed mode */
        (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004246:	2103      	movs	r1, #3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f95b 	bl	8004504 <USB_SetDevSpeed>
    }

    /* Flush the FIFOs */
    if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800424e:	2110      	movs	r1, #16
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f8f3 	bl	800443c <USB_FlushTxFifo>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <USB_DevInit+0xec>
    {
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
    }

    if (USB_FlushRxFifo(USBx) != HAL_OK) {
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f91f 	bl	80044a4 <USB_FlushRxFifo>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <USB_DevInit+0xfc>
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
    }

    /* Clear all pending Device Interrupts */
    USBx_DEVICE->DIEPMSK = 0U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	461a      	mov	r2, r3
 8004278:	2300      	movs	r3, #0
 800427a:	6113      	str	r3, [r2, #16]
    USBx_DEVICE->DOEPMSK = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004282:	461a      	mov	r2, r3
 8004284:	2300      	movs	r3, #0
 8004286:	6153      	str	r3, [r2, #20]
    USBx_DEVICE->DAINTMSK = 0U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428e:	461a      	mov	r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	61d3      	str	r3, [r2, #28]

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8004294:	2300      	movs	r3, #0
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	e043      	b.n	8004322 <USB_DevInit+0x1ae>
        if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b0:	d118      	bne.n	80042e4 <USB_DevInit+0x170>
            if (i == 0U) {
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <USB_DevInit+0x15a>
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c4:	461a      	mov	r2, r3
 80042c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	e013      	b.n	80042f6 <USB_DevInit+0x182>
            } else {
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	461a      	mov	r2, r3
 80042dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e008      	b.n	80042f6 <USB_DevInit+0x182>
            }
        } else {
            USBx_INEP(i)->DIEPCTL = 0U;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	461a      	mov	r2, r3
 80042f2:	2300      	movs	r3, #0
 80042f4:	6013      	str	r3, [r2, #0]
        }

        USBx_INEP(i)->DIEPTSIZ = 0U;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004302:	461a      	mov	r2, r3
 8004304:	2300      	movs	r3, #0
 8004306:	6113      	str	r3, [r2, #16]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004314:	461a      	mov	r2, r3
 8004316:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800431a:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	3301      	adds	r3, #1
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	429a      	cmp	r2, r3
 8004328:	d3b7      	bcc.n	800429a <USB_DevInit+0x126>
    }

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	e043      	b.n	80043b8 <USB_DevInit+0x244>
        if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004346:	d118      	bne.n	800437a <USB_DevInit+0x206>
            if (i == 0U) {
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <USB_DevInit+0x1f0>
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	461a      	mov	r2, r3
 800435c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e013      	b.n	800438c <USB_DevInit+0x218>
            } else {
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	461a      	mov	r2, r3
 8004372:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e008      	b.n	800438c <USB_DevInit+0x218>
            }
        } else {
            USBx_OUTEP(i)->DOEPCTL = 0U;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004386:	461a      	mov	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	6013      	str	r3, [r2, #0]
        }

        USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	461a      	mov	r2, r3
 800439a:	2300      	movs	r3, #0
 800439c:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	461a      	mov	r2, r3
 80043ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043b0:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	3301      	adds	r3, #1
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d3b7      	bcc.n	8004330 <USB_DevInit+0x1bc>
    }

    USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d2:	6113      	str	r3, [r2, #16]

    /* Disable all interrupts. */
    USBx->GINTMSK = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	619a      	str	r2, [r3, #24]

    /* Clear any pending interrupts */
    USBx->GINTSTS = 0xBFFFFFFFU;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043e0:	615a      	str	r2, [r3, #20]

    /* Enable the common interrupts */
    if (cfg.dma_enable == 0U) {
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <USB_DevInit+0x280>
        USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f043 0210 	orr.w	r2, r3, #16
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	619a      	str	r2, [r3, #24]
    }

    /* Enable interrupts matching to the Device mode ONLY */
    USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <USB_DevInit+0x2c4>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6193      	str	r3, [r2, #24]
                     USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IISOIXFRM |
                     USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

    if (cfg.Sof_enable != 0U) {
 8004400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <USB_DevInit+0x29e>
        USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f043 0208 	orr.w	r2, r3, #8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	619a      	str	r2, [r3, #24]
    }

    if (cfg.vbus_sensing_enable == 1U) {
 8004412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d107      	bne.n	8004428 <USB_DevInit+0x2b4>
        USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004420:	f043 0304 	orr.w	r3, r3, #4
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6193      	str	r3, [r2, #24]
    }

    return ret;
 8004428:	7dfb      	ldrb	r3, [r7, #23]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004434:	b004      	add	sp, #16
 8004436:	4770      	bx	lr
 8004438:	803c3800 	.word	0x803c3800

0800443c <USB_FlushTxFifo>:
  * @param  num  FIFO number
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef * USBx, uint32_t num) {
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <USB_FlushTxFifo+0x64>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d901      	bls.n	800445c <USB_FlushTxFifo+0x20>
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e01b      	b.n	8004494 <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	daf2      	bge.n	800444a <USB_FlushTxFifo+0xe>

    /* Flush TX Fifo */
    count = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	019b      	lsls	r3, r3, #6
 800446c:	f043 0220 	orr.w	r2, r3, #32
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	611a      	str	r2, [r3, #16]

    do {
        count++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3301      	adds	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <USB_FlushTxFifo+0x64>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <USB_FlushTxFifo+0x4a>
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e006      	b.n	8004494 <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b20      	cmp	r3, #32
 8004490:	d0f0      	beq.n	8004474 <USB_FlushTxFifo+0x38>

    return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	00030d40 	.word	0x00030d40

080044a4 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef * USBx) {
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3301      	adds	r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a11      	ldr	r2, [pc, #68]	; (8004500 <USB_FlushRxFifo+0x5c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <USB_FlushRxFifo+0x1e>
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e018      	b.n	80044f4 <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	daf2      	bge.n	80044b0 <USB_FlushRxFifo+0xc>

    /* Flush RX Fifo */
    count = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2210      	movs	r2, #16
 80044d2:	611a      	str	r2, [r3, #16]

    do {
        count++;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3301      	adds	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a08      	ldr	r2, [pc, #32]	; (8004500 <USB_FlushRxFifo+0x5c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <USB_FlushRxFifo+0x42>
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e006      	b.n	80044f4 <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d0f0      	beq.n	80044d4 <USB_FlushRxFifo+0x30>

    return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	00030d40 	.word	0x00030d40

08004504 <USB_SetDevSpeed>:
 *            @arg USB_OTG_SPEED_HIGH: High speed mode
 *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
 *            @arg USB_OTG_SPEED_FULL: Full speed mode
 * @retval  Hal status
 */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef * USBx, uint8_t speed) {
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG |= speed;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004524:	4313      	orrs	r3, r2
 8004526:	600b      	str	r3, [r1, #0]
    return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <USB_GetDevSpeed>:
 * @retval speed  device speed
 *          This parameter can be one of these values:
 *            @arg USBD_HS_SPEED: High speed mode
 *            @arg USBD_FS_SPEED: Full speed mode
 */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef * USBx) {
 8004536:	b480      	push	{r7}
 8004538:	b087      	sub	sp, #28
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	613b      	str	r3, [r7, #16]
    uint8_t speed;
    uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0306 	and.w	r3, r3, #6
 800454e:	60fb      	str	r3, [r7, #12]

    if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ) {
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <USB_GetDevSpeed+0x26>
        speed = USBD_HS_SPEED;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]
 800455a:	e00a      	b.n	8004572 <USB_GetDevSpeed+0x3c>
    } else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d002      	beq.n	8004568 <USB_GetDevSpeed+0x32>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b06      	cmp	r3, #6
 8004566:	d102      	bne.n	800456e <USB_GetDevSpeed+0x38>
               (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ)) {
        speed = USBD_FS_SPEED;
 8004568:	2302      	movs	r3, #2
 800456a:	75fb      	strb	r3, [r7, #23]
 800456c:	e001      	b.n	8004572 <USB_GetDevSpeed+0x3c>
    } else {
        speed = 0xFU;
 800456e:	230f      	movs	r3, #15
 8004570:	75fb      	strb	r3, [r7, #23]
    }

    return speed;
 8004572:	7dfb      	ldrb	r3, [r7, #23]
}
 8004574:	4618      	mov	r0, r3
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <USB_ActivateEndpoint>:
 * @brief  Activate and configure an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d13a      	bne.n	8004612 <USB_ActivateEndpoint+0x92>
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	2101      	movs	r1, #1
 80045ae:	fa01 f303 	lsl.w	r3, r1, r3
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	68f9      	ldr	r1, [r7, #12]
 80045b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61cb      	str	r3, [r1, #28]

        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d155      	bne.n	8004680 <USB_ActivateEndpoint+0x100>
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                         ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	791b      	ldrb	r3, [r3, #4]
 80045ee:	049b      	lsls	r3, r3, #18
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045f0:	4319      	orrs	r1, r3
                                         ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	059b      	lsls	r3, r3, #22
 80045f6:	430b      	orrs	r3, r1
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045f8:	4313      	orrs	r3, r2
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	e036      	b.n	8004680 <USB_ActivateEndpoint+0x100>
                                         USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_USBAEP;
        }
    } else {
        USBx_DEVICE->DAINTMSK |=
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004618:	69da      	ldr	r2, [r3, #28]
            USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	2101      	movs	r1, #1
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	041b      	lsls	r3, r3, #16
        USBx_DEVICE->DAINTMSK |=
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004630:	4313      	orrs	r3, r2
 8004632:	61cb      	str	r3, [r1, #28]

        if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d11a      	bne.n	8004680 <USB_ActivateEndpoint+0x100>
            USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                          ((uint32_t)ep->type << 18) |
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	791b      	ldrb	r3, [r3, #4]
 8004664:	049b      	lsls	r3, r3, #18
            USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004666:	430b      	orrs	r3, r1
 8004668:	4313      	orrs	r3, r2
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467e:	6013      	str	r3, [r2, #0]
                                          USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_USBAEP;
        }
    }
    return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <USB_DeactivateEndpoint>:
 * @brief  De-activate and de-initialize an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	60bb      	str	r3, [r7, #8]

    /* Read DEPCTLn register */
    if (ep->is_in == 1U) {
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d161      	bne.n	8004770 <USB_DeactivateEndpoint+0xe0>
        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c2:	d11f      	bne.n	8004704 <USB_DeactivateEndpoint+0x74>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046e2:	6013      	str	r3, [r2, #0]
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	0151      	lsls	r1, r2, #5
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	440a      	add	r2, r1
 80046fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004702:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &=
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
            ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	2101      	movs	r1, #1
 8004716:	fa01 f303 	lsl.w	r3, r1, r3
 800471a:	b29b      	uxth	r3, r3
 800471c:	43db      	mvns	r3, r3
        USBx_DEVICE->DEACHMSK &=
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004724:	4013      	ands	r3, r2
 8004726:	63cb      	str	r3, [r1, #60]	; 0x3c
        USBx_DEVICE->DAINTMSK &=
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472e:	69da      	ldr	r2, [r3, #28]
            ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	b29b      	uxth	r3, r3
 8004740:	43db      	mvns	r3, r3
        USBx_DEVICE->DAINTMSK &=
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004748:	4013      	ands	r3, r2
 800474a:	61cb      	str	r3, [r1, #28]
        USBx_INEP(epnum)->DIEPCTL &=
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	0159      	lsls	r1, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	440b      	add	r3, r1
 8004762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004766:	4619      	mov	r1, r3
 8004768:	4b35      	ldr	r3, [pc, #212]	; (8004840 <USB_DeactivateEndpoint+0x1b0>)
 800476a:	4013      	ands	r3, r2
 800476c:	600b      	str	r3, [r1, #0]
 800476e:	e060      	b.n	8004832 <USB_DeactivateEndpoint+0x1a2>
            ~(USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_TXFNUM |
              USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_EPTYP);
    } else {
        if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004786:	d11f      	bne.n	80047c8 <USB_DeactivateEndpoint+0x138>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	440a      	add	r2, r1
 800479e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047a6:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	0151      	lsls	r1, r2, #5
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	440a      	add	r2, r1
 80047be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047c6:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &=
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
            ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	041b      	lsls	r3, r3, #16
 80047e0:	43db      	mvns	r3, r3
        USBx_DEVICE->DEACHMSK &=
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047e8:	4013      	ands	r3, r2
 80047ea:	63cb      	str	r3, [r1, #60]	; 0x3c
        USBx_DEVICE->DAINTMSK &=
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f2:	69da      	ldr	r2, [r3, #28]
            ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	2101      	movs	r1, #1
 80047fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	43db      	mvns	r3, r3
        USBx_DEVICE->DAINTMSK &=
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800480c:	4013      	ands	r3, r2
 800480e:	61cb      	str	r3, [r1, #28]
        USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP | USB_OTG_DOEPCTL_MPSIZ |
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	0159      	lsls	r1, r3, #5
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	440b      	add	r3, r1
 8004826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482a:	4619      	mov	r1, r3
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <USB_DeactivateEndpoint+0x1b4>)
 800482e:	4013      	ands	r3, r2
 8004830:	600b      	str	r3, [r1, #0]
                                        USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_EPTYP);
    }

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	ec337800 	.word	0xec337800
 8004844:	eff37800 	.word	0xeff37800

08004848 <USB_EPStartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep,
                                  uint8_t dma) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	4613      	mov	r3, r2
 8004854:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	61fb      	str	r3, [r7, #28]
    uint32_t epnum = (uint32_t)ep->num;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]
    uint16_t pktcnt;

    /* IN endpoint */
    if (ep->is_in == 1U) {
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	785b      	ldrb	r3, [r3, #1]
 8004864:	2b01      	cmp	r3, #1
 8004866:	f040 815c 	bne.w	8004b22 <USB_EPStartXfer+0x2da>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d132      	bne.n	80048d8 <USB_EPStartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004890:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004894:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048b4:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d0:	0cdb      	lsrs	r3, r3, #19
 80048d2:	04db      	lsls	r3, r3, #19
 80048d4:	6113      	str	r3, [r2, #16]
 80048d6:	e074      	b.n	80049c2 <USB_EPStartXfer+0x17a>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f2:	0cdb      	lsrs	r3, r3, #19
 80048f4:	04db      	lsls	r3, r3, #19
 80048f6:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004912:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004916:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800491a:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |=
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	691a      	ldr	r2, [r3, #16]
                (USB_OTG_DIEPTSIZ_PKTCNT &
                 (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6999      	ldr	r1, [r3, #24]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	440b      	add	r3, r1
 8004934:	1e59      	subs	r1, r3, #1
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	fbb1 f3f3 	udiv	r3, r1, r3
 800493e:	04d9      	lsls	r1, r3, #19
                (USB_OTG_DIEPTSIZ_PKTCNT &
 8004940:	4b9d      	ldr	r3, [pc, #628]	; (8004bb8 <USB_EPStartXfer+0x370>)
 8004942:	400b      	ands	r3, r1
            USBx_INEP(epnum)->DIEPTSIZ |=
 8004944:	69b9      	ldr	r1, [r7, #24]
 8004946:	0148      	lsls	r0, r1, #5
 8004948:	69f9      	ldr	r1, [r7, #28]
 800494a:	4401      	add	r1, r0
 800494c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004950:	4313      	orrs	r3, r2
 8004952:	610b      	str	r3, [r1, #16]

            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496a:	69b9      	ldr	r1, [r7, #24]
 800496c:	0148      	lsls	r0, r1, #5
 800496e:	69f9      	ldr	r1, [r7, #28]
 8004970:	4401      	add	r1, r0
 8004972:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004976:	4313      	orrs	r3, r2
 8004978:	610b      	str	r3, [r1, #16]

            if (ep->type == EP_TYPE_ISOC) {
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	791b      	ldrb	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d11f      	bne.n	80049c2 <USB_EPStartXfer+0x17a>
                USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049a0:	6113      	str	r3, [r2, #16]
                USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049c0:	6113      	str	r3, [r2, #16]
            }
        }

        if (dma == 1U) {
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d14b      	bne.n	8004a60 <USB_EPStartXfer+0x218>
            if ((uint32_t)ep->dma_addr != 0U) {
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <USB_EPStartXfer+0x19c>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	461a      	mov	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	6153      	str	r3, [r2, #20]
            }

            if (ep->type == EP_TYPE_ISOC) {
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	791b      	ldrb	r3, [r3, #4]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d128      	bne.n	8004a3e <USB_EPStartXfer+0x1f6>
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d110      	bne.n	8004a1e <USB_EPStartXfer+0x1d6>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	e00f      	b.n	8004a3e <USB_EPStartXfer+0x1f6>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6013      	str	r3, [r2, #0]
                }
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e133      	b.n	8004cc8 <USB_EPStartXfer+0x480>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	0151      	lsls	r1, r2, #5
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	440a      	add	r2, r1
 8004a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a7e:	6013      	str	r3, [r2, #0]

            if (ep->type != EP_TYPE_ISOC) {
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	791b      	ldrb	r3, [r3, #4]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d015      	beq.n	8004ab4 <USB_EPStartXfer+0x26c>
                /* Enable the Tx FIFO Empty Interrupt for this EP */
                if (ep->xfer_len > 0U) {
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 811b 	beq.w	8004cc8 <USB_EPStartXfer+0x480>
                    USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	69f9      	ldr	r1, [r7, #28]
 8004aaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	634b      	str	r3, [r1, #52]	; 0x34
 8004ab2:	e109      	b.n	8004cc8 <USB_EPStartXfer+0x480>
                }
            } else {
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d110      	bne.n	8004ae6 <USB_EPStartXfer+0x29e>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ade:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e00f      	b.n	8004b06 <USB_EPStartXfer+0x2be>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6013      	str	r3, [r2, #0]
                }

                (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6919      	ldr	r1, [r3, #16]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	b298      	uxth	r0, r3
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4603      	mov	r3, r0
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fade 	bl	80050dc <USB_WritePacket>
 8004b20:	e0d2      	b.n	8004cc8 <USB_EPStartXfer+0x480>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	0151      	lsls	r1, r2, #5
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	440a      	add	r2, r1
 8004b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b3c:	0cdb      	lsrs	r3, r3, #19
 8004b3e:	04db      	lsls	r3, r3, #19
 8004b40:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b64:	6113      	str	r3, [r2, #16]

        if (ep->xfer_len == 0U) {
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d126      	bne.n	8004bbc <USB_EPStartXfer+0x374>
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b84:	69b9      	ldr	r1, [r7, #24]
 8004b86:	0148      	lsls	r0, r1, #5
 8004b88:	69f9      	ldr	r1, [r7, #28]
 8004b8a:	4401      	add	r1, r0
 8004b8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b90:	4313      	orrs	r3, r2
 8004b92:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb2:	6113      	str	r3, [r2, #16]
 8004bb4:	e03a      	b.n	8004c2c <USB_EPStartXfer+0x3e4>
 8004bb6:	bf00      	nop
 8004bb8:	1ff80000 	.word	0x1ff80000
        } else {
            pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	699a      	ldr	r2, [r3, #24]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	1e5a      	subs	r2, r3, #1
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	82fb      	strh	r3, [r7, #22]
            ep->xfer_size = ep->maxpacket * pktcnt;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	8afa      	ldrh	r2, [r7, #22]
 8004bd8:	fb03 f202 	mul.w	r2, r3, r2
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	61da      	str	r2, [r3, #28]

            USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	8afb      	ldrh	r3, [r7, #22]
 8004bf0:	04d9      	lsls	r1, r3, #19
 8004bf2:	4b38      	ldr	r3, [pc, #224]	; (8004cd4 <USB_EPStartXfer+0x48c>)
 8004bf4:	400b      	ands	r3, r1
 8004bf6:	69b9      	ldr	r1, [r7, #24]
 8004bf8:	0148      	lsls	r0, r1, #5
 8004bfa:	69f9      	ldr	r1, [r7, #28]
 8004bfc:	4401      	add	r1, r0
 8004bfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c02:	4313      	orrs	r3, r2
 8004c04:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	0148      	lsls	r0, r1, #5
 8004c20:	69f9      	ldr	r1, [r7, #28]
 8004c22:	4401      	add	r1, r0
 8004c24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d10d      	bne.n	8004c4e <USB_EPStartXfer+0x406>
            if ((uint32_t)ep->xfer_buff != 0U) {
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <USB_EPStartXfer+0x406>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6919      	ldr	r1, [r3, #16]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	615a      	str	r2, [r3, #20]
            }
        }

        if (ep->type == EP_TYPE_ISOC) {
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	791b      	ldrb	r3, [r3, #4]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d128      	bne.n	8004ca8 <USB_EPStartXfer+0x460>
            if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d110      	bne.n	8004c88 <USB_EPStartXfer+0x440>
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e00f      	b.n	8004ca8 <USB_EPStartXfer+0x460>
            } else {
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	0151      	lsls	r1, r2, #5
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	6013      	str	r3, [r2, #0]
            }
        }
        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cc6:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	1ff80000 	.word	0x1ff80000

08004cd8 <USB_EP0StartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep,
                                   uint8_t dma) {
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	617b      	str	r3, [r7, #20]
    uint32_t epnum = (uint32_t)ep->num;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	f040 80ce 	bne.w	8004e96 <USB_EP0StartXfer+0x1be>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d132      	bne.n	8004d68 <USB_EP0StartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	0151      	lsls	r1, r2, #5
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	440a      	add	r2, r1
 8004d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d24:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d44:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	0151      	lsls	r1, r2, #5
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	440a      	add	r2, r1
 8004d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d60:	0cdb      	lsrs	r3, r3, #19
 8004d62:	04db      	lsls	r3, r3, #19
 8004d64:	6113      	str	r3, [r2, #16]
 8004d66:	e04e      	b.n	8004e06 <USB_EP0StartXfer+0x12e>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d82:	0cdb      	lsrs	r3, r3, #19
 8004d84:	04db      	lsls	r3, r3, #19
 8004d86:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	0151      	lsls	r1, r2, #5
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004da6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004daa:	6113      	str	r3, [r2, #16]

            if (ep->xfer_len > ep->maxpacket) {
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	699a      	ldr	r2, [r3, #24]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d903      	bls.n	8004dc0 <USB_EP0StartXfer+0xe8>
                ep->xfer_len = ep->maxpacket;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	619a      	str	r2, [r3, #24]
            }
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dde:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df6:	6939      	ldr	r1, [r7, #16]
 8004df8:	0148      	lsls	r0, r1, #5
 8004dfa:	6979      	ldr	r1, [r7, #20]
 8004dfc:	4401      	add	r1, r0
 8004dfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e02:	4313      	orrs	r3, r2
 8004e04:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d11e      	bne.n	8004e4a <USB_EP0StartXfer+0x172>
            if ((uint32_t)ep->dma_addr != 0U) {
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d009      	beq.n	8004e28 <USB_EP0StartXfer+0x150>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	461a      	mov	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	6153      	str	r3, [r2, #20]
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	e097      	b.n	8004f7a <USB_EP0StartXfer+0x2a2>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e68:	6013      	str	r3, [r2, #0]

            /* Enable the Tx FIFO Empty Interrupt for this EP */
            if (ep->xfer_len > 0U) {
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8083 	beq.w	8004f7a <USB_EP0StartXfer+0x2a2>
                USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8a:	6979      	ldr	r1, [r7, #20]
 8004e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e90:	4313      	orrs	r3, r2
 8004e92:	634b      	str	r3, [r1, #52]	; 0x34
 8004e94:	e071      	b.n	8004f7a <USB_EP0StartXfer+0x2a2>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb0:	0cdb      	lsrs	r3, r3, #19
 8004eb2:	04db      	lsls	r3, r3, #19
 8004eb4:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ed4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ed8:	6113      	str	r3, [r2, #16]

        if (ep->xfer_len > 0U) {
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <USB_EP0StartXfer+0x212>
            ep->xfer_len = ep->maxpacket;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	619a      	str	r2, [r3, #24]
        }

        /* Store transfer size, for EP0 this is equal to endpoint max packet size */
        ep->xfer_size = ep->maxpacket;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	61da      	str	r2, [r3, #28]

        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f10:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f28:	6939      	ldr	r1, [r7, #16]
 8004f2a:	0148      	lsls	r0, r1, #5
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	4401      	add	r1, r0
 8004f30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f34:	4313      	orrs	r3, r2
 8004f36:	610b      	str	r3, [r1, #16]

        if (dma == 1U) {
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d10d      	bne.n	8004f5a <USB_EP0StartXfer+0x282>
            if ((uint32_t)ep->xfer_buff != 0U) {
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <USB_EP0StartXfer+0x282>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	6919      	ldr	r1, [r3, #16]
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	460a      	mov	r2, r1
 8004f58:	615a      	str	r2, [r3, #20]
            }
        }

        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f78:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <USB_EPStopXfer>:
 * @brief  USB_EPStoptXfer  Stop transfer on an EP
 * @param  USBx  usb device instance
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef ret = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	785b      	ldrb	r3, [r3, #1]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d14a      	bne.n	800503c <USB_EPStopXfer+0xb4>
        /* EP enable, IN data in FIFO */
        if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fbe:	f040 8086 	bne.w	80050ce <USB_EPStopXfer+0x146>
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fe4:	6013      	str	r3, [r2, #0]
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	7812      	ldrb	r2, [r2, #0]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005008:	6013      	str	r3, [r2, #0]

            do {
                count++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3301      	adds	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f242 7210 	movw	r2, #10000	; 0x2710
 8005016:	4293      	cmp	r3, r2
 8005018:	d902      	bls.n	8005020 <USB_EPStopXfer+0x98>
                    ret = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
                    break;
 800501e:	e056      	b.n	80050ce <USB_EPStopXfer+0x146>
                }
            } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
                     USB_OTG_DIEPCTL_EPENA);
 8005034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005038:	d0e7      	beq.n	800500a <USB_EPStopXfer+0x82>
 800503a:	e048      	b.n	80050ce <USB_EPStopXfer+0x146>
        }
    } else /* OUT endpoint */
    {
        if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005054:	d13b      	bne.n	80050ce <USB_EPStopXfer+0x146>
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005074:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005078:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	7812      	ldrb	r2, [r2, #0]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800509c:	6013      	str	r3, [r2, #0]

            do {
                count++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3301      	adds	r3, #1
 80050a2:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d902      	bls.n	80050b4 <USB_EPStopXfer+0x12c>
                    ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	75fb      	strb	r3, [r7, #23]
                    break;
 80050b2:	e00c      	b.n	80050ce <USB_EPStopXfer+0x146>
                }
            } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
                     USB_OTG_DOEPCTL_EPENA);
 80050c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050cc:	d0e7      	beq.n	800509e <USB_EPStopXfer+0x116>
        }
    }

    return ret;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_WritePacket>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef * USBx, uint8_t * src, uint8_t ch_ep_num,
                                  uint16_t len, uint8_t dma) {
 80050dc:	b480      	push	{r7}
 80050de:	b089      	sub	sp, #36	; 0x24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4611      	mov	r1, r2
 80050e8:	461a      	mov	r2, r3
 80050ea:	460b      	mov	r3, r1
 80050ec:	71fb      	strb	r3, [r7, #7]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80bb      	strh	r3, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	617b      	str	r3, [r7, #20]
    uint8_t * pSrc = src;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	61fb      	str	r3, [r7, #28]
    uint32_t count32b;
    uint32_t i;

    if (dma == 0U) {
 80050fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d123      	bne.n	800514a <USB_WritePacket+0x6e>
        count32b = ((uint32_t)len + 3U) / 4U;
 8005102:	88bb      	ldrh	r3, [r7, #4]
 8005104:	3303      	adds	r3, #3
 8005106:	089b      	lsrs	r3, r3, #2
 8005108:	613b      	str	r3, [r7, #16]
        for (i = 0U; i < count32b; i++) {
 800510a:	2300      	movs	r3, #0
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	e018      	b.n	8005142 <USB_WritePacket+0x66>
            USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	031a      	lsls	r2, r3, #12
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	4413      	add	r3, r2
 8005118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511c:	461a      	mov	r2, r3
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6013      	str	r3, [r2, #0]
            pSrc++;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	3301      	adds	r3, #1
 8005128:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3301      	adds	r3, #1
 800512e:	61fb      	str	r3, [r7, #28]
            pSrc++;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3301      	adds	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
            pSrc++;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3301      	adds	r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
        for (i = 0U; i < count32b; i++) {
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	3301      	adds	r3, #1
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	429a      	cmp	r2, r3
 8005148:	d3e2      	bcc.n	8005110 <USB_WritePacket+0x34>
        }
    }

    return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3724      	adds	r7, #36	; 0x24
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <USB_ReadPacket>:
 * @param  USBx  Selected device
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void * USB_ReadPacket(USB_OTG_GlobalTypeDef * USBx, uint8_t * dest, uint16_t len) {
 8005158:	b480      	push	{r7}
 800515a:	b08b      	sub	sp, #44	; 0x2c
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	80fb      	strh	r3, [r7, #6]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	61bb      	str	r3, [r7, #24]
    uint8_t * pDest = dest;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t pData;
    uint32_t i;
    uint32_t count32b = (uint32_t)len >> 2U;
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	089b      	lsrs	r3, r3, #2
 8005172:	b29b      	uxth	r3, r3
 8005174:	617b      	str	r3, [r7, #20]
    uint16_t remaining_bytes = len % 4U;
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	83fb      	strh	r3, [r7, #30]

    for (i = 0U; i < count32b; i++) {
 800517e:	2300      	movs	r3, #0
 8005180:	623b      	str	r3, [r7, #32]
 8005182:	e014      	b.n	80051ae <USB_ReadPacket+0x56>
        __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	601a      	str	r2, [r3, #0]
        pDest++;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	3301      	adds	r3, #1
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
        pDest++;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	3301      	adds	r3, #1
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
        pDest++;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	3301      	adds	r3, #1
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
        pDest++;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	3301      	adds	r3, #1
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0U; i < count32b; i++) {
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	3301      	adds	r3, #1
 80051ac:	623b      	str	r3, [r7, #32]
 80051ae:	6a3a      	ldr	r2, [r7, #32]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d3e6      	bcc.n	8005184 <USB_ReadPacket+0x2c>
    }

    /* When Number of data is not word aligned, read the remaining byte */
    if (remaining_bytes != 0U) {
 80051b6:	8bfb      	ldrh	r3, [r7, #30]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01e      	beq.n	80051fa <USB_ReadPacket+0xa2>
        i = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	623b      	str	r3, [r7, #32]
        __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c6:	461a      	mov	r2, r3
 80051c8:	f107 0310 	add.w	r3, r7, #16
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	601a      	str	r2, [r3, #0]

        do {
            *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	701a      	strb	r2, [r3, #0]
            i++;
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	3301      	adds	r3, #1
 80051e6:	623b      	str	r3, [r7, #32]
            pDest++;
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	3301      	adds	r3, #1
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
            remaining_bytes--;
 80051ee:	8bfb      	ldrh	r3, [r7, #30]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	83fb      	strh	r3, [r7, #30]
        } while (remaining_bytes != 0U);
 80051f4:	8bfb      	ldrh	r3, [r7, #30]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ea      	bne.n	80051d0 <USB_ReadPacket+0x78>
    }

    return ((void *)pDest);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	372c      	adds	r7, #44	; 0x2c
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <USB_EPSetStall>:
 * @brief  USB_EPSetStall : set a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d12c      	bne.n	800527e <USB_EPSetStall+0x76>
        if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	db12      	blt.n	800525c <USB_EPSetStall+0x54>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00f      	beq.n	800525c <USB_EPSetStall+0x54>
            USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800525a:	6013      	str	r3, [r2, #0]
        }
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	e02b      	b.n	80052d6 <USB_EPSetStall+0xce>
    } else {
        if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	db12      	blt.n	80052b6 <USB_EPSetStall+0xae>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00f      	beq.n	80052b6 <USB_EPSetStall+0xae>
            USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052b4:	6013      	str	r3, [r2, #0]
        }
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052d4:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USB_EPClearStall>:
 * @brief  USB_EPClearStall : Clear a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d128      	bne.n	8005352 <USB_EPClearStall+0x6e>
        USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800531e:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	791b      	ldrb	r3, [r3, #4]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d003      	beq.n	8005330 <USB_EPClearStall+0x4c>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	791b      	ldrb	r3, [r3, #4]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d138      	bne.n	80053a2 <USB_EPClearStall+0xbe>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	e027      	b.n	80053a2 <USB_EPClearStall+0xbe>
        }
    } else {
        USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005370:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	791b      	ldrb	r3, [r3, #4]
 8005376:	2b03      	cmp	r3, #3
 8005378:	d003      	beq.n	8005382 <USB_EPClearStall+0x9e>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	791b      	ldrb	r3, [r3, #4]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d10f      	bne.n	80053a2 <USB_EPClearStall+0xbe>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a0:	6013      	str	r3, [r2, #0]
        }
    }
    return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <USB_SetDevAddress>:
 * @param  USBx  Selected device
 * @param  address  new device address to be assigned
 *          This parameter can be a value from 0 to 255
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef * USBx, uint8_t address) {
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053d2:	6013      	str	r3, [r2, #0]
    USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80053e4:	68f9      	ldr	r1, [r7, #12]
 80053e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]

    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <USB_DevConnect>:
/**
 * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef * USBx) {
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800542a:	f023 0302 	bic.w	r3, r3, #2
 800542e:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <USB_DevDisconnect>:
/**
 * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef * USBx) {
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005458:	f023 0303 	bic.w	r3, r3, #3
 800545c:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800546c:	f043 0302 	orr.w	r3, r3, #2
 8005470:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef * USBx) {
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg;

    tmpreg = USBx->GINTSTS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	60fb      	str	r3, [r7, #12]
    tmpreg &= USBx->GINTMSK;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

    return tmpreg;
 8005498:	68fb      	ldr	r3, [r7, #12]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <USB_ReadDevAllOutEpInterrupt>:
/**
 * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef * USBx) {
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xffff0000U) >> 16);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	0c1b      	lsrs	r3, r3, #16
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_ReadDevAllInEpInterrupt>:
/**
 * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef * USBx) {
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	4013      	ands	r3, r2
 80054fc:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xFFFFU));
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	b29b      	uxth	r3, r3
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <USB_ReadDevOutEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device OUT EP Interrupt register
 */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef * USBx, uint8_t epnum) {
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DOEPMSK;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 800553c:	68bb      	ldr	r3, [r7, #8]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USB_ReadDevInEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device IN EP Interrupt register
 */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef * USBx, uint8_t epnum) {
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	617b      	str	r3, [r7, #20]
    uint32_t tmpreg;
    uint32_t msk;
    uint32_t emp;

    msk = USBx_DEVICE->DIEPMSK;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	613b      	str	r3, [r7, #16]
    emp = USBx_DEVICE->DIEPEMPMSK;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	60fb      	str	r3, [r7, #12]
    msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800556e:	78fb      	ldrb	r3, [r7, #3]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	fa22 f303 	lsr.w	r3, r2, r3
 800557a:	01db      	lsls	r3, r3, #7
 800557c:	b2db      	uxtb	r3, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
    tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4013      	ands	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 8005598:	68bb      	ldr	r3, [r7, #8]
}
 800559a:	4618      	mov	r0, r3
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef * USBx) {
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
    return ((USBx->GINTSTS) & 0x1U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f003 0301 	and.w	r3, r3, #1
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_ActivateSetup>:
/**
 * @brief  Activate EP0 for Setup transactions
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef * USBx) {
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]

    /* Set the MPS of the IN EP0 to 64 bytes */
    USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055e0:	f023 0307 	bic.w	r3, r3, #7
 80055e4:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f8:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <USB_EP0_OutStart>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @param  psetup  pointer to setup packet
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef * USBx, uint8_t dma, uint8_t * psetup) {
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	460b      	mov	r3, r1
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	72fb      	strb	r3, [r7, #11]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	617b      	str	r3, [r7, #20]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	333c      	adds	r3, #60	; 0x3c
 800561e:	3304      	adds	r3, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	613b      	str	r3, [r7, #16]

    if (gSNPSiD > USB_OTG_CORE_ID_300A) {
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4a26      	ldr	r2, [pc, #152]	; (80056c0 <USB_EP0_OutStart+0xb8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d90a      	bls.n	8005642 <USB_EP0_OutStart+0x3a>
        if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800563c:	d101      	bne.n	8005642 <USB_EP0_OutStart+0x3a>
            return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e037      	b.n	80056b2 <USB_EP0_OutStart+0xaa>
        }
    }

    USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	461a      	mov	r2, r3
 800564a:	2300      	movs	r3, #0
 800564c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005660:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f043 0318 	orr.w	r3, r3, #24
 8005674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_STUPCNT;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005684:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005688:	6113      	str	r3, [r2, #16]

    if (dma == 1U) {
 800568a:	7afb      	ldrb	r3, [r7, #11]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d10f      	bne.n	80056b0 <USB_EP0_OutStart+0xa8>
        USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	461a      	mov	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6153      	str	r3, [r2, #20]
        /* EP enable */
        USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056ae:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	4f54300a 	.word	0x4f54300a

080056c4 <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef * USBx) {
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a13      	ldr	r2, [pc, #76]	; (8005728 <USB_CoreReset+0x64>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <USB_CoreReset+0x1e>
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e01b      	b.n	800571a <USB_CoreReset+0x56>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	daf2      	bge.n	80056d0 <USB_CoreReset+0xc>

    /* Core Soft Reset */
    count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f043 0201 	orr.w	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	611a      	str	r2, [r3, #16]

    do {
        count++;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a09      	ldr	r2, [pc, #36]	; (8005728 <USB_CoreReset+0x64>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d901      	bls.n	800570c <USB_CoreReset+0x48>
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e006      	b.n	800571a <USB_CoreReset+0x56>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d0f0      	beq.n	80056fa <USB_CoreReset+0x36>

    return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	00030d40 	.word	0x00030d40

0800572c <USBD_CDC_Init>:
 *         Initialize the CDC interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
    UNUSED(cfgidx);
    USBD_CDC_HandleTypeDef * hcdc;

    hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005738:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800573c:	f002 fc8a 	bl	8008054 <USBD_static_malloc>
 8005740:	60f8      	str	r0, [r7, #12]

    if (hcdc == NULL) {
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d109      	bne.n	800575c <USBD_CDC_Init+0x30>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	32b0      	adds	r2, #176	; 0xb0
 8005752:	2100      	movs	r1, #0
 8005754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        return (uint8_t)USBD_EMEM;
 8005758:	2302      	movs	r3, #2
 800575a:	e0d4      	b.n	8005906 <USBD_CDC_Init+0x1da>
    }

    (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800575c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005760:	2100      	movs	r1, #0
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f002 fcec 	bl	8008140 <memset>

    pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	32b0      	adds	r2, #176	; 0xb0
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	32b0      	adds	r2, #176	; 0xb0
 8005782:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    CDCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
    CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	7c1b      	ldrb	r3, [r3, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d138      	bne.n	8005806 <USBD_CDC_Init+0xda>
        /* Open EP IN */
        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_HS_IN_PACKET_SIZE);
 8005794:	4b5e      	ldr	r3, [pc, #376]	; (8005910 <USBD_CDC_Init+0x1e4>)
 8005796:	7819      	ldrb	r1, [r3, #0]
 8005798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800579c:	2202      	movs	r2, #2
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f002 fb35 	bl	8007e0e <USBD_LL_OpenEP>

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057a4:	4b5a      	ldr	r3, [pc, #360]	; (8005910 <USBD_CDC_Init+0x1e4>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f003 020f 	and.w	r2, r3, #15
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	3324      	adds	r3, #36	; 0x24
 80057ba:	2201      	movs	r2, #1
 80057bc:	801a      	strh	r2, [r3, #0]

        /* Open EP OUT */
        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_HS_OUT_PACKET_SIZE);
 80057be:	4b55      	ldr	r3, [pc, #340]	; (8005914 <USBD_CDC_Init+0x1e8>)
 80057c0:	7819      	ldrb	r1, [r3, #0]
 80057c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057c6:	2202      	movs	r2, #2
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f002 fb20 	bl	8007e0e <USBD_LL_OpenEP>

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057ce:	4b51      	ldr	r3, [pc, #324]	; (8005914 <USBD_CDC_Init+0x1e8>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	f003 020f 	and.w	r2, r3, #15
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057e6:	2201      	movs	r2, #1
 80057e8:	801a      	strh	r2, [r3, #0]

        /* Set bInterval for CDC CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80057ea:	4b4b      	ldr	r3, [pc, #300]	; (8005918 <USBD_CDC_Init+0x1ec>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	f003 020f 	and.w	r2, r3, #15
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	3326      	adds	r3, #38	; 0x26
 8005800:	2210      	movs	r2, #16
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	e035      	b.n	8005872 <USBD_CDC_Init+0x146>
    } else {
        /* Open EP IN */
        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_FS_IN_PACKET_SIZE);
 8005806:	4b42      	ldr	r3, [pc, #264]	; (8005910 <USBD_CDC_Init+0x1e4>)
 8005808:	7819      	ldrb	r1, [r3, #0]
 800580a:	2340      	movs	r3, #64	; 0x40
 800580c:	2202      	movs	r2, #2
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f002 fafd 	bl	8007e0e <USBD_LL_OpenEP>

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005814:	4b3e      	ldr	r3, [pc, #248]	; (8005910 <USBD_CDC_Init+0x1e4>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	3324      	adds	r3, #36	; 0x24
 800582a:	2201      	movs	r2, #1
 800582c:	801a      	strh	r2, [r3, #0]

        /* Open EP OUT */
        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_FS_OUT_PACKET_SIZE);
 800582e:	4b39      	ldr	r3, [pc, #228]	; (8005914 <USBD_CDC_Init+0x1e8>)
 8005830:	7819      	ldrb	r1, [r3, #0]
 8005832:	2340      	movs	r3, #64	; 0x40
 8005834:	2202      	movs	r2, #2
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f002 fae9 	bl	8007e0e <USBD_LL_OpenEP>

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800583c:	4b35      	ldr	r3, [pc, #212]	; (8005914 <USBD_CDC_Init+0x1e8>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f003 020f 	and.w	r2, r3, #15
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005854:	2201      	movs	r2, #1
 8005856:	801a      	strh	r2, [r3, #0]

        /* Set bInterval for CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005858:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <USBD_CDC_Init+0x1ec>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	f003 020f 	and.w	r2, r3, #15
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	3326      	adds	r3, #38	; 0x26
 800586e:	2210      	movs	r2, #16
 8005870:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005872:	4b29      	ldr	r3, [pc, #164]	; (8005918 <USBD_CDC_Init+0x1ec>)
 8005874:	7819      	ldrb	r1, [r3, #0]
 8005876:	2308      	movs	r3, #8
 8005878:	2203      	movs	r2, #3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f002 fac7 	bl	8007e0e <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <USBD_CDC_Init+0x1ec>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	3324      	adds	r3, #36	; 0x24
 8005896:	2201      	movs	r2, #1
 8005898:	801a      	strh	r2, [r3, #0]

    hcdc->RxBuffer = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	33b0      	adds	r3, #176	; 0xb0
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (hcdc->RxBuffer == NULL) {
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <USBD_CDC_Init+0x1a8>
        return (uint8_t)USBD_EMEM;
 80058d0:	2302      	movs	r3, #2
 80058d2:	e018      	b.n	8005906 <USBD_CDC_Init+0x1da>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	7c1b      	ldrb	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <USBD_CDC_Init+0x1c6>
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <USBD_CDC_Init+0x1e8>)
 80058de:	7819      	ldrb	r1, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f002 fb7e 	bl	8007fec <USBD_LL_PrepareReceive>
 80058f0:	e008      	b.n	8005904 <USBD_CDC_Init+0x1d8>
                                     CDC_DATA_HS_OUT_PACKET_SIZE);
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <USBD_CDC_Init+0x1e8>)
 80058f4:	7819      	ldrb	r1, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058fc:	2340      	movs	r3, #64	; 0x40
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f002 fb74 	bl	8007fec <USBD_LL_PrepareReceive>
                                     CDC_DATA_FS_OUT_PACKET_SIZE);
    }

    return (uint8_t)USBD_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000093 	.word	0x20000093
 8005914:	20000094 	.word	0x20000094
 8005918:	20000095 	.word	0x20000095

0800591c <USBD_CDC_DeInit>:
 *         DeInitialize the CDC layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
    CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005928:	4b3a      	ldr	r3, [pc, #232]	; (8005a14 <USBD_CDC_DeInit+0xf8>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 fa93 	bl	8007e5a <USBD_LL_CloseEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005934:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <USBD_CDC_DeInit+0xf8>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f003 020f 	and.w	r2, r3, #15
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	3324      	adds	r3, #36	; 0x24
 800594a:	2200      	movs	r2, #0
 800594c:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800594e:	4b32      	ldr	r3, [pc, #200]	; (8005a18 <USBD_CDC_DeInit+0xfc>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f002 fa80 	bl	8007e5a <USBD_LL_CloseEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800595a:	4b2f      	ldr	r3, [pc, #188]	; (8005a18 <USBD_CDC_DeInit+0xfc>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	f003 020f 	and.w	r2, r3, #15
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005972:	2200      	movs	r2, #0
 8005974:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005976:	4b29      	ldr	r3, [pc, #164]	; (8005a1c <USBD_CDC_DeInit+0x100>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f002 fa6c 	bl	8007e5a <USBD_LL_CloseEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005982:	4b26      	ldr	r3, [pc, #152]	; (8005a1c <USBD_CDC_DeInit+0x100>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	f003 020f 	and.w	r2, r3, #15
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	3324      	adds	r3, #36	; 0x24
 8005998:	2200      	movs	r2, #0
 800599a:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800599c:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <USBD_CDC_DeInit+0x100>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 020f 	and.w	r2, r3, #15
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	3326      	adds	r3, #38	; 0x26
 80059b2:	2200      	movs	r2, #0
 80059b4:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    if (pdev->pClassDataCmsit[pdev->classId] != NULL) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	32b0      	adds	r2, #176	; 0xb0
 80059c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01f      	beq.n	8005a08 <USBD_CDC_DeInit+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	33b0      	adds	r3, #176	; 0xb0
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4798      	blx	r3
        (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	32b0      	adds	r2, #176	; 0xb0
 80059e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f002 fb40 	bl	8008070 <USBD_static_free>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	32b0      	adds	r2, #176	; 0xb0
 80059fa:	2100      	movs	r1, #0
 80059fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pdev->pClassData = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    }

    return (uint8_t)USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000093 	.word	0x20000093
 8005a18:	20000094 	.word	0x20000094
 8005a1c:	20000095 	.word	0x20000095

08005a20 <USBD_CDC_Setup>:
 *         Handle the CDC specific requests
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	32b0      	adds	r2, #176	; 0xb0
 8005a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a38:	613b      	str	r3, [r7, #16]
    uint16_t len;
    uint8_t ifalt = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	737b      	strb	r3, [r7, #13]
    uint16_t status_info = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	817b      	strh	r3, [r7, #10]
    USBD_StatusTypeDef ret = USBD_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75fb      	strb	r3, [r7, #23]

    if (hcdc == NULL) {
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <USBD_CDC_Setup+0x30>
        return (uint8_t)USBD_FAIL;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e0bf      	b.n	8005bd0 <USBD_CDC_Setup+0x1b0>
    }

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d050      	beq.n	8005afe <USBD_CDC_Setup+0xde>
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	f040 80af 	bne.w	8005bc0 <USBD_CDC_Setup+0x1a0>
    case USB_REQ_TYPE_CLASS:
        if (req->wLength != 0U) {
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	88db      	ldrh	r3, [r3, #6]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d03a      	beq.n	8005ae0 <USBD_CDC_Setup+0xc0>
            if ((req->bmRequest & 0x80U) != 0U) {
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b25b      	sxtb	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	da1b      	bge.n	8005aac <USBD_CDC_Setup+0x8c>
                ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	33b0      	adds	r3, #176	; 0xb0
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	685b      	ldr	r3, [r3, #4]
                    ->Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 8005a84:	689b      	ldr	r3, [r3, #8]
                ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	7850      	ldrb	r0, [r2, #1]
                    ->Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 8005a8a:	6939      	ldr	r1, [r7, #16]
                ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	88d2      	ldrh	r2, [r2, #6]
 8005a90:	4798      	blx	r3

                len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	88db      	ldrh	r3, [r3, #6]
 8005a96:	2b07      	cmp	r3, #7
 8005a98:	bf28      	it	cs
 8005a9a:	2307      	movcs	r3, #7
 8005a9c:	81fb      	strh	r3, [r7, #14]
                (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	89fa      	ldrh	r2, [r7, #14]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 fd89 	bl	80075bc <USBD_CtlSendData>
            }
        } else {
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
                ->Control(req->bRequest, (uint8_t *)req, 0U);
        }
        break;
 8005aaa:	e090      	b.n	8005bce <USBD_CDC_Setup+0x1ae>
                hcdc->CmdOpCode = req->bRequest;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	785a      	ldrb	r2, [r3, #1]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
                hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	88db      	ldrh	r3, [r3, #6]
 8005aba:	2b3f      	cmp	r3, #63	; 0x3f
 8005abc:	d803      	bhi.n	8005ac6 <USBD_CDC_Setup+0xa6>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	88db      	ldrh	r3, [r3, #6]
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	e000      	b.n	8005ac8 <USBD_CDC_Setup+0xa8>
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005ace:	6939      	ldr	r1, [r7, #16]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 fd9b 	bl	8007614 <USBD_CtlPrepareRx>
        break;
 8005ade:	e076      	b.n	8005bce <USBD_CDC_Setup+0x1ae>
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	33b0      	adds	r3, #176	; 0xb0
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	685b      	ldr	r3, [r3, #4]
                ->Control(req->bRequest, (uint8_t *)req, 0U);
 8005af0:	689b      	ldr	r3, [r3, #8]
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	7850      	ldrb	r0, [r2, #1]
 8005af6:	2200      	movs	r2, #0
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	4798      	blx	r3
        break;
 8005afc:	e067      	b.n	8005bce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	2b0b      	cmp	r3, #11
 8005b04:	d851      	bhi.n	8005baa <USBD_CDC_Setup+0x18a>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <USBD_CDC_Setup+0xec>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b3d 	.word	0x08005b3d
 8005b10:	08005bb9 	.word	0x08005bb9
 8005b14:	08005bab 	.word	0x08005bab
 8005b18:	08005bab 	.word	0x08005bab
 8005b1c:	08005bab 	.word	0x08005bab
 8005b20:	08005bab 	.word	0x08005bab
 8005b24:	08005bab 	.word	0x08005bab
 8005b28:	08005bab 	.word	0x08005bab
 8005b2c:	08005bab 	.word	0x08005bab
 8005b30:	08005bab 	.word	0x08005bab
 8005b34:	08005b67 	.word	0x08005b67
 8005b38:	08005b91 	.word	0x08005b91
        case USB_REQ_GET_STATUS:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d107      	bne.n	8005b58 <USBD_CDC_Setup+0x138>
                (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b48:	f107 030a 	add.w	r3, r7, #10
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 fd33 	bl	80075bc <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 8005b56:	e032      	b.n	8005bbe <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f001 fcbd 	bl	80074da <USBD_CtlError>
                ret = USBD_FAIL;
 8005b60:	2303      	movs	r3, #3
 8005b62:	75fb      	strb	r3, [r7, #23]
            break;
 8005b64:	e02b      	b.n	8005bbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d107      	bne.n	8005b82 <USBD_CDC_Setup+0x162>
                (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b72:	f107 030d 	add.w	r3, r7, #13
 8005b76:	2201      	movs	r2, #1
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 fd1e 	bl	80075bc <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 8005b80:	e01d      	b.n	8005bbe <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 fca8 	bl	80074da <USBD_CtlError>
                ret = USBD_FAIL;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	75fb      	strb	r3, [r7, #23]
            break;
 8005b8e:	e016      	b.n	8005bbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
            if (pdev->dev_state != USBD_STATE_CONFIGURED) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d00f      	beq.n	8005bbc <USBD_CDC_Setup+0x19c>
                USBD_CtlError(pdev, req);
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 fc9b 	bl	80074da <USBD_CtlError>
                ret = USBD_FAIL;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8005ba8:	e008      	b.n	8005bbc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
            break;

        default:
            USBD_CtlError(pdev, req);
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 fc94 	bl	80074da <USBD_CtlError>
            ret = USBD_FAIL;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	75fb      	strb	r3, [r7, #23]
            break;
 8005bb6:	e002      	b.n	8005bbe <USBD_CDC_Setup+0x19e>
            break;
 8005bb8:	bf00      	nop
 8005bba:	e008      	b.n	8005bce <USBD_CDC_Setup+0x1ae>
            break;
 8005bbc:	bf00      	nop
        }
        break;
 8005bbe:	e006      	b.n	8005bce <USBD_CDC_Setup+0x1ae>

    default:
        USBD_CtlError(pdev, req);
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 fc89 	bl	80074da <USBD_CtlError>
        ret = USBD_FAIL;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	75fb      	strb	r3, [r7, #23]
        break;
 8005bcc:	bf00      	nop
    }

    return (uint8_t)ret;
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <USBD_CDC_DataIn>:
 *         Data sent on non-control IN endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef * hcdc;
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005bea:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	32b0      	adds	r2, #176	; 0xb0
 8005bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <USBD_CDC_DataIn+0x2a>
        return (uint8_t)USBD_FAIL;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e065      	b.n	8005cce <USBD_CDC_DataIn+0xf6>
    }

    hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	32b0      	adds	r2, #176	; 0xb0
 8005c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c10:	60bb      	str	r3, [r7, #8]

    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	f003 020f 	and.w	r2, r3, #15
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	3318      	adds	r3, #24
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d02f      	beq.n	8005c8c <USBD_CDC_DataIn+0xb4>
        ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U)) {
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	f003 020f 	and.w	r2, r3, #15
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3318      	adds	r3, #24
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	f003 010f 	and.w	r1, r3, #15
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	440b      	add	r3, r1
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4403      	add	r3, r0
 8005c54:	3348      	adds	r3, #72	; 0x48
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	1ad3      	subs	r3, r2, r3
    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d112      	bne.n	8005c8c <USBD_CDC_DataIn+0xb4>
        /* Update the packet total length */
        pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	f003 020f 	and.w	r2, r3, #15
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	3318      	adds	r3, #24
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

        /* Send ZLP */
        (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c7e:	78f9      	ldrb	r1, [r7, #3]
 8005c80:	2300      	movs	r3, #0
 8005c82:	2200      	movs	r2, #0
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f002 f990 	bl	8007faa <USBD_LL_Transmit>
 8005c8a:	e01f      	b.n	8005ccc <USBD_CDC_DataIn+0xf4>
    } else {
        hcdc->TxState = 0U;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

        if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	33b0      	adds	r3, #176	; 0xb0
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d010      	beq.n	8005ccc <USBD_CDC_DataIn+0xf4>
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	33b0      	adds	r3, #176	; 0xb0
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	685b      	ldr	r3, [r3, #4]
                ->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005cba:	691b      	ldr	r3, [r3, #16]
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005cc8:	78fa      	ldrb	r2, [r7, #3]
 8005cca:	4798      	blx	r3
        }
    }

    return (uint8_t)USBD_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_CDC_DataOut>:
 *         Data received on non-control Out endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	32b0      	adds	r2, #176	; 0xb0
 8005cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf0:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	32b0      	adds	r2, #176	; 0xb0
 8005cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <USBD_CDC_DataOut+0x32>
        return (uint8_t)USBD_FAIL;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e01a      	b.n	8005d3e <USBD_CDC_DataOut+0x68>
    }

    /* Get the received data length */
    hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f002 f98e 	bl	800802e <USBD_LL_GetRxDataSize>
 8005d12:	4602      	mov	r2, r0
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* USB data will be immediately processed, this allow next USB traffic being
    NAKed till the end of the application Xfer */

    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	33b0      	adds	r3, #176	; 0xb0
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	685b      	ldr	r3, [r3, #4]
        ->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d2a:	68db      	ldr	r3, [r3, #12]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d38:	4611      	mov	r1, r2
 8005d3a:	4798      	blx	r3

    return (uint8_t)USBD_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <USBD_CDC_EP0_RxReady>:
 * @brief  USBD_CDC_EP0_RxReady
 *         Handle EP0 Rx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef * pdev) {
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	32b0      	adds	r2, #176	; 0xb0
 8005d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5c:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <USBD_CDC_EP0_RxReady+0x22>
        return (uint8_t)USBD_FAIL;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e025      	b.n	8005db4 <USBD_CDC_EP0_RxReady+0x6e>
    }

    if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU)) {
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	33b0      	adds	r3, #176	; 0xb0
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01a      	beq.n	8005db2 <USBD_CDC_EP0_RxReady+0x6c>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d82:	2bff      	cmp	r3, #255	; 0xff
 8005d84:	d015      	beq.n	8005db2 <USBD_CDC_EP0_RxReady+0x6c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	33b0      	adds	r3, #176	; 0xb0
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	685b      	ldr	r3, [r3, #4]
            ->Control(hcdc->CmdOpCode, (uint8_t *)hcdc->data, (uint16_t)hcdc->CmdLength);
 8005d96:	689b      	ldr	r3, [r3, #8]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
            ->Control(hcdc->CmdOpCode, (uint8_t *)hcdc->data, (uint16_t)hcdc->CmdLength);
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005da6:	b292      	uxth	r2, r2
 8005da8:	4798      	blx	r3
        hcdc->CmdOpCode = 0xFFU;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	22ff      	movs	r2, #255	; 0xff
 8005dae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
    }

    return (uint8_t)USBD_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USBD_CDC_GetFSCfgDesc>:
 * @brief  USBD_CDC_GetFSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetFSCfgDesc(uint16_t * length) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005dc4:	2182      	movs	r1, #130	; 0x82
 8005dc6:	4818      	ldr	r0, [pc, #96]	; (8005e28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005dc8:	f000 fd4f 	bl	800686a <USBD_GetEpDesc>
 8005dcc:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dce:	2101      	movs	r1, #1
 8005dd0:	4815      	ldr	r0, [pc, #84]	; (8005e28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005dd2:	f000 fd4a 	bl	800686a <USBD_GetEpDesc>
 8005dd6:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dd8:	2181      	movs	r1, #129	; 0x81
 8005dda:	4813      	ldr	r0, [pc, #76]	; (8005e28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ddc:	f000 fd45 	bl	800686a <USBD_GetEpDesc>
 8005de0:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <USBD_CDC_GetFSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2210      	movs	r2, #16
 8005dec:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d006      	beq.n	8005e02 <USBD_CDC_GetFSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfc:	711a      	strb	r2, [r3, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d006      	beq.n	8005e16 <USBD_CDC_GetFSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e10:	711a      	strb	r2, [r3, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2243      	movs	r2, #67	; 0x43
 8005e1a:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 8005e1c:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000050 	.word	0x20000050

08005e2c <USBD_CDC_GetHSCfgDesc>:
 * @brief  USBD_CDC_GetHSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetHSCfgDesc(uint16_t * length) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e34:	2182      	movs	r1, #130	; 0x82
 8005e36:	4818      	ldr	r0, [pc, #96]	; (8005e98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e38:	f000 fd17 	bl	800686a <USBD_GetEpDesc>
 8005e3c:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e3e:	2101      	movs	r1, #1
 8005e40:	4815      	ldr	r0, [pc, #84]	; (8005e98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e42:	f000 fd12 	bl	800686a <USBD_GetEpDesc>
 8005e46:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e48:	2181      	movs	r1, #129	; 0x81
 8005e4a:	4813      	ldr	r0, [pc, #76]	; (8005e98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e4c:	f000 fd0d 	bl	800686a <USBD_GetEpDesc>
 8005e50:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <USBD_CDC_GetHSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d006      	beq.n	8005e72 <USBD_CDC_GetHSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2200      	movs	r2, #0
 8005e68:	711a      	strb	r2, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f042 0202 	orr.w	r2, r2, #2
 8005e70:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d006      	beq.n	8005e86 <USBD_CDC_GetHSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	711a      	strb	r2, [r3, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f042 0202 	orr.w	r2, r2, #2
 8005e84:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2243      	movs	r2, #67	; 0x43
 8005e8a:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000050 	.word	0x20000050

08005e9c <USBD_CDC_GetOtherSpeedCfgDesc>:
 * @brief  USBD_CDC_GetOtherSpeedCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetOtherSpeedCfgDesc(uint16_t * length) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ea4:	2182      	movs	r1, #130	; 0x82
 8005ea6:	4818      	ldr	r0, [pc, #96]	; (8005f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ea8:	f000 fcdf 	bl	800686a <USBD_GetEpDesc>
 8005eac:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4815      	ldr	r0, [pc, #84]	; (8005f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005eb2:	f000 fcda 	bl	800686a <USBD_GetEpDesc>
 8005eb6:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005eb8:	2181      	movs	r1, #129	; 0x81
 8005eba:	4813      	ldr	r0, [pc, #76]	; (8005f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ebc:	f000 fcd5 	bl	800686a <USBD_GetEpDesc>
 8005ec0:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2210      	movs	r2, #16
 8005ecc:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d006      	beq.n	8005ee2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005edc:	711a      	strb	r2, [r3, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d006      	beq.n	8005ef6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ef0:	711a      	strb	r2, [r3, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2243      	movs	r2, #67	; 0x43
 8005efa:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000050 	.word	0x20000050

08005f0c <USBD_CDC_GetDeviceQualifierDescriptor>:
 * @brief  USBD_CDC_GetDeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t * USBD_CDC_GetDeviceQualifierDescriptor(uint16_t * length) {
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
    *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	220a      	movs	r2, #10
 8005f18:	801a      	strh	r2, [r3, #0]

    return USBD_CDC_DeviceQualifierDesc;
 8005f1a:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	2000000c 	.word	0x2000000c

08005f2c <USBD_CDC_RegisterInterface>:
 * @brief  USBD_CDC_RegisterInterface
 * @param  pdev: device instance
 * @param  fops: CD  Interface callback
 * @retval status
 */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef * pdev, USBD_CDC_ItfTypeDef * fops) {
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
    if (fops == NULL) {
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <USBD_CDC_RegisterInterface+0x14>
        return (uint8_t)USBD_FAIL;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e009      	b.n	8005f54 <USBD_CDC_RegisterInterface+0x28>
    }

    pdev->pUserData[pdev->classId] = fops;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	33b0      	adds	r3, #176	; 0xb0
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	605a      	str	r2, [r3, #4]

    return (uint8_t)USBD_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USBD_CDC_SetTxBuffer>:
 * @param  pdev: device instance
 * @param  pbuff: Tx Buffer
 * @param  length: Tx Buffer length
 * @retval status
 */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef * pdev, uint8_t * pbuff, uint32_t length) {
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	32b0      	adds	r2, #176	; 0xb0
 8005f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7a:	617b      	str	r3, [r7, #20]

    if (hcdc == NULL) {
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <USBD_CDC_SetTxBuffer+0x26>
        return (uint8_t)USBD_FAIL;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e008      	b.n	8005f98 <USBD_CDC_SetTxBuffer+0x38>
    }

    hcdc->TxBuffer = pbuff;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hcdc->TxLength = length;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    return (uint8_t)USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USBD_CDC_SetRxBuffer>:
 * @brief  USBD_CDC_SetRxBuffer
 * @param  pdev: device instance
 * @param  pbuff: Rx Buffer
 * @retval status
 */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef * pdev, uint8_t * pbuff) {
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	32b0      	adds	r2, #176	; 0xb0
 8005fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbc:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <USBD_CDC_SetRxBuffer+0x24>
        return (uint8_t)USBD_FAIL;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e004      	b.n	8005fd2 <USBD_CDC_SetRxBuffer+0x2e>
    }

    hcdc->RxBuffer = pbuff;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

    return (uint8_t)USBD_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <USBD_CDC_TransmitPacket>:
 * @brief  USBD_CDC_TransmitPacket
 *         Transmit packet on IN endpoint
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef * pdev) {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	32b0      	adds	r2, #176	; 0xb0
 8005ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff6:	60bb      	str	r3, [r7, #8]
    USBD_StatusTypeDef ret = USBD_BUSY;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
    /* Get the Endpoints addresses allocated for this class instance */
    CDCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	32b0      	adds	r2, #176	; 0xb0
 8006006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <USBD_CDC_TransmitPacket+0x32>
        return (uint8_t)USBD_FAIL;
 800600e:	2303      	movs	r3, #3
 8006010:	e025      	b.n	800605e <USBD_CDC_TransmitPacket+0x7e>
    }

    if (hcdc->TxState == 0U) {
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11f      	bne.n	800605c <USBD_CDC_TransmitPacket+0x7c>
        /* Tx Transfer in progress */
        hcdc->TxState = 1U;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2201      	movs	r2, #1
 8006020:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

        /* Update the packet total length */
        pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006024:	4b10      	ldr	r3, [pc, #64]	; (8006068 <USBD_CDC_TransmitPacket+0x88>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f003 020f 	and.w	r2, r3, #15
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4403      	add	r3, r0
 800603e:	3318      	adds	r3, #24
 8006040:	6019      	str	r1, [r3, #0]

        /* Transmit next packet */
        (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006042:	4b09      	ldr	r3, [pc, #36]	; (8006068 <USBD_CDC_TransmitPacket+0x88>)
 8006044:	7819      	ldrb	r1, [r3, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f001 ffa9 	bl	8007faa <USBD_LL_Transmit>

        ret = USBD_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]
    }

    return (uint8_t)ret;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000093 	.word	0x20000093

0800606c <USBD_CDC_ReceivePacket>:
 * @brief  USBD_CDC_ReceivePacket
 *         prepare OUT Endpoint for reception
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef * pdev) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	32b0      	adds	r2, #176	; 0xb0
 800607e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006082:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
    /* Get the Endpoints addresses allocated for this class instance */
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	32b0      	adds	r2, #176	; 0xb0
 800608e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <USBD_CDC_ReceivePacket+0x2e>
        return (uint8_t)USBD_FAIL;
 8006096:	2303      	movs	r3, #3
 8006098:	e018      	b.n	80060cc <USBD_CDC_ReceivePacket+0x60>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7c1b      	ldrb	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <USBD_CDC_ReceivePacket+0x4c>
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <USBD_CDC_ReceivePacket+0x68>)
 80060a4:	7819      	ldrb	r1, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 ff9b 	bl	8007fec <USBD_LL_PrepareReceive>
 80060b6:	e008      	b.n	80060ca <USBD_CDC_ReceivePacket+0x5e>
                                     CDC_DATA_HS_OUT_PACKET_SIZE);
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <USBD_CDC_ReceivePacket+0x68>)
 80060ba:	7819      	ldrb	r1, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060c2:	2340      	movs	r3, #64	; 0x40
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 ff91 	bl	8007fec <USBD_LL_PrepareReceive>
                                     CDC_DATA_FS_OUT_PACKET_SIZE);
    }

    return (uint8_t)USBD_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000094 	.word	0x20000094

080060d8 <USBD_Init>:
 * @param  pdesc: Descriptor structure address
 * @param  id: Low level core index
 * @retval None
 */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef * pdev, USBD_DescriptorsTypeDef * pdesc,
                             uint8_t id) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef ret;

    /* Check whether the USB Host handle is valid */
    if (pdev == NULL) {
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <USBD_Init+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
        USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e01f      	b.n	8006130 <USBD_Init+0x58>
        pdev->NumClasses = 0;
        pdev->classId = 0;
    }
#else
    /* Unlink previous class*/
    pdev->pClass[0] = NULL;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData[0] = NULL;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

    pdev->pConfDesc = NULL;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

    /* Assign USBD Descriptors */
    if (pdesc != NULL) {
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <USBD_Init+0x3e>
        pdev->pDesc = pdesc;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    }

    /* Set Device initial State */
    pdev->dev_state = USBD_STATE_DEFAULT;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    pdev->id = id;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	79fa      	ldrb	r2, [r7, #7]
 8006122:	701a      	strb	r2, [r3, #0]

    /* Initialize low level driver */
    ret = USBD_LL_Init(pdev);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f001 fe0b 	bl	8007d40 <USBD_LL_Init>
 800612a:	4603      	mov	r3, r0
 800612c:	75fb      	strb	r3, [r7, #23]

    return ret;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_RegisterClass>:
 *         Link class driver to Device Core.
 * @param  pDevice : Device Handle
 * @param  pclass: Class handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef * pdev, USBD_ClassTypeDef * pclass) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	81fb      	strh	r3, [r7, #14]

    if (pclass == NULL) {
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <USBD_RegisterClass+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
        USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800614c:	2303      	movs	r3, #3
 800614e:	e025      	b.n	800619c <USBD_RegisterClass+0x64>
    }

    /* link the class to the USB Device handle */
    pdev->pClass[0] = pclass;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
#ifdef USE_USB_HS
    if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL) {
        pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
    }
#else  /* Default USE_USB_FS */
    if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL) {
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	32ae      	adds	r2, #174	; 0xae
 8006162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00f      	beq.n	800618c <USBD_RegisterClass+0x54>
        pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	32ae      	adds	r2, #174	; 0xae
 8006176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	f107 020e 	add.w	r2, r7, #14
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
 8006184:	4602      	mov	r2, r0
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
    }
#endif /* USE_USB_FS */

    /* Increment the NumClasses */
    pdev->NumClasses++;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

    return USBD_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USBD_Start>:
 * @brief  USBD_Start
 *         Start the USB Device Core.
 * @param  pdev: Device Handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef * pdev) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
    pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

    /* Start the low level driver  */
    return USBD_LL_Start(pdev);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 fe13 	bl	8007dd8 <USBD_LL_Start>
 80061b2:	4603      	mov	r3, r0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_RunTestMode>:
 * @brief  USBD_RunTestMode
 *         Launch test mode process
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef * pdev) {
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
    return ret;
#else
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 80061c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USBD_SetClassConfig>:
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status
 */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }
#else
    if (pdev->pClass[0] != NULL) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <USBD_SetClassConfig+0x2e>
        /* Set configuration and Start the Class */
        ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	78fa      	ldrb	r2, [r7, #3]
 80061f6:	4611      	mov	r1, r2
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USBD_ClrClassConfig>:
 *         Clear current configuration
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status: USBD_StatusTypeDef
 */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	460b      	mov	r3, r1
 8006214:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
#else
    /* Clear configuration  and De-initialize the Class process */
    if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U) {
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	4611      	mov	r1, r2
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USBD_ClrClassConfig+0x2a>
        ret = USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_LL_SetupStage>:
 * @brief  USBD_LL_SetupStage
 *         Handle the setup stage
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef * pdev, uint8_t * psetup) {
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret;

    USBD_ParseSetupRequest(&pdev->request, psetup);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f001 f908 	bl	8007466 <USBD_ParseSetupRequest>

    pdev->ep0_state = USBD_EP0_SETUP;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    pdev->ep0_data_len = pdev->request.wLength;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006264:	461a      	mov	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

    switch (pdev->request.bmRequest & 0x1FU) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	2b02      	cmp	r3, #2
 8006278:	d01a      	beq.n	80062b0 <USBD_LL_SetupStage+0x72>
 800627a:	2b02      	cmp	r3, #2
 800627c:	d822      	bhi.n	80062c4 <USBD_LL_SetupStage+0x86>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <USBD_LL_SetupStage+0x4a>
 8006282:	2b01      	cmp	r3, #1
 8006284:	d00a      	beq.n	800629c <USBD_LL_SetupStage+0x5e>
 8006286:	e01d      	b.n	80062c4 <USBD_LL_SetupStage+0x86>
    case USB_REQ_RECIPIENT_DEVICE:
        ret = USBD_StdDevReq(pdev, &pdev->request);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fb5f 	bl	8006954 <USBD_StdDevReq>
 8006296:	4603      	mov	r3, r0
 8006298:	73fb      	strb	r3, [r7, #15]
        break;
 800629a:	e020      	b.n	80062de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
        ret = USBD_StdItfReq(pdev, &pdev->request);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fbc7 	bl	8006a38 <USBD_StdItfReq>
 80062aa:	4603      	mov	r3, r0
 80062ac:	73fb      	strb	r3, [r7, #15]
        break;
 80062ae:	e016      	b.n	80062de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
        ret = USBD_StdEPReq(pdev, &pdev->request);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fc29 	bl	8006b10 <USBD_StdEPReq>
 80062be:	4603      	mov	r3, r0
 80062c0:	73fb      	strb	r3, [r7, #15]
        break;
 80062c2:	e00c      	b.n	80062de <USBD_LL_SetupStage+0xa0>

    default:
        ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 fde0 	bl	8007e98 <USBD_LL_StallEP>
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]
        break;
 80062dc:	bf00      	nop
    }

    return ret;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <USBD_LL_DataOutStage>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @param  pdata: data pointer
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef * pdev, uint8_t epnum, uint8_t * pdata) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	460b      	mov	r3, r1
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef * pep;
    USBD_StatusTypeDef ret = USBD_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]
    uint8_t idx;

    if (epnum == 0U) {
 80062fa:	7afb      	ldrb	r3, [r7, #11]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d16e      	bne.n	80063de <USBD_LL_DataOutStage+0xf6>
        pep = &pdev->ep_out[0];
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006306:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_OUT) {
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800630e:	2b03      	cmp	r3, #3
 8006310:	f040 8098 	bne.w	8006444 <USBD_LL_DataOutStage+0x15c>
            if (pep->rem_length > pep->maxpacket) {
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	429a      	cmp	r2, r3
 800631e:	d913      	bls.n	8006348 <USBD_LL_DataOutStage+0x60>
                pep->rem_length -= pep->maxpacket;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	1ad2      	subs	r2, r2, r3
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	609a      	str	r2, [r3, #8]

                (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	4293      	cmp	r3, r2
 8006338:	bf28      	it	cs
 800633a:	4613      	movcs	r3, r2
 800633c:	461a      	mov	r2, r3
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f001 f984 	bl	800764e <USBD_CtlContinueRx>
 8006346:	e07d      	b.n	8006444 <USBD_LL_DataOutStage+0x15c>
            } else {
                /* Find the class ID relative to the current request */
                switch (pdev->request.bmRequest & 0x1FU) {
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	2b02      	cmp	r3, #2
 8006354:	d014      	beq.n	8006380 <USBD_LL_DataOutStage+0x98>
 8006356:	2b02      	cmp	r3, #2
 8006358:	d81d      	bhi.n	8006396 <USBD_LL_DataOutStage+0xae>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <USBD_LL_DataOutStage+0x7c>
 800635e:	2b01      	cmp	r3, #1
 8006360:	d003      	beq.n	800636a <USBD_LL_DataOutStage+0x82>
 8006362:	e018      	b.n	8006396 <USBD_LL_DataOutStage+0xae>
                case USB_REQ_RECIPIENT_DEVICE:
                    /* Device requests must be managed by the first instantiated class
                       (or duplicated by all classes for simplicity) */
                    idx = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	75bb      	strb	r3, [r7, #22]
                    break;
 8006368:	e018      	b.n	800639c <USBD_LL_DataOutStage+0xb4>

                case USB_REQ_RECIPIENT_INTERFACE:
                    idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006370:	b2db      	uxtb	r3, r3
 8006372:	4619      	mov	r1, r3
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fa5e 	bl	8006836 <USBD_CoreFindIF>
 800637a:	4603      	mov	r3, r0
 800637c:	75bb      	strb	r3, [r7, #22]
                    break;
 800637e:	e00d      	b.n	800639c <USBD_LL_DataOutStage+0xb4>

                case USB_REQ_RECIPIENT_ENDPOINT:
                    idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006386:	b2db      	uxtb	r3, r3
 8006388:	4619      	mov	r1, r3
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fa60 	bl	8006850 <USBD_CoreFindEP>
 8006390:	4603      	mov	r3, r0
 8006392:	75bb      	strb	r3, [r7, #22]
                    break;
 8006394:	e002      	b.n	800639c <USBD_LL_DataOutStage+0xb4>

                default:
                    /* Back to the first class in case of doubt */
                    idx = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	75bb      	strb	r3, [r7, #22]
                    break;
 800639a:	bf00      	nop
                }

                if (idx < USBD_MAX_SUPPORTED_CLASS) {
 800639c:	7dbb      	ldrb	r3, [r7, #22]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d119      	bne.n	80063d6 <USBD_LL_DataOutStage+0xee>
                    /* Setup the class ID and route the request to the relative class function */
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d113      	bne.n	80063d6 <USBD_LL_DataOutStage+0xee>
                        if (pdev->pClass[idx]->EP0_RxReady != NULL) {
 80063ae:	7dba      	ldrb	r2, [r7, #22]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	32ae      	adds	r2, #174	; 0xae
 80063b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <USBD_LL_DataOutStage+0xee>
                            pdev->classId = idx;
 80063be:	7dba      	ldrb	r2, [r7, #22]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                            pdev->pClass[idx]->EP0_RxReady(pdev);
 80063c6:	7dba      	ldrb	r2, [r7, #22]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	32ae      	adds	r2, #174	; 0xae
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	4798      	blx	r3
                        }
                    }
                }

                (void)USBD_CtlSendStatus(pdev);
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f001 f94a 	bl	8007670 <USBD_CtlSendStatus>
 80063dc:	e032      	b.n	8006444 <USBD_LL_DataOutStage+0x15c>
      }
#endif
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80063de:	7afb      	ldrb	r3, [r7, #11]
 80063e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	4619      	mov	r1, r3
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 fa31 	bl	8006850 <USBD_CoreFindEP>
 80063ee:	4603      	mov	r3, r0
 80063f0:	75bb      	strb	r3, [r7, #22]

        if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 80063f2:	7dbb      	ldrb	r3, [r7, #22]
 80063f4:	2bff      	cmp	r3, #255	; 0xff
 80063f6:	d025      	beq.n	8006444 <USBD_LL_DataOutStage+0x15c>
 80063f8:	7dbb      	ldrb	r3, [r7, #22]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d122      	bne.n	8006444 <USBD_LL_DataOutStage+0x15c>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b03      	cmp	r3, #3
 8006408:	d117      	bne.n	800643a <USBD_LL_DataOutStage+0x152>
                if (pdev->pClass[idx]->DataOut != NULL) {
 800640a:	7dba      	ldrb	r2, [r7, #22]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	32ae      	adds	r2, #174	; 0xae
 8006410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00f      	beq.n	800643a <USBD_LL_DataOutStage+0x152>
                    pdev->classId = idx;
 800641a:	7dba      	ldrb	r2, [r7, #22]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                    ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006422:	7dba      	ldrb	r2, [r7, #22]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	32ae      	adds	r2, #174	; 0xae
 8006428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	7afa      	ldrb	r2, [r7, #11]
 8006430:	4611      	mov	r1, r2
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	4798      	blx	r3
 8006436:	4603      	mov	r3, r0
 8006438:	75fb      	strb	r3, [r7, #23]
                }
            }
            if (ret != USBD_OK) {
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <USBD_LL_DataOutStage+0x15c>
                return ret;
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	e000      	b.n	8006446 <USBD_LL_DataOutStage+0x15e>
            }
        }
    }

    return USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBD_LL_DataInStage>:
 *         Handle data in stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef * pdev, uint8_t epnum, uint8_t * pdata) {
 800644e:	b580      	push	{r7, lr}
 8006450:	b086      	sub	sp, #24
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	460b      	mov	r3, r1
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef * pep;
    USBD_StatusTypeDef ret;
    uint8_t idx;

    if (epnum == 0U) {
 800645c:	7afb      	ldrb	r3, [r7, #11]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d16f      	bne.n	8006542 <USBD_LL_DataInStage+0xf4>
        pep = &pdev->ep_in[0];
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3314      	adds	r3, #20
 8006466:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_IN) {
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800646e:	2b02      	cmp	r3, #2
 8006470:	d15a      	bne.n	8006528 <USBD_LL_DataInStage+0xda>
            if (pep->rem_length > pep->maxpacket) {
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	429a      	cmp	r2, r3
 800647c:	d914      	bls.n	80064a8 <USBD_LL_DataInStage+0x5a>
                pep->rem_length -= pep->maxpacket;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	609a      	str	r2, [r3, #8]

                (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	461a      	mov	r2, r3
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f001 f8ac 	bl	80075f2 <USBD_CtlContinueSendData>

                /* Prepare endpoint for premature end of transfer */
                (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800649a:	2300      	movs	r3, #0
 800649c:	2200      	movs	r2, #0
 800649e:	2100      	movs	r1, #0
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f001 fda3 	bl	8007fec <USBD_LL_PrepareReceive>
 80064a6:	e03f      	b.n	8006528 <USBD_LL_DataInStage+0xda>
            } else {
                /* last packet is MPS multiple, so send ZLP packet */
                if ((pep->maxpacket == pep->rem_length) && (pep->total_length >= pep->maxpacket) &&
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d11c      	bne.n	80064ee <USBD_LL_DataInStage+0xa0>
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d316      	bcc.n	80064ee <USBD_LL_DataInStage+0xa0>
                    (pep->total_length < pdev->ep0_data_len)) {
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
                if ((pep->maxpacket == pep->rem_length) && (pep->total_length >= pep->maxpacket) &&
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d20f      	bcs.n	80064ee <USBD_LL_DataInStage+0xa0>
                    (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064ce:	2200      	movs	r2, #0
 80064d0:	2100      	movs	r1, #0
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f001 f88d 	bl	80075f2 <USBD_CtlContinueSendData>
                    pdev->ep0_data_len = 0U;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

                    /* Prepare endpoint for premature end of transfer */
                    (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064e0:	2300      	movs	r3, #0
 80064e2:	2200      	movs	r2, #0
 80064e4:	2100      	movs	r1, #0
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f001 fd80 	bl	8007fec <USBD_LL_PrepareReceive>
 80064ec:	e01c      	b.n	8006528 <USBD_LL_DataInStage+0xda>
                } else {
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d10f      	bne.n	800651a <USBD_LL_DataInStage+0xcc>
                        if (pdev->pClass[0]->EP0_TxSent != NULL) {
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <USBD_LL_DataInStage+0xcc>
                            pdev->classId = 0U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                            pdev->pClass[0]->EP0_TxSent(pdev);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	4798      	blx	r3
                        }
                    }
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800651a:	2180      	movs	r1, #128	; 0x80
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f001 fcbb 	bl	8007e98 <USBD_LL_StallEP>
                    (void)USBD_CtlReceiveStatus(pdev);
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f001 f8b7 	bl	8007696 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
        }

        if (pdev->dev_test_mode != 0U) {
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d03a      	beq.n	80065a8 <USBD_LL_DataInStage+0x15a>
            (void)USBD_RunTestMode(pdev);
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff fe42 	bl	80061bc <USBD_RunTestMode>
            pdev->dev_test_mode = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006540:	e032      	b.n	80065a8 <USBD_LL_DataInStage+0x15a>
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006548:	b2db      	uxtb	r3, r3
 800654a:	4619      	mov	r1, r3
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f97f 	bl	8006850 <USBD_CoreFindEP>
 8006552:	4603      	mov	r3, r0
 8006554:	75fb      	strb	r3, [r7, #23]

        if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	2bff      	cmp	r3, #255	; 0xff
 800655a:	d025      	beq.n	80065a8 <USBD_LL_DataInStage+0x15a>
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d122      	bne.n	80065a8 <USBD_LL_DataInStage+0x15a>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b03      	cmp	r3, #3
 800656c:	d11c      	bne.n	80065a8 <USBD_LL_DataInStage+0x15a>
                if (pdev->pClass[idx]->DataIn != NULL) {
 800656e:	7dfa      	ldrb	r2, [r7, #23]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	32ae      	adds	r2, #174	; 0xae
 8006574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d014      	beq.n	80065a8 <USBD_LL_DataInStage+0x15a>
                    pdev->classId = idx;
 800657e:	7dfa      	ldrb	r2, [r7, #23]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                    ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006586:	7dfa      	ldrb	r2, [r7, #23]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	32ae      	adds	r2, #174	; 0xae
 800658c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	7afa      	ldrb	r2, [r7, #11]
 8006594:	4611      	mov	r1, r2
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	4798      	blx	r3
 800659a:	4603      	mov	r3, r0
 800659c:	75bb      	strb	r3, [r7, #22]

                    if (ret != USBD_OK) {
 800659e:	7dbb      	ldrb	r3, [r7, #22]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <USBD_LL_DataInStage+0x15a>
                        return ret;
 80065a4:	7dbb      	ldrb	r3, [r7, #22]
 80065a6:	e000      	b.n	80065aa <USBD_LL_DataInStage+0x15c>
                }
            }
        }
    }

    return USBD_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBD_LL_Reset>:
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef * pdev) {
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]

    /* Upon Reset call user call back */
    pdev->dev_state = USBD_STATE_DEFAULT;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    pdev->ep0_state = USBD_EP0_IDLE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    pdev->dev_config = 0U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	605a      	str	r2, [r3, #4]
    pdev->dev_remote_wakeup = 0U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    pdev->dev_test_mode = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
            }
        }
    }
#else

    if (pdev->pClass[0] != NULL) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d014      	beq.n	8006618 <USBD_LL_Reset+0x66>
        if (pdev->pClass[0]->DeInit != NULL) {
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00e      	beq.n	8006618 <USBD_LL_Reset+0x66>
            if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK) {
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6852      	ldr	r2, [r2, #4]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	4611      	mov	r1, r2
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	4798      	blx	r3
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <USBD_LL_Reset+0x66>
                ret = USBD_FAIL;
 8006614:	2303      	movs	r3, #3
 8006616:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    /* Open EP0 OUT */
    (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006618:	2340      	movs	r3, #64	; 0x40
 800661a:	2200      	movs	r2, #0
 800661c:	2100      	movs	r1, #0
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fbf5 	bl	8007e0e <USBD_LL_OpenEP>
    pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

    pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2240      	movs	r2, #64	; 0x40
 8006630:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

    /* Open EP0 IN */
    (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006634:	2340      	movs	r3, #64	; 0x40
 8006636:	2200      	movs	r2, #0
 8006638:	2180      	movs	r1, #128	; 0x80
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fbe7 	bl	8007e0e <USBD_LL_OpenEP>
    pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	849a      	strh	r2, [r3, #36]	; 0x24

    pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2240      	movs	r2, #64	; 0x40
 800664a:	621a      	str	r2, [r3, #32]

    return ret;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <USBD_LL_SetSpeed>:
 * @brief  USBD_LL_SetSpeed
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef * pdev, USBD_SpeedTypeDef speed) {
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
    pdev->dev_speed = speed;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	78fa      	ldrb	r2, [r7, #3]
 8006666:	741a      	strb	r2, [r3, #16]

    return USBD_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <USBD_LL_Suspend>:
 *         Handle Suspend event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef * pdev) {
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
    pdev->dev_old_state = pdev->dev_state;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006684:	b2da      	uxtb	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
    pdev->dev_state = USBD_STATE_SUSPENDED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2204      	movs	r2, #4
 8006690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

    return USBD_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <USBD_LL_Resume>:
 *         Handle Resume event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef * pdev) {
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
    if (pdev->dev_state == USBD_STATE_SUSPENDED) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d106      	bne.n	80066c4 <USBD_LL_Resume+0x22>
        pdev->dev_state = pdev->dev_old_state;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    }

    return USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <USBD_LL_SOF>:
 *         Handle SOF event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef * pdev) {
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
    /* The SOF event can be distributed for all classes that support it */
    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d110      	bne.n	8006708 <USBD_LL_SOF+0x36>
                    }
                }
            }
        }
#else
        if (pdev->pClass[0] != NULL) {
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <USBD_LL_SOF+0x36>
            if (pdev->pClass[0]->SOF != NULL) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <USBD_LL_SOF+0x36>
                (void)pdev->pClass[0]->SOF(pdev);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
            }
        }
#endif /* USE_USBD_COMPOSITE */
    }

    return USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_LL_IsoINIncomplete>:
 * @brief  USBD_LL_IsoINIncomplete
 *         Handle iso in incomplete event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	32ae      	adds	r2, #174	; 0xae
 8006728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <USBD_LL_IsoINIncomplete+0x22>
        return USBD_FAIL;
 8006730:	2303      	movs	r3, #3
 8006732:	e01c      	b.n	800676e <USBD_LL_IsoINIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b03      	cmp	r3, #3
 800673e:	d115      	bne.n	800676c <USBD_LL_IsoINIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL) {
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	32ae      	adds	r2, #174	; 0xae
 800674a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <USBD_LL_IsoINIncomplete+0x5a>
            (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	32ae      	adds	r2, #174	; 0xae
 800675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	78fa      	ldrb	r2, [r7, #3]
 8006766:	4611      	mov	r1, r2
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
        }
    }

    return USBD_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBD_LL_IsoOUTIncomplete>:
 * @brief  USBD_LL_IsoOUTIncomplete
 *         Handle iso out incomplete event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	460b      	mov	r3, r1
 8006780:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	32ae      	adds	r2, #174	; 0xae
 800678c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <USBD_LL_IsoOUTIncomplete+0x22>
        return USBD_FAIL;
 8006794:	2303      	movs	r3, #3
 8006796:	e01c      	b.n	80067d2 <USBD_LL_IsoOUTIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d115      	bne.n	80067d0 <USBD_LL_IsoOUTIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL) {
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	32ae      	adds	r2, #174	; 0xae
 80067ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00b      	beq.n	80067d0 <USBD_LL_IsoOUTIncomplete+0x5a>
            (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	32ae      	adds	r2, #174	; 0xae
 80067c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	78fa      	ldrb	r2, [r7, #3]
 80067ca:	4611      	mov	r1, r2
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4798      	blx	r3
        }
    }

    return USBD_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBD_LL_DevConnected>:
 * @brief  USBD_LL_DevConnected
 *         Handle device connection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef * pdev) {
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USBD_LL_DevDisconnected>:
 * @brief  USBD_LL_DevDisconnected
 *         Handle device disconnection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef * pdev) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]

    /* Free Class Resources */
    pdev->dev_state = USBD_STATE_DEFAULT;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
                }
            }
        }
    }
#else
    if (pdev->pClass[0] != NULL) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00e      	beq.n	800682c <USBD_LL_DevDisconnected+0x3c>
        if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6852      	ldr	r2, [r2, #4]
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	4611      	mov	r1, r2
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <USBD_LL_DevDisconnected+0x3c>
            ret = USBD_FAIL;
 8006828:	2303      	movs	r3, #3
 800682a:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_CoreFindIF>:
 *         return the class index relative to the selected interface
 * @param  pdev: device instance
 * @param  index : selected interface number
 * @retval index of the class using the selected interface number. OxFF if no class found.
 */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef * pdev, uint8_t index) {
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
    return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 8006842:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USBD_CoreFindEP>:
 *         return the class index relative to the selected endpoint
 * @param  pdev: device instance
 * @param  index : selected endpoint number
 * @retval index of the class using the selected endpoint number. 0xFF if no class found.
 */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef * pdev, uint8_t index) {
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
    return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 800685c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <USBD_GetEpDesc>:
 * @param  pdev: device instance
 * @param  pConfDesc:  pointer to Bos descriptor
 * @param  EpAddr:  endpoint address
 * @retval pointer to video endpoint descriptor
 */
void * USBD_GetEpDesc(uint8_t * pConfDesc, uint8_t EpAddr) {
 800686a:	b580      	push	{r7, lr}
 800686c:	b086      	sub	sp, #24
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	460b      	mov	r3, r1
 8006874:	70fb      	strb	r3, [r7, #3]
    USBD_DescHeaderTypeDef * pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	617b      	str	r3, [r7, #20]
    USBD_ConfigDescTypeDef * desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	60fb      	str	r3, [r7, #12]
    USBD_EpDescTypeDef * pEpDesc = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]
    uint16_t ptr;

    if (desc->wTotalLength > desc->bLength) {
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	885b      	ldrh	r3, [r3, #2]
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	429a      	cmp	r2, r3
 8006890:	d920      	bls.n	80068d4 <USBD_GetEpDesc+0x6a>
        ptr = desc->bLength;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	817b      	strh	r3, [r7, #10]

        while (ptr < desc->wTotalLength) {
 800689a:	e013      	b.n	80068c4 <USBD_GetEpDesc+0x5a>
            pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800689c:	f107 030a 	add.w	r3, r7, #10
 80068a0:	4619      	mov	r1, r3
 80068a2:	6978      	ldr	r0, [r7, #20]
 80068a4:	f000 f81b 	bl	80068de <USBD_GetNextDesc>
 80068a8:	6178      	str	r0, [r7, #20]

            if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT) {
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d108      	bne.n	80068c4 <USBD_GetEpDesc+0x5a>
                pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	613b      	str	r3, [r7, #16]

                if (pEpDesc->bEndpointAddress == EpAddr) {
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	789b      	ldrb	r3, [r3, #2]
 80068ba:	78fa      	ldrb	r2, [r7, #3]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d008      	beq.n	80068d2 <USBD_GetEpDesc+0x68>
                    break;
                } else {
                    pEpDesc = NULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	613b      	str	r3, [r7, #16]
        while (ptr < desc->wTotalLength) {
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	885b      	ldrh	r3, [r3, #2]
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	897b      	ldrh	r3, [r7, #10]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d8e5      	bhi.n	800689c <USBD_GetEpDesc+0x32>
 80068d0:	e000      	b.n	80068d4 <USBD_GetEpDesc+0x6a>
                    break;
 80068d2:	bf00      	nop
                }
            }
        }
    }

    return (void *)pEpDesc;
 80068d4:	693b      	ldr	r3, [r7, #16]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USBD_GetNextDesc>:
 *         This function return the next descriptor header
 * @param  buf: Buffer where the descriptor is available
 * @param  ptr: data pointer inside the descriptor
 * @retval next header
 */
USBD_DescHeaderTypeDef * USBD_GetNextDesc(uint8_t * pbuf, uint16_t * ptr) {
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
    USBD_DescHeaderTypeDef * pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

    *ptr += pnext->bLength;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	881a      	ldrh	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	4413      	add	r3, r2
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	801a      	strh	r2, [r3, #0]
    pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4413      	add	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

    return (pnext);
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <SWAPBYTE>:
 */

/** @defgroup USBD_DEF_Exported_Macros
 * @{
 */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t * addr) {
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
    uint16_t _SwapVal, _Byte1, _Byte2;
    uint8_t * _pbuff = addr;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	617b      	str	r3, [r7, #20]

    _Byte1 = *(uint8_t *)_pbuff;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	827b      	strh	r3, [r7, #18]
    _pbuff++;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	3301      	adds	r3, #1
 800692e:	617b      	str	r3, [r7, #20]
    _Byte2 = *(uint8_t *)_pbuff;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	823b      	strh	r3, [r7, #16]

    _SwapVal = (_Byte2 << 8) | _Byte1;
 8006936:	8a3b      	ldrh	r3, [r7, #16]
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	b21a      	sxth	r2, r3
 800693c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006940:	4313      	orrs	r3, r2
 8006942:	b21b      	sxth	r3, r3
 8006944:	81fb      	strh	r3, [r7, #14]

    return _SwapVal;
 8006946:	89fb      	ldrh	r3, [r7, #14]
}
 8006948:	4618      	mov	r0, r3
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <USBD_StdDevReq>:
 *         Handle standard usb device requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d005      	beq.n	800697a <USBD_StdDevReq+0x26>
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d857      	bhi.n	8006a22 <USBD_StdDevReq+0xce>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00f      	beq.n	8006996 <USBD_StdDevReq+0x42>
 8006976:	2b20      	cmp	r3, #32
 8006978:	d153      	bne.n	8006a22 <USBD_StdDevReq+0xce>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	32ae      	adds	r2, #174	; 0xae
 8006984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]
        break;
 8006994:	e04a      	b.n	8006a2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	2b09      	cmp	r3, #9
 800699c:	d83b      	bhi.n	8006a16 <USBD_StdDevReq+0xc2>
 800699e:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <USBD_StdDevReq+0x50>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	080069f9 	.word	0x080069f9
 80069a8:	08006a0d 	.word	0x08006a0d
 80069ac:	08006a17 	.word	0x08006a17
 80069b0:	08006a03 	.word	0x08006a03
 80069b4:	08006a17 	.word	0x08006a17
 80069b8:	080069d7 	.word	0x080069d7
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	08006a17 	.word	0x08006a17
 80069c4:	080069ef 	.word	0x080069ef
 80069c8:	080069e1 	.word	0x080069e1
        case USB_REQ_GET_DESCRIPTOR:
            USBD_GetDescriptor(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa3c 	bl	8006e4c <USBD_GetDescriptor>
            break;
 80069d4:	e024      	b.n	8006a20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
            USBD_SetAddress(pdev, req);
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fba1 	bl	8007120 <USBD_SetAddress>
            break;
 80069de:	e01f      	b.n	8006a20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
            ret = USBD_SetConfig(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fbe0 	bl	80071a8 <USBD_SetConfig>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]
            break;
 80069ec:	e018      	b.n	8006a20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
            USBD_GetConfig(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fc83 	bl	80072fc <USBD_GetConfig>
            break;
 80069f6:	e013      	b.n	8006a20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
            USBD_GetStatus(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fcb4 	bl	8007368 <USBD_GetStatus>
            break;
 8006a00:	e00e      	b.n	8006a20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
            USBD_SetFeature(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fce3 	bl	80073d0 <USBD_SetFeature>
            break;
 8006a0a:	e009      	b.n	8006a20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
            USBD_ClrFeature(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fd07 	bl	8007422 <USBD_ClrFeature>
            break;
 8006a14:	e004      	b.n	8006a20 <USBD_StdDevReq+0xcc>

        default:
            USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fd5e 	bl	80074da <USBD_CtlError>
            break;
 8006a1e:	bf00      	nop
        }
        break;
 8006a20:	e004      	b.n	8006a2c <USBD_StdDevReq+0xd8>

    default:
        USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fd58 	bl	80074da <USBD_CtlError>
        break;
 8006a2a:	bf00      	nop
    }

    return ret;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop

08006a38 <USBD_StdItfReq>:
 *         Handle standard usb interface requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	d005      	beq.n	8006a5e <USBD_StdItfReq+0x26>
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	d852      	bhi.n	8006afc <USBD_StdItfReq+0xc4>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <USBD_StdItfReq+0x26>
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d14e      	bne.n	8006afc <USBD_StdItfReq+0xc4>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
        switch (pdev->dev_state) {
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d840      	bhi.n	8006aee <USBD_StdItfReq+0xb6>
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

            if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) {
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	889b      	ldrh	r3, [r3, #4]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d836      	bhi.n	8006ae4 <USBD_StdItfReq+0xac>
                /* Get the class index relative to this interface */
                idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	889b      	ldrh	r3, [r3, #4]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff fed9 	bl	8006836 <USBD_CoreFindIF>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73bb      	strb	r3, [r7, #14]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	2bff      	cmp	r3, #255	; 0xff
 8006a8c:	d01d      	beq.n	8006aca <USBD_StdItfReq+0x92>
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11a      	bne.n	8006aca <USBD_StdItfReq+0x92>
                    /* Call the class data out function to manage the request */
                    if (pdev->pClass[idx]->Setup != NULL) {
 8006a94:	7bba      	ldrb	r2, [r7, #14]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	32ae      	adds	r2, #174	; 0xae
 8006a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00f      	beq.n	8006ac4 <USBD_StdItfReq+0x8c>
                        pdev->classId = idx;
 8006aa4:	7bba      	ldrb	r2, [r7, #14]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                        ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006aac:	7bba      	ldrb	r2, [r7, #14]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	32ae      	adds	r2, #174	; 0xae
 8006ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 8006ac2:	e004      	b.n	8006ace <USBD_StdItfReq+0x96>
                    } else {
                        /* should never reach this condition */
                        ret = USBD_FAIL;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 8006ac8:	e001      	b.n	8006ace <USBD_StdItfReq+0x96>
                    }
                } else {
                    /* No relative interface found */
                    ret = USBD_FAIL;
 8006aca:	2303      	movs	r3, #3
 8006acc:	73fb      	strb	r3, [r7, #15]
                }

                if ((req->wLength == 0U) && (ret == USBD_OK)) {
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	88db      	ldrh	r3, [r3, #6]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d110      	bne.n	8006af8 <USBD_StdItfReq+0xc0>
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10d      	bne.n	8006af8 <USBD_StdItfReq+0xc0>
                    (void)USBD_CtlSendStatus(pdev);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fdc7 	bl	8007670 <USBD_CtlSendStatus>
                }
            } else {
                USBD_CtlError(pdev, req);
            }
            break;
 8006ae2:	e009      	b.n	8006af8 <USBD_StdItfReq+0xc0>
                USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fcf7 	bl	80074da <USBD_CtlError>
            break;
 8006aec:	e004      	b.n	8006af8 <USBD_StdItfReq+0xc0>

        default:
            USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fcf2 	bl	80074da <USBD_CtlError>
            break;
 8006af6:	e000      	b.n	8006afa <USBD_StdItfReq+0xc2>
            break;
 8006af8:	bf00      	nop
        }
        break;
 8006afa:	e004      	b.n	8006b06 <USBD_StdItfReq+0xce>

    default:
        USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fceb 	bl	80074da <USBD_CtlError>
        break;
 8006b04:	bf00      	nop
    }

    return ret;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_StdEPReq>:
 *         Handle standard usb endpoint requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
    USBD_EndpointTypeDef * pep;
    uint8_t ep_addr;
    uint8_t idx;
    USBD_StatusTypeDef ret = USBD_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]

    ep_addr = LOBYTE(req->wIndex);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	889b      	ldrh	r3, [r3, #4]
 8006b22:	73bb      	strb	r3, [r7, #14]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d007      	beq.n	8006b40 <USBD_StdEPReq+0x30>
 8006b30:	2b40      	cmp	r3, #64	; 0x40
 8006b32:	f200 817f 	bhi.w	8006e34 <USBD_StdEPReq+0x324>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d02a      	beq.n	8006b90 <USBD_StdEPReq+0x80>
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	f040 817a 	bne.w	8006e34 <USBD_StdEPReq+0x324>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        /* Get the class index relative to this endpoint */
        idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff fe83 	bl	8006850 <USBD_CoreFindEP>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	737b      	strb	r3, [r7, #13]
        if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8006b4e:	7b7b      	ldrb	r3, [r7, #13]
 8006b50:	2bff      	cmp	r3, #255	; 0xff
 8006b52:	f000 8174 	beq.w	8006e3e <USBD_StdEPReq+0x32e>
 8006b56:	7b7b      	ldrb	r3, [r7, #13]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f040 8170 	bne.w	8006e3e <USBD_StdEPReq+0x32e>
            pdev->classId = idx;
 8006b5e:	7b7a      	ldrb	r2, [r7, #13]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
            /* Call the class data out function to manage the request */
            if (pdev->pClass[idx]->Setup != NULL) {
 8006b66:	7b7a      	ldrb	r2, [r7, #13]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	32ae      	adds	r2, #174	; 0xae
 8006b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8163 	beq.w	8006e3e <USBD_StdEPReq+0x32e>
                ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b78:	7b7a      	ldrb	r2, [r7, #13]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	32ae      	adds	r2, #174	; 0xae
 8006b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4798      	blx	r3
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	73fb      	strb	r3, [r7, #15]
            }
        }
        break;
 8006b8e:	e156      	b.n	8006e3e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d008      	beq.n	8006baa <USBD_StdEPReq+0x9a>
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	f300 8145 	bgt.w	8006e28 <USBD_StdEPReq+0x318>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 809b 	beq.w	8006cda <USBD_StdEPReq+0x1ca>
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d03c      	beq.n	8006c22 <USBD_StdEPReq+0x112>
 8006ba8:	e13e      	b.n	8006e28 <USBD_StdEPReq+0x318>
        case USB_REQ_SET_FEATURE:
            switch (pdev->dev_state) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d002      	beq.n	8006bbc <USBD_StdEPReq+0xac>
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d016      	beq.n	8006be8 <USBD_StdEPReq+0xd8>
 8006bba:	e02c      	b.n	8006c16 <USBD_StdEPReq+0x106>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00d      	beq.n	8006bde <USBD_StdEPReq+0xce>
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	2b80      	cmp	r3, #128	; 0x80
 8006bc6:	d00a      	beq.n	8006bde <USBD_StdEPReq+0xce>
                    (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f963 	bl	8007e98 <USBD_LL_StallEP>
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bd2:	2180      	movs	r1, #128	; 0x80
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f95f 	bl	8007e98 <USBD_LL_StallEP>
 8006bda:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 8006bdc:	e020      	b.n	8006c20 <USBD_StdEPReq+0x110>
                    USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fc7a 	bl	80074da <USBD_CtlError>
                break;
 8006be6:	e01b      	b.n	8006c20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	885b      	ldrh	r3, [r3, #2]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10e      	bne.n	8006c0e <USBD_StdEPReq+0xfe>
                    if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U)) {
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <USBD_StdEPReq+0xfe>
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	2b80      	cmp	r3, #128	; 0x80
 8006bfa:	d008      	beq.n	8006c0e <USBD_StdEPReq+0xfe>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	88db      	ldrh	r3, [r3, #6]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <USBD_StdEPReq+0xfe>
                        (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 f945 	bl	8007e98 <USBD_LL_StallEP>
                    }
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fd2e 	bl	8007670 <USBD_CtlSendStatus>

                break;
 8006c14:	e004      	b.n	8006c20 <USBD_StdEPReq+0x110>

            default:
                USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fc5e 	bl	80074da <USBD_CtlError>
                break;
 8006c1e:	bf00      	nop
            }
            break;
 8006c20:	e107      	b.n	8006e32 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

            switch (pdev->dev_state) {
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d002      	beq.n	8006c34 <USBD_StdEPReq+0x124>
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d016      	beq.n	8006c60 <USBD_StdEPReq+0x150>
 8006c32:	e04b      	b.n	8006ccc <USBD_StdEPReq+0x1bc>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00d      	beq.n	8006c56 <USBD_StdEPReq+0x146>
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b80      	cmp	r3, #128	; 0x80
 8006c3e:	d00a      	beq.n	8006c56 <USBD_StdEPReq+0x146>
                    (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 f927 	bl	8007e98 <USBD_LL_StallEP>
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c4a:	2180      	movs	r1, #128	; 0x80
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 f923 	bl	8007e98 <USBD_LL_StallEP>
 8006c52:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 8006c54:	e040      	b.n	8006cd8 <USBD_StdEPReq+0x1c8>
                    USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fc3e 	bl	80074da <USBD_CtlError>
                break;
 8006c5e:	e03b      	b.n	8006cd8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	885b      	ldrh	r3, [r3, #2]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d136      	bne.n	8006cd6 <USBD_StdEPReq+0x1c6>
                    if ((ep_addr & 0x7FU) != 0x00U) {
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <USBD_StdEPReq+0x16c>
                        (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 f92d 	bl	8007ed6 <USBD_LL_ClearStallEP>
                    }
                    (void)USBD_CtlSendStatus(pdev);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fcf7 	bl	8007670 <USBD_CtlSendStatus>

                    /* Get the class index relative to this interface */
                    idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff fde2 	bl	8006850 <USBD_CoreFindEP>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	737b      	strb	r3, [r7, #13]
                    if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8006c90:	7b7b      	ldrb	r3, [r7, #13]
 8006c92:	2bff      	cmp	r3, #255	; 0xff
 8006c94:	d01f      	beq.n	8006cd6 <USBD_StdEPReq+0x1c6>
 8006c96:	7b7b      	ldrb	r3, [r7, #13]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11c      	bne.n	8006cd6 <USBD_StdEPReq+0x1c6>
                        pdev->classId = idx;
 8006c9c:	7b7a      	ldrb	r2, [r7, #13]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                        /* Call the class data out function to manage the request */
                        if (pdev->pClass[idx]->Setup != NULL) {
 8006ca4:	7b7a      	ldrb	r2, [r7, #13]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	32ae      	adds	r2, #174	; 0xae
 8006caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d010      	beq.n	8006cd6 <USBD_StdEPReq+0x1c6>
                            ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006cb4:	7b7a      	ldrb	r2, [r7, #13]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	32ae      	adds	r2, #174	; 0xae
 8006cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73fb      	strb	r3, [r7, #15]
                        }
                    }
                }
                break;
 8006cca:	e004      	b.n	8006cd6 <USBD_StdEPReq+0x1c6>

            default:
                USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fc03 	bl	80074da <USBD_CtlError>
                break;
 8006cd4:	e000      	b.n	8006cd8 <USBD_StdEPReq+0x1c8>
                break;
 8006cd6:	bf00      	nop
            }
            break;
 8006cd8:	e0ab      	b.n	8006e32 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
            switch (pdev->dev_state) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d002      	beq.n	8006cec <USBD_StdEPReq+0x1dc>
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d032      	beq.n	8006d50 <USBD_StdEPReq+0x240>
 8006cea:	e097      	b.n	8006e1c <USBD_StdEPReq+0x30c>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <USBD_StdEPReq+0x1f2>
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	2b80      	cmp	r3, #128	; 0x80
 8006cf6:	d004      	beq.n	8006d02 <USBD_StdEPReq+0x1f2>
                    USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fbed 	bl	80074da <USBD_CtlError>
                    break;
 8006d00:	e091      	b.n	8006e26 <USBD_StdEPReq+0x316>
                }
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006d02:	f997 300e 	ldrsb.w	r3, [r7, #14]
                                                   : &pdev->ep_out[ep_addr & 0x7FU];
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da0b      	bge.n	8006d22 <USBD_StdEPReq+0x212>
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                                   : &pdev->ep_out[ep_addr & 0x7FU];
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	3310      	adds	r3, #16
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	3304      	adds	r3, #4
 8006d20:	e00b      	b.n	8006d3a <USBD_StdEPReq+0x22a>
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4413      	add	r3, r2
 8006d38:	3304      	adds	r3, #4
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006d3a:	60bb      	str	r3, [r7, #8]

                pep->status = 0x0000U;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]

                (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2202      	movs	r2, #2
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fc37 	bl	80075bc <USBD_CtlSendData>
                break;
 8006d4e:	e06a      	b.n	8006e26 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
                if ((ep_addr & 0x80U) == 0x80U) {
 8006d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	da11      	bge.n	8006d7c <USBD_StdEPReq+0x26c>
                    if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U) {
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	f003 020f 	and.w	r2, r3, #15
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	3324      	adds	r3, #36	; 0x24
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d117      	bne.n	8006da2 <USBD_StdEPReq+0x292>
                        USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fbb0 	bl	80074da <USBD_CtlError>
                        break;
 8006d7a:	e054      	b.n	8006e26 <USBD_StdEPReq+0x316>
                    }
                } else {
                    if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U) {
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d104      	bne.n	8006da2 <USBD_StdEPReq+0x292>
                        USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fb9d 	bl	80074da <USBD_CtlError>
                        break;
 8006da0:	e041      	b.n	8006e26 <USBD_StdEPReq+0x316>
                    }
                }

                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
                                                   : &pdev->ep_out[ep_addr & 0x7FU];
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da0b      	bge.n	8006dc2 <USBD_StdEPReq+0x2b2>
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                                   : &pdev->ep_out[ep_addr & 0x7FU];
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	3310      	adds	r3, #16
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	e00b      	b.n	8006dda <USBD_StdEPReq+0x2ca>
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3304      	adds	r3, #4
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006dda:	60bb      	str	r3, [r7, #8]

                if ((ep_addr == 0x00U) || (ep_addr == 0x80U)) {
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <USBD_StdEPReq+0x2d8>
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d103      	bne.n	8006df0 <USBD_StdEPReq+0x2e0>
                    pep->status = 0x0000U;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e00e      	b.n	8006e0e <USBD_StdEPReq+0x2fe>
                } else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U) {
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f88d 	bl	8007f14 <USBD_LL_IsStallEP>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <USBD_StdEPReq+0x2f8>
                    pep->status = 0x0001U;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2201      	movs	r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	e002      	b.n	8006e0e <USBD_StdEPReq+0x2fe>
                } else {
                    pep->status = 0x0000U;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
                }

                (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2202      	movs	r2, #2
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fbd1 	bl	80075bc <USBD_CtlSendData>
                break;
 8006e1a:	e004      	b.n	8006e26 <USBD_StdEPReq+0x316>

            default:
                USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fb5b 	bl	80074da <USBD_CtlError>
                break;
 8006e24:	bf00      	nop
            }
            break;
 8006e26:	e004      	b.n	8006e32 <USBD_StdEPReq+0x322>

        default:
            USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fb55 	bl	80074da <USBD_CtlError>
            break;
 8006e30:	bf00      	nop
        }
        break;
 8006e32:	e005      	b.n	8006e40 <USBD_StdEPReq+0x330>

    default:
        USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fb4f 	bl	80074da <USBD_CtlError>
        break;
 8006e3c:	e000      	b.n	8006e40 <USBD_StdEPReq+0x330>
        break;
 8006e3e:	bf00      	nop
    }

    return ret;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <USBD_GetDescriptor>:
 *         Handle Get Descriptor requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetDescriptor(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	813b      	strh	r3, [r7, #8]
    uint8_t * pbuf = NULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
    uint8_t err = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	72fb      	strb	r3, [r7, #11]

    switch (req->wValue >> 8) {
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	885b      	ldrh	r3, [r3, #2]
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	2b06      	cmp	r3, #6
 8006e6e:	f200 8128 	bhi.w	80070c2 <USBD_GetDescriptor+0x276>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <USBD_GetDescriptor+0x2c>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e95 	.word	0x08006e95
 8006e7c:	08006ead 	.word	0x08006ead
 8006e80:	08006eed 	.word	0x08006eed
 8006e84:	080070c3 	.word	0x080070c3
 8006e88:	080070c3 	.word	0x080070c3
 8006e8c:	08007063 	.word	0x08007063
 8006e90:	0800708f 	.word	0x0800708f
            err++;
        }
        break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
        pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	7c12      	ldrb	r2, [r2, #16]
 8006ea0:	f107 0108 	add.w	r1, r7, #8
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
 8006ea8:	60f8      	str	r0, [r7, #12]
        break;
 8006eaa:	e112      	b.n	80070d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	7c1b      	ldrb	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10d      	bne.n	8006ed0 <USBD_GetDescriptor+0x84>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	f107 0208 	add.w	r2, r7, #8
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	2202      	movs	r2, #2
 8006ecc:	701a      	strb	r2, [r3, #0]
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
        }
        break;
 8006ece:	e100      	b.n	80070d2 <USBD_GetDescriptor+0x286>
                pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	f107 0208 	add.w	r2, r7, #8
 8006edc:	4610      	mov	r0, r2
 8006ede:	4798      	blx	r3
 8006ee0:	60f8      	str	r0, [r7, #12]
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	701a      	strb	r2, [r3, #0]
        break;
 8006eea:	e0f2      	b.n	80070d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
        switch ((uint8_t)(req->wValue)) {
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	885b      	ldrh	r3, [r3, #2]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	f200 80ac 	bhi.w	8007050 <USBD_GetDescriptor+0x204>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <USBD_GetDescriptor+0xb4>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f19 	.word	0x08006f19
 8006f04:	08006f4d 	.word	0x08006f4d
 8006f08:	08006f81 	.word	0x08006f81
 8006f0c:	08006fb5 	.word	0x08006fb5
 8006f10:	08006fe9 	.word	0x08006fe9
 8006f14:	0800701d 	.word	0x0800701d
        case USBD_IDX_LANGID_STR:
            if (pdev->pDesc->GetLangIDStrDescriptor != NULL) {
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <USBD_GetDescriptor+0xf0>
                pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	7c12      	ldrb	r2, [r2, #16]
 8006f30:	f107 0108 	add.w	r1, r7, #8
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
 8006f38:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 8006f3a:	e091      	b.n	8007060 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 facb 	bl	80074da <USBD_CtlError>
                err++;
 8006f44:	7afb      	ldrb	r3, [r7, #11]
 8006f46:	3301      	adds	r3, #1
 8006f48:	72fb      	strb	r3, [r7, #11]
            break;
 8006f4a:	e089      	b.n	8007060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
            if (pdev->pDesc->GetManufacturerStrDescriptor != NULL) {
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <USBD_GetDescriptor+0x124>
                pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	7c12      	ldrb	r2, [r2, #16]
 8006f64:	f107 0108 	add.w	r1, r7, #8
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4798      	blx	r3
 8006f6c:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 8006f6e:	e077      	b.n	8007060 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fab1 	bl	80074da <USBD_CtlError>
                err++;
 8006f78:	7afb      	ldrb	r3, [r7, #11]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	72fb      	strb	r3, [r7, #11]
            break;
 8006f7e:	e06f      	b.n	8007060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
            if (pdev->pDesc->GetProductStrDescriptor != NULL) {
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <USBD_GetDescriptor+0x158>
                pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	7c12      	ldrb	r2, [r2, #16]
 8006f98:	f107 0108 	add.w	r1, r7, #8
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
 8006fa0:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 8006fa2:	e05d      	b.n	8007060 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa97 	bl	80074da <USBD_CtlError>
                err++;
 8006fac:	7afb      	ldrb	r3, [r7, #11]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	72fb      	strb	r3, [r7, #11]
            break;
 8006fb2:	e055      	b.n	8007060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
            if (pdev->pDesc->GetSerialStrDescriptor != NULL) {
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_GetDescriptor+0x18c>
                pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	7c12      	ldrb	r2, [r2, #16]
 8006fcc:	f107 0108 	add.w	r1, r7, #8
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 8006fd6:	e043      	b.n	8007060 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fa7d 	bl	80074da <USBD_CtlError>
                err++;
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	72fb      	strb	r3, [r7, #11]
            break;
 8006fe6:	e03b      	b.n	8007060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
            if (pdev->pDesc->GetConfigurationStrDescriptor != NULL) {
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <USBD_GetDescriptor+0x1c0>
                pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7c12      	ldrb	r2, [r2, #16]
 8007000:	f107 0108 	add.w	r1, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
 8007008:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800700a:	e029      	b.n	8007060 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fa63 	bl	80074da <USBD_CtlError>
                err++;
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	3301      	adds	r3, #1
 8007018:	72fb      	strb	r3, [r7, #11]
            break;
 800701a:	e021      	b.n	8007060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
            if (pdev->pDesc->GetInterfaceStrDescriptor != NULL) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <USBD_GetDescriptor+0x1f4>
                pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	7c12      	ldrb	r2, [r2, #16]
 8007034:	f107 0108 	add.w	r1, r7, #8
 8007038:	4610      	mov	r0, r2
 800703a:	4798      	blx	r3
 800703c:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800703e:	e00f      	b.n	8007060 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa49 	bl	80074da <USBD_CtlError>
                err++;
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	3301      	adds	r3, #1
 800704c:	72fb      	strb	r3, [r7, #11]
            break;
 800704e:	e007      	b.n	8007060 <USBD_GetDescriptor+0x214>
                err++;
            }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
            USBD_CtlError(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa41 	bl	80074da <USBD_CtlError>
            err++;
 8007058:	7afb      	ldrb	r3, [r7, #11]
 800705a:	3301      	adds	r3, #1
 800705c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
            break;
 800705e:	bf00      	nop
        }
        break;
 8007060:	e037      	b.n	80070d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	7c1b      	ldrb	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d109      	bne.n	800707e <USBD_GetDescriptor+0x232>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007072:	f107 0208 	add.w	r2, r7, #8
 8007076:	4610      	mov	r0, r2
 8007078:	4798      	blx	r3
 800707a:	60f8      	str	r0, [r7, #12]
            }
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 800707c:	e029      	b.n	80070d2 <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fa2a 	bl	80074da <USBD_CtlError>
            err++;
 8007086:	7afb      	ldrb	r3, [r7, #11]
 8007088:	3301      	adds	r3, #1
 800708a:	72fb      	strb	r3, [r7, #11]
        break;
 800708c:	e021      	b.n	80070d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	7c1b      	ldrb	r3, [r3, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10d      	bne.n	80070b2 <USBD_GetDescriptor+0x266>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	f107 0208 	add.w	r2, r7, #8
 80070a2:	4610      	mov	r0, r2
 80070a4:	4798      	blx	r3
 80070a6:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	2207      	movs	r2, #7
 80070ae:	701a      	strb	r2, [r3, #0]
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 80070b0:	e00f      	b.n	80070d2 <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fa10 	bl	80074da <USBD_CtlError>
            err++;
 80070ba:	7afb      	ldrb	r3, [r7, #11]
 80070bc:	3301      	adds	r3, #1
 80070be:	72fb      	strb	r3, [r7, #11]
        break;
 80070c0:	e007      	b.n	80070d2 <USBD_GetDescriptor+0x286>

    default:
        USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa08 	bl	80074da <USBD_CtlError>
        err++;
 80070ca:	7afb      	ldrb	r3, [r7, #11]
 80070cc:	3301      	adds	r3, #1
 80070ce:	72fb      	strb	r3, [r7, #11]
        break;
 80070d0:	bf00      	nop
    }

    if (err != 0U) {
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11e      	bne.n	8007116 <USBD_GetDescriptor+0x2ca>
        return;
    }

    if (req->wLength != 0U) {
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	88db      	ldrh	r3, [r3, #6]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d016      	beq.n	800710e <USBD_GetDescriptor+0x2c2>
        if (len != 0U) {
 80070e0:	893b      	ldrh	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00e      	beq.n	8007104 <USBD_GetDescriptor+0x2b8>
            len = MIN(len, req->wLength);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	88da      	ldrh	r2, [r3, #6]
 80070ea:	893b      	ldrh	r3, [r7, #8]
 80070ec:	4293      	cmp	r3, r2
 80070ee:	bf28      	it	cs
 80070f0:	4613      	movcs	r3, r2
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	813b      	strh	r3, [r7, #8]
            (void)USBD_CtlSendData(pdev, pbuf, len);
 80070f6:	893b      	ldrh	r3, [r7, #8]
 80070f8:	461a      	mov	r2, r3
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fa5d 	bl	80075bc <USBD_CtlSendData>
 8007102:	e009      	b.n	8007118 <USBD_GetDescriptor+0x2cc>
        } else {
            USBD_CtlError(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f9e7 	bl	80074da <USBD_CtlError>
 800710c:	e004      	b.n	8007118 <USBD_GetDescriptor+0x2cc>
        }
    } else {
        (void)USBD_CtlSendStatus(pdev);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 faae 	bl	8007670 <USBD_CtlSendStatus>
 8007114:	e000      	b.n	8007118 <USBD_GetDescriptor+0x2cc>
        return;
 8007116:	bf00      	nop
    }
}
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop

08007120 <USBD_SetAddress>:
 *         Set device address
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetAddress(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
    uint8_t dev_addr;

    if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U)) {
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	889b      	ldrh	r3, [r3, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d131      	bne.n	8007196 <USBD_SetAddress+0x76>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	88db      	ldrh	r3, [r3, #6]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d12d      	bne.n	8007196 <USBD_SetAddress+0x76>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	885b      	ldrh	r3, [r3, #2]
 800713e:	2b7f      	cmp	r3, #127	; 0x7f
 8007140:	d829      	bhi.n	8007196 <USBD_SetAddress+0x76>
        dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	885b      	ldrh	r3, [r3, #2]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800714c:	73fb      	strb	r3, [r7, #15]

        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b03      	cmp	r3, #3
 8007158:	d104      	bne.n	8007164 <USBD_SetAddress+0x44>
            USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f9bc 	bl	80074da <USBD_CtlError>
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8007162:	e01d      	b.n	80071a0 <USBD_SetAddress+0x80>
        } else {
            pdev->dev_address = dev_addr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	7bfa      	ldrb	r2, [r7, #15]
 8007168:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
            (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fefb 	bl	8007f6c <USBD_LL_SetUSBAddress>
            (void)USBD_CtlSendStatus(pdev);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa7a 	bl	8007670 <USBD_CtlSendStatus>

            if (dev_addr != 0U) {
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d004      	beq.n	800718c <USBD_SetAddress+0x6c>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2202      	movs	r2, #2
 8007186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800718a:	e009      	b.n	80071a0 <USBD_SetAddress+0x80>
            } else {
                pdev->dev_state = USBD_STATE_DEFAULT;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8007194:	e004      	b.n	80071a0 <USBD_SetAddress+0x80>
            }
        }
    } else {
        USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f99e 	bl	80074da <USBD_CtlError>
    }
}
 800719e:	bf00      	nop
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_SetConfig>:
 *         Handle Set device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
    static uint8_t cfgidx;

    cfgidx = (uint8_t)(req->wValue);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	885b      	ldrh	r3, [r3, #2]
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	4b4e      	ldr	r3, [pc, #312]	; (80072f8 <USBD_SetConfig+0x150>)
 80071be:	701a      	strb	r2, [r3, #0]

    if (cfgidx > USBD_MAX_NUM_CONFIGURATION) {
 80071c0:	4b4d      	ldr	r3, [pc, #308]	; (80072f8 <USBD_SetConfig+0x150>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d905      	bls.n	80071d4 <USBD_SetConfig+0x2c>
        USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f985 	bl	80074da <USBD_CtlError>
        return USBD_FAIL;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e08c      	b.n	80072ee <USBD_SetConfig+0x146>
    }

    switch (pdev->dev_state) {
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d002      	beq.n	80071e6 <USBD_SetConfig+0x3e>
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d029      	beq.n	8007238 <USBD_SetConfig+0x90>
 80071e4:	e075      	b.n	80072d2 <USBD_SetConfig+0x12a>
    case USBD_STATE_ADDRESSED:
        if (cfgidx != 0U) {
 80071e6:	4b44      	ldr	r3, [pc, #272]	; (80072f8 <USBD_SetConfig+0x150>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d020      	beq.n	8007230 <USBD_SetConfig+0x88>
            pdev->dev_config = cfgidx;
 80071ee:	4b42      	ldr	r3, [pc, #264]	; (80072f8 <USBD_SetConfig+0x150>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	605a      	str	r2, [r3, #4]

            ret = USBD_SetClassConfig(pdev, cfgidx);
 80071f8:	4b3f      	ldr	r3, [pc, #252]	; (80072f8 <USBD_SetConfig+0x150>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7fe ffe7 	bl	80061d2 <USBD_SetClassConfig>
 8007204:	4603      	mov	r3, r0
 8007206:	73fb      	strb	r3, [r7, #15]

            if (ret != USBD_OK) {
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <USBD_SetConfig+0x78>
                USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f962 	bl	80074da <USBD_CtlError>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
                pdev->dev_state = USBD_STATE_CONFIGURED;
            }
        } else {
            (void)USBD_CtlSendStatus(pdev);
        }
        break;
 800721e:	e065      	b.n	80072ec <USBD_SetConfig+0x144>
                (void)USBD_CtlSendStatus(pdev);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fa25 	bl	8007670 <USBD_CtlSendStatus>
                pdev->dev_state = USBD_STATE_CONFIGURED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2203      	movs	r2, #3
 800722a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        break;
 800722e:	e05d      	b.n	80072ec <USBD_SetConfig+0x144>
            (void)USBD_CtlSendStatus(pdev);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa1d 	bl	8007670 <USBD_CtlSendStatus>
        break;
 8007236:	e059      	b.n	80072ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U) {
 8007238:	4b2f      	ldr	r3, [pc, #188]	; (80072f8 <USBD_SetConfig+0x150>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d112      	bne.n	8007266 <USBD_SetConfig+0xbe>
            pdev->dev_state = USBD_STATE_ADDRESSED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
            pdev->dev_config = cfgidx;
 8007248:	4b2b      	ldr	r3, [pc, #172]	; (80072f8 <USBD_SetConfig+0x150>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	605a      	str	r2, [r3, #4]
            (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007252:	4b29      	ldr	r3, [pc, #164]	; (80072f8 <USBD_SetConfig+0x150>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fe ffd6 	bl	800620a <USBD_ClrClassConfig>
            (void)USBD_CtlSendStatus(pdev);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa06 	bl	8007670 <USBD_CtlSendStatus>
                (void)USBD_CtlSendStatus(pdev);
            }
        } else {
            (void)USBD_CtlSendStatus(pdev);
        }
        break;
 8007264:	e042      	b.n	80072ec <USBD_SetConfig+0x144>
        } else if (cfgidx != pdev->dev_config) {
 8007266:	4b24      	ldr	r3, [pc, #144]	; (80072f8 <USBD_SetConfig+0x150>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d02a      	beq.n	80072ca <USBD_SetConfig+0x122>
            (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7fe ffc4 	bl	800620a <USBD_ClrClassConfig>
            pdev->dev_config = cfgidx;
 8007282:	4b1d      	ldr	r3, [pc, #116]	; (80072f8 <USBD_SetConfig+0x150>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	605a      	str	r2, [r3, #4]
            ret = USBD_SetClassConfig(pdev, cfgidx);
 800728c:	4b1a      	ldr	r3, [pc, #104]	; (80072f8 <USBD_SetConfig+0x150>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7fe ff9d 	bl	80061d2 <USBD_SetClassConfig>
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]
            if (ret != USBD_OK) {
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00f      	beq.n	80072c2 <USBD_SetConfig+0x11a>
                USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f918 	bl	80074da <USBD_CtlError>
                (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fe ffa9 	bl	800620a <USBD_ClrClassConfig>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        break;
 80072c0:	e014      	b.n	80072ec <USBD_SetConfig+0x144>
                (void)USBD_CtlSendStatus(pdev);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f9d4 	bl	8007670 <USBD_CtlSendStatus>
        break;
 80072c8:	e010      	b.n	80072ec <USBD_SetConfig+0x144>
            (void)USBD_CtlSendStatus(pdev);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9d0 	bl	8007670 <USBD_CtlSendStatus>
        break;
 80072d0:	e00c      	b.n	80072ec <USBD_SetConfig+0x144>

    default:
        USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f900 	bl	80074da <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <USBD_SetConfig+0x150>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7fe ff92 	bl	800620a <USBD_ClrClassConfig>
        ret = USBD_FAIL;
 80072e6:	2303      	movs	r3, #3
 80072e8:	73fb      	strb	r3, [r7, #15]
        break;
 80072ea:	bf00      	nop
    }

    return ret;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000228 	.word	0x20000228

080072fc <USBD_GetConfig>:
 *         Handle Get device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetConfig(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
    if (req->wLength != 1U) {
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	88db      	ldrh	r3, [r3, #6]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d004      	beq.n	8007318 <USBD_GetConfig+0x1c>
        USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f8e2 	bl	80074da <USBD_CtlError>
        default:
            USBD_CtlError(pdev, req);
            break;
        }
    }
}
 8007316:	e023      	b.n	8007360 <USBD_GetConfig+0x64>
        switch (pdev->dev_state) {
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	dc02      	bgt.n	800732a <USBD_GetConfig+0x2e>
 8007324:	2b00      	cmp	r3, #0
 8007326:	dc03      	bgt.n	8007330 <USBD_GetConfig+0x34>
 8007328:	e015      	b.n	8007356 <USBD_GetConfig+0x5a>
 800732a:	2b03      	cmp	r3, #3
 800732c:	d00b      	beq.n	8007346 <USBD_GetConfig+0x4a>
 800732e:	e012      	b.n	8007356 <USBD_GetConfig+0x5a>
            pdev->dev_default_config = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	609a      	str	r2, [r3, #8]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3308      	adds	r3, #8
 800733a:	2201      	movs	r2, #1
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f93c 	bl	80075bc <USBD_CtlSendData>
            break;
 8007344:	e00c      	b.n	8007360 <USBD_GetConfig+0x64>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3304      	adds	r3, #4
 800734a:	2201      	movs	r2, #1
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f934 	bl	80075bc <USBD_CtlSendData>
            break;
 8007354:	e004      	b.n	8007360 <USBD_GetConfig+0x64>
            USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f8be 	bl	80074da <USBD_CtlError>
            break;
 800735e:	bf00      	nop
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_GetStatus>:
 *         Handle Get Status request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetStatus(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007378:	b2db      	uxtb	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	2b02      	cmp	r3, #2
 800737e:	d81e      	bhi.n	80073be <USBD_GetStatus+0x56>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wLength != 0x2U) {
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	88db      	ldrh	r3, [r3, #6]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d004      	beq.n	8007392 <USBD_GetStatus+0x2a>
            USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f8a5 	bl	80074da <USBD_CtlError>
            break;
 8007390:	e01a      	b.n	80073c8 <USBD_GetStatus+0x60>
        }

#if (USBD_SELF_POWERED == 1U)
        pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	60da      	str	r2, [r3, #12]
#else
        pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

        if (pdev->dev_remote_wakeup != 0U) {
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <USBD_GetStatus+0x46>
            pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f043 0202 	orr.w	r2, r3, #2
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60da      	str	r2, [r3, #12]
        }

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	330c      	adds	r3, #12
 80073b2:	2202      	movs	r2, #2
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f900 	bl	80075bc <USBD_CtlSendData>
        break;
 80073bc:	e004      	b.n	80073c8 <USBD_GetStatus+0x60>

    default:
        USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f88a 	bl	80074da <USBD_CtlError>
        break;
 80073c6:	bf00      	nop
    }
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_SetFeature>:
 *         Handle Set device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetFeature(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	885b      	ldrh	r3, [r3, #2]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d107      	bne.n	80073f2 <USBD_SetFeature+0x22>
        pdev->dev_remote_wakeup = 1U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f940 	bl	8007670 <USBD_CtlSendStatus>
        pdev->dev_test_mode = req->wIndex >> 8;
        (void)USBD_CtlSendStatus(pdev);
    } else {
        USBD_CtlError(pdev, req);
    }
}
 80073f0:	e013      	b.n	800741a <USBD_SetFeature+0x4a>
    } else if (req->wValue == USB_FEATURE_TEST_MODE) {
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	885b      	ldrh	r3, [r3, #2]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d10b      	bne.n	8007412 <USBD_SetFeature+0x42>
        pdev->dev_test_mode = req->wIndex >> 8;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	889b      	ldrh	r3, [r3, #4]
 80073fe:	0a1b      	lsrs	r3, r3, #8
 8007400:	b29b      	uxth	r3, r3
 8007402:	b2da      	uxtb	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
        (void)USBD_CtlSendStatus(pdev);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f930 	bl	8007670 <USBD_CtlSendStatus>
}
 8007410:	e003      	b.n	800741a <USBD_SetFeature+0x4a>
        USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f860 	bl	80074da <USBD_CtlError>
}
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_ClrFeature>:
 *         Handle clear device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_ClrFeature(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007432:	b2db      	uxtb	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	2b02      	cmp	r3, #2
 8007438:	d80b      	bhi.n	8007452 <USBD_ClrFeature+0x30>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	885b      	ldrh	r3, [r3, #2]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d10c      	bne.n	800745c <USBD_ClrFeature+0x3a>
            pdev->dev_remote_wakeup = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            (void)USBD_CtlSendStatus(pdev);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f910 	bl	8007670 <USBD_CtlSendStatus>
        }
        break;
 8007450:	e004      	b.n	800745c <USBD_ClrFeature+0x3a>

    default:
        USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f840 	bl	80074da <USBD_CtlError>
        break;
 800745a:	e000      	b.n	800745e <USBD_ClrFeature+0x3c>
        break;
 800745c:	bf00      	nop
    }
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_ParseSetupRequest>:
 *         Copy buffer into setup structure
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef * req, uint8_t * pdata) {
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
    uint8_t * pbuff = pdata;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	60fb      	str	r3, [r7, #12]

    req->bmRequest = *(uint8_t *)(pbuff);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	781a      	ldrb	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	701a      	strb	r2, [r3, #0]

    pbuff++;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
    req->bRequest = *(uint8_t *)(pbuff);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	781a      	ldrb	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	705a      	strb	r2, [r3, #1]

    pbuff++;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3301      	adds	r3, #1
 800748e:	60fb      	str	r3, [r7, #12]
    req->wValue = SWAPBYTE(pbuff);
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f7ff fa41 	bl	8006918 <SWAPBYTE>
 8007496:	4603      	mov	r3, r0
 8007498:	461a      	mov	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	805a      	strh	r2, [r3, #2]

    pbuff++;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3301      	adds	r3, #1
 80074a2:	60fb      	str	r3, [r7, #12]
    pbuff++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3301      	adds	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]
    req->wIndex = SWAPBYTE(pbuff);
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff fa34 	bl	8006918 <SWAPBYTE>
 80074b0:	4603      	mov	r3, r0
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	809a      	strh	r2, [r3, #4]

    pbuff++;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3301      	adds	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
    pbuff++;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3301      	adds	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]
    req->wLength = SWAPBYTE(pbuff);
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f7ff fa27 	bl	8006918 <SWAPBYTE>
 80074ca:	4603      	mov	r3, r0
 80074cc:	461a      	mov	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	80da      	strh	r2, [r3, #6]
}
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CtlError>:
 *         Handle USB low level Error
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_CtlError(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
    UNUSED(req);

    (void)USBD_LL_StallEP(pdev, 0x80U);
 80074e4:	2180      	movs	r1, #128	; 0x80
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fcd6 	bl	8007e98 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, 0U);
 80074ec:	2100      	movs	r1, #0
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fcd2 	bl	8007e98 <USBD_LL_StallEP>
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_GetString>:
 * @param  desc : descriptor buffer
 * @param  unicode : Formatted string buffer (unicode)
 * @param  len : descriptor length
 * @retval None
 */
void USBD_GetString(uint8_t * desc, uint8_t * unicode, uint16_t * len) {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
    uint8_t idx = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	75fb      	strb	r3, [r7, #23]
    uint8_t * pdesc;

    if (desc == NULL) {
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d036      	beq.n	8007580 <USBD_GetString+0x84>
        return;
    }

    pdesc = desc;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	613b      	str	r3, [r7, #16]
    *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007516:	6938      	ldr	r0, [r7, #16]
 8007518:	f000 f836 	bl	8007588 <USBD_GetLen>
 800751c:	4603      	mov	r3, r0
 800751e:	3301      	adds	r3, #1
 8007520:	b29b      	uxth	r3, r3
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	801a      	strh	r2, [r3, #0]

    unicode[idx] = *(uint8_t *)len;
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	4413      	add	r3, r2
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7812      	ldrb	r2, [r2, #0]
 8007534:	701a      	strb	r2, [r3, #0]
    idx++;
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	3301      	adds	r3, #1
 800753a:	75fb      	strb	r3, [r7, #23]
    unicode[idx] = USB_DESC_TYPE_STRING;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	4413      	add	r3, r2
 8007542:	2203      	movs	r2, #3
 8007544:	701a      	strb	r2, [r3, #0]
    idx++;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	3301      	adds	r3, #1
 800754a:	75fb      	strb	r3, [r7, #23]

    while (*pdesc != (uint8_t)'\0') {
 800754c:	e013      	b.n	8007576 <USBD_GetString+0x7a>
        unicode[idx] = *pdesc;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	4413      	add	r3, r2
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	7812      	ldrb	r2, [r2, #0]
 8007558:	701a      	strb	r2, [r3, #0]
        pdesc++;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	3301      	adds	r3, #1
 800755e:	613b      	str	r3, [r7, #16]
        idx++;
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	3301      	adds	r3, #1
 8007564:	75fb      	strb	r3, [r7, #23]

        unicode[idx] = 0U;
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	4413      	add	r3, r2
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
        idx++;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	3301      	adds	r3, #1
 8007574:	75fb      	strb	r3, [r7, #23]
    while (*pdesc != (uint8_t)'\0') {
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e7      	bne.n	800754e <USBD_GetString+0x52>
 800757e:	e000      	b.n	8007582 <USBD_GetString+0x86>
        return;
 8007580:	bf00      	nop
    }
}
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_GetLen>:
 * @brief  USBD_GetLen
 *         return the string length
 * @param  buf : pointer to the ascii string buffer
 * @retval string length
 */
static uint8_t USBD_GetLen(uint8_t * buf) {
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
    uint8_t len = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	73fb      	strb	r3, [r7, #15]
    uint8_t * pbuff = buf;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	60bb      	str	r3, [r7, #8]

    while (*pbuff != (uint8_t)'\0') {
 8007598:	e005      	b.n	80075a6 <USBD_GetLen+0x1e>
        len++;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	3301      	adds	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
        pbuff++;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	3301      	adds	r3, #1
 80075a4:	60bb      	str	r3, [r7, #8]
    while (*pbuff != (uint8_t)'\0') {
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1f5      	bne.n	800759a <USBD_GetLen+0x12>
    }

    return len;
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USBD_CtlSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_IN;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    pdev->ep_in[0].total_length = len;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
    pdev->ep_in[0].rem_length = 0U;
#else
    pdev->ep_in[0].rem_length = len;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	2100      	movs	r1, #0
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fce1 	bl	8007faa <USBD_LL_Transmit>

    return USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_CtlContinueSendData>:
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef * pdev, uint8_t * pbuf,
                                            uint32_t len) {
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	607a      	str	r2, [r7, #4]
    /* Start the next transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	2100      	movs	r1, #0
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fcd0 	bl	8007faa <USBD_LL_Transmit>

    return USBD_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_CtlPrepareRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2203      	movs	r2, #3
 8007624:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    pdev->ep_out[0].total_length = len;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
    pdev->ep_out[0].rem_length = 0U;
#else
    pdev->ep_out[0].rem_length = len;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	2100      	movs	r1, #0
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 fcd4 	bl	8007fec <USBD_LL_PrepareReceive>

    return USBD_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_CtlContinueRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	607a      	str	r2, [r7, #4]
    (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	2100      	movs	r1, #0
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fcc3 	bl	8007fec <USBD_LL_PrepareReceive>

    return USBD_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_CtlSendStatus>:
 * @brief  USBD_CtlSendStatus
 *         send zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef * pdev) {
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2204      	movs	r2, #4
 800767c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* Start the transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007680:	2300      	movs	r3, #0
 8007682:	2200      	movs	r2, #0
 8007684:	2100      	movs	r1, #0
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fc8f 	bl	8007faa <USBD_LL_Transmit>

    return USBD_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_CtlReceiveStatus>:
 * @brief  USBD_CtlReceiveStatus
 *         receive zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef * pdev) {
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2205      	movs	r2, #5
 80076a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* Start the transfer */
    (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076a6:	2300      	movs	r3, #0
 80076a8:	2200      	movs	r2, #0
 80076aa:	2100      	movs	r1, #0
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fc9d 	bl	8007fec <USBD_LL_PrepareReceive>

    return USBD_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 80076c0:	2200      	movs	r2, #0
 80076c2:	4912      	ldr	r1, [pc, #72]	; (800770c <MX_USB_DEVICE_Init+0x50>)
 80076c4:	4812      	ldr	r0, [pc, #72]	; (8007710 <MX_USB_DEVICE_Init+0x54>)
 80076c6:	f7fe fd07 	bl	80060d8 <USBD_Init>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 80076d0:	f7f9 f836 	bl	8000740 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80076d4:	490f      	ldr	r1, [pc, #60]	; (8007714 <MX_USB_DEVICE_Init+0x58>)
 80076d6:	480e      	ldr	r0, [pc, #56]	; (8007710 <MX_USB_DEVICE_Init+0x54>)
 80076d8:	f7fe fd2e 	bl	8006138 <USBD_RegisterClass>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 80076e2:	f7f9 f82d 	bl	8000740 <Error_Handler>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80076e6:	490c      	ldr	r1, [pc, #48]	; (8007718 <MX_USB_DEVICE_Init+0x5c>)
 80076e8:	4809      	ldr	r0, [pc, #36]	; (8007710 <MX_USB_DEVICE_Init+0x54>)
 80076ea:	f7fe fc1f 	bl	8005f2c <USBD_CDC_RegisterInterface>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 80076f4:	f7f9 f824 	bl	8000740 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80076f8:	4805      	ldr	r0, [pc, #20]	; (8007710 <MX_USB_DEVICE_Init+0x54>)
 80076fa:	f7fe fd53 	bl	80061a4 <USBD_Start>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 8007704:	f7f9 f81c 	bl	8000740 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007708:	bf00      	nop
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200000ac 	.word	0x200000ac
 8007710:	2000022c 	.word	0x2000022c
 8007714:	20000018 	.word	0x20000018
 8007718:	20000098 	.word	0x20000098

0800771c <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007720:	2200      	movs	r2, #0
 8007722:	4905      	ldr	r1, [pc, #20]	; (8007738 <CDC_Init_FS+0x1c>)
 8007724:	4805      	ldr	r0, [pc, #20]	; (800773c <CDC_Init_FS+0x20>)
 8007726:	f7fe fc1b 	bl	8005f60 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800772a:	4905      	ldr	r1, [pc, #20]	; (8007740 <CDC_Init_FS+0x24>)
 800772c:	4803      	ldr	r0, [pc, #12]	; (800773c <CDC_Init_FS+0x20>)
 800772e:	f7fe fc39 	bl	8005fa4 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8007732:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 8007734:	4618      	mov	r0, r3
 8007736:	bd80      	pop	{r7, pc}
 8007738:	20000908 	.word	0x20000908
 800773c:	2000022c 	.word	0x2000022c
 8007740:	20000508 	.word	0x20000508

08007744 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 8007744:	b480      	push	{r7}
 8007746:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8007748:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 800774a:	4618      	mov	r0, r3
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t * pbuf, uint16_t length) {
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	6039      	str	r1, [r7, #0]
 800775e:	71fb      	strb	r3, [r7, #7]
 8007760:	4613      	mov	r3, r2
 8007762:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd) {
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	2b23      	cmp	r3, #35	; 0x23
 8007768:	d84a      	bhi.n	8007800 <CDC_Control_FS+0xac>
 800776a:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <CDC_Control_FS+0x1c>)
 800776c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007770:	08007801 	.word	0x08007801
 8007774:	08007801 	.word	0x08007801
 8007778:	08007801 	.word	0x08007801
 800777c:	08007801 	.word	0x08007801
 8007780:	08007801 	.word	0x08007801
 8007784:	08007801 	.word	0x08007801
 8007788:	08007801 	.word	0x08007801
 800778c:	08007801 	.word	0x08007801
 8007790:	08007801 	.word	0x08007801
 8007794:	08007801 	.word	0x08007801
 8007798:	08007801 	.word	0x08007801
 800779c:	08007801 	.word	0x08007801
 80077a0:	08007801 	.word	0x08007801
 80077a4:	08007801 	.word	0x08007801
 80077a8:	08007801 	.word	0x08007801
 80077ac:	08007801 	.word	0x08007801
 80077b0:	08007801 	.word	0x08007801
 80077b4:	08007801 	.word	0x08007801
 80077b8:	08007801 	.word	0x08007801
 80077bc:	08007801 	.word	0x08007801
 80077c0:	08007801 	.word	0x08007801
 80077c4:	08007801 	.word	0x08007801
 80077c8:	08007801 	.word	0x08007801
 80077cc:	08007801 	.word	0x08007801
 80077d0:	08007801 	.word	0x08007801
 80077d4:	08007801 	.word	0x08007801
 80077d8:	08007801 	.word	0x08007801
 80077dc:	08007801 	.word	0x08007801
 80077e0:	08007801 	.word	0x08007801
 80077e4:	08007801 	.word	0x08007801
 80077e8:	08007801 	.word	0x08007801
 80077ec:	08007801 	.word	0x08007801
 80077f0:	08007801 	.word	0x08007801
 80077f4:	08007801 	.word	0x08007801
 80077f8:	08007801 	.word	0x08007801
 80077fc:	08007801 	.word	0x08007801
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8007800:	bf00      	nop
    }

    return (USBD_OK);
 8007802:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t * Buf, uint32_t * Len) {
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	4805      	ldr	r0, [pc, #20]	; (8007834 <CDC_Receive_FS+0x24>)
 800781e:	f7fe fbc1 	bl	8005fa4 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007822:	4804      	ldr	r0, [pc, #16]	; (8007834 <CDC_Receive_FS+0x24>)
 8007824:	f7fe fc22 	bl	800606c <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8007828:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	2000022c 	.word	0x2000022c

08007838 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t * Buf, uint16_t Len) {
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8007848:	4b0d      	ldr	r3, [pc, #52]	; (8007880 <CDC_Transmit_FS+0x48>)
 800784a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800784e:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800785a:	2301      	movs	r3, #1
 800785c:	e00b      	b.n	8007876 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800785e:	887b      	ldrh	r3, [r7, #2]
 8007860:	461a      	mov	r2, r3
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	4806      	ldr	r0, [pc, #24]	; (8007880 <CDC_Transmit_FS+0x48>)
 8007866:	f7fe fb7b 	bl	8005f60 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800786a:	4805      	ldr	r0, [pc, #20]	; (8007880 <CDC_Transmit_FS+0x48>)
 800786c:	f7fe fbb8 	bl	8005fe0 <USBD_CDC_TransmitPacket>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END 7 */
    return result;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	2000022c 	.word	0x2000022c

08007884 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t * Buf, uint32_t * Len, uint8_t epnum) {
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	71fb      	strb	r3, [r7, #7]
    uint8_t result = USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]
    /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
    /* USER CODE END 13 */
    return result;
 8007896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800789a:	4618      	mov	r0, r3
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
	...

080078a8 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	6039      	str	r1, [r7, #0]
 80078b2:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_FS_DeviceDesc);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2212      	movs	r2, #18
 80078b8:	801a      	strh	r2, [r3, #0]
    return USBD_FS_DeviceDesc;
 80078ba:	4b03      	ldr	r3, [pc, #12]	; (80078c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	200000c8 	.word	0x200000c8

080078cc <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_LangIDDesc);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2204      	movs	r2, #4
 80078dc:	801a      	strh	r2, [r3, #0]
    return USBD_LangIDDesc;
 80078de:	4b03      	ldr	r3, [pc, #12]	; (80078ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	200000dc 	.word	0x200000dc

080078f0 <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	6039      	str	r1, [r7, #0]
 80078fa:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d105      	bne.n	800790e <USBD_FS_ProductStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4907      	ldr	r1, [pc, #28]	; (8007924 <USBD_FS_ProductStrDescriptor+0x34>)
 8007906:	4808      	ldr	r0, [pc, #32]	; (8007928 <USBD_FS_ProductStrDescriptor+0x38>)
 8007908:	f7ff fdf8 	bl	80074fc <USBD_GetString>
 800790c:	e004      	b.n	8007918 <USBD_FS_ProductStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	4904      	ldr	r1, [pc, #16]	; (8007924 <USBD_FS_ProductStrDescriptor+0x34>)
 8007912:	4805      	ldr	r0, [pc, #20]	; (8007928 <USBD_FS_ProductStrDescriptor+0x38>)
 8007914:	f7ff fdf2 	bl	80074fc <USBD_GetString>
    }
    return USBD_StrDesc;
 8007918:	4b02      	ldr	r3, [pc, #8]	; (8007924 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000d08 	.word	0x20000d08
 8007928:	08008a58 	.word	0x08008a58

0800792c <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	6039      	str	r1, [r7, #0]
 8007936:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	4904      	ldr	r1, [pc, #16]	; (800794c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800793c:	4804      	ldr	r0, [pc, #16]	; (8007950 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800793e:	f7ff fddd 	bl	80074fc <USBD_GetString>
    return USBD_StrDesc;
 8007942:	4b02      	ldr	r3, [pc, #8]	; (800794c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000d08 	.word	0x20000d08
 8007950:	08008a70 	.word	0x08008a70

08007954 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	6039      	str	r1, [r7, #0]
 800795e:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = USB_SIZ_STRING_SERIAL;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	221a      	movs	r2, #26
 8007964:	801a      	strh	r2, [r3, #0]

    /* Update the serial number string descriptor with the data from the unique
     * ID */
    Get_SerialNum();
 8007966:	f000 f843 	bl	80079f0 <Get_SerialNum>
    /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

    /* USER CODE END USBD_FS_SerialStrDescriptor */
    return (uint8_t *)USBD_StringSerial;
 800796a:	4b02      	ldr	r3, [pc, #8]	; (8007974 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	200000e0 	.word	0x200000e0

08007978 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	6039      	str	r1, [r7, #0]
 8007982:	71fb      	strb	r3, [r7, #7]
    if (speed == USBD_SPEED_HIGH) {
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <USBD_FS_ConfigStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	4907      	ldr	r1, [pc, #28]	; (80079ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800798e:	4808      	ldr	r0, [pc, #32]	; (80079b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007990:	f7ff fdb4 	bl	80074fc <USBD_GetString>
 8007994:	e004      	b.n	80079a0 <USBD_FS_ConfigStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	4904      	ldr	r1, [pc, #16]	; (80079ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800799a:	4805      	ldr	r0, [pc, #20]	; (80079b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800799c:	f7ff fdae 	bl	80074fc <USBD_GetString>
    }
    return USBD_StrDesc;
 80079a0:	4b02      	ldr	r3, [pc, #8]	; (80079ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000d08 	.word	0x20000d08
 80079b0:	08008a84 	.word	0x08008a84

080079b4 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	6039      	str	r1, [r7, #0]
 80079be:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d105      	bne.n	80079d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	4907      	ldr	r1, [pc, #28]	; (80079e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ca:	4808      	ldr	r0, [pc, #32]	; (80079ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079cc:	f7ff fd96 	bl	80074fc <USBD_GetString>
 80079d0:	e004      	b.n	80079dc <USBD_FS_InterfaceStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	4904      	ldr	r1, [pc, #16]	; (80079e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079d6:	4805      	ldr	r0, [pc, #20]	; (80079ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079d8:	f7ff fd90 	bl	80074fc <USBD_GetString>
    }
    return USBD_StrDesc;
 80079dc:	4b02      	ldr	r3, [pc, #8]	; (80079e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000d08 	.word	0x20000d08
 80079ec:	08008a90 	.word	0x08008a90

080079f0 <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
    uint32_t deviceserial0;
    uint32_t deviceserial1;
    uint32_t deviceserial2;

    deviceserial0 = *(uint32_t *)DEVICE_ID1;
 80079f6:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <Get_SerialNum+0x44>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
    deviceserial1 = *(uint32_t *)DEVICE_ID2;
 80079fc:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <Get_SerialNum+0x48>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60bb      	str	r3, [r7, #8]
    deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8007a02:	4b0e      	ldr	r3, [pc, #56]	; (8007a3c <Get_SerialNum+0x4c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	607b      	str	r3, [r7, #4]

    deviceserial0 += deviceserial2;
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]

    if (deviceserial0 != 0) {
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <Get_SerialNum+0x3a>
        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a16:	2208      	movs	r2, #8
 8007a18:	4909      	ldr	r1, [pc, #36]	; (8007a40 <Get_SerialNum+0x50>)
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f814 	bl	8007a48 <IntToUnicode>
        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a20:	2204      	movs	r2, #4
 8007a22:	4908      	ldr	r1, [pc, #32]	; (8007a44 <Get_SerialNum+0x54>)
 8007a24:	68b8      	ldr	r0, [r7, #8]
 8007a26:	f000 f80f 	bl	8007a48 <IntToUnicode>
    }
}
 8007a2a:	bf00      	nop
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	1fff7a10 	.word	0x1fff7a10
 8007a38:	1fff7a14 	.word	0x1fff7a14
 8007a3c:	1fff7a18 	.word	0x1fff7a18
 8007a40:	200000e2 	.word	0x200000e2
 8007a44:	200000f2 	.word	0x200000f2

08007a48 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	71fb      	strb	r3, [r7, #7]
    uint8_t idx = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	75fb      	strb	r3, [r7, #23]

    for (idx = 0; idx < len; idx++) {
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	75fb      	strb	r3, [r7, #23]
 8007a5e:	e027      	b.n	8007ab0 <IntToUnicode+0x68>
        if (((value >> 28)) < 0xA) {
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	0f1b      	lsrs	r3, r3, #28
 8007a64:	2b09      	cmp	r3, #9
 8007a66:	d80b      	bhi.n	8007a80 <IntToUnicode+0x38>
            pbuf[2 * idx] = (value >> 28) + '0';
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	0f1b      	lsrs	r3, r3, #28
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	4619      	mov	r1, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	440b      	add	r3, r1
 8007a78:	3230      	adds	r2, #48	; 0x30
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	e00a      	b.n	8007a96 <IntToUnicode+0x4e>
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	0f1b      	lsrs	r3, r3, #28
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	440b      	add	r3, r1
 8007a90:	3237      	adds	r2, #55	; 0x37
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	701a      	strb	r2, [r3, #0]
        }

        value = value << 4;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	011b      	lsls	r3, r3, #4
 8007a9a:	60fb      	str	r3, [r7, #12]

        pbuf[2 * idx + 1] = 0;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < len; idx++) {
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	3301      	adds	r3, #1
 8007aae:	75fb      	strb	r3, [r7, #23]
 8007ab0:	7dfa      	ldrb	r2, [r7, #23]
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d3d3      	bcc.n	8007a60 <IntToUnicode+0x18>
    }
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	371c      	adds	r7, #28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
	...

08007ac8 <HAL_PCD_MspInit>:
/*******************************************************************************
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef * pcdHandle) {
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ad0:	f107 0314 	add.w	r3, r7, #20
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	609a      	str	r2, [r3, #8]
 8007adc:	60da      	str	r2, [r3, #12]
 8007ade:	611a      	str	r2, [r3, #16]
    if (pcdHandle->Instance == USB_OTG_FS) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ae8:	d13a      	bne.n	8007b60 <HAL_PCD_MspInit+0x98>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

        /* USER CODE END USB_OTG_FS_MspInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aea:	2300      	movs	r3, #0
 8007aec:	613b      	str	r3, [r7, #16]
 8007aee:	4b1e      	ldr	r3, [pc, #120]	; (8007b68 <HAL_PCD_MspInit+0xa0>)
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	4a1d      	ldr	r2, [pc, #116]	; (8007b68 <HAL_PCD_MspInit+0xa0>)
 8007af4:	f043 0301 	orr.w	r3, r3, #1
 8007af8:	6313      	str	r3, [r2, #48]	; 0x30
 8007afa:	4b1b      	ldr	r3, [pc, #108]	; (8007b68 <HAL_PCD_MspInit+0xa0>)
 8007afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	613b      	str	r3, [r7, #16]
 8007b04:	693b      	ldr	r3, [r7, #16]
        /**USB_OTG_FS GPIO Configuration
        PA11     ------> USB_OTG_FS_DM
        PA12     ------> USB_OTG_FS_DP
        */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8007b06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b0a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b14:	2303      	movs	r3, #3
 8007b16:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b18:	230a      	movs	r3, #10
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b1c:	f107 0314 	add.w	r3, r7, #20
 8007b20:	4619      	mov	r1, r3
 8007b22:	4812      	ldr	r0, [pc, #72]	; (8007b6c <HAL_PCD_MspInit+0xa4>)
 8007b24:	f7f9 fc1c 	bl	8001360 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <HAL_PCD_MspInit+0xa0>)
 8007b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2c:	4a0e      	ldr	r2, [pc, #56]	; (8007b68 <HAL_PCD_MspInit+0xa0>)
 8007b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b32:	6353      	str	r3, [r2, #52]	; 0x34
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <HAL_PCD_MspInit+0xa0>)
 8007b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3c:	4a0a      	ldr	r2, [pc, #40]	; (8007b68 <HAL_PCD_MspInit+0xa0>)
 8007b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b42:	6453      	str	r3, [r2, #68]	; 0x44
 8007b44:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <HAL_PCD_MspInit+0xa0>)
 8007b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	68fb      	ldr	r3, [r7, #12]

        /* Peripheral interrupt init */
        HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b50:	2200      	movs	r2, #0
 8007b52:	2100      	movs	r1, #0
 8007b54:	2043      	movs	r0, #67	; 0x43
 8007b56:	f7f9 f9e6 	bl	8000f26 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b5a:	2043      	movs	r0, #67	; 0x43
 8007b5c:	f7f9 f9ff 	bl	8000f5e <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

        /* USER CODE END USB_OTG_FS_MspInit 1 */
    }
}
 8007b60:	bf00      	nop
 8007b62:	3728      	adds	r7, #40	; 0x28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	40020000 	.word	0x40020000

08007b70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f7fe fb59 	bl	800623e <USBD_LL_SetupStage>
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	4613      	mov	r3, r2
 8007bac:	00db      	lsls	r3, r3, #3
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	440b      	add	r3, r1
 8007bb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f7fe fb93 	bl	80062e8 <USBD_LL_DataOutStage>
}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007bdc:	78fa      	ldrb	r2, [r7, #3]
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	4613      	mov	r3, r2
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	4413      	add	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	440b      	add	r3, r1
 8007bea:	334c      	adds	r3, #76	; 0x4c
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	78fb      	ldrb	r3, [r7, #3]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	f7fe fc2c 	bl	800644e <USBD_LL_DataInStage>
}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fe fd60 	bl	80066d2 <USBD_LL_SOF>
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c22:	2301      	movs	r3, #1
 8007c24:	73fb      	strb	r3, [r7, #15]

    if (hpcd->Init.speed != PCD_SPEED_FULL) {
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d001      	beq.n	8007c32 <HAL_PCD_ResetCallback+0x18>
        Error_Handler();
 8007c2e:	f7f8 fd87 	bl	8000740 <Error_Handler>
    }
    /* Set Speed. */
    USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c38:	7bfa      	ldrb	r2, [r7, #15]
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fd0a 	bl	8006656 <USBD_LL_SetSpeed>

    /* Reset Device. */
    USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fcb2 	bl	80065b2 <USBD_LL_Reset>
}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode. */
    USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fd05 	bl	8006676 <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	6013      	str	r3, [r2, #0]
    /* Enter in STOP mode. */
    /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <HAL_PCD_SuspendCallback+0x48>)
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	4a03      	ldr	r2, [pc, #12]	; (8007ca0 <HAL_PCD_SuspendCallback+0x48>)
 8007c92:	f043 0306 	orr.w	r3, r3, #6
 8007c96:	6113      	str	r3, [r2, #16]
    }
    /* USER CODE END 2 */
}
 8007c98:	bf00      	nop
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	e000ed00 	.word	0xe000ed00

08007ca4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
    USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fcf5 	bl	80066a2 <USBD_LL_Resume>
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fd4d 	bl	8006776 <USBD_LL_IsoOUTIncomplete>
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fd09 	bl	8006712 <USBD_LL_IsoINIncomplete>
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
    USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fe fd5f 	bl	80067da <USBD_LL_DevConnected>
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
    USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fd5c 	bl	80067f0 <USBD_LL_DevDisconnected>
}
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBD_LL_Init>:
/**
 * @brief  Initializes the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef * pdev) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
    /* Init USB Ip. */
    if (pdev->id == DEVICE_FS) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d13c      	bne.n	8007dca <USBD_LL_Init+0x8a>
        /* Link the driver to the stack. */
        hpcd_USB_OTG_FS.pData = pdev;
 8007d50:	4a20      	ldr	r2, [pc, #128]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
        pdev->pData = &hpcd_USB_OTG_FS;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a1e      	ldr	r2, [pc, #120]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

        hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d60:	4b1c      	ldr	r3, [pc, #112]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d66:	601a      	str	r2, [r3, #0]
        hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d68:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	605a      	str	r2, [r3, #4]
        hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d6e:	4b19      	ldr	r3, [pc, #100]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d70:	2202      	movs	r2, #2
 8007d72:	60da      	str	r2, [r3, #12]
        hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d74:	4b17      	ldr	r3, [pc, #92]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	611a      	str	r2, [r3, #16]
        hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d7a:	4b16      	ldr	r3, [pc, #88]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	619a      	str	r2, [r3, #24]
        hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d80:	4b14      	ldr	r3, [pc, #80]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	61da      	str	r2, [r3, #28]
        hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d86:	4b13      	ldr	r3, [pc, #76]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	621a      	str	r2, [r3, #32]
        hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d8c:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	625a      	str	r2, [r3, #36]	; 0x24
        hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d92:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	62da      	str	r2, [r3, #44]	; 0x2c
        hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d98:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8007d9e:	480d      	ldr	r0, [pc, #52]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007da0:	f7f9 fc62 	bl	8001668 <HAL_PCD_Init>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <USBD_LL_Init+0x6e>
            Error_Handler();
 8007daa:	f7f8 fcc9 	bl	8000740 <Error_Handler>
        HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
        HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
        HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
        HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007dae:	2180      	movs	r1, #128	; 0x80
 8007db0:	4808      	ldr	r0, [pc, #32]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007db2:	f7fa feba 	bl	8002b2a <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007db6:	2240      	movs	r2, #64	; 0x40
 8007db8:	2100      	movs	r1, #0
 8007dba:	4806      	ldr	r0, [pc, #24]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007dbc:	f7fa fe6e 	bl	8002a9c <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007dc0:	2280      	movs	r2, #128	; 0x80
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	4803      	ldr	r0, [pc, #12]	; (8007dd4 <USBD_LL_Init+0x94>)
 8007dc6:	f7fa fe69 	bl	8002a9c <HAL_PCDEx_SetTxFiFo>
    }
    return USBD_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20000f08 	.word	0x20000f08

08007dd8 <USBD_LL_Start>:
/**
 * @brief  Starts the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_Start(pdev->pData);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7f9 fd57 	bl	80018a2 <HAL_PCD_Start>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 f942 	bl	8008084 <USBD_Get_USB_Status>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_LL_OpenEP>:
 * @param  ep_type: Endpoint type
 * @param  ep_mps: Endpoint max packet size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t ep_type,
                                  uint16_t ep_mps) {
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	4608      	mov	r0, r1
 8007e18:	4611      	mov	r1, r2
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	70fb      	strb	r3, [r7, #3]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70bb      	strb	r3, [r7, #2]
 8007e24:	4613      	mov	r3, r2
 8007e26:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e36:	78bb      	ldrb	r3, [r7, #2]
 8007e38:	883a      	ldrh	r2, [r7, #0]
 8007e3a:	78f9      	ldrb	r1, [r7, #3]
 8007e3c:	f7fa fa28 	bl	8002290 <HAL_PCD_EP_Open>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 f91c 	bl	8008084 <USBD_Get_USB_Status>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_LL_CloseEP>:
 * @brief  Closes an endpoint of the low level driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e74:	78fa      	ldrb	r2, [r7, #3]
 8007e76:	4611      	mov	r1, r2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fa fa71 	bl	8002360 <HAL_PCD_EP_Close>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 f8fd 	bl	8008084 <USBD_Get_USB_Status>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_LL_StallEP>:
 * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007eb2:	78fa      	ldrb	r2, [r7, #3]
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fa fb49 	bl	800254e <HAL_PCD_EP_SetStall>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f8de 	bl	8008084 <USBD_Get_USB_Status>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBD_LL_ClearStallEP>:
 * @brief  Clears a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ef0:	78fa      	ldrb	r2, [r7, #3]
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fa fb8e 	bl	8002616 <HAL_PCD_EP_ClrStall>
 8007efa:	4603      	mov	r3, r0
 8007efc:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 f8bf 	bl	8008084 <USBD_Get_USB_Status>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_LL_IsStallEP>:
 * @brief  Returns Stall condition.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f26:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80) {
 8007f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	da0b      	bge.n	8007f48 <USBD_LL_IsStallEP+0x34>
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f36:	68f9      	ldr	r1, [r7, #12]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	333e      	adds	r3, #62	; 0x3e
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	e00b      	b.n	8007f60 <USBD_LL_IsStallEP+0x4c>
    } else {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f4e:	68f9      	ldr	r1, [r7, #12]
 8007f50:	4613      	mov	r3, r2
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007f5e:	781b      	ldrb	r3, [r3, #0]
    }
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USBD_LL_SetUSBAddress>:
 * @brief  Assigns a USB address to the device.
 * @param  pdev: Device handle
 * @param  dev_addr: Device address
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev, uint8_t dev_addr) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f86:	78fa      	ldrb	r2, [r7, #3]
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fa f95b 	bl	8002246 <HAL_PCD_SetAddress>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f874 	bl	8008084 <USBD_Get_USB_Status>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_LL_Transmit>:
 * @param  pbuf: Pointer to data to be sent
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf,
                                    uint32_t size) {
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b086      	sub	sp, #24
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fc8:	7af9      	ldrb	r1, [r7, #11]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	f7fa fa74 	bl	80024ba <HAL_PCD_EP_Transmit>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 f853 	bl	8008084 <USBD_Get_USB_Status>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 8007fe2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_LL_PrepareReceive>:
 * @param  pbuf: Pointer to data to be received
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev, uint8_t ep_addr,
                                          uint8_t * pbuf, uint32_t size) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800800a:	7af9      	ldrb	r1, [r7, #11]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	f7fa f9f0 	bl	80023f4 <HAL_PCD_EP_Receive>
 8008014:	4603      	mov	r3, r0
 8008016:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f832 	bl	8008084 <USBD_Get_USB_Status>
 8008020:	4603      	mov	r3, r0
 8008022:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 8008024:	7dbb      	ldrb	r3, [r7, #22]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_LL_GetRxDataSize>:
 * @brief  Returns the last transferred packet size.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008040:	78fa      	ldrb	r2, [r7, #3]
 8008042:	4611      	mov	r1, r2
 8008044:	4618      	mov	r0, r3
 8008046:	f7fa fa20 	bl	800248a <HAL_PCD_EP_GetRxCount>
 800804a:	4603      	mov	r3, r0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_static_malloc>:
/**
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void * USBD_static_malloc(uint32_t size) {
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
    static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
    return mem;
 800805c:	4b03      	ldr	r3, [pc, #12]	; (800806c <USBD_static_malloc+0x18>)
}
 800805e:	4618      	mov	r0, r3
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20001414 	.word	0x20001414

08008070 <USBD_static_free>:
/**
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void * p) {
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USBD_Get_USB_Status>:
/**
 * @brief  Returns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status) {
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]

    switch (hal_status) {
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	2b03      	cmp	r3, #3
 8008096:	d817      	bhi.n	80080c8 <USBD_Get_USB_Status+0x44>
 8008098:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <USBD_Get_USB_Status+0x1c>)
 800809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809e:	bf00      	nop
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080b7 	.word	0x080080b7
 80080a8:	080080bd 	.word	0x080080bd
 80080ac:	080080c3 	.word	0x080080c3
    case HAL_OK:
        usb_status = USBD_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73fb      	strb	r3, [r7, #15]
        break;
 80080b4:	e00b      	b.n	80080ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR:
        usb_status = USBD_FAIL;
 80080b6:	2303      	movs	r3, #3
 80080b8:	73fb      	strb	r3, [r7, #15]
        break;
 80080ba:	e008      	b.n	80080ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY:
        usb_status = USBD_BUSY;
 80080bc:	2301      	movs	r3, #1
 80080be:	73fb      	strb	r3, [r7, #15]
        break;
 80080c0:	e005      	b.n	80080ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT:
        usb_status = USBD_FAIL;
 80080c2:	2303      	movs	r3, #3
 80080c4:	73fb      	strb	r3, [r7, #15]
        break;
 80080c6:	e002      	b.n	80080ce <USBD_Get_USB_Status+0x4a>
    default:
        usb_status = USBD_FAIL;
 80080c8:	2303      	movs	r3, #3
 80080ca:	73fb      	strb	r3, [r7, #15]
        break;
 80080cc:	bf00      	nop
    }
    return usb_status;
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <__errno>:
 80080dc:	4b01      	ldr	r3, [pc, #4]	; (80080e4 <__errno+0x8>)
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	200000fc 	.word	0x200000fc

080080e8 <__libc_init_array>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	4d0d      	ldr	r5, [pc, #52]	; (8008120 <__libc_init_array+0x38>)
 80080ec:	4c0d      	ldr	r4, [pc, #52]	; (8008124 <__libc_init_array+0x3c>)
 80080ee:	1b64      	subs	r4, r4, r5
 80080f0:	10a4      	asrs	r4, r4, #2
 80080f2:	2600      	movs	r6, #0
 80080f4:	42a6      	cmp	r6, r4
 80080f6:	d109      	bne.n	800810c <__libc_init_array+0x24>
 80080f8:	4d0b      	ldr	r5, [pc, #44]	; (8008128 <__libc_init_array+0x40>)
 80080fa:	4c0c      	ldr	r4, [pc, #48]	; (800812c <__libc_init_array+0x44>)
 80080fc:	f000 fc96 	bl	8008a2c <_init>
 8008100:	1b64      	subs	r4, r4, r5
 8008102:	10a4      	asrs	r4, r4, #2
 8008104:	2600      	movs	r6, #0
 8008106:	42a6      	cmp	r6, r4
 8008108:	d105      	bne.n	8008116 <__libc_init_array+0x2e>
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008110:	4798      	blx	r3
 8008112:	3601      	adds	r6, #1
 8008114:	e7ee      	b.n	80080f4 <__libc_init_array+0xc>
 8008116:	f855 3b04 	ldr.w	r3, [r5], #4
 800811a:	4798      	blx	r3
 800811c:	3601      	adds	r6, #1
 800811e:	e7f2      	b.n	8008106 <__libc_init_array+0x1e>
 8008120:	08008afc 	.word	0x08008afc
 8008124:	08008afc 	.word	0x08008afc
 8008128:	08008afc 	.word	0x08008afc
 800812c:	08008b00 	.word	0x08008b00

08008130 <malloc>:
 8008130:	4b02      	ldr	r3, [pc, #8]	; (800813c <malloc+0xc>)
 8008132:	4601      	mov	r1, r0
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	f000 b877 	b.w	8008228 <_malloc_r>
 800813a:	bf00      	nop
 800813c:	200000fc 	.word	0x200000fc

08008140 <memset>:
 8008140:	4402      	add	r2, r0
 8008142:	4603      	mov	r3, r0
 8008144:	4293      	cmp	r3, r2
 8008146:	d100      	bne.n	800814a <memset+0xa>
 8008148:	4770      	bx	lr
 800814a:	f803 1b01 	strb.w	r1, [r3], #1
 800814e:	e7f9      	b.n	8008144 <memset+0x4>

08008150 <_free_r>:
 8008150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008152:	2900      	cmp	r1, #0
 8008154:	d044      	beq.n	80081e0 <_free_r+0x90>
 8008156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800815a:	9001      	str	r0, [sp, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f1a1 0404 	sub.w	r4, r1, #4
 8008162:	bfb8      	it	lt
 8008164:	18e4      	addlt	r4, r4, r3
 8008166:	f000 f903 	bl	8008370 <__malloc_lock>
 800816a:	4a1e      	ldr	r2, [pc, #120]	; (80081e4 <_free_r+0x94>)
 800816c:	9801      	ldr	r0, [sp, #4]
 800816e:	6813      	ldr	r3, [r2, #0]
 8008170:	b933      	cbnz	r3, 8008180 <_free_r+0x30>
 8008172:	6063      	str	r3, [r4, #4]
 8008174:	6014      	str	r4, [r2, #0]
 8008176:	b003      	add	sp, #12
 8008178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800817c:	f000 b8fe 	b.w	800837c <__malloc_unlock>
 8008180:	42a3      	cmp	r3, r4
 8008182:	d908      	bls.n	8008196 <_free_r+0x46>
 8008184:	6825      	ldr	r5, [r4, #0]
 8008186:	1961      	adds	r1, r4, r5
 8008188:	428b      	cmp	r3, r1
 800818a:	bf01      	itttt	eq
 800818c:	6819      	ldreq	r1, [r3, #0]
 800818e:	685b      	ldreq	r3, [r3, #4]
 8008190:	1949      	addeq	r1, r1, r5
 8008192:	6021      	streq	r1, [r4, #0]
 8008194:	e7ed      	b.n	8008172 <_free_r+0x22>
 8008196:	461a      	mov	r2, r3
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	b10b      	cbz	r3, 80081a0 <_free_r+0x50>
 800819c:	42a3      	cmp	r3, r4
 800819e:	d9fa      	bls.n	8008196 <_free_r+0x46>
 80081a0:	6811      	ldr	r1, [r2, #0]
 80081a2:	1855      	adds	r5, r2, r1
 80081a4:	42a5      	cmp	r5, r4
 80081a6:	d10b      	bne.n	80081c0 <_free_r+0x70>
 80081a8:	6824      	ldr	r4, [r4, #0]
 80081aa:	4421      	add	r1, r4
 80081ac:	1854      	adds	r4, r2, r1
 80081ae:	42a3      	cmp	r3, r4
 80081b0:	6011      	str	r1, [r2, #0]
 80081b2:	d1e0      	bne.n	8008176 <_free_r+0x26>
 80081b4:	681c      	ldr	r4, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	6053      	str	r3, [r2, #4]
 80081ba:	4421      	add	r1, r4
 80081bc:	6011      	str	r1, [r2, #0]
 80081be:	e7da      	b.n	8008176 <_free_r+0x26>
 80081c0:	d902      	bls.n	80081c8 <_free_r+0x78>
 80081c2:	230c      	movs	r3, #12
 80081c4:	6003      	str	r3, [r0, #0]
 80081c6:	e7d6      	b.n	8008176 <_free_r+0x26>
 80081c8:	6825      	ldr	r5, [r4, #0]
 80081ca:	1961      	adds	r1, r4, r5
 80081cc:	428b      	cmp	r3, r1
 80081ce:	bf04      	itt	eq
 80081d0:	6819      	ldreq	r1, [r3, #0]
 80081d2:	685b      	ldreq	r3, [r3, #4]
 80081d4:	6063      	str	r3, [r4, #4]
 80081d6:	bf04      	itt	eq
 80081d8:	1949      	addeq	r1, r1, r5
 80081da:	6021      	streq	r1, [r4, #0]
 80081dc:	6054      	str	r4, [r2, #4]
 80081de:	e7ca      	b.n	8008176 <_free_r+0x26>
 80081e0:	b003      	add	sp, #12
 80081e2:	bd30      	pop	{r4, r5, pc}
 80081e4:	20001634 	.word	0x20001634

080081e8 <sbrk_aligned>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4e0e      	ldr	r6, [pc, #56]	; (8008224 <sbrk_aligned+0x3c>)
 80081ec:	460c      	mov	r4, r1
 80081ee:	6831      	ldr	r1, [r6, #0]
 80081f0:	4605      	mov	r5, r0
 80081f2:	b911      	cbnz	r1, 80081fa <sbrk_aligned+0x12>
 80081f4:	f000 f88c 	bl	8008310 <_sbrk_r>
 80081f8:	6030      	str	r0, [r6, #0]
 80081fa:	4621      	mov	r1, r4
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 f887 	bl	8008310 <_sbrk_r>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	d00a      	beq.n	800821c <sbrk_aligned+0x34>
 8008206:	1cc4      	adds	r4, r0, #3
 8008208:	f024 0403 	bic.w	r4, r4, #3
 800820c:	42a0      	cmp	r0, r4
 800820e:	d007      	beq.n	8008220 <sbrk_aligned+0x38>
 8008210:	1a21      	subs	r1, r4, r0
 8008212:	4628      	mov	r0, r5
 8008214:	f000 f87c 	bl	8008310 <_sbrk_r>
 8008218:	3001      	adds	r0, #1
 800821a:	d101      	bne.n	8008220 <sbrk_aligned+0x38>
 800821c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008220:	4620      	mov	r0, r4
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	20001638 	.word	0x20001638

08008228 <_malloc_r>:
 8008228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822c:	1ccd      	adds	r5, r1, #3
 800822e:	f025 0503 	bic.w	r5, r5, #3
 8008232:	3508      	adds	r5, #8
 8008234:	2d0c      	cmp	r5, #12
 8008236:	bf38      	it	cc
 8008238:	250c      	movcc	r5, #12
 800823a:	2d00      	cmp	r5, #0
 800823c:	4607      	mov	r7, r0
 800823e:	db01      	blt.n	8008244 <_malloc_r+0x1c>
 8008240:	42a9      	cmp	r1, r5
 8008242:	d905      	bls.n	8008250 <_malloc_r+0x28>
 8008244:	230c      	movs	r3, #12
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	2600      	movs	r6, #0
 800824a:	4630      	mov	r0, r6
 800824c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008250:	4e2e      	ldr	r6, [pc, #184]	; (800830c <_malloc_r+0xe4>)
 8008252:	f000 f88d 	bl	8008370 <__malloc_lock>
 8008256:	6833      	ldr	r3, [r6, #0]
 8008258:	461c      	mov	r4, r3
 800825a:	bb34      	cbnz	r4, 80082aa <_malloc_r+0x82>
 800825c:	4629      	mov	r1, r5
 800825e:	4638      	mov	r0, r7
 8008260:	f7ff ffc2 	bl	80081e8 <sbrk_aligned>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	4604      	mov	r4, r0
 8008268:	d14d      	bne.n	8008306 <_malloc_r+0xde>
 800826a:	6834      	ldr	r4, [r6, #0]
 800826c:	4626      	mov	r6, r4
 800826e:	2e00      	cmp	r6, #0
 8008270:	d140      	bne.n	80082f4 <_malloc_r+0xcc>
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	4631      	mov	r1, r6
 8008276:	4638      	mov	r0, r7
 8008278:	eb04 0803 	add.w	r8, r4, r3
 800827c:	f000 f848 	bl	8008310 <_sbrk_r>
 8008280:	4580      	cmp	r8, r0
 8008282:	d13a      	bne.n	80082fa <_malloc_r+0xd2>
 8008284:	6821      	ldr	r1, [r4, #0]
 8008286:	3503      	adds	r5, #3
 8008288:	1a6d      	subs	r5, r5, r1
 800828a:	f025 0503 	bic.w	r5, r5, #3
 800828e:	3508      	adds	r5, #8
 8008290:	2d0c      	cmp	r5, #12
 8008292:	bf38      	it	cc
 8008294:	250c      	movcc	r5, #12
 8008296:	4629      	mov	r1, r5
 8008298:	4638      	mov	r0, r7
 800829a:	f7ff ffa5 	bl	80081e8 <sbrk_aligned>
 800829e:	3001      	adds	r0, #1
 80082a0:	d02b      	beq.n	80082fa <_malloc_r+0xd2>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	442b      	add	r3, r5
 80082a6:	6023      	str	r3, [r4, #0]
 80082a8:	e00e      	b.n	80082c8 <_malloc_r+0xa0>
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	1b52      	subs	r2, r2, r5
 80082ae:	d41e      	bmi.n	80082ee <_malloc_r+0xc6>
 80082b0:	2a0b      	cmp	r2, #11
 80082b2:	d916      	bls.n	80082e2 <_malloc_r+0xba>
 80082b4:	1961      	adds	r1, r4, r5
 80082b6:	42a3      	cmp	r3, r4
 80082b8:	6025      	str	r5, [r4, #0]
 80082ba:	bf18      	it	ne
 80082bc:	6059      	strne	r1, [r3, #4]
 80082be:	6863      	ldr	r3, [r4, #4]
 80082c0:	bf08      	it	eq
 80082c2:	6031      	streq	r1, [r6, #0]
 80082c4:	5162      	str	r2, [r4, r5]
 80082c6:	604b      	str	r3, [r1, #4]
 80082c8:	4638      	mov	r0, r7
 80082ca:	f104 060b 	add.w	r6, r4, #11
 80082ce:	f000 f855 	bl	800837c <__malloc_unlock>
 80082d2:	f026 0607 	bic.w	r6, r6, #7
 80082d6:	1d23      	adds	r3, r4, #4
 80082d8:	1af2      	subs	r2, r6, r3
 80082da:	d0b6      	beq.n	800824a <_malloc_r+0x22>
 80082dc:	1b9b      	subs	r3, r3, r6
 80082de:	50a3      	str	r3, [r4, r2]
 80082e0:	e7b3      	b.n	800824a <_malloc_r+0x22>
 80082e2:	6862      	ldr	r2, [r4, #4]
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	bf0c      	ite	eq
 80082e8:	6032      	streq	r2, [r6, #0]
 80082ea:	605a      	strne	r2, [r3, #4]
 80082ec:	e7ec      	b.n	80082c8 <_malloc_r+0xa0>
 80082ee:	4623      	mov	r3, r4
 80082f0:	6864      	ldr	r4, [r4, #4]
 80082f2:	e7b2      	b.n	800825a <_malloc_r+0x32>
 80082f4:	4634      	mov	r4, r6
 80082f6:	6876      	ldr	r6, [r6, #4]
 80082f8:	e7b9      	b.n	800826e <_malloc_r+0x46>
 80082fa:	230c      	movs	r3, #12
 80082fc:	603b      	str	r3, [r7, #0]
 80082fe:	4638      	mov	r0, r7
 8008300:	f000 f83c 	bl	800837c <__malloc_unlock>
 8008304:	e7a1      	b.n	800824a <_malloc_r+0x22>
 8008306:	6025      	str	r5, [r4, #0]
 8008308:	e7de      	b.n	80082c8 <_malloc_r+0xa0>
 800830a:	bf00      	nop
 800830c:	20001634 	.word	0x20001634

08008310 <_sbrk_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d06      	ldr	r5, [pc, #24]	; (800832c <_sbrk_r+0x1c>)
 8008314:	2300      	movs	r3, #0
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	f7f8 faf0 	bl	8000900 <_sbrk>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_sbrk_r+0x1a>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_sbrk_r+0x1a>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	2000163c 	.word	0x2000163c

08008330 <siprintf>:
 8008330:	b40e      	push	{r1, r2, r3}
 8008332:	b500      	push	{lr}
 8008334:	b09c      	sub	sp, #112	; 0x70
 8008336:	ab1d      	add	r3, sp, #116	; 0x74
 8008338:	9002      	str	r0, [sp, #8]
 800833a:	9006      	str	r0, [sp, #24]
 800833c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008340:	4809      	ldr	r0, [pc, #36]	; (8008368 <siprintf+0x38>)
 8008342:	9107      	str	r1, [sp, #28]
 8008344:	9104      	str	r1, [sp, #16]
 8008346:	4909      	ldr	r1, [pc, #36]	; (800836c <siprintf+0x3c>)
 8008348:	f853 2b04 	ldr.w	r2, [r3], #4
 800834c:	9105      	str	r1, [sp, #20]
 800834e:	6800      	ldr	r0, [r0, #0]
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	a902      	add	r1, sp, #8
 8008354:	f000 f874 	bl	8008440 <_svfiprintf_r>
 8008358:	9b02      	ldr	r3, [sp, #8]
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
 800835e:	b01c      	add	sp, #112	; 0x70
 8008360:	f85d eb04 	ldr.w	lr, [sp], #4
 8008364:	b003      	add	sp, #12
 8008366:	4770      	bx	lr
 8008368:	200000fc 	.word	0x200000fc
 800836c:	ffff0208 	.word	0xffff0208

08008370 <__malloc_lock>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__malloc_lock+0x8>)
 8008372:	f000 baf9 	b.w	8008968 <__retarget_lock_acquire_recursive>
 8008376:	bf00      	nop
 8008378:	20001640 	.word	0x20001640

0800837c <__malloc_unlock>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__malloc_unlock+0x8>)
 800837e:	f000 baf4 	b.w	800896a <__retarget_lock_release_recursive>
 8008382:	bf00      	nop
 8008384:	20001640 	.word	0x20001640

08008388 <__ssputs_r>:
 8008388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	688e      	ldr	r6, [r1, #8]
 800838e:	429e      	cmp	r6, r3
 8008390:	4682      	mov	sl, r0
 8008392:	460c      	mov	r4, r1
 8008394:	4690      	mov	r8, r2
 8008396:	461f      	mov	r7, r3
 8008398:	d838      	bhi.n	800840c <__ssputs_r+0x84>
 800839a:	898a      	ldrh	r2, [r1, #12]
 800839c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083a0:	d032      	beq.n	8008408 <__ssputs_r+0x80>
 80083a2:	6825      	ldr	r5, [r4, #0]
 80083a4:	6909      	ldr	r1, [r1, #16]
 80083a6:	eba5 0901 	sub.w	r9, r5, r1
 80083aa:	6965      	ldr	r5, [r4, #20]
 80083ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083b4:	3301      	adds	r3, #1
 80083b6:	444b      	add	r3, r9
 80083b8:	106d      	asrs	r5, r5, #1
 80083ba:	429d      	cmp	r5, r3
 80083bc:	bf38      	it	cc
 80083be:	461d      	movcc	r5, r3
 80083c0:	0553      	lsls	r3, r2, #21
 80083c2:	d531      	bpl.n	8008428 <__ssputs_r+0xa0>
 80083c4:	4629      	mov	r1, r5
 80083c6:	f7ff ff2f 	bl	8008228 <_malloc_r>
 80083ca:	4606      	mov	r6, r0
 80083cc:	b950      	cbnz	r0, 80083e4 <__ssputs_r+0x5c>
 80083ce:	230c      	movs	r3, #12
 80083d0:	f8ca 3000 	str.w	r3, [sl]
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e4:	6921      	ldr	r1, [r4, #16]
 80083e6:	464a      	mov	r2, r9
 80083e8:	f000 fac0 	bl	800896c <memcpy>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	6126      	str	r6, [r4, #16]
 80083fa:	6165      	str	r5, [r4, #20]
 80083fc:	444e      	add	r6, r9
 80083fe:	eba5 0509 	sub.w	r5, r5, r9
 8008402:	6026      	str	r6, [r4, #0]
 8008404:	60a5      	str	r5, [r4, #8]
 8008406:	463e      	mov	r6, r7
 8008408:	42be      	cmp	r6, r7
 800840a:	d900      	bls.n	800840e <__ssputs_r+0x86>
 800840c:	463e      	mov	r6, r7
 800840e:	6820      	ldr	r0, [r4, #0]
 8008410:	4632      	mov	r2, r6
 8008412:	4641      	mov	r1, r8
 8008414:	f000 fab8 	bl	8008988 <memmove>
 8008418:	68a3      	ldr	r3, [r4, #8]
 800841a:	1b9b      	subs	r3, r3, r6
 800841c:	60a3      	str	r3, [r4, #8]
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	4433      	add	r3, r6
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	2000      	movs	r0, #0
 8008426:	e7db      	b.n	80083e0 <__ssputs_r+0x58>
 8008428:	462a      	mov	r2, r5
 800842a:	f000 fac7 	bl	80089bc <_realloc_r>
 800842e:	4606      	mov	r6, r0
 8008430:	2800      	cmp	r0, #0
 8008432:	d1e1      	bne.n	80083f8 <__ssputs_r+0x70>
 8008434:	6921      	ldr	r1, [r4, #16]
 8008436:	4650      	mov	r0, sl
 8008438:	f7ff fe8a 	bl	8008150 <_free_r>
 800843c:	e7c7      	b.n	80083ce <__ssputs_r+0x46>
	...

08008440 <_svfiprintf_r>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	4698      	mov	r8, r3
 8008446:	898b      	ldrh	r3, [r1, #12]
 8008448:	061b      	lsls	r3, r3, #24
 800844a:	b09d      	sub	sp, #116	; 0x74
 800844c:	4607      	mov	r7, r0
 800844e:	460d      	mov	r5, r1
 8008450:	4614      	mov	r4, r2
 8008452:	d50e      	bpl.n	8008472 <_svfiprintf_r+0x32>
 8008454:	690b      	ldr	r3, [r1, #16]
 8008456:	b963      	cbnz	r3, 8008472 <_svfiprintf_r+0x32>
 8008458:	2140      	movs	r1, #64	; 0x40
 800845a:	f7ff fee5 	bl	8008228 <_malloc_r>
 800845e:	6028      	str	r0, [r5, #0]
 8008460:	6128      	str	r0, [r5, #16]
 8008462:	b920      	cbnz	r0, 800846e <_svfiprintf_r+0x2e>
 8008464:	230c      	movs	r3, #12
 8008466:	603b      	str	r3, [r7, #0]
 8008468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800846c:	e0d1      	b.n	8008612 <_svfiprintf_r+0x1d2>
 800846e:	2340      	movs	r3, #64	; 0x40
 8008470:	616b      	str	r3, [r5, #20]
 8008472:	2300      	movs	r3, #0
 8008474:	9309      	str	r3, [sp, #36]	; 0x24
 8008476:	2320      	movs	r3, #32
 8008478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800847c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008480:	2330      	movs	r3, #48	; 0x30
 8008482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800862c <_svfiprintf_r+0x1ec>
 8008486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800848a:	f04f 0901 	mov.w	r9, #1
 800848e:	4623      	mov	r3, r4
 8008490:	469a      	mov	sl, r3
 8008492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008496:	b10a      	cbz	r2, 800849c <_svfiprintf_r+0x5c>
 8008498:	2a25      	cmp	r2, #37	; 0x25
 800849a:	d1f9      	bne.n	8008490 <_svfiprintf_r+0x50>
 800849c:	ebba 0b04 	subs.w	fp, sl, r4
 80084a0:	d00b      	beq.n	80084ba <_svfiprintf_r+0x7a>
 80084a2:	465b      	mov	r3, fp
 80084a4:	4622      	mov	r2, r4
 80084a6:	4629      	mov	r1, r5
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7ff ff6d 	bl	8008388 <__ssputs_r>
 80084ae:	3001      	adds	r0, #1
 80084b0:	f000 80aa 	beq.w	8008608 <_svfiprintf_r+0x1c8>
 80084b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b6:	445a      	add	r2, fp
 80084b8:	9209      	str	r2, [sp, #36]	; 0x24
 80084ba:	f89a 3000 	ldrb.w	r3, [sl]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80a2 	beq.w	8008608 <_svfiprintf_r+0x1c8>
 80084c4:	2300      	movs	r3, #0
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ce:	f10a 0a01 	add.w	sl, sl, #1
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	9307      	str	r3, [sp, #28]
 80084d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084da:	931a      	str	r3, [sp, #104]	; 0x68
 80084dc:	4654      	mov	r4, sl
 80084de:	2205      	movs	r2, #5
 80084e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e4:	4851      	ldr	r0, [pc, #324]	; (800862c <_svfiprintf_r+0x1ec>)
 80084e6:	f7f7 fe7b 	bl	80001e0 <memchr>
 80084ea:	9a04      	ldr	r2, [sp, #16]
 80084ec:	b9d8      	cbnz	r0, 8008526 <_svfiprintf_r+0xe6>
 80084ee:	06d0      	lsls	r0, r2, #27
 80084f0:	bf44      	itt	mi
 80084f2:	2320      	movmi	r3, #32
 80084f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084f8:	0711      	lsls	r1, r2, #28
 80084fa:	bf44      	itt	mi
 80084fc:	232b      	movmi	r3, #43	; 0x2b
 80084fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008502:	f89a 3000 	ldrb.w	r3, [sl]
 8008506:	2b2a      	cmp	r3, #42	; 0x2a
 8008508:	d015      	beq.n	8008536 <_svfiprintf_r+0xf6>
 800850a:	9a07      	ldr	r2, [sp, #28]
 800850c:	4654      	mov	r4, sl
 800850e:	2000      	movs	r0, #0
 8008510:	f04f 0c0a 	mov.w	ip, #10
 8008514:	4621      	mov	r1, r4
 8008516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851a:	3b30      	subs	r3, #48	; 0x30
 800851c:	2b09      	cmp	r3, #9
 800851e:	d94e      	bls.n	80085be <_svfiprintf_r+0x17e>
 8008520:	b1b0      	cbz	r0, 8008550 <_svfiprintf_r+0x110>
 8008522:	9207      	str	r2, [sp, #28]
 8008524:	e014      	b.n	8008550 <_svfiprintf_r+0x110>
 8008526:	eba0 0308 	sub.w	r3, r0, r8
 800852a:	fa09 f303 	lsl.w	r3, r9, r3
 800852e:	4313      	orrs	r3, r2
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	46a2      	mov	sl, r4
 8008534:	e7d2      	b.n	80084dc <_svfiprintf_r+0x9c>
 8008536:	9b03      	ldr	r3, [sp, #12]
 8008538:	1d19      	adds	r1, r3, #4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	9103      	str	r1, [sp, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfbb      	ittet	lt
 8008542:	425b      	neglt	r3, r3
 8008544:	f042 0202 	orrlt.w	r2, r2, #2
 8008548:	9307      	strge	r3, [sp, #28]
 800854a:	9307      	strlt	r3, [sp, #28]
 800854c:	bfb8      	it	lt
 800854e:	9204      	strlt	r2, [sp, #16]
 8008550:	7823      	ldrb	r3, [r4, #0]
 8008552:	2b2e      	cmp	r3, #46	; 0x2e
 8008554:	d10c      	bne.n	8008570 <_svfiprintf_r+0x130>
 8008556:	7863      	ldrb	r3, [r4, #1]
 8008558:	2b2a      	cmp	r3, #42	; 0x2a
 800855a:	d135      	bne.n	80085c8 <_svfiprintf_r+0x188>
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	1d1a      	adds	r2, r3, #4
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	9203      	str	r2, [sp, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	bfb8      	it	lt
 8008568:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800856c:	3402      	adds	r4, #2
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800863c <_svfiprintf_r+0x1fc>
 8008574:	7821      	ldrb	r1, [r4, #0]
 8008576:	2203      	movs	r2, #3
 8008578:	4650      	mov	r0, sl
 800857a:	f7f7 fe31 	bl	80001e0 <memchr>
 800857e:	b140      	cbz	r0, 8008592 <_svfiprintf_r+0x152>
 8008580:	2340      	movs	r3, #64	; 0x40
 8008582:	eba0 000a 	sub.w	r0, r0, sl
 8008586:	fa03 f000 	lsl.w	r0, r3, r0
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	4303      	orrs	r3, r0
 800858e:	3401      	adds	r4, #1
 8008590:	9304      	str	r3, [sp, #16]
 8008592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008596:	4826      	ldr	r0, [pc, #152]	; (8008630 <_svfiprintf_r+0x1f0>)
 8008598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800859c:	2206      	movs	r2, #6
 800859e:	f7f7 fe1f 	bl	80001e0 <memchr>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d038      	beq.n	8008618 <_svfiprintf_r+0x1d8>
 80085a6:	4b23      	ldr	r3, [pc, #140]	; (8008634 <_svfiprintf_r+0x1f4>)
 80085a8:	bb1b      	cbnz	r3, 80085f2 <_svfiprintf_r+0x1b2>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	3307      	adds	r3, #7
 80085ae:	f023 0307 	bic.w	r3, r3, #7
 80085b2:	3308      	adds	r3, #8
 80085b4:	9303      	str	r3, [sp, #12]
 80085b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b8:	4433      	add	r3, r6
 80085ba:	9309      	str	r3, [sp, #36]	; 0x24
 80085bc:	e767      	b.n	800848e <_svfiprintf_r+0x4e>
 80085be:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c2:	460c      	mov	r4, r1
 80085c4:	2001      	movs	r0, #1
 80085c6:	e7a5      	b.n	8008514 <_svfiprintf_r+0xd4>
 80085c8:	2300      	movs	r3, #0
 80085ca:	3401      	adds	r4, #1
 80085cc:	9305      	str	r3, [sp, #20]
 80085ce:	4619      	mov	r1, r3
 80085d0:	f04f 0c0a 	mov.w	ip, #10
 80085d4:	4620      	mov	r0, r4
 80085d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085da:	3a30      	subs	r2, #48	; 0x30
 80085dc:	2a09      	cmp	r2, #9
 80085de:	d903      	bls.n	80085e8 <_svfiprintf_r+0x1a8>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0c5      	beq.n	8008570 <_svfiprintf_r+0x130>
 80085e4:	9105      	str	r1, [sp, #20]
 80085e6:	e7c3      	b.n	8008570 <_svfiprintf_r+0x130>
 80085e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ec:	4604      	mov	r4, r0
 80085ee:	2301      	movs	r3, #1
 80085f0:	e7f0      	b.n	80085d4 <_svfiprintf_r+0x194>
 80085f2:	ab03      	add	r3, sp, #12
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	462a      	mov	r2, r5
 80085f8:	4b0f      	ldr	r3, [pc, #60]	; (8008638 <_svfiprintf_r+0x1f8>)
 80085fa:	a904      	add	r1, sp, #16
 80085fc:	4638      	mov	r0, r7
 80085fe:	f3af 8000 	nop.w
 8008602:	1c42      	adds	r2, r0, #1
 8008604:	4606      	mov	r6, r0
 8008606:	d1d6      	bne.n	80085b6 <_svfiprintf_r+0x176>
 8008608:	89ab      	ldrh	r3, [r5, #12]
 800860a:	065b      	lsls	r3, r3, #25
 800860c:	f53f af2c 	bmi.w	8008468 <_svfiprintf_r+0x28>
 8008610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008612:	b01d      	add	sp, #116	; 0x74
 8008614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008618:	ab03      	add	r3, sp, #12
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	462a      	mov	r2, r5
 800861e:	4b06      	ldr	r3, [pc, #24]	; (8008638 <_svfiprintf_r+0x1f8>)
 8008620:	a904      	add	r1, sp, #16
 8008622:	4638      	mov	r0, r7
 8008624:	f000 f87a 	bl	800871c <_printf_i>
 8008628:	e7eb      	b.n	8008602 <_svfiprintf_r+0x1c2>
 800862a:	bf00      	nop
 800862c:	08008ac0 	.word	0x08008ac0
 8008630:	08008aca 	.word	0x08008aca
 8008634:	00000000 	.word	0x00000000
 8008638:	08008389 	.word	0x08008389
 800863c:	08008ac6 	.word	0x08008ac6

08008640 <_printf_common>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	4616      	mov	r6, r2
 8008646:	4699      	mov	r9, r3
 8008648:	688a      	ldr	r2, [r1, #8]
 800864a:	690b      	ldr	r3, [r1, #16]
 800864c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008650:	4293      	cmp	r3, r2
 8008652:	bfb8      	it	lt
 8008654:	4613      	movlt	r3, r2
 8008656:	6033      	str	r3, [r6, #0]
 8008658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800865c:	4607      	mov	r7, r0
 800865e:	460c      	mov	r4, r1
 8008660:	b10a      	cbz	r2, 8008666 <_printf_common+0x26>
 8008662:	3301      	adds	r3, #1
 8008664:	6033      	str	r3, [r6, #0]
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	0699      	lsls	r1, r3, #26
 800866a:	bf42      	ittt	mi
 800866c:	6833      	ldrmi	r3, [r6, #0]
 800866e:	3302      	addmi	r3, #2
 8008670:	6033      	strmi	r3, [r6, #0]
 8008672:	6825      	ldr	r5, [r4, #0]
 8008674:	f015 0506 	ands.w	r5, r5, #6
 8008678:	d106      	bne.n	8008688 <_printf_common+0x48>
 800867a:	f104 0a19 	add.w	sl, r4, #25
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	6832      	ldr	r2, [r6, #0]
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	42ab      	cmp	r3, r5
 8008686:	dc26      	bgt.n	80086d6 <_printf_common+0x96>
 8008688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800868c:	1e13      	subs	r3, r2, #0
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	bf18      	it	ne
 8008692:	2301      	movne	r3, #1
 8008694:	0692      	lsls	r2, r2, #26
 8008696:	d42b      	bmi.n	80086f0 <_printf_common+0xb0>
 8008698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800869c:	4649      	mov	r1, r9
 800869e:	4638      	mov	r0, r7
 80086a0:	47c0      	blx	r8
 80086a2:	3001      	adds	r0, #1
 80086a4:	d01e      	beq.n	80086e4 <_printf_common+0xa4>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	68e5      	ldr	r5, [r4, #12]
 80086aa:	6832      	ldr	r2, [r6, #0]
 80086ac:	f003 0306 	and.w	r3, r3, #6
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	bf08      	it	eq
 80086b4:	1aad      	subeq	r5, r5, r2
 80086b6:	68a3      	ldr	r3, [r4, #8]
 80086b8:	6922      	ldr	r2, [r4, #16]
 80086ba:	bf0c      	ite	eq
 80086bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086c0:	2500      	movne	r5, #0
 80086c2:	4293      	cmp	r3, r2
 80086c4:	bfc4      	itt	gt
 80086c6:	1a9b      	subgt	r3, r3, r2
 80086c8:	18ed      	addgt	r5, r5, r3
 80086ca:	2600      	movs	r6, #0
 80086cc:	341a      	adds	r4, #26
 80086ce:	42b5      	cmp	r5, r6
 80086d0:	d11a      	bne.n	8008708 <_printf_common+0xc8>
 80086d2:	2000      	movs	r0, #0
 80086d4:	e008      	b.n	80086e8 <_printf_common+0xa8>
 80086d6:	2301      	movs	r3, #1
 80086d8:	4652      	mov	r2, sl
 80086da:	4649      	mov	r1, r9
 80086dc:	4638      	mov	r0, r7
 80086de:	47c0      	blx	r8
 80086e0:	3001      	adds	r0, #1
 80086e2:	d103      	bne.n	80086ec <_printf_common+0xac>
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ec:	3501      	adds	r5, #1
 80086ee:	e7c6      	b.n	800867e <_printf_common+0x3e>
 80086f0:	18e1      	adds	r1, r4, r3
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	2030      	movs	r0, #48	; 0x30
 80086f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086fa:	4422      	add	r2, r4
 80086fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008704:	3302      	adds	r3, #2
 8008706:	e7c7      	b.n	8008698 <_printf_common+0x58>
 8008708:	2301      	movs	r3, #1
 800870a:	4622      	mov	r2, r4
 800870c:	4649      	mov	r1, r9
 800870e:	4638      	mov	r0, r7
 8008710:	47c0      	blx	r8
 8008712:	3001      	adds	r0, #1
 8008714:	d0e6      	beq.n	80086e4 <_printf_common+0xa4>
 8008716:	3601      	adds	r6, #1
 8008718:	e7d9      	b.n	80086ce <_printf_common+0x8e>
	...

0800871c <_printf_i>:
 800871c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	7e0f      	ldrb	r7, [r1, #24]
 8008722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008724:	2f78      	cmp	r7, #120	; 0x78
 8008726:	4691      	mov	r9, r2
 8008728:	4680      	mov	r8, r0
 800872a:	460c      	mov	r4, r1
 800872c:	469a      	mov	sl, r3
 800872e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008732:	d807      	bhi.n	8008744 <_printf_i+0x28>
 8008734:	2f62      	cmp	r7, #98	; 0x62
 8008736:	d80a      	bhi.n	800874e <_printf_i+0x32>
 8008738:	2f00      	cmp	r7, #0
 800873a:	f000 80d8 	beq.w	80088ee <_printf_i+0x1d2>
 800873e:	2f58      	cmp	r7, #88	; 0x58
 8008740:	f000 80a3 	beq.w	800888a <_printf_i+0x16e>
 8008744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800874c:	e03a      	b.n	80087c4 <_printf_i+0xa8>
 800874e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008752:	2b15      	cmp	r3, #21
 8008754:	d8f6      	bhi.n	8008744 <_printf_i+0x28>
 8008756:	a101      	add	r1, pc, #4	; (adr r1, 800875c <_printf_i+0x40>)
 8008758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800875c:	080087b5 	.word	0x080087b5
 8008760:	080087c9 	.word	0x080087c9
 8008764:	08008745 	.word	0x08008745
 8008768:	08008745 	.word	0x08008745
 800876c:	08008745 	.word	0x08008745
 8008770:	08008745 	.word	0x08008745
 8008774:	080087c9 	.word	0x080087c9
 8008778:	08008745 	.word	0x08008745
 800877c:	08008745 	.word	0x08008745
 8008780:	08008745 	.word	0x08008745
 8008784:	08008745 	.word	0x08008745
 8008788:	080088d5 	.word	0x080088d5
 800878c:	080087f9 	.word	0x080087f9
 8008790:	080088b7 	.word	0x080088b7
 8008794:	08008745 	.word	0x08008745
 8008798:	08008745 	.word	0x08008745
 800879c:	080088f7 	.word	0x080088f7
 80087a0:	08008745 	.word	0x08008745
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	08008745 	.word	0x08008745
 80087ac:	08008745 	.word	0x08008745
 80087b0:	080088bf 	.word	0x080088bf
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	602a      	str	r2, [r5, #0]
 80087bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c4:	2301      	movs	r3, #1
 80087c6:	e0a3      	b.n	8008910 <_printf_i+0x1f4>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	6829      	ldr	r1, [r5, #0]
 80087cc:	0606      	lsls	r6, r0, #24
 80087ce:	f101 0304 	add.w	r3, r1, #4
 80087d2:	d50a      	bpl.n	80087ea <_printf_i+0xce>
 80087d4:	680e      	ldr	r6, [r1, #0]
 80087d6:	602b      	str	r3, [r5, #0]
 80087d8:	2e00      	cmp	r6, #0
 80087da:	da03      	bge.n	80087e4 <_printf_i+0xc8>
 80087dc:	232d      	movs	r3, #45	; 0x2d
 80087de:	4276      	negs	r6, r6
 80087e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e4:	485e      	ldr	r0, [pc, #376]	; (8008960 <_printf_i+0x244>)
 80087e6:	230a      	movs	r3, #10
 80087e8:	e019      	b.n	800881e <_printf_i+0x102>
 80087ea:	680e      	ldr	r6, [r1, #0]
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087f2:	bf18      	it	ne
 80087f4:	b236      	sxthne	r6, r6
 80087f6:	e7ef      	b.n	80087d8 <_printf_i+0xbc>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	6820      	ldr	r0, [r4, #0]
 80087fc:	1d19      	adds	r1, r3, #4
 80087fe:	6029      	str	r1, [r5, #0]
 8008800:	0601      	lsls	r1, r0, #24
 8008802:	d501      	bpl.n	8008808 <_printf_i+0xec>
 8008804:	681e      	ldr	r6, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0xf2>
 8008808:	0646      	lsls	r6, r0, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0xe8>
 800880c:	881e      	ldrh	r6, [r3, #0]
 800880e:	4854      	ldr	r0, [pc, #336]	; (8008960 <_printf_i+0x244>)
 8008810:	2f6f      	cmp	r7, #111	; 0x6f
 8008812:	bf0c      	ite	eq
 8008814:	2308      	moveq	r3, #8
 8008816:	230a      	movne	r3, #10
 8008818:	2100      	movs	r1, #0
 800881a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800881e:	6865      	ldr	r5, [r4, #4]
 8008820:	60a5      	str	r5, [r4, #8]
 8008822:	2d00      	cmp	r5, #0
 8008824:	bfa2      	ittt	ge
 8008826:	6821      	ldrge	r1, [r4, #0]
 8008828:	f021 0104 	bicge.w	r1, r1, #4
 800882c:	6021      	strge	r1, [r4, #0]
 800882e:	b90e      	cbnz	r6, 8008834 <_printf_i+0x118>
 8008830:	2d00      	cmp	r5, #0
 8008832:	d04d      	beq.n	80088d0 <_printf_i+0x1b4>
 8008834:	4615      	mov	r5, r2
 8008836:	fbb6 f1f3 	udiv	r1, r6, r3
 800883a:	fb03 6711 	mls	r7, r3, r1, r6
 800883e:	5dc7      	ldrb	r7, [r0, r7]
 8008840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008844:	4637      	mov	r7, r6
 8008846:	42bb      	cmp	r3, r7
 8008848:	460e      	mov	r6, r1
 800884a:	d9f4      	bls.n	8008836 <_printf_i+0x11a>
 800884c:	2b08      	cmp	r3, #8
 800884e:	d10b      	bne.n	8008868 <_printf_i+0x14c>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07de      	lsls	r6, r3, #31
 8008854:	d508      	bpl.n	8008868 <_printf_i+0x14c>
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	6861      	ldr	r1, [r4, #4]
 800885a:	4299      	cmp	r1, r3
 800885c:	bfde      	ittt	le
 800885e:	2330      	movle	r3, #48	; 0x30
 8008860:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008864:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008868:	1b52      	subs	r2, r2, r5
 800886a:	6122      	str	r2, [r4, #16]
 800886c:	f8cd a000 	str.w	sl, [sp]
 8008870:	464b      	mov	r3, r9
 8008872:	aa03      	add	r2, sp, #12
 8008874:	4621      	mov	r1, r4
 8008876:	4640      	mov	r0, r8
 8008878:	f7ff fee2 	bl	8008640 <_printf_common>
 800887c:	3001      	adds	r0, #1
 800887e:	d14c      	bne.n	800891a <_printf_i+0x1fe>
 8008880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008884:	b004      	add	sp, #16
 8008886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888a:	4835      	ldr	r0, [pc, #212]	; (8008960 <_printf_i+0x244>)
 800888c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008890:	6829      	ldr	r1, [r5, #0]
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	f851 6b04 	ldr.w	r6, [r1], #4
 8008898:	6029      	str	r1, [r5, #0]
 800889a:	061d      	lsls	r5, r3, #24
 800889c:	d514      	bpl.n	80088c8 <_printf_i+0x1ac>
 800889e:	07df      	lsls	r7, r3, #31
 80088a0:	bf44      	itt	mi
 80088a2:	f043 0320 	orrmi.w	r3, r3, #32
 80088a6:	6023      	strmi	r3, [r4, #0]
 80088a8:	b91e      	cbnz	r6, 80088b2 <_printf_i+0x196>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	f023 0320 	bic.w	r3, r3, #32
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	2310      	movs	r3, #16
 80088b4:	e7b0      	b.n	8008818 <_printf_i+0xfc>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	f043 0320 	orr.w	r3, r3, #32
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	2378      	movs	r3, #120	; 0x78
 80088c0:	4828      	ldr	r0, [pc, #160]	; (8008964 <_printf_i+0x248>)
 80088c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088c6:	e7e3      	b.n	8008890 <_printf_i+0x174>
 80088c8:	0659      	lsls	r1, r3, #25
 80088ca:	bf48      	it	mi
 80088cc:	b2b6      	uxthmi	r6, r6
 80088ce:	e7e6      	b.n	800889e <_printf_i+0x182>
 80088d0:	4615      	mov	r5, r2
 80088d2:	e7bb      	b.n	800884c <_printf_i+0x130>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	6826      	ldr	r6, [r4, #0]
 80088d8:	6961      	ldr	r1, [r4, #20]
 80088da:	1d18      	adds	r0, r3, #4
 80088dc:	6028      	str	r0, [r5, #0]
 80088de:	0635      	lsls	r5, r6, #24
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	d501      	bpl.n	80088e8 <_printf_i+0x1cc>
 80088e4:	6019      	str	r1, [r3, #0]
 80088e6:	e002      	b.n	80088ee <_printf_i+0x1d2>
 80088e8:	0670      	lsls	r0, r6, #25
 80088ea:	d5fb      	bpl.n	80088e4 <_printf_i+0x1c8>
 80088ec:	8019      	strh	r1, [r3, #0]
 80088ee:	2300      	movs	r3, #0
 80088f0:	6123      	str	r3, [r4, #16]
 80088f2:	4615      	mov	r5, r2
 80088f4:	e7ba      	b.n	800886c <_printf_i+0x150>
 80088f6:	682b      	ldr	r3, [r5, #0]
 80088f8:	1d1a      	adds	r2, r3, #4
 80088fa:	602a      	str	r2, [r5, #0]
 80088fc:	681d      	ldr	r5, [r3, #0]
 80088fe:	6862      	ldr	r2, [r4, #4]
 8008900:	2100      	movs	r1, #0
 8008902:	4628      	mov	r0, r5
 8008904:	f7f7 fc6c 	bl	80001e0 <memchr>
 8008908:	b108      	cbz	r0, 800890e <_printf_i+0x1f2>
 800890a:	1b40      	subs	r0, r0, r5
 800890c:	6060      	str	r0, [r4, #4]
 800890e:	6863      	ldr	r3, [r4, #4]
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	2300      	movs	r3, #0
 8008914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008918:	e7a8      	b.n	800886c <_printf_i+0x150>
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	462a      	mov	r2, r5
 800891e:	4649      	mov	r1, r9
 8008920:	4640      	mov	r0, r8
 8008922:	47d0      	blx	sl
 8008924:	3001      	adds	r0, #1
 8008926:	d0ab      	beq.n	8008880 <_printf_i+0x164>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	079b      	lsls	r3, r3, #30
 800892c:	d413      	bmi.n	8008956 <_printf_i+0x23a>
 800892e:	68e0      	ldr	r0, [r4, #12]
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	4298      	cmp	r0, r3
 8008934:	bfb8      	it	lt
 8008936:	4618      	movlt	r0, r3
 8008938:	e7a4      	b.n	8008884 <_printf_i+0x168>
 800893a:	2301      	movs	r3, #1
 800893c:	4632      	mov	r2, r6
 800893e:	4649      	mov	r1, r9
 8008940:	4640      	mov	r0, r8
 8008942:	47d0      	blx	sl
 8008944:	3001      	adds	r0, #1
 8008946:	d09b      	beq.n	8008880 <_printf_i+0x164>
 8008948:	3501      	adds	r5, #1
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	9903      	ldr	r1, [sp, #12]
 800894e:	1a5b      	subs	r3, r3, r1
 8008950:	42ab      	cmp	r3, r5
 8008952:	dcf2      	bgt.n	800893a <_printf_i+0x21e>
 8008954:	e7eb      	b.n	800892e <_printf_i+0x212>
 8008956:	2500      	movs	r5, #0
 8008958:	f104 0619 	add.w	r6, r4, #25
 800895c:	e7f5      	b.n	800894a <_printf_i+0x22e>
 800895e:	bf00      	nop
 8008960:	08008ad1 	.word	0x08008ad1
 8008964:	08008ae2 	.word	0x08008ae2

08008968 <__retarget_lock_acquire_recursive>:
 8008968:	4770      	bx	lr

0800896a <__retarget_lock_release_recursive>:
 800896a:	4770      	bx	lr

0800896c <memcpy>:
 800896c:	440a      	add	r2, r1
 800896e:	4291      	cmp	r1, r2
 8008970:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008974:	d100      	bne.n	8008978 <memcpy+0xc>
 8008976:	4770      	bx	lr
 8008978:	b510      	push	{r4, lr}
 800897a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800897e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008982:	4291      	cmp	r1, r2
 8008984:	d1f9      	bne.n	800897a <memcpy+0xe>
 8008986:	bd10      	pop	{r4, pc}

08008988 <memmove>:
 8008988:	4288      	cmp	r0, r1
 800898a:	b510      	push	{r4, lr}
 800898c:	eb01 0402 	add.w	r4, r1, r2
 8008990:	d902      	bls.n	8008998 <memmove+0x10>
 8008992:	4284      	cmp	r4, r0
 8008994:	4623      	mov	r3, r4
 8008996:	d807      	bhi.n	80089a8 <memmove+0x20>
 8008998:	1e43      	subs	r3, r0, #1
 800899a:	42a1      	cmp	r1, r4
 800899c:	d008      	beq.n	80089b0 <memmove+0x28>
 800899e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089a6:	e7f8      	b.n	800899a <memmove+0x12>
 80089a8:	4402      	add	r2, r0
 80089aa:	4601      	mov	r1, r0
 80089ac:	428a      	cmp	r2, r1
 80089ae:	d100      	bne.n	80089b2 <memmove+0x2a>
 80089b0:	bd10      	pop	{r4, pc}
 80089b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ba:	e7f7      	b.n	80089ac <memmove+0x24>

080089bc <_realloc_r>:
 80089bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c0:	4680      	mov	r8, r0
 80089c2:	4614      	mov	r4, r2
 80089c4:	460e      	mov	r6, r1
 80089c6:	b921      	cbnz	r1, 80089d2 <_realloc_r+0x16>
 80089c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089cc:	4611      	mov	r1, r2
 80089ce:	f7ff bc2b 	b.w	8008228 <_malloc_r>
 80089d2:	b92a      	cbnz	r2, 80089e0 <_realloc_r+0x24>
 80089d4:	f7ff fbbc 	bl	8008150 <_free_r>
 80089d8:	4625      	mov	r5, r4
 80089da:	4628      	mov	r0, r5
 80089dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e0:	f000 f81b 	bl	8008a1a <_malloc_usable_size_r>
 80089e4:	4284      	cmp	r4, r0
 80089e6:	4607      	mov	r7, r0
 80089e8:	d802      	bhi.n	80089f0 <_realloc_r+0x34>
 80089ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089ee:	d812      	bhi.n	8008a16 <_realloc_r+0x5a>
 80089f0:	4621      	mov	r1, r4
 80089f2:	4640      	mov	r0, r8
 80089f4:	f7ff fc18 	bl	8008228 <_malloc_r>
 80089f8:	4605      	mov	r5, r0
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d0ed      	beq.n	80089da <_realloc_r+0x1e>
 80089fe:	42bc      	cmp	r4, r7
 8008a00:	4622      	mov	r2, r4
 8008a02:	4631      	mov	r1, r6
 8008a04:	bf28      	it	cs
 8008a06:	463a      	movcs	r2, r7
 8008a08:	f7ff ffb0 	bl	800896c <memcpy>
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4640      	mov	r0, r8
 8008a10:	f7ff fb9e 	bl	8008150 <_free_r>
 8008a14:	e7e1      	b.n	80089da <_realloc_r+0x1e>
 8008a16:	4635      	mov	r5, r6
 8008a18:	e7df      	b.n	80089da <_realloc_r+0x1e>

08008a1a <_malloc_usable_size_r>:
 8008a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a1e:	1f18      	subs	r0, r3, #4
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bfbc      	itt	lt
 8008a24:	580b      	ldrlt	r3, [r1, r0]
 8008a26:	18c0      	addlt	r0, r0, r3
 8008a28:	4770      	bx	lr
	...

08008a2c <_init>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	bf00      	nop
 8008a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a32:	bc08      	pop	{r3}
 8008a34:	469e      	mov	lr, r3
 8008a36:	4770      	bx	lr

08008a38 <_fini>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr
