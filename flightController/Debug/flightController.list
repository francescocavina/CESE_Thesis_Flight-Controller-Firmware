
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001204c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  080121f0  080121f0  000221f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012810  08012810  000302e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012810  08012810  00022810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012818  08012818  000302e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012818  08012818  00022818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801281c  0801281c  0002281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08012820  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c8  200002e8  08012b08  000302e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023b0  08012b08  000323b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026d9e  00000000  00000000  0003035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060c1  00000000  00000000  000570f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002128  00000000  00000000  0005d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001989  00000000  00000000  0005f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ee3  00000000  00000000  00060c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cd98  00000000  00000000  00081b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ada81  00000000  00000000  000ae8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009ac0  00000000  00000000  0015c370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00165e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080121d4 	.word	0x080121d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	080121d4 	.word	0x080121d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 2UL), &FlightController_StartUp_Handle);
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	4927      	ldr	r1, [pc, #156]	; (8001048 <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000faa:	4828      	ldr	r0, [pc, #160]	; (800104c <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000fac:	f00b fe99 	bl	800cce2 <xTaskCreate>
 8000fb0:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d00a      	beq.n	8000fce <FreeRTOS_CreateStartUpTasks+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbc:	f383 8811 	msr	BASEPRI, r3
 8000fc0:	f3bf 8f6f 	isb	sy
 8000fc4:	f3bf 8f4f 	dsb	sy
 8000fc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fca:	bf00      	nop
 8000fcc:	e7fe      	b.n	8000fcc <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d104      	bne.n	8000fe0 <FreeRTOS_CreateStartUpTasks+0x4c>
        vTaskDelete(FlightController_StartUp_Handle);
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00b ffb8 	bl	800cf50 <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_OnOffButton_Handle);
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fee:	4919      	ldr	r1, [pc, #100]	; (8001054 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000ff2:	f00b fe76 	bl	800cce2 <xTaskCreate>
 8000ff6:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d00a      	beq.n	8001014 <FreeRTOS_CreateStartUpTasks+0x80>
	__asm volatile
 8000ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	607b      	str	r3, [r7, #4]
}
 8001010:	bf00      	nop
 8001012:	e7fe      	b.n	8001012 <FreeRTOS_CreateStartUpTasks+0x7e>

    if (FlightController_OnOffButton_Handle == NULL) {
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <FreeRTOS_CreateStartUpTasks+0x92>
        vTaskDelete(FlightController_OnOffButton_Handle);
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f00b ff95 	bl	800cf50 <vTaskDelete>
    }

    /* Timer: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <FreeRTOS_CreateStartUpTasks+0xc8>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	2201      	movs	r2, #1
 800102e:	2164      	movs	r1, #100	; 0x64
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8001032:	f00c fe75 	bl	800dd20 <xTimerCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <FreeRTOS_CreateStartUpTasks+0xd0>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000304 	.word	0x20000304
 8001048:	080121f0 	.word	0x080121f0
 800104c:	080012c5 	.word	0x080012c5
 8001050:	2000031c 	.word	0x2000031c
 8001054:	0801220c 	.word	0x0801220c
 8001058:	08001579 	.word	0x08001579
 800105c:	08001715 	.word	0x08001715
 8001060:	0801222c 	.word	0x0801222c
 8001064:	20000328 	.word	0x20000328

08001068 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_HeartbeatLight_Handle);
 800106e:	4b7c      	ldr	r3, [pc, #496]	; (8001260 <FreeRTOS_CreateTasks+0x1f8>)
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2303      	movs	r3, #3
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	4979      	ldr	r1, [pc, #484]	; (8001264 <FreeRTOS_CreateTasks+0x1fc>)
 800107e:	487a      	ldr	r0, [pc, #488]	; (8001268 <FreeRTOS_CreateTasks+0x200>)
 8001080:	f00b fe2f 	bl	800cce2 <xTaskCreate>
 8001084:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00a      	beq.n	80010a2 <FreeRTOS_CreateTasks+0x3a>
	__asm volatile
 800108c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001090:	f383 8811 	msr	BASEPRI, r3
 8001094:	f3bf 8f6f 	isb	sy
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	61bb      	str	r3, [r7, #24]
}
 800109e:	bf00      	nop
 80010a0:	e7fe      	b.n	80010a0 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 80010a2:	4b6f      	ldr	r3, [pc, #444]	; (8001260 <FreeRTOS_CreateTasks+0x1f8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d104      	bne.n	80010b4 <FreeRTOS_CreateTasks+0x4c>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 80010aa:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <FreeRTOS_CreateTasks+0x1f8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00b ff4e 	bl	800cf50 <vTaskDelete>
    }

    /* Task 2: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_FlightLights_Handle);
 80010b4:	4b6d      	ldr	r3, [pc, #436]	; (800126c <FreeRTOS_CreateTasks+0x204>)
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c2:	496b      	ldr	r1, [pc, #428]	; (8001270 <FreeRTOS_CreateTasks+0x208>)
 80010c4:	486b      	ldr	r0, [pc, #428]	; (8001274 <FreeRTOS_CreateTasks+0x20c>)
 80010c6:	f00b fe0c 	bl	800cce2 <xTaskCreate>
 80010ca:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d00a      	beq.n	80010e8 <FreeRTOS_CreateTasks+0x80>
	__asm volatile
 80010d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	617b      	str	r3, [r7, #20]
}
 80010e4:	bf00      	nop
 80010e6:	e7fe      	b.n	80010e6 <FreeRTOS_CreateTasks+0x7e>

    if (FlightController_FlightLights_Handle == NULL) {
 80010e8:	4b60      	ldr	r3, [pc, #384]	; (800126c <FreeRTOS_CreateTasks+0x204>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <FreeRTOS_CreateTasks+0x92>
        vTaskDelete(FlightController_FlightLights_Handle);
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <FreeRTOS_CreateTasks+0x204>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00b ff2b 	bl	800cf50 <vTaskDelete>
    }

    /* Task 3: FlightController_Read_FSA8S */
    ret = xTaskCreate(FlightController_Read_FSA8S, "FlightController_Read_FSA8S", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_FSA8S_Handle);
 80010fa:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <FreeRTOS_CreateTasks+0x210>)
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2303      	movs	r3, #3
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001108:	495c      	ldr	r1, [pc, #368]	; (800127c <FreeRTOS_CreateTasks+0x214>)
 800110a:	485d      	ldr	r0, [pc, #372]	; (8001280 <FreeRTOS_CreateTasks+0x218>)
 800110c:	f00b fde9 	bl	800cce2 <xTaskCreate>
 8001110:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d00a      	beq.n	800112e <FreeRTOS_CreateTasks+0xc6>
	__asm volatile
 8001118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	613b      	str	r3, [r7, #16]
}
 800112a:	bf00      	nop
 800112c:	e7fe      	b.n	800112c <FreeRTOS_CreateTasks+0xc4>

    if (FlightController_Read_FSA8S_Handle == NULL) {
 800112e:	4b52      	ldr	r3, [pc, #328]	; (8001278 <FreeRTOS_CreateTasks+0x210>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <FreeRTOS_CreateTasks+0xd8>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 8001136:	4b50      	ldr	r3, [pc, #320]	; (8001278 <FreeRTOS_CreateTasks+0x210>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f00b ff08 	bl	800cf50 <vTaskDelete>
    }

    /* Task 4: FlightController_Read_GY87 */
    ret = xTaskCreate(FlightController_Read_GY87, "FlightController_Read_GY87", (6 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_GY87_Handle);
 8001140:	4b50      	ldr	r3, [pc, #320]	; (8001284 <FreeRTOS_CreateTasks+0x21c>)
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	2303      	movs	r3, #3
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800114e:	494e      	ldr	r1, [pc, #312]	; (8001288 <FreeRTOS_CreateTasks+0x220>)
 8001150:	484e      	ldr	r0, [pc, #312]	; (800128c <FreeRTOS_CreateTasks+0x224>)
 8001152:	f00b fdc6 	bl	800cce2 <xTaskCreate>
 8001156:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d00a      	beq.n	8001174 <FreeRTOS_CreateTasks+0x10c>
	__asm volatile
 800115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001162:	f383 8811 	msr	BASEPRI, r3
 8001166:	f3bf 8f6f 	isb	sy
 800116a:	f3bf 8f4f 	dsb	sy
 800116e:	60fb      	str	r3, [r7, #12]
}
 8001170:	bf00      	nop
 8001172:	e7fe      	b.n	8001172 <FreeRTOS_CreateTasks+0x10a>

    if (FlightController_Read_GY87_Handle == NULL) {
 8001174:	4b43      	ldr	r3, [pc, #268]	; (8001284 <FreeRTOS_CreateTasks+0x21c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <FreeRTOS_CreateTasks+0x11e>
        vTaskDelete(FlightController_Read_GY87_Handle);
 800117c:	4b41      	ldr	r3, [pc, #260]	; (8001284 <FreeRTOS_CreateTasks+0x21c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00b fee5 	bl	800cf50 <vTaskDelete>
    }

    /* Task 5: FlightController_Write_ESCs */
    ret = xTaskCreate(FlightController_Write_ESCs, "FlightController_Write_ESCs", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Write_ESCs_Handle);
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <FreeRTOS_CreateTasks+0x228>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2303      	movs	r3, #3
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001194:	493f      	ldr	r1, [pc, #252]	; (8001294 <FreeRTOS_CreateTasks+0x22c>)
 8001196:	4840      	ldr	r0, [pc, #256]	; (8001298 <FreeRTOS_CreateTasks+0x230>)
 8001198:	f00b fda3 	bl	800cce2 <xTaskCreate>
 800119c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d00a      	beq.n	80011ba <FreeRTOS_CreateTasks+0x152>
	__asm volatile
 80011a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	60bb      	str	r3, [r7, #8]
}
 80011b6:	bf00      	nop
 80011b8:	e7fe      	b.n	80011b8 <FreeRTOS_CreateTasks+0x150>

    if (FlightController_Write_ESCs_Handle == NULL) {
 80011ba:	4b35      	ldr	r3, [pc, #212]	; (8001290 <FreeRTOS_CreateTasks+0x228>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <FreeRTOS_CreateTasks+0x164>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <FreeRTOS_CreateTasks+0x228>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00b fec2 	bl	800cf50 <vTaskDelete>
    }

    /* Task 6: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_BatteryLevel_Handle);
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <FreeRTOS_CreateTasks+0x234>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	4931      	ldr	r1, [pc, #196]	; (80012a0 <FreeRTOS_CreateTasks+0x238>)
 80011dc:	4831      	ldr	r0, [pc, #196]	; (80012a4 <FreeRTOS_CreateTasks+0x23c>)
 80011de:	f00b fd80 	bl	800cce2 <xTaskCreate>
 80011e2:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d00a      	beq.n	8001200 <FreeRTOS_CreateTasks+0x198>
	__asm volatile
 80011ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ee:	f383 8811 	msr	BASEPRI, r3
 80011f2:	f3bf 8f6f 	isb	sy
 80011f6:	f3bf 8f4f 	dsb	sy
 80011fa:	607b      	str	r3, [r7, #4]
}
 80011fc:	bf00      	nop
 80011fe:	e7fe      	b.n	80011fe <FreeRTOS_CreateTasks+0x196>

    if (FlightController_BatteryLevel_Handle == NULL) {
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <FreeRTOS_CreateTasks+0x234>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <FreeRTOS_CreateTasks+0x1aa>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <FreeRTOS_CreateTasks+0x234>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f00b fe9f 	bl	800cf50 <vTaskDelete>
    }

    /* Task 7: FlightController_ControlSystem */
    ret = xTaskCreate(FlightController_ControlSystem, "FlightController_ControlSystem", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_ControlSystem_Handle);
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2303      	movs	r3, #3
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	4922      	ldr	r1, [pc, #136]	; (80012ac <FreeRTOS_CreateTasks+0x244>)
 8001222:	4823      	ldr	r0, [pc, #140]	; (80012b0 <FreeRTOS_CreateTasks+0x248>)
 8001224:	f00b fd5d 	bl	800cce2 <xTaskCreate>
 8001228:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d00a      	beq.n	8001246 <FreeRTOS_CreateTasks+0x1de>
	__asm volatile
 8001230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001234:	f383 8811 	msr	BASEPRI, r3
 8001238:	f3bf 8f6f 	isb	sy
 800123c:	f3bf 8f4f 	dsb	sy
 8001240:	603b      	str	r3, [r7, #0]
}
 8001242:	bf00      	nop
 8001244:	e7fe      	b.n	8001244 <FreeRTOS_CreateTasks+0x1dc>

    if (FlightController_ControlSystem_Handle == NULL) {
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d104      	bne.n	8001258 <FreeRTOS_CreateTasks+0x1f0>
        vTaskDelete(FlightController_ControlSystem_Handle);
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f00b fe7c 	bl	800cf50 <vTaskDelete>
    }
}
 8001258:	bf00      	nop
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000308 	.word	0x20000308
 8001264:	0801223c 	.word	0x0801223c
 8001268:	08001349 	.word	0x08001349
 800126c:	20000314 	.word	0x20000314
 8001270:	0801225c 	.word	0x0801225c
 8001274:	08001385 	.word	0x08001385
 8001278:	2000030c 	.word	0x2000030c
 800127c:	0801227c 	.word	0x0801227c
 8001280:	08001399 	.word	0x08001399
 8001284:	20000310 	.word	0x20000310
 8001288:	08012298 	.word	0x08012298
 800128c:	080013f9 	.word	0x080013f9
 8001290:	20000318 	.word	0x20000318
 8001294:	080122b4 	.word	0x080122b4
 8001298:	080014d5 	.word	0x080014d5
 800129c:	20000320 	.word	0x20000320
 80012a0:	080122d0 	.word	0x080122d0
 80012a4:	080015d9 	.word	0x080015d9
 80012a8:	20000324 	.word	0x20000324
 80012ac:	080122f0 	.word	0x080122f0
 80012b0:	080016ad 	.word	0x080016ad

080012b4 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80012cc:	2314      	movs	r3, #20
 80012ce:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED on */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d6:	4813      	ldr	r0, [pc, #76]	; (8001324 <FlightController_StartUp+0x60>)
 80012d8:	f003 fa26 	bl	8004728 <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_running) {
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <FlightController_StartUp+0x64>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01a      	beq.n	800131a <FlightController_StartUp+0x56>

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 80012e4:	f7ff fec0 	bl	8001068 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 80012e8:	f7ff ffe4 	bl	80012b4 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <FlightController_StartUp+0x68>)
 80012ee:	f001 fadb 	bl	80028a8 <FSA8S_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <FlightController_StartUp+0x6c>)
 80012f6:	6013      	str	r3, [r2, #0]
            hgy87 = GY87_Init(&hi2c1);
 80012f8:	480e      	ldr	r0, [pc, #56]	; (8001334 <FlightController_StartUp+0x70>)
 80012fa:	f001 fe9d 	bl	8003038 <GY87_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <FlightController_StartUp+0x74>)
 8001302:	6013      	str	r3, [r2, #0]
            hesc = ESC_Init(&htim3);
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <FlightController_StartUp+0x78>)
 8001306:	f001 f94b 	bl	80025a0 <ESC_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <FlightController_StartUp+0x7c>)
 800130e:	6013      	str	r3, [r2, #0]

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <FlightController_StartUp+0x80>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f00b fe1b 	bl	800cf50 <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f00b fea8 	bl	800d070 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001320:	e7d6      	b.n	80012d0 <FlightController_StartUp+0xc>
 8001322:	bf00      	nop
 8001324:	40020800 	.word	0x40020800
 8001328:	2000032d 	.word	0x2000032d
 800132c:	20000b1c 	.word	0x20000b1c
 8001330:	20000330 	.word	0x20000330
 8001334:	20000a80 	.word	0x20000a80
 8001338:	20000334 	.word	0x20000334
 800133c:	20000ad4 	.word	0x20000ad4
 8001340:	20000338 	.word	0x20000338
 8001344:	20000304 	.word	0x20000304

08001348 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 8001354:	23fa      	movs	r3, #250	; 0xfa
 8001356:	60bb      	str	r3, [r7, #8]

    while (1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	461a      	mov	r2, r3
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <FlightController_HeartbeatLight+0x38>)
 8001362:	f003 f9e1 	bl	8004728 <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <FlightController_HeartbeatLight+0x2a>

            ledState = GPIO_PIN_SET;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e001      	b.n	8001376 <FlightController_HeartbeatLight+0x2e>
        } else {

            ledState = GPIO_PIN_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001376:	68b8      	ldr	r0, [r7, #8]
 8001378:	f00b fe7a 	bl	800d070 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 800137c:	e7ec      	b.n	8001358 <FlightController_HeartbeatLight+0x10>
 800137e:	bf00      	nop
 8001380:	40020800 	.word	0x40020800

08001384 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800138c:	2314      	movs	r3, #20
 800138e:	60fb      	str	r3, [r7, #12]
        //    	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
        //    	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
        //    	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f00b fe6d 	bl	800d070 <vTaskDelay>
 8001396:	e7fb      	b.n	8001390 <FlightController_FlightLights+0xc>

08001398 <FlightController_Read_FSA8S>:
    }
}

void FlightController_Read_FSA8S(void * ptr) {
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

    FSA8S_CHANNEL_t channels[FSA8S_CHANNELS] = {CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7, CHANNEL_8, CHANNEL_9, CHANNEL_10};
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <FlightController_Read_FSA8S+0x54>)
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013a8:	c303      	stmia	r3!, {r0, r1}
 80013aa:	801a      	strh	r2, [r3, #0]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FSA8S
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80013ac:	2314      	movs	r3, #20
 80013ae:	61bb      	str	r3, [r7, #24]
#endif

    while (1) {

        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	77fb      	strb	r3, [r7, #31]
 80013b4:	e013      	b.n	80013de <FlightController_Read_FSA8S+0x46>
            /* Read channels */
            FSA8S_channelValues[i] = FSA8S_ReadChannel(rc_controller, channels[i]);
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <FlightController_Read_FSA8S+0x58>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	3320      	adds	r3, #32
 80013be:	443b      	add	r3, r7
 80013c0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80013c4:	7ffc      	ldrb	r4, [r7, #31]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f001 fac7 	bl	800295c <FSA8S_ReadChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <FlightController_Read_FSA8S+0x5c>)
 80013d4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 80013d8:	7ffb      	ldrb	r3, [r7, #31]
 80013da:	3301      	adds	r3, #1
 80013dc:	77fb      	strb	r3, [r7, #31]
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d9e8      	bls.n	80013b6 <FlightController_Read_FSA8S+0x1e>
            LOG(loggingStr, LOG_INFORMATION);
#endif
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80013e4:	69b8      	ldr	r0, [r7, #24]
 80013e6:	f00b fe43 	bl	800d070 <vTaskDelay>
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 80013ea:	e7e1      	b.n	80013b0 <FlightController_Read_FSA8S+0x18>
 80013ec:	08012310 	.word	0x08012310
 80013f0:	20000330 	.word	0x20000330
 80013f4:	2000033c 	.word	0x2000033c

080013f8 <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void * ptr) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#if defined MAIN_APP_USE_LOGGING_GY87_GYROSCOPE || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER || defined MAIN_APP_USE_LOGGING_GY87_TEMPERATURE || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER_HEADING || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_PRESSURE || MAIN_APP_USE_LOGGING_GY87_BAROMETER_ALTITUDE
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001400:	2314      	movs	r3, #20
 8001402:	60fb      	str	r3, [r7, #12]
#endif

    /* Allocate dynamic memory for the MPU6050 gyroscope values */
    GY87_gyroscopeValues = pvPortMalloc(sizeof(GY87_gyroscopeValues));
 8001404:	2004      	movs	r0, #4
 8001406:	f00d fa7f 	bl	800e908 <pvPortMalloc>
 800140a:	4603      	mov	r3, r0
 800140c:	4a2b      	ldr	r2, [pc, #172]	; (80014bc <FlightController_Read_GY87+0xc4>)
 800140e:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_gyroscopeValues) {
 8001410:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <FlightController_Read_GY87+0xc4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d104      	bne.n	8001422 <FlightController_Read_GY87+0x2a>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_gyroscopeValues);
 8001418:	4b28      	ldr	r3, [pc, #160]	; (80014bc <FlightController_Read_GY87+0xc4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f00d fa85 	bl	800e92c <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 accelerometer values */
    GY87_accelerometerValues = pvPortMalloc(sizeof(GY87_accelerometerValues));
 8001422:	2004      	movs	r0, #4
 8001424:	f00d fa70 	bl	800e908 <pvPortMalloc>
 8001428:	4603      	mov	r3, r0
 800142a:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <FlightController_Read_GY87+0xc8>)
 800142c:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_accelerometerValues) {
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <FlightController_Read_GY87+0xc8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d104      	bne.n	8001440 <FlightController_Read_GY87+0x48>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_accelerometerValues);
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <FlightController_Read_GY87+0xc8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f00d fa76 	bl	800e92c <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 magnetometer values */
    GY87_magnetometerValues = pvPortMalloc(sizeof(GY87_magnetometerValues));
 8001440:	2004      	movs	r0, #4
 8001442:	f00d fa61 	bl	800e908 <pvPortMalloc>
 8001446:	4603      	mov	r3, r0
 8001448:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <FlightController_Read_GY87+0xcc>)
 800144a:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_magnetometerValues) {
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <FlightController_Read_GY87+0xcc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d104      	bne.n	800145e <FlightController_Read_GY87+0x66>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_magnetometerValues);
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <FlightController_Read_GY87+0xcc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f00d fa67 	bl	800e92c <vPortFree>
    }

    while (1) {

        /* Read GY87 gyroscope values */
    	GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <FlightController_Read_GY87+0xd0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a16      	ldr	r2, [pc, #88]	; (80014bc <FlightController_Read_GY87+0xc4>)
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fe1d 	bl	80030a8 <GY87_ReadGyroscope>
        sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope Z: %d\r\n\n", GY87_gyroscopeValues->gyroscopeZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 accelerometer values */
        GY87_ReadAccelerometer(hgy87, GY87_accelerometerValues);
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <FlightController_Read_GY87+0xd0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <FlightController_Read_GY87+0xc8>)
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f001 fe7f 	bl	800317c <GY87_ReadAccelerometer>
        sprintf((char *)loggingStr, (const char *)"GY87 Accelerometer Z: %d\r\n\n", GY87_accelerometerValues->accelerometerZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 temperature value */
        GY87_temperature = GY87_ReadTemperatureSensor(hgy87);
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <FlightController_Read_GY87+0xd0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fee5 	bl	8003252 <GY87_ReadTemperatureSensor>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <FlightController_Read_GY87+0xd4>)
 800148e:	801a      	strh	r2, [r3, #0]
        sprintf((char *)loggingStr, (const char *)"GY87 Temperature: %d°C\r\n\n", GY87_temperature);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 magnetometer values */
        GY87_ReadMagnetometer(hgy87, GY87_magnetometerValues);
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <FlightController_Read_GY87+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <FlightController_Read_GY87+0xcc>)
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f001 ff07 	bl	80032ae <GY87_ReadMagnetometer>
        sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer Z: %d\r\n\n", GY87_magnetometerValues->magnetometerZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 magnetometer heading */
        GY87_magnetometerHeadingValue = GY87_ReadMagnetometerHeading(hgy87);
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <FlightController_Read_GY87+0xd0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 ff6f 	bl	8003388 <GY87_ReadMagnetometerHeading>
 80014aa:	eef0 7a40 	vmov.f32	s15, s0
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <FlightController_Read_GY87+0xd8>)
 80014b0:	edc3 7a00 	vstr	s15, [r3]
        sprintf((char *)loggingStr, (const char *)"GY87 Barometer Altitude: %.2fDEFINE\r\n", GY87_barometerAltitudeValue);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f00b fddb 	bl	800d070 <vTaskDelay>
    	GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 80014ba:	e7d0      	b.n	800145e <FlightController_Read_GY87+0x66>
 80014bc:	20000354 	.word	0x20000354
 80014c0:	20000358 	.word	0x20000358
 80014c4:	2000035c 	.word	0x2000035c
 80014c8:	20000334 	.word	0x20000334
 80014cc:	20000350 	.word	0x20000350
 80014d0:	20000360 	.word	0x20000360

080014d4 <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void * ptr) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_ESC
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80014dc:	2314      	movs	r3, #20
 80014de:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

    	ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <FlightController_Write_ESCs+0x9c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <FlightController_Write_ESCs+0x9c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	791b      	ldrb	r3, [r3, #4]
 80014ea:	4922      	ldr	r1, [pc, #136]	; (8001574 <FlightController_Write_ESCs+0xa0>)
 80014ec:	8809      	ldrh	r1, [r1, #0]
 80014ee:	ee07 1a90 	vmov	s15, r1
 80014f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f6:	eeb0 0a67 	vmov.f32	s0, s15
 80014fa:	4619      	mov	r1, r3
 80014fc:	4610      	mov	r0, r2
 80014fe:	f001 f893 	bl	8002628 <ESC_SetSpeed>
    	ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[1]);
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <FlightController_Write_ESCs+0x9c>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <FlightController_Write_ESCs+0x9c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	795b      	ldrb	r3, [r3, #5]
 800150c:	4919      	ldr	r1, [pc, #100]	; (8001574 <FlightController_Write_ESCs+0xa0>)
 800150e:	8849      	ldrh	r1, [r1, #2]
 8001510:	ee07 1a90 	vmov	s15, r1
 8001514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f001 f882 	bl	8002628 <ESC_SetSpeed>
    	ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[2]);
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <FlightController_Write_ESCs+0x9c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <FlightController_Write_ESCs+0x9c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	799b      	ldrb	r3, [r3, #6]
 800152e:	4911      	ldr	r1, [pc, #68]	; (8001574 <FlightController_Write_ESCs+0xa0>)
 8001530:	8889      	ldrh	r1, [r1, #4]
 8001532:	ee07 1a90 	vmov	s15, r1
 8001536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	4619      	mov	r1, r3
 8001540:	4610      	mov	r0, r2
 8001542:	f001 f871 	bl	8002628 <ESC_SetSpeed>
    	ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[3]);
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <FlightController_Write_ESCs+0x9c>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <FlightController_Write_ESCs+0x9c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	79db      	ldrb	r3, [r3, #7]
 8001550:	4908      	ldr	r1, [pc, #32]	; (8001574 <FlightController_Write_ESCs+0xa0>)
 8001552:	88c9      	ldrh	r1, [r1, #6]
 8001554:	ee07 1a90 	vmov	s15, r1
 8001558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	4619      	mov	r1, r3
 8001562:	4610      	mov	r0, r2
 8001564:	f001 f860 	bl	8002628 <ESC_SetSpeed>
        sprintf((char *)loggingStr, (const char *)"PWM Channel 4 Speed: %d\r\n\n", ESC_speeds[3]);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f00b fd81 	bl	800d070 <vTaskDelay>
    	ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 800156e:	e7b7      	b.n	80014e0 <FlightController_Write_ESCs+0xc>
 8001570:	20000338 	.word	0x20000338
 8001574:	20000364 	.word	0x20000364

08001578 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b087      	sub	sp, #28
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001580:	2314      	movs	r3, #20
 8001582:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001584:	2120      	movs	r1, #32
 8001586:	4810      	ldr	r0, [pc, #64]	; (80015c8 <FlightController_OnOffButton+0x50>)
 8001588:	f003 f8b6 	bl	80046f8 <HAL_GPIO_ReadPin>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d115      	bne.n	80015be <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <FlightController_OnOffButton+0x54>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f083 0301 	eor.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <FlightController_OnOffButton+0x58>)
 80015a2:	681c      	ldr	r4, [r3, #0]
 80015a4:	f00b ff3a 	bl	800d41c <xTaskGetTickCount>
 80015a8:	4602      	mov	r2, r0
 80015aa:	2300      	movs	r3, #0
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	2101      	movs	r1, #1
 80015b2:	4620      	mov	r0, r4
 80015b4:	f00c fc10 	bl	800ddd8 <xTimerGenericCommand>
                Timer1_running = true;
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <FlightController_OnOffButton+0x54>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f00b fd56 	bl	800d070 <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80015c4:	e7de      	b.n	8001584 <FlightController_OnOffButton+0xc>
 80015c6:	bf00      	nop
 80015c8:	40020400 	.word	0x40020400
 80015cc:	2000032c 	.word	0x2000032c
 80015d0:	20000328 	.word	0x20000328
 80015d4:	00000000 	.word	0x00000000

080015d8 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FLIGHT_CONTROLLER_BATTERY_LEVEL
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80015e0:	2314      	movs	r3, #20
 80015e2:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 80015e4:	482e      	ldr	r0, [pc, #184]	; (80016a0 <FlightController_BatteryLevel+0xc8>)
 80015e6:	f002 f887 	bl	80036f8 <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 80015ea:	2101      	movs	r1, #1
 80015ec:	482c      	ldr	r0, [pc, #176]	; (80016a0 <FlightController_BatteryLevel+0xc8>)
 80015ee:	f002 f937 	bl	8003860 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 80015f2:	482b      	ldr	r0, [pc, #172]	; (80016a0 <FlightController_BatteryLevel+0xc8>)
 80015f4:	f002 f9bf 	bl	8003976 <HAL_ADC_GetValue>
 80015f8:	4603      	mov	r3, r0
 80015fa:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevel = (adcValue * 3.3) / 4096;
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff98 	bl	8000534 <__aeabi_i2d>
 8001604:	a320      	add	r3, pc, #128	; (adr r3, 8001688 <FlightController_BatteryLevel+0xb0>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe fffd 	bl	8000608 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <FlightController_BatteryLevel+0xcc>)
 800161c:	f7ff f91e 	bl	800085c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fae6 	bl	8000bf8 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <FlightController_BatteryLevel+0xd0>)
 8001630:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevel = FlightController_batteryLevel * 1.046046;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <FlightController_BatteryLevel+0xd0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff8e 	bl	8000558 <__aeabi_f2d>
 800163c:	a314      	add	r3, pc, #80	; (adr r3, 8001690 <FlightController_BatteryLevel+0xb8>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ffe1 	bl	8000608 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff fad3 	bl	8000bf8 <__aeabi_d2f>
 8001652:	4603      	mov	r3, r0
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <FlightController_BatteryLevel+0xd0>)
 8001656:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevel = FlightController_batteryLevel * 3.363636;
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <FlightController_BatteryLevel+0xd0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff7b 	bl	8000558 <__aeabi_f2d>
 8001662:	a30d      	add	r3, pc, #52	; (adr r3, 8001698 <FlightController_BatteryLevel+0xc0>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ffce 	bl	8000608 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff fac0 	bl	8000bf8 <__aeabi_d2f>
 8001678:	4603      	mov	r3, r0
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <FlightController_BatteryLevel+0xd0>)
 800167c:	6013      	str	r3, [r2, #0]
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f[V]\r\n\n", FlightController_batteryLevel);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f00b fcf6 	bl	800d070 <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 8001684:	e7ae      	b.n	80015e4 <FlightController_BatteryLevel+0xc>
 8001686:	bf00      	nop
 8001688:	66666666 	.word	0x66666666
 800168c:	400a6666 	.word	0x400a6666
 8001690:	bb01c92e 	.word	0xbb01c92e
 8001694:	3ff0bc9a 	.word	0x3ff0bc9a
 8001698:	fdbd2fa1 	.word	0xfdbd2fa1
 800169c:	400ae8b9 	.word	0x400ae8b9
 80016a0:	20000a38 	.word	0x20000a38
 80016a4:	40b00000 	.word	0x40b00000
 80016a8:	2000036c 	.word	0x2000036c

080016ac <FlightController_ControlSystem>:
    }
}

void FlightController_ControlSystem(void * ptr) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_CONTROL_SYSTEM
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80016b4:	2314      	movs	r3, #20
 80016b6:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

    	/* Set ESCs speeds */
    	ESC_speeds[0] = FSA8S_channelValues[2] / 10;
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <FlightController_ControlSystem+0x5c>)
 80016ba:	889b      	ldrh	r3, [r3, #4]
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <FlightController_ControlSystem+0x60>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	08db      	lsrs	r3, r3, #3
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <FlightController_ControlSystem+0x64>)
 80016c8:	801a      	strh	r2, [r3, #0]
    	ESC_speeds[1] = FSA8S_channelValues[2] / 10;
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <FlightController_ControlSystem+0x5c>)
 80016cc:	889b      	ldrh	r3, [r3, #4]
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <FlightController_ControlSystem+0x60>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <FlightController_ControlSystem+0x64>)
 80016da:	805a      	strh	r2, [r3, #2]
    	ESC_speeds[2] = FSA8S_channelValues[2] / 10;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <FlightController_ControlSystem+0x5c>)
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <FlightController_ControlSystem+0x60>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	08db      	lsrs	r3, r3, #3
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <FlightController_ControlSystem+0x64>)
 80016ec:	809a      	strh	r2, [r3, #4]
    	ESC_speeds[3] = FSA8S_channelValues[2] / 10;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <FlightController_ControlSystem+0x5c>)
 80016f0:	889b      	ldrh	r3, [r3, #4]
 80016f2:	4a06      	ldr	r2, [pc, #24]	; (800170c <FlightController_ControlSystem+0x60>)
 80016f4:	fba2 2303 	umull	r2, r3, r2, r3
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <FlightController_ControlSystem+0x64>)
 80016fe:	80da      	strh	r2, [r3, #6]

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f00b fcb5 	bl	800d070 <vTaskDelay>
    	ESC_speeds[0] = FSA8S_channelValues[2] / 10;
 8001706:	e7d7      	b.n	80016b8 <FlightController_ControlSystem+0xc>
 8001708:	2000033c 	.word	0x2000033c
 800170c:	cccccccd 	.word	0xcccccccd
 8001710:	20000364 	.word	0x20000364

08001714 <Timer1_Callback>:
    }
}

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af02      	add	r7, sp, #8
 800171a:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f00c fe61 	bl	800e3e4 <pvTimerGetTimerID>
 8001722:	4603      	mov	r3, r0
 8001724:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f00c fba4 	bl	800de74 <xTimerGetPeriod>
 800172c:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3301      	adds	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (PW_ON_OFF_DRIVER_TIME / xTimerPeriod)) {
 8001734:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d33b      	bcc.n	80017bc <Timer1_Callback+0xa8>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001744:	2120      	movs	r1, #32
 8001746:	4822      	ldr	r0, [pc, #136]	; (80017d0 <Timer1_Callback+0xbc>)
 8001748:	f002 ffd6 	bl	80046f8 <HAL_GPIO_ReadPin>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d124      	bne.n	800179c <Timer1_Callback+0x88>

            if (!FlightController_running) {
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <Timer1_Callback+0xc0>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	f083 0301 	eor.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <Timer1_Callback+0x5e>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 8001760:	2201      	movs	r2, #1
 8001762:	2110      	movs	r1, #16
 8001764:	481a      	ldr	r0, [pc, #104]	; (80017d0 <Timer1_Callback+0xbc>)
 8001766:	f002 ffdf 	bl	8004728 <HAL_GPIO_WritePin>

                FlightController_running = true;
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <Timer1_Callback+0xc0>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	e014      	b.n	800179c <Timer1_Callback+0x88>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <Timer1_Callback+0xc4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f00b fcae 	bl	800d0d8 <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001782:	4816      	ldr	r0, [pc, #88]	; (80017dc <Timer1_Callback+0xc8>)
 8001784:	f002 ffd0 	bl	8004728 <HAL_GPIO_WritePin>

                FlightController_running = false;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <Timer1_Callback+0xc0>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2110      	movs	r1, #16
 8001792:	480f      	ldr	r0, [pc, #60]	; (80017d0 <Timer1_Callback+0xbc>)
 8001794:	f002 ffc8 	bl	8004728 <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 8001798:	f002 fc33 	bl	8004002 <HAL_NVIC_SystemReset>
            }
        }

        /* Stop Timer1 */
        xTimerStop(xTimer, 0);
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2300      	movs	r3, #0
 80017a2:	2200      	movs	r2, #0
 80017a4:	2103      	movs	r1, #3
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f00c fb16 	bl	800ddd8 <xTimerGenericCommand>
        vTimerSetTimerID(xTimer, (void *)0);
 80017ac:	2100      	movs	r1, #0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f00c fe38 	bl	800e424 <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <Timer1_Callback+0xcc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 80017ba:	e004      	b.n	80017c6 <Timer1_Callback+0xb2>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4619      	mov	r1, r3
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f00c fe2f 	bl	800e424 <vTimerSetTimerID>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40020400 	.word	0x40020400
 80017d4:	2000032d 	.word	0x2000032d
 80017d8:	20000308 	.word	0x20000308
 80017dc:	40020800 	.word	0x40020800
 80017e0:	2000032c 	.word	0x2000032c

080017e4 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

    /* Welcome message */
    LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 80017e8:	2100      	movs	r1, #0
 80017ea:	4803      	ldr	r0, [pc, #12]	; (80017f8 <FlightController_Init+0x14>)
 80017ec:	f001 fe48 	bl	8003480 <LOG>

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 80017f0:	f7ff fbd0 	bl	8000f94 <FreeRTOS_CreateStartUpTasks>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	0801231c 	.word	0x0801231c

080017fc <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <vApplicationGetIdleTaskMemory+0x2c>)
 800180c:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <vApplicationGetIdleTaskMemory+0x30>)
 8001812:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000370 	.word	0x20000370
 800182c:	200003d4 	.word	0x200003d4

08001830 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a07      	ldr	r2, [pc, #28]	; (800185c <vApplicationGetTimerTaskMemory+0x2c>)
 8001840:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <vApplicationGetTimerTaskMemory+0x30>)
 8001846:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184e:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	200005d4 	.word	0x200005d4
 8001860:	20000638 	.word	0x20000638

08001864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186a:	f001 fe6b 	bl	8003544 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186e:	f000 f827 	bl	80018c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001872:	f000 f9cd 	bl	8001c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001876:	f000 f9b1 	bl	8001bdc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800187a:	f000 f985 	bl	8001b88 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800187e:	f000 f8db 	bl	8001a38 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001882:	f000 f907 	bl	8001a94 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001886:	f000 f885 	bl	8001994 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 800188a:	f7ff ffab 	bl	80017e4 <FlightController_Init>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <main+0x54>)
 8001890:	1d3c      	adds	r4, r7, #4
 8001892:	461d      	mov	r5, r3
 8001894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001898:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800189c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00a fbc2 	bl	800c02e <osThreadCreate>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a03      	ldr	r2, [pc, #12]	; (80018bc <main+0x58>)
 80018ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80018b0:	f00a fbb6 	bl	800c020 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 80018b4:	e7fe      	b.n	80018b4 <main+0x50>
 80018b6:	bf00      	nop
 80018b8:	08012350 	.word	0x08012350
 80018bc:	20000bc0 	.word	0x20000bc0

080018c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b094      	sub	sp, #80	; 0x50
 80018c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c6:	f107 0320 	add.w	r3, r7, #32
 80018ca:	2230      	movs	r2, #48	; 0x30
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00e fb63 	bl	800ff9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <SystemClock_Config+0xcc>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	4a27      	ldr	r2, [pc, #156]	; (800198c <SystemClock_Config+0xcc>)
 80018ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f2:	6413      	str	r3, [r2, #64]	; 0x40
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <SystemClock_Config+0xcc>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <SystemClock_Config+0xd0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800190c:	4a20      	ldr	r2, [pc, #128]	; (8001990 <SystemClock_Config+0xd0>)
 800190e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <SystemClock_Config+0xd0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001920:	2301      	movs	r3, #1
 8001922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001924:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192a:	2302      	movs	r3, #2
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800192e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001934:	2319      	movs	r3, #25
 8001936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001938:	2390      	movs	r3, #144	; 0x90
 800193a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800193c:	2302      	movs	r3, #2
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001940:	2303      	movs	r3, #3
 8001942:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001944:	f107 0320 	add.w	r3, r7, #32
 8001948:	4618      	mov	r0, r3
 800194a:	f005 f943 	bl	8006bd4 <HAL_RCC_OscConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001954:	f000 f9ea 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001958:	230f      	movs	r3, #15
 800195a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195c:	2302      	movs	r3, #2
 800195e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	2102      	movs	r1, #2
 8001974:	4618      	mov	r0, r3
 8001976:	f005 fba5 	bl	80070c4 <HAL_RCC_ClockConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001980:	f000 f9d4 	bl	8001d2c <Error_Handler>
  }
}
 8001984:	bf00      	nop
 8001986:	3750      	adds	r7, #80	; 0x50
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	40007000 	.word	0x40007000

08001994 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800199a:	463b      	mov	r3, r7
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019a8:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <MX_ADC1_Init+0x9c>)
 80019aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019d4:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <MX_ADC1_Init+0xa0>)
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019f2:	480e      	ldr	r0, [pc, #56]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019f4:	f001 fe3c 	bl	8003670 <HAL_ADC_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019fe:	f000 f995 	bl	8001d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a06:	2301      	movs	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0e:	463b      	mov	r3, r7
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <MX_ADC1_Init+0x98>)
 8001a14:	f001 ffbc 	bl	8003990 <HAL_ADC_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a1e:	f000 f985 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000a38 	.word	0x20000a38
 8001a30:	40012000 	.word	0x40012000
 8001a34:	0f000001 	.word	0x0f000001

08001a38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <MX_I2C1_Init+0x50>)
 8001a3e:	4a13      	ldr	r2, [pc, #76]	; (8001a8c <MX_I2C1_Init+0x54>)
 8001a40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_I2C1_Init+0x50>)
 8001a44:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <MX_I2C1_Init+0x58>)
 8001a46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_I2C1_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_I2C1_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_I2C1_Init+0x50>)
 8001a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <MX_I2C1_Init+0x50>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_I2C1_Init+0x50>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <MX_I2C1_Init+0x50>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_I2C1_Init+0x50>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <MX_I2C1_Init+0x50>)
 8001a76:	f002 fe71 	bl	800475c <HAL_I2C_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a80:	f000 f954 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000a80 	.word	0x20000a80
 8001a8c:	40005400 	.word	0x40005400
 8001a90:	000186a0 	.word	0x000186a0

08001a94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9a:	f107 0320 	add.w	r3, r7, #32
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	615a      	str	r2, [r3, #20]
 8001ab4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ab6:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001ab8:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001aba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001abe:	2214      	movs	r2, #20
 8001ac0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ace:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001adc:	4828      	ldr	r0, [pc, #160]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001ade:	f005 fcd1 	bl	8007484 <HAL_TIM_PWM_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ae8:	f000 f920 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af4:	f107 0320 	add.w	r3, r7, #32
 8001af8:	4619      	mov	r1, r3
 8001afa:	4821      	ldr	r0, [pc, #132]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001afc:	f006 f8b6 	bl	8007c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b06:	f000 f911 	bl	8001d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b0a:	2360      	movs	r3, #96	; 0x60
 8001b0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4817      	ldr	r0, [pc, #92]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001b22:	f005 fdaf 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b2c:	f000 f8fe 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	2204      	movs	r2, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4812      	ldr	r0, [pc, #72]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001b38:	f005 fda4 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b42:	f000 f8f3 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2208      	movs	r2, #8
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001b4e:	f005 fd99 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001b58:	f000 f8e8 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	220c      	movs	r2, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	4807      	ldr	r0, [pc, #28]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001b64:	f005 fd8e 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001b6e:	f000 f8dd 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b72:	4803      	ldr	r0, [pc, #12]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001b74:	f000 f9bc 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	; 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000ad4 	.word	0x20000ad4
 8001b84:	40000400 	.word	0x40000400

08001b88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_USART2_UART_Init+0x4c>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <MX_USART2_UART_Init+0x50>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_USART2_UART_Init+0x4c>)
 8001b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_USART2_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_USART2_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_USART2_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_USART2_UART_Init+0x4c>)
 8001bae:	2204      	movs	r2, #4
 8001bb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_USART2_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_USART2_UART_Init+0x4c>)
 8001bc0:	f006 f8c2 	bl	8007d48 <HAL_UART_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bca:	f000 f8af 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000b1c 	.word	0x20000b1c
 8001bd8:	40004400 	.word	0x40004400

08001bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_DMA_Init+0x30>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <MX_DMA_Init+0x30>)
 8001bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_DMA_Init+0x30>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]

}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800

08001c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a37      	ldr	r2, [pc, #220]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a30      	ldr	r2, [pc, #192]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a29      	ldr	r2, [pc, #164]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <MX_GPIO_Init+0xfc>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001c9c:	481c      	ldr	r0, [pc, #112]	; (8001d10 <MX_GPIO_Init+0x100>)
 8001c9e:	f002 fd43 	bl	8004728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f241 1114 	movw	r1, #4372	; 0x1114
 8001ca8:	481a      	ldr	r0, [pc, #104]	; (8001d14 <MX_GPIO_Init+0x104>)
 8001caa:	f002 fd3d 	bl	8004728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED4_Pin;
 8001cae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4812      	ldr	r0, [pc, #72]	; (8001d10 <MX_GPIO_Init+0x100>)
 8001cc8:	f002 fb92 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin;
 8001ccc:	f241 1314 	movw	r3, #4372	; 0x1114
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480b      	ldr	r0, [pc, #44]	; (8001d14 <MX_GPIO_Init+0x104>)
 8001ce6:	f002 fb83 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
  GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 8001cea:	2320      	movs	r3, #32
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_GPIO_Init+0x104>)
 8001cfe:	f002 fb77 	bl	80043f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020800 	.word	0x40020800
 8001d14:	40020400 	.word	0x40020400

08001d18 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001d20:	f00c fe16 	bl	800e950 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f00a f9ce 	bl	800c0c6 <osDelay>
 8001d2a:	e7fb      	b.n	8001d24 <StartDefaultTask+0xc>

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_MspInit+0x54>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <HAL_MspInit+0x54>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_MspInit+0x54>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_MspInit+0x54>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <HAL_MspInit+0x54>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_MspInit+0x54>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	210f      	movs	r1, #15
 8001d7e:	f06f 0001 	mvn.w	r0, #1
 8001d82:	f002 f914 	bl	8003fae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_ADC_MspInit+0x7c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d127      	bne.n	8001e06 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <HAL_ADC_MspInit+0x80>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <HAL_ADC_MspInit+0x80>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_ADC_MspInit+0x80>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_ADC_MspInit+0x80>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_ADC_MspInit+0x80>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_ADC_MspInit+0x80>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dee:	2301      	movs	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df2:	2303      	movs	r3, #3
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_ADC_MspInit+0x84>)
 8001e02:	f002 faf5 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40012000 	.word	0x40012000
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_I2C_MspInit+0x84>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12b      	bne.n	8001e96 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e5a:	23c0      	movs	r3, #192	; 0xc0
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <HAL_I2C_MspInit+0x8c>)
 8001e76:	f002 fabb 	bl	80043f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	; 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40005400 	.word	0x40005400
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020400 	.word	0x40020400

08001eac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10d      	bne.n	8001eda <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_TIM_PWM_MspInit+0x40>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_TIM_PWM_MspInit+0x40>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_TIM_PWM_MspInit+0x40>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_TIM_MspPostInit+0xa4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d13b      	bne.n	8001f8a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f4a:	23c0      	movs	r3, #192	; 0xc0
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <HAL_TIM_MspPostInit+0xac>)
 8001f66:	f002 fa43 	bl	80043f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <HAL_TIM_MspPostInit+0xb0>)
 8001f86:	f002 fa33 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	; 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400

08001fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a31      	ldr	r2, [pc, #196]	; (8002088 <HAL_UART_MspInit+0xe4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d15b      	bne.n	800207e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_UART_MspInit+0xe8>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a2f      	ldr	r2, [pc, #188]	; (800208c <HAL_UART_MspInit+0xe8>)
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_UART_MspInit+0xe8>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_UART_MspInit+0xe8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a28      	ldr	r2, [pc, #160]	; (800208c <HAL_UART_MspInit+0xe8>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_UART_MspInit+0xe8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ffe:	230c      	movs	r3, #12
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800200e:	2307      	movs	r3, #7
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	481d      	ldr	r0, [pc, #116]	; (8002090 <HAL_UART_MspInit+0xec>)
 800201a:	f002 f9e9 	bl	80043f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_UART_MspInit+0xf0>)
 8002020:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <HAL_UART_MspInit+0xf4>)
 8002022:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_UART_MspInit+0xf0>)
 8002026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800202a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_UART_MspInit+0xf0>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_UART_MspInit+0xf0>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_UART_MspInit+0xf0>)
 800203a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_UART_MspInit+0xf0>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_UART_MspInit+0xf0>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_UART_MspInit+0xf0>)
 800204e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002052:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_UART_MspInit+0xf0>)
 8002056:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800205a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_UART_MspInit+0xf0>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002062:	480c      	ldr	r0, [pc, #48]	; (8002094 <HAL_UART_MspInit+0xf0>)
 8002064:	f001 ffde 	bl	8004024 <HAL_DMA_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800206e:	f7ff fe5d 	bl	8001d2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_UART_MspInit+0xf0>)
 8002076:	639a      	str	r2, [r3, #56]	; 0x38
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <HAL_UART_MspInit+0xf0>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800207e:	bf00      	nop
 8002080:	3728      	adds	r7, #40	; 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40004400 	.word	0x40004400
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000
 8002094:	20000b60 	.word	0x20000b60
 8002098:	40026088 	.word	0x40026088

0800209c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80020a0:	e7fe      	b.n	80020a0 <NMI_Handler+0x4>

080020a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <HardFault_Handler+0x4>

080020a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <MemManage_Handler+0x4>

080020ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <BusFault_Handler+0x4>

080020b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <UsageFault_Handler+0x4>

080020ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020cc:	f001 fa8c 	bl	80035e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020d0:	f00b fcd4 	bl	800da7c <xTaskGetSchedulerState>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020da:	f00c fb85 	bl	800e7e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <OTG_FS_IRQHandler+0x10>)
 80020ea:	f003 fc46 	bl	800597a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20001b38 	.word	0x20001b38

080020f8 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
    return 1;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_kill>:

int _kill(int pid, int sig) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002112:	f00d ffb3 	bl	801007c <__errno>
 8002116:	4603      	mov	r3, r0
 8002118:	2216      	movs	r2, #22
 800211a:	601a      	str	r2, [r3, #0]
    return -1;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_exit>:

void _exit(int status) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ffe7 	bl	8002108 <_kill>
    while (1) {
 800213a:	e7fe      	b.n	800213a <_exit+0x12>

0800213c <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e00a      	b.n	8002164 <_read+0x28>
        *ptr++ = __io_getchar();
 800214e:	f3af 8000 	nop.w
 8002152:	4601      	mov	r1, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf0      	blt.n	800214e <_read+0x12>
    }

    return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e009      	b.n	800219c <_write+0x26>
        __io_putchar(*ptr++);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	60ba      	str	r2, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf1      	blt.n	8002188 <_write+0x12>
    }
    return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_close>:

int _close(int file) {
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_fstat>:

int _fstat(int file, struct stat * st) {
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d6:	605a      	str	r2, [r3, #4]
    return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_isatty>:

int _isatty(int file) {
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
        errno = ENOMEM;
 8002248:	f00d ff18 	bl	801007c <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20010000 	.word	0x20010000
 8002278:	00000400 	.word	0x00000400
 800227c:	20000bc4 	.word	0x20000bc4
 8002280:	200023b0 	.word	0x200023b0

08002284 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ae:	490e      	ldr	r1, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c4:	4c0b      	ldr	r4, [pc, #44]	; (80022f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022d2:	f7ff ffd7 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f00d fed7 	bl	8010088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7ff fac3 	bl	8001864 <main>
  bx  lr
 80022de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 80022ec:	08012820 	.word	0x08012820
  ldr r2, =_sbss
 80022f0:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 80022f4:	200023b0 	.word	0x200023b0

080022f8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>

080022fa <PWM_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc) {
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]

    /* Check first parameter */
    if (NULL == hesc) {
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <PWM_Init+0x12>
        return false;
 8002308:	2300      	movs	r3, #0
 800230a:	e02c      	b.n	8002366 <PWM_Init+0x6c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_1)) {
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f005 f906 	bl	8007524 <HAL_TIM_PWM_Start>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <PWM_Init+0x28>
        /* END MODIFY 1 */
        return false;
 800231e:	2300      	movs	r3, #0
 8002320:	e021      	b.n	8002366 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_2)) {
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2104      	movs	r1, #4
 8002328:	4618      	mov	r0, r3
 800232a:	f005 f8fb 	bl	8007524 <HAL_TIM_PWM_Start>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <PWM_Init+0x3e>
        /* END MODIFY 2 */
        return false;
 8002334:	2300      	movs	r3, #0
 8002336:	e016      	b.n	8002366 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_3)) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2108      	movs	r1, #8
 800233e:	4618      	mov	r0, r3
 8002340:	f005 f8f0 	bl	8007524 <HAL_TIM_PWM_Start>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <PWM_Init+0x54>
        /* END MODIFY 3 */
        return false;
 800234a:	2300      	movs	r3, #0
 800234c:	e00b      	b.n	8002366 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_4)) {
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	210c      	movs	r1, #12
 8002354:	4618      	mov	r0, r3
 8002356:	f005 f8e5 	bl	8007524 <HAL_TIM_PWM_Start>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <PWM_Init+0x6a>
        /* END MODIFY 4 */
        return false;
 8002360:	2300      	movs	r3, #0
 8002362:	e000      	b.n	8002366 <PWM_Init+0x6c>
    }

    return true;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint8_t channel, uint32_t dutyCycle) {
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	460b      	mov	r3, r1
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	72fb      	strb	r3, [r7, #11]

    /* Check parameters */
    if (NULL == hesc) {
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <PWM_SetDutyCycle+0x18>
        return false;
 8002384:	2300      	movs	r3, #0
 8002386:	e02d      	b.n	80023e4 <PWM_SetDutyCycle+0x74>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 8002388:	7afb      	ldrb	r3, [r7, #11]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d00a      	beq.n	80023a4 <PWM_SetDutyCycle+0x34>
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d007      	beq.n	80023a4 <PWM_SetDutyCycle+0x34>
 8002394:	7afb      	ldrb	r3, [r7, #11]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d004      	beq.n	80023a4 <PWM_SetDutyCycle+0x34>
 800239a:	7afb      	ldrb	r3, [r7, #11]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d001      	beq.n	80023a4 <PWM_SetDutyCycle+0x34>
        return false;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e01f      	b.n	80023e4 <PWM_SetDutyCycle+0x74>
    }

    /* Set duty cycle */
    if (PWM_CHANNEL_1 == channel) {
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d104      	bne.n	80023b4 <PWM_SetDutyCycle+0x44>
    	/* BEGIN MODIFY 10 */
    	TIM3->CCR1 = (uint16_t)dutyCycle;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <PWM_SetDutyCycle+0x80>)
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34
 80023b2:	e016      	b.n	80023e2 <PWM_SetDutyCycle+0x72>
    	/* END MODIFY 10 */
    } else if (PWM_CHANNEL_2 == channel) {
 80023b4:	7afb      	ldrb	r3, [r7, #11]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d104      	bne.n	80023c4 <PWM_SetDutyCycle+0x54>
    	/* BEGIN MODIFY 11 */
    	TIM3->CCR2 = (uint16_t)dutyCycle;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <PWM_SetDutyCycle+0x80>)
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38
 80023c2:	e00e      	b.n	80023e2 <PWM_SetDutyCycle+0x72>
    	/* END MODIFY 11 */
    } else if (PWM_CHANNEL_3 == channel) {
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d104      	bne.n	80023d4 <PWM_SetDutyCycle+0x64>
    	/* BEGIN MODIFY 12 */
    	TIM3->CCR3 = (uint16_t)dutyCycle;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <PWM_SetDutyCycle+0x80>)
 80023d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80023d2:	e006      	b.n	80023e2 <PWM_SetDutyCycle+0x72>
    	/* END MODIFY 12 */
    } else if (PWM_CHANNEL_4 == channel) {
 80023d4:	7afb      	ldrb	r3, [r7, #11]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d103      	bne.n	80023e2 <PWM_SetDutyCycle+0x72>
    	/* BEGIN MODIFY 13 */
    	TIM3->CCR4 = (uint16_t)dutyCycle;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	b29a      	uxth	r2, r3
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <PWM_SetDutyCycle+0x80>)
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
    	/* END MODIFY 13 */
    }

    return true;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	40000400 	.word	0x40000400
 80023f4:	00000000 	.word	0x00000000

080023f8 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint32_t * pwmValue) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002402:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (0 > speed || 100 < speed) {
 8002404:	edd7 7a01 	vldr	s15, [r7, #4]
 8002408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	d408      	bmi.n	8002424 <ESC_CalculatePWMDutyCycle+0x2c>
 8002412:	edd7 7a01 	vldr	s15, [r7, #4]
 8002416:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002480 <ESC_CalculatePWMDutyCycle+0x88>
 800241a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	dd01      	ble.n	8002428 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 8002424:	2300      	movs	r3, #0
 8002426:	e021      	b.n	800246c <ESC_CalculatePWMDutyCycle+0x74>
    }

    /* Calculate PWM value */
    *pwmValue = (uint32_t)((MAX_ESC_SPEED - MIN_ESC_SPEED) * (float) (speed / 100) + MIN_ESC_SPEED);
 8002428:	edd7 7a01 	vldr	s15, [r7, #4]
 800242c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002480 <ESC_CalculatePWMDutyCycle+0x88>
 8002430:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002434:	ee16 0a90 	vmov	r0, s13
 8002438:	f7fe f88e 	bl	8000558 <__aeabi_f2d>
 800243c:	a30e      	add	r3, pc, #56	; (adr r3, 8002478 <ESC_CalculatePWMDutyCycle+0x80>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002442:	f7fe f8e1 	bl	8000608 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	a30a      	add	r3, pc, #40	; (adr r3, 8002478 <ESC_CalculatePWMDutyCycle+0x80>)
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	f7fd ff22 	bl	800029c <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fbaa 	bl	8000bb8 <__aeabi_d2uiz>
 8002464:	4602      	mov	r2, r0
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	601a      	str	r2, [r3, #0]

    return true;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	f3af 8000 	nop.w
 8002478:	00000000 	.word	0x00000000
 800247c:	40a99980 	.word	0x40a99980
 8002480:	42c80000 	.word	0x42c80000

08002484 <ESC_AutoCalibrate>:

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <ESC_AutoCalibrate+0x12>
        return false;
 8002492:	2300      	movs	r3, #0
 8002494:	e080      	b.n	8002598 <ESC_AutoCalibrate+0x114>
#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"Auto-calibrating ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MAX_ESC_SPEED)) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	791b      	ldrb	r3, [r3, #4]
 800249a:	f641 1299 	movw	r2, #6553	; 0x1999
 800249e:	4619      	mov	r1, r3
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff65 	bl	8002370 <PWM_SetDutyCycle>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f083 0301 	eor.w	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <ESC_AutoCalibrate+0x32>
        return false;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e070      	b.n	8002598 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MAX_ESC_SPEED)) {
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	795b      	ldrb	r3, [r3, #5]
 80024ba:	f641 1299 	movw	r2, #6553	; 0x1999
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff55 	bl	8002370 <PWM_SetDutyCycle>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f083 0301 	eor.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <ESC_AutoCalibrate+0x52>
        return false;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e060      	b.n	8002598 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MAX_ESC_SPEED)) {
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	799b      	ldrb	r3, [r3, #6]
 80024da:	f641 1299 	movw	r2, #6553	; 0x1999
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff45 	bl	8002370 <PWM_SetDutyCycle>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f083 0301 	eor.w	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <ESC_AutoCalibrate+0x72>
        return false;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e050      	b.n	8002598 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MAX_ESC_SPEED)) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	79db      	ldrb	r3, [r3, #7]
 80024fa:	f641 1299 	movw	r2, #6553	; 0x1999
 80024fe:	4619      	mov	r1, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff35 	bl	8002370 <PWM_SetDutyCycle>
 8002506:	4603      	mov	r3, r0
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <ESC_AutoCalibrate+0x92>
        return false;
 8002512:	2300      	movs	r3, #0
 8002514:	e040      	b.n	8002598 <ESC_AutoCalibrate+0x114>
    }

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MIN_ESC_SPEED)) {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	791b      	ldrb	r3, [r3, #4]
 800251a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff25 	bl	8002370 <PWM_SetDutyCycle>
 8002526:	4603      	mov	r3, r0
 8002528:	f083 0301 	eor.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <ESC_AutoCalibrate+0xb2>
        return false;
 8002532:	2300      	movs	r3, #0
 8002534:	e030      	b.n	8002598 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MIN_ESC_SPEED)) {
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	795b      	ldrb	r3, [r3, #5]
 800253a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff15 	bl	8002370 <PWM_SetDutyCycle>
 8002546:	4603      	mov	r3, r0
 8002548:	f083 0301 	eor.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <ESC_AutoCalibrate+0xd2>
        return false;
 8002552:	2300      	movs	r3, #0
 8002554:	e020      	b.n	8002598 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MIN_ESC_SPEED)) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	799b      	ldrb	r3, [r3, #6]
 800255a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800255e:	4619      	mov	r1, r3
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff05 	bl	8002370 <PWM_SetDutyCycle>
 8002566:	4603      	mov	r3, r0
 8002568:	f083 0301 	eor.w	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <ESC_AutoCalibrate+0xf2>
        return false;
 8002572:	2300      	movs	r3, #0
 8002574:	e010      	b.n	8002598 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MIN_ESC_SPEED)) {
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	79db      	ldrb	r3, [r3, #7]
 800257a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff fef5 	bl	8002370 <PWM_SetDutyCycle>
 8002586:	4603      	mov	r3, r0
 8002588:	f083 0301 	eor.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <ESC_AutoCalibrate+0x112>
        return false;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <ESC_AutoCalibrate+0x114>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <ESC_Init+0x12>
        return NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e036      	b.n	8002620 <ESC_Init+0x80>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 80025b2:	2008      	movs	r0, #8
 80025b4:	f00c f9a8 	bl	800e908 <pvPortMalloc>
 80025b8:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00f      	beq.n	80025e0 <ESC_Init+0x40>
        hesc->htim = htim;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
        hesc->esc1 = PWM_CHANNEL_4;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2204      	movs	r2, #4
 80025ca:	711a      	strb	r2, [r3, #4]
        hesc->esc2 = PWM_CHANNEL_2;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2202      	movs	r2, #2
 80025d0:	715a      	strb	r2, [r3, #5]
        hesc->esc3 = PWM_CHANNEL_3;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2203      	movs	r2, #3
 80025d6:	719a      	strb	r2, [r3, #6]
        hesc->esc4 = PWM_CHANNEL_1;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	71da      	strb	r2, [r3, #7]
 80025de:	e002      	b.n	80025e6 <ESC_Init+0x46>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f00c f9a3 	bl	800e92c <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc)) {
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7ff fe87 	bl	80022fa <PWM_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f083 0301 	eor.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <ESC_Init+0x62>
        LOG((uint8_t *)"ESCs  couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f00c f997 	bl	800e92c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	e00e      	b.n	8002620 <ESC_Init+0x80>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff ff3e 	bl	8002484 <ESC_AutoCalibrate>
 8002608:	4603      	mov	r3, r0
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <ESC_Init+0x7e>
        LOG((uint8_t *)"ESCs couldn't be calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f00c f989 	bl	800e92c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <ESC_Init+0x80>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint8_t channel, float speed) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	460b      	mov	r3, r1
 8002632:	ed87 0a01 	vstr	s0, [r7, #4]
 8002636:	72fb      	strb	r3, [r7, #11]

    uint32_t pwmValue;

    /* Check parameters */
    if (NULL == hesc->htim) {
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <ESC_SetSpeed+0x1c>
        return false;
 8002640:	2300      	movs	r3, #0
 8002642:	e03d      	b.n	80026c0 <ESC_SetSpeed+0x98>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 8002644:	7afb      	ldrb	r3, [r7, #11]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d00a      	beq.n	8002660 <ESC_SetSpeed+0x38>
 800264a:	7afb      	ldrb	r3, [r7, #11]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d007      	beq.n	8002660 <ESC_SetSpeed+0x38>
 8002650:	7afb      	ldrb	r3, [r7, #11]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d004      	beq.n	8002660 <ESC_SetSpeed+0x38>
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d001      	beq.n	8002660 <ESC_SetSpeed+0x38>
        return false;
 800265c:	2300      	movs	r3, #0
 800265e:	e02f      	b.n	80026c0 <ESC_SetSpeed+0x98>
    }
    if (speed < 0 || speed > 100) {
 8002660:	edd7 7a01 	vldr	s15, [r7, #4]
 8002664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	d408      	bmi.n	8002680 <ESC_SetSpeed+0x58>
 800266e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002672:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80026c8 <ESC_SetSpeed+0xa0>
 8002676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	dd01      	ble.n	8002684 <ESC_SetSpeed+0x5c>
        return false;
 8002680:	2300      	movs	r3, #0
 8002682:	e01d      	b.n	80026c0 <ESC_SetSpeed+0x98>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, &pwmValue)) {
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4618      	mov	r0, r3
 800268a:	ed97 0a01 	vldr	s0, [r7, #4]
 800268e:	f7ff feb3 	bl	80023f8 <ESC_CalculatePWMDutyCycle>
 8002692:	4603      	mov	r3, r0
 8002694:	f083 0301 	eor.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <ESC_SetSpeed+0x7a>
        return false;
 800269e:	2300      	movs	r3, #0
 80026a0:	e00e      	b.n	80026c0 <ESC_SetSpeed+0x98>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, pwmValue)) {
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	7afb      	ldrb	r3, [r7, #11]
 80026a6:	4619      	mov	r1, r3
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f7ff fe61 	bl	8002370 <PWM_SetDutyCycle>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <ESC_SetSpeed+0x96>
        return false;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <ESC_SetSpeed+0x98>
    };

    return true;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	42c80000 	.word	0x42c80000

080026cc <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <IBUS_Init+0x12>
        return false;
 80026da:	2300      	movs	r3, #0
 80026dc:	e00f      	b.n	80026fe <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7a1b      	ldrb	r3, [r3, #8]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	f005 fb78 	bl	8007de2 <HAL_UART_Receive_DMA>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e000      	b.n	80026fe <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 80026fc:	2301      	movs	r3, #1
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <FSA8S_CheckFirstBytes+0x12>
        return false;
 8002714:	2300      	movs	r3, #0
 8002716:	e00d      	b.n	8002734 <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b20      	cmp	r3, #32
 8002720:	d107      	bne.n	8002732 <FSA8S_CheckFirstBytes+0x2c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	3301      	adds	r3, #1
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b40      	cmp	r3, #64	; 0x40
 800272c:	d101      	bne.n	8002732 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8002732:	2300      	movs	r3, #0
    }
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 8002748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800274c:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <FSA8S_Checksum+0x18>
        return false;
 8002754:	2300      	movs	r3, #0
 8002756:	e02c      	b.n	80027b2 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7a1b      	ldrb	r3, [r3, #8]
 8002760:	3b01      	subs	r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	b21a      	sxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7a1b      	ldrb	r3, [r3, #8]
 8002772:	3b02      	subs	r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b21b      	sxth	r3, r3
 800277a:	4313      	orrs	r3, r2
 800277c:	b21b      	sxth	r3, r3
 800277e:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 8002780:	2300      	movs	r3, #0
 8002782:	737b      	strb	r3, [r7, #13]
 8002784:	e00b      	b.n	800279e <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	7b7b      	ldrb	r3, [r7, #13]
 800278c:	4413      	add	r3, r2
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	89fa      	ldrh	r2, [r7, #14]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8002798:	7b7b      	ldrb	r3, [r7, #13]
 800279a:	3301      	adds	r3, #1
 800279c:	737b      	strb	r3, [r7, #13]
 800279e:	7b7b      	ldrb	r3, [r7, #13]
 80027a0:	2b1d      	cmp	r3, #29
 80027a2:	d9f0      	bls.n	8002786 <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 80027a4:	897a      	ldrh	r2, [r7, #10]
 80027a6:	89fb      	ldrh	r3, [r7, #14]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d101      	bne.n	80027b0 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 80027b0:	2300      	movs	r3, #0
    }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d062      	beq.n	8002894 <FSA8S_AmendData+0xd4>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 80027ce:	2302      	movs	r3, #2
 80027d0:	737b      	strb	r3, [r7, #13]
 80027d2:	e059      	b.n	8002888 <FSA8S_AmendData+0xc8>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	7b7b      	ldrb	r3, [r7, #13]
 80027de:	3301      	adds	r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	7b7b      	ldrb	r3, [r7, #13]
 80027ee:	440b      	add	r3, r1
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b21b      	sxth	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b21b      	sxth	r3, r3
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	7b7b      	ldrb	r3, [r7, #13]
 80027fc:	3b02      	subs	r3, #2
 80027fe:	0fd9      	lsrs	r1, r3, #31
 8002800:	440b      	add	r3, r1
 8002802:	105b      	asrs	r3, r3, #1
 8002804:	4619      	mov	r1, r3
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <FSA8S_AmendData+0xe0>)
 8002808:	5c5b      	ldrb	r3, [r3, r1]
 800280a:	b29b      	uxth	r3, r3
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 8002810:	89fb      	ldrh	r3, [r7, #14]
 8002812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002816:	d308      	bcc.n	800282a <FSA8S_AmendData+0x6a>
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800281e:	d804      	bhi.n	800282a <FSA8S_AmendData+0x6a>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002826:	81fb      	strh	r3, [r7, #14]
 8002828:	e001      	b.n	800282e <FSA8S_AmendData+0x6e>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 800282e:	89fb      	ldrh	r3, [r7, #14]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002838:	7b7b      	ldrb	r3, [r7, #13]
 800283a:	3b02      	subs	r3, #2
 800283c:	0fda      	lsrs	r2, r3, #31
 800283e:	4413      	add	r3, r2
 8002840:	105b      	asrs	r3, r3, #1
 8002842:	461a      	mov	r2, r3
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <FSA8S_AmendData+0xe0>)
 8002846:	5c9b      	ldrb	r3, [r3, r2]
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002850:	eddf 6a14 	vldr	s13, [pc, #80]	; 80028a4 <FSA8S_AmendData+0xe4>
 8002854:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002858:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80028a4 <FSA8S_AmendData+0xe4>
 800285c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	7b7b      	ldrb	r3, [r7, #13]
 800286a:	3b02      	subs	r3, #2
 800286c:	0fd9      	lsrs	r1, r3, #31
 800286e:	440b      	add	r3, r1
 8002870:	105b      	asrs	r3, r3, #1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800287a:	ee17 2a90 	vmov	r2, s15
 800287e:	b292      	uxth	r2, r2
 8002880:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 8002882:	7b7b      	ldrb	r3, [r7, #13]
 8002884:	3302      	adds	r3, #2
 8002886:	737b      	strb	r3, [r7, #13]
 8002888:	7b7a      	ldrb	r2, [r7, #13]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7a1b      	ldrb	r3, [r3, #8]
 800288e:	3b02      	subs	r3, #2
 8002890:	429a      	cmp	r2, r3
 8002892:	db9f      	blt.n	80027d4 <FSA8S_AmendData+0x14>
        }
    }
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	20000004 	.word	0x20000004
 80028a4:	447a0000 	.word	0x447a0000

080028a8 <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <FSA8S_Init+0x12>
        return NULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e04a      	b.n	8002950 <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <FSA8S_Init+0xb0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <FSA8S_Init+0x1e>
        return NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e044      	b.n	8002950 <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 80028c6:	2014      	movs	r0, #20
 80028c8:	f00c f81e 	bl	800e908 <pvPortMalloc>
 80028cc:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 80028ce:	2020      	movs	r0, #32
 80028d0:	f00c f81a 	bl	800e908 <pvPortMalloc>
 80028d4:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 80028d6:	201c      	movs	r0, #28
 80028d8:	f00c f816 	bl	800e908 <pvPortMalloc>
 80028dc:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00f      	beq.n	8002904 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2220      	movs	r2, #32
 80028f4:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	220e      	movs	r2, #14
 8002900:	741a      	strb	r2, [r3, #16]
 8002902:	e00c      	b.n	800291e <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4618      	mov	r0, r3
 800290a:	f00c f80f 	bl	800e92c <vPortFree>
        vPortFree(hibus->data);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	f00c f80a 	bl	800e92c <vPortFree>
        vPortFree(hibus);
 8002918:	6978      	ldr	r0, [r7, #20]
 800291a:	f00c f807 	bl	800e92c <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 800291e:	6978      	ldr	r0, [r7, #20]
 8002920:	f7ff fed4 	bl	80026cc <IBUS_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <FSA8S_Init+0xb0>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
        return hibus;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	e00d      	b.n	8002950 <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4618      	mov	r0, r3
 800293a:	f00b fff7 	bl	800e92c <vPortFree>
        vPortFree(hibus->data);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4618      	mov	r0, r3
 8002944:	f00b fff2 	bl	800e92c <vPortFree>
        vPortFree(hibus);
 8002948:	6978      	ldr	r0, [r7, #20]
 800294a:	f00b ffef 	bl	800e92c <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 800294e:	2300      	movs	r3, #0
    }
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000bc8 	.word	0x20000bc8

0800295c <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	e029      	b.n	80029c6 <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <FSA8S_ReadChannel+0x22>
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	2b0e      	cmp	r3, #14
 800297c:	d901      	bls.n	8002982 <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 800297e:	2300      	movs	r3, #0
 8002980:	e021      	b.n	80029c6 <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002982:	bf00      	nop
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff febe 	bl	8002706 <FSA8S_CheckFirstBytes>
 800298a:	4603      	mov	r3, r0
 800298c:	f083 0301 	eor.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f6      	bne.n	8002984 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fed2 	bl	8002740 <FSA8S_Checksum>
 800299c:	4603      	mov	r3, r0
 800299e:	f083 0301 	eor.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 80029a8:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 80029aa:	e7ea      	b.n	8002982 <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 80029ac:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff06 	bl	80027c0 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80029be:	3b01      	subs	r3, #1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	881b      	ldrh	r3, [r3, #0]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af02      	add	r7, sp, #8
 80029d4:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <I2C_Init+0x12>
        return false;
 80029dc:	2300      	movs	r3, #0
 80029de:	e010      	b.n	8002a02 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6858      	ldr	r0, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	7a19      	ldrb	r1, [r3, #8]
 80029e8:	f107 030f 	add.w	r3, r7, #15
 80029ec:	2201      	movs	r2, #1
 80029ee:	9200      	str	r2, [sp, #0]
 80029f0:	2275      	movs	r2, #117	; 0x75
 80029f2:	f000 f80a 	bl	8002a0a <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b68      	cmp	r3, #104	; 0x68
 80029fa:	d101      	bne.n	8002a00 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8002a00:	2300      	movs	r3, #0
    }
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b088      	sub	sp, #32
 8002a0e:	af04      	add	r7, sp, #16
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	72fb      	strb	r3, [r7, #11]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <I2C_Read+0x1c>
        return false;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e019      	b.n	8002a5a <I2C_Read+0x50>
    }
    if (NULL == data) {
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <I2C_Read+0x26>
        return false;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e014      	b.n	8002a5a <I2C_Read+0x50>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8002a30:	7afb      	ldrb	r3, [r7, #11]
 8002a32:	b299      	uxth	r1, r3
 8002a34:	7abb      	ldrb	r3, [r7, #10]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	7e3b      	ldrb	r3, [r7, #24]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2064      	movs	r0, #100	; 0x64
 8002a3e:	9002      	str	r0, [sp, #8]
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2301      	movs	r3, #1
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f002 f8c5 	bl	8004bd8 <HAL_I2C_Mem_Read>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <I2C_Read+0x4e>

        /* Data couldn't be read */
        return false;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <I2C_Read+0x50>
    } else {

        /* Data read successfully */
        return true;
 8002a58:	2301      	movs	r3, #1
    }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b088      	sub	sp, #32
 8002a66:	af04      	add	r7, sp, #16
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	72fb      	strb	r3, [r7, #11]
 8002a70:	4613      	mov	r3, r2
 8002a72:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <I2C_Write+0x1c>
        return false;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e018      	b.n	8002ab0 <I2C_Write+0x4e>
    }
    if (NULL == data) {
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <I2C_Write+0x26>
        return false;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e013      	b.n	8002ab0 <I2C_Write+0x4e>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	b299      	uxth	r1, r3
 8002a8c:	7abb      	ldrb	r3, [r7, #10]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	2364      	movs	r3, #100	; 0x64
 8002a92:	9302      	str	r3, [sp, #8]
 8002a94:	2301      	movs	r3, #1
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f001 ffa0 	bl	80049e4 <HAL_I2C_Mem_Write>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_Write+0x4c>

        /* Data couldn't be written */
        return false;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 8002aae:	2301      	movs	r3, #1
    }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 8002ac0:	2014      	movs	r0, #20
 8002ac2:	f00b ff21 	bl	800e908 <pvPortMalloc>
 8002ac6:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 8002ac8:	2004      	movs	r0, #4
 8002aca:	f00b ff1d 	bl	800e908 <pvPortMalloc>
 8002ace:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <GY87_InstanceInit+0x24>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00b ff23 	bl	800e92c <vPortFree>
        vPortFree(hgy87);
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f00b ff20 	bl	800e92c <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e01b      	b.n	8002b28 <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <GY87_InstanceInit+0x78>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d106      	bne.n	8002b06 <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	22d0      	movs	r2, #208	; 0xd0
 8002b02:	721a      	strb	r2, [r3, #8]
 8002b04:	e009      	b.n	8002b1a <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <GY87_InstanceInit+0x78>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2202      	movs	r2, #2
 8002b12:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	22d1      	movs	r2, #209	; 0xd1
 8002b18:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000bc9 	.word	0x20000bc9

08002b34 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8002b3c:	2340      	movs	r3, #64	; 0x40
 8002b3e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6858      	ldr	r0, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7a19      	ldrb	r1, [r3, #8]
 8002b48:	f107 030f 	add.w	r3, r7, #15
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	9200      	str	r2, [sp, #0]
 8002b50:	226b      	movs	r2, #107	; 0x6b
 8002b52:	f000 fa3d 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af02      	add	r7, sp, #8
 8002b64:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6858      	ldr	r0, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7a19      	ldrb	r1, [r3, #8]
 8002b72:	f107 030f 	add.w	r3, r7, #15
 8002b76:	2201      	movs	r2, #1
 8002b78:	9200      	str	r2, [sp, #0]
 8002b7a:	226b      	movs	r2, #107	; 0x6b
 8002b7c:	f000 fa28 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 8002b90:	2318      	movs	r3, #24
 8002b92:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6858      	ldr	r0, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7a19      	ldrb	r1, [r3, #8]
 8002b9c:	f107 030f 	add.w	r3, r7, #15
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	9200      	str	r2, [sp, #0]
 8002ba4:	2219      	movs	r2, #25
 8002ba6:	f000 fa13 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af02      	add	r7, sp, #8
 8002bb8:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_0; // Full range
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6858      	ldr	r0, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7a19      	ldrb	r1, [r3, #8]
 8002bc6:	f107 030f 	add.w	r3, r7, #15
 8002bca:	2201      	movs	r2, #1
 8002bcc:	9200      	str	r2, [sp, #0]
 8002bce:	221b      	movs	r2, #27
 8002bd0:	f000 f9fe 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_0; // Full range
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6858      	ldr	r0, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7a19      	ldrb	r1, [r3, #8]
 8002bf0:	f107 030f 	add.w	r3, r7, #15
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	9200      	str	r2, [sp, #0]
 8002bf8:	221c      	movs	r2, #28
 8002bfa:	f000 f9e9 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af02      	add	r7, sp, #8
 8002c0c:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = 0b00100010; // TODO
 8002c0e:	2322      	movs	r3, #34	; 0x22
 8002c10:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6858      	ldr	r0, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7a19      	ldrb	r1, [r3, #8]
 8002c1a:	f107 030f 	add.w	r3, r7, #15
 8002c1e:	2201      	movs	r2, #1
 8002c20:	9200      	str	r2, [sp, #0]
 8002c22:	226a      	movs	r2, #106	; 0x6a
 8002c24:	f000 f9d4 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8002c38:	2320      	movs	r3, #32
 8002c3a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6858      	ldr	r0, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7a19      	ldrb	r1, [r3, #8]
 8002c44:	f107 030f 	add.w	r3, r7, #15
 8002c48:	2200      	movs	r2, #0
 8002c4a:	9200      	str	r2, [sp, #0]
 8002c4c:	226a      	movs	r2, #106	; 0x6a
 8002c4e:	f000 f9bf 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af02      	add	r7, sp, #8
 8002c60:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002c62:	2302      	movs	r3, #2
 8002c64:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6858      	ldr	r0, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7a19      	ldrb	r1, [r3, #8]
 8002c6e:	f107 030f 	add.w	r3, r7, #15
 8002c72:	2201      	movs	r2, #1
 8002c74:	9200      	str	r2, [sp, #0]
 8002c76:	2237      	movs	r2, #55	; 0x37
 8002c78:	f000 f9aa 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6858      	ldr	r0, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7a19      	ldrb	r1, [r3, #8]
 8002c98:	f107 030f 	add.w	r3, r7, #15
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	9200      	str	r2, [sp, #0]
 8002ca0:	2237      	movs	r2, #55	; 0x37
 8002ca2:	f000 f995 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af02      	add	r7, sp, #8
 8002cb4:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = 0b00001101; // 400 kHz TODO
 8002cb6:	230d      	movs	r3, #13
 8002cb8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6858      	ldr	r0, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7a19      	ldrb	r1, [r3, #8]
 8002cc2:	f107 030f 	add.w	r3, r7, #15
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	9200      	str	r2, [sp, #0]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f000 f980 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002cd0:	bf00      	nop
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = QMC5883L_AUX_VAL_I2C_ADDR | 0x80;
 8002ce0:	238d      	movs	r3, #141	; 0x8d
 8002ce2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6858      	ldr	r0, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7a19      	ldrb	r1, [r3, #8]
 8002cec:	f107 030f 	add.w	r3, r7, #15
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	9200      	str	r2, [sp, #0]
 8002cf4:	2225      	movs	r2, #37	; 0x25
 8002cf6:	f000 f96b 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6858      	ldr	r0, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7a19      	ldrb	r1, [r3, #8]
 8002d06:	f107 030f 	add.w	r3, r7, #15
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	9200      	str	r2, [sp, #0]
 8002d0e:	2226      	movs	r2, #38	; 0x26
 8002d10:	f000 f95e 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8002d14:	2386      	movs	r3, #134	; 0x86
 8002d16:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6858      	ldr	r0, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7a19      	ldrb	r1, [r3, #8]
 8002d20:	f107 030f 	add.w	r3, r7, #15
 8002d24:	2201      	movs	r2, #1
 8002d26:	9200      	str	r2, [sp, #0]
 8002d28:	2227      	movs	r2, #39	; 0x27
 8002d2a:	f000 f951 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <GY87_Configure>:
    //    /* Set slave BMP180 barometer number of registers to read*/
    //    regData = 0x80 | 0x06; // TODO
    //    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData, MPU6050_SET_BIT);
}

static void GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fef8 	bl	8002b34 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ff0a 	bl	8002b5e <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ff1c 	bl	8002b88 <MPU6050_SetSampleDivider>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ff2e 	bl	8002bb2 <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff40 	bl	8002bdc <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff67 	bl	8002c30 <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ff79 	bl	8002c5a <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f819 	bl	8002da0 <QMC5883L_TestConnection>
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f846 	bl	8002e00 <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!BMP180_TestConnection(hgy87)) {
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f82b 	bl	8002dd0 <BMP180_TestConnection>
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hgy87);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f86c 	bl	8002e58 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff ff7f 	bl	8002c84 <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ff3d 	bl	8002c06 <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff8e 	bl	8002cae <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa0 	bl	8002cd8 <MPU6050_Configure_QMC5883l>

    //    /* Configure slave BMP180 barometer in MPU6050 */
    //    MPU6050_Configure_BMP180(hgy87);
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6858      	ldr	r0, [r3, #4]
 8002dac:	f107 030f 	add.w	r3, r7, #15
 8002db0:	2201      	movs	r2, #1
 8002db2:	9200      	str	r2, [sp, #0]
 8002db4:	220d      	movs	r2, #13
 8002db6:	211a      	movs	r1, #26
 8002db8:	f000 f8e2 	bl	8002f80 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2bff      	cmp	r3, #255	; 0xff
 8002dc0:	d001      	beq.n	8002dc6 <QMC5883L_TestConnection+0x26>
        return false;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 8002dc6:	2301      	movs	r3, #1
    }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <BMP180_TestConnection>:

static bool_t BMP180_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xD0, &regData, sizeof(regData));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6858      	ldr	r0, [r3, #4]
 8002ddc:	f107 030f 	add.w	r3, r7, #15
 8002de0:	2201      	movs	r2, #1
 8002de2:	9200      	str	r2, [sp, #0]
 8002de4:	22d0      	movs	r2, #208	; 0xd0
 8002de6:	21ee      	movs	r1, #238	; 0xee
 8002de8:	f000 f8ca 	bl	8002f80 <MPU6050_ReadRegister>

    if (0x55 != regData) { // TODO
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b55      	cmp	r3, #85	; 0x55
 8002df0:	d001      	beq.n	8002df6 <BMP180_TestConnection+0x26>
        return false;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <BMP180_TestConnection+0x28>
    } else {
        return true;
 8002df6:	2301      	movs	r3, #1
    }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6858      	ldr	r0, [r3, #4]
 8002e10:	f107 030f 	add.w	r3, r7, #15
 8002e14:	2201      	movs	r2, #1
 8002e16:	9200      	str	r2, [sp, #0]
 8002e18:	220b      	movs	r2, #11
 8002e1a:	211a      	movs	r1, #26
 8002e1c:	f000 f8d8 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 8002e20:	231d      	movs	r3, #29
 8002e22:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6858      	ldr	r0, [r3, #4]
 8002e28:	f107 030f 	add.w	r3, r7, #15
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	9200      	str	r2, [sp, #0]
 8002e30:	2209      	movs	r2, #9
 8002e32:	211a      	movs	r1, #26
 8002e34:	f000 f8cc 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6858      	ldr	r0, [r3, #4]
 8002e40:	f107 030f 	add.w	r3, r7, #15
 8002e44:	2201      	movs	r2, #1
 8002e46:	9200      	str	r2, [sp, #0]
 8002e48:	220a      	movs	r2, #10
 8002e4a:	211a      	movs	r1, #26
 8002e4c:	f000 f8c0 	bl	8002fd0 <MPU6050_WriteRegisterBitmasked>
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <BMP180_Configure>:

static void BMP180_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

    /* Configure BMP180 barometer */
    /* Read calibration data */
    BMP180_ReadCallibrationData(hgy87);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f805 	bl	8002e70 <BMP180_ReadCallibrationData>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <BMP180_ReadCallibrationData>:

static void BMP180_ReadCallibrationData(GY87_HandleTypeDef_t * hgy87) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	6078      	str	r0, [r7, #4]

    uint8_t callibrationData[22] = {0};
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	f107 030c 	add.w	r3, r7, #12
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	821a      	strh	r2, [r3, #16]
    uint16_t startRegisterAddress = 0xAA;
 8002e8c:	23aa      	movs	r3, #170	; 0xaa
 8002e8e:	83fb      	strh	r3, [r7, #30]

    // HAL_I2C_Mem_Read(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, startRegisterAddress, 1, callibrationData, 22, HAL_MAX_DELAY);
    /* Read calibration data */
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, startRegisterAddress, callibrationData, sizeof(callibrationData));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6858      	ldr	r0, [r3, #4]
 8002e94:	8bfb      	ldrh	r3, [r7, #30]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	2116      	movs	r1, #22
 8002e9e:	9100      	str	r1, [sp, #0]
 8002ea0:	2177      	movs	r1, #119	; 0x77
 8002ea2:	f000 f86d 	bl	8002f80 <MPU6050_ReadRegister>

    BMP180_CallibrationData.AC1 = ((callibrationData[0] << 8) | callibrationData[1]);
 8002ea6:	7a3b      	ldrb	r3, [r7, #8]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	b21a      	sxth	r2, r3
 8002eac:	7a7b      	ldrb	r3, [r7, #9]
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	b21a      	sxth	r2, r3
 8002eb4:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002eb6:	801a      	strh	r2, [r3, #0]
    BMP180_CallibrationData.AC2 = ((callibrationData[2] << 8) | callibrationData[3]);
 8002eb8:	7abb      	ldrb	r3, [r7, #10]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	b21a      	sxth	r2, r3
 8002ebe:	7afb      	ldrb	r3, [r7, #11]
 8002ec0:	b21b      	sxth	r3, r3
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	b21a      	sxth	r2, r3
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002ec8:	805a      	strh	r2, [r3, #2]
    BMP180_CallibrationData.AC3 = ((callibrationData[4] << 8) | callibrationData[5]);
 8002eca:	7b3b      	ldrb	r3, [r7, #12]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	b21a      	sxth	r2, r3
 8002ed0:	7b7b      	ldrb	r3, [r7, #13]
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b21a      	sxth	r2, r3
 8002ed8:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002eda:	809a      	strh	r2, [r3, #4]
    BMP180_CallibrationData.AC4 = ((callibrationData[6] << 8) | callibrationData[7]);
 8002edc:	7bbb      	ldrb	r3, [r7, #14]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002eee:	80da      	strh	r2, [r3, #6]
    BMP180_CallibrationData.AC5 = ((callibrationData[8] << 8) | callibrationData[9]);
 8002ef0:	7c3b      	ldrb	r3, [r7, #16]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	7c7b      	ldrb	r3, [r7, #17]
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	4313      	orrs	r3, r2
 8002efc:	b21b      	sxth	r3, r3
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002f02:	811a      	strh	r2, [r3, #8]
    BMP180_CallibrationData.AC6 = ((callibrationData[10] << 8) | callibrationData[11]);
 8002f04:	7cbb      	ldrb	r3, [r7, #18]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	b21a      	sxth	r2, r3
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	b21b      	sxth	r3, r3
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002f16:	815a      	strh	r2, [r3, #10]
    BMP180_CallibrationData.B1 = ((callibrationData[12] << 8) | callibrationData[13]);
 8002f18:	7d3b      	ldrb	r3, [r7, #20]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	b21a      	sxth	r2, r3
 8002f1e:	7d7b      	ldrb	r3, [r7, #21]
 8002f20:	b21b      	sxth	r3, r3
 8002f22:	4313      	orrs	r3, r2
 8002f24:	b21a      	sxth	r2, r3
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002f28:	819a      	strh	r2, [r3, #12]
    BMP180_CallibrationData.B2 = ((callibrationData[14] << 8) | callibrationData[15]);
 8002f2a:	7dbb      	ldrb	r3, [r7, #22]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	b21a      	sxth	r2, r3
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b21a      	sxth	r2, r3
 8002f38:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002f3a:	81da      	strh	r2, [r3, #14]
    BMP180_CallibrationData.MB = ((callibrationData[16] << 8) | callibrationData[17]);
 8002f3c:	7e3b      	ldrb	r3, [r7, #24]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	b21a      	sxth	r2, r3
 8002f42:	7e7b      	ldrb	r3, [r7, #25]
 8002f44:	b21b      	sxth	r3, r3
 8002f46:	4313      	orrs	r3, r2
 8002f48:	b21a      	sxth	r2, r3
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002f4c:	821a      	strh	r2, [r3, #16]
    BMP180_CallibrationData.MC = ((callibrationData[18] << 8) | callibrationData[19]);
 8002f4e:	7ebb      	ldrb	r3, [r7, #26]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	b21a      	sxth	r2, r3
 8002f54:	7efb      	ldrb	r3, [r7, #27]
 8002f56:	b21b      	sxth	r3, r3
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	b21a      	sxth	r2, r3
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002f5e:	825a      	strh	r2, [r3, #18]
    BMP180_CallibrationData.MD = ((callibrationData[20] << 8) | callibrationData[21]);
 8002f60:	7f3b      	ldrb	r3, [r7, #28]
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	b21a      	sxth	r2, r3
 8002f66:	7f7b      	ldrb	r3, [r7, #29]
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b21a      	sxth	r2, r3
 8002f6e:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <BMP180_ReadCallibrationData+0x10c>)
 8002f70:	829a      	strh	r2, [r3, #20]
}
 8002f72:	bf00      	nop
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000bcc 	.word	0x20000bcc

08002f80 <MPU6050_ReadRegister>:
    HAL_I2C_Mem_Read(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, 0xF6, 1, Temp_RAW, 2, 1000);

    return ((Temp_RAW[0] << 8) + Temp_RAW[1]);
}

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	72fb      	strb	r3, [r7, #11]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 8002f92:	7aba      	ldrb	r2, [r7, #10]
 8002f94:	7af9      	ldrb	r1, [r7, #11]
 8002f96:	7e3b      	ldrb	r3, [r7, #24]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff fd34 	bl	8002a0a <I2C_Read>
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	607b      	str	r3, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	72fb      	strb	r3, [r7, #11]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 8002fbc:	7aba      	ldrb	r2, [r7, #10]
 8002fbe:	7af9      	ldrb	r1, [r7, #11]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fd4d 	bl	8002a62 <I2C_Write>
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	72fb      	strb	r3, [r7, #11]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 8002fe2:	f107 0317 	add.w	r3, r7, #23
 8002fe6:	7aba      	ldrb	r2, [r7, #10]
 8002fe8:	7af9      	ldrb	r1, [r7, #11]
 8002fea:	2001      	movs	r0, #1
 8002fec:	9000      	str	r0, [sp, #0]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff ffc6 	bl	8002f80 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 8002ff4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d006      	beq.n	800300a <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	4313      	orrs	r3, r2
 8003004:	b2db      	uxtb	r3, r3
 8003006:	75bb      	strb	r3, [r7, #22]
 8003008:	e00a      	b.n	8003020 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	b25b      	sxtb	r3, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	b25a      	sxtb	r2, r3
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	b25b      	sxtb	r3, r3
 8003018:	4013      	ands	r3, r2
 800301a:	b25b      	sxtb	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8003020:	f107 0316 	add.w	r3, r7, #22
 8003024:	7aba      	ldrb	r2, [r7, #10]
 8003026:	7af9      	ldrb	r1, [r7, #11]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff ffbe 	bl	8002faa <MPU6050_WriteRegister>
}
 800302e:	bf00      	nop
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <GY87_Init+0x12>
        return NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	e028      	b.n	800309c <GY87_Init+0x64>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <GY87_Init+0x6c>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d101      	bne.n	8003056 <GY87_Init+0x1e>
        return NULL;
 8003052:	2300      	movs	r3, #0
 8003054:	e022      	b.n	800309c <GY87_Init+0x64>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fd2e 	bl	8002ab8 <GY87_InstanceInit>
 800305c:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01a      	beq.n	800309a <GY87_Init+0x62>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff fcb2 	bl	80029ce <I2C_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <GY87_Init+0x4e>
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff fe60 	bl	8002d36 <GY87_Configure>

            instancesNumber++;
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <GY87_Init+0x6c>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	3301      	adds	r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <GY87_Init+0x6c>)
 8003080:	701a      	strb	r2, [r3, #0]

            return hgy87;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	e00a      	b.n	800309c <GY87_Init+0x64>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	4618      	mov	r0, r3
 800308c:	f00b fc4e 	bl	800e92c <vPortFree>
            vPortFree(hgy87);
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f00b fc4b 	bl	800e92c <vPortFree>
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
#endif
            return NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <GY87_Init+0x64>

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
#endif
        return NULL;
 800309a:	2300      	movs	r3, #0
    }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000bc9 	.word	0x20000bc9

080030a8 <GY87_ReadGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

void GY87_ReadGyroscope(GY87_HandleTypeDef_t * hgy87, GY87_gyroscopeValues_t * gyroscopeValues) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_0250;
 80030b2:	23c3      	movs	r3, #195	; 0xc3
 80030b4:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != gyroscopeValues) {
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d051      	beq.n	8003160 <GY87_ReadGyroscope+0xb8>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d04e      	beq.n	8003160 <GY87_ReadGyroscope+0xb8>

        /* Read gyroscope in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6858      	ldr	r0, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7a19      	ldrb	r1, [r3, #8]
 80030ca:	f107 030c 	add.w	r3, r7, #12
 80030ce:	2202      	movs	r2, #2
 80030d0:	9200      	str	r2, [sp, #0]
 80030d2:	2243      	movs	r2, #67	; 0x43
 80030d4:	f7ff ff54 	bl	8002f80 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 80030d8:	7b3b      	ldrb	r3, [r7, #12]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	b21a      	sxth	r2, r3
 80030de:	7b7b      	ldrb	r3, [r7, #13]
 80030e0:	b21b      	sxth	r3, r3
 80030e2:	4313      	orrs	r3, r2
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80030f0:	b21a      	sxth	r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	801a      	strh	r2, [r3, #0]

        /* Read gyroscope in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6858      	ldr	r0, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7a19      	ldrb	r1, [r3, #8]
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	2202      	movs	r2, #2
 8003104:	9200      	str	r2, [sp, #0]
 8003106:	2245      	movs	r2, #69	; 0x45
 8003108:	f7ff ff3a 	bl	8002f80 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 800310c:	7b3b      	ldrb	r3, [r7, #12]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	b21a      	sxth	r2, r3
 8003112:	7b7b      	ldrb	r3, [r7, #13]
 8003114:	b21b      	sxth	r3, r3
 8003116:	4313      	orrs	r3, r2
 8003118:	b21b      	sxth	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003120:	fb92 f3f3 	sdiv	r3, r2, r3
 8003124:	b21a      	sxth	r2, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	805a      	strh	r2, [r3, #2]

        /* Read gyroscope in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6858      	ldr	r0, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	7a19      	ldrb	r1, [r3, #8]
 8003132:	f107 030c 	add.w	r3, r7, #12
 8003136:	2202      	movs	r2, #2
 8003138:	9200      	str	r2, [sp, #0]
 800313a:	2247      	movs	r2, #71	; 0x47
 800313c:	f7ff ff20 	bl	8002f80 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8003140:	7b3b      	ldrb	r3, [r7, #12]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	b21a      	sxth	r2, r3
 8003146:	7b7b      	ldrb	r3, [r7, #13]
 8003148:	b21b      	sxth	r3, r3
 800314a:	4313      	orrs	r3, r2
 800314c:	b21b      	sxth	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003154:	fb92 f3f3 	sdiv	r3, r2, r3
 8003158:	b21a      	sxth	r2, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	809a      	strh	r2, [r3, #4]
 800315e:	e009      	b.n	8003174 <GY87_ReadGyroscope+0xcc>

    } else {

        /* Wrong parameters */
        gyroscopeValues->gyroscopeX = 0;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2200      	movs	r2, #0
 8003164:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->gyroscopeY = 0;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2200      	movs	r2, #0
 800316a:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->gyroscopeZ = 0;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	809a      	strh	r2, [r3, #4]
    }
}
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <GY87_ReadAccelerometer>:

void GY87_ReadAccelerometer(GY87_HandleTypeDef_t * hgy87, GY87_accelerometerValues_t * accelerometerValues) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af02      	add	r7, sp, #8
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_SF_02;
 8003186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800318a:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != accelerometerValues) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d051      	beq.n	8003236 <GY87_ReadAccelerometer+0xba>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d04e      	beq.n	8003236 <GY87_ReadAccelerometer+0xba>

        /* Read accelerometer in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6858      	ldr	r0, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7a19      	ldrb	r1, [r3, #8]
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	2202      	movs	r2, #2
 80031a6:	9200      	str	r2, [sp, #0]
 80031a8:	223b      	movs	r2, #59	; 0x3b
 80031aa:	f7ff fee9 	bl	8002f80 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 80031ae:	7b3b      	ldrb	r3, [r7, #12]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	b21a      	sxth	r2, r3
 80031b4:	7b7b      	ldrb	r3, [r7, #13]
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	4313      	orrs	r3, r2
 80031ba:	b21b      	sxth	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80031c6:	b21a      	sxth	r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	801a      	strh	r2, [r3, #0]

        /* Read accelerometer in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6858      	ldr	r0, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7a19      	ldrb	r1, [r3, #8]
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	2202      	movs	r2, #2
 80031da:	9200      	str	r2, [sp, #0]
 80031dc:	223d      	movs	r2, #61	; 0x3d
 80031de:	f7ff fecf 	bl	8002f80 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 80031e2:	7b3b      	ldrb	r3, [r7, #12]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	b21a      	sxth	r2, r3
 80031e8:	7b7b      	ldrb	r3, [r7, #13]
 80031ea:	b21b      	sxth	r3, r3
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b21b      	sxth	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80031fa:	b21a      	sxth	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	805a      	strh	r2, [r3, #2]

        /* Read accelerometer in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6858      	ldr	r0, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7a19      	ldrb	r1, [r3, #8]
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	2202      	movs	r2, #2
 800320e:	9200      	str	r2, [sp, #0]
 8003210:	223f      	movs	r2, #63	; 0x3f
 8003212:	f7ff feb5 	bl	8002f80 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8003216:	7b3b      	ldrb	r3, [r7, #12]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	b21a      	sxth	r2, r3
 800321c:	7b7b      	ldrb	r3, [r7, #13]
 800321e:	b21b      	sxth	r3, r3
 8003220:	4313      	orrs	r3, r2
 8003222:	b21b      	sxth	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800322a:	fb92 f3f3 	sdiv	r3, r2, r3
 800322e:	b21a      	sxth	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	809a      	strh	r2, [r3, #4]
 8003234:	e009      	b.n	800324a <GY87_ReadAccelerometer+0xce>

    } else {
        /* Wrong parameters */
        accelerometerValues->accelerometerX = 0;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2200      	movs	r2, #0
 800323a:	801a      	strh	r2, [r3, #0]
        accelerometerValues->accelerometerY = 0;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2200      	movs	r2, #0
 8003240:	805a      	strh	r2, [r3, #2]
        accelerometerValues->accelerometerZ = 0;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2200      	movs	r2, #0
 8003246:	809a      	strh	r2, [r3, #4]
    }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <GY87_ReadTemperatureSensor>:

int16_t GY87_ReadTemperatureSensor(GY87_HandleTypeDef_t * hgy87) {
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af02      	add	r7, sp, #8
 8003258:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 800325a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800325e:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 8003260:	2324      	movs	r3, #36	; 0x24
 8003262:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hgy87) {
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <GY87_ReadTemperatureSensor+0x1c>
        return 0;
 800326a:	2300      	movs	r3, #0
 800326c:	e01b      	b.n	80032a6 <GY87_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6858      	ldr	r0, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7a19      	ldrb	r1, [r3, #8]
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	2202      	movs	r2, #2
 800327c:	9200      	str	r2, [sp, #0]
 800327e:	2241      	movs	r2, #65	; 0x41
 8003280:	f7ff fe7e 	bl	8002f80 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 8003284:	7a3b      	ldrb	r3, [r7, #8]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	b21a      	sxth	r2, r3
 800328a:	7a7b      	ldrb	r3, [r7, #9]
 800328c:	b21b      	sxth	r3, r3
 800328e:	4313      	orrs	r3, r2
 8003290:	b21b      	sxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003298:	fb92 f3f3 	sdiv	r3, r2, r3
 800329c:	b29a      	uxth	r2, r3
 800329e:	89bb      	ldrh	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	b21b      	sxth	r3, r3
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <GY87_ReadMagnetometer>:

void GY87_ReadMagnetometer(GY87_HandleTypeDef_t * hgy87, GY87_magnetometerValues_t * magnetometerValues) {
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af02      	add	r7, sp, #8
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 1;
 80032b8:	2301      	movs	r3, #1
 80032ba:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != magnetometerValues) {
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d051      	beq.n	8003366 <GY87_ReadMagnetometer+0xb8>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d04e      	beq.n	8003366 <GY87_ReadMagnetometer+0xb8>

        /* Read magnetometer in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6858      	ldr	r0, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	7a19      	ldrb	r1, [r3, #8]
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	2202      	movs	r2, #2
 80032d6:	9200      	str	r2, [sp, #0]
 80032d8:	2249      	movs	r2, #73	; 0x49
 80032da:	f7ff fe51 	bl	8002f80 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 80032de:	7b7b      	ldrb	r3, [r7, #13]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	7b3b      	ldrb	r3, [r7, #12]
 80032e6:	b21b      	sxth	r3, r3
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80032f6:	b21a      	sxth	r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	801a      	strh	r2, [r3, #0]

        /* Read magnetometer in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6858      	ldr	r0, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7a19      	ldrb	r1, [r3, #8]
 8003304:	f107 030c 	add.w	r3, r7, #12
 8003308:	2202      	movs	r2, #2
 800330a:	9200      	str	r2, [sp, #0]
 800330c:	224b      	movs	r2, #75	; 0x4b
 800330e:	f7ff fe37 	bl	8002f80 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8003312:	7b7b      	ldrb	r3, [r7, #13]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	b21a      	sxth	r2, r3
 8003318:	7b3b      	ldrb	r3, [r7, #12]
 800331a:	b21b      	sxth	r3, r3
 800331c:	4313      	orrs	r3, r2
 800331e:	b21b      	sxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003326:	fb92 f3f3 	sdiv	r3, r2, r3
 800332a:	b21a      	sxth	r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	805a      	strh	r2, [r3, #2]

        /* Read magnetometer in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6858      	ldr	r0, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7a19      	ldrb	r1, [r3, #8]
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	2202      	movs	r2, #2
 800333e:	9200      	str	r2, [sp, #0]
 8003340:	224d      	movs	r2, #77	; 0x4d
 8003342:	f7ff fe1d 	bl	8002f80 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8003346:	7b7b      	ldrb	r3, [r7, #13]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	b21a      	sxth	r2, r3
 800334c:	7b3b      	ldrb	r3, [r7, #12]
 800334e:	b21b      	sxth	r3, r3
 8003350:	4313      	orrs	r3, r2
 8003352:	b21b      	sxth	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800335a:	fb92 f3f3 	sdiv	r3, r2, r3
 800335e:	b21a      	sxth	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	809a      	strh	r2, [r3, #4]
 8003364:	e009      	b.n	800337a <GY87_ReadMagnetometer+0xcc>

    } else {
        /* Wrong parameters */
        magnetometerValues->magnetometerX = 0;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	801a      	strh	r2, [r3, #0]
        magnetometerValues->magnetometerY = 0;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	805a      	strh	r2, [r3, #2]
        magnetometerValues->magnetometerZ = 0;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2200      	movs	r2, #0
 8003376:	809a      	strh	r2, [r3, #4]
    }
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	0000      	movs	r0, r0
 8003384:	0000      	movs	r0, r0
	...

08003388 <GY87_ReadMagnetometerHeading>:

float GY87_ReadMagnetometerHeading(GY87_HandleTypeDef_t * hgy87) {
 8003388:	b5b0      	push	{r4, r5, r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

    /* Declare variable for compass heading */
    float heading;

    /* Check parameters */
    if (NULL != hgy87) {
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d04d      	beq.n	8003432 <GY87_ReadMagnetometerHeading+0xaa>

        GY87_ReadMagnetometer(hgy87, &magnetometerValues);
 8003396:	f107 030c 	add.w	r3, r7, #12
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff86 	bl	80032ae <GY87_ReadMagnetometer>

        /* Calculate heading */
        heading = atan2(-magnetometerValues.magnetometerY, -magnetometerValues.magnetometerX) * QMC5883L_RADIANS_TO_DEGREES_CONST + QMC5883L_MAGNETIC_DECLINATION + QMC5883L_CALIBRATION_OFFSET;
 80033a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033a6:	425b      	negs	r3, r3
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd f8c3 	bl	8000534 <__aeabi_i2d>
 80033ae:	4604      	mov	r4, r0
 80033b0:	460d      	mov	r5, r1
 80033b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033b6:	425b      	negs	r3, r3
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd f8bb 	bl	8000534 <__aeabi_i2d>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	ec43 2b11 	vmov	d1, r2, r3
 80033c6:	ec45 4b10 	vmov	d0, r4, r5
 80033ca:	f00e fc8f 	bl	8011cec <atan2>
 80033ce:	ec51 0b10 	vmov	r0, r1, d0
 80033d2:	a320      	add	r3, pc, #128	; (adr r3, 8003454 <GY87_ReadMagnetometerHeading+0xcc>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fd f916 	bl	8000608 <__aeabi_dmul>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	f7fc ff56 	bl	800029c <__adddf3>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <GY87_ReadMagnetometerHeading+0xc0>)
 80033fe:	f7fc ff4d 	bl	800029c <__adddf3>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f7fd fbf5 	bl	8000bf8 <__aeabi_d2f>
 800340e:	4603      	mov	r3, r0
 8003410:	617b      	str	r3, [r7, #20]

        /* Check if heading is within 0 and 360 degrees */
        if (heading < 0) {
 8003412:	edd7 7a05 	vldr	s15, [r7, #20]
 8003416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341e:	d50a      	bpl.n	8003436 <GY87_ReadMagnetometerHeading+0xae>
            heading += 360;
 8003420:	edd7 7a05 	vldr	s15, [r7, #20]
 8003424:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800344c <GY87_ReadMagnetometerHeading+0xc4>
 8003428:	ee77 7a87 	vadd.f32	s15, s15, s14
 800342c:	edc7 7a05 	vstr	s15, [r7, #20]
 8003430:	e001      	b.n	8003436 <GY87_ReadMagnetometerHeading+0xae>
        }

    } else {

        heading = -1;
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <GY87_ReadMagnetometerHeading+0xc8>)
 8003434:	617b      	str	r3, [r7, #20]
    }

    return heading;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	ee07 3a90 	vmov	s15, r3
}
 800343c:	eeb0 0a67 	vmov.f32	s0, s15
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bdb0      	pop	{r4, r5, r7, pc}
 8003446:	bf00      	nop
 8003448:	403a0000 	.word	0x403a0000
 800344c:	43b40000 	.word	0x43b40000
 8003450:	bf800000 	.word	0xbf800000
 8003454:	1a63c1f8 	.word	0x1a63c1f8
 8003458:	404ca5dc 	.word	0x404ca5dc

0800345c <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

    CDC_Transmit_FS(string, strlen((const char *)string));
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7fc ff0b 	bl	8000280 <strlen>
 800346a:	4603      	mov	r3, r0
 800346c:	b29b      	uxth	r3, r3
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f00b fb2b 	bl	800eacc <CDC_Transmit_FS>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
int8_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b090      	sub	sp, #64	; 0x40
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]

    /* Check parameters */
    if (NULL == message) {
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <LOG+0x18>
        return -1;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003496:	e049      	b.n	800352c <LOG+0xac>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d902      	bls.n	80034a4 <LOG+0x24>
        return -1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034a2:	e043      	b.n	800352c <LOG+0xac>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	f107 0310 	add.w	r3, r7, #16
 80034ac:	222e      	movs	r2, #46	; 0x2e
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f00c fd72 	bl	800ff9a <memset>

    if (LOG_INFORMATION == logType) {
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d108      	bne.n	80034ce <LOG+0x4e>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <LOG+0xb4>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00c fd6f 	bl	800ffaa <strcat>
 80034cc:	e022      	b.n	8003514 <LOG+0x94>
    } else if (LOG_DEBUGGING == logType) {
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d108      	bne.n	80034e6 <LOG+0x66>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <LOG+0xb8>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f00c fd63 	bl	800ffaa <strcat>
 80034e4:	e016      	b.n	8003514 <LOG+0x94>
    } else if (LOG_WARNING == logType) {
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d108      	bne.n	80034fe <LOG+0x7e>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <LOG+0xbc>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	f107 030c 	add.w	r3, r7, #12
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f00c fd57 	bl	800ffaa <strcat>
 80034fc:	e00a      	b.n	8003514 <LOG+0x94>
    } else if (LOG_ERROR == logType) {
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d107      	bne.n	8003514 <LOG+0x94>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <LOG+0xc0>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	f107 030c 	add.w	r3, r7, #12
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f00c fd4b 	bl	800ffaa <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8003514:	f107 030c 	add.w	r3, r7, #12
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4618      	mov	r0, r3
 800351c:	f00c fd45 	bl	800ffaa <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 8003520:	f107 030c 	add.w	r3, r7, #12
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff99 	bl	800345c <USB_Write>

    return 0;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3740      	adds	r7, #64	; 0x40
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000014 	.word	0x20000014
 8003538:	20000018 	.word	0x20000018
 800353c:	2000001c 	.word	0x2000001c
 8003540:	20000020 	.word	0x20000020

08003544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_Init+0x40>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0d      	ldr	r2, [pc, #52]	; (8003584 <HAL_Init+0x40>)
 800354e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_Init+0x40>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <HAL_Init+0x40>)
 800355a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800355e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <HAL_Init+0x40>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a07      	ldr	r2, [pc, #28]	; (8003584 <HAL_Init+0x40>)
 8003566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800356c:	2003      	movs	r0, #3
 800356e:	f000 fd13 	bl	8003f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003572:	200f      	movs	r0, #15
 8003574:	f000 f808 	bl	8003588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003578:	f7fe fbe0 	bl	8001d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023c00 	.word	0x40023c00

08003588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_InitTick+0x54>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <HAL_InitTick+0x58>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	4619      	mov	r1, r3
 800359a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800359e:	fbb3 f3f1 	udiv	r3, r3, r1
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fd2f 	bl	800400a <HAL_SYSTICK_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e00e      	b.n	80035d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b0f      	cmp	r3, #15
 80035ba:	d80a      	bhi.n	80035d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035bc:	2200      	movs	r2, #0
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035c4:	f000 fcf3 	bl	8003fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035c8:	4a06      	ldr	r2, [pc, #24]	; (80035e4 <HAL_InitTick+0x5c>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000000 	.word	0x20000000
 80035e0:	20000028 	.word	0x20000028
 80035e4:	20000024 	.word	0x20000024

080035e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_IncTick+0x20>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_IncTick+0x24>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	4a04      	ldr	r2, [pc, #16]	; (800360c <HAL_IncTick+0x24>)
 80035fa:	6013      	str	r3, [r2, #0]
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000028 	.word	0x20000028
 800360c:	20000be4 	.word	0x20000be4

08003610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return uwTick;
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_GetTick+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000be4 	.word	0x20000be4

08003628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7ff ffee 	bl	8003610 <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003640:	d005      	beq.n	800364e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_Delay+0x44>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800364e:	bf00      	nop
 8003650:	f7ff ffde 	bl	8003610 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	429a      	cmp	r2, r3
 800365e:	d8f7      	bhi.n	8003650 <HAL_Delay+0x28>
  {
  }
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000028 	.word	0x20000028

08003670 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e033      	b.n	80036ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fe fb80 	bl	8001d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d118      	bne.n	80036e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036b6:	f023 0302 	bic.w	r3, r3, #2
 80036ba:	f043 0202 	orr.w	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa86 	bl	8003bd4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
 80036de:	e001      	b.n	80036e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_ADC_Start+0x1a>
 800370e:	2302      	movs	r3, #2
 8003710:	e097      	b.n	8003842 <HAL_ADC_Start+0x14a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d018      	beq.n	800375a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003738:	4b45      	ldr	r3, [pc, #276]	; (8003850 <HAL_ADC_Start+0x158>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a45      	ldr	r2, [pc, #276]	; (8003854 <HAL_ADC_Start+0x15c>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0c9a      	lsrs	r2, r3, #18
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800374c:	e002      	b.n	8003754 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3b01      	subs	r3, #1
 8003752:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f9      	bne.n	800374e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d15f      	bne.n	8003828 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003792:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a6:	d106      	bne.n	80037b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f023 0206 	bic.w	r2, r3, #6
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	645a      	str	r2, [r3, #68]	; 0x44
 80037b4:	e002      	b.n	80037bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HAL_ADC_Start+0x160>)
 80037c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037d0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d129      	bne.n	8003840 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	e020      	b.n	8003840 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a16      	ldr	r2, [pc, #88]	; (800385c <HAL_ADC_Start+0x164>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d11b      	bne.n	8003840 <HAL_ADC_Start+0x148>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d114      	bne.n	8003840 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003824:	609a      	str	r2, [r3, #8]
 8003826:	e00b      	b.n	8003840 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	f043 0210 	orr.w	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f043 0201 	orr.w	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000000 	.word	0x20000000
 8003854:	431bde83 	.word	0x431bde83
 8003858:	40012300 	.word	0x40012300
 800385c:	40012000 	.word	0x40012000

08003860 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387c:	d113      	bne.n	80038a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800388c:	d10b      	bne.n	80038a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e063      	b.n	800396e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80038a6:	f7ff feb3 	bl	8003610 <HAL_GetTick>
 80038aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038ac:	e021      	b.n	80038f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038b4:	d01d      	beq.n	80038f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <HAL_ADC_PollForConversion+0x6c>
 80038bc:	f7ff fea8 	bl	8003610 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d212      	bcs.n	80038f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d00b      	beq.n	80038f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0204 	orr.w	r2, r3, #4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e03d      	b.n	800396e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d1d6      	bne.n	80038ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0212 	mvn.w	r2, #18
 8003908:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d123      	bne.n	800396c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11f      	bne.n	800396c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003944:	2b00      	cmp	r3, #0
 8003946:	d111      	bne.n	800396c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f043 0201 	orr.w	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x1c>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e105      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x228>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b09      	cmp	r3, #9
 80039ba:	d925      	bls.n	8003a08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68d9      	ldr	r1, [r3, #12]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	3b1e      	subs	r3, #30
 80039d2:	2207      	movs	r2, #7
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43da      	mvns	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	400a      	ands	r2, r1
 80039e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68d9      	ldr	r1, [r3, #12]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	4603      	mov	r3, r0
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4403      	add	r3, r0
 80039fa:	3b1e      	subs	r3, #30
 80039fc:	409a      	lsls	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	e022      	b.n	8003a4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6919      	ldr	r1, [r3, #16]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	2207      	movs	r2, #7
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43da      	mvns	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	400a      	ands	r2, r1
 8003a2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6919      	ldr	r1, [r3, #16]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4403      	add	r3, r0
 8003a44:	409a      	lsls	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d824      	bhi.n	8003aa0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	3b05      	subs	r3, #5
 8003a68:	221f      	movs	r2, #31
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	400a      	ands	r2, r1
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4618      	mov	r0, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	3b05      	subs	r3, #5
 8003a92:	fa00 f203 	lsl.w	r2, r0, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a9e:	e04c      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d824      	bhi.n	8003af2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3b23      	subs	r3, #35	; 0x23
 8003aba:	221f      	movs	r2, #31
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43da      	mvns	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3b23      	subs	r3, #35	; 0x23
 8003ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
 8003af0:	e023      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	3b41      	subs	r3, #65	; 0x41
 8003b04:	221f      	movs	r2, #31
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	400a      	ands	r2, r1
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4618      	mov	r0, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3b41      	subs	r3, #65	; 0x41
 8003b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <HAL_ADC_ConfigChannel+0x234>)
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_ADC_ConfigChannel+0x238>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d109      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x1cc>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b12      	cmp	r3, #18
 8003b4e:	d105      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <HAL_ADC_ConfigChannel+0x238>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d123      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x21e>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d003      	beq.n	8003b76 <HAL_ADC_ConfigChannel+0x1e6>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b11      	cmp	r3, #17
 8003b74:	d11b      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	605a      	str	r2, [r3, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d111      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_ADC_ConfigChannel+0x23c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <HAL_ADC_ConfigChannel+0x240>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	0c9a      	lsrs	r2, r3, #18
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ba0:	e002      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f9      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40012300 	.word	0x40012300
 8003bc8:	40012000 	.word	0x40012000
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	431bde83 	.word	0x431bde83

08003bd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bdc:	4b79      	ldr	r3, [pc, #484]	; (8003dc4 <ADC_Init+0x1f0>)
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	021a      	lsls	r2, r3, #8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6899      	ldr	r1, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	4a58      	ldr	r2, [pc, #352]	; (8003dc8 <ADC_Init+0x1f4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6899      	ldr	r1, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	e00f      	b.n	8003cd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cd0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0202 	bic.w	r2, r2, #2
 8003ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6899      	ldr	r1, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	7e1b      	ldrb	r3, [r3, #24]
 8003cec:	005a      	lsls	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01b      	beq.n	8003d38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	035a      	lsls	r2, r3, #13
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	e007      	b.n	8003d48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	051a      	lsls	r2, r3, #20
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6899      	ldr	r1, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d8a:	025a      	lsls	r2, r3, #9
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	029a      	lsls	r2, r3, #10
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40012300 	.word	0x40012300
 8003dc8:	0f000001 	.word	0x0f000001

08003dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <__NVIC_SetPriorityGrouping+0x44>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003de8:	4013      	ands	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dfe:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <__NVIC_SetPriorityGrouping+0x44>)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	60d3      	str	r3, [r2, #12]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <__NVIC_GetPriorityGrouping+0x18>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	f003 0307 	and.w	r3, r3, #7
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	db0b      	blt.n	8003e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	f003 021f 	and.w	r2, r3, #31
 8003e48:	4907      	ldr	r1, [pc, #28]	; (8003e68 <__NVIC_EnableIRQ+0x38>)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2001      	movs	r0, #1
 8003e52:	fa00 f202 	lsl.w	r2, r0, r2
 8003e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	e000e100 	.word	0xe000e100

08003e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	6039      	str	r1, [r7, #0]
 8003e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	db0a      	blt.n	8003e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	490c      	ldr	r1, [pc, #48]	; (8003eb8 <__NVIC_SetPriority+0x4c>)
 8003e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8a:	0112      	lsls	r2, r2, #4
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e94:	e00a      	b.n	8003eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4908      	ldr	r1, [pc, #32]	; (8003ebc <__NVIC_SetPriority+0x50>)
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	3b04      	subs	r3, #4
 8003ea4:	0112      	lsls	r2, r2, #4
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	761a      	strb	r2, [r3, #24]
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000e100 	.word	0xe000e100
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b089      	sub	sp, #36	; 0x24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f1c3 0307 	rsb	r3, r3, #7
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	bf28      	it	cs
 8003ede:	2304      	movcs	r3, #4
 8003ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	2b06      	cmp	r3, #6
 8003ee8:	d902      	bls.n	8003ef0 <NVIC_EncodePriority+0x30>
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3b03      	subs	r3, #3
 8003eee:	e000      	b.n	8003ef2 <NVIC_EncodePriority+0x32>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	401a      	ands	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	43d9      	mvns	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f18:	4313      	orrs	r3, r2
         );
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3724      	adds	r7, #36	; 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f2c:	f3bf 8f4f 	dsb	sy
}
 8003f30:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <__NVIC_SystemReset+0x24>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f3a:	4904      	ldr	r1, [pc, #16]	; (8003f4c <__NVIC_SystemReset+0x24>)
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <__NVIC_SystemReset+0x28>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f42:	f3bf 8f4f 	dsb	sy
}
 8003f46:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003f48:	bf00      	nop
 8003f4a:	e7fd      	b.n	8003f48 <__NVIC_SystemReset+0x20>
 8003f4c:	e000ed00 	.word	0xe000ed00
 8003f50:	05fa0004 	.word	0x05fa0004

08003f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f64:	d301      	bcc.n	8003f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f66:	2301      	movs	r3, #1
 8003f68:	e00f      	b.n	8003f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <SysTick_Config+0x40>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f72:	210f      	movs	r1, #15
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f78:	f7ff ff78 	bl	8003e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <SysTick_Config+0x40>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f82:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <SysTick_Config+0x40>)
 8003f84:	2207      	movs	r2, #7
 8003f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	e000e010 	.word	0xe000e010

08003f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff ff13 	bl	8003dcc <__NVIC_SetPriorityGrouping>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b086      	sub	sp, #24
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fc0:	f7ff ff28 	bl	8003e14 <__NVIC_GetPriorityGrouping>
 8003fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	6978      	ldr	r0, [r7, #20]
 8003fcc:	f7ff ff78 	bl	8003ec0 <NVIC_EncodePriority>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff ff47 	bl	8003e6c <__NVIC_SetPriority>
}
 8003fde:	bf00      	nop
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	4603      	mov	r3, r0
 8003fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ff1b 	bl	8003e30 <__NVIC_EnableIRQ>
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004006:	f7ff ff8f 	bl	8003f28 <__NVIC_SystemReset>

0800400a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff ff9e 	bl	8003f54 <SysTick_Config>
 8004018:	4603      	mov	r3, r0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004030:	f7ff faee 	bl	8003610 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e099      	b.n	8004174 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004060:	e00f      	b.n	8004082 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004062:	f7ff fad5 	bl	8003610 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b05      	cmp	r3, #5
 800406e:	d908      	bls.n	8004082 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2203      	movs	r2, #3
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e078      	b.n	8004174 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e8      	bne.n	8004062 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4b38      	ldr	r3, [pc, #224]	; (800417c <HAL_DMA_Init+0x158>)
 800409c:	4013      	ands	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d107      	bne.n	80040ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	4313      	orrs	r3, r2
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0307 	bic.w	r3, r3, #7
 8004102:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	2b04      	cmp	r3, #4
 8004114:	d117      	bne.n	8004146 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00e      	beq.n	8004146 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8e5 	bl	80042f8 <DMA_CheckFifoParam>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2240      	movs	r2, #64	; 0x40
 8004138:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e016      	b.n	8004174 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f89c 	bl	800428c <DMA_CalcBaseAndBitshift>
 8004154:	4603      	mov	r3, r0
 8004156:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	223f      	movs	r2, #63	; 0x3f
 800415e:	409a      	lsls	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	f010803f 	.word	0xf010803f

08004180 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_DMA_Start_IT+0x26>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e040      	b.n	8004228 <HAL_DMA_Start_IT+0xa8>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d12f      	bne.n	800421a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f82e 	bl	8004230 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	223f      	movs	r2, #63	; 0x3f
 80041da:	409a      	lsls	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0216 	orr.w	r2, r2, #22
 80041ee:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0208 	orr.w	r2, r2, #8
 8004206:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e005      	b.n	8004226 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8004222:	2302      	movs	r3, #2
 8004224:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004226:	7dfb      	ldrb	r3, [r7, #23]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800424c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d108      	bne.n	8004270 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800426e:	e007      	b.n	8004280 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	60da      	str	r2, [r3, #12]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	3b10      	subs	r3, #16
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <DMA_CalcBaseAndBitshift+0x64>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042a6:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <DMA_CalcBaseAndBitshift+0x68>)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d909      	bls.n	80042ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	1d1a      	adds	r2, r3, #4
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	659a      	str	r2, [r3, #88]	; 0x58
 80042cc:	e007      	b.n	80042de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	aaaaaaab 	.word	0xaaaaaaab
 80042f4:	08012424 	.word	0x08012424

080042f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d11f      	bne.n	8004352 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b03      	cmp	r3, #3
 8004316:	d856      	bhi.n	80043c6 <DMA_CheckFifoParam+0xce>
 8004318:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <DMA_CheckFifoParam+0x28>)
 800431a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431e:	bf00      	nop
 8004320:	08004331 	.word	0x08004331
 8004324:	08004343 	.word	0x08004343
 8004328:	08004331 	.word	0x08004331
 800432c:	080043c7 	.word	0x080043c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d046      	beq.n	80043ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004340:	e043      	b.n	80043ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800434a:	d140      	bne.n	80043ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004350:	e03d      	b.n	80043ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435a:	d121      	bne.n	80043a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b03      	cmp	r3, #3
 8004360:	d837      	bhi.n	80043d2 <DMA_CheckFifoParam+0xda>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <DMA_CheckFifoParam+0x70>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	08004379 	.word	0x08004379
 800436c:	0800437f 	.word	0x0800437f
 8004370:	08004379 	.word	0x08004379
 8004374:	08004391 	.word	0x08004391
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      break;
 800437c:	e030      	b.n	80043e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d025      	beq.n	80043d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800438e:	e022      	b.n	80043d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004398:	d11f      	bne.n	80043da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439e:	e01c      	b.n	80043da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d903      	bls.n	80043ae <DMA_CheckFifoParam+0xb6>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d003      	beq.n	80043b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043ac:	e018      	b.n	80043e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
      break;
 80043b2:	e015      	b.n	80043e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00e      	beq.n	80043de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      break;
 80043c4:	e00b      	b.n	80043de <DMA_CheckFifoParam+0xe6>
      break;
 80043c6:	bf00      	nop
 80043c8:	e00a      	b.n	80043e0 <DMA_CheckFifoParam+0xe8>
      break;
 80043ca:	bf00      	nop
 80043cc:	e008      	b.n	80043e0 <DMA_CheckFifoParam+0xe8>
      break;
 80043ce:	bf00      	nop
 80043d0:	e006      	b.n	80043e0 <DMA_CheckFifoParam+0xe8>
      break;
 80043d2:	bf00      	nop
 80043d4:	e004      	b.n	80043e0 <DMA_CheckFifoParam+0xe8>
      break;
 80043d6:	bf00      	nop
 80043d8:	e002      	b.n	80043e0 <DMA_CheckFifoParam+0xe8>
      break;
 80043da:	bf00      	nop
 80043dc:	e000      	b.n	80043e0 <DMA_CheckFifoParam+0xe8>
      break;
 80043de:	bf00      	nop
    }
  }

  return status;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop

080043f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	; 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	e159      	b.n	80046c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800440c:	2201      	movs	r2, #1
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	429a      	cmp	r2, r3
 8004426:	f040 8148 	bne.w	80046ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d005      	beq.n	8004442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800443e:	2b02      	cmp	r3, #2
 8004440:	d130      	bne.n	80044a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	2203      	movs	r2, #3
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4013      	ands	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004478:	2201      	movs	r2, #1
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 0201 	and.w	r2, r3, #1
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d017      	beq.n	80044e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d123      	bne.n	8004534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	08da      	lsrs	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3208      	adds	r2, #8
 80044f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	220f      	movs	r2, #15
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	08da      	lsrs	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3208      	adds	r2, #8
 800452e:	69b9      	ldr	r1, [r7, #24]
 8004530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	2203      	movs	r2, #3
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0203 	and.w	r2, r3, #3
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4313      	orrs	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a2 	beq.w	80046ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	4b57      	ldr	r3, [pc, #348]	; (80046d8 <HAL_GPIO_Init+0x2e8>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	4a56      	ldr	r2, [pc, #344]	; (80046d8 <HAL_GPIO_Init+0x2e8>)
 8004580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004584:	6453      	str	r3, [r2, #68]	; 0x44
 8004586:	4b54      	ldr	r3, [pc, #336]	; (80046d8 <HAL_GPIO_Init+0x2e8>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004592:	4a52      	ldr	r2, [pc, #328]	; (80046dc <HAL_GPIO_Init+0x2ec>)
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	3302      	adds	r3, #2
 800459a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	220f      	movs	r2, #15
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a49      	ldr	r2, [pc, #292]	; (80046e0 <HAL_GPIO_Init+0x2f0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d019      	beq.n	80045f2 <HAL_GPIO_Init+0x202>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a48      	ldr	r2, [pc, #288]	; (80046e4 <HAL_GPIO_Init+0x2f4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_GPIO_Init+0x1fe>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a47      	ldr	r2, [pc, #284]	; (80046e8 <HAL_GPIO_Init+0x2f8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00d      	beq.n	80045ea <HAL_GPIO_Init+0x1fa>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a46      	ldr	r2, [pc, #280]	; (80046ec <HAL_GPIO_Init+0x2fc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d007      	beq.n	80045e6 <HAL_GPIO_Init+0x1f6>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a45      	ldr	r2, [pc, #276]	; (80046f0 <HAL_GPIO_Init+0x300>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_GPIO_Init+0x1f2>
 80045de:	2304      	movs	r3, #4
 80045e0:	e008      	b.n	80045f4 <HAL_GPIO_Init+0x204>
 80045e2:	2307      	movs	r3, #7
 80045e4:	e006      	b.n	80045f4 <HAL_GPIO_Init+0x204>
 80045e6:	2303      	movs	r3, #3
 80045e8:	e004      	b.n	80045f4 <HAL_GPIO_Init+0x204>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e002      	b.n	80045f4 <HAL_GPIO_Init+0x204>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <HAL_GPIO_Init+0x204>
 80045f2:	2300      	movs	r3, #0
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	f002 0203 	and.w	r2, r2, #3
 80045fa:	0092      	lsls	r2, r2, #2
 80045fc:	4093      	lsls	r3, r2
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004604:	4935      	ldr	r1, [pc, #212]	; (80046dc <HAL_GPIO_Init+0x2ec>)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	089b      	lsrs	r3, r3, #2
 800460a:	3302      	adds	r3, #2
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004612:	4b38      	ldr	r3, [pc, #224]	; (80046f4 <HAL_GPIO_Init+0x304>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004636:	4a2f      	ldr	r2, [pc, #188]	; (80046f4 <HAL_GPIO_Init+0x304>)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800463c:	4b2d      	ldr	r3, [pc, #180]	; (80046f4 <HAL_GPIO_Init+0x304>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004660:	4a24      	ldr	r2, [pc, #144]	; (80046f4 <HAL_GPIO_Init+0x304>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004666:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <HAL_GPIO_Init+0x304>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	43db      	mvns	r3, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4013      	ands	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800468a:	4a1a      	ldr	r2, [pc, #104]	; (80046f4 <HAL_GPIO_Init+0x304>)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <HAL_GPIO_Init+0x304>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	43db      	mvns	r3, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	4013      	ands	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046b4:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <HAL_GPIO_Init+0x304>)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3301      	adds	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b0f      	cmp	r3, #15
 80046c4:	f67f aea2 	bls.w	800440c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	3724      	adds	r7, #36	; 0x24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40013800 	.word	0x40013800
 80046e0:	40020000 	.word	0x40020000
 80046e4:	40020400 	.word	0x40020400
 80046e8:	40020800 	.word	0x40020800
 80046ec:	40020c00 	.word	0x40020c00
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40013c00 	.word	0x40013c00

080046f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	887b      	ldrh	r3, [r7, #2]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e001      	b.n	800471a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
 8004734:	4613      	mov	r3, r2
 8004736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004738:	787b      	ldrb	r3, [r7, #1]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800473e:	887a      	ldrh	r2, [r7, #2]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004744:	e003      	b.n	800474e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004746:	887b      	ldrh	r3, [r7, #2]
 8004748:	041a      	lsls	r2, r3, #16
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	619a      	str	r2, [r3, #24]
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e12b      	b.n	80049c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd fb4a 	bl	8001e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2224      	movs	r2, #36	; 0x24
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047c0:	f002 fe38 	bl	8007434 <HAL_RCC_GetPCLK1Freq>
 80047c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4a81      	ldr	r2, [pc, #516]	; (80049d0 <HAL_I2C_Init+0x274>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d807      	bhi.n	80047e0 <HAL_I2C_Init+0x84>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a80      	ldr	r2, [pc, #512]	; (80049d4 <HAL_I2C_Init+0x278>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bf94      	ite	ls
 80047d8:	2301      	movls	r3, #1
 80047da:	2300      	movhi	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e006      	b.n	80047ee <HAL_I2C_Init+0x92>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a7d      	ldr	r2, [pc, #500]	; (80049d8 <HAL_I2C_Init+0x27c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	bf94      	ite	ls
 80047e8:	2301      	movls	r3, #1
 80047ea:	2300      	movhi	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e0e7      	b.n	80049c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a78      	ldr	r2, [pc, #480]	; (80049dc <HAL_I2C_Init+0x280>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0c9b      	lsrs	r3, r3, #18
 8004800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4a6a      	ldr	r2, [pc, #424]	; (80049d0 <HAL_I2C_Init+0x274>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d802      	bhi.n	8004830 <HAL_I2C_Init+0xd4>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	3301      	adds	r3, #1
 800482e:	e009      	b.n	8004844 <HAL_I2C_Init+0xe8>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004836:	fb02 f303 	mul.w	r3, r2, r3
 800483a:	4a69      	ldr	r2, [pc, #420]	; (80049e0 <HAL_I2C_Init+0x284>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	099b      	lsrs	r3, r3, #6
 8004842:	3301      	adds	r3, #1
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	430b      	orrs	r3, r1
 800484a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004856:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	495c      	ldr	r1, [pc, #368]	; (80049d0 <HAL_I2C_Init+0x274>)
 8004860:	428b      	cmp	r3, r1
 8004862:	d819      	bhi.n	8004898 <HAL_I2C_Init+0x13c>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1e59      	subs	r1, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004872:	1c59      	adds	r1, r3, #1
 8004874:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004878:	400b      	ands	r3, r1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_I2C_Init+0x138>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1e59      	subs	r1, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fbb1 f3f3 	udiv	r3, r1, r3
 800488c:	3301      	adds	r3, #1
 800488e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004892:	e051      	b.n	8004938 <HAL_I2C_Init+0x1dc>
 8004894:	2304      	movs	r3, #4
 8004896:	e04f      	b.n	8004938 <HAL_I2C_Init+0x1dc>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d111      	bne.n	80048c4 <HAL_I2C_Init+0x168>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1e58      	subs	r0, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	440b      	add	r3, r1
 80048ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e012      	b.n	80048ea <HAL_I2C_Init+0x18e>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1e58      	subs	r0, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	0099      	lsls	r1, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048da:	3301      	adds	r3, #1
 80048dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_Init+0x196>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e022      	b.n	8004938 <HAL_I2C_Init+0x1dc>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10e      	bne.n	8004918 <HAL_I2C_Init+0x1bc>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1e58      	subs	r0, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	440b      	add	r3, r1
 8004908:	fbb0 f3f3 	udiv	r3, r0, r3
 800490c:	3301      	adds	r3, #1
 800490e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004916:	e00f      	b.n	8004938 <HAL_I2C_Init+0x1dc>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1e58      	subs	r0, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	0099      	lsls	r1, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	fbb0 f3f3 	udiv	r3, r0, r3
 800492e:	3301      	adds	r3, #1
 8004930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	6809      	ldr	r1, [r1, #0]
 800493c:	4313      	orrs	r3, r2
 800493e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004966:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6911      	ldr	r1, [r2, #16]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68d2      	ldr	r2, [r2, #12]
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	430b      	orrs	r3, r1
 800497a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	000186a0 	.word	0x000186a0
 80049d4:	001e847f 	.word	0x001e847f
 80049d8:	003d08ff 	.word	0x003d08ff
 80049dc:	431bde83 	.word	0x431bde83
 80049e0:	10624dd3 	.word	0x10624dd3

080049e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	817b      	strh	r3, [r7, #10]
 80049f6:	460b      	mov	r3, r1
 80049f8:	813b      	strh	r3, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049fe:	f7fe fe07 	bl	8003610 <HAL_GetTick>
 8004a02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	f040 80d9 	bne.w	8004bc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	2319      	movs	r3, #25
 8004a18:	2201      	movs	r2, #1
 8004a1a:	496d      	ldr	r1, [pc, #436]	; (8004bd0 <HAL_I2C_Mem_Write+0x1ec>)
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fc7f 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e0cc      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_I2C_Mem_Write+0x56>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e0c5      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d007      	beq.n	8004a60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2221      	movs	r2, #33	; 0x21
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2240      	movs	r2, #64	; 0x40
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a3a      	ldr	r2, [r7, #32]
 8004a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a4d      	ldr	r2, [pc, #308]	; (8004bd4 <HAL_I2C_Mem_Write+0x1f0>)
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aa2:	88f8      	ldrh	r0, [r7, #6]
 8004aa4:	893a      	ldrh	r2, [r7, #8]
 8004aa6:	8979      	ldrh	r1, [r7, #10]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fab6 	bl	8005024 <I2C_RequestMemoryWrite>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d052      	beq.n	8004b64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e081      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fd00 	bl	80054cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d107      	bne.n	8004aea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e06b      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d11b      	bne.n	8004b64 <HAL_I2C_Mem_Write+0x180>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d017      	beq.n	8004b64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	781a      	ldrb	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1aa      	bne.n	8004ac2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fcec 	bl	800554e <I2C_WaitOnBTFFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d107      	bne.n	8004b94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e016      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e000      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bc4:	2302      	movs	r3, #2
  }
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	00100002 	.word	0x00100002
 8004bd4:	ffff0000 	.word	0xffff0000

08004bd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08c      	sub	sp, #48	; 0x30
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	4608      	mov	r0, r1
 8004be2:	4611      	mov	r1, r2
 8004be4:	461a      	mov	r2, r3
 8004be6:	4603      	mov	r3, r0
 8004be8:	817b      	strh	r3, [r7, #10]
 8004bea:	460b      	mov	r3, r1
 8004bec:	813b      	strh	r3, [r7, #8]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bf2:	f7fe fd0d 	bl	8003610 <HAL_GetTick>
 8004bf6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	f040 8208 	bne.w	8005016 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	2319      	movs	r3, #25
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	497b      	ldr	r1, [pc, #492]	; (8004dfc <HAL_I2C_Mem_Read+0x224>)
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fb85 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e1fb      	b.n	8005018 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_I2C_Mem_Read+0x56>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e1f4      	b.n	8005018 <HAL_I2C_Mem_Read+0x440>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d007      	beq.n	8004c54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2222      	movs	r2, #34	; 0x22
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2240      	movs	r2, #64	; 0x40
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a5b      	ldr	r2, [pc, #364]	; (8004e00 <HAL_I2C_Mem_Read+0x228>)
 8004c94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c96:	88f8      	ldrh	r0, [r7, #6]
 8004c98:	893a      	ldrh	r2, [r7, #8]
 8004c9a:	8979      	ldrh	r1, [r7, #10]
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fa52 	bl	8005150 <I2C_RequestMemoryRead>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e1b0      	b.n	8005018 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d113      	bne.n	8004ce6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	623b      	str	r3, [r7, #32]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e184      	b.n	8004ff0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d11b      	bne.n	8004d26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e164      	b.n	8004ff0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d11b      	bne.n	8004d66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	e144      	b.n	8004ff0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d7c:	e138      	b.n	8004ff0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	f200 80f1 	bhi.w	8004f6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d123      	bne.n	8004dd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fc1b 	bl	80055d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e139      	b.n	8005018 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dd6:	e10b      	b.n	8004ff0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d14e      	bne.n	8004e7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	2200      	movs	r2, #0
 8004de8:	4906      	ldr	r1, [pc, #24]	; (8004e04 <HAL_I2C_Mem_Read+0x22c>)
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fa98 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e10e      	b.n	8005018 <HAL_I2C_Mem_Read+0x440>
 8004dfa:	bf00      	nop
 8004dfc:	00100002 	.word	0x00100002
 8004e00:	ffff0000 	.word	0xffff0000
 8004e04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e7c:	e0b8      	b.n	8004ff0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	2200      	movs	r2, #0
 8004e86:	4966      	ldr	r1, [pc, #408]	; (8005020 <HAL_I2C_Mem_Read+0x448>)
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fa49 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0bf      	b.n	8005018 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	494f      	ldr	r1, [pc, #316]	; (8005020 <HAL_I2C_Mem_Read+0x448>)
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fa1b 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e091      	b.n	8005018 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f68:	e042      	b.n	8004ff0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fb2e 	bl	80055d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e04c      	b.n	8005018 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d118      	bne.n	8004ff0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f47f aec2 	bne.w	8004d7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	e000      	b.n	8005018 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005016:	2302      	movs	r3, #2
  }
}
 8005018:	4618      	mov	r0, r3
 800501a:	3728      	adds	r7, #40	; 0x28
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	00010004 	.word	0x00010004

08005024 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	4608      	mov	r0, r1
 800502e:	4611      	mov	r1, r2
 8005030:	461a      	mov	r2, r3
 8005032:	4603      	mov	r3, r0
 8005034:	817b      	strh	r3, [r7, #10]
 8005036:	460b      	mov	r3, r1
 8005038:	813b      	strh	r3, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	2200      	movs	r2, #0
 8005056:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f960 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00d      	beq.n	8005082 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005074:	d103      	bne.n	800507e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e05f      	b.n	8005142 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005082:	897b      	ldrh	r3, [r7, #10]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	461a      	mov	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005090:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	6a3a      	ldr	r2, [r7, #32]
 8005096:	492d      	ldr	r1, [pc, #180]	; (800514c <I2C_RequestMemoryWrite+0x128>)
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f998 	bl	80053ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e04c      	b.n	8005142 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	6a39      	ldr	r1, [r7, #32]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fa02 	bl	80054cc <I2C_WaitOnTXEFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00d      	beq.n	80050ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d107      	bne.n	80050e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e02b      	b.n	8005142 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d105      	bne.n	80050fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050f0:	893b      	ldrh	r3, [r7, #8]
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	611a      	str	r2, [r3, #16]
 80050fa:	e021      	b.n	8005140 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050fc:	893b      	ldrh	r3, [r7, #8]
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	b29b      	uxth	r3, r3
 8005102:	b2da      	uxtb	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510c:	6a39      	ldr	r1, [r7, #32]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f9dc 	bl	80054cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00d      	beq.n	8005136 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	2b04      	cmp	r3, #4
 8005120:	d107      	bne.n	8005132 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005130:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e005      	b.n	8005142 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005136:	893b      	ldrh	r3, [r7, #8]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	00010002 	.word	0x00010002

08005150 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	4608      	mov	r0, r1
 800515a:	4611      	mov	r1, r2
 800515c:	461a      	mov	r2, r3
 800515e:	4603      	mov	r3, r0
 8005160:	817b      	strh	r3, [r7, #10]
 8005162:	460b      	mov	r3, r1
 8005164:	813b      	strh	r3, [r7, #8]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005178:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005188:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	2200      	movs	r2, #0
 8005192:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f8c2 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00d      	beq.n	80051be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b0:	d103      	bne.n	80051ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0aa      	b.n	8005314 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051be:	897b      	ldrh	r3, [r7, #10]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	4952      	ldr	r1, [pc, #328]	; (800531c <I2C_RequestMemoryRead+0x1cc>)
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f8fa 	bl	80053ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e097      	b.n	8005314 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fc:	6a39      	ldr	r1, [r7, #32]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f964 	bl	80054cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00d      	beq.n	8005226 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	2b04      	cmp	r3, #4
 8005210:	d107      	bne.n	8005222 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005220:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e076      	b.n	8005314 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d105      	bne.n	8005238 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800522c:	893b      	ldrh	r3, [r7, #8]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	611a      	str	r2, [r3, #16]
 8005236:	e021      	b.n	800527c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005238:	893b      	ldrh	r3, [r7, #8]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	b29b      	uxth	r3, r3
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	6a39      	ldr	r1, [r7, #32]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f93e 	bl	80054cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00d      	beq.n	8005272 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	2b04      	cmp	r3, #4
 800525c:	d107      	bne.n	800526e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e050      	b.n	8005314 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005272:	893b      	ldrh	r3, [r7, #8]
 8005274:	b2da      	uxtb	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800527c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527e:	6a39      	ldr	r1, [r7, #32]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f923 	bl	80054cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	2b04      	cmp	r3, #4
 8005292:	d107      	bne.n	80052a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e035      	b.n	8005314 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	2200      	movs	r2, #0
 80052c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f82b 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00d      	beq.n	80052ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052de:	d103      	bne.n	80052e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e013      	b.n	8005314 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052ec:	897b      	ldrh	r3, [r7, #10]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	6a3a      	ldr	r2, [r7, #32]
 8005300:	4906      	ldr	r1, [pc, #24]	; (800531c <I2C_RequestMemoryRead+0x1cc>)
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f863 	bl	80053ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	00010002 	.word	0x00010002

08005320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005330:	e025      	b.n	800537e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005338:	d021      	beq.n	800537e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533a:	f7fe f969 	bl	8003610 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <I2C_WaitOnFlagUntilTimeout+0x30>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d116      	bne.n	800537e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f043 0220 	orr.w	r2, r3, #32
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e023      	b.n	80053c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10d      	bne.n	80053a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	43da      	mvns	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	bf0c      	ite	eq
 800539a:	2301      	moveq	r3, #1
 800539c:	2300      	movne	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	e00c      	b.n	80053be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	43da      	mvns	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4013      	ands	r3, r2
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d0b6      	beq.n	8005332 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053dc:	e051      	b.n	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ec:	d123      	bne.n	8005436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005406:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f043 0204 	orr.w	r2, r3, #4
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e046      	b.n	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800543c:	d021      	beq.n	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543e:	f7fe f8e7 	bl	8003610 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d116      	bne.n	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f043 0220 	orr.w	r2, r3, #32
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e020      	b.n	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	d10c      	bne.n	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	43da      	mvns	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4013      	ands	r3, r2
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	bf14      	ite	ne
 800549e:	2301      	movne	r3, #1
 80054a0:	2300      	moveq	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	e00b      	b.n	80054be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	43da      	mvns	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4013      	ands	r3, r2
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d18d      	bne.n	80053de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054d8:	e02d      	b.n	8005536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f8ce 	bl	800567c <I2C_IsAcknowledgeFailed>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e02d      	b.n	8005546 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f0:	d021      	beq.n	8005536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f2:	f7fe f88d 	bl	8003610 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d302      	bcc.n	8005508 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d116      	bne.n	8005536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f043 0220 	orr.w	r2, r3, #32
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e007      	b.n	8005546 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005540:	2b80      	cmp	r3, #128	; 0x80
 8005542:	d1ca      	bne.n	80054da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800555a:	e02d      	b.n	80055b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f88d 	bl	800567c <I2C_IsAcknowledgeFailed>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e02d      	b.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005572:	d021      	beq.n	80055b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005574:	f7fe f84c 	bl	8003610 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	429a      	cmp	r2, r3
 8005582:	d302      	bcc.n	800558a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d116      	bne.n	80055b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	f043 0220 	orr.w	r2, r3, #32
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e007      	b.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d1ca      	bne.n	800555c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055dc:	e042      	b.n	8005664 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d119      	bne.n	8005620 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0210 	mvn.w	r2, #16
 80055f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e029      	b.n	8005674 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005620:	f7fd fff6 	bl	8003610 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	d302      	bcc.n	8005636 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d116      	bne.n	8005664 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f043 0220 	orr.w	r2, r3, #32
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e007      	b.n	8005674 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d1b5      	bne.n	80055de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005692:	d11b      	bne.n	80056cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800569c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	f043 0204 	orr.w	r2, r3, #4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056dc:	b08f      	sub	sp, #60	; 0x3c
 80056de:	af0a      	add	r7, sp, #40	; 0x28
 80056e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e10f      	b.n	800590c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f009 fb28 	bl	800ed5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2203      	movs	r2, #3
 8005710:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f003 f95f 	bl	80089ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	687e      	ldr	r6, [r7, #4]
 8005738:	466d      	mov	r5, sp
 800573a:	f106 0410 	add.w	r4, r6, #16
 800573e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005746:	e894 0003 	ldmia.w	r4, {r0, r1}
 800574a:	e885 0003 	stmia.w	r5, {r0, r1}
 800574e:	1d33      	adds	r3, r6, #4
 8005750:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005752:	6838      	ldr	r0, [r7, #0]
 8005754:	f003 f836 	bl	80087c4 <USB_CoreInit>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2202      	movs	r2, #2
 8005762:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e0d0      	b.n	800590c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f003 f94d 	bl	8008a10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
 800577a:	e04a      	b.n	8005812 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800577c:	7bfa      	ldrb	r2, [r7, #15]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	333d      	adds	r3, #61	; 0x3d
 800578c:	2201      	movs	r2, #1
 800578e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005790:	7bfa      	ldrb	r2, [r7, #15]
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	333c      	adds	r3, #60	; 0x3c
 80057a0:	7bfa      	ldrb	r2, [r7, #15]
 80057a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80057a4:	7bfa      	ldrb	r2, [r7, #15]
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	b298      	uxth	r0, r3
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	3344      	adds	r3, #68	; 0x44
 80057b8:	4602      	mov	r2, r0
 80057ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057bc:	7bfa      	ldrb	r2, [r7, #15]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	3340      	adds	r3, #64	; 0x40
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057d0:	7bfa      	ldrb	r2, [r7, #15]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	3348      	adds	r3, #72	; 0x48
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057e4:	7bfa      	ldrb	r2, [r7, #15]
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	334c      	adds	r3, #76	; 0x4c
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057f8:	7bfa      	ldrb	r2, [r7, #15]
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	3354      	adds	r3, #84	; 0x54
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	3301      	adds	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
 8005812:	7bfa      	ldrb	r2, [r7, #15]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	d3af      	bcc.n	800577c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]
 8005820:	e044      	b.n	80058ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005822:	7bfa      	ldrb	r2, [r7, #15]
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	440b      	add	r3, r1
 8005830:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005838:	7bfa      	ldrb	r2, [r7, #15]
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	4413      	add	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800584a:	7bfa      	ldrb	r2, [r7, #15]
 800584c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800584e:	7bfa      	ldrb	r2, [r7, #15]
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005864:	7bfa      	ldrb	r2, [r7, #15]
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800587a:	7bfa      	ldrb	r2, [r7, #15]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005890:	7bfa      	ldrb	r2, [r7, #15]
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	3301      	adds	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
 80058ac:	7bfa      	ldrb	r2, [r7, #15]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d3b5      	bcc.n	8005822 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	687e      	ldr	r6, [r7, #4]
 80058be:	466d      	mov	r5, sp
 80058c0:	f106 0410 	add.w	r4, r6, #16
 80058c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80058d4:	1d33      	adds	r3, r6, #4
 80058d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058d8:	6838      	ldr	r0, [r7, #0]
 80058da:	f003 f8e5 	bl	8008aa8 <USB_DevInit>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e00d      	b.n	800590c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f004 fa34 	bl	8009d72 <USB_DevDisconnect>

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005914 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_PCD_Start+0x1c>
 800592c:	2302      	movs	r3, #2
 800592e:	e020      	b.n	8005972 <HAL_PCD_Start+0x5e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	2b01      	cmp	r3, #1
 800593e:	d109      	bne.n	8005954 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005944:	2b01      	cmp	r3, #1
 8005946:	d005      	beq.n	8005954 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f003 f837 	bl	80089cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f004 f9e4 	bl	8009d30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800597a:	b590      	push	{r4, r7, lr}
 800597c:	b08d      	sub	sp, #52	; 0x34
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f004 faa2 	bl	8009eda <USB_GetMode>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	f040 848a 	bne.w	80062b2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f004 fa06 	bl	8009db4 <USB_ReadInterrupts>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8480 	beq.w	80062b0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	0a1b      	lsrs	r3, r3, #8
 80059ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f004 f9f3 	bl	8009db4 <USB_ReadInterrupts>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d107      	bne.n	80059e8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695a      	ldr	r2, [r3, #20]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f002 0202 	and.w	r2, r2, #2
 80059e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f004 f9e1 	bl	8009db4 <USB_ReadInterrupts>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	d161      	bne.n	8005ac0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0210 	bic.w	r2, r2, #16
 8005a0a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f003 020f 	and.w	r2, r3, #15
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	0c5b      	lsrs	r3, r3, #17
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d124      	bne.n	8005a82 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d035      	beq.n	8005ab0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	091b      	lsrs	r3, r3, #4
 8005a4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	6a38      	ldr	r0, [r7, #32]
 8005a58:	f004 f818 	bl	8009a8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a68:	441a      	add	r2, r3
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	091b      	lsrs	r3, r3, #4
 8005a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a7a:	441a      	add	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	621a      	str	r2, [r3, #32]
 8005a80:	e016      	b.n	8005ab0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	0c5b      	lsrs	r3, r3, #17
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	2b06      	cmp	r3, #6
 8005a8c:	d110      	bne.n	8005ab0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a94:	2208      	movs	r2, #8
 8005a96:	4619      	mov	r1, r3
 8005a98:	6a38      	ldr	r0, [r7, #32]
 8005a9a:	f003 fff7 	bl	8009a8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aaa:	441a      	add	r2, r3
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0210 	orr.w	r2, r2, #16
 8005abe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f004 f975 	bl	8009db4 <USB_ReadInterrupts>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ad4:	f040 80a7 	bne.w	8005c26 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f004 f97a 	bl	8009dda <USB_ReadDevAllOutEpInterrupt>
 8005ae6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005ae8:	e099      	b.n	8005c1e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 808e 	beq.w	8005c12 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	4611      	mov	r1, r2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f004 f99e 	bl	8009e42 <USB_ReadDevOutEPInterrupt>
 8005b06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2301      	movs	r3, #1
 8005b22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fec2 	bl	80068b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00c      	beq.n	8005b50 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b42:	461a      	mov	r2, r3
 8005b44:	2308      	movs	r3, #8
 8005b46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 ff98 	bl	8006a80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f003 0310 	and.w	r3, r3, #16
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b66:	461a      	mov	r2, r3
 8005b68:	2310      	movs	r3, #16
 8005b6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d030      	beq.n	8005bd8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b80      	cmp	r3, #128	; 0x80
 8005b80:	d109      	bne.n	8005b96 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b94:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3304      	adds	r3, #4
 8005baa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	78db      	ldrb	r3, [r3, #3]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d108      	bne.n	8005bc6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f009 f9c7 	bl	800ef54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	461a      	mov	r2, r3
 8005bf0:	2320      	movs	r3, #32
 8005bf2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c10:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	3301      	adds	r3, #1
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f47f af62 	bne.w	8005aea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f004 f8c2 	bl	8009db4 <USB_ReadInterrupts>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c3a:	f040 80db 	bne.w	8005df4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f004 f8e3 	bl	8009e0e <USB_ReadDevAllInEpInterrupt>
 8005c48:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005c4e:	e0cd      	b.n	8005dec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 80c2 	beq.w	8005de0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	4611      	mov	r1, r2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f004 f909 	bl	8009e7e <USB_ReadDevInEPInterrupt>
 8005c6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d057      	beq.n	8005d28 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	2201      	movs	r2, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	69f9      	ldr	r1, [r7, #28]
 8005c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c98:	4013      	ands	r3, r2
 8005c9a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2301      	movs	r3, #1
 8005cac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d132      	bne.n	8005d1c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	4613      	mov	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	334c      	adds	r3, #76	; 0x4c
 8005cc6:	6819      	ldr	r1, [r3, #0]
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ccc:	4613      	mov	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4403      	add	r3, r0
 8005cd6:	3348      	adds	r3, #72	; 0x48
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4419      	add	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4403      	add	r3, r0
 8005cea:	334c      	adds	r3, #76	; 0x4c
 8005cec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d113      	bne.n	8005d1c <HAL_PCD_IRQHandler+0x3a2>
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	3354      	adds	r3, #84	; 0x54
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d108      	bne.n	8005d1c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d14:	461a      	mov	r2, r3
 8005d16:	2101      	movs	r1, #1
 8005d18:	f004 f910 	bl	8009f3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f009 f89b 	bl	800ee5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2308      	movs	r3, #8
 8005d42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d008      	beq.n	8005d60 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d76:	461a      	mov	r2, r3
 8005d78:	2340      	movs	r3, #64	; 0x40
 8005d7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d023      	beq.n	8005dce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d88:	6a38      	ldr	r0, [r7, #32]
 8005d8a:	f002 fff1 	bl	8008d70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d90:	4613      	mov	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	3338      	adds	r3, #56	; 0x38
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3304      	adds	r3, #4
 8005da0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	78db      	ldrb	r3, [r3, #3]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d108      	bne.n	8005dbc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2200      	movs	r2, #0
 8005dae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f009 f8de 	bl	800ef78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2302      	movs	r3, #2
 8005dcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fcdb 	bl	8006796 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	3301      	adds	r3, #1
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f47f af2e 	bne.w	8005c50 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f003 ffdb 	bl	8009db4 <USB_ReadInterrupts>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e08:	d122      	bne.n	8005e50 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d108      	bne.n	8005e3a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e30:	2100      	movs	r1, #0
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fec2 	bl	8006bbc <HAL_PCDEx_LPM_Callback>
 8005e38:	e002      	b.n	8005e40 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f009 f87c 	bl	800ef38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f003 ffad 	bl	8009db4 <USB_ReadInterrupts>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e64:	d112      	bne.n	8005e8c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d102      	bne.n	8005e7c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f009 f838 	bl	800eeec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005e8a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f003 ff8f 	bl	8009db4 <USB_ReadInterrupts>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea0:	f040 80b7 	bne.w	8006012 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb2:	f023 0301 	bic.w	r3, r3, #1
 8005eb6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2110      	movs	r1, #16
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f002 ff56 	bl	8008d70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec8:	e046      	b.n	8005f58 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005edc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005efc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f10:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f50:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	3301      	adds	r3, #1
 8005f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d3b3      	bcc.n	8005eca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f70:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005f74:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d016      	beq.n	8005fac <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f8e:	f043 030b 	orr.w	r3, r3, #11
 8005f92:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fa4:	f043 030b 	orr.w	r3, r3, #11
 8005fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8005faa:	e015      	b.n	8005fd8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005fbe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005fc2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd2:	f043 030b 	orr.w	r3, r3, #11
 8005fd6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f003 ff9d 	bl	8009f3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f003 fecc 	bl	8009db4 <USB_ReadInterrupts>
 800601c:	4603      	mov	r3, r0
 800601e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006026:	d124      	bne.n	8006072 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f003 ff62 	bl	8009ef6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f002 ff17 	bl	8008e6a <USB_GetDevSpeed>
 800603c:	4603      	mov	r3, r0
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681c      	ldr	r4, [r3, #0]
 8006048:	f001 f9e8 	bl	800741c <HAL_RCC_GetHCLKFreq>
 800604c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006052:	b2db      	uxtb	r3, r3
 8006054:	461a      	mov	r2, r3
 8006056:	4620      	mov	r0, r4
 8006058:	f002 fc16 	bl	8008888 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f008 ff26 	bl	800eeae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006070:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f003 fe9c 	bl	8009db4 <USB_ReadInterrupts>
 800607c:	4603      	mov	r3, r0
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b08      	cmp	r3, #8
 8006084:	d10a      	bne.n	800609c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f008 ff03 	bl	800ee92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f002 0208 	and.w	r2, r2, #8
 800609a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f003 fe87 	bl	8009db4 <USB_ReadInterrupts>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d122      	bne.n	80060f6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060bc:	2301      	movs	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
 80060c0:	e014      	b.n	80060ec <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	4613      	mov	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d105      	bne.n	80060e6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fb27 	bl	8006734 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	3301      	adds	r3, #1
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d3e5      	bcc.n	80060c2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f003 fe5a 	bl	8009db4 <USB_ReadInterrupts>
 8006100:	4603      	mov	r3, r0
 8006102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800610a:	d13b      	bne.n	8006184 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800610c:	2301      	movs	r3, #1
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
 8006110:	e02b      	b.n	800616a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006126:	4613      	mov	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	3340      	adds	r3, #64	; 0x40
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d115      	bne.n	8006164 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006138:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800613a:	2b00      	cmp	r3, #0
 800613c:	da12      	bge.n	8006164 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006142:	4613      	mov	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	333f      	adds	r3, #63	; 0x3f
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800615a:	b2db      	uxtb	r3, r3
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fae8 	bl	8006734 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	3301      	adds	r3, #1
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006170:	429a      	cmp	r2, r3
 8006172:	d3ce      	bcc.n	8006112 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f003 fe13 	bl	8009db4 <USB_ReadInterrupts>
 800618e:	4603      	mov	r3, r0
 8006190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006198:	d155      	bne.n	8006246 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800619a:	2301      	movs	r3, #1
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
 800619e:	e045      	b.n	800622c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b4:	4613      	mov	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4413      	add	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d12e      	bne.n	8006226 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	da2b      	bge.n	8006226 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80061da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061de:	429a      	cmp	r2, r3
 80061e0:	d121      	bne.n	8006226 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e6:	4613      	mov	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800621e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006222:	6053      	str	r3, [r2, #4]
            break;
 8006224:	e007      	b.n	8006236 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	3301      	adds	r3, #1
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	429a      	cmp	r2, r3
 8006234:	d3b4      	bcc.n	80061a0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695a      	ldr	r2, [r3, #20]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f003 fdb2 	bl	8009db4 <USB_ReadInterrupts>
 8006250:	4603      	mov	r3, r0
 8006252:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625a:	d10a      	bne.n	8006272 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f008 fe9d 	bl	800ef9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f003 fd9c 	bl	8009db4 <USB_ReadInterrupts>
 800627c:	4603      	mov	r3, r0
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b04      	cmp	r3, #4
 8006284:	d115      	bne.n	80062b2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f008 fe8d 	bl	800efb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	e000      	b.n	80062b2 <HAL_PCD_IRQHandler+0x938>
      return;
 80062b0:	bf00      	nop
    }
  }
}
 80062b2:	3734      	adds	r7, #52	; 0x34
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd90      	pop	{r4, r7, pc}

080062b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_PCD_SetAddress+0x1a>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e013      	b.n	80062fa <HAL_PCD_SetAddress+0x42>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	78fa      	ldrb	r2, [r7, #3]
 80062de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	78fa      	ldrb	r2, [r7, #3]
 80062e8:	4611      	mov	r1, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f003 fcfa 	bl	8009ce4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	4608      	mov	r0, r1
 800630c:	4611      	mov	r1, r2
 800630e:	461a      	mov	r2, r3
 8006310:	4603      	mov	r3, r0
 8006312:	70fb      	strb	r3, [r7, #3]
 8006314:	460b      	mov	r3, r1
 8006316:	803b      	strh	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006324:	2b00      	cmp	r3, #0
 8006326:	da0f      	bge.n	8006348 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	4613      	mov	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	3338      	adds	r3, #56	; 0x38
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4413      	add	r3, r2
 800633c:	3304      	adds	r3, #4
 800633e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	705a      	strb	r2, [r3, #1]
 8006346:	e00f      	b.n	8006368 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	f003 020f 	and.w	r2, r3, #15
 800634e:	4613      	mov	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4413      	add	r3, r2
 800635e:	3304      	adds	r3, #4
 8006360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006374:	883a      	ldrh	r2, [r7, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	78ba      	ldrb	r2, [r7, #2]
 800637e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006392:	78bb      	ldrb	r3, [r7, #2]
 8006394:	2b02      	cmp	r3, #2
 8006396:	d102      	bne.n	800639e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_PCD_EP_Open+0xaa>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e00e      	b.n	80063ca <HAL_PCD_EP_Open+0xc8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68f9      	ldr	r1, [r7, #12]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f002 fd7a 	bl	8008eb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80063c8:	7afb      	ldrb	r3, [r7, #11]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	da0f      	bge.n	8006406 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	f003 020f 	and.w	r2, r3, #15
 80063ec:	4613      	mov	r3, r2
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	3338      	adds	r3, #56	; 0x38
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	4413      	add	r3, r2
 80063fa:	3304      	adds	r3, #4
 80063fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	705a      	strb	r2, [r3, #1]
 8006404:	e00f      	b.n	8006426 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	f003 020f 	and.w	r2, r3, #15
 800640c:	4613      	mov	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	4413      	add	r3, r2
 800641c:	3304      	adds	r3, #4
 800641e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	b2da      	uxtb	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_PCD_EP_Close+0x6e>
 800643c:	2302      	movs	r3, #2
 800643e:	e00e      	b.n	800645e <HAL_PCD_EP_Close+0x8c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68f9      	ldr	r1, [r7, #12]
 800644e:	4618      	mov	r0, r3
 8006450:	f002 fdb8 	bl	8008fc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b086      	sub	sp, #24
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
 8006472:	460b      	mov	r3, r1
 8006474:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006476:	7afb      	ldrb	r3, [r7, #11]
 8006478:	f003 020f 	and.w	r2, r3, #15
 800647c:	4613      	mov	r3, r2
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	3304      	adds	r3, #4
 800648e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2200      	movs	r2, #0
 80064a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2200      	movs	r2, #0
 80064a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064a8:	7afb      	ldrb	r3, [r7, #11]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d102      	bne.n	80064c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	f003 030f 	and.w	r3, r3, #15
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	461a      	mov	r2, r3
 80064d8:	6979      	ldr	r1, [r7, #20]
 80064da:	f003 f897 	bl	800960c <USB_EP0StartXfer>
 80064de:	e008      	b.n	80064f2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	6979      	ldr	r1, [r7, #20]
 80064ee:	f002 fe45 	bl	800917c <USB_EPStartXfer>
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	f003 020f 	and.w	r2, r3, #15
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800651e:	681b      	ldr	r3, [r3, #0]
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	607a      	str	r2, [r7, #4]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	460b      	mov	r3, r1
 800653a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800653c:	7afb      	ldrb	r3, [r7, #11]
 800653e:	f003 020f 	and.w	r2, r3, #15
 8006542:	4613      	mov	r3, r2
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	3338      	adds	r3, #56	; 0x38
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	3304      	adds	r3, #4
 8006552:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2200      	movs	r2, #0
 8006564:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2201      	movs	r2, #1
 800656a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	b2da      	uxtb	r2, r3
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d102      	bne.n	8006586 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006586:	7afb      	ldrb	r3, [r7, #11]
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	2b00      	cmp	r3, #0
 800658e:	d109      	bne.n	80065a4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	6979      	ldr	r1, [r7, #20]
 800659e:	f003 f835 	bl	800960c <USB_EP0StartXfer>
 80065a2:	e008      	b.n	80065b6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	6979      	ldr	r1, [r7, #20]
 80065b2:	f002 fde3 	bl	800917c <USB_EPStartXfer>
  }

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	f003 020f 	and.w	r2, r3, #15
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d901      	bls.n	80065de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e050      	b.n	8006680 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da0f      	bge.n	8006606 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	f003 020f 	and.w	r2, r3, #15
 80065ec:	4613      	mov	r3, r2
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	3338      	adds	r3, #56	; 0x38
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4413      	add	r3, r2
 80065fa:	3304      	adds	r3, #4
 80065fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	705a      	strb	r2, [r3, #1]
 8006604:	e00d      	b.n	8006622 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006606:	78fa      	ldrb	r2, [r7, #3]
 8006608:	4613      	mov	r3, r2
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	4413      	add	r3, r2
 8006618:	3304      	adds	r3, #4
 800661a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	b2da      	uxtb	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_PCD_EP_SetStall+0x82>
 800663e:	2302      	movs	r3, #2
 8006640:	e01e      	b.n	8006680 <HAL_PCD_EP_SetStall+0xc0>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	4618      	mov	r0, r3
 8006652:	f003 fa73 	bl	8009b3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	b2d9      	uxtb	r1, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006670:	461a      	mov	r2, r3
 8006672:	f003 fc63 	bl	8009f3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	f003 020f 	and.w	r2, r3, #15
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d901      	bls.n	80066a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e042      	b.n	800672c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80066a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da0f      	bge.n	80066ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	f003 020f 	and.w	r2, r3, #15
 80066b4:	4613      	mov	r3, r2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	3338      	adds	r3, #56	; 0x38
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4413      	add	r3, r2
 80066c2:	3304      	adds	r3, #4
 80066c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	705a      	strb	r2, [r3, #1]
 80066cc:	e00f      	b.n	80066ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	4613      	mov	r3, r2
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	4413      	add	r3, r2
 80066e4:	3304      	adds	r3, #4
 80066e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006706:	2b01      	cmp	r3, #1
 8006708:	d101      	bne.n	800670e <HAL_PCD_EP_ClrStall+0x86>
 800670a:	2302      	movs	r3, #2
 800670c:	e00e      	b.n	800672c <HAL_PCD_EP_ClrStall+0xa4>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	4618      	mov	r0, r3
 800671e:	f003 fa7b 	bl	8009c18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006744:	2b00      	cmp	r3, #0
 8006746:	da0c      	bge.n	8006762 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	f003 020f 	and.w	r2, r3, #15
 800674e:	4613      	mov	r3, r2
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	3338      	adds	r3, #56	; 0x38
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	3304      	adds	r3, #4
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	e00c      	b.n	800677c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	f003 020f 	and.w	r2, r3, #15
 8006768:	4613      	mov	r3, r2
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	3304      	adds	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68f9      	ldr	r1, [r7, #12]
 8006782:	4618      	mov	r0, r3
 8006784:	f003 f89a 	bl	80098bc <USB_EPStopXfer>
 8006788:	4603      	mov	r3, r0
 800678a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800678c:	7afb      	ldrb	r3, [r7, #11]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b08a      	sub	sp, #40	; 0x28
 800679a:	af02      	add	r7, sp, #8
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	4613      	mov	r3, r2
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	4413      	add	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	3338      	adds	r3, #56	; 0x38
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	3304      	adds	r3, #4
 80067bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1a      	ldr	r2, [r3, #32]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d901      	bls.n	80067ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e06c      	b.n	80068a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	699a      	ldr	r2, [r3, #24]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d902      	bls.n	80067ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	3303      	adds	r3, #3
 80067ee:	089b      	lsrs	r3, r3, #2
 80067f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067f2:	e02b      	b.n	800684c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	429a      	cmp	r2, r3
 8006808:	d902      	bls.n	8006810 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	3303      	adds	r3, #3
 8006814:	089b      	lsrs	r3, r3, #2
 8006816:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6919      	ldr	r1, [r3, #16]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	b2da      	uxtb	r2, r3
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006828:	b2db      	uxtb	r3, r3
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	4603      	mov	r3, r0
 800682e:	6978      	ldr	r0, [r7, #20]
 8006830:	f003 f8ee 	bl	8009a10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	441a      	add	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1a      	ldr	r2, [r3, #32]
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	441a      	add	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	429a      	cmp	r2, r3
 8006860:	d809      	bhi.n	8006876 <PCD_WriteEmptyTxFifo+0xe0>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1a      	ldr	r2, [r3, #32]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800686a:	429a      	cmp	r2, r3
 800686c:	d203      	bcs.n	8006876 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1be      	bne.n	80067f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	429a      	cmp	r2, r3
 8006880:	d811      	bhi.n	80068a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	2201      	movs	r2, #1
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	43db      	mvns	r3, r3
 800689c:	6939      	ldr	r1, [r7, #16]
 800689e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a2:	4013      	ands	r3, r2
 80068a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3720      	adds	r7, #32
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	333c      	adds	r3, #60	; 0x3c
 80068c8:	3304      	adds	r3, #4
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d17b      	bne.n	80069de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d015      	beq.n	800691c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4a61      	ldr	r2, [pc, #388]	; (8006a78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	f240 80b9 	bls.w	8006a6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80b3 	beq.w	8006a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006912:	461a      	mov	r2, r3
 8006914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006918:	6093      	str	r3, [r2, #8]
 800691a:	e0a7      	b.n	8006a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d009      	beq.n	800693a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006932:	461a      	mov	r2, r3
 8006934:	2320      	movs	r3, #32
 8006936:	6093      	str	r3, [r2, #8]
 8006938:	e098      	b.n	8006a6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006940:	2b00      	cmp	r3, #0
 8006942:	f040 8093 	bne.w	8006a6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	4a4b      	ldr	r2, [pc, #300]	; (8006a78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d90f      	bls.n	800696e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00a      	beq.n	800696e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006964:	461a      	mov	r2, r3
 8006966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696a:	6093      	str	r3, [r2, #8]
 800696c:	e07e      	b.n	8006a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4413      	add	r3, r2
 8006980:	3304      	adds	r3, #4
 8006982:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	0159      	lsls	r1, r3, #5
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	440b      	add	r3, r1
 8006990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d114      	bne.n	80069d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069b8:	461a      	mov	r2, r3
 80069ba:	2101      	movs	r1, #1
 80069bc:	f003 fabe 	bl	8009f3c <USB_EP0_OutStart>
 80069c0:	e006      	b.n	80069d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	441a      	add	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f008 fa26 	bl	800ee28 <HAL_PCD_DataOutStageCallback>
 80069dc:	e046      	b.n	8006a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	4a26      	ldr	r2, [pc, #152]	; (8006a7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d124      	bne.n	8006a30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	461a      	mov	r2, r3
 80069fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a02:	6093      	str	r3, [r2, #8]
 8006a04:	e032      	b.n	8006a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d008      	beq.n	8006a22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2320      	movs	r3, #32
 8006a20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f008 f9fd 	bl	800ee28 <HAL_PCD_DataOutStageCallback>
 8006a2e:	e01d      	b.n	8006a6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d114      	bne.n	8006a60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	440b      	add	r3, r1
 8006a44:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d108      	bne.n	8006a60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	f003 fa6e 	bl	8009f3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f008 f9de 	bl	800ee28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	4f54300a 	.word	0x4f54300a
 8006a7c:	4f54310a 	.word	0x4f54310a

08006a80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	333c      	adds	r3, #60	; 0x3c
 8006a98:	3304      	adds	r3, #4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <PCD_EP_OutSetupPacket_int+0x88>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d90e      	bls.n	8006ad4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d009      	beq.n	8006ad4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006acc:	461a      	mov	r2, r3
 8006ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f008 f995 	bl	800ee04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <PCD_EP_OutSetupPacket_int+0x88>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d90c      	bls.n	8006afc <PCD_EP_OutSetupPacket_int+0x7c>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d108      	bne.n	8006afc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006af4:	461a      	mov	r2, r3
 8006af6:	2101      	movs	r1, #1
 8006af8:	f003 fa20 	bl	8009f3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	4f54300a 	.word	0x4f54300a

08006b0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d107      	bne.n	8006b3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006b2a:	883b      	ldrh	r3, [r7, #0]
 8006b2c:	0419      	lsls	r1, r3, #16
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	629a      	str	r2, [r3, #40]	; 0x28
 8006b38:	e028      	b.n	8006b8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b40:	0c1b      	lsrs	r3, r3, #16
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	4413      	add	r3, r2
 8006b46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73fb      	strb	r3, [r7, #15]
 8006b4c:	e00d      	b.n	8006b6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	3340      	adds	r3, #64	; 0x40
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	0c1b      	lsrs	r3, r3, #16
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	3301      	adds	r3, #1
 8006b68:	73fb      	strb	r3, [r7, #15]
 8006b6a:	7bfa      	ldrb	r2, [r7, #15]
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d3ec      	bcc.n	8006b4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006b74:	883b      	ldrh	r3, [r7, #0]
 8006b76:	0418      	lsls	r0, r3, #16
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6819      	ldr	r1, [r3, #0]
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	4302      	orrs	r2, r0
 8006b84:	3340      	adds	r3, #64	; 0x40
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	887a      	ldrh	r2, [r7, #2]
 8006bac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e267      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d075      	beq.n	8006cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bf2:	4b88      	ldr	r3, [pc, #544]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d00c      	beq.n	8006c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bfe:	4b85      	ldr	r3, [pc, #532]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d112      	bne.n	8006c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c0a:	4b82      	ldr	r3, [pc, #520]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c16:	d10b      	bne.n	8006c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c18:	4b7e      	ldr	r3, [pc, #504]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d05b      	beq.n	8006cdc <HAL_RCC_OscConfig+0x108>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d157      	bne.n	8006cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e242      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c38:	d106      	bne.n	8006c48 <HAL_RCC_OscConfig+0x74>
 8006c3a:	4b76      	ldr	r3, [pc, #472]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a75      	ldr	r2, [pc, #468]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	e01d      	b.n	8006c84 <HAL_RCC_OscConfig+0xb0>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c50:	d10c      	bne.n	8006c6c <HAL_RCC_OscConfig+0x98>
 8006c52:	4b70      	ldr	r3, [pc, #448]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a6f      	ldr	r2, [pc, #444]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	4b6d      	ldr	r3, [pc, #436]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a6c      	ldr	r2, [pc, #432]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e00b      	b.n	8006c84 <HAL_RCC_OscConfig+0xb0>
 8006c6c:	4b69      	ldr	r3, [pc, #420]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a68      	ldr	r2, [pc, #416]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	4b66      	ldr	r3, [pc, #408]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a65      	ldr	r2, [pc, #404]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d013      	beq.n	8006cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c8c:	f7fc fcc0 	bl	8003610 <HAL_GetTick>
 8006c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c92:	e008      	b.n	8006ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c94:	f7fc fcbc 	bl	8003610 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b64      	cmp	r3, #100	; 0x64
 8006ca0:	d901      	bls.n	8006ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e207      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca6:	4b5b      	ldr	r3, [pc, #364]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0f0      	beq.n	8006c94 <HAL_RCC_OscConfig+0xc0>
 8006cb2:	e014      	b.n	8006cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb4:	f7fc fcac 	bl	8003610 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cbc:	f7fc fca8 	bl	8003610 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b64      	cmp	r3, #100	; 0x64
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e1f3      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cce:	4b51      	ldr	r3, [pc, #324]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f0      	bne.n	8006cbc <HAL_RCC_OscConfig+0xe8>
 8006cda:	e000      	b.n	8006cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d063      	beq.n	8006db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cea:	4b4a      	ldr	r3, [pc, #296]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 030c 	and.w	r3, r3, #12
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cf6:	4b47      	ldr	r3, [pc, #284]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	d11c      	bne.n	8006d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d02:	4b44      	ldr	r3, [pc, #272]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d116      	bne.n	8006d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d0e:	4b41      	ldr	r3, [pc, #260]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_RCC_OscConfig+0x152>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d001      	beq.n	8006d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e1c7      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d26:	4b3b      	ldr	r3, [pc, #236]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	4937      	ldr	r1, [pc, #220]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d3a:	e03a      	b.n	8006db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d020      	beq.n	8006d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d44:	4b34      	ldr	r3, [pc, #208]	; (8006e18 <HAL_RCC_OscConfig+0x244>)
 8006d46:	2201      	movs	r2, #1
 8006d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4a:	f7fc fc61 	bl	8003610 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d52:	f7fc fc5d 	bl	8003610 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e1a8      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d64:	4b2b      	ldr	r3, [pc, #172]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f0      	beq.n	8006d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d70:	4b28      	ldr	r3, [pc, #160]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	4925      	ldr	r1, [pc, #148]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	600b      	str	r3, [r1, #0]
 8006d84:	e015      	b.n	8006db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d86:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <HAL_RCC_OscConfig+0x244>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8c:	f7fc fc40 	bl	8003610 <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d94:	f7fc fc3c 	bl	8003610 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e187      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006da6:	4b1b      	ldr	r3, [pc, #108]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f0      	bne.n	8006d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0308 	and.w	r3, r3, #8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d036      	beq.n	8006e2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d016      	beq.n	8006df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dc6:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <HAL_RCC_OscConfig+0x248>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dcc:	f7fc fc20 	bl	8003610 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd4:	f7fc fc1c 	bl	8003610 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e167      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_OscConfig+0x240>)
 8006de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f0      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x200>
 8006df2:	e01b      	b.n	8006e2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006df4:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <HAL_RCC_OscConfig+0x248>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dfa:	f7fc fc09 	bl	8003610 <HAL_GetTick>
 8006dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e00:	e00e      	b.n	8006e20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e02:	f7fc fc05 	bl	8003610 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d907      	bls.n	8006e20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e150      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
 8006e14:	40023800 	.word	0x40023800
 8006e18:	42470000 	.word	0x42470000
 8006e1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e20:	4b88      	ldr	r3, [pc, #544]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1ea      	bne.n	8006e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8097 	beq.w	8006f68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e3e:	4b81      	ldr	r3, [pc, #516]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10f      	bne.n	8006e6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60bb      	str	r3, [r7, #8]
 8006e4e:	4b7d      	ldr	r3, [pc, #500]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	4a7c      	ldr	r2, [pc, #496]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e58:	6413      	str	r3, [r2, #64]	; 0x40
 8006e5a:	4b7a      	ldr	r3, [pc, #488]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e62:	60bb      	str	r3, [r7, #8]
 8006e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e66:	2301      	movs	r3, #1
 8006e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e6a:	4b77      	ldr	r3, [pc, #476]	; (8007048 <HAL_RCC_OscConfig+0x474>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d118      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e76:	4b74      	ldr	r3, [pc, #464]	; (8007048 <HAL_RCC_OscConfig+0x474>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a73      	ldr	r2, [pc, #460]	; (8007048 <HAL_RCC_OscConfig+0x474>)
 8006e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e82:	f7fc fbc5 	bl	8003610 <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e8a:	f7fc fbc1 	bl	8003610 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e10c      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e9c:	4b6a      	ldr	r3, [pc, #424]	; (8007048 <HAL_RCC_OscConfig+0x474>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0f0      	beq.n	8006e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d106      	bne.n	8006ebe <HAL_RCC_OscConfig+0x2ea>
 8006eb0:	4b64      	ldr	r3, [pc, #400]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb4:	4a63      	ldr	r2, [pc, #396]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	6713      	str	r3, [r2, #112]	; 0x70
 8006ebc:	e01c      	b.n	8006ef8 <HAL_RCC_OscConfig+0x324>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	d10c      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x30c>
 8006ec6:	4b5f      	ldr	r3, [pc, #380]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eca:	4a5e      	ldr	r2, [pc, #376]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006ecc:	f043 0304 	orr.w	r3, r3, #4
 8006ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed2:	4b5c      	ldr	r3, [pc, #368]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed6:	4a5b      	ldr	r2, [pc, #364]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ede:	e00b      	b.n	8006ef8 <HAL_RCC_OscConfig+0x324>
 8006ee0:	4b58      	ldr	r3, [pc, #352]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee4:	4a57      	ldr	r2, [pc, #348]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006ee6:	f023 0301 	bic.w	r3, r3, #1
 8006eea:	6713      	str	r3, [r2, #112]	; 0x70
 8006eec:	4b55      	ldr	r3, [pc, #340]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef0:	4a54      	ldr	r2, [pc, #336]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006ef2:	f023 0304 	bic.w	r3, r3, #4
 8006ef6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d015      	beq.n	8006f2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f00:	f7fc fb86 	bl	8003610 <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f06:	e00a      	b.n	8006f1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f08:	f7fc fb82 	bl	8003610 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e0cb      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f1e:	4b49      	ldr	r3, [pc, #292]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0ee      	beq.n	8006f08 <HAL_RCC_OscConfig+0x334>
 8006f2a:	e014      	b.n	8006f56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f2c:	f7fc fb70 	bl	8003610 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f32:	e00a      	b.n	8006f4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f34:	f7fc fb6c 	bl	8003610 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e0b5      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f4a:	4b3e      	ldr	r3, [pc, #248]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1ee      	bne.n	8006f34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d105      	bne.n	8006f68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f5c:	4b39      	ldr	r3, [pc, #228]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	4a38      	ldr	r2, [pc, #224]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80a1 	beq.w	80070b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f72:	4b34      	ldr	r3, [pc, #208]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f003 030c 	and.w	r3, r3, #12
 8006f7a:	2b08      	cmp	r3, #8
 8006f7c:	d05c      	beq.n	8007038 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d141      	bne.n	800700a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f86:	4b31      	ldr	r3, [pc, #196]	; (800704c <HAL_RCC_OscConfig+0x478>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f8c:	f7fc fb40 	bl	8003610 <HAL_GetTick>
 8006f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f94:	f7fc fb3c 	bl	8003610 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e087      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa6:	4b27      	ldr	r3, [pc, #156]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f0      	bne.n	8006f94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69da      	ldr	r2, [r3, #28]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	019b      	lsls	r3, r3, #6
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	085b      	lsrs	r3, r3, #1
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	041b      	lsls	r3, r3, #16
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	061b      	lsls	r3, r3, #24
 8006fd6:	491b      	ldr	r1, [pc, #108]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fdc:	4b1b      	ldr	r3, [pc, #108]	; (800704c <HAL_RCC_OscConfig+0x478>)
 8006fde:	2201      	movs	r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe2:	f7fc fb15 	bl	8003610 <HAL_GetTick>
 8006fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fe8:	e008      	b.n	8006ffc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fea:	f7fc fb11 	bl	8003610 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e05c      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ffc:	4b11      	ldr	r3, [pc, #68]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0f0      	beq.n	8006fea <HAL_RCC_OscConfig+0x416>
 8007008:	e054      	b.n	80070b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800700a:	4b10      	ldr	r3, [pc, #64]	; (800704c <HAL_RCC_OscConfig+0x478>)
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007010:	f7fc fafe 	bl	8003610 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007018:	f7fc fafa 	bl	8003610 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e045      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800702a:	4b06      	ldr	r3, [pc, #24]	; (8007044 <HAL_RCC_OscConfig+0x470>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f0      	bne.n	8007018 <HAL_RCC_OscConfig+0x444>
 8007036:	e03d      	b.n	80070b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d107      	bne.n	8007050 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e038      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
 8007044:	40023800 	.word	0x40023800
 8007048:	40007000 	.word	0x40007000
 800704c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007050:	4b1b      	ldr	r3, [pc, #108]	; (80070c0 <HAL_RCC_OscConfig+0x4ec>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d028      	beq.n	80070b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007068:	429a      	cmp	r2, r3
 800706a:	d121      	bne.n	80070b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007076:	429a      	cmp	r2, r3
 8007078:	d11a      	bne.n	80070b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007080:	4013      	ands	r3, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007086:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007088:	4293      	cmp	r3, r2
 800708a:	d111      	bne.n	80070b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007096:	085b      	lsrs	r3, r3, #1
 8007098:	3b01      	subs	r3, #1
 800709a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800709c:	429a      	cmp	r2, r3
 800709e:	d107      	bne.n	80070b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d001      	beq.n	80070b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40023800 	.word	0x40023800

080070c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e0cc      	b.n	8007272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070d8:	4b68      	ldr	r3, [pc, #416]	; (800727c <HAL_RCC_ClockConfig+0x1b8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d90c      	bls.n	8007100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070e6:	4b65      	ldr	r3, [pc, #404]	; (800727c <HAL_RCC_ClockConfig+0x1b8>)
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ee:	4b63      	ldr	r3, [pc, #396]	; (800727c <HAL_RCC_ClockConfig+0x1b8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d001      	beq.n	8007100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e0b8      	b.n	8007272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d020      	beq.n	800714e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007118:	4b59      	ldr	r3, [pc, #356]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	4a58      	ldr	r2, [pc, #352]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 800711e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0308 	and.w	r3, r3, #8
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007130:	4b53      	ldr	r3, [pc, #332]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	4a52      	ldr	r2, [pc, #328]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 8007136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800713a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800713c:	4b50      	ldr	r3, [pc, #320]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	494d      	ldr	r1, [pc, #308]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 800714a:	4313      	orrs	r3, r2
 800714c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d044      	beq.n	80071e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d107      	bne.n	8007172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007162:	4b47      	ldr	r3, [pc, #284]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d119      	bne.n	80071a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e07f      	b.n	8007272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2b02      	cmp	r3, #2
 8007178:	d003      	beq.n	8007182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800717e:	2b03      	cmp	r3, #3
 8007180:	d107      	bne.n	8007192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007182:	4b3f      	ldr	r3, [pc, #252]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e06f      	b.n	8007272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007192:	4b3b      	ldr	r3, [pc, #236]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e067      	b.n	8007272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071a2:	4b37      	ldr	r3, [pc, #220]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f023 0203 	bic.w	r2, r3, #3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	4934      	ldr	r1, [pc, #208]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071b4:	f7fc fa2c 	bl	8003610 <HAL_GetTick>
 80071b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ba:	e00a      	b.n	80071d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071bc:	f7fc fa28 	bl	8003610 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e04f      	b.n	8007272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071d2:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 020c 	and.w	r2, r3, #12
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d1eb      	bne.n	80071bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071e4:	4b25      	ldr	r3, [pc, #148]	; (800727c <HAL_RCC_ClockConfig+0x1b8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d20c      	bcs.n	800720c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071f2:	4b22      	ldr	r3, [pc, #136]	; (800727c <HAL_RCC_ClockConfig+0x1b8>)
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fa:	4b20      	ldr	r3, [pc, #128]	; (800727c <HAL_RCC_ClockConfig+0x1b8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d001      	beq.n	800720c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e032      	b.n	8007272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007218:	4b19      	ldr	r3, [pc, #100]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	4916      	ldr	r1, [pc, #88]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 8007226:	4313      	orrs	r3, r2
 8007228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d009      	beq.n	800724a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007236:	4b12      	ldr	r3, [pc, #72]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	490e      	ldr	r1, [pc, #56]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 8007246:	4313      	orrs	r3, r2
 8007248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800724a:	f000 f821 	bl	8007290 <HAL_RCC_GetSysClockFreq>
 800724e:	4602      	mov	r2, r0
 8007250:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <HAL_RCC_ClockConfig+0x1bc>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	490a      	ldr	r1, [pc, #40]	; (8007284 <HAL_RCC_ClockConfig+0x1c0>)
 800725c:	5ccb      	ldrb	r3, [r1, r3]
 800725e:	fa22 f303 	lsr.w	r3, r2, r3
 8007262:	4a09      	ldr	r2, [pc, #36]	; (8007288 <HAL_RCC_ClockConfig+0x1c4>)
 8007264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007266:	4b09      	ldr	r3, [pc, #36]	; (800728c <HAL_RCC_ClockConfig+0x1c8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f7fc f98c 	bl	8003588 <HAL_InitTick>

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40023c00 	.word	0x40023c00
 8007280:	40023800 	.word	0x40023800
 8007284:	0801240c 	.word	0x0801240c
 8007288:	20000000 	.word	0x20000000
 800728c:	20000024 	.word	0x20000024

08007290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007294:	b090      	sub	sp, #64	; 0x40
 8007296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
 800729c:	2300      	movs	r3, #0
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a0:	2300      	movs	r3, #0
 80072a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072a8:	4b59      	ldr	r3, [pc, #356]	; (8007410 <HAL_RCC_GetSysClockFreq+0x180>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 030c 	and.w	r3, r3, #12
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d00d      	beq.n	80072d0 <HAL_RCC_GetSysClockFreq+0x40>
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	f200 80a1 	bhi.w	80073fc <HAL_RCC_GetSysClockFreq+0x16c>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <HAL_RCC_GetSysClockFreq+0x34>
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d003      	beq.n	80072ca <HAL_RCC_GetSysClockFreq+0x3a>
 80072c2:	e09b      	b.n	80073fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072c4:	4b53      	ldr	r3, [pc, #332]	; (8007414 <HAL_RCC_GetSysClockFreq+0x184>)
 80072c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80072c8:	e09b      	b.n	8007402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072ca:	4b53      	ldr	r3, [pc, #332]	; (8007418 <HAL_RCC_GetSysClockFreq+0x188>)
 80072cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072ce:	e098      	b.n	8007402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072d0:	4b4f      	ldr	r3, [pc, #316]	; (8007410 <HAL_RCC_GetSysClockFreq+0x180>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072da:	4b4d      	ldr	r3, [pc, #308]	; (8007410 <HAL_RCC_GetSysClockFreq+0x180>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d028      	beq.n	8007338 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072e6:	4b4a      	ldr	r3, [pc, #296]	; (8007410 <HAL_RCC_GetSysClockFreq+0x180>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	099b      	lsrs	r3, r3, #6
 80072ec:	2200      	movs	r2, #0
 80072ee:	623b      	str	r3, [r7, #32]
 80072f0:	627a      	str	r2, [r7, #36]	; 0x24
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80072f8:	2100      	movs	r1, #0
 80072fa:	4b47      	ldr	r3, [pc, #284]	; (8007418 <HAL_RCC_GetSysClockFreq+0x188>)
 80072fc:	fb03 f201 	mul.w	r2, r3, r1
 8007300:	2300      	movs	r3, #0
 8007302:	fb00 f303 	mul.w	r3, r0, r3
 8007306:	4413      	add	r3, r2
 8007308:	4a43      	ldr	r2, [pc, #268]	; (8007418 <HAL_RCC_GetSysClockFreq+0x188>)
 800730a:	fba0 1202 	umull	r1, r2, r0, r2
 800730e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007310:	460a      	mov	r2, r1
 8007312:	62ba      	str	r2, [r7, #40]	; 0x28
 8007314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007316:	4413      	add	r3, r2
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	2200      	movs	r2, #0
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	61fa      	str	r2, [r7, #28]
 8007322:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007326:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800732a:	f7f9 fcb5 	bl	8000c98 <__aeabi_uldivmod>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4613      	mov	r3, r2
 8007334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007336:	e053      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007338:	4b35      	ldr	r3, [pc, #212]	; (8007410 <HAL_RCC_GetSysClockFreq+0x180>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	099b      	lsrs	r3, r3, #6
 800733e:	2200      	movs	r2, #0
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	617a      	str	r2, [r7, #20]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800734a:	f04f 0b00 	mov.w	fp, #0
 800734e:	4652      	mov	r2, sl
 8007350:	465b      	mov	r3, fp
 8007352:	f04f 0000 	mov.w	r0, #0
 8007356:	f04f 0100 	mov.w	r1, #0
 800735a:	0159      	lsls	r1, r3, #5
 800735c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007360:	0150      	lsls	r0, r2, #5
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	ebb2 080a 	subs.w	r8, r2, sl
 800736a:	eb63 090b 	sbc.w	r9, r3, fp
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800737a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800737e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007382:	ebb2 0408 	subs.w	r4, r2, r8
 8007386:	eb63 0509 	sbc.w	r5, r3, r9
 800738a:	f04f 0200 	mov.w	r2, #0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	00eb      	lsls	r3, r5, #3
 8007394:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007398:	00e2      	lsls	r2, r4, #3
 800739a:	4614      	mov	r4, r2
 800739c:	461d      	mov	r5, r3
 800739e:	eb14 030a 	adds.w	r3, r4, sl
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	eb45 030b 	adc.w	r3, r5, fp
 80073a8:	607b      	str	r3, [r7, #4]
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	f04f 0300 	mov.w	r3, #0
 80073b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073b6:	4629      	mov	r1, r5
 80073b8:	028b      	lsls	r3, r1, #10
 80073ba:	4621      	mov	r1, r4
 80073bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073c0:	4621      	mov	r1, r4
 80073c2:	028a      	lsls	r2, r1, #10
 80073c4:	4610      	mov	r0, r2
 80073c6:	4619      	mov	r1, r3
 80073c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ca:	2200      	movs	r2, #0
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	60fa      	str	r2, [r7, #12]
 80073d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073d4:	f7f9 fc60 	bl	8000c98 <__aeabi_uldivmod>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4613      	mov	r3, r2
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <HAL_RCC_GetSysClockFreq+0x180>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	0c1b      	lsrs	r3, r3, #16
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	3301      	adds	r3, #1
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80073f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073fa:	e002      	b.n	8007402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <HAL_RCC_GetSysClockFreq+0x184>)
 80073fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007404:	4618      	mov	r0, r3
 8007406:	3740      	adds	r7, #64	; 0x40
 8007408:	46bd      	mov	sp, r7
 800740a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800740e:	bf00      	nop
 8007410:	40023800 	.word	0x40023800
 8007414:	00f42400 	.word	0x00f42400
 8007418:	017d7840 	.word	0x017d7840

0800741c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007420:	4b03      	ldr	r3, [pc, #12]	; (8007430 <HAL_RCC_GetHCLKFreq+0x14>)
 8007422:	681b      	ldr	r3, [r3, #0]
}
 8007424:	4618      	mov	r0, r3
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	20000000 	.word	0x20000000

08007434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007438:	f7ff fff0 	bl	800741c <HAL_RCC_GetHCLKFreq>
 800743c:	4602      	mov	r2, r0
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	0a9b      	lsrs	r3, r3, #10
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	4903      	ldr	r1, [pc, #12]	; (8007458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800744a:	5ccb      	ldrb	r3, [r1, r3]
 800744c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007450:	4618      	mov	r0, r3
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40023800 	.word	0x40023800
 8007458:	0801241c 	.word	0x0801241c

0800745c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007460:	f7ff ffdc 	bl	800741c <HAL_RCC_GetHCLKFreq>
 8007464:	4602      	mov	r2, r0
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	0b5b      	lsrs	r3, r3, #13
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	4903      	ldr	r1, [pc, #12]	; (8007480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007472:	5ccb      	ldrb	r3, [r1, r3]
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007478:	4618      	mov	r0, r3
 800747a:	bd80      	pop	{r7, pc}
 800747c:	40023800 	.word	0x40023800
 8007480:	0801241c 	.word	0x0801241c

08007484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e041      	b.n	800751a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fa fcfe 	bl	8001eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3304      	adds	r3, #4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	f000 f9a0 	bl	8007808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d109      	bne.n	8007548 <HAL_TIM_PWM_Start+0x24>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b01      	cmp	r3, #1
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	e022      	b.n	800758e <HAL_TIM_PWM_Start+0x6a>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b04      	cmp	r3, #4
 800754c:	d109      	bne.n	8007562 <HAL_TIM_PWM_Start+0x3e>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b01      	cmp	r3, #1
 8007558:	bf14      	ite	ne
 800755a:	2301      	movne	r3, #1
 800755c:	2300      	moveq	r3, #0
 800755e:	b2db      	uxtb	r3, r3
 8007560:	e015      	b.n	800758e <HAL_TIM_PWM_Start+0x6a>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d109      	bne.n	800757c <HAL_TIM_PWM_Start+0x58>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	bf14      	ite	ne
 8007574:	2301      	movne	r3, #1
 8007576:	2300      	moveq	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	e008      	b.n	800758e <HAL_TIM_PWM_Start+0x6a>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	bf14      	ite	ne
 8007588:	2301      	movne	r3, #1
 800758a:	2300      	moveq	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e068      	b.n	8007668 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d104      	bne.n	80075a6 <HAL_TIM_PWM_Start+0x82>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a4:	e013      	b.n	80075ce <HAL_TIM_PWM_Start+0xaa>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d104      	bne.n	80075b6 <HAL_TIM_PWM_Start+0x92>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b4:	e00b      	b.n	80075ce <HAL_TIM_PWM_Start+0xaa>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d104      	bne.n	80075c6 <HAL_TIM_PWM_Start+0xa2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c4:	e003      	b.n	80075ce <HAL_TIM_PWM_Start+0xaa>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2201      	movs	r2, #1
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fb22 	bl	8007c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a23      	ldr	r2, [pc, #140]	; (8007670 <HAL_TIM_PWM_Start+0x14c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d107      	bne.n	80075f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <HAL_TIM_PWM_Start+0x14c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d018      	beq.n	8007632 <HAL_TIM_PWM_Start+0x10e>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007608:	d013      	beq.n	8007632 <HAL_TIM_PWM_Start+0x10e>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a19      	ldr	r2, [pc, #100]	; (8007674 <HAL_TIM_PWM_Start+0x150>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00e      	beq.n	8007632 <HAL_TIM_PWM_Start+0x10e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a17      	ldr	r2, [pc, #92]	; (8007678 <HAL_TIM_PWM_Start+0x154>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_TIM_PWM_Start+0x10e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a16      	ldr	r2, [pc, #88]	; (800767c <HAL_TIM_PWM_Start+0x158>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_TIM_PWM_Start+0x10e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a14      	ldr	r2, [pc, #80]	; (8007680 <HAL_TIM_PWM_Start+0x15c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d111      	bne.n	8007656 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b06      	cmp	r3, #6
 8007642:	d010      	beq.n	8007666 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0201 	orr.w	r2, r2, #1
 8007652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007654:	e007      	b.n	8007666 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0201 	orr.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	40010000 	.word	0x40010000
 8007674:	40000400 	.word	0x40000400
 8007678:	40000800 	.word	0x40000800
 800767c:	40000c00 	.word	0x40000c00
 8007680:	40014000 	.word	0x40014000

08007684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800769e:	2302      	movs	r3, #2
 80076a0:	e0ae      	b.n	8007800 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b0c      	cmp	r3, #12
 80076ae:	f200 809f 	bhi.w	80077f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076ed 	.word	0x080076ed
 80076bc:	080077f1 	.word	0x080077f1
 80076c0:	080077f1 	.word	0x080077f1
 80076c4:	080077f1 	.word	0x080077f1
 80076c8:	0800772d 	.word	0x0800772d
 80076cc:	080077f1 	.word	0x080077f1
 80076d0:	080077f1 	.word	0x080077f1
 80076d4:	080077f1 	.word	0x080077f1
 80076d8:	0800776f 	.word	0x0800776f
 80076dc:	080077f1 	.word	0x080077f1
 80076e0:	080077f1 	.word	0x080077f1
 80076e4:	080077f1 	.word	0x080077f1
 80076e8:	080077af 	.word	0x080077af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f908 	bl	8007908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0208 	orr.w	r2, r2, #8
 8007706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0204 	bic.w	r2, r2, #4
 8007716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6999      	ldr	r1, [r3, #24]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	619a      	str	r2, [r3, #24]
      break;
 800772a:	e064      	b.n	80077f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 f94e 	bl	80079d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699a      	ldr	r2, [r3, #24]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6999      	ldr	r1, [r3, #24]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	021a      	lsls	r2, r3, #8
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	619a      	str	r2, [r3, #24]
      break;
 800776c:	e043      	b.n	80077f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f999 	bl	8007aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 0208 	orr.w	r2, r2, #8
 8007788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0204 	bic.w	r2, r2, #4
 8007798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69d9      	ldr	r1, [r3, #28]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	61da      	str	r2, [r3, #28]
      break;
 80077ac:	e023      	b.n	80077f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 f9e3 	bl	8007b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69da      	ldr	r2, [r3, #28]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69d9      	ldr	r1, [r3, #28]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	021a      	lsls	r2, r3, #8
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	61da      	str	r2, [r3, #28]
      break;
 80077ee:	e002      	b.n	80077f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	75fb      	strb	r3, [r7, #23]
      break;
 80077f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a34      	ldr	r2, [pc, #208]	; (80078ec <TIM_Base_SetConfig+0xe4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00f      	beq.n	8007840 <TIM_Base_SetConfig+0x38>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007826:	d00b      	beq.n	8007840 <TIM_Base_SetConfig+0x38>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a31      	ldr	r2, [pc, #196]	; (80078f0 <TIM_Base_SetConfig+0xe8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d007      	beq.n	8007840 <TIM_Base_SetConfig+0x38>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a30      	ldr	r2, [pc, #192]	; (80078f4 <TIM_Base_SetConfig+0xec>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d003      	beq.n	8007840 <TIM_Base_SetConfig+0x38>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a2f      	ldr	r2, [pc, #188]	; (80078f8 <TIM_Base_SetConfig+0xf0>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d108      	bne.n	8007852 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a25      	ldr	r2, [pc, #148]	; (80078ec <TIM_Base_SetConfig+0xe4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01b      	beq.n	8007892 <TIM_Base_SetConfig+0x8a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007860:	d017      	beq.n	8007892 <TIM_Base_SetConfig+0x8a>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a22      	ldr	r2, [pc, #136]	; (80078f0 <TIM_Base_SetConfig+0xe8>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <TIM_Base_SetConfig+0x8a>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a21      	ldr	r2, [pc, #132]	; (80078f4 <TIM_Base_SetConfig+0xec>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00f      	beq.n	8007892 <TIM_Base_SetConfig+0x8a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a20      	ldr	r2, [pc, #128]	; (80078f8 <TIM_Base_SetConfig+0xf0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d00b      	beq.n	8007892 <TIM_Base_SetConfig+0x8a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a1f      	ldr	r2, [pc, #124]	; (80078fc <TIM_Base_SetConfig+0xf4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d007      	beq.n	8007892 <TIM_Base_SetConfig+0x8a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a1e      	ldr	r2, [pc, #120]	; (8007900 <TIM_Base_SetConfig+0xf8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d003      	beq.n	8007892 <TIM_Base_SetConfig+0x8a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a1d      	ldr	r2, [pc, #116]	; (8007904 <TIM_Base_SetConfig+0xfc>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d108      	bne.n	80078a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a08      	ldr	r2, [pc, #32]	; (80078ec <TIM_Base_SetConfig+0xe4>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d103      	bne.n	80078d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	615a      	str	r2, [r3, #20]
}
 80078de:	bf00      	nop
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	40010000 	.word	0x40010000
 80078f0:	40000400 	.word	0x40000400
 80078f4:	40000800 	.word	0x40000800
 80078f8:	40000c00 	.word	0x40000c00
 80078fc:	40014000 	.word	0x40014000
 8007900:	40014400 	.word	0x40014400
 8007904:	40014800 	.word	0x40014800

08007908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f023 0201 	bic.w	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 0303 	bic.w	r3, r3, #3
 800793e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f023 0302 	bic.w	r3, r3, #2
 8007950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a1c      	ldr	r2, [pc, #112]	; (80079d0 <TIM_OC1_SetConfig+0xc8>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d10c      	bne.n	800797e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f023 0308 	bic.w	r3, r3, #8
 800796a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	4313      	orrs	r3, r2
 8007974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f023 0304 	bic.w	r3, r3, #4
 800797c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a13      	ldr	r2, [pc, #76]	; (80079d0 <TIM_OC1_SetConfig+0xc8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d111      	bne.n	80079aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800798c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	621a      	str	r2, [r3, #32]
}
 80079c4:	bf00      	nop
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	40010000 	.word	0x40010000

080079d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f023 0210 	bic.w	r2, r3, #16
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f023 0320 	bic.w	r3, r3, #32
 8007a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a1e      	ldr	r2, [pc, #120]	; (8007aa8 <TIM_OC2_SetConfig+0xd4>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10d      	bne.n	8007a50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a15      	ldr	r2, [pc, #84]	; (8007aa8 <TIM_OC2_SetConfig+0xd4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d113      	bne.n	8007a80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40010000 	.word	0x40010000

08007aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	021b      	lsls	r3, r3, #8
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a1d      	ldr	r2, [pc, #116]	; (8007b7c <TIM_OC3_SetConfig+0xd0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d10d      	bne.n	8007b26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a14      	ldr	r2, [pc, #80]	; (8007b7c <TIM_OC3_SetConfig+0xd0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d113      	bne.n	8007b56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	621a      	str	r2, [r3, #32]
}
 8007b70:	bf00      	nop
 8007b72:	371c      	adds	r7, #28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	40010000 	.word	0x40010000

08007b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	031b      	lsls	r3, r3, #12
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a10      	ldr	r2, [pc, #64]	; (8007c1c <TIM_OC4_SetConfig+0x9c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d109      	bne.n	8007bf4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	019b      	lsls	r3, r3, #6
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	621a      	str	r2, [r3, #32]
}
 8007c0e:	bf00      	nop
 8007c10:	371c      	adds	r7, #28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	40010000 	.word	0x40010000

08007c20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	2201      	movs	r2, #1
 8007c34:	fa02 f303 	lsl.w	r3, r2, r3
 8007c38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a1a      	ldr	r2, [r3, #32]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a1a      	ldr	r2, [r3, #32]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f003 031f 	and.w	r3, r3, #31
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	fa01 f303 	lsl.w	r3, r1, r3
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	621a      	str	r2, [r3, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
	...

08007c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e050      	b.n	8007d26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a1c      	ldr	r2, [pc, #112]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d018      	beq.n	8007cfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd0:	d013      	beq.n	8007cfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a18      	ldr	r2, [pc, #96]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00e      	beq.n	8007cfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a16      	ldr	r2, [pc, #88]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d009      	beq.n	8007cfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a15      	ldr	r2, [pc, #84]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d004      	beq.n	8007cfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a13      	ldr	r2, [pc, #76]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d10c      	bne.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40010000 	.word	0x40010000
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40000800 	.word	0x40000800
 8007d40:	40000c00 	.word	0x40000c00
 8007d44:	40014000 	.word	0x40014000

08007d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e03f      	b.n	8007dda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7fa f918 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2224      	movs	r2, #36	; 0x24
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 faa5 	bl	80082dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695a      	ldr	r2, [r3, #20]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	4613      	mov	r3, r2
 8007dee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d11d      	bne.n	8007e38 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <HAL_UART_Receive_DMA+0x26>
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e016      	b.n	8007e3a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <HAL_UART_Receive_DMA+0x38>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e00f      	b.n	8007e3a <HAL_UART_Receive_DMA+0x58>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 f92a 	bl	8008088 <UART_Start_Receive_DMA>
 8007e34:	4603      	mov	r3, r0
 8007e36:	e000      	b.n	8007e3a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e72:	bf00      	nop
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b09c      	sub	sp, #112	; 0x70
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d172      	bne.n	8007f98 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ece:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ed8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007eda:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ede:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e5      	bne.n	8007eb8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	f023 0301 	bic.w	r3, r3, #1
 8007f02:	667b      	str	r3, [r7, #100]	; 0x64
 8007f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3314      	adds	r3, #20
 8007f0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f0c:	647a      	str	r2, [r7, #68]	; 0x44
 8007f0e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e5      	bne.n	8007eec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3314      	adds	r3, #20
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f36:	663b      	str	r3, [r7, #96]	; 0x60
 8007f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3314      	adds	r3, #20
 8007f3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f40:	633a      	str	r2, [r7, #48]	; 0x30
 8007f42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e5      	bne.n	8007f20 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d119      	bne.n	8007f98 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	330c      	adds	r3, #12
 8007f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0310 	bic.w	r3, r3, #16
 8007f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f84:	61fa      	str	r2, [r7, #28]
 8007f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	69b9      	ldr	r1, [r7, #24]
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	617b      	str	r3, [r7, #20]
   return(result);
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e5      	bne.n	8007f64 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d106      	bne.n	8007fae <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007fa8:	f7ff ff69 	bl	8007e7e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fac:	e002      	b.n	8007fb4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007fae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007fb0:	f7ff ff47 	bl	8007e42 <HAL_UART_RxCpltCallback>
}
 8007fb4:	bf00      	nop
 8007fb6:	3770      	adds	r7, #112	; 0x70
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d108      	bne.n	8007fe4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fd6:	085b      	lsrs	r3, r3, #1
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	4619      	mov	r1, r3
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff ff4e 	bl	8007e7e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fe2:	e002      	b.n	8007fea <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f7ff ff36 	bl	8007e56 <HAL_UART_RxHalfCpltCallback>
}
 8007fea:	bf00      	nop
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800e:	2b80      	cmp	r3, #128	; 0x80
 8008010:	bf0c      	ite	eq
 8008012:	2301      	moveq	r3, #1
 8008014:	2300      	movne	r3, #0
 8008016:	b2db      	uxtb	r3, r3
 8008018:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b21      	cmp	r3, #33	; 0x21
 8008024:	d108      	bne.n	8008038 <UART_DMAError+0x46>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008032:	68b8      	ldr	r0, [r7, #8]
 8008034:	f000 f8c6 	bl	80081c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008042:	2b40      	cmp	r3, #64	; 0x40
 8008044:	bf0c      	ite	eq
 8008046:	2301      	moveq	r3, #1
 8008048:	2300      	movne	r3, #0
 800804a:	b2db      	uxtb	r3, r3
 800804c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b22      	cmp	r3, #34	; 0x22
 8008058:	d108      	bne.n	800806c <UART_DMAError+0x7a>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2200      	movs	r2, #0
 8008064:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008066:	68b8      	ldr	r0, [r7, #8]
 8008068:	f000 f8d4 	bl	8008214 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	f043 0210 	orr.w	r2, r3, #16
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008078:	68b8      	ldr	r0, [r7, #8]
 800807a:	f7ff fef6 	bl	8007e6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b098      	sub	sp, #96	; 0x60
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	88fa      	ldrh	r2, [r7, #6]
 80080a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2222      	movs	r2, #34	; 0x22
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b4:	4a40      	ldr	r2, [pc, #256]	; (80081b8 <UART_Start_Receive_DMA+0x130>)
 80080b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080bc:	4a3f      	ldr	r2, [pc, #252]	; (80081bc <UART_Start_Receive_DMA+0x134>)
 80080be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	4a3e      	ldr	r2, [pc, #248]	; (80081c0 <UART_Start_Receive_DMA+0x138>)
 80080c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	2200      	movs	r2, #0
 80080ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80080d0:	f107 0308 	add.w	r3, r7, #8
 80080d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3304      	adds	r3, #4
 80080e0:	4619      	mov	r1, r3
 80080e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	f7fc f84a 	bl	8004180 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80080ec:	2300      	movs	r3, #0
 80080ee:	613b      	str	r3, [r7, #16]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d019      	beq.n	8008146 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	330c      	adds	r3, #12
 8008118:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008128:	65bb      	str	r3, [r7, #88]	; 0x58
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	330c      	adds	r3, #12
 8008130:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008132:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008134:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008138:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e5      	bne.n	8008112 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3314      	adds	r3, #20
 800814c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	f043 0301 	orr.w	r3, r3, #1
 800815c:	657b      	str	r3, [r7, #84]	; 0x54
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3314      	adds	r3, #20
 8008164:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008166:	63ba      	str	r2, [r7, #56]	; 0x38
 8008168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800816c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e5      	bne.n	8008146 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3314      	adds	r3, #20
 8008180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	617b      	str	r3, [r7, #20]
   return(result);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008190:	653b      	str	r3, [r7, #80]	; 0x50
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3314      	adds	r3, #20
 8008198:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800819a:	627a      	str	r2, [r7, #36]	; 0x24
 800819c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	6a39      	ldr	r1, [r7, #32]
 80081a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e5      	bne.n	800817a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3760      	adds	r7, #96	; 0x60
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	08007e97 	.word	0x08007e97
 80081bc:	08007fbd 	.word	0x08007fbd
 80081c0:	08007ff3 	.word	0x08007ff3

080081c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b089      	sub	sp, #36	; 0x24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	330c      	adds	r3, #12
 80081d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	60bb      	str	r3, [r7, #8]
   return(result);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	330c      	adds	r3, #12
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	61ba      	str	r2, [r7, #24]
 80081ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	6979      	ldr	r1, [r7, #20]
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	613b      	str	r3, [r7, #16]
   return(result);
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e5      	bne.n	80081cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008208:	bf00      	nop
 800820a:	3724      	adds	r7, #36	; 0x24
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008214:	b480      	push	{r7}
 8008216:	b095      	sub	sp, #84	; 0x54
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	330c      	adds	r3, #12
 8008222:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	330c      	adds	r3, #12
 800823a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800823c:	643a      	str	r2, [r7, #64]	; 0x40
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e5      	bne.n	800821c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3314      	adds	r3, #20
 8008256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	64bb      	str	r3, [r7, #72]	; 0x48
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3314      	adds	r3, #20
 800826e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008270:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e5      	bne.n	8008250 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008288:	2b01      	cmp	r3, #1
 800828a:	d119      	bne.n	80082c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	330c      	adds	r3, #12
 8008292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	60bb      	str	r3, [r7, #8]
   return(result);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	f023 0310 	bic.w	r3, r3, #16
 80082a2:	647b      	str	r3, [r7, #68]	; 0x44
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	330c      	adds	r3, #12
 80082aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082ac:	61ba      	str	r2, [r7, #24]
 80082ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6979      	ldr	r1, [r7, #20]
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	613b      	str	r3, [r7, #16]
   return(result);
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e5      	bne.n	800828c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80082ce:	bf00      	nop
 80082d0:	3754      	adds	r7, #84	; 0x54
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
	...

080082dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082e0:	b0c0      	sub	sp, #256	; 0x100
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f8:	68d9      	ldr	r1, [r3, #12]
 80082fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	ea40 0301 	orr.w	r3, r0, r1
 8008304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	431a      	orrs	r2, r3
 8008314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	431a      	orrs	r2, r3
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	4313      	orrs	r3, r2
 8008324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008334:	f021 010c 	bic.w	r1, r1, #12
 8008338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008342:	430b      	orrs	r3, r1
 8008344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008356:	6999      	ldr	r1, [r3, #24]
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	ea40 0301 	orr.w	r3, r0, r1
 8008362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	4b8f      	ldr	r3, [pc, #572]	; (80085a8 <UART_SetConfig+0x2cc>)
 800836c:	429a      	cmp	r2, r3
 800836e:	d005      	beq.n	800837c <UART_SetConfig+0xa0>
 8008370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	4b8d      	ldr	r3, [pc, #564]	; (80085ac <UART_SetConfig+0x2d0>)
 8008378:	429a      	cmp	r2, r3
 800837a:	d104      	bne.n	8008386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800837c:	f7ff f86e 	bl	800745c <HAL_RCC_GetPCLK2Freq>
 8008380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008384:	e003      	b.n	800838e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008386:	f7ff f855 	bl	8007434 <HAL_RCC_GetPCLK1Freq>
 800838a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800838e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008398:	f040 810c 	bne.w	80085b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800839c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	1891      	adds	r1, r2, r2
 80083b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80083b6:	415b      	adcs	r3, r3
 80083b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083be:	4621      	mov	r1, r4
 80083c0:	eb12 0801 	adds.w	r8, r2, r1
 80083c4:	4629      	mov	r1, r5
 80083c6:	eb43 0901 	adc.w	r9, r3, r1
 80083ca:	f04f 0200 	mov.w	r2, #0
 80083ce:	f04f 0300 	mov.w	r3, #0
 80083d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083de:	4690      	mov	r8, r2
 80083e0:	4699      	mov	r9, r3
 80083e2:	4623      	mov	r3, r4
 80083e4:	eb18 0303 	adds.w	r3, r8, r3
 80083e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083ec:	462b      	mov	r3, r5
 80083ee:	eb49 0303 	adc.w	r3, r9, r3
 80083f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800840a:	460b      	mov	r3, r1
 800840c:	18db      	adds	r3, r3, r3
 800840e:	653b      	str	r3, [r7, #80]	; 0x50
 8008410:	4613      	mov	r3, r2
 8008412:	eb42 0303 	adc.w	r3, r2, r3
 8008416:	657b      	str	r3, [r7, #84]	; 0x54
 8008418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800841c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008420:	f7f8 fc3a 	bl	8000c98 <__aeabi_uldivmod>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4b61      	ldr	r3, [pc, #388]	; (80085b0 <UART_SetConfig+0x2d4>)
 800842a:	fba3 2302 	umull	r2, r3, r3, r2
 800842e:	095b      	lsrs	r3, r3, #5
 8008430:	011c      	lsls	r4, r3, #4
 8008432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008436:	2200      	movs	r2, #0
 8008438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800843c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008444:	4642      	mov	r2, r8
 8008446:	464b      	mov	r3, r9
 8008448:	1891      	adds	r1, r2, r2
 800844a:	64b9      	str	r1, [r7, #72]	; 0x48
 800844c:	415b      	adcs	r3, r3
 800844e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008454:	4641      	mov	r1, r8
 8008456:	eb12 0a01 	adds.w	sl, r2, r1
 800845a:	4649      	mov	r1, r9
 800845c:	eb43 0b01 	adc.w	fp, r3, r1
 8008460:	f04f 0200 	mov.w	r2, #0
 8008464:	f04f 0300 	mov.w	r3, #0
 8008468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800846c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008474:	4692      	mov	sl, r2
 8008476:	469b      	mov	fp, r3
 8008478:	4643      	mov	r3, r8
 800847a:	eb1a 0303 	adds.w	r3, sl, r3
 800847e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008482:	464b      	mov	r3, r9
 8008484:	eb4b 0303 	adc.w	r3, fp, r3
 8008488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800849c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80084a0:	460b      	mov	r3, r1
 80084a2:	18db      	adds	r3, r3, r3
 80084a4:	643b      	str	r3, [r7, #64]	; 0x40
 80084a6:	4613      	mov	r3, r2
 80084a8:	eb42 0303 	adc.w	r3, r2, r3
 80084ac:	647b      	str	r3, [r7, #68]	; 0x44
 80084ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80084b6:	f7f8 fbef 	bl	8000c98 <__aeabi_uldivmod>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	4b3b      	ldr	r3, [pc, #236]	; (80085b0 <UART_SetConfig+0x2d4>)
 80084c2:	fba3 2301 	umull	r2, r3, r3, r1
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	2264      	movs	r2, #100	; 0x64
 80084ca:	fb02 f303 	mul.w	r3, r2, r3
 80084ce:	1acb      	subs	r3, r1, r3
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084d6:	4b36      	ldr	r3, [pc, #216]	; (80085b0 <UART_SetConfig+0x2d4>)
 80084d8:	fba3 2302 	umull	r2, r3, r3, r2
 80084dc:	095b      	lsrs	r3, r3, #5
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084e4:	441c      	add	r4, r3
 80084e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80084f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80084f8:	4642      	mov	r2, r8
 80084fa:	464b      	mov	r3, r9
 80084fc:	1891      	adds	r1, r2, r2
 80084fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008500:	415b      	adcs	r3, r3
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008508:	4641      	mov	r1, r8
 800850a:	1851      	adds	r1, r2, r1
 800850c:	6339      	str	r1, [r7, #48]	; 0x30
 800850e:	4649      	mov	r1, r9
 8008510:	414b      	adcs	r3, r1
 8008512:	637b      	str	r3, [r7, #52]	; 0x34
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008520:	4659      	mov	r1, fp
 8008522:	00cb      	lsls	r3, r1, #3
 8008524:	4651      	mov	r1, sl
 8008526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800852a:	4651      	mov	r1, sl
 800852c:	00ca      	lsls	r2, r1, #3
 800852e:	4610      	mov	r0, r2
 8008530:	4619      	mov	r1, r3
 8008532:	4603      	mov	r3, r0
 8008534:	4642      	mov	r2, r8
 8008536:	189b      	adds	r3, r3, r2
 8008538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800853c:	464b      	mov	r3, r9
 800853e:	460a      	mov	r2, r1
 8008540:	eb42 0303 	adc.w	r3, r2, r3
 8008544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800855c:	460b      	mov	r3, r1
 800855e:	18db      	adds	r3, r3, r3
 8008560:	62bb      	str	r3, [r7, #40]	; 0x28
 8008562:	4613      	mov	r3, r2
 8008564:	eb42 0303 	adc.w	r3, r2, r3
 8008568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800856a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800856e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008572:	f7f8 fb91 	bl	8000c98 <__aeabi_uldivmod>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4b0d      	ldr	r3, [pc, #52]	; (80085b0 <UART_SetConfig+0x2d4>)
 800857c:	fba3 1302 	umull	r1, r3, r3, r2
 8008580:	095b      	lsrs	r3, r3, #5
 8008582:	2164      	movs	r1, #100	; 0x64
 8008584:	fb01 f303 	mul.w	r3, r1, r3
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	00db      	lsls	r3, r3, #3
 800858c:	3332      	adds	r3, #50	; 0x32
 800858e:	4a08      	ldr	r2, [pc, #32]	; (80085b0 <UART_SetConfig+0x2d4>)
 8008590:	fba2 2303 	umull	r2, r3, r2, r3
 8008594:	095b      	lsrs	r3, r3, #5
 8008596:	f003 0207 	and.w	r2, r3, #7
 800859a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4422      	add	r2, r4
 80085a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085a4:	e106      	b.n	80087b4 <UART_SetConfig+0x4d8>
 80085a6:	bf00      	nop
 80085a8:	40011000 	.word	0x40011000
 80085ac:	40011400 	.word	0x40011400
 80085b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085b8:	2200      	movs	r2, #0
 80085ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80085c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085c6:	4642      	mov	r2, r8
 80085c8:	464b      	mov	r3, r9
 80085ca:	1891      	adds	r1, r2, r2
 80085cc:	6239      	str	r1, [r7, #32]
 80085ce:	415b      	adcs	r3, r3
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
 80085d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085d6:	4641      	mov	r1, r8
 80085d8:	1854      	adds	r4, r2, r1
 80085da:	4649      	mov	r1, r9
 80085dc:	eb43 0501 	adc.w	r5, r3, r1
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	f04f 0300 	mov.w	r3, #0
 80085e8:	00eb      	lsls	r3, r5, #3
 80085ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085ee:	00e2      	lsls	r2, r4, #3
 80085f0:	4614      	mov	r4, r2
 80085f2:	461d      	mov	r5, r3
 80085f4:	4643      	mov	r3, r8
 80085f6:	18e3      	adds	r3, r4, r3
 80085f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085fc:	464b      	mov	r3, r9
 80085fe:	eb45 0303 	adc.w	r3, r5, r3
 8008602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008616:	f04f 0200 	mov.w	r2, #0
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008622:	4629      	mov	r1, r5
 8008624:	008b      	lsls	r3, r1, #2
 8008626:	4621      	mov	r1, r4
 8008628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800862c:	4621      	mov	r1, r4
 800862e:	008a      	lsls	r2, r1, #2
 8008630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008634:	f7f8 fb30 	bl	8000c98 <__aeabi_uldivmod>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4b60      	ldr	r3, [pc, #384]	; (80087c0 <UART_SetConfig+0x4e4>)
 800863e:	fba3 2302 	umull	r2, r3, r3, r2
 8008642:	095b      	lsrs	r3, r3, #5
 8008644:	011c      	lsls	r4, r3, #4
 8008646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800864a:	2200      	movs	r2, #0
 800864c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008658:	4642      	mov	r2, r8
 800865a:	464b      	mov	r3, r9
 800865c:	1891      	adds	r1, r2, r2
 800865e:	61b9      	str	r1, [r7, #24]
 8008660:	415b      	adcs	r3, r3
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008668:	4641      	mov	r1, r8
 800866a:	1851      	adds	r1, r2, r1
 800866c:	6139      	str	r1, [r7, #16]
 800866e:	4649      	mov	r1, r9
 8008670:	414b      	adcs	r3, r1
 8008672:	617b      	str	r3, [r7, #20]
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008680:	4659      	mov	r1, fp
 8008682:	00cb      	lsls	r3, r1, #3
 8008684:	4651      	mov	r1, sl
 8008686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800868a:	4651      	mov	r1, sl
 800868c:	00ca      	lsls	r2, r1, #3
 800868e:	4610      	mov	r0, r2
 8008690:	4619      	mov	r1, r3
 8008692:	4603      	mov	r3, r0
 8008694:	4642      	mov	r2, r8
 8008696:	189b      	adds	r3, r3, r2
 8008698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800869c:	464b      	mov	r3, r9
 800869e:	460a      	mov	r2, r1
 80086a0:	eb42 0303 	adc.w	r3, r2, r3
 80086a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80086b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	f04f 0300 	mov.w	r3, #0
 80086bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80086c0:	4649      	mov	r1, r9
 80086c2:	008b      	lsls	r3, r1, #2
 80086c4:	4641      	mov	r1, r8
 80086c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ca:	4641      	mov	r1, r8
 80086cc:	008a      	lsls	r2, r1, #2
 80086ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086d2:	f7f8 fae1 	bl	8000c98 <__aeabi_uldivmod>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4611      	mov	r1, r2
 80086dc:	4b38      	ldr	r3, [pc, #224]	; (80087c0 <UART_SetConfig+0x4e4>)
 80086de:	fba3 2301 	umull	r2, r3, r3, r1
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	2264      	movs	r2, #100	; 0x64
 80086e6:	fb02 f303 	mul.w	r3, r2, r3
 80086ea:	1acb      	subs	r3, r1, r3
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	3332      	adds	r3, #50	; 0x32
 80086f0:	4a33      	ldr	r2, [pc, #204]	; (80087c0 <UART_SetConfig+0x4e4>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	095b      	lsrs	r3, r3, #5
 80086f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086fc:	441c      	add	r4, r3
 80086fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008702:	2200      	movs	r2, #0
 8008704:	673b      	str	r3, [r7, #112]	; 0x70
 8008706:	677a      	str	r2, [r7, #116]	; 0x74
 8008708:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800870c:	4642      	mov	r2, r8
 800870e:	464b      	mov	r3, r9
 8008710:	1891      	adds	r1, r2, r2
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	415b      	adcs	r3, r3
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800871c:	4641      	mov	r1, r8
 800871e:	1851      	adds	r1, r2, r1
 8008720:	6039      	str	r1, [r7, #0]
 8008722:	4649      	mov	r1, r9
 8008724:	414b      	adcs	r3, r1
 8008726:	607b      	str	r3, [r7, #4]
 8008728:	f04f 0200 	mov.w	r2, #0
 800872c:	f04f 0300 	mov.w	r3, #0
 8008730:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008734:	4659      	mov	r1, fp
 8008736:	00cb      	lsls	r3, r1, #3
 8008738:	4651      	mov	r1, sl
 800873a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800873e:	4651      	mov	r1, sl
 8008740:	00ca      	lsls	r2, r1, #3
 8008742:	4610      	mov	r0, r2
 8008744:	4619      	mov	r1, r3
 8008746:	4603      	mov	r3, r0
 8008748:	4642      	mov	r2, r8
 800874a:	189b      	adds	r3, r3, r2
 800874c:	66bb      	str	r3, [r7, #104]	; 0x68
 800874e:	464b      	mov	r3, r9
 8008750:	460a      	mov	r2, r1
 8008752:	eb42 0303 	adc.w	r3, r2, r3
 8008756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	663b      	str	r3, [r7, #96]	; 0x60
 8008762:	667a      	str	r2, [r7, #100]	; 0x64
 8008764:	f04f 0200 	mov.w	r2, #0
 8008768:	f04f 0300 	mov.w	r3, #0
 800876c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008770:	4649      	mov	r1, r9
 8008772:	008b      	lsls	r3, r1, #2
 8008774:	4641      	mov	r1, r8
 8008776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800877a:	4641      	mov	r1, r8
 800877c:	008a      	lsls	r2, r1, #2
 800877e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008782:	f7f8 fa89 	bl	8000c98 <__aeabi_uldivmod>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4b0d      	ldr	r3, [pc, #52]	; (80087c0 <UART_SetConfig+0x4e4>)
 800878c:	fba3 1302 	umull	r1, r3, r3, r2
 8008790:	095b      	lsrs	r3, r3, #5
 8008792:	2164      	movs	r1, #100	; 0x64
 8008794:	fb01 f303 	mul.w	r3, r1, r3
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	011b      	lsls	r3, r3, #4
 800879c:	3332      	adds	r3, #50	; 0x32
 800879e:	4a08      	ldr	r2, [pc, #32]	; (80087c0 <UART_SetConfig+0x4e4>)
 80087a0:	fba2 2303 	umull	r2, r3, r2, r3
 80087a4:	095b      	lsrs	r3, r3, #5
 80087a6:	f003 020f 	and.w	r2, r3, #15
 80087aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4422      	add	r2, r4
 80087b2:	609a      	str	r2, [r3, #8]
}
 80087b4:	bf00      	nop
 80087b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80087ba:	46bd      	mov	sp, r7
 80087bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087c0:	51eb851f 	.word	0x51eb851f

080087c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087c4:	b084      	sub	sp, #16
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	f107 001c 	add.w	r0, r7, #28
 80087d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d122      	bne.n	8008822 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80087f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008806:	2b01      	cmp	r3, #1
 8008808:	d105      	bne.n	8008816 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f001 fbee 	bl	8009ff8 <USB_CoreReset>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]
 8008820:	e01a      	b.n	8008858 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 fbe2 	bl	8009ff8 <USB_CoreReset>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d106      	bne.n	800884c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008842:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	639a      	str	r2, [r3, #56]	; 0x38
 800884a:	e005      	b.n	8008858 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008850:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	2b01      	cmp	r3, #1
 800885c:	d10b      	bne.n	8008876 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f043 0206 	orr.w	r2, r3, #6
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f043 0220 	orr.w	r2, r3, #32
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008882:	b004      	add	sp, #16
 8008884:	4770      	bx	lr
	...

08008888 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	4613      	mov	r3, r2
 8008894:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d165      	bne.n	8008968 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	4a41      	ldr	r2, [pc, #260]	; (80089a4 <USB_SetTurnaroundTime+0x11c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d906      	bls.n	80088b2 <USB_SetTurnaroundTime+0x2a>
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4a40      	ldr	r2, [pc, #256]	; (80089a8 <USB_SetTurnaroundTime+0x120>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d202      	bcs.n	80088b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80088ac:	230f      	movs	r3, #15
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	e062      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	4a3c      	ldr	r2, [pc, #240]	; (80089a8 <USB_SetTurnaroundTime+0x120>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d306      	bcc.n	80088c8 <USB_SetTurnaroundTime+0x40>
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	4a3b      	ldr	r2, [pc, #236]	; (80089ac <USB_SetTurnaroundTime+0x124>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d202      	bcs.n	80088c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80088c2:	230e      	movs	r3, #14
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	e057      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4a38      	ldr	r2, [pc, #224]	; (80089ac <USB_SetTurnaroundTime+0x124>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d306      	bcc.n	80088de <USB_SetTurnaroundTime+0x56>
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	4a37      	ldr	r2, [pc, #220]	; (80089b0 <USB_SetTurnaroundTime+0x128>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d202      	bcs.n	80088de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80088d8:	230d      	movs	r3, #13
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	e04c      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	4a33      	ldr	r2, [pc, #204]	; (80089b0 <USB_SetTurnaroundTime+0x128>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d306      	bcc.n	80088f4 <USB_SetTurnaroundTime+0x6c>
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	4a32      	ldr	r2, [pc, #200]	; (80089b4 <USB_SetTurnaroundTime+0x12c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d802      	bhi.n	80088f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80088ee:	230c      	movs	r3, #12
 80088f0:	617b      	str	r3, [r7, #20]
 80088f2:	e041      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	4a2f      	ldr	r2, [pc, #188]	; (80089b4 <USB_SetTurnaroundTime+0x12c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d906      	bls.n	800890a <USB_SetTurnaroundTime+0x82>
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4a2e      	ldr	r2, [pc, #184]	; (80089b8 <USB_SetTurnaroundTime+0x130>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d802      	bhi.n	800890a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008904:	230b      	movs	r3, #11
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	e036      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	4a2a      	ldr	r2, [pc, #168]	; (80089b8 <USB_SetTurnaroundTime+0x130>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d906      	bls.n	8008920 <USB_SetTurnaroundTime+0x98>
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	4a29      	ldr	r2, [pc, #164]	; (80089bc <USB_SetTurnaroundTime+0x134>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d802      	bhi.n	8008920 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800891a:	230a      	movs	r3, #10
 800891c:	617b      	str	r3, [r7, #20]
 800891e:	e02b      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4a26      	ldr	r2, [pc, #152]	; (80089bc <USB_SetTurnaroundTime+0x134>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d906      	bls.n	8008936 <USB_SetTurnaroundTime+0xae>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	4a25      	ldr	r2, [pc, #148]	; (80089c0 <USB_SetTurnaroundTime+0x138>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d202      	bcs.n	8008936 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008930:	2309      	movs	r3, #9
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	e020      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	4a21      	ldr	r2, [pc, #132]	; (80089c0 <USB_SetTurnaroundTime+0x138>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d306      	bcc.n	800894c <USB_SetTurnaroundTime+0xc4>
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	4a20      	ldr	r2, [pc, #128]	; (80089c4 <USB_SetTurnaroundTime+0x13c>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d802      	bhi.n	800894c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008946:	2308      	movs	r3, #8
 8008948:	617b      	str	r3, [r7, #20]
 800894a:	e015      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	4a1d      	ldr	r2, [pc, #116]	; (80089c4 <USB_SetTurnaroundTime+0x13c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d906      	bls.n	8008962 <USB_SetTurnaroundTime+0xda>
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4a1c      	ldr	r2, [pc, #112]	; (80089c8 <USB_SetTurnaroundTime+0x140>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d202      	bcs.n	8008962 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800895c:	2307      	movs	r3, #7
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	e00a      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008962:	2306      	movs	r3, #6
 8008964:	617b      	str	r3, [r7, #20]
 8008966:	e007      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d102      	bne.n	8008974 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800896e:	2309      	movs	r3, #9
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	e001      	b.n	8008978 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008974:	2309      	movs	r3, #9
 8008976:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68da      	ldr	r2, [r3, #12]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	029b      	lsls	r3, r3, #10
 800898c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008990:	431a      	orrs	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	371c      	adds	r7, #28
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	00d8acbf 	.word	0x00d8acbf
 80089a8:	00e4e1c0 	.word	0x00e4e1c0
 80089ac:	00f42400 	.word	0x00f42400
 80089b0:	01067380 	.word	0x01067380
 80089b4:	011a499f 	.word	0x011a499f
 80089b8:	01312cff 	.word	0x01312cff
 80089bc:	014ca43f 	.word	0x014ca43f
 80089c0:	016e3600 	.word	0x016e3600
 80089c4:	01a6ab1f 	.word	0x01a6ab1f
 80089c8:	01e84800 	.word	0x01e84800

080089cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f043 0201 	orr.w	r2, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f023 0201 	bic.w	r2, r3, #1
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a2c:	78fb      	ldrb	r3, [r7, #3]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d115      	bne.n	8008a5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a3e:	2001      	movs	r0, #1
 8008a40:	f7fa fdf2 	bl	8003628 <HAL_Delay>
      ms++;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3301      	adds	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f001 fa45 	bl	8009eda <USB_GetMode>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d01e      	beq.n	8008a94 <USB_SetCurrentMode+0x84>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b31      	cmp	r3, #49	; 0x31
 8008a5a:	d9f0      	bls.n	8008a3e <USB_SetCurrentMode+0x2e>
 8008a5c:	e01a      	b.n	8008a94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d115      	bne.n	8008a90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a70:	2001      	movs	r0, #1
 8008a72:	f7fa fdd9 	bl	8003628 <HAL_Delay>
      ms++;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 fa2c 	bl	8009eda <USB_GetMode>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <USB_SetCurrentMode+0x84>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b31      	cmp	r3, #49	; 0x31
 8008a8c:	d9f0      	bls.n	8008a70 <USB_SetCurrentMode+0x60>
 8008a8e:	e001      	b.n	8008a94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e005      	b.n	8008aa0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b32      	cmp	r3, #50	; 0x32
 8008a98:	d101      	bne.n	8008a9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e000      	b.n	8008aa0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b086      	sub	sp, #24
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	613b      	str	r3, [r7, #16]
 8008ac6:	e009      	b.n	8008adc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	3340      	adds	r3, #64	; 0x40
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	613b      	str	r3, [r7, #16]
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b0e      	cmp	r3, #14
 8008ae0:	d9f2      	bls.n	8008ac8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d11c      	bne.n	8008b22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008af6:	f043 0302 	orr.w	r3, r3, #2
 8008afa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	639a      	str	r2, [r3, #56]	; 0x38
 8008b20:	e00b      	b.n	8008b3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b40:	461a      	mov	r2, r3
 8008b42:	2300      	movs	r3, #0
 8008b44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b54:	461a      	mov	r2, r3
 8008b56:	680b      	ldr	r3, [r1, #0]
 8008b58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d10c      	bne.n	8008b7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d104      	bne.n	8008b70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b66:	2100      	movs	r1, #0
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f965 	bl	8008e38 <USB_SetDevSpeed>
 8008b6e:	e008      	b.n	8008b82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b70:	2101      	movs	r1, #1
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f960 	bl	8008e38 <USB_SetDevSpeed>
 8008b78:	e003      	b.n	8008b82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b7a:	2103      	movs	r1, #3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f95b 	bl	8008e38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b82:	2110      	movs	r1, #16
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f8f3 	bl	8008d70 <USB_FlushTxFifo>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f91f 	bl	8008dd8 <USB_FlushRxFifo>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008baa:	461a      	mov	r2, r3
 8008bac:	2300      	movs	r3, #0
 8008bae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	2300      	movs	r3, #0
 8008bba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	e043      	b.n	8008c56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be4:	d118      	bne.n	8008c18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10a      	bne.n	8008c02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	e013      	b.n	8008c2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	e008      	b.n	8008c2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c24:	461a      	mov	r2, r3
 8008c26:	2300      	movs	r3, #0
 8008c28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c36:	461a      	mov	r2, r3
 8008c38:	2300      	movs	r3, #0
 8008c3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c48:	461a      	mov	r2, r3
 8008c4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	3301      	adds	r3, #1
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d3b7      	bcc.n	8008bce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c5e:	2300      	movs	r3, #0
 8008c60:	613b      	str	r3, [r7, #16]
 8008c62:	e043      	b.n	8008cec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c7a:	d118      	bne.n	8008cae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	e013      	b.n	8008cc0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	e008      	b.n	8008cc0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cba:	461a      	mov	r2, r3
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ccc:	461a      	mov	r2, r3
 8008cce:	2300      	movs	r3, #0
 8008cd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ce4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d3b7      	bcc.n	8008c64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d105      	bne.n	8008d28 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	f043 0210 	orr.w	r2, r3, #16
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	699a      	ldr	r2, [r3, #24]
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <USB_DevInit+0x2c4>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	f043 0208 	orr.w	r2, r3, #8
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d107      	bne.n	8008d5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d54:	f043 0304 	orr.w	r3, r3, #4
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d68:	b004      	add	sp, #16
 8008d6a:	4770      	bx	lr
 8008d6c:	803c3800 	.word	0x803c3800

08008d70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3301      	adds	r3, #1
 8008d82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <USB_FlushTxFifo+0x64>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d901      	bls.n	8008d90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e01b      	b.n	8008dc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	daf2      	bge.n	8008d7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	019b      	lsls	r3, r3, #6
 8008da0:	f043 0220 	orr.w	r2, r3, #32
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3301      	adds	r3, #1
 8008dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4a08      	ldr	r2, [pc, #32]	; (8008dd4 <USB_FlushTxFifo+0x64>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d901      	bls.n	8008dba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e006      	b.n	8008dc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b20      	cmp	r3, #32
 8008dc4:	d0f0      	beq.n	8008da8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	00030d40 	.word	0x00030d40

08008dd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4a11      	ldr	r2, [pc, #68]	; (8008e34 <USB_FlushRxFifo+0x5c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d901      	bls.n	8008df6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e018      	b.n	8008e28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	daf2      	bge.n	8008de4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2210      	movs	r2, #16
 8008e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4a08      	ldr	r2, [pc, #32]	; (8008e34 <USB_FlushRxFifo+0x5c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d901      	bls.n	8008e1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e006      	b.n	8008e28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f003 0310 	and.w	r3, r3, #16
 8008e22:	2b10      	cmp	r3, #16
 8008e24:	d0f0      	beq.n	8008e08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	00030d40 	.word	0x00030d40

08008e38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	68f9      	ldr	r1, [r7, #12]
 8008e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b087      	sub	sp, #28
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f003 0306 	and.w	r3, r3, #6
 8008e82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d102      	bne.n	8008e90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	75fb      	strb	r3, [r7, #23]
 8008e8e:	e00a      	b.n	8008ea6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d002      	beq.n	8008e9c <USB_GetDevSpeed+0x32>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b06      	cmp	r3, #6
 8008e9a:	d102      	bne.n	8008ea2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	75fb      	strb	r3, [r7, #23]
 8008ea0:	e001      	b.n	8008ea6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ea2:	230f      	movs	r3, #15
 8008ea4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	371c      	adds	r7, #28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	785b      	ldrb	r3, [r3, #1]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d13a      	bne.n	8008f46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	f003 030f 	and.w	r3, r3, #15
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	68f9      	ldr	r1, [r7, #12]
 8008eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d155      	bne.n	8008fb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	791b      	ldrb	r3, [r3, #4]
 8008f22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	059b      	lsls	r3, r3, #22
 8008f2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	0151      	lsls	r1, r2, #5
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	440a      	add	r2, r1
 8008f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	e036      	b.n	8008fb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4c:	69da      	ldr	r2, [r3, #28]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	2101      	movs	r1, #1
 8008f58:	fa01 f303 	lsl.w	r3, r1, r3
 8008f5c:	041b      	lsls	r3, r3, #16
 8008f5e:	68f9      	ldr	r1, [r7, #12]
 8008f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f64:	4313      	orrs	r3, r2
 8008f66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d11a      	bne.n	8008fb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	791b      	ldrb	r3, [r3, #4]
 8008f98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f9a:	430b      	orrs	r3, r1
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	0151      	lsls	r1, r2, #5
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	440a      	add	r2, r1
 8008fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
	...

08008fc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	785b      	ldrb	r3, [r3, #1]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d161      	bne.n	80090a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ff6:	d11f      	bne.n	8009038 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	440a      	add	r2, r1
 800900e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009012:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009016:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009032:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	f003 030f 	and.w	r3, r3, #15
 8009048:	2101      	movs	r1, #1
 800904a:	fa01 f303 	lsl.w	r3, r1, r3
 800904e:	b29b      	uxth	r3, r3
 8009050:	43db      	mvns	r3, r3
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009058:	4013      	ands	r3, r2
 800905a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009062:	69da      	ldr	r2, [r3, #28]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	f003 030f 	and.w	r3, r3, #15
 800906c:	2101      	movs	r1, #1
 800906e:	fa01 f303 	lsl.w	r3, r1, r3
 8009072:	b29b      	uxth	r3, r3
 8009074:	43db      	mvns	r3, r3
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800907c:	4013      	ands	r3, r2
 800907e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	0159      	lsls	r1, r3, #5
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	440b      	add	r3, r1
 8009096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909a:	4619      	mov	r1, r3
 800909c:	4b35      	ldr	r3, [pc, #212]	; (8009174 <USB_DeactivateEndpoint+0x1b0>)
 800909e:	4013      	ands	r3, r2
 80090a0:	600b      	str	r3, [r1, #0]
 80090a2:	e060      	b.n	8009166 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ba:	d11f      	bne.n	80090fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	0151      	lsls	r1, r2, #5
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	440a      	add	r2, r1
 80090d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	0151      	lsls	r1, r2, #5
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	440a      	add	r2, r1
 80090f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	f003 030f 	and.w	r3, r3, #15
 800910c:	2101      	movs	r1, #1
 800910e:	fa01 f303 	lsl.w	r3, r1, r3
 8009112:	041b      	lsls	r3, r3, #16
 8009114:	43db      	mvns	r3, r3
 8009116:	68f9      	ldr	r1, [r7, #12]
 8009118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800911c:	4013      	ands	r3, r2
 800911e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	f003 030f 	and.w	r3, r3, #15
 8009130:	2101      	movs	r1, #1
 8009132:	fa01 f303 	lsl.w	r3, r1, r3
 8009136:	041b      	lsls	r3, r3, #16
 8009138:	43db      	mvns	r3, r3
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009140:	4013      	ands	r3, r2
 8009142:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	0159      	lsls	r1, r3, #5
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	440b      	add	r3, r1
 800915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915e:	4619      	mov	r1, r3
 8009160:	4b05      	ldr	r3, [pc, #20]	; (8009178 <USB_DeactivateEndpoint+0x1b4>)
 8009162:	4013      	ands	r3, r2
 8009164:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	ec337800 	.word	0xec337800
 8009178:	eff37800 	.word	0xeff37800

0800917c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	; 0x28
 8009180:	af02      	add	r7, sp, #8
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	4613      	mov	r3, r2
 8009188:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	785b      	ldrb	r3, [r3, #1]
 8009198:	2b01      	cmp	r3, #1
 800919a:	f040 815c 	bne.w	8009456 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d132      	bne.n	800920c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	0151      	lsls	r1, r2, #5
 80091b8:	69fa      	ldr	r2, [r7, #28]
 80091ba:	440a      	add	r2, r1
 80091bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	69fa      	ldr	r2, [r7, #28]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009204:	0cdb      	lsrs	r3, r3, #19
 8009206:	04db      	lsls	r3, r3, #19
 8009208:	6113      	str	r3, [r2, #16]
 800920a:	e074      	b.n	80092f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009226:	0cdb      	lsrs	r3, r3, #19
 8009228:	04db      	lsls	r3, r3, #19
 800922a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009246:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800924a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800924e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6999      	ldr	r1, [r3, #24]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	440b      	add	r3, r1
 8009268:	1e59      	subs	r1, r3, #1
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009272:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009274:	4b9d      	ldr	r3, [pc, #628]	; (80094ec <USB_EPStartXfer+0x370>)
 8009276:	400b      	ands	r3, r1
 8009278:	69b9      	ldr	r1, [r7, #24]
 800927a:	0148      	lsls	r0, r1, #5
 800927c:	69f9      	ldr	r1, [r7, #28]
 800927e:	4401      	add	r1, r0
 8009280:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009284:	4313      	orrs	r3, r2
 8009286:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009294:	691a      	ldr	r2, [r3, #16]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800929e:	69b9      	ldr	r1, [r7, #24]
 80092a0:	0148      	lsls	r0, r1, #5
 80092a2:	69f9      	ldr	r1, [r7, #28]
 80092a4:	4401      	add	r1, r0
 80092a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092aa:	4313      	orrs	r3, r2
 80092ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	791b      	ldrb	r3, [r3, #4]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d11f      	bne.n	80092f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	0151      	lsls	r1, r2, #5
 80092c8:	69fa      	ldr	r2, [r7, #28]
 80092ca:	440a      	add	r2, r1
 80092cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80092d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	0151      	lsls	r1, r2, #5
 80092e8:	69fa      	ldr	r2, [r7, #28]
 80092ea:	440a      	add	r2, r1
 80092ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d14b      	bne.n	8009394 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d009      	beq.n	8009318 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009310:	461a      	mov	r2, r3
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	791b      	ldrb	r3, [r3, #4]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d128      	bne.n	8009372 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932c:	2b00      	cmp	r3, #0
 800932e:	d110      	bne.n	8009352 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	0151      	lsls	r1, r2, #5
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	440a      	add	r2, r1
 8009346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800934a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800934e:	6013      	str	r3, [r2, #0]
 8009350:	e00f      	b.n	8009372 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	4413      	add	r3, r2
 800935a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	0151      	lsls	r1, r2, #5
 8009364:	69fa      	ldr	r2, [r7, #28]
 8009366:	440a      	add	r2, r1
 8009368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800936c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009370:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4413      	add	r3, r2
 800937a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	69ba      	ldr	r2, [r7, #24]
 8009382:	0151      	lsls	r1, r2, #5
 8009384:	69fa      	ldr	r2, [r7, #28]
 8009386:	440a      	add	r2, r1
 8009388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800938c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	e133      	b.n	80095fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	0151      	lsls	r1, r2, #5
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	440a      	add	r2, r1
 80093aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	791b      	ldrb	r3, [r3, #4]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d015      	beq.n	80093e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 811b 	beq.w	80095fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	f003 030f 	and.w	r3, r3, #15
 80093d6:	2101      	movs	r1, #1
 80093d8:	fa01 f303 	lsl.w	r3, r1, r3
 80093dc:	69f9      	ldr	r1, [r7, #28]
 80093de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093e2:	4313      	orrs	r3, r2
 80093e4:	634b      	str	r3, [r1, #52]	; 0x34
 80093e6:	e109      	b.n	80095fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d110      	bne.n	800941a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	69ba      	ldr	r2, [r7, #24]
 8009408:	0151      	lsls	r1, r2, #5
 800940a:	69fa      	ldr	r2, [r7, #28]
 800940c:	440a      	add	r2, r1
 800940e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	e00f      	b.n	800943a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	0151      	lsls	r1, r2, #5
 800942c:	69fa      	ldr	r2, [r7, #28]
 800942e:	440a      	add	r2, r1
 8009430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009438:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6919      	ldr	r1, [r3, #16]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	781a      	ldrb	r2, [r3, #0]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	b298      	uxth	r0, r3
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	4603      	mov	r3, r0
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 fade 	bl	8009a10 <USB_WritePacket>
 8009454:	e0d2      	b.n	80095fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	4413      	add	r3, r2
 800945e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	0151      	lsls	r1, r2, #5
 8009468:	69fa      	ldr	r2, [r7, #28]
 800946a:	440a      	add	r2, r1
 800946c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009470:	0cdb      	lsrs	r3, r3, #19
 8009472:	04db      	lsls	r3, r3, #19
 8009474:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	0151      	lsls	r1, r2, #5
 8009488:	69fa      	ldr	r2, [r7, #28]
 800948a:	440a      	add	r2, r1
 800948c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009490:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009494:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009498:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d126      	bne.n	80094f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ae:	691a      	ldr	r2, [r3, #16]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094b8:	69b9      	ldr	r1, [r7, #24]
 80094ba:	0148      	lsls	r0, r1, #5
 80094bc:	69f9      	ldr	r1, [r7, #28]
 80094be:	4401      	add	r1, r0
 80094c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094c4:	4313      	orrs	r3, r2
 80094c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	0151      	lsls	r1, r2, #5
 80094da:	69fa      	ldr	r2, [r7, #28]
 80094dc:	440a      	add	r2, r1
 80094de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094e6:	6113      	str	r3, [r2, #16]
 80094e8:	e03a      	b.n	8009560 <USB_EPStartXfer+0x3e4>
 80094ea:	bf00      	nop
 80094ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	699a      	ldr	r2, [r3, #24]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	4413      	add	r3, r2
 80094fa:	1e5a      	subs	r2, r3, #1
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	fbb2 f3f3 	udiv	r3, r2, r3
 8009504:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	8afa      	ldrh	r2, [r7, #22]
 800950c:	fb03 f202 	mul.w	r2, r3, r2
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009520:	691a      	ldr	r2, [r3, #16]
 8009522:	8afb      	ldrh	r3, [r7, #22]
 8009524:	04d9      	lsls	r1, r3, #19
 8009526:	4b38      	ldr	r3, [pc, #224]	; (8009608 <USB_EPStartXfer+0x48c>)
 8009528:	400b      	ands	r3, r1
 800952a:	69b9      	ldr	r1, [r7, #24]
 800952c:	0148      	lsls	r0, r1, #5
 800952e:	69f9      	ldr	r1, [r7, #28]
 8009530:	4401      	add	r1, r0
 8009532:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009536:	4313      	orrs	r3, r2
 8009538:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	015a      	lsls	r2, r3, #5
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	4413      	add	r3, r2
 8009542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009546:	691a      	ldr	r2, [r3, #16]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009550:	69b9      	ldr	r1, [r7, #24]
 8009552:	0148      	lsls	r0, r1, #5
 8009554:	69f9      	ldr	r1, [r7, #28]
 8009556:	4401      	add	r1, r0
 8009558:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800955c:	4313      	orrs	r3, r2
 800955e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009560:	79fb      	ldrb	r3, [r7, #7]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d10d      	bne.n	8009582 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d009      	beq.n	8009582 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	6919      	ldr	r1, [r3, #16]
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957e:	460a      	mov	r2, r1
 8009580:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	791b      	ldrb	r3, [r3, #4]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d128      	bne.n	80095dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009596:	2b00      	cmp	r3, #0
 8009598:	d110      	bne.n	80095bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	0151      	lsls	r1, r2, #5
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	440a      	add	r2, r1
 80095b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	e00f      	b.n	80095dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	0151      	lsls	r1, r2, #5
 80095ce:	69fa      	ldr	r2, [r7, #28]
 80095d0:	440a      	add	r2, r1
 80095d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	015a      	lsls	r2, r3, #5
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	4413      	add	r3, r2
 80095e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	0151      	lsls	r1, r2, #5
 80095ee:	69fa      	ldr	r2, [r7, #28]
 80095f0:	440a      	add	r2, r1
 80095f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3720      	adds	r7, #32
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	1ff80000 	.word	0x1ff80000

0800960c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	2b01      	cmp	r3, #1
 800962a:	f040 80ce 	bne.w	80097ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d132      	bne.n	800969c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	0151      	lsls	r1, r2, #5
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	440a      	add	r2, r1
 800964c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009658:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	0151      	lsls	r1, r2, #5
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	440a      	add	r2, r1
 8009670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	4413      	add	r3, r2
 8009682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	0151      	lsls	r1, r2, #5
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	440a      	add	r2, r1
 8009690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009694:	0cdb      	lsrs	r3, r3, #19
 8009696:	04db      	lsls	r3, r3, #19
 8009698:	6113      	str	r3, [r2, #16]
 800969a:	e04e      	b.n	800973a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	0151      	lsls	r1, r2, #5
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	440a      	add	r2, r1
 80096b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b6:	0cdb      	lsrs	r3, r3, #19
 80096b8:	04db      	lsls	r3, r3, #19
 80096ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	0151      	lsls	r1, r2, #5
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	440a      	add	r2, r1
 80096d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	699a      	ldr	r2, [r3, #24]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d903      	bls.n	80096f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	68da      	ldr	r2, [r3, #12]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	0151      	lsls	r1, r2, #5
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	440a      	add	r2, r1
 800970a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800970e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009720:	691a      	ldr	r2, [r3, #16]
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800972a:	6939      	ldr	r1, [r7, #16]
 800972c:	0148      	lsls	r0, r1, #5
 800972e:	6979      	ldr	r1, [r7, #20]
 8009730:	4401      	add	r1, r0
 8009732:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009736:	4313      	orrs	r3, r2
 8009738:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800973a:	79fb      	ldrb	r3, [r7, #7]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d11e      	bne.n	800977e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d009      	beq.n	800975c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009754:	461a      	mov	r2, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	0151      	lsls	r1, r2, #5
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	440a      	add	r2, r1
 8009772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009776:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	e097      	b.n	80098ae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	0151      	lsls	r1, r2, #5
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	440a      	add	r2, r1
 8009794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800979c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 8083 	beq.w	80098ae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	f003 030f 	and.w	r3, r3, #15
 80097b8:	2101      	movs	r1, #1
 80097ba:	fa01 f303 	lsl.w	r3, r1, r3
 80097be:	6979      	ldr	r1, [r7, #20]
 80097c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097c4:	4313      	orrs	r3, r2
 80097c6:	634b      	str	r3, [r1, #52]	; 0x34
 80097c8:	e071      	b.n	80098ae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	0151      	lsls	r1, r2, #5
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	440a      	add	r2, r1
 80097e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e4:	0cdb      	lsrs	r3, r3, #19
 80097e6:	04db      	lsls	r3, r3, #19
 80097e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	0151      	lsls	r1, r2, #5
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	440a      	add	r2, r1
 8009800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009804:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009808:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800980c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d003      	beq.n	800981e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	0151      	lsls	r1, r2, #5
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	440a      	add	r2, r1
 800983c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009844:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800985c:	6939      	ldr	r1, [r7, #16]
 800985e:	0148      	lsls	r0, r1, #5
 8009860:	6979      	ldr	r1, [r7, #20]
 8009862:	4401      	add	r1, r0
 8009864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009868:	4313      	orrs	r3, r2
 800986a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d10d      	bne.n	800988e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d009      	beq.n	800988e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	6919      	ldr	r1, [r3, #16]
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988a:	460a      	mov	r2, r1
 800988c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	0151      	lsls	r1, r2, #5
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	440a      	add	r2, r1
 80098a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	785b      	ldrb	r3, [r3, #1]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d14a      	bne.n	8009970 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098f2:	f040 8086 	bne.w	8009a02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	015a      	lsls	r2, r3, #5
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	7812      	ldrb	r2, [r2, #0]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	440a      	add	r2, r1
 8009910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009914:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009918:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	7812      	ldrb	r2, [r2, #0]
 800992e:	0151      	lsls	r1, r2, #5
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	440a      	add	r2, r1
 8009934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800993c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3301      	adds	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f242 7210 	movw	r2, #10000	; 0x2710
 800994a:	4293      	cmp	r3, r2
 800994c:	d902      	bls.n	8009954 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	75fb      	strb	r3, [r7, #23]
          break;
 8009952:	e056      	b.n	8009a02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800996c:	d0e7      	beq.n	800993e <USB_EPStopXfer+0x82>
 800996e:	e048      	b.n	8009a02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009988:	d13b      	bne.n	8009a02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	7812      	ldrb	r2, [r2, #0]
 800999e:	0151      	lsls	r1, r2, #5
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	440a      	add	r2, r1
 80099a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	7812      	ldrb	r2, [r2, #0]
 80099c2:	0151      	lsls	r1, r2, #5
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	440a      	add	r2, r1
 80099c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3301      	adds	r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f242 7210 	movw	r2, #10000	; 0x2710
 80099de:	4293      	cmp	r3, r2
 80099e0:	d902      	bls.n	80099e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	75fb      	strb	r3, [r7, #23]
          break;
 80099e6:	e00c      	b.n	8009a02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a00:	d0e7      	beq.n	80099d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	371c      	adds	r7, #28
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b089      	sub	sp, #36	; 0x24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	460b      	mov	r3, r1
 8009a20:	71fb      	strb	r3, [r7, #7]
 8009a22:	4613      	mov	r3, r2
 8009a24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d123      	bne.n	8009a7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a36:	88bb      	ldrh	r3, [r7, #4]
 8009a38:	3303      	adds	r3, #3
 8009a3a:	089b      	lsrs	r3, r3, #2
 8009a3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a3e:	2300      	movs	r3, #0
 8009a40:	61bb      	str	r3, [r7, #24]
 8009a42:	e018      	b.n	8009a76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	031a      	lsls	r2, r3, #12
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a50:	461a      	mov	r2, r3
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	3301      	adds	r3, #1
 8009a62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	3301      	adds	r3, #1
 8009a68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	3301      	adds	r3, #1
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	69ba      	ldr	r2, [r7, #24]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d3e2      	bcc.n	8009a44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3724      	adds	r7, #36	; 0x24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b08b      	sub	sp, #44	; 0x2c
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009aa2:	88fb      	ldrh	r3, [r7, #6]
 8009aa4:	089b      	lsrs	r3, r3, #2
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009aaa:	88fb      	ldrh	r3, [r7, #6]
 8009aac:	f003 0303 	and.w	r3, r3, #3
 8009ab0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	623b      	str	r3, [r7, #32]
 8009ab6:	e014      	b.n	8009ae2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	3301      	adds	r3, #1
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	3301      	adds	r3, #1
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	623b      	str	r3, [r7, #32]
 8009ae2:	6a3a      	ldr	r2, [r7, #32]
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d3e6      	bcc.n	8009ab8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009aea:	8bfb      	ldrh	r3, [r7, #30]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01e      	beq.n	8009b2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009afa:	461a      	mov	r2, r3
 8009afc:	f107 0310 	add.w	r3, r7, #16
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	701a      	strb	r2, [r3, #0]
      i++;
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	3301      	adds	r3, #1
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b22:	8bfb      	ldrh	r3, [r7, #30]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b28:	8bfb      	ldrh	r3, [r7, #30]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1ea      	bne.n	8009b04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	372c      	adds	r7, #44	; 0x2c
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	785b      	ldrb	r3, [r3, #1]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d12c      	bne.n	8009bb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	db12      	blt.n	8009b90 <USB_EPSetStall+0x54>
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00f      	beq.n	8009b90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	0151      	lsls	r1, r2, #5
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	440a      	add	r2, r1
 8009b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	0151      	lsls	r1, r2, #5
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	440a      	add	r2, r1
 8009ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	e02b      	b.n	8009c0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	015a      	lsls	r2, r3, #5
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	4413      	add	r3, r2
 8009bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	db12      	blt.n	8009bea <USB_EPSetStall+0xae>
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00f      	beq.n	8009bea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	0151      	lsls	r1, r2, #5
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	440a      	add	r2, r1
 8009be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009be8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	0151      	lsls	r1, r2, #5
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	440a      	add	r2, r1
 8009c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	785b      	ldrb	r3, [r3, #1]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d128      	bne.n	8009c86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	0151      	lsls	r1, r2, #5
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	440a      	add	r2, r1
 8009c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	791b      	ldrb	r3, [r3, #4]
 8009c58:	2b03      	cmp	r3, #3
 8009c5a:	d003      	beq.n	8009c64 <USB_EPClearStall+0x4c>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	791b      	ldrb	r3, [r3, #4]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d138      	bne.n	8009cd6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	0151      	lsls	r1, r2, #5
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	440a      	add	r2, r1
 8009c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	e027      	b.n	8009cd6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	015a      	lsls	r2, r3, #5
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	0151      	lsls	r1, r2, #5
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	440a      	add	r2, r1
 8009c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ca4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	791b      	ldrb	r3, [r3, #4]
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d003      	beq.n	8009cb6 <USB_EPClearStall+0x9e>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	791b      	ldrb	r3, [r3, #4]
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d10f      	bne.n	8009cd6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	0151      	lsls	r1, r2, #5
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	440a      	add	r2, r1
 8009ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cd4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d18:	68f9      	ldr	r1, [r7, #12]
 8009d1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d4a:	f023 0303 	bic.w	r3, r3, #3
 8009d4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d5e:	f023 0302 	bic.w	r3, r3, #2
 8009d62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b085      	sub	sp, #20
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d8c:	f023 0303 	bic.w	r3, r3, #3
 8009d90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009da0:	f043 0302 	orr.w	r3, r3, #2
 8009da4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	4013      	ands	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b085      	sub	sp, #20
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df6:	69db      	ldr	r3, [r3, #28]
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	0c1b      	lsrs	r3, r3, #16
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2a:	69db      	ldr	r3, [r3, #28]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	4013      	ands	r3, r2
 8009e30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	b29b      	uxth	r3, r3
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b085      	sub	sp, #20
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e52:	78fb      	ldrb	r3, [r7, #3]
 8009e54:	015a      	lsls	r2, r3, #5
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	4413      	add	r3, r2
 8009e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e70:	68bb      	ldr	r3, [r7, #8]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b087      	sub	sp, #28
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	f003 030f 	and.w	r3, r3, #15
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8009eae:	01db      	lsls	r3, r3, #7
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	4013      	ands	r3, r2
 8009eca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	371c      	adds	r7, #28
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b083      	sub	sp, #12
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f14:	f023 0307 	bic.w	r3, r3, #7
 8009f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	460b      	mov	r3, r1
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	333c      	adds	r3, #60	; 0x3c
 8009f52:	3304      	adds	r3, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	4a26      	ldr	r2, [pc, #152]	; (8009ff4 <USB_EP0_OutStart+0xb8>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d90a      	bls.n	8009f76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f70:	d101      	bne.n	8009f76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	e037      	b.n	8009fe6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	2300      	movs	r3, #0
 8009f80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa4:	f043 0318 	orr.w	r3, r3, #24
 8009fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009fbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d10f      	bne.n	8009fe4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fca:	461a      	mov	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009fe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	4f54300a 	.word	0x4f54300a

08009ff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a000:	2300      	movs	r3, #0
 800a002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3301      	adds	r3, #1
 800a008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	4a13      	ldr	r2, [pc, #76]	; (800a05c <USB_CoreReset+0x64>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d901      	bls.n	800a016 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e01b      	b.n	800a04e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	daf2      	bge.n	800a004 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	f043 0201 	orr.w	r2, r3, #1
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3301      	adds	r3, #1
 800a032:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4a09      	ldr	r2, [pc, #36]	; (800a05c <USB_CoreReset+0x64>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d901      	bls.n	800a040 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e006      	b.n	800a04e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d0f0      	beq.n	800a02e <USB_CoreReset+0x36>

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	00030d40 	.word	0x00030d40

0800a060 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a06c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a070:	f005 f93a 	bl	800f2e8 <USBD_static_malloc>
 800a074:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d109      	bne.n	800a090 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	32b0      	adds	r2, #176	; 0xb0
 800a086:	2100      	movs	r1, #0
 800a088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a08c:	2302      	movs	r3, #2
 800a08e:	e0d4      	b.n	800a23a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a090:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a094:	2100      	movs	r1, #0
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f005 ff7f 	bl	800ff9a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	32b0      	adds	r2, #176	; 0xb0
 800a0a6:	68f9      	ldr	r1, [r7, #12]
 800a0a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	32b0      	adds	r2, #176	; 0xb0
 800a0b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	7c1b      	ldrb	r3, [r3, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d138      	bne.n	800a13a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a0c8:	4b5e      	ldr	r3, [pc, #376]	; (800a244 <USBD_CDC_Init+0x1e4>)
 800a0ca:	7819      	ldrb	r1, [r3, #0]
 800a0cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f004 ffe5 	bl	800f0a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a0d8:	4b5a      	ldr	r3, [pc, #360]	; (800a244 <USBD_CDC_Init+0x1e4>)
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	f003 020f 	and.w	r2, r3, #15
 800a0e0:	6879      	ldr	r1, [r7, #4]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4413      	add	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	440b      	add	r3, r1
 800a0ec:	3324      	adds	r3, #36	; 0x24
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0f2:	4b55      	ldr	r3, [pc, #340]	; (800a248 <USBD_CDC_Init+0x1e8>)
 800a0f4:	7819      	ldrb	r1, [r3, #0]
 800a0f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f004 ffd0 	bl	800f0a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a102:	4b51      	ldr	r3, [pc, #324]	; (800a248 <USBD_CDC_Init+0x1e8>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	f003 020f 	and.w	r2, r3, #15
 800a10a:	6879      	ldr	r1, [r7, #4]
 800a10c:	4613      	mov	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	440b      	add	r3, r1
 800a116:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a11a:	2201      	movs	r2, #1
 800a11c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a11e:	4b4b      	ldr	r3, [pc, #300]	; (800a24c <USBD_CDC_Init+0x1ec>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	f003 020f 	and.w	r2, r3, #15
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	4613      	mov	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	440b      	add	r3, r1
 800a132:	3326      	adds	r3, #38	; 0x26
 800a134:	2210      	movs	r2, #16
 800a136:	801a      	strh	r2, [r3, #0]
 800a138:	e035      	b.n	800a1a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a13a:	4b42      	ldr	r3, [pc, #264]	; (800a244 <USBD_CDC_Init+0x1e4>)
 800a13c:	7819      	ldrb	r1, [r3, #0]
 800a13e:	2340      	movs	r3, #64	; 0x40
 800a140:	2202      	movs	r2, #2
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f004 ffad 	bl	800f0a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a148:	4b3e      	ldr	r3, [pc, #248]	; (800a244 <USBD_CDC_Init+0x1e4>)
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	f003 020f 	and.w	r2, r3, #15
 800a150:	6879      	ldr	r1, [r7, #4]
 800a152:	4613      	mov	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	440b      	add	r3, r1
 800a15c:	3324      	adds	r3, #36	; 0x24
 800a15e:	2201      	movs	r2, #1
 800a160:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a162:	4b39      	ldr	r3, [pc, #228]	; (800a248 <USBD_CDC_Init+0x1e8>)
 800a164:	7819      	ldrb	r1, [r3, #0]
 800a166:	2340      	movs	r3, #64	; 0x40
 800a168:	2202      	movs	r2, #2
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f004 ff99 	bl	800f0a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a170:	4b35      	ldr	r3, [pc, #212]	; (800a248 <USBD_CDC_Init+0x1e8>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	f003 020f 	and.w	r2, r3, #15
 800a178:	6879      	ldr	r1, [r7, #4]
 800a17a:	4613      	mov	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	440b      	add	r3, r1
 800a184:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a188:	2201      	movs	r2, #1
 800a18a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a18c:	4b2f      	ldr	r3, [pc, #188]	; (800a24c <USBD_CDC_Init+0x1ec>)
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	f003 020f 	and.w	r2, r3, #15
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	440b      	add	r3, r1
 800a1a0:	3326      	adds	r3, #38	; 0x26
 800a1a2:	2210      	movs	r2, #16
 800a1a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1a6:	4b29      	ldr	r3, [pc, #164]	; (800a24c <USBD_CDC_Init+0x1ec>)
 800a1a8:	7819      	ldrb	r1, [r3, #0]
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	2203      	movs	r2, #3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f004 ff77 	bl	800f0a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a1b4:	4b25      	ldr	r3, [pc, #148]	; (800a24c <USBD_CDC_Init+0x1ec>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	f003 020f 	and.w	r2, r3, #15
 800a1bc:	6879      	ldr	r1, [r7, #4]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	440b      	add	r3, r1
 800a1c8:	3324      	adds	r3, #36	; 0x24
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	33b0      	adds	r3, #176	; 0xb0
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4413      	add	r3, r2
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a204:	2302      	movs	r3, #2
 800a206:	e018      	b.n	800a23a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7c1b      	ldrb	r3, [r3, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10a      	bne.n	800a226 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a210:	4b0d      	ldr	r3, [pc, #52]	; (800a248 <USBD_CDC_Init+0x1e8>)
 800a212:	7819      	ldrb	r1, [r3, #0]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a21a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f005 f82e 	bl	800f280 <USBD_LL_PrepareReceive>
 800a224:	e008      	b.n	800a238 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a226:	4b08      	ldr	r3, [pc, #32]	; (800a248 <USBD_CDC_Init+0x1e8>)
 800a228:	7819      	ldrb	r1, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a230:	2340      	movs	r3, #64	; 0x40
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f005 f824 	bl	800f280 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	200000b3 	.word	0x200000b3
 800a248:	200000b4 	.word	0x200000b4
 800a24c:	200000b5 	.word	0x200000b5

0800a250 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a25c:	4b3a      	ldr	r3, [pc, #232]	; (800a348 <USBD_CDC_DeInit+0xf8>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f004 ff43 	bl	800f0ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a268:	4b37      	ldr	r3, [pc, #220]	; (800a348 <USBD_CDC_DeInit+0xf8>)
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	f003 020f 	and.w	r2, r3, #15
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	4613      	mov	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4413      	add	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	440b      	add	r3, r1
 800a27c:	3324      	adds	r3, #36	; 0x24
 800a27e:	2200      	movs	r2, #0
 800a280:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a282:	4b32      	ldr	r3, [pc, #200]	; (800a34c <USBD_CDC_DeInit+0xfc>)
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f004 ff30 	bl	800f0ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a28e:	4b2f      	ldr	r3, [pc, #188]	; (800a34c <USBD_CDC_DeInit+0xfc>)
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	f003 020f 	and.w	r2, r3, #15
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	4613      	mov	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	440b      	add	r3, r1
 800a2a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a2aa:	4b29      	ldr	r3, [pc, #164]	; (800a350 <USBD_CDC_DeInit+0x100>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f004 ff1c 	bl	800f0ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a2b6:	4b26      	ldr	r3, [pc, #152]	; (800a350 <USBD_CDC_DeInit+0x100>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	f003 020f 	and.w	r2, r3, #15
 800a2be:	6879      	ldr	r1, [r7, #4]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	440b      	add	r3, r1
 800a2ca:	3324      	adds	r3, #36	; 0x24
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a2d0:	4b1f      	ldr	r3, [pc, #124]	; (800a350 <USBD_CDC_DeInit+0x100>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	f003 020f 	and.w	r2, r3, #15
 800a2d8:	6879      	ldr	r1, [r7, #4]
 800a2da:	4613      	mov	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	440b      	add	r3, r1
 800a2e4:	3326      	adds	r3, #38	; 0x26
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	32b0      	adds	r2, #176	; 0xb0
 800a2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d01f      	beq.n	800a33c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	33b0      	adds	r3, #176	; 0xb0
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	32b0      	adds	r2, #176	; 0xb0
 800a31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31e:	4618      	mov	r0, r3
 800a320:	f004 fff0 	bl	800f304 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	32b0      	adds	r2, #176	; 0xb0
 800a32e:	2100      	movs	r1, #0
 800a330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	200000b3 	.word	0x200000b3
 800a34c:	200000b4 	.word	0x200000b4
 800a350:	200000b5 	.word	0x200000b5

0800a354 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	32b0      	adds	r2, #176	; 0xb0
 800a368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a36c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a372:	2300      	movs	r3, #0
 800a374:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d101      	bne.n	800a384 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a380:	2303      	movs	r3, #3
 800a382:	e0bf      	b.n	800a504 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d050      	beq.n	800a432 <USBD_CDC_Setup+0xde>
 800a390:	2b20      	cmp	r3, #32
 800a392:	f040 80af 	bne.w	800a4f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	88db      	ldrh	r3, [r3, #6]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d03a      	beq.n	800a414 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	b25b      	sxtb	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	da1b      	bge.n	800a3e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	33b0      	adds	r3, #176	; 0xb0
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a3be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	88d2      	ldrh	r2, [r2, #6]
 800a3c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	88db      	ldrh	r3, [r3, #6]
 800a3ca:	2b07      	cmp	r3, #7
 800a3cc:	bf28      	it	cs
 800a3ce:	2307      	movcs	r3, #7
 800a3d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	89fa      	ldrh	r2, [r7, #14]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f001 fd89 	bl	800bef0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a3de:	e090      	b.n	800a502 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	785a      	ldrb	r2, [r3, #1]
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	88db      	ldrh	r3, [r3, #6]
 800a3ee:	2b3f      	cmp	r3, #63	; 0x3f
 800a3f0:	d803      	bhi.n	800a3fa <USBD_CDC_Setup+0xa6>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	88db      	ldrh	r3, [r3, #6]
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	e000      	b.n	800a3fc <USBD_CDC_Setup+0xa8>
 800a3fa:	2240      	movs	r2, #64	; 0x40
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a402:	6939      	ldr	r1, [r7, #16]
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a40a:	461a      	mov	r2, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 fd9b 	bl	800bf48 <USBD_CtlPrepareRx>
      break;
 800a412:	e076      	b.n	800a502 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	33b0      	adds	r3, #176	; 0xb0
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4413      	add	r3, r2
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	7850      	ldrb	r0, [r2, #1]
 800a42a:	2200      	movs	r2, #0
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	4798      	blx	r3
      break;
 800a430:	e067      	b.n	800a502 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	785b      	ldrb	r3, [r3, #1]
 800a436:	2b0b      	cmp	r3, #11
 800a438:	d851      	bhi.n	800a4de <USBD_CDC_Setup+0x18a>
 800a43a:	a201      	add	r2, pc, #4	; (adr r2, 800a440 <USBD_CDC_Setup+0xec>)
 800a43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a440:	0800a471 	.word	0x0800a471
 800a444:	0800a4ed 	.word	0x0800a4ed
 800a448:	0800a4df 	.word	0x0800a4df
 800a44c:	0800a4df 	.word	0x0800a4df
 800a450:	0800a4df 	.word	0x0800a4df
 800a454:	0800a4df 	.word	0x0800a4df
 800a458:	0800a4df 	.word	0x0800a4df
 800a45c:	0800a4df 	.word	0x0800a4df
 800a460:	0800a4df 	.word	0x0800a4df
 800a464:	0800a4df 	.word	0x0800a4df
 800a468:	0800a49b 	.word	0x0800a49b
 800a46c:	0800a4c5 	.word	0x0800a4c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b03      	cmp	r3, #3
 800a47a:	d107      	bne.n	800a48c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a47c:	f107 030a 	add.w	r3, r7, #10
 800a480:	2202      	movs	r2, #2
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f001 fd33 	bl	800bef0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a48a:	e032      	b.n	800a4f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 fcbd 	bl	800be0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a494:	2303      	movs	r3, #3
 800a496:	75fb      	strb	r3, [r7, #23]
          break;
 800a498:	e02b      	b.n	800a4f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d107      	bne.n	800a4b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a4a6:	f107 030d 	add.w	r3, r7, #13
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f001 fd1e 	bl	800bef0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a4b4:	e01d      	b.n	800a4f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 fca8 	bl	800be0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4c2:	e016      	b.n	800a4f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d00f      	beq.n	800a4f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f001 fc9b 	bl	800be0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a4dc:	e008      	b.n	800a4f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a4de:	6839      	ldr	r1, [r7, #0]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f001 fc94 	bl	800be0e <USBD_CtlError>
          ret = USBD_FAIL;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a4ea:	e002      	b.n	800a4f2 <USBD_CDC_Setup+0x19e>
          break;
 800a4ec:	bf00      	nop
 800a4ee:	e008      	b.n	800a502 <USBD_CDC_Setup+0x1ae>
          break;
 800a4f0:	bf00      	nop
      }
      break;
 800a4f2:	e006      	b.n	800a502 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f001 fc89 	bl	800be0e <USBD_CtlError>
      ret = USBD_FAIL;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a500:	bf00      	nop
  }

  return (uint8_t)ret;
 800a502:	7dfb      	ldrb	r3, [r7, #23]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a51e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	32b0      	adds	r2, #176	; 0xb0
 800a52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a532:	2303      	movs	r3, #3
 800a534:	e065      	b.n	800a602 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	32b0      	adds	r2, #176	; 0xb0
 800a540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a544:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	f003 020f 	and.w	r2, r3, #15
 800a54c:	6879      	ldr	r1, [r7, #4]
 800a54e:	4613      	mov	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	440b      	add	r3, r1
 800a558:	3318      	adds	r3, #24
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d02f      	beq.n	800a5c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a560:	78fb      	ldrb	r3, [r7, #3]
 800a562:	f003 020f 	and.w	r2, r3, #15
 800a566:	6879      	ldr	r1, [r7, #4]
 800a568:	4613      	mov	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	440b      	add	r3, r1
 800a572:	3318      	adds	r3, #24
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	78fb      	ldrb	r3, [r7, #3]
 800a578:	f003 010f 	and.w	r1, r3, #15
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	460b      	mov	r3, r1
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	440b      	add	r3, r1
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4403      	add	r3, r0
 800a588:	3348      	adds	r3, #72	; 0x48
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a590:	fb01 f303 	mul.w	r3, r1, r3
 800a594:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a596:	2b00      	cmp	r3, #0
 800a598:	d112      	bne.n	800a5c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a59a:	78fb      	ldrb	r3, [r7, #3]
 800a59c:	f003 020f 	and.w	r2, r3, #15
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4413      	add	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	440b      	add	r3, r1
 800a5ac:	3318      	adds	r3, #24
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a5b2:	78f9      	ldrb	r1, [r7, #3]
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f004 fe40 	bl	800f23e <USBD_LL_Transmit>
 800a5be:	e01f      	b.n	800a600 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	33b0      	adds	r3, #176	; 0xb0
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d010      	beq.n	800a600 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	33b0      	adds	r3, #176	; 0xb0
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4413      	add	r3, r2
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a5fc:	78fa      	ldrb	r2, [r7, #3]
 800a5fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	32b0      	adds	r2, #176	; 0xb0
 800a620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a624:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	32b0      	adds	r2, #176	; 0xb0
 800a630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d101      	bne.n	800a63c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a638:	2303      	movs	r3, #3
 800a63a:	e01a      	b.n	800a672 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f004 fe3e 	bl	800f2c2 <USBD_LL_GetRxDataSize>
 800a646:	4602      	mov	r2, r0
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	33b0      	adds	r3, #176	; 0xb0
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a66c:	4611      	mov	r1, r2
 800a66e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b084      	sub	sp, #16
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	32b0      	adds	r2, #176	; 0xb0
 800a68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a690:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a698:	2303      	movs	r3, #3
 800a69a:	e025      	b.n	800a6e8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	33b0      	adds	r3, #176	; 0xb0
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01a      	beq.n	800a6e6 <USBD_CDC_EP0_RxReady+0x6c>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a6b6:	2bff      	cmp	r3, #255	; 0xff
 800a6b8:	d015      	beq.n	800a6e6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	33b0      	adds	r3, #176	; 0xb0
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a6d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a6da:	b292      	uxth	r2, r2
 800a6dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	22ff      	movs	r2, #255	; 0xff
 800a6e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6f8:	2182      	movs	r1, #130	; 0x82
 800a6fa:	4818      	ldr	r0, [pc, #96]	; (800a75c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a6fc:	f000 fd4f 	bl	800b19e <USBD_GetEpDesc>
 800a700:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a702:	2101      	movs	r1, #1
 800a704:	4815      	ldr	r0, [pc, #84]	; (800a75c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a706:	f000 fd4a 	bl	800b19e <USBD_GetEpDesc>
 800a70a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a70c:	2181      	movs	r1, #129	; 0x81
 800a70e:	4813      	ldr	r0, [pc, #76]	; (800a75c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a710:	f000 fd45 	bl	800b19e <USBD_GetEpDesc>
 800a714:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	2210      	movs	r2, #16
 800a720:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d006      	beq.n	800a736 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a730:	711a      	strb	r2, [r3, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d006      	beq.n	800a74a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a744:	711a      	strb	r2, [r3, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2243      	movs	r2, #67	; 0x43
 800a74e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a750:	4b02      	ldr	r3, [pc, #8]	; (800a75c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a752:	4618      	mov	r0, r3
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000070 	.word	0x20000070

0800a760 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a768:	2182      	movs	r1, #130	; 0x82
 800a76a:	4818      	ldr	r0, [pc, #96]	; (800a7cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a76c:	f000 fd17 	bl	800b19e <USBD_GetEpDesc>
 800a770:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a772:	2101      	movs	r1, #1
 800a774:	4815      	ldr	r0, [pc, #84]	; (800a7cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a776:	f000 fd12 	bl	800b19e <USBD_GetEpDesc>
 800a77a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a77c:	2181      	movs	r1, #129	; 0x81
 800a77e:	4813      	ldr	r0, [pc, #76]	; (800a7cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a780:	f000 fd0d 	bl	800b19e <USBD_GetEpDesc>
 800a784:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2210      	movs	r2, #16
 800a790:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d006      	beq.n	800a7a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	2200      	movs	r2, #0
 800a79c:	711a      	strb	r2, [r3, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f042 0202 	orr.w	r2, r2, #2
 800a7a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d006      	beq.n	800a7ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	711a      	strb	r2, [r3, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f042 0202 	orr.w	r2, r2, #2
 800a7b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2243      	movs	r2, #67	; 0x43
 800a7be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7c0:	4b02      	ldr	r3, [pc, #8]	; (800a7cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000070 	.word	0x20000070

0800a7d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7d8:	2182      	movs	r1, #130	; 0x82
 800a7da:	4818      	ldr	r0, [pc, #96]	; (800a83c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7dc:	f000 fcdf 	bl	800b19e <USBD_GetEpDesc>
 800a7e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	4815      	ldr	r0, [pc, #84]	; (800a83c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7e6:	f000 fcda 	bl	800b19e <USBD_GetEpDesc>
 800a7ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7ec:	2181      	movs	r1, #129	; 0x81
 800a7ee:	4813      	ldr	r0, [pc, #76]	; (800a83c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7f0:	f000 fcd5 	bl	800b19e <USBD_GetEpDesc>
 800a7f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	2210      	movs	r2, #16
 800a800:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d006      	beq.n	800a816 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a810:	711a      	strb	r2, [r3, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d006      	beq.n	800a82a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a824:	711a      	strb	r2, [r3, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2243      	movs	r2, #67	; 0x43
 800a82e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a830:	4b02      	ldr	r3, [pc, #8]	; (800a83c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a832:	4618      	mov	r0, r3
 800a834:	3718      	adds	r7, #24
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20000070 	.word	0x20000070

0800a840 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	220a      	movs	r2, #10
 800a84c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a84e:	4b03      	ldr	r3, [pc, #12]	; (800a85c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	2000002c 	.word	0x2000002c

0800a860 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a870:	2303      	movs	r3, #3
 800a872:	e009      	b.n	800a888 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	33b0      	adds	r3, #176	; 0xb0
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a894:	b480      	push	{r7}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	32b0      	adds	r2, #176	; 0xb0
 800a8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e008      	b.n	800a8cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	371c      	adds	r7, #28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	32b0      	adds	r2, #176	; 0xb0
 800a8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e004      	b.n	800a906 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
	...

0800a914 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	32b0      	adds	r2, #176	; 0xb0
 800a926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a92c:	2301      	movs	r3, #1
 800a92e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	32b0      	adds	r2, #176	; 0xb0
 800a93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a942:	2303      	movs	r3, #3
 800a944:	e025      	b.n	800a992 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d11f      	bne.n	800a990 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	2201      	movs	r2, #1
 800a954:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a958:	4b10      	ldr	r3, [pc, #64]	; (800a99c <USBD_CDC_TransmitPacket+0x88>)
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	f003 020f 	and.w	r2, r3, #15
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	4613      	mov	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4403      	add	r3, r0
 800a972:	3318      	adds	r3, #24
 800a974:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a976:	4b09      	ldr	r3, [pc, #36]	; (800a99c <USBD_CDC_TransmitPacket+0x88>)
 800a978:	7819      	ldrb	r1, [r3, #0]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f004 fc59 	bl	800f23e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a990:	7bfb      	ldrb	r3, [r7, #15]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	200000b3 	.word	0x200000b3

0800a9a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	32b0      	adds	r2, #176	; 0xb0
 800a9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	32b0      	adds	r2, #176	; 0xb0
 800a9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e018      	b.n	800aa00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	7c1b      	ldrb	r3, [r3, #16]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10a      	bne.n	800a9ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9d6:	4b0c      	ldr	r3, [pc, #48]	; (800aa08 <USBD_CDC_ReceivePacket+0x68>)
 800a9d8:	7819      	ldrb	r1, [r3, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f004 fc4b 	bl	800f280 <USBD_LL_PrepareReceive>
 800a9ea:	e008      	b.n	800a9fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9ec:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <USBD_CDC_ReceivePacket+0x68>)
 800a9ee:	7819      	ldrb	r1, [r3, #0]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9f6:	2340      	movs	r3, #64	; 0x40
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f004 fc41 	bl	800f280 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	200000b4 	.word	0x200000b4

0800aa0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	4613      	mov	r3, r2
 800aa18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e01f      	b.n	800aa64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	68ba      	ldr	r2, [r7, #8]
 800aa46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	79fa      	ldrb	r2, [r7, #7]
 800aa56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f004 fabb 	bl	800efd4 <USBD_LL_Init>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa62:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa76:	2300      	movs	r3, #0
 800aa78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e025      	b.n	800aad0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	32ae      	adds	r2, #174	; 0xae
 800aa96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00f      	beq.n	800aac0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	32ae      	adds	r2, #174	; 0xae
 800aaaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab0:	f107 020e 	add.w	r2, r7, #14
 800aab4:	4610      	mov	r0, r2
 800aab6:	4798      	blx	r3
 800aab8:	4602      	mov	r2, r0
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f004 fac3 	bl	800f06c <USBD_LL_Start>
 800aae6:	4603      	mov	r3, r0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aaf8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b084      	sub	sp, #16
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	460b      	mov	r3, r1
 800ab10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d009      	beq.n	800ab34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	78fa      	ldrb	r2, [r7, #3]
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	4798      	blx	r3
 800ab30:	4603      	mov	r3, r0
 800ab32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	460b      	mov	r3, r1
 800ab48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	78fa      	ldrb	r2, [r7, #3]
 800ab58:	4611      	mov	r1, r2
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	4798      	blx	r3
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d001      	beq.n	800ab68 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ab64:	2303      	movs	r3, #3
 800ab66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f001 f908 	bl	800bd9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab98:	461a      	mov	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aba6:	f003 031f 	and.w	r3, r3, #31
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d01a      	beq.n	800abe4 <USBD_LL_SetupStage+0x72>
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d822      	bhi.n	800abf8 <USBD_LL_SetupStage+0x86>
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <USBD_LL_SetupStage+0x4a>
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d00a      	beq.n	800abd0 <USBD_LL_SetupStage+0x5e>
 800abba:	e01d      	b.n	800abf8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fb5f 	bl	800b288 <USBD_StdDevReq>
 800abca:	4603      	mov	r3, r0
 800abcc:	73fb      	strb	r3, [r7, #15]
      break;
 800abce:	e020      	b.n	800ac12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abd6:	4619      	mov	r1, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fbc7 	bl	800b36c <USBD_StdItfReq>
 800abde:	4603      	mov	r3, r0
 800abe0:	73fb      	strb	r3, [r7, #15]
      break;
 800abe2:	e016      	b.n	800ac12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abea:	4619      	mov	r1, r3
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fc29 	bl	800b444 <USBD_StdEPReq>
 800abf2:	4603      	mov	r3, r0
 800abf4:	73fb      	strb	r3, [r7, #15]
      break;
 800abf6:	e00c      	b.n	800ac12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	4619      	mov	r1, r3
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f004 fa90 	bl	800f12c <USBD_LL_StallEP>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac10:	bf00      	nop
  }

  return ret;
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	460b      	mov	r3, r1
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ac2e:	7afb      	ldrb	r3, [r7, #11]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d16e      	bne.n	800ad12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	f040 8098 	bne.w	800ad78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	689a      	ldr	r2, [r3, #8]
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d913      	bls.n	800ac7c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	1ad2      	subs	r2, r2, r3
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	bf28      	it	cs
 800ac6e:	4613      	movcs	r3, r2
 800ac70:	461a      	mov	r2, r3
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f001 f984 	bl	800bf82 <USBD_CtlContinueRx>
 800ac7a:	e07d      	b.n	800ad78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac82:	f003 031f 	and.w	r3, r3, #31
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d014      	beq.n	800acb4 <USBD_LL_DataOutStage+0x98>
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d81d      	bhi.n	800acca <USBD_LL_DataOutStage+0xae>
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d002      	beq.n	800ac98 <USBD_LL_DataOutStage+0x7c>
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d003      	beq.n	800ac9e <USBD_LL_DataOutStage+0x82>
 800ac96:	e018      	b.n	800acca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	75bb      	strb	r3, [r7, #22]
            break;
 800ac9c:	e018      	b.n	800acd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	4619      	mov	r1, r3
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 fa5e 	bl	800b16a <USBD_CoreFindIF>
 800acae:	4603      	mov	r3, r0
 800acb0:	75bb      	strb	r3, [r7, #22]
            break;
 800acb2:	e00d      	b.n	800acd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	4619      	mov	r1, r3
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f000 fa60 	bl	800b184 <USBD_CoreFindEP>
 800acc4:	4603      	mov	r3, r0
 800acc6:	75bb      	strb	r3, [r7, #22]
            break;
 800acc8:	e002      	b.n	800acd0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800acca:	2300      	movs	r3, #0
 800accc:	75bb      	strb	r3, [r7, #22]
            break;
 800acce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800acd0:	7dbb      	ldrb	r3, [r7, #22]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d119      	bne.n	800ad0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b03      	cmp	r3, #3
 800ace0:	d113      	bne.n	800ad0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ace2:	7dba      	ldrb	r2, [r7, #22]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	32ae      	adds	r2, #174	; 0xae
 800ace8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00b      	beq.n	800ad0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800acf2:	7dba      	ldrb	r2, [r7, #22]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800acfa:	7dba      	ldrb	r2, [r7, #22]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	32ae      	adds	r2, #174	; 0xae
 800ad00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f001 f94a 	bl	800bfa4 <USBD_CtlSendStatus>
 800ad10:	e032      	b.n	800ad78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ad12:	7afb      	ldrb	r3, [r7, #11]
 800ad14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 fa31 	bl	800b184 <USBD_CoreFindEP>
 800ad22:	4603      	mov	r3, r0
 800ad24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad26:	7dbb      	ldrb	r3, [r7, #22]
 800ad28:	2bff      	cmp	r3, #255	; 0xff
 800ad2a:	d025      	beq.n	800ad78 <USBD_LL_DataOutStage+0x15c>
 800ad2c:	7dbb      	ldrb	r3, [r7, #22]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d122      	bne.n	800ad78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d117      	bne.n	800ad6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ad3e:	7dba      	ldrb	r2, [r7, #22]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	32ae      	adds	r2, #174	; 0xae
 800ad44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00f      	beq.n	800ad6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ad4e:	7dba      	ldrb	r2, [r7, #22]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ad56:	7dba      	ldrb	r2, [r7, #22]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	32ae      	adds	r2, #174	; 0xae
 800ad5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	7afa      	ldrb	r2, [r7, #11]
 800ad64:	4611      	mov	r1, r2
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	4798      	blx	r3
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	e000      	b.n	800ad7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b086      	sub	sp, #24
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	607a      	str	r2, [r7, #4]
 800ad8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ad90:	7afb      	ldrb	r3, [r7, #11]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d16f      	bne.n	800ae76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3314      	adds	r3, #20
 800ad9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d15a      	bne.n	800ae5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	689a      	ldr	r2, [r3, #8]
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d914      	bls.n	800addc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	689a      	ldr	r2, [r3, #8]
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	1ad2      	subs	r2, r2, r3
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	461a      	mov	r2, r3
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f001 f8ac 	bl	800bf26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adce:	2300      	movs	r3, #0
 800add0:	2200      	movs	r2, #0
 800add2:	2100      	movs	r1, #0
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f004 fa53 	bl	800f280 <USBD_LL_PrepareReceive>
 800adda:	e03f      	b.n	800ae5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	68da      	ldr	r2, [r3, #12]
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d11c      	bne.n	800ae22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d316      	bcc.n	800ae22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d20f      	bcs.n	800ae22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae02:	2200      	movs	r2, #0
 800ae04:	2100      	movs	r1, #0
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f001 f88d 	bl	800bf26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae14:	2300      	movs	r3, #0
 800ae16:	2200      	movs	r2, #0
 800ae18:	2100      	movs	r1, #0
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f004 fa30 	bl	800f280 <USBD_LL_PrepareReceive>
 800ae20:	e01c      	b.n	800ae5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d10f      	bne.n	800ae4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d009      	beq.n	800ae4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae4e:	2180      	movs	r1, #128	; 0x80
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f004 f96b 	bl	800f12c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f001 f8b7 	bl	800bfca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d03a      	beq.n	800aedc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f7ff fe42 	bl	800aaf0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae74:	e032      	b.n	800aedc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ae76:	7afb      	ldrb	r3, [r7, #11]
 800ae78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	4619      	mov	r1, r3
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 f97f 	bl	800b184 <USBD_CoreFindEP>
 800ae86:	4603      	mov	r3, r0
 800ae88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae8a:	7dfb      	ldrb	r3, [r7, #23]
 800ae8c:	2bff      	cmp	r3, #255	; 0xff
 800ae8e:	d025      	beq.n	800aedc <USBD_LL_DataInStage+0x15a>
 800ae90:	7dfb      	ldrb	r3, [r7, #23]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d122      	bne.n	800aedc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d11c      	bne.n	800aedc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aea2:	7dfa      	ldrb	r2, [r7, #23]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	32ae      	adds	r2, #174	; 0xae
 800aea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d014      	beq.n	800aedc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aeb2:	7dfa      	ldrb	r2, [r7, #23]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aeba:	7dfa      	ldrb	r2, [r7, #23]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	32ae      	adds	r2, #174	; 0xae
 800aec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	7afa      	ldrb	r2, [r7, #11]
 800aec8:	4611      	mov	r1, r2
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	4798      	blx	r3
 800aece:	4603      	mov	r3, r0
 800aed0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aed2:	7dbb      	ldrb	r3, [r7, #22]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aed8:	7dbb      	ldrb	r3, [r7, #22]
 800aeda:	e000      	b.n	800aede <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d014      	beq.n	800af4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00e      	beq.n	800af4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	6852      	ldr	r2, [r2, #4]
 800af3a:	b2d2      	uxtb	r2, r2
 800af3c:	4611      	mov	r1, r2
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	4798      	blx	r3
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af4c:	2340      	movs	r3, #64	; 0x40
 800af4e:	2200      	movs	r2, #0
 800af50:	2100      	movs	r1, #0
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f004 f8a5 	bl	800f0a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2240      	movs	r2, #64	; 0x40
 800af64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af68:	2340      	movs	r3, #64	; 0x40
 800af6a:	2200      	movs	r2, #0
 800af6c:	2180      	movs	r1, #128	; 0x80
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f004 f897 	bl	800f0a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2240      	movs	r2, #64	; 0x40
 800af7e:	621a      	str	r2, [r3, #32]

  return ret;
 800af80:	7bfb      	ldrb	r3, [r7, #15]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b083      	sub	sp, #12
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	460b      	mov	r3, r1
 800af94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	78fa      	ldrb	r2, [r7, #3]
 800af9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800afaa:	b480      	push	{r7}
 800afac:	b083      	sub	sp, #12
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2204      	movs	r2, #4
 800afc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	370c      	adds	r7, #12
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b083      	sub	sp, #12
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b04      	cmp	r3, #4
 800afe8:	d106      	bne.n	800aff8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b082      	sub	sp, #8
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b03      	cmp	r3, #3
 800b018:	d110      	bne.n	800b03c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00b      	beq.n	800b03c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d005      	beq.n	800b03c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b036:	69db      	ldr	r3, [r3, #28]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	460b      	mov	r3, r1
 800b050:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	32ae      	adds	r2, #174	; 0xae
 800b05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b064:	2303      	movs	r3, #3
 800b066:	e01c      	b.n	800b0a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b03      	cmp	r3, #3
 800b072:	d115      	bne.n	800b0a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	32ae      	adds	r2, #174	; 0xae
 800b07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00b      	beq.n	800b0a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	32ae      	adds	r2, #174	; 0xae
 800b092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b096:	6a1b      	ldr	r3, [r3, #32]
 800b098:	78fa      	ldrb	r2, [r7, #3]
 800b09a:	4611      	mov	r1, r2
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	32ae      	adds	r2, #174	; 0xae
 800b0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e01c      	b.n	800b106 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b03      	cmp	r3, #3
 800b0d6:	d115      	bne.n	800b104 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	32ae      	adds	r2, #174	; 0xae
 800b0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00b      	beq.n	800b104 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	32ae      	adds	r2, #174	; 0xae
 800b0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	78fa      	ldrb	r2, [r7, #3]
 800b0fe:	4611      	mov	r1, r2
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b10e:	b480      	push	{r7}
 800b110:	b083      	sub	sp, #12
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00e      	beq.n	800b160 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	6852      	ldr	r2, [r2, #4]
 800b14e:	b2d2      	uxtb	r2, r2
 800b150:	4611      	mov	r1, r2
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	4798      	blx	r3
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b15c:	2303      	movs	r3, #3
 800b15e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b160:	7bfb      	ldrb	r3, [r7, #15]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	460b      	mov	r3, r1
 800b174:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b176:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b190:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b192:	4618      	mov	r0, r3
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b086      	sub	sp, #24
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	885b      	ldrh	r3, [r3, #2]
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d920      	bls.n	800b208 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b1ce:	e013      	b.n	800b1f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b1d0:	f107 030a 	add.w	r3, r7, #10
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6978      	ldr	r0, [r7, #20]
 800b1d8:	f000 f81b 	bl	800b212 <USBD_GetNextDesc>
 800b1dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	785b      	ldrb	r3, [r3, #1]
 800b1e2:	2b05      	cmp	r3, #5
 800b1e4:	d108      	bne.n	800b1f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	789b      	ldrb	r3, [r3, #2]
 800b1ee:	78fa      	ldrb	r2, [r7, #3]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d008      	beq.n	800b206 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	885b      	ldrh	r3, [r3, #2]
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	897b      	ldrh	r3, [r7, #10]
 800b200:	429a      	cmp	r2, r3
 800b202:	d8e5      	bhi.n	800b1d0 <USBD_GetEpDesc+0x32>
 800b204:	e000      	b.n	800b208 <USBD_GetEpDesc+0x6a>
          break;
 800b206:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b208:	693b      	ldr	r3, [r7, #16]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3718      	adds	r7, #24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b212:	b480      	push	{r7}
 800b214:	b085      	sub	sp, #20
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	881a      	ldrh	r2, [r3, #0]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	4413      	add	r3, r2
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	461a      	mov	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4413      	add	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b23e:	68fb      	ldr	r3, [r7, #12]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	3301      	adds	r3, #1
 800b262:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b26a:	8a3b      	ldrh	r3, [r7, #16]
 800b26c:	021b      	lsls	r3, r3, #8
 800b26e:	b21a      	sxth	r2, r3
 800b270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b274:	4313      	orrs	r3, r2
 800b276:	b21b      	sxth	r3, r3
 800b278:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b27a:	89fb      	ldrh	r3, [r7, #14]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b29e:	2b40      	cmp	r3, #64	; 0x40
 800b2a0:	d005      	beq.n	800b2ae <USBD_StdDevReq+0x26>
 800b2a2:	2b40      	cmp	r3, #64	; 0x40
 800b2a4:	d857      	bhi.n	800b356 <USBD_StdDevReq+0xce>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00f      	beq.n	800b2ca <USBD_StdDevReq+0x42>
 800b2aa:	2b20      	cmp	r3, #32
 800b2ac:	d153      	bne.n	800b356 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	32ae      	adds	r2, #174	; 0xae
 800b2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	4798      	blx	r3
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b2c8:	e04a      	b.n	800b360 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	785b      	ldrb	r3, [r3, #1]
 800b2ce:	2b09      	cmp	r3, #9
 800b2d0:	d83b      	bhi.n	800b34a <USBD_StdDevReq+0xc2>
 800b2d2:	a201      	add	r2, pc, #4	; (adr r2, 800b2d8 <USBD_StdDevReq+0x50>)
 800b2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d8:	0800b32d 	.word	0x0800b32d
 800b2dc:	0800b341 	.word	0x0800b341
 800b2e0:	0800b34b 	.word	0x0800b34b
 800b2e4:	0800b337 	.word	0x0800b337
 800b2e8:	0800b34b 	.word	0x0800b34b
 800b2ec:	0800b30b 	.word	0x0800b30b
 800b2f0:	0800b301 	.word	0x0800b301
 800b2f4:	0800b34b 	.word	0x0800b34b
 800b2f8:	0800b323 	.word	0x0800b323
 800b2fc:	0800b315 	.word	0x0800b315
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fa3c 	bl	800b780 <USBD_GetDescriptor>
          break;
 800b308:	e024      	b.n	800b354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fba1 	bl	800ba54 <USBD_SetAddress>
          break;
 800b312:	e01f      	b.n	800b354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fbe0 	bl	800badc <USBD_SetConfig>
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]
          break;
 800b320:	e018      	b.n	800b354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 fc83 	bl	800bc30 <USBD_GetConfig>
          break;
 800b32a:	e013      	b.n	800b354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b32c:	6839      	ldr	r1, [r7, #0]
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fcb4 	bl	800bc9c <USBD_GetStatus>
          break;
 800b334:	e00e      	b.n	800b354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fce3 	bl	800bd04 <USBD_SetFeature>
          break;
 800b33e:	e009      	b.n	800b354 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fd07 	bl	800bd56 <USBD_ClrFeature>
          break;
 800b348:	e004      	b.n	800b354 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fd5e 	bl	800be0e <USBD_CtlError>
          break;
 800b352:	bf00      	nop
      }
      break;
 800b354:	e004      	b.n	800b360 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 fd58 	bl	800be0e <USBD_CtlError>
      break;
 800b35e:	bf00      	nop
  }

  return ret;
 800b360:	7bfb      	ldrb	r3, [r7, #15]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop

0800b36c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b382:	2b40      	cmp	r3, #64	; 0x40
 800b384:	d005      	beq.n	800b392 <USBD_StdItfReq+0x26>
 800b386:	2b40      	cmp	r3, #64	; 0x40
 800b388:	d852      	bhi.n	800b430 <USBD_StdItfReq+0xc4>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <USBD_StdItfReq+0x26>
 800b38e:	2b20      	cmp	r3, #32
 800b390:	d14e      	bne.n	800b430 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	3b01      	subs	r3, #1
 800b39c:	2b02      	cmp	r3, #2
 800b39e:	d840      	bhi.n	800b422 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	889b      	ldrh	r3, [r3, #4]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d836      	bhi.n	800b418 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	889b      	ldrh	r3, [r3, #4]
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff fed9 	bl	800b16a <USBD_CoreFindIF>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	2bff      	cmp	r3, #255	; 0xff
 800b3c0:	d01d      	beq.n	800b3fe <USBD_StdItfReq+0x92>
 800b3c2:	7bbb      	ldrb	r3, [r7, #14]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d11a      	bne.n	800b3fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b3c8:	7bba      	ldrb	r2, [r7, #14]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	32ae      	adds	r2, #174	; 0xae
 800b3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00f      	beq.n	800b3f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b3d8:	7bba      	ldrb	r2, [r7, #14]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b3e0:	7bba      	ldrb	r2, [r7, #14]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	32ae      	adds	r2, #174	; 0xae
 800b3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	4798      	blx	r3
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b3f6:	e004      	b.n	800b402 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b3fc:	e001      	b.n	800b402 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b3fe:	2303      	movs	r3, #3
 800b400:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	88db      	ldrh	r3, [r3, #6]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d110      	bne.n	800b42c <USBD_StdItfReq+0xc0>
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10d      	bne.n	800b42c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fdc7 	bl	800bfa4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b416:	e009      	b.n	800b42c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fcf7 	bl	800be0e <USBD_CtlError>
          break;
 800b420:	e004      	b.n	800b42c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fcf2 	bl	800be0e <USBD_CtlError>
          break;
 800b42a:	e000      	b.n	800b42e <USBD_StdItfReq+0xc2>
          break;
 800b42c:	bf00      	nop
      }
      break;
 800b42e:	e004      	b.n	800b43a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b430:	6839      	ldr	r1, [r7, #0]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 fceb 	bl	800be0e <USBD_CtlError>
      break;
 800b438:	bf00      	nop
  }

  return ret;
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	889b      	ldrh	r3, [r3, #4]
 800b456:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b460:	2b40      	cmp	r3, #64	; 0x40
 800b462:	d007      	beq.n	800b474 <USBD_StdEPReq+0x30>
 800b464:	2b40      	cmp	r3, #64	; 0x40
 800b466:	f200 817f 	bhi.w	800b768 <USBD_StdEPReq+0x324>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d02a      	beq.n	800b4c4 <USBD_StdEPReq+0x80>
 800b46e:	2b20      	cmp	r3, #32
 800b470:	f040 817a 	bne.w	800b768 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff fe83 	bl	800b184 <USBD_CoreFindEP>
 800b47e:	4603      	mov	r3, r0
 800b480:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b482:	7b7b      	ldrb	r3, [r7, #13]
 800b484:	2bff      	cmp	r3, #255	; 0xff
 800b486:	f000 8174 	beq.w	800b772 <USBD_StdEPReq+0x32e>
 800b48a:	7b7b      	ldrb	r3, [r7, #13]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f040 8170 	bne.w	800b772 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b492:	7b7a      	ldrb	r2, [r7, #13]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b49a:	7b7a      	ldrb	r2, [r7, #13]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	32ae      	adds	r2, #174	; 0xae
 800b4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 8163 	beq.w	800b772 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b4ac:	7b7a      	ldrb	r2, [r7, #13]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	32ae      	adds	r2, #174	; 0xae
 800b4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	4798      	blx	r3
 800b4be:	4603      	mov	r3, r0
 800b4c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b4c2:	e156      	b.n	800b772 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	785b      	ldrb	r3, [r3, #1]
 800b4c8:	2b03      	cmp	r3, #3
 800b4ca:	d008      	beq.n	800b4de <USBD_StdEPReq+0x9a>
 800b4cc:	2b03      	cmp	r3, #3
 800b4ce:	f300 8145 	bgt.w	800b75c <USBD_StdEPReq+0x318>
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 809b 	beq.w	800b60e <USBD_StdEPReq+0x1ca>
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d03c      	beq.n	800b556 <USBD_StdEPReq+0x112>
 800b4dc:	e13e      	b.n	800b75c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d002      	beq.n	800b4f0 <USBD_StdEPReq+0xac>
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	d016      	beq.n	800b51c <USBD_StdEPReq+0xd8>
 800b4ee:	e02c      	b.n	800b54a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00d      	beq.n	800b512 <USBD_StdEPReq+0xce>
 800b4f6:	7bbb      	ldrb	r3, [r7, #14]
 800b4f8:	2b80      	cmp	r3, #128	; 0x80
 800b4fa:	d00a      	beq.n	800b512 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4fc:	7bbb      	ldrb	r3, [r7, #14]
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f003 fe13 	bl	800f12c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b506:	2180      	movs	r1, #128	; 0x80
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f003 fe0f 	bl	800f12c <USBD_LL_StallEP>
 800b50e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b510:	e020      	b.n	800b554 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fc7a 	bl	800be0e <USBD_CtlError>
              break;
 800b51a:	e01b      	b.n	800b554 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	885b      	ldrh	r3, [r3, #2]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10e      	bne.n	800b542 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b524:	7bbb      	ldrb	r3, [r7, #14]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00b      	beq.n	800b542 <USBD_StdEPReq+0xfe>
 800b52a:	7bbb      	ldrb	r3, [r7, #14]
 800b52c:	2b80      	cmp	r3, #128	; 0x80
 800b52e:	d008      	beq.n	800b542 <USBD_StdEPReq+0xfe>
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	88db      	ldrh	r3, [r3, #6]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d104      	bne.n	800b542 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b538:	7bbb      	ldrb	r3, [r7, #14]
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f003 fdf5 	bl	800f12c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fd2e 	bl	800bfa4 <USBD_CtlSendStatus>

              break;
 800b548:	e004      	b.n	800b554 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 fc5e 	bl	800be0e <USBD_CtlError>
              break;
 800b552:	bf00      	nop
          }
          break;
 800b554:	e107      	b.n	800b766 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d002      	beq.n	800b568 <USBD_StdEPReq+0x124>
 800b562:	2b03      	cmp	r3, #3
 800b564:	d016      	beq.n	800b594 <USBD_StdEPReq+0x150>
 800b566:	e04b      	b.n	800b600 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b568:	7bbb      	ldrb	r3, [r7, #14]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00d      	beq.n	800b58a <USBD_StdEPReq+0x146>
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	2b80      	cmp	r3, #128	; 0x80
 800b572:	d00a      	beq.n	800b58a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f003 fdd7 	bl	800f12c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b57e:	2180      	movs	r1, #128	; 0x80
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f003 fdd3 	bl	800f12c <USBD_LL_StallEP>
 800b586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b588:	e040      	b.n	800b60c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fc3e 	bl	800be0e <USBD_CtlError>
              break;
 800b592:	e03b      	b.n	800b60c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	885b      	ldrh	r3, [r3, #2]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d136      	bne.n	800b60a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d004      	beq.n	800b5b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b5a6:	7bbb      	ldrb	r3, [r7, #14]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f003 fddd 	bl	800f16a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fcf7 	bl	800bfa4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b5b6:	7bbb      	ldrb	r3, [r7, #14]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7ff fde2 	bl	800b184 <USBD_CoreFindEP>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5c4:	7b7b      	ldrb	r3, [r7, #13]
 800b5c6:	2bff      	cmp	r3, #255	; 0xff
 800b5c8:	d01f      	beq.n	800b60a <USBD_StdEPReq+0x1c6>
 800b5ca:	7b7b      	ldrb	r3, [r7, #13]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d11c      	bne.n	800b60a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b5d0:	7b7a      	ldrb	r2, [r7, #13]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b5d8:	7b7a      	ldrb	r2, [r7, #13]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	32ae      	adds	r2, #174	; 0xae
 800b5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d010      	beq.n	800b60a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b5e8:	7b7a      	ldrb	r2, [r7, #13]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	32ae      	adds	r2, #174	; 0xae
 800b5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	4798      	blx	r3
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b5fe:	e004      	b.n	800b60a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fc03 	bl	800be0e <USBD_CtlError>
              break;
 800b608:	e000      	b.n	800b60c <USBD_StdEPReq+0x1c8>
              break;
 800b60a:	bf00      	nop
          }
          break;
 800b60c:	e0ab      	b.n	800b766 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b02      	cmp	r3, #2
 800b618:	d002      	beq.n	800b620 <USBD_StdEPReq+0x1dc>
 800b61a:	2b03      	cmp	r3, #3
 800b61c:	d032      	beq.n	800b684 <USBD_StdEPReq+0x240>
 800b61e:	e097      	b.n	800b750 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b620:	7bbb      	ldrb	r3, [r7, #14]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d007      	beq.n	800b636 <USBD_StdEPReq+0x1f2>
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	2b80      	cmp	r3, #128	; 0x80
 800b62a:	d004      	beq.n	800b636 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fbed 	bl	800be0e <USBD_CtlError>
                break;
 800b634:	e091      	b.n	800b75a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	da0b      	bge.n	800b656 <USBD_StdEPReq+0x212>
 800b63e:	7bbb      	ldrb	r3, [r7, #14]
 800b640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b644:	4613      	mov	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	3310      	adds	r3, #16
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	4413      	add	r3, r2
 800b652:	3304      	adds	r3, #4
 800b654:	e00b      	b.n	800b66e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b656:	7bbb      	ldrb	r3, [r7, #14]
 800b658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b65c:	4613      	mov	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	4413      	add	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	4413      	add	r3, r2
 800b66c:	3304      	adds	r3, #4
 800b66e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	2202      	movs	r2, #2
 800b67a:	4619      	mov	r1, r3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fc37 	bl	800bef0 <USBD_CtlSendData>
              break;
 800b682:	e06a      	b.n	800b75a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	da11      	bge.n	800b6b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b68c:	7bbb      	ldrb	r3, [r7, #14]
 800b68e:	f003 020f 	and.w	r2, r3, #15
 800b692:	6879      	ldr	r1, [r7, #4]
 800b694:	4613      	mov	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	440b      	add	r3, r1
 800b69e:	3324      	adds	r3, #36	; 0x24
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d117      	bne.n	800b6d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fbb0 	bl	800be0e <USBD_CtlError>
                  break;
 800b6ae:	e054      	b.n	800b75a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6b0:	7bbb      	ldrb	r3, [r7, #14]
 800b6b2:	f003 020f 	and.w	r2, r3, #15
 800b6b6:	6879      	ldr	r1, [r7, #4]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4413      	add	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	440b      	add	r3, r1
 800b6c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b6c6:	881b      	ldrh	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d104      	bne.n	800b6d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fb9d 	bl	800be0e <USBD_CtlError>
                  break;
 800b6d4:	e041      	b.n	800b75a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	da0b      	bge.n	800b6f6 <USBD_StdEPReq+0x2b2>
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
 800b6e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	3310      	adds	r3, #16
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	e00b      	b.n	800b70e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6f6:	7bbb      	ldrb	r3, [r7, #14]
 800b6f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4413      	add	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	4413      	add	r3, r2
 800b70c:	3304      	adds	r3, #4
 800b70e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b710:	7bbb      	ldrb	r3, [r7, #14]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d002      	beq.n	800b71c <USBD_StdEPReq+0x2d8>
 800b716:	7bbb      	ldrb	r3, [r7, #14]
 800b718:	2b80      	cmp	r3, #128	; 0x80
 800b71a:	d103      	bne.n	800b724 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	2200      	movs	r2, #0
 800b720:	601a      	str	r2, [r3, #0]
 800b722:	e00e      	b.n	800b742 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b724:	7bbb      	ldrb	r3, [r7, #14]
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f003 fd3d 	bl	800f1a8 <USBD_LL_IsStallEP>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2201      	movs	r2, #1
 800b738:	601a      	str	r2, [r3, #0]
 800b73a:	e002      	b.n	800b742 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	2202      	movs	r2, #2
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fbd1 	bl	800bef0 <USBD_CtlSendData>
              break;
 800b74e:	e004      	b.n	800b75a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b750:	6839      	ldr	r1, [r7, #0]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fb5b 	bl	800be0e <USBD_CtlError>
              break;
 800b758:	bf00      	nop
          }
          break;
 800b75a:	e004      	b.n	800b766 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fb55 	bl	800be0e <USBD_CtlError>
          break;
 800b764:	bf00      	nop
      }
      break;
 800b766:	e005      	b.n	800b774 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fb4f 	bl	800be0e <USBD_CtlError>
      break;
 800b770:	e000      	b.n	800b774 <USBD_StdEPReq+0x330>
      break;
 800b772:	bf00      	nop
  }

  return ret;
 800b774:	7bfb      	ldrb	r3, [r7, #15]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
	...

0800b780 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b78a:	2300      	movs	r3, #0
 800b78c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	885b      	ldrh	r3, [r3, #2]
 800b79a:	0a1b      	lsrs	r3, r3, #8
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	2b06      	cmp	r3, #6
 800b7a2:	f200 8128 	bhi.w	800b9f6 <USBD_GetDescriptor+0x276>
 800b7a6:	a201      	add	r2, pc, #4	; (adr r2, 800b7ac <USBD_GetDescriptor+0x2c>)
 800b7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ac:	0800b7c9 	.word	0x0800b7c9
 800b7b0:	0800b7e1 	.word	0x0800b7e1
 800b7b4:	0800b821 	.word	0x0800b821
 800b7b8:	0800b9f7 	.word	0x0800b9f7
 800b7bc:	0800b9f7 	.word	0x0800b9f7
 800b7c0:	0800b997 	.word	0x0800b997
 800b7c4:	0800b9c3 	.word	0x0800b9c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	7c12      	ldrb	r2, [r2, #16]
 800b7d4:	f107 0108 	add.w	r1, r7, #8
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	60f8      	str	r0, [r7, #12]
      break;
 800b7de:	e112      	b.n	800ba06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	7c1b      	ldrb	r3, [r3, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10d      	bne.n	800b804 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f0:	f107 0208 	add.w	r2, r7, #8
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	4798      	blx	r3
 800b7f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	2202      	movs	r2, #2
 800b800:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b802:	e100      	b.n	800ba06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	f107 0208 	add.w	r2, r7, #8
 800b810:	4610      	mov	r0, r2
 800b812:	4798      	blx	r3
 800b814:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3301      	adds	r3, #1
 800b81a:	2202      	movs	r2, #2
 800b81c:	701a      	strb	r2, [r3, #0]
      break;
 800b81e:	e0f2      	b.n	800ba06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	885b      	ldrh	r3, [r3, #2]
 800b824:	b2db      	uxtb	r3, r3
 800b826:	2b05      	cmp	r3, #5
 800b828:	f200 80ac 	bhi.w	800b984 <USBD_GetDescriptor+0x204>
 800b82c:	a201      	add	r2, pc, #4	; (adr r2, 800b834 <USBD_GetDescriptor+0xb4>)
 800b82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b832:	bf00      	nop
 800b834:	0800b84d 	.word	0x0800b84d
 800b838:	0800b881 	.word	0x0800b881
 800b83c:	0800b8b5 	.word	0x0800b8b5
 800b840:	0800b8e9 	.word	0x0800b8e9
 800b844:	0800b91d 	.word	0x0800b91d
 800b848:	0800b951 	.word	0x0800b951
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00b      	beq.n	800b870 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	7c12      	ldrb	r2, [r2, #16]
 800b864:	f107 0108 	add.w	r1, r7, #8
 800b868:	4610      	mov	r0, r2
 800b86a:	4798      	blx	r3
 800b86c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b86e:	e091      	b.n	800b994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 facb 	bl	800be0e <USBD_CtlError>
            err++;
 800b878:	7afb      	ldrb	r3, [r7, #11]
 800b87a:	3301      	adds	r3, #1
 800b87c:	72fb      	strb	r3, [r7, #11]
          break;
 800b87e:	e089      	b.n	800b994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00b      	beq.n	800b8a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	7c12      	ldrb	r2, [r2, #16]
 800b898:	f107 0108 	add.w	r1, r7, #8
 800b89c:	4610      	mov	r0, r2
 800b89e:	4798      	blx	r3
 800b8a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8a2:	e077      	b.n	800b994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8a4:	6839      	ldr	r1, [r7, #0]
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 fab1 	bl	800be0e <USBD_CtlError>
            err++;
 800b8ac:	7afb      	ldrb	r3, [r7, #11]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8b2:	e06f      	b.n	800b994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00b      	beq.n	800b8d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	7c12      	ldrb	r2, [r2, #16]
 800b8cc:	f107 0108 	add.w	r1, r7, #8
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	4798      	blx	r3
 800b8d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8d6:	e05d      	b.n	800b994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fa97 	bl	800be0e <USBD_CtlError>
            err++;
 800b8e0:	7afb      	ldrb	r3, [r7, #11]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8e6:	e055      	b.n	800b994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00b      	beq.n	800b90c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	7c12      	ldrb	r2, [r2, #16]
 800b900:	f107 0108 	add.w	r1, r7, #8
 800b904:	4610      	mov	r0, r2
 800b906:	4798      	blx	r3
 800b908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b90a:	e043      	b.n	800b994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fa7d 	bl	800be0e <USBD_CtlError>
            err++;
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	3301      	adds	r3, #1
 800b918:	72fb      	strb	r3, [r7, #11]
          break;
 800b91a:	e03b      	b.n	800b994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00b      	beq.n	800b940 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b92e:	695b      	ldr	r3, [r3, #20]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	7c12      	ldrb	r2, [r2, #16]
 800b934:	f107 0108 	add.w	r1, r7, #8
 800b938:	4610      	mov	r0, r2
 800b93a:	4798      	blx	r3
 800b93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b93e:	e029      	b.n	800b994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fa63 	bl	800be0e <USBD_CtlError>
            err++;
 800b948:	7afb      	ldrb	r3, [r7, #11]
 800b94a:	3301      	adds	r3, #1
 800b94c:	72fb      	strb	r3, [r7, #11]
          break;
 800b94e:	e021      	b.n	800b994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00b      	beq.n	800b974 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	7c12      	ldrb	r2, [r2, #16]
 800b968:	f107 0108 	add.w	r1, r7, #8
 800b96c:	4610      	mov	r0, r2
 800b96e:	4798      	blx	r3
 800b970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b972:	e00f      	b.n	800b994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fa49 	bl	800be0e <USBD_CtlError>
            err++;
 800b97c:	7afb      	ldrb	r3, [r7, #11]
 800b97e:	3301      	adds	r3, #1
 800b980:	72fb      	strb	r3, [r7, #11]
          break;
 800b982:	e007      	b.n	800b994 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa41 	bl	800be0e <USBD_CtlError>
          err++;
 800b98c:	7afb      	ldrb	r3, [r7, #11]
 800b98e:	3301      	adds	r3, #1
 800b990:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b992:	bf00      	nop
      }
      break;
 800b994:	e037      	b.n	800ba06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	7c1b      	ldrb	r3, [r3, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d109      	bne.n	800b9b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a6:	f107 0208 	add.w	r2, r7, #8
 800b9aa:	4610      	mov	r0, r2
 800b9ac:	4798      	blx	r3
 800b9ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9b0:	e029      	b.n	800ba06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9b2:	6839      	ldr	r1, [r7, #0]
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fa2a 	bl	800be0e <USBD_CtlError>
        err++;
 800b9ba:	7afb      	ldrb	r3, [r7, #11]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	72fb      	strb	r3, [r7, #11]
      break;
 800b9c0:	e021      	b.n	800ba06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	7c1b      	ldrb	r3, [r3, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10d      	bne.n	800b9e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d2:	f107 0208 	add.w	r2, r7, #8
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	4798      	blx	r3
 800b9da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	2207      	movs	r2, #7
 800b9e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9e4:	e00f      	b.n	800ba06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fa10 	bl	800be0e <USBD_CtlError>
        err++;
 800b9ee:	7afb      	ldrb	r3, [r7, #11]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b9f4:	e007      	b.n	800ba06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fa08 	bl	800be0e <USBD_CtlError>
      err++;
 800b9fe:	7afb      	ldrb	r3, [r7, #11]
 800ba00:	3301      	adds	r3, #1
 800ba02:	72fb      	strb	r3, [r7, #11]
      break;
 800ba04:	bf00      	nop
  }

  if (err != 0U)
 800ba06:	7afb      	ldrb	r3, [r7, #11]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d11e      	bne.n	800ba4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	88db      	ldrh	r3, [r3, #6]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d016      	beq.n	800ba42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ba14:	893b      	ldrh	r3, [r7, #8]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00e      	beq.n	800ba38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	88da      	ldrh	r2, [r3, #6]
 800ba1e:	893b      	ldrh	r3, [r7, #8]
 800ba20:	4293      	cmp	r3, r2
 800ba22:	bf28      	it	cs
 800ba24:	4613      	movcs	r3, r2
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba2a:	893b      	ldrh	r3, [r7, #8]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	68f9      	ldr	r1, [r7, #12]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fa5d 	bl	800bef0 <USBD_CtlSendData>
 800ba36:	e009      	b.n	800ba4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f9e7 	bl	800be0e <USBD_CtlError>
 800ba40:	e004      	b.n	800ba4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 faae 	bl	800bfa4 <USBD_CtlSendStatus>
 800ba48:	e000      	b.n	800ba4c <USBD_GetDescriptor+0x2cc>
    return;
 800ba4a:	bf00      	nop
  }
}
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop

0800ba54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	889b      	ldrh	r3, [r3, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d131      	bne.n	800baca <USBD_SetAddress+0x76>
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	88db      	ldrh	r3, [r3, #6]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d12d      	bne.n	800baca <USBD_SetAddress+0x76>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	885b      	ldrh	r3, [r3, #2]
 800ba72:	2b7f      	cmp	r3, #127	; 0x7f
 800ba74:	d829      	bhi.n	800baca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	885b      	ldrh	r3, [r3, #2]
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	d104      	bne.n	800ba98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f9bc 	bl	800be0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba96:	e01d      	b.n	800bad4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	7bfa      	ldrb	r2, [r7, #15]
 800ba9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f003 fbab 	bl	800f200 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fa7a 	bl	800bfa4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d004      	beq.n	800bac0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2202      	movs	r2, #2
 800baba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800babe:	e009      	b.n	800bad4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bac8:	e004      	b.n	800bad4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f99e 	bl	800be0e <USBD_CtlError>
  }
}
 800bad2:	bf00      	nop
 800bad4:	bf00      	nop
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bae6:	2300      	movs	r3, #0
 800bae8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	885b      	ldrh	r3, [r3, #2]
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	4b4e      	ldr	r3, [pc, #312]	; (800bc2c <USBD_SetConfig+0x150>)
 800baf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800baf4:	4b4d      	ldr	r3, [pc, #308]	; (800bc2c <USBD_SetConfig+0x150>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d905      	bls.n	800bb08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f985 	bl	800be0e <USBD_CtlError>
    return USBD_FAIL;
 800bb04:	2303      	movs	r3, #3
 800bb06:	e08c      	b.n	800bc22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d002      	beq.n	800bb1a <USBD_SetConfig+0x3e>
 800bb14:	2b03      	cmp	r3, #3
 800bb16:	d029      	beq.n	800bb6c <USBD_SetConfig+0x90>
 800bb18:	e075      	b.n	800bc06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb1a:	4b44      	ldr	r3, [pc, #272]	; (800bc2c <USBD_SetConfig+0x150>)
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d020      	beq.n	800bb64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bb22:	4b42      	ldr	r3, [pc, #264]	; (800bc2c <USBD_SetConfig+0x150>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb2c:	4b3f      	ldr	r3, [pc, #252]	; (800bc2c <USBD_SetConfig+0x150>)
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	4619      	mov	r1, r3
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7fe ffe7 	bl	800ab06 <USBD_SetClassConfig>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d008      	beq.n	800bb54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f962 	bl	800be0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2202      	movs	r2, #2
 800bb4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb52:	e065      	b.n	800bc20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fa25 	bl	800bfa4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2203      	movs	r2, #3
 800bb5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb62:	e05d      	b.n	800bc20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fa1d 	bl	800bfa4 <USBD_CtlSendStatus>
      break;
 800bb6a:	e059      	b.n	800bc20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bb6c:	4b2f      	ldr	r3, [pc, #188]	; (800bc2c <USBD_SetConfig+0x150>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d112      	bne.n	800bb9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb7c:	4b2b      	ldr	r3, [pc, #172]	; (800bc2c <USBD_SetConfig+0x150>)
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	461a      	mov	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb86:	4b29      	ldr	r3, [pc, #164]	; (800bc2c <USBD_SetConfig+0x150>)
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7fe ffd6 	bl	800ab3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fa06 	bl	800bfa4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb98:	e042      	b.n	800bc20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bb9a:	4b24      	ldr	r3, [pc, #144]	; (800bc2c <USBD_SetConfig+0x150>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d02a      	beq.n	800bbfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7fe ffc4 	bl	800ab3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bbb6:	4b1d      	ldr	r3, [pc, #116]	; (800bc2c <USBD_SetConfig+0x150>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bbc0:	4b1a      	ldr	r3, [pc, #104]	; (800bc2c <USBD_SetConfig+0x150>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7fe ff9d 	bl	800ab06 <USBD_SetClassConfig>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00f      	beq.n	800bbf6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 f918 	bl	800be0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7fe ffa9 	bl	800ab3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbf4:	e014      	b.n	800bc20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f9d4 	bl	800bfa4 <USBD_CtlSendStatus>
      break;
 800bbfc:	e010      	b.n	800bc20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f9d0 	bl	800bfa4 <USBD_CtlSendStatus>
      break;
 800bc04:	e00c      	b.n	800bc20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bc06:	6839      	ldr	r1, [r7, #0]
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f900 	bl	800be0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc0e:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <USBD_SetConfig+0x150>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	4619      	mov	r1, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f7fe ff92 	bl	800ab3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc1e:	bf00      	nop
  }

  return ret;
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20000be8 	.word	0x20000be8

0800bc30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	88db      	ldrh	r3, [r3, #6]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d004      	beq.n	800bc4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f8e2 	bl	800be0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc4a:	e023      	b.n	800bc94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	dc02      	bgt.n	800bc5e <USBD_GetConfig+0x2e>
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	dc03      	bgt.n	800bc64 <USBD_GetConfig+0x34>
 800bc5c:	e015      	b.n	800bc8a <USBD_GetConfig+0x5a>
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	d00b      	beq.n	800bc7a <USBD_GetConfig+0x4a>
 800bc62:	e012      	b.n	800bc8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	2201      	movs	r2, #1
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f93c 	bl	800bef0 <USBD_CtlSendData>
        break;
 800bc78:	e00c      	b.n	800bc94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	2201      	movs	r2, #1
 800bc80:	4619      	mov	r1, r3
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f934 	bl	800bef0 <USBD_CtlSendData>
        break;
 800bc88:	e004      	b.n	800bc94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc8a:	6839      	ldr	r1, [r7, #0]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f8be 	bl	800be0e <USBD_CtlError>
        break;
 800bc92:	bf00      	nop
}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d81e      	bhi.n	800bcf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	88db      	ldrh	r3, [r3, #6]
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d004      	beq.n	800bcc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bcbc:	6839      	ldr	r1, [r7, #0]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 f8a5 	bl	800be0e <USBD_CtlError>
        break;
 800bcc4:	e01a      	b.n	800bcfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d005      	beq.n	800bce2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	f043 0202 	orr.w	r2, r3, #2
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	330c      	adds	r3, #12
 800bce6:	2202      	movs	r2, #2
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f900 	bl	800bef0 <USBD_CtlSendData>
      break;
 800bcf0:	e004      	b.n	800bcfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f88a 	bl	800be0e <USBD_CtlError>
      break;
 800bcfa:	bf00      	nop
  }
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	885b      	ldrh	r3, [r3, #2]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d107      	bne.n	800bd26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f940 	bl	800bfa4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bd24:	e013      	b.n	800bd4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	885b      	ldrh	r3, [r3, #2]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d10b      	bne.n	800bd46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	889b      	ldrh	r3, [r3, #4]
 800bd32:	0a1b      	lsrs	r3, r3, #8
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f930 	bl	800bfa4 <USBD_CtlSendStatus>
}
 800bd44:	e003      	b.n	800bd4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bd46:	6839      	ldr	r1, [r7, #0]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 f860 	bl	800be0e <USBD_CtlError>
}
 800bd4e:	bf00      	nop
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b082      	sub	sp, #8
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d80b      	bhi.n	800bd86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	885b      	ldrh	r3, [r3, #2]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d10c      	bne.n	800bd90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 f910 	bl	800bfa4 <USBD_CtlSendStatus>
      }
      break;
 800bd84:	e004      	b.n	800bd90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 f840 	bl	800be0e <USBD_CtlError>
      break;
 800bd8e:	e000      	b.n	800bd92 <USBD_ClrFeature+0x3c>
      break;
 800bd90:	bf00      	nop
  }
}
 800bd92:	bf00      	nop
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b084      	sub	sp, #16
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	781a      	ldrb	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	781a      	ldrb	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f7ff fa41 	bl	800b24c <SWAPBYTE>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	461a      	mov	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3301      	adds	r3, #1
 800bddc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f7ff fa34 	bl	800b24c <SWAPBYTE>
 800bde4:	4603      	mov	r3, r0
 800bde6:	461a      	mov	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f7ff fa27 	bl	800b24c <SWAPBYTE>
 800bdfe:	4603      	mov	r3, r0
 800be00:	461a      	mov	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	80da      	strh	r2, [r3, #6]
}
 800be06:	bf00      	nop
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be18:	2180      	movs	r1, #128	; 0x80
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f003 f986 	bl	800f12c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be20:	2100      	movs	r1, #0
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f003 f982 	bl	800f12c <USBD_LL_StallEP>
}
 800be28:	bf00      	nop
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be3c:	2300      	movs	r3, #0
 800be3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d036      	beq.n	800beb4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800be4a:	6938      	ldr	r0, [r7, #16]
 800be4c:	f000 f836 	bl	800bebc <USBD_GetLen>
 800be50:	4603      	mov	r3, r0
 800be52:	3301      	adds	r3, #1
 800be54:	b29b      	uxth	r3, r3
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	b29a      	uxth	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800be5e:	7dfb      	ldrb	r3, [r7, #23]
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	4413      	add	r3, r2
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	7812      	ldrb	r2, [r2, #0]
 800be68:	701a      	strb	r2, [r3, #0]
  idx++;
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	3301      	adds	r3, #1
 800be6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	4413      	add	r3, r2
 800be76:	2203      	movs	r2, #3
 800be78:	701a      	strb	r2, [r3, #0]
  idx++;
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
 800be7c:	3301      	adds	r3, #1
 800be7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be80:	e013      	b.n	800beaa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	4413      	add	r3, r2
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	7812      	ldrb	r2, [r2, #0]
 800be8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	3301      	adds	r3, #1
 800be92:	613b      	str	r3, [r7, #16]
    idx++;
 800be94:	7dfb      	ldrb	r3, [r7, #23]
 800be96:	3301      	adds	r3, #1
 800be98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be9a:	7dfb      	ldrb	r3, [r7, #23]
 800be9c:	68ba      	ldr	r2, [r7, #8]
 800be9e:	4413      	add	r3, r2
 800bea0:	2200      	movs	r2, #0
 800bea2:	701a      	strb	r2, [r3, #0]
    idx++;
 800bea4:	7dfb      	ldrb	r3, [r7, #23]
 800bea6:	3301      	adds	r3, #1
 800bea8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1e7      	bne.n	800be82 <USBD_GetString+0x52>
 800beb2:	e000      	b.n	800beb6 <USBD_GetString+0x86>
    return;
 800beb4:	bf00      	nop
  }
}
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800becc:	e005      	b.n	800beda <USBD_GetLen+0x1e>
  {
    len++;
 800bece:	7bfb      	ldrb	r3, [r7, #15]
 800bed0:	3301      	adds	r3, #1
 800bed2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	3301      	adds	r3, #1
 800bed8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1f5      	bne.n	800bece <USBD_GetLen+0x12>
  }

  return len;
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2202      	movs	r2, #2
 800bf00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	2100      	movs	r1, #0
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f003 f991 	bl	800f23e <USBD_LL_Transmit>

  return USBD_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	2100      	movs	r1, #0
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f003 f980 	bl	800f23e <USBD_LL_Transmit>

  return USBD_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2203      	movs	r2, #3
 800bf58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	2100      	movs	r1, #0
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f003 f984 	bl	800f280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	60b9      	str	r1, [r7, #8]
 800bf8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	2100      	movs	r1, #0
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f003 f973 	bl	800f280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2204      	movs	r2, #4
 800bfb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	2100      	movs	r1, #0
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f003 f93f 	bl	800f23e <USBD_LL_Transmit>

  return USBD_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b082      	sub	sp, #8
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2205      	movs	r2, #5
 800bfd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfda:	2300      	movs	r3, #0
 800bfdc:	2200      	movs	r2, #0
 800bfde:	2100      	movs	r1, #0
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f003 f94d 	bl	800f280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	4603      	mov	r3, r0
 800bff8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bffa:	2300      	movs	r3, #0
 800bffc:	60fb      	str	r3, [r7, #12]

  if (priority != osPriorityError) {
 800bffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c002:	2b84      	cmp	r3, #132	; 0x84
 800c004:	d005      	beq.n	800c012 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c006:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	4413      	add	r3, r2
 800c00e:	3303      	adds	r3, #3
 800c010:	60fb      	str	r3, [r7, #12]
  }

  return fpriority;
 800c012:	68fb      	ldr	r3, [r7, #12]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c024:	f001 f8ea 	bl	800d1fc <vTaskStartScheduler>

  return osOK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c02e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c030:	b089      	sub	sp, #36	; 0x24
 800c032:	af04      	add	r7, sp, #16
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	695b      	ldr	r3, [r3, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d020      	beq.n	800c082 <osThreadCreate+0x54>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	699b      	ldr	r3, [r3, #24]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d01c      	beq.n	800c082 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685c      	ldr	r4, [r3, #4]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	691e      	ldr	r6, [r3, #16]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7ff ffc8 	bl	800bff0 <makeFreeRtosPriority>
 800c060:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c06a:	9202      	str	r2, [sp, #8]
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	9100      	str	r1, [sp, #0]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	4632      	mov	r2, r6
 800c074:	4629      	mov	r1, r5
 800c076:	4620      	mov	r0, r4
 800c078:	f000 fdd6 	bl	800cc28 <xTaskCreateStatic>
 800c07c:	4603      	mov	r3, r0
 800c07e:	60fb      	str	r3, [r7, #12]
 800c080:	e01c      	b.n	800c0bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	685c      	ldr	r4, [r3, #4]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c08e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff ffaa 	bl	800bff0 <makeFreeRtosPriority>
 800c09c:	4602      	mov	r2, r0
 800c09e:	f107 030c 	add.w	r3, r7, #12
 800c0a2:	9301      	str	r3, [sp, #4]
 800c0a4:	9200      	str	r2, [sp, #0]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	4632      	mov	r2, r6
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f000 fe18 	bl	800cce2 <xTaskCreate>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d001      	beq.n	800c0bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	e000      	b.n	800c0be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }
#endif

  return handle;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c0c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	60fb      	str	r3, [r7, #12]

  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d001      	beq.n	800c0dc <osDelay+0x16>
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	e000      	b.n	800c0de <osDelay+0x18>
 800c0dc:	2301      	movs	r3, #1
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f000 ffc6 	bl	800d070 <vTaskDelay>

  return osOK;
 800c0e4:	2300      	movs	r3, #0
#else
  (void) millisec;

  return osErrorResource;
#endif
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	b083      	sub	sp, #12
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f103 0208 	add.w	r2, r3, #8
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c106:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f103 0208 	add.w	r2, r3, #8
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f103 0208 	add.w	r2, r3, #8
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c122:	bf00      	nop
 800c124:	370c      	adds	r7, #12
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr

0800c12e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c12e:	b480      	push	{r7}
 800c130:	b083      	sub	sp, #12
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c13c:	bf00      	nop
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	689a      	ldr	r2, [r3, #8]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	601a      	str	r2, [r3, #0]
}
 800c184:	bf00      	nop
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1a6:	d103      	bne.n	800c1b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	60fb      	str	r3, [r7, #12]
 800c1ae:	e00c      	b.n	800c1ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3308      	adds	r3, #8
 800c1b4:	60fb      	str	r3, [r7, #12]
 800c1b6:	e002      	b.n	800c1be <vListInsert+0x2e>
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	60fb      	str	r3, [r7, #12]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d2f6      	bcs.n	800c1b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	685a      	ldr	r2, [r3, #4]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	683a      	ldr	r2, [r7, #0]
 800c1e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	1c5a      	adds	r2, r3, #1
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	601a      	str	r2, [r3, #0]
}
 800c1f6:	bf00      	nop
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c202:	b480      	push	{r7}
 800c204:	b085      	sub	sp, #20
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	6892      	ldr	r2, [r2, #8]
 800c218:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	6852      	ldr	r2, [r2, #4]
 800c222:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d103      	bne.n	800c236 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	689a      	ldr	r2, [r3, #8]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	1e5a      	subs	r2, r3, #1
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
	...

0800c258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d10a      	bne.n	800c282 <xQueueGenericReset+0x2a>
	__asm volatile
 800c26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c270:	f383 8811 	msr	BASEPRI, r3
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	f3bf 8f4f 	dsb	sy
 800c27c:	60bb      	str	r3, [r7, #8]
}
 800c27e:	bf00      	nop
 800c280:	e7fe      	b.n	800c280 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c282:	f002 fa1f 	bl	800e6c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c28e:	68f9      	ldr	r1, [r7, #12]
 800c290:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c292:	fb01 f303 	mul.w	r3, r1, r3
 800c296:	441a      	add	r2, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	68f9      	ldr	r1, [r7, #12]
 800c2b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c2b8:	fb01 f303 	mul.w	r3, r1, r3
 800c2bc:	441a      	add	r2, r3
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	22ff      	movs	r2, #255	; 0xff
 800c2c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	22ff      	movs	r2, #255	; 0xff
 800c2ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d114      	bne.n	800c302 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d01a      	beq.n	800c316 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3310      	adds	r3, #16
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f001 fa0d 	bl	800d704 <xTaskRemoveFromEventList>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d012      	beq.n	800c316 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c2f0:	4b0c      	ldr	r3, [pc, #48]	; (800c324 <xQueueGenericReset+0xcc>)
 800c2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f6:	601a      	str	r2, [r3, #0]
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	e009      	b.n	800c316 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	3310      	adds	r3, #16
 800c306:	4618      	mov	r0, r3
 800c308:	f7ff fef1 	bl	800c0ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	3324      	adds	r3, #36	; 0x24
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff feec 	bl	800c0ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c316:	f002 fa05 	bl	800e724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c31a:	2301      	movs	r3, #1
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	e000ed04 	.word	0xe000ed04

0800c328 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08e      	sub	sp, #56	; 0x38
 800c32c:	af02      	add	r7, sp, #8
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10a      	bne.n	800c352 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c34e:	bf00      	nop
 800c350:	e7fe      	b.n	800c350 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10a      	bne.n	800c36e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c36a:	bf00      	nop
 800c36c:	e7fe      	b.n	800c36c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <xQueueGenericCreateStatic+0x52>
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <xQueueGenericCreateStatic+0x56>
 800c37a:	2301      	movs	r3, #1
 800c37c:	e000      	b.n	800c380 <xQueueGenericCreateStatic+0x58>
 800c37e:	2300      	movs	r3, #0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10a      	bne.n	800c39a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	623b      	str	r3, [r7, #32]
}
 800c396:	bf00      	nop
 800c398:	e7fe      	b.n	800c398 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <xQueueGenericCreateStatic+0x7e>
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <xQueueGenericCreateStatic+0x82>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <xQueueGenericCreateStatic+0x84>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10a      	bne.n	800c3c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	61fb      	str	r3, [r7, #28]
}
 800c3c2:	bf00      	nop
 800c3c4:	e7fe      	b.n	800c3c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c3c6:	2348      	movs	r3, #72	; 0x48
 800c3c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b48      	cmp	r3, #72	; 0x48
 800c3ce:	d00a      	beq.n	800c3e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	61bb      	str	r3, [r7, #24]
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c3e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00d      	beq.n	800c40e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	4613      	mov	r3, r2
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	68b9      	ldr	r1, [r7, #8]
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f000 f805 	bl	800c418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c410:	4618      	mov	r0, r3
 800c412:	3730      	adds	r7, #48	; 0x30
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d103      	bne.n	800c434 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	69ba      	ldr	r2, [r7, #24]
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	e002      	b.n	800c43a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c446:	2101      	movs	r1, #1
 800c448:	69b8      	ldr	r0, [r7, #24]
 800c44a:	f7ff ff05 	bl	800c258 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c44e:	bf00      	nop
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08e      	sub	sp, #56	; 0x38
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c466:	2300      	movs	r3, #0
 800c468:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10a      	bne.n	800c48a <xQueueGenericSend+0x32>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c486:	bf00      	nop
 800c488:	e7fe      	b.n	800c488 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d103      	bne.n	800c498 <xQueueGenericSend+0x40>
 800c490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c494:	2b00      	cmp	r3, #0
 800c496:	d101      	bne.n	800c49c <xQueueGenericSend+0x44>
 800c498:	2301      	movs	r3, #1
 800c49a:	e000      	b.n	800c49e <xQueueGenericSend+0x46>
 800c49c:	2300      	movs	r3, #0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10a      	bne.n	800c4b8 <xQueueGenericSend+0x60>
	__asm volatile
 800c4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a6:	f383 8811 	msr	BASEPRI, r3
 800c4aa:	f3bf 8f6f 	isb	sy
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c4b4:	bf00      	nop
 800c4b6:	e7fe      	b.n	800c4b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2b02      	cmp	r3, #2
 800c4bc:	d103      	bne.n	800c4c6 <xQueueGenericSend+0x6e>
 800c4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d101      	bne.n	800c4ca <xQueueGenericSend+0x72>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e000      	b.n	800c4cc <xQueueGenericSend+0x74>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10a      	bne.n	800c4e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	623b      	str	r3, [r7, #32]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4e6:	f001 fac9 	bl	800da7c <xTaskGetSchedulerState>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d102      	bne.n	800c4f6 <xQueueGenericSend+0x9e>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <xQueueGenericSend+0xa2>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <xQueueGenericSend+0xa4>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10a      	bne.n	800c516 <xQueueGenericSend+0xbe>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	61fb      	str	r3, [r7, #28]
}
 800c512:	bf00      	nop
 800c514:	e7fe      	b.n	800c514 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c516:	f002 f8d5 	bl	800e6c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c522:	429a      	cmp	r2, r3
 800c524:	d302      	bcc.n	800c52c <xQueueGenericSend+0xd4>
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d129      	bne.n	800c580 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c52c:	683a      	ldr	r2, [r7, #0]
 800c52e:	68b9      	ldr	r1, [r7, #8]
 800c530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c532:	f000 fa0b 	bl	800c94c <prvCopyDataToQueue>
 800c536:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d010      	beq.n	800c562 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	3324      	adds	r3, #36	; 0x24
 800c544:	4618      	mov	r0, r3
 800c546:	f001 f8dd 	bl	800d704 <xTaskRemoveFromEventList>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d013      	beq.n	800c578 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c550:	4b3f      	ldr	r3, [pc, #252]	; (800c650 <xQueueGenericSend+0x1f8>)
 800c552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c556:	601a      	str	r2, [r3, #0]
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	e00a      	b.n	800c578 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c564:	2b00      	cmp	r3, #0
 800c566:	d007      	beq.n	800c578 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c568:	4b39      	ldr	r3, [pc, #228]	; (800c650 <xQueueGenericSend+0x1f8>)
 800c56a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c56e:	601a      	str	r2, [r3, #0]
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c578:	f002 f8d4 	bl	800e724 <vPortExitCritical>
				return pdPASS;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e063      	b.n	800c648 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d103      	bne.n	800c58e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c586:	f002 f8cd 	bl	800e724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c58a:	2300      	movs	r3, #0
 800c58c:	e05c      	b.n	800c648 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c590:	2b00      	cmp	r3, #0
 800c592:	d106      	bne.n	800c5a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c594:	f107 0314 	add.w	r3, r7, #20
 800c598:	4618      	mov	r0, r3
 800c59a:	f001 f915 	bl	800d7c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5a2:	f002 f8bf 	bl	800e724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5a6:	f000 fe8f 	bl	800d2c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5aa:	f002 f88b 	bl	800e6c4 <vPortEnterCritical>
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5b4:	b25b      	sxtb	r3, r3
 800c5b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5ba:	d103      	bne.n	800c5c4 <xQueueGenericSend+0x16c>
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5ca:	b25b      	sxtb	r3, r3
 800c5cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5d0:	d103      	bne.n	800c5da <xQueueGenericSend+0x182>
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5da:	f002 f8a3 	bl	800e724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5de:	1d3a      	adds	r2, r7, #4
 800c5e0:	f107 0314 	add.w	r3, r7, #20
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f001 f904 	bl	800d7f4 <xTaskCheckForTimeOut>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d124      	bne.n	800c63c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5f4:	f000 faa2 	bl	800cb3c <prvIsQueueFull>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d018      	beq.n	800c630 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c600:	3310      	adds	r3, #16
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	4611      	mov	r1, r2
 800c606:	4618      	mov	r0, r3
 800c608:	f001 f82c 	bl	800d664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c60c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c60e:	f000 fa2d 	bl	800ca6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c612:	f000 fe67 	bl	800d2e4 <xTaskResumeAll>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f47f af7c 	bne.w	800c516 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c61e:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <xQueueGenericSend+0x1f8>)
 800c620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c624:	601a      	str	r2, [r3, #0]
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	f3bf 8f6f 	isb	sy
 800c62e:	e772      	b.n	800c516 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c632:	f000 fa1b 	bl	800ca6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c636:	f000 fe55 	bl	800d2e4 <xTaskResumeAll>
 800c63a:	e76c      	b.n	800c516 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c63c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c63e:	f000 fa15 	bl	800ca6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c642:	f000 fe4f 	bl	800d2e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c646:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3738      	adds	r7, #56	; 0x38
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	e000ed04 	.word	0xe000ed04

0800c654 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b090      	sub	sp, #64	; 0x40
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
 800c660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10a      	bne.n	800c682 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c67e:	bf00      	nop
 800c680:	e7fe      	b.n	800c680 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d103      	bne.n	800c690 <xQueueGenericSendFromISR+0x3c>
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d101      	bne.n	800c694 <xQueueGenericSendFromISR+0x40>
 800c690:	2301      	movs	r3, #1
 800c692:	e000      	b.n	800c696 <xQueueGenericSendFromISR+0x42>
 800c694:	2300      	movs	r3, #0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10a      	bne.n	800c6b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c6ac:	bf00      	nop
 800c6ae:	e7fe      	b.n	800c6ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d103      	bne.n	800c6be <xQueueGenericSendFromISR+0x6a>
 800c6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d101      	bne.n	800c6c2 <xQueueGenericSendFromISR+0x6e>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e000      	b.n	800c6c4 <xQueueGenericSendFromISR+0x70>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d10a      	bne.n	800c6de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6cc:	f383 8811 	msr	BASEPRI, r3
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	623b      	str	r3, [r7, #32]
}
 800c6da:	bf00      	nop
 800c6dc:	e7fe      	b.n	800c6dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6de:	f002 f8d3 	bl	800e888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c6e2:	f3ef 8211 	mrs	r2, BASEPRI
 800c6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ea:	f383 8811 	msr	BASEPRI, r3
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	61fa      	str	r2, [r7, #28]
 800c6f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c6fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c706:	429a      	cmp	r2, r3
 800c708:	d302      	bcc.n	800c710 <xQueueGenericSendFromISR+0xbc>
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	d12f      	bne.n	800c770 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c726:	f000 f911 	bl	800c94c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c72a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c72e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c732:	d112      	bne.n	800c75a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d016      	beq.n	800c76a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73e:	3324      	adds	r3, #36	; 0x24
 800c740:	4618      	mov	r0, r3
 800c742:	f000 ffdf 	bl	800d704 <xTaskRemoveFromEventList>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00e      	beq.n	800c76a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00b      	beq.n	800c76a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2201      	movs	r2, #1
 800c756:	601a      	str	r2, [r3, #0]
 800c758:	e007      	b.n	800c76a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c75a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c75e:	3301      	adds	r3, #1
 800c760:	b2db      	uxtb	r3, r3
 800c762:	b25a      	sxtb	r2, r3
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c76a:	2301      	movs	r3, #1
 800c76c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c76e:	e001      	b.n	800c774 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c770:	2300      	movs	r3, #0
 800c772:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c776:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c77e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c782:	4618      	mov	r0, r3
 800c784:	3740      	adds	r7, #64	; 0x40
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
	...

0800c78c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b08c      	sub	sp, #48	; 0x30
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c798:	2300      	movs	r3, #0
 800c79a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10a      	bne.n	800c7bc <xQueueReceive+0x30>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	623b      	str	r3, [r7, #32]
}
 800c7b8:	bf00      	nop
 800c7ba:	e7fe      	b.n	800c7ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d103      	bne.n	800c7ca <xQueueReceive+0x3e>
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d101      	bne.n	800c7ce <xQueueReceive+0x42>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e000      	b.n	800c7d0 <xQueueReceive+0x44>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10a      	bne.n	800c7ea <xQueueReceive+0x5e>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	61fb      	str	r3, [r7, #28]
}
 800c7e6:	bf00      	nop
 800c7e8:	e7fe      	b.n	800c7e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7ea:	f001 f947 	bl	800da7c <xTaskGetSchedulerState>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d102      	bne.n	800c7fa <xQueueReceive+0x6e>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d101      	bne.n	800c7fe <xQueueReceive+0x72>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e000      	b.n	800c800 <xQueueReceive+0x74>
 800c7fe:	2300      	movs	r3, #0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10a      	bne.n	800c81a <xQueueReceive+0x8e>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	61bb      	str	r3, [r7, #24]
}
 800c816:	bf00      	nop
 800c818:	e7fe      	b.n	800c818 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c81a:	f001 ff53 	bl	800e6c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c822:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c826:	2b00      	cmp	r3, #0
 800c828:	d01f      	beq.n	800c86a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c82e:	f000 f8f7 	bl	800ca20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	1e5a      	subs	r2, r3, #1
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00f      	beq.n	800c862 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c844:	3310      	adds	r3, #16
 800c846:	4618      	mov	r0, r3
 800c848:	f000 ff5c 	bl	800d704 <xTaskRemoveFromEventList>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d007      	beq.n	800c862 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c852:	4b3d      	ldr	r3, [pc, #244]	; (800c948 <xQueueReceive+0x1bc>)
 800c854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c858:	601a      	str	r2, [r3, #0]
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c862:	f001 ff5f 	bl	800e724 <vPortExitCritical>
				return pdPASS;
 800c866:	2301      	movs	r3, #1
 800c868:	e069      	b.n	800c93e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d103      	bne.n	800c878 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c870:	f001 ff58 	bl	800e724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c874:	2300      	movs	r3, #0
 800c876:	e062      	b.n	800c93e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d106      	bne.n	800c88c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c87e:	f107 0310 	add.w	r3, r7, #16
 800c882:	4618      	mov	r0, r3
 800c884:	f000 ffa0 	bl	800d7c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c888:	2301      	movs	r3, #1
 800c88a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c88c:	f001 ff4a 	bl	800e724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c890:	f000 fd1a 	bl	800d2c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c894:	f001 ff16 	bl	800e6c4 <vPortEnterCritical>
 800c898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c89e:	b25b      	sxtb	r3, r3
 800c8a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8a4:	d103      	bne.n	800c8ae <xQueueReceive+0x122>
 800c8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8b4:	b25b      	sxtb	r3, r3
 800c8b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8ba:	d103      	bne.n	800c8c4 <xQueueReceive+0x138>
 800c8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8c4:	f001 ff2e 	bl	800e724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8c8:	1d3a      	adds	r2, r7, #4
 800c8ca:	f107 0310 	add.w	r3, r7, #16
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 ff8f 	bl	800d7f4 <xTaskCheckForTimeOut>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d123      	bne.n	800c924 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8de:	f000 f917 	bl	800cb10 <prvIsQueueEmpty>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d017      	beq.n	800c918 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	3324      	adds	r3, #36	; 0x24
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	4611      	mov	r1, r2
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 feb7 	bl	800d664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8f8:	f000 f8b8 	bl	800ca6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8fc:	f000 fcf2 	bl	800d2e4 <xTaskResumeAll>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d189      	bne.n	800c81a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c906:	4b10      	ldr	r3, [pc, #64]	; (800c948 <xQueueReceive+0x1bc>)
 800c908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c90c:	601a      	str	r2, [r3, #0]
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	e780      	b.n	800c81a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c91a:	f000 f8a7 	bl	800ca6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c91e:	f000 fce1 	bl	800d2e4 <xTaskResumeAll>
 800c922:	e77a      	b.n	800c81a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c926:	f000 f8a1 	bl	800ca6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c92a:	f000 fcdb 	bl	800d2e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c92e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c930:	f000 f8ee 	bl	800cb10 <prvIsQueueEmpty>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	f43f af6f 	beq.w	800c81a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c93c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3730      	adds	r7, #48	; 0x30
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	e000ed04 	.word	0xe000ed04

0800c94c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c958:	2300      	movs	r3, #0
 800c95a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c960:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10d      	bne.n	800c986 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d14d      	bne.n	800ca0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	4618      	mov	r0, r3
 800c978:	f001 f89e 	bl	800dab8 <xTaskPriorityDisinherit>
 800c97c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2200      	movs	r2, #0
 800c982:	609a      	str	r2, [r3, #8]
 800c984:	e043      	b.n	800ca0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d119      	bne.n	800c9c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6858      	ldr	r0, [r3, #4]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c994:	461a      	mov	r2, r3
 800c996:	68b9      	ldr	r1, [r7, #8]
 800c998:	f003 fb9c 	bl	80100d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	685a      	ldr	r2, [r3, #4]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a4:	441a      	add	r2, r3
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	685a      	ldr	r2, [r3, #4]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d32b      	bcc.n	800ca0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	605a      	str	r2, [r3, #4]
 800c9be:	e026      	b.n	800ca0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	68d8      	ldr	r0, [r3, #12]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	68b9      	ldr	r1, [r7, #8]
 800c9cc:	f003 fb82 	bl	80100d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68da      	ldr	r2, [r3, #12]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d8:	425b      	negs	r3, r3
 800c9da:	441a      	add	r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68da      	ldr	r2, [r3, #12]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d207      	bcs.n	800c9fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	689a      	ldr	r2, [r3, #8]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f4:	425b      	negs	r3, r3
 800c9f6:	441a      	add	r2, r3
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d105      	bne.n	800ca0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	1c5a      	adds	r2, r3, #1
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca16:	697b      	ldr	r3, [r7, #20]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3718      	adds	r7, #24
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d018      	beq.n	800ca64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68da      	ldr	r2, [r3, #12]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca3a:	441a      	add	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	68da      	ldr	r2, [r3, #12]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d303      	bcc.n	800ca54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	68d9      	ldr	r1, [r3, #12]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	6838      	ldr	r0, [r7, #0]
 800ca60:	f003 fb38 	bl	80100d4 <memcpy>
	}
}
 800ca64:	bf00      	nop
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca74:	f001 fe26 	bl	800e6c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca80:	e011      	b.n	800caa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d012      	beq.n	800cab0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	3324      	adds	r3, #36	; 0x24
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 fe38 	bl	800d704 <xTaskRemoveFromEventList>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca9a:	f000 ff0d 	bl	800d8b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	dce9      	bgt.n	800ca82 <prvUnlockQueue+0x16>
 800caae:	e000      	b.n	800cab2 <prvUnlockQueue+0x46>
					break;
 800cab0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	22ff      	movs	r2, #255	; 0xff
 800cab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800caba:	f001 fe33 	bl	800e724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cabe:	f001 fe01 	bl	800e6c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cac8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800caca:	e011      	b.n	800caf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d012      	beq.n	800cafa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	3310      	adds	r3, #16
 800cad8:	4618      	mov	r0, r3
 800cada:	f000 fe13 	bl	800d704 <xTaskRemoveFromEventList>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d001      	beq.n	800cae8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cae4:	f000 fee8 	bl	800d8b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cae8:	7bbb      	ldrb	r3, [r7, #14]
 800caea:	3b01      	subs	r3, #1
 800caec:	b2db      	uxtb	r3, r3
 800caee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800caf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	dce9      	bgt.n	800cacc <prvUnlockQueue+0x60>
 800caf8:	e000      	b.n	800cafc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cafa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	22ff      	movs	r2, #255	; 0xff
 800cb00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cb04:	f001 fe0e 	bl	800e724 <vPortExitCritical>
}
 800cb08:	bf00      	nop
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb18:	f001 fdd4 	bl	800e6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d102      	bne.n	800cb2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb24:	2301      	movs	r3, #1
 800cb26:	60fb      	str	r3, [r7, #12]
 800cb28:	e001      	b.n	800cb2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb2e:	f001 fdf9 	bl	800e724 <vPortExitCritical>

	return xReturn;
 800cb32:	68fb      	ldr	r3, [r7, #12]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb44:	f001 fdbe 	bl	800e6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d102      	bne.n	800cb5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb54:	2301      	movs	r3, #1
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	e001      	b.n	800cb5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb5e:	f001 fde1 	bl	800e724 <vPortExitCritical>

	return xReturn;
 800cb62:	68fb      	ldr	r3, [r7, #12]
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb76:	2300      	movs	r3, #0
 800cb78:	60fb      	str	r3, [r7, #12]
 800cb7a:	e014      	b.n	800cba6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cb7c:	4a0f      	ldr	r2, [pc, #60]	; (800cbbc <vQueueAddToRegistry+0x50>)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10b      	bne.n	800cba0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cb88:	490c      	ldr	r1, [pc, #48]	; (800cbbc <vQueueAddToRegistry+0x50>)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	683a      	ldr	r2, [r7, #0]
 800cb8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cb92:	4a0a      	ldr	r2, [pc, #40]	; (800cbbc <vQueueAddToRegistry+0x50>)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	4413      	add	r3, r2
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cb9e:	e006      	b.n	800cbae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	3301      	adds	r3, #1
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b07      	cmp	r3, #7
 800cbaa:	d9e7      	bls.n	800cb7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cbac:	bf00      	nop
 800cbae:	bf00      	nop
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	20000bec 	.word	0x20000bec

0800cbc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cbd0:	f001 fd78 	bl	800e6c4 <vPortEnterCritical>
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbda:	b25b      	sxtb	r3, r3
 800cbdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbe0:	d103      	bne.n	800cbea <vQueueWaitForMessageRestricted+0x2a>
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbf0:	b25b      	sxtb	r3, r3
 800cbf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbf6:	d103      	bne.n	800cc00 <vQueueWaitForMessageRestricted+0x40>
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc00:	f001 fd90 	bl	800e724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d106      	bne.n	800cc1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	3324      	adds	r3, #36	; 0x24
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	68b9      	ldr	r1, [r7, #8]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 fd49 	bl	800d6ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cc1a:	6978      	ldr	r0, [r7, #20]
 800cc1c:	f7ff ff26 	bl	800ca6c <prvUnlockQueue>
	}
 800cc20:	bf00      	nop
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08e      	sub	sp, #56	; 0x38
 800cc2c:	af04      	add	r7, sp, #16
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d10a      	bne.n	800cc52 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc40:	f383 8811 	msr	BASEPRI, r3
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	f3bf 8f4f 	dsb	sy
 800cc4c:	623b      	str	r3, [r7, #32]
}
 800cc4e:	bf00      	nop
 800cc50:	e7fe      	b.n	800cc50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10a      	bne.n	800cc6e <xTaskCreateStatic+0x46>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	61fb      	str	r3, [r7, #28]
}
 800cc6a:	bf00      	nop
 800cc6c:	e7fe      	b.n	800cc6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc6e:	2364      	movs	r3, #100	; 0x64
 800cc70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	2b64      	cmp	r3, #100	; 0x64
 800cc76:	d00a      	beq.n	800cc8e <xTaskCreateStatic+0x66>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	61bb      	str	r3, [r7, #24]
}
 800cc8a:	bf00      	nop
 800cc8c:	e7fe      	b.n	800cc8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d01e      	beq.n	800ccd4 <xTaskCreateStatic+0xac>
 800cc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d01b      	beq.n	800ccd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cca4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca8:	2202      	movs	r2, #2
 800ccaa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9303      	str	r3, [sp, #12]
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	9302      	str	r3, [sp, #8]
 800ccb6:	f107 0314 	add.w	r3, r7, #20
 800ccba:	9301      	str	r3, [sp, #4]
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	68b9      	ldr	r1, [r7, #8]
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f000 f850 	bl	800cd6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccce:	f000 f8d5 	bl	800ce7c <prvAddNewTaskToReadyList>
 800ccd2:	e001      	b.n	800ccd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ccd8:	697b      	ldr	r3, [r7, #20]
	}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3728      	adds	r7, #40	; 0x28
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b08c      	sub	sp, #48	; 0x30
 800cce6:	af04      	add	r7, sp, #16
 800cce8:	60f8      	str	r0, [r7, #12]
 800ccea:	60b9      	str	r1, [r7, #8]
 800ccec:	603b      	str	r3, [r7, #0]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ccf2:	88fb      	ldrh	r3, [r7, #6]
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f001 fe06 	bl	800e908 <pvPortMalloc>
 800ccfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00e      	beq.n	800cd22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd04:	2064      	movs	r0, #100	; 0x64
 800cd06:	f001 fdff 	bl	800e908 <pvPortMalloc>
 800cd0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d003      	beq.n	800cd1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	697a      	ldr	r2, [r7, #20]
 800cd16:	631a      	str	r2, [r3, #48]	; 0x30
 800cd18:	e005      	b.n	800cd26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd1a:	6978      	ldr	r0, [r7, #20]
 800cd1c:	f001 fe06 	bl	800e92c <vPortFree>
 800cd20:	e001      	b.n	800cd26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd22:	2300      	movs	r3, #0
 800cd24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d017      	beq.n	800cd5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd34:	88fa      	ldrh	r2, [r7, #6]
 800cd36:	2300      	movs	r3, #0
 800cd38:	9303      	str	r3, [sp, #12]
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	9302      	str	r3, [sp, #8]
 800cd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd40:	9301      	str	r3, [sp, #4]
 800cd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	68b9      	ldr	r1, [r7, #8]
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f000 f80e 	bl	800cd6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd50:	69f8      	ldr	r0, [r7, #28]
 800cd52:	f000 f893 	bl	800ce7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd56:	2301      	movs	r3, #1
 800cd58:	61bb      	str	r3, [r7, #24]
 800cd5a:	e002      	b.n	800cd62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd62:	69bb      	ldr	r3, [r7, #24]
	}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3720      	adds	r7, #32
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	607a      	str	r2, [r7, #4]
 800cd78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd84:	3b01      	subs	r3, #1
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	4413      	add	r3, r2
 800cd8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd8c:	69bb      	ldr	r3, [r7, #24]
 800cd8e:	f023 0307 	bic.w	r3, r3, #7
 800cd92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	f003 0307 	and.w	r3, r3, #7
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00a      	beq.n	800cdb4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	617b      	str	r3, [r7, #20]
}
 800cdb0:	bf00      	nop
 800cdb2:	e7fe      	b.n	800cdb2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d01f      	beq.n	800cdfa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdba:	2300      	movs	r3, #0
 800cdbc:	61fb      	str	r3, [r7, #28]
 800cdbe:	e012      	b.n	800cde6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cdc0:	68ba      	ldr	r2, [r7, #8]
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	7819      	ldrb	r1, [r3, #0]
 800cdc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	4413      	add	r3, r2
 800cdce:	3334      	adds	r3, #52	; 0x34
 800cdd0:	460a      	mov	r2, r1
 800cdd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	4413      	add	r3, r2
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d006      	beq.n	800cdee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	3301      	adds	r3, #1
 800cde4:	61fb      	str	r3, [r7, #28]
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	2b1f      	cmp	r3, #31
 800cdea:	d9e9      	bls.n	800cdc0 <prvInitialiseNewTask+0x54>
 800cdec:	e000      	b.n	800cdf0 <prvInitialiseNewTask+0x84>
			{
				break;
 800cdee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800cdf8:	e003      	b.n	800ce02 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce04:	2b06      	cmp	r3, #6
 800ce06:	d901      	bls.n	800ce0c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce08:	2306      	movs	r3, #6
 800ce0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce16:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	3304      	adds	r3, #4
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7ff f983 	bl	800c12e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	3318      	adds	r3, #24
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7ff f97e 	bl	800c12e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	f1c3 0207 	rsb	r2, r3, #7
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	68f9      	ldr	r1, [r7, #12]
 800ce5a:	69b8      	ldr	r0, [r7, #24]
 800ce5c:	f001 fb02 	bl	800e464 <pxPortInitialiseStack>
 800ce60:	4602      	mov	r2, r0
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d002      	beq.n	800ce72 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce72:	bf00      	nop
 800ce74:	3720      	adds	r7, #32
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
	...

0800ce7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce84:	f001 fc1e 	bl	800e6c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce88:	4b2a      	ldr	r3, [pc, #168]	; (800cf34 <prvAddNewTaskToReadyList+0xb8>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	4a29      	ldr	r2, [pc, #164]	; (800cf34 <prvAddNewTaskToReadyList+0xb8>)
 800ce90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce92:	4b29      	ldr	r3, [pc, #164]	; (800cf38 <prvAddNewTaskToReadyList+0xbc>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d109      	bne.n	800ceae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce9a:	4a27      	ldr	r2, [pc, #156]	; (800cf38 <prvAddNewTaskToReadyList+0xbc>)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cea0:	4b24      	ldr	r3, [pc, #144]	; (800cf34 <prvAddNewTaskToReadyList+0xb8>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d110      	bne.n	800ceca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cea8:	f000 fd2a 	bl	800d900 <prvInitialiseTaskLists>
 800ceac:	e00d      	b.n	800ceca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ceae:	4b23      	ldr	r3, [pc, #140]	; (800cf3c <prvAddNewTaskToReadyList+0xc0>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d109      	bne.n	800ceca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ceb6:	4b20      	ldr	r3, [pc, #128]	; (800cf38 <prvAddNewTaskToReadyList+0xbc>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d802      	bhi.n	800ceca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cec4:	4a1c      	ldr	r2, [pc, #112]	; (800cf38 <prvAddNewTaskToReadyList+0xbc>)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ceca:	4b1d      	ldr	r3, [pc, #116]	; (800cf40 <prvAddNewTaskToReadyList+0xc4>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	3301      	adds	r3, #1
 800ced0:	4a1b      	ldr	r2, [pc, #108]	; (800cf40 <prvAddNewTaskToReadyList+0xc4>)
 800ced2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced8:	2201      	movs	r2, #1
 800ceda:	409a      	lsls	r2, r3
 800cedc:	4b19      	ldr	r3, [pc, #100]	; (800cf44 <prvAddNewTaskToReadyList+0xc8>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4313      	orrs	r3, r2
 800cee2:	4a18      	ldr	r2, [pc, #96]	; (800cf44 <prvAddNewTaskToReadyList+0xc8>)
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceea:	4613      	mov	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4413      	add	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4a15      	ldr	r2, [pc, #84]	; (800cf48 <prvAddNewTaskToReadyList+0xcc>)
 800cef4:	441a      	add	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	3304      	adds	r3, #4
 800cefa:	4619      	mov	r1, r3
 800cefc:	4610      	mov	r0, r2
 800cefe:	f7ff f923 	bl	800c148 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf02:	f001 fc0f 	bl	800e724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf06:	4b0d      	ldr	r3, [pc, #52]	; (800cf3c <prvAddNewTaskToReadyList+0xc0>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00e      	beq.n	800cf2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf0e:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <prvAddNewTaskToReadyList+0xbc>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d207      	bcs.n	800cf2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf1c:	4b0b      	ldr	r3, [pc, #44]	; (800cf4c <prvAddNewTaskToReadyList+0xd0>)
 800cf1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	20000d2c 	.word	0x20000d2c
 800cf38:	20000c2c 	.word	0x20000c2c
 800cf3c:	20000d38 	.word	0x20000d38
 800cf40:	20000d48 	.word	0x20000d48
 800cf44:	20000d34 	.word	0x20000d34
 800cf48:	20000c30 	.word	0x20000c30
 800cf4c:	e000ed04 	.word	0xe000ed04

0800cf50 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cf58:	f001 fbb4 	bl	800e6c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d102      	bne.n	800cf68 <vTaskDelete+0x18>
 800cf62:	4b39      	ldr	r3, [pc, #228]	; (800d048 <vTaskDelete+0xf8>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	e000      	b.n	800cf6a <vTaskDelete+0x1a>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	3304      	adds	r3, #4
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7ff f946 	bl	800c202 <uxListRemove>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d115      	bne.n	800cfa8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf80:	4932      	ldr	r1, [pc, #200]	; (800d04c <vTaskDelete+0xfc>)
 800cf82:	4613      	mov	r3, r2
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	4413      	add	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	440b      	add	r3, r1
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d10a      	bne.n	800cfa8 <vTaskDelete+0x58>
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf96:	2201      	movs	r2, #1
 800cf98:	fa02 f303 	lsl.w	r3, r2, r3
 800cf9c:	43da      	mvns	r2, r3
 800cf9e:	4b2c      	ldr	r3, [pc, #176]	; (800d050 <vTaskDelete+0x100>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4013      	ands	r3, r2
 800cfa4:	4a2a      	ldr	r2, [pc, #168]	; (800d050 <vTaskDelete+0x100>)
 800cfa6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d004      	beq.n	800cfba <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	3318      	adds	r3, #24
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff f924 	bl	800c202 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800cfba:	4b26      	ldr	r3, [pc, #152]	; (800d054 <vTaskDelete+0x104>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	4a24      	ldr	r2, [pc, #144]	; (800d054 <vTaskDelete+0x104>)
 800cfc2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800cfc4:	4b20      	ldr	r3, [pc, #128]	; (800d048 <vTaskDelete+0xf8>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d10b      	bne.n	800cfe6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4820      	ldr	r0, [pc, #128]	; (800d058 <vTaskDelete+0x108>)
 800cfd6:	f7ff f8b7 	bl	800c148 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800cfda:	4b20      	ldr	r3, [pc, #128]	; (800d05c <vTaskDelete+0x10c>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	4a1e      	ldr	r2, [pc, #120]	; (800d05c <vTaskDelete+0x10c>)
 800cfe2:	6013      	str	r3, [r2, #0]
 800cfe4:	e009      	b.n	800cffa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800cfe6:	4b1e      	ldr	r3, [pc, #120]	; (800d060 <vTaskDelete+0x110>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3b01      	subs	r3, #1
 800cfec:	4a1c      	ldr	r2, [pc, #112]	; (800d060 <vTaskDelete+0x110>)
 800cfee:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f000 fcf3 	bl	800d9dc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800cff6:	f000 fd21 	bl	800da3c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800cffa:	f001 fb93 	bl	800e724 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800cffe:	4b19      	ldr	r3, [pc, #100]	; (800d064 <vTaskDelete+0x114>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d01b      	beq.n	800d03e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800d006:	4b10      	ldr	r3, [pc, #64]	; (800d048 <vTaskDelete+0xf8>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d116      	bne.n	800d03e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d010:	4b15      	ldr	r3, [pc, #84]	; (800d068 <vTaskDelete+0x118>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00a      	beq.n	800d02e <vTaskDelete+0xde>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	60bb      	str	r3, [r7, #8]
}
 800d02a:	bf00      	nop
 800d02c:	e7fe      	b.n	800d02c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800d02e:	4b0f      	ldr	r3, [pc, #60]	; (800d06c <vTaskDelete+0x11c>)
 800d030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d034:	601a      	str	r2, [r3, #0]
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d03e:	bf00      	nop
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20000c2c 	.word	0x20000c2c
 800d04c:	20000c30 	.word	0x20000c30
 800d050:	20000d34 	.word	0x20000d34
 800d054:	20000d48 	.word	0x20000d48
 800d058:	20000d00 	.word	0x20000d00
 800d05c:	20000d14 	.word	0x20000d14
 800d060:	20000d2c 	.word	0x20000d2c
 800d064:	20000d38 	.word	0x20000d38
 800d068:	20000d54 	.word	0x20000d54
 800d06c:	e000ed04 	.word	0xe000ed04

0800d070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d078:	2300      	movs	r3, #0
 800d07a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d017      	beq.n	800d0b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d082:	4b13      	ldr	r3, [pc, #76]	; (800d0d0 <vTaskDelay+0x60>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00a      	beq.n	800d0a0 <vTaskDelay+0x30>
	__asm volatile
 800d08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	60bb      	str	r3, [r7, #8]
}
 800d09c:	bf00      	nop
 800d09e:	e7fe      	b.n	800d09e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d0a0:	f000 f912 	bl	800d2c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 fd8c 	bl	800dbc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d0ac:	f000 f91a 	bl	800d2e4 <xTaskResumeAll>
 800d0b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d107      	bne.n	800d0c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d0b8:	4b06      	ldr	r3, [pc, #24]	; (800d0d4 <vTaskDelay+0x64>)
 800d0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0be:	601a      	str	r2, [r3, #0]
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0c8:	bf00      	nop
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	20000d54 	.word	0x20000d54
 800d0d4:	e000ed04 	.word	0xe000ed04

0800d0d8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d0e0:	f001 faf0 	bl	800e6c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d102      	bne.n	800d0f0 <vTaskSuspend+0x18>
 800d0ea:	4b3c      	ldr	r3, [pc, #240]	; (800d1dc <vTaskSuspend+0x104>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	e000      	b.n	800d0f2 <vTaskSuspend+0x1a>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	3304      	adds	r3, #4
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7ff f882 	bl	800c202 <uxListRemove>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d115      	bne.n	800d130 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d108:	4935      	ldr	r1, [pc, #212]	; (800d1e0 <vTaskSuspend+0x108>)
 800d10a:	4613      	mov	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	4413      	add	r3, r2
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	440b      	add	r3, r1
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10a      	bne.n	800d130 <vTaskSuspend+0x58>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11e:	2201      	movs	r2, #1
 800d120:	fa02 f303 	lsl.w	r3, r2, r3
 800d124:	43da      	mvns	r2, r3
 800d126:	4b2f      	ldr	r3, [pc, #188]	; (800d1e4 <vTaskSuspend+0x10c>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4013      	ands	r3, r2
 800d12c:	4a2d      	ldr	r2, [pc, #180]	; (800d1e4 <vTaskSuspend+0x10c>)
 800d12e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d134:	2b00      	cmp	r3, #0
 800d136:	d004      	beq.n	800d142 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	3318      	adds	r3, #24
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7ff f860 	bl	800c202 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	3304      	adds	r3, #4
 800d146:	4619      	mov	r1, r3
 800d148:	4827      	ldr	r0, [pc, #156]	; (800d1e8 <vTaskSuspend+0x110>)
 800d14a:	f7fe fffd 	bl	800c148 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2b01      	cmp	r3, #1
 800d158:	d103      	bne.n	800d162 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d162:	f001 fadf 	bl	800e724 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d166:	4b21      	ldr	r3, [pc, #132]	; (800d1ec <vTaskSuspend+0x114>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d005      	beq.n	800d17a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d16e:	f001 faa9 	bl	800e6c4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d172:	f000 fc63 	bl	800da3c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d176:	f001 fad5 	bl	800e724 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d17a:	4b18      	ldr	r3, [pc, #96]	; (800d1dc <vTaskSuspend+0x104>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	429a      	cmp	r2, r3
 800d182:	d127      	bne.n	800d1d4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800d184:	4b19      	ldr	r3, [pc, #100]	; (800d1ec <vTaskSuspend+0x114>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d017      	beq.n	800d1bc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d18c:	4b18      	ldr	r3, [pc, #96]	; (800d1f0 <vTaskSuspend+0x118>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00a      	beq.n	800d1aa <vTaskSuspend+0xd2>
	__asm volatile
 800d194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	60bb      	str	r3, [r7, #8]
}
 800d1a6:	bf00      	nop
 800d1a8:	e7fe      	b.n	800d1a8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800d1aa:	4b12      	ldr	r3, [pc, #72]	; (800d1f4 <vTaskSuspend+0x11c>)
 800d1ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b0:	601a      	str	r2, [r3, #0]
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1ba:	e00b      	b.n	800d1d4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800d1bc:	4b0a      	ldr	r3, [pc, #40]	; (800d1e8 <vTaskSuspend+0x110>)
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	4b0d      	ldr	r3, [pc, #52]	; (800d1f8 <vTaskSuspend+0x120>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d103      	bne.n	800d1d0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800d1c8:	4b04      	ldr	r3, [pc, #16]	; (800d1dc <vTaskSuspend+0x104>)
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	601a      	str	r2, [r3, #0]
	}
 800d1ce:	e001      	b.n	800d1d4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800d1d0:	f000 f9ec 	bl	800d5ac <vTaskSwitchContext>
	}
 800d1d4:	bf00      	nop
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20000c2c 	.word	0x20000c2c
 800d1e0:	20000c30 	.word	0x20000c30
 800d1e4:	20000d34 	.word	0x20000d34
 800d1e8:	20000d18 	.word	0x20000d18
 800d1ec:	20000d38 	.word	0x20000d38
 800d1f0:	20000d54 	.word	0x20000d54
 800d1f4:	e000ed04 	.word	0xe000ed04
 800d1f8:	20000d2c 	.word	0x20000d2c

0800d1fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08a      	sub	sp, #40	; 0x28
 800d200:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d202:	2300      	movs	r3, #0
 800d204:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d206:	2300      	movs	r3, #0
 800d208:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d20a:	463a      	mov	r2, r7
 800d20c:	1d39      	adds	r1, r7, #4
 800d20e:	f107 0308 	add.w	r3, r7, #8
 800d212:	4618      	mov	r0, r3
 800d214:	f7f4 faf2 	bl	80017fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	9202      	str	r2, [sp, #8]
 800d220:	9301      	str	r3, [sp, #4]
 800d222:	2300      	movs	r3, #0
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	2300      	movs	r3, #0
 800d228:	460a      	mov	r2, r1
 800d22a:	4921      	ldr	r1, [pc, #132]	; (800d2b0 <vTaskStartScheduler+0xb4>)
 800d22c:	4821      	ldr	r0, [pc, #132]	; (800d2b4 <vTaskStartScheduler+0xb8>)
 800d22e:	f7ff fcfb 	bl	800cc28 <xTaskCreateStatic>
 800d232:	4603      	mov	r3, r0
 800d234:	4a20      	ldr	r2, [pc, #128]	; (800d2b8 <vTaskStartScheduler+0xbc>)
 800d236:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d238:	4b1f      	ldr	r3, [pc, #124]	; (800d2b8 <vTaskStartScheduler+0xbc>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d240:	2301      	movs	r3, #1
 800d242:	617b      	str	r3, [r7, #20]
 800d244:	e001      	b.n	800d24a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d246:	2300      	movs	r3, #0
 800d248:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d102      	bne.n	800d256 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d250:	f000 fd1e 	bl	800dc90 <xTimerCreateTimerTask>
 800d254:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d116      	bne.n	800d28a <vTaskStartScheduler+0x8e>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d260:	f383 8811 	msr	BASEPRI, r3
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	613b      	str	r3, [r7, #16]
}
 800d26e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d270:	4b12      	ldr	r3, [pc, #72]	; (800d2bc <vTaskStartScheduler+0xc0>)
 800d272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d276:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d278:	4b11      	ldr	r3, [pc, #68]	; (800d2c0 <vTaskStartScheduler+0xc4>)
 800d27a:	2201      	movs	r2, #1
 800d27c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d27e:	4b11      	ldr	r3, [pc, #68]	; (800d2c4 <vTaskStartScheduler+0xc8>)
 800d280:	2200      	movs	r2, #0
 800d282:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d284:	f001 f97c 	bl	800e580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d288:	e00e      	b.n	800d2a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d290:	d10a      	bne.n	800d2a8 <vTaskStartScheduler+0xac>
	__asm volatile
 800d292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	60fb      	str	r3, [r7, #12]
}
 800d2a4:	bf00      	nop
 800d2a6:	e7fe      	b.n	800d2a6 <vTaskStartScheduler+0xaa>
}
 800d2a8:	bf00      	nop
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	080123ac 	.word	0x080123ac
 800d2b4:	0800d8d1 	.word	0x0800d8d1
 800d2b8:	20000d50 	.word	0x20000d50
 800d2bc:	20000d4c 	.word	0x20000d4c
 800d2c0:	20000d38 	.word	0x20000d38
 800d2c4:	20000d30 	.word	0x20000d30

0800d2c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d2cc:	4b04      	ldr	r3, [pc, #16]	; (800d2e0 <vTaskSuspendAll+0x18>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	4a03      	ldr	r2, [pc, #12]	; (800d2e0 <vTaskSuspendAll+0x18>)
 800d2d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d2d6:	bf00      	nop
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr
 800d2e0:	20000d54 	.word	0x20000d54

0800d2e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d2f2:	4b41      	ldr	r3, [pc, #260]	; (800d3f8 <xTaskResumeAll+0x114>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d10a      	bne.n	800d310 <xTaskResumeAll+0x2c>
	__asm volatile
 800d2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fe:	f383 8811 	msr	BASEPRI, r3
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	603b      	str	r3, [r7, #0]
}
 800d30c:	bf00      	nop
 800d30e:	e7fe      	b.n	800d30e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d310:	f001 f9d8 	bl	800e6c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d314:	4b38      	ldr	r3, [pc, #224]	; (800d3f8 <xTaskResumeAll+0x114>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3b01      	subs	r3, #1
 800d31a:	4a37      	ldr	r2, [pc, #220]	; (800d3f8 <xTaskResumeAll+0x114>)
 800d31c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d31e:	4b36      	ldr	r3, [pc, #216]	; (800d3f8 <xTaskResumeAll+0x114>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d161      	bne.n	800d3ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d326:	4b35      	ldr	r3, [pc, #212]	; (800d3fc <xTaskResumeAll+0x118>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d05d      	beq.n	800d3ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d32e:	e02e      	b.n	800d38e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d330:	4b33      	ldr	r3, [pc, #204]	; (800d400 <xTaskResumeAll+0x11c>)
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	3318      	adds	r3, #24
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7fe ff60 	bl	800c202 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	3304      	adds	r3, #4
 800d346:	4618      	mov	r0, r3
 800d348:	f7fe ff5b 	bl	800c202 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	2201      	movs	r2, #1
 800d352:	409a      	lsls	r2, r3
 800d354:	4b2b      	ldr	r3, [pc, #172]	; (800d404 <xTaskResumeAll+0x120>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4313      	orrs	r3, r2
 800d35a:	4a2a      	ldr	r2, [pc, #168]	; (800d404 <xTaskResumeAll+0x120>)
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d362:	4613      	mov	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4a27      	ldr	r2, [pc, #156]	; (800d408 <xTaskResumeAll+0x124>)
 800d36c:	441a      	add	r2, r3
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	3304      	adds	r3, #4
 800d372:	4619      	mov	r1, r3
 800d374:	4610      	mov	r0, r2
 800d376:	f7fe fee7 	bl	800c148 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d37e:	4b23      	ldr	r3, [pc, #140]	; (800d40c <xTaskResumeAll+0x128>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d384:	429a      	cmp	r2, r3
 800d386:	d302      	bcc.n	800d38e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d388:	4b21      	ldr	r3, [pc, #132]	; (800d410 <xTaskResumeAll+0x12c>)
 800d38a:	2201      	movs	r2, #1
 800d38c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d38e:	4b1c      	ldr	r3, [pc, #112]	; (800d400 <xTaskResumeAll+0x11c>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1cc      	bne.n	800d330 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d001      	beq.n	800d3a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d39c:	f000 fb4e 	bl	800da3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d3a0:	4b1c      	ldr	r3, [pc, #112]	; (800d414 <xTaskResumeAll+0x130>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d010      	beq.n	800d3ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d3ac:	f000 f846 	bl	800d43c <xTaskIncrementTick>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d002      	beq.n	800d3bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d3b6:	4b16      	ldr	r3, [pc, #88]	; (800d410 <xTaskResumeAll+0x12c>)
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1f1      	bne.n	800d3ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d3c8:	4b12      	ldr	r3, [pc, #72]	; (800d414 <xTaskResumeAll+0x130>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d3ce:	4b10      	ldr	r3, [pc, #64]	; (800d410 <xTaskResumeAll+0x12c>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d009      	beq.n	800d3ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d3da:	4b0f      	ldr	r3, [pc, #60]	; (800d418 <xTaskResumeAll+0x134>)
 800d3dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3ea:	f001 f99b 	bl	800e724 <vPortExitCritical>

	return xAlreadyYielded;
 800d3ee:	68bb      	ldr	r3, [r7, #8]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	20000d54 	.word	0x20000d54
 800d3fc:	20000d2c 	.word	0x20000d2c
 800d400:	20000cec 	.word	0x20000cec
 800d404:	20000d34 	.word	0x20000d34
 800d408:	20000c30 	.word	0x20000c30
 800d40c:	20000c2c 	.word	0x20000c2c
 800d410:	20000d40 	.word	0x20000d40
 800d414:	20000d3c 	.word	0x20000d3c
 800d418:	e000ed04 	.word	0xe000ed04

0800d41c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d422:	4b05      	ldr	r3, [pc, #20]	; (800d438 <xTaskGetTickCount+0x1c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d428:	687b      	ldr	r3, [r7, #4]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	370c      	adds	r7, #12
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	20000d30 	.word	0x20000d30

0800d43c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b086      	sub	sp, #24
 800d440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d442:	2300      	movs	r3, #0
 800d444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d446:	4b4e      	ldr	r3, [pc, #312]	; (800d580 <xTaskIncrementTick+0x144>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f040 808e 	bne.w	800d56c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d450:	4b4c      	ldr	r3, [pc, #304]	; (800d584 <xTaskIncrementTick+0x148>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	3301      	adds	r3, #1
 800d456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d458:	4a4a      	ldr	r2, [pc, #296]	; (800d584 <xTaskIncrementTick+0x148>)
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d120      	bne.n	800d4a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d464:	4b48      	ldr	r3, [pc, #288]	; (800d588 <xTaskIncrementTick+0x14c>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00a      	beq.n	800d484 <xTaskIncrementTick+0x48>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	603b      	str	r3, [r7, #0]
}
 800d480:	bf00      	nop
 800d482:	e7fe      	b.n	800d482 <xTaskIncrementTick+0x46>
 800d484:	4b40      	ldr	r3, [pc, #256]	; (800d588 <xTaskIncrementTick+0x14c>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	60fb      	str	r3, [r7, #12]
 800d48a:	4b40      	ldr	r3, [pc, #256]	; (800d58c <xTaskIncrementTick+0x150>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a3e      	ldr	r2, [pc, #248]	; (800d588 <xTaskIncrementTick+0x14c>)
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	4a3e      	ldr	r2, [pc, #248]	; (800d58c <xTaskIncrementTick+0x150>)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6013      	str	r3, [r2, #0]
 800d498:	4b3d      	ldr	r3, [pc, #244]	; (800d590 <xTaskIncrementTick+0x154>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3301      	adds	r3, #1
 800d49e:	4a3c      	ldr	r2, [pc, #240]	; (800d590 <xTaskIncrementTick+0x154>)
 800d4a0:	6013      	str	r3, [r2, #0]
 800d4a2:	f000 facb 	bl	800da3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d4a6:	4b3b      	ldr	r3, [pc, #236]	; (800d594 <xTaskIncrementTick+0x158>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	693a      	ldr	r2, [r7, #16]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d348      	bcc.n	800d542 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4b0:	4b35      	ldr	r3, [pc, #212]	; (800d588 <xTaskIncrementTick+0x14c>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d104      	bne.n	800d4c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ba:	4b36      	ldr	r3, [pc, #216]	; (800d594 <xTaskIncrementTick+0x158>)
 800d4bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4c0:	601a      	str	r2, [r3, #0]
					break;
 800d4c2:	e03e      	b.n	800d542 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4c4:	4b30      	ldr	r3, [pc, #192]	; (800d588 <xTaskIncrementTick+0x14c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d203      	bcs.n	800d4e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d4dc:	4a2d      	ldr	r2, [pc, #180]	; (800d594 <xTaskIncrementTick+0x158>)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d4e2:	e02e      	b.n	800d542 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7fe fe8a 	bl	800c202 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d004      	beq.n	800d500 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	3318      	adds	r3, #24
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fe fe81 	bl	800c202 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d504:	2201      	movs	r2, #1
 800d506:	409a      	lsls	r2, r3
 800d508:	4b23      	ldr	r3, [pc, #140]	; (800d598 <xTaskIncrementTick+0x15c>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4313      	orrs	r3, r2
 800d50e:	4a22      	ldr	r2, [pc, #136]	; (800d598 <xTaskIncrementTick+0x15c>)
 800d510:	6013      	str	r3, [r2, #0]
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d516:	4613      	mov	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4413      	add	r3, r2
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	4a1f      	ldr	r2, [pc, #124]	; (800d59c <xTaskIncrementTick+0x160>)
 800d520:	441a      	add	r2, r3
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	3304      	adds	r3, #4
 800d526:	4619      	mov	r1, r3
 800d528:	4610      	mov	r0, r2
 800d52a:	f7fe fe0d 	bl	800c148 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d532:	4b1b      	ldr	r3, [pc, #108]	; (800d5a0 <xTaskIncrementTick+0x164>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d538:	429a      	cmp	r2, r3
 800d53a:	d3b9      	bcc.n	800d4b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d53c:	2301      	movs	r3, #1
 800d53e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d540:	e7b6      	b.n	800d4b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d542:	4b17      	ldr	r3, [pc, #92]	; (800d5a0 <xTaskIncrementTick+0x164>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d548:	4914      	ldr	r1, [pc, #80]	; (800d59c <xTaskIncrementTick+0x160>)
 800d54a:	4613      	mov	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4413      	add	r3, r2
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	440b      	add	r3, r1
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d901      	bls.n	800d55e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d55a:	2301      	movs	r3, #1
 800d55c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d55e:	4b11      	ldr	r3, [pc, #68]	; (800d5a4 <xTaskIncrementTick+0x168>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d007      	beq.n	800d576 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d566:	2301      	movs	r3, #1
 800d568:	617b      	str	r3, [r7, #20]
 800d56a:	e004      	b.n	800d576 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d56c:	4b0e      	ldr	r3, [pc, #56]	; (800d5a8 <xTaskIncrementTick+0x16c>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	3301      	adds	r3, #1
 800d572:	4a0d      	ldr	r2, [pc, #52]	; (800d5a8 <xTaskIncrementTick+0x16c>)
 800d574:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d576:	697b      	ldr	r3, [r7, #20]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3718      	adds	r7, #24
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	20000d54 	.word	0x20000d54
 800d584:	20000d30 	.word	0x20000d30
 800d588:	20000ce4 	.word	0x20000ce4
 800d58c:	20000ce8 	.word	0x20000ce8
 800d590:	20000d44 	.word	0x20000d44
 800d594:	20000d4c 	.word	0x20000d4c
 800d598:	20000d34 	.word	0x20000d34
 800d59c:	20000c30 	.word	0x20000c30
 800d5a0:	20000c2c 	.word	0x20000c2c
 800d5a4:	20000d40 	.word	0x20000d40
 800d5a8:	20000d3c 	.word	0x20000d3c

0800d5ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b087      	sub	sp, #28
 800d5b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d5b2:	4b27      	ldr	r3, [pc, #156]	; (800d650 <vTaskSwitchContext+0xa4>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d003      	beq.n	800d5c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d5ba:	4b26      	ldr	r3, [pc, #152]	; (800d654 <vTaskSwitchContext+0xa8>)
 800d5bc:	2201      	movs	r2, #1
 800d5be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d5c0:	e03f      	b.n	800d642 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d5c2:	4b24      	ldr	r3, [pc, #144]	; (800d654 <vTaskSwitchContext+0xa8>)
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5c8:	4b23      	ldr	r3, [pc, #140]	; (800d658 <vTaskSwitchContext+0xac>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	fab3 f383 	clz	r3, r3
 800d5d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d5d6:	7afb      	ldrb	r3, [r7, #11]
 800d5d8:	f1c3 031f 	rsb	r3, r3, #31
 800d5dc:	617b      	str	r3, [r7, #20]
 800d5de:	491f      	ldr	r1, [pc, #124]	; (800d65c <vTaskSwitchContext+0xb0>)
 800d5e0:	697a      	ldr	r2, [r7, #20]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	4413      	add	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	440b      	add	r3, r1
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d10a      	bne.n	800d608 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f6:	f383 8811 	msr	BASEPRI, r3
 800d5fa:	f3bf 8f6f 	isb	sy
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	607b      	str	r3, [r7, #4]
}
 800d604:	bf00      	nop
 800d606:	e7fe      	b.n	800d606 <vTaskSwitchContext+0x5a>
 800d608:	697a      	ldr	r2, [r7, #20]
 800d60a:	4613      	mov	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	4413      	add	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	4a12      	ldr	r2, [pc, #72]	; (800d65c <vTaskSwitchContext+0xb0>)
 800d614:	4413      	add	r3, r2
 800d616:	613b      	str	r3, [r7, #16]
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	685a      	ldr	r2, [r3, #4]
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	605a      	str	r2, [r3, #4]
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	685a      	ldr	r2, [r3, #4]
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	3308      	adds	r3, #8
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d104      	bne.n	800d638 <vTaskSwitchContext+0x8c>
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	685a      	ldr	r2, [r3, #4]
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	605a      	str	r2, [r3, #4]
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	4a08      	ldr	r2, [pc, #32]	; (800d660 <vTaskSwitchContext+0xb4>)
 800d640:	6013      	str	r3, [r2, #0]
}
 800d642:	bf00      	nop
 800d644:	371c      	adds	r7, #28
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop
 800d650:	20000d54 	.word	0x20000d54
 800d654:	20000d40 	.word	0x20000d40
 800d658:	20000d34 	.word	0x20000d34
 800d65c:	20000c30 	.word	0x20000c30
 800d660:	20000c2c 	.word	0x20000c2c

0800d664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10a      	bne.n	800d68a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	60fb      	str	r3, [r7, #12]
}
 800d686:	bf00      	nop
 800d688:	e7fe      	b.n	800d688 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d68a:	4b07      	ldr	r3, [pc, #28]	; (800d6a8 <vTaskPlaceOnEventList+0x44>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	3318      	adds	r3, #24
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7fe fd7c 	bl	800c190 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d698:	2101      	movs	r1, #1
 800d69a:	6838      	ldr	r0, [r7, #0]
 800d69c:	f000 fa92 	bl	800dbc4 <prvAddCurrentTaskToDelayedList>
}
 800d6a0:	bf00      	nop
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	20000c2c 	.word	0x20000c2c

0800d6ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10a      	bne.n	800d6d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	617b      	str	r3, [r7, #20]
}
 800d6d0:	bf00      	nop
 800d6d2:	e7fe      	b.n	800d6d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6d4:	4b0a      	ldr	r3, [pc, #40]	; (800d700 <vTaskPlaceOnEventListRestricted+0x54>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	3318      	adds	r3, #24
 800d6da:	4619      	mov	r1, r3
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f7fe fd33 	bl	800c148 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d002      	beq.n	800d6ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d6e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d6ee:	6879      	ldr	r1, [r7, #4]
 800d6f0:	68b8      	ldr	r0, [r7, #8]
 800d6f2:	f000 fa67 	bl	800dbc4 <prvAddCurrentTaskToDelayedList>
	}
 800d6f6:	bf00      	nop
 800d6f8:	3718      	adds	r7, #24
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	20000c2c 	.word	0x20000c2c

0800d704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10a      	bne.n	800d730 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	60fb      	str	r3, [r7, #12]
}
 800d72c:	bf00      	nop
 800d72e:	e7fe      	b.n	800d72e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	3318      	adds	r3, #24
 800d734:	4618      	mov	r0, r3
 800d736:	f7fe fd64 	bl	800c202 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d73a:	4b1d      	ldr	r3, [pc, #116]	; (800d7b0 <xTaskRemoveFromEventList+0xac>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d11c      	bne.n	800d77c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	3304      	adds	r3, #4
 800d746:	4618      	mov	r0, r3
 800d748:	f7fe fd5b 	bl	800c202 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d750:	2201      	movs	r2, #1
 800d752:	409a      	lsls	r2, r3
 800d754:	4b17      	ldr	r3, [pc, #92]	; (800d7b4 <xTaskRemoveFromEventList+0xb0>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4313      	orrs	r3, r2
 800d75a:	4a16      	ldr	r2, [pc, #88]	; (800d7b4 <xTaskRemoveFromEventList+0xb0>)
 800d75c:	6013      	str	r3, [r2, #0]
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d762:	4613      	mov	r3, r2
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	4413      	add	r3, r2
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	4a13      	ldr	r2, [pc, #76]	; (800d7b8 <xTaskRemoveFromEventList+0xb4>)
 800d76c:	441a      	add	r2, r3
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	3304      	adds	r3, #4
 800d772:	4619      	mov	r1, r3
 800d774:	4610      	mov	r0, r2
 800d776:	f7fe fce7 	bl	800c148 <vListInsertEnd>
 800d77a:	e005      	b.n	800d788 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	3318      	adds	r3, #24
 800d780:	4619      	mov	r1, r3
 800d782:	480e      	ldr	r0, [pc, #56]	; (800d7bc <xTaskRemoveFromEventList+0xb8>)
 800d784:	f7fe fce0 	bl	800c148 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d78c:	4b0c      	ldr	r3, [pc, #48]	; (800d7c0 <xTaskRemoveFromEventList+0xbc>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d792:	429a      	cmp	r2, r3
 800d794:	d905      	bls.n	800d7a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d796:	2301      	movs	r3, #1
 800d798:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d79a:	4b0a      	ldr	r3, [pc, #40]	; (800d7c4 <xTaskRemoveFromEventList+0xc0>)
 800d79c:	2201      	movs	r2, #1
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	e001      	b.n	800d7a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d7a6:	697b      	ldr	r3, [r7, #20]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	20000d54 	.word	0x20000d54
 800d7b4:	20000d34 	.word	0x20000d34
 800d7b8:	20000c30 	.word	0x20000c30
 800d7bc:	20000cec 	.word	0x20000cec
 800d7c0:	20000c2c 	.word	0x20000c2c
 800d7c4:	20000d40 	.word	0x20000d40

0800d7c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d7d0:	4b06      	ldr	r3, [pc, #24]	; (800d7ec <vTaskInternalSetTimeOutState+0x24>)
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7d8:	4b05      	ldr	r3, [pc, #20]	; (800d7f0 <vTaskInternalSetTimeOutState+0x28>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	605a      	str	r2, [r3, #4]
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	20000d44 	.word	0x20000d44
 800d7f0:	20000d30 	.word	0x20000d30

0800d7f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b088      	sub	sp, #32
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d10a      	bne.n	800d81a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d808:	f383 8811 	msr	BASEPRI, r3
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	613b      	str	r3, [r7, #16]
}
 800d816:	bf00      	nop
 800d818:	e7fe      	b.n	800d818 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10a      	bne.n	800d836 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	60fb      	str	r3, [r7, #12]
}
 800d832:	bf00      	nop
 800d834:	e7fe      	b.n	800d834 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d836:	f000 ff45 	bl	800e6c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d83a:	4b1d      	ldr	r3, [pc, #116]	; (800d8b0 <xTaskCheckForTimeOut+0xbc>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	69ba      	ldr	r2, [r7, #24]
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d852:	d102      	bne.n	800d85a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d854:	2300      	movs	r3, #0
 800d856:	61fb      	str	r3, [r7, #28]
 800d858:	e023      	b.n	800d8a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	4b15      	ldr	r3, [pc, #84]	; (800d8b4 <xTaskCheckForTimeOut+0xc0>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	429a      	cmp	r2, r3
 800d864:	d007      	beq.n	800d876 <xTaskCheckForTimeOut+0x82>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	69ba      	ldr	r2, [r7, #24]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d302      	bcc.n	800d876 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d870:	2301      	movs	r3, #1
 800d872:	61fb      	str	r3, [r7, #28]
 800d874:	e015      	b.n	800d8a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	697a      	ldr	r2, [r7, #20]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d20b      	bcs.n	800d898 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	1ad2      	subs	r2, r2, r3
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7ff ff9b 	bl	800d7c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d892:	2300      	movs	r3, #0
 800d894:	61fb      	str	r3, [r7, #28]
 800d896:	e004      	b.n	800d8a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	2200      	movs	r2, #0
 800d89c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d8a2:	f000 ff3f 	bl	800e724 <vPortExitCritical>

	return xReturn;
 800d8a6:	69fb      	ldr	r3, [r7, #28]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3720      	adds	r7, #32
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20000d30 	.word	0x20000d30
 800d8b4:	20000d44 	.word	0x20000d44

0800d8b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d8bc:	4b03      	ldr	r3, [pc, #12]	; (800d8cc <vTaskMissedYield+0x14>)
 800d8be:	2201      	movs	r2, #1
 800d8c0:	601a      	str	r2, [r3, #0]
}
 800d8c2:	bf00      	nop
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	20000d40 	.word	0x20000d40

0800d8d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8d8:	f000 f852 	bl	800d980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8dc:	4b06      	ldr	r3, [pc, #24]	; (800d8f8 <prvIdleTask+0x28>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d9f9      	bls.n	800d8d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d8e4:	4b05      	ldr	r3, [pc, #20]	; (800d8fc <prvIdleTask+0x2c>)
 800d8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d8f4:	e7f0      	b.n	800d8d8 <prvIdleTask+0x8>
 800d8f6:	bf00      	nop
 800d8f8:	20000c30 	.word	0x20000c30
 800d8fc:	e000ed04 	.word	0xe000ed04

0800d900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d906:	2300      	movs	r3, #0
 800d908:	607b      	str	r3, [r7, #4]
 800d90a:	e00c      	b.n	800d926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	4613      	mov	r3, r2
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	4413      	add	r3, r2
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4a12      	ldr	r2, [pc, #72]	; (800d960 <prvInitialiseTaskLists+0x60>)
 800d918:	4413      	add	r3, r2
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fe fbe7 	bl	800c0ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	3301      	adds	r3, #1
 800d924:	607b      	str	r3, [r7, #4]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b06      	cmp	r3, #6
 800d92a:	d9ef      	bls.n	800d90c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d92c:	480d      	ldr	r0, [pc, #52]	; (800d964 <prvInitialiseTaskLists+0x64>)
 800d92e:	f7fe fbde 	bl	800c0ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d932:	480d      	ldr	r0, [pc, #52]	; (800d968 <prvInitialiseTaskLists+0x68>)
 800d934:	f7fe fbdb 	bl	800c0ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d938:	480c      	ldr	r0, [pc, #48]	; (800d96c <prvInitialiseTaskLists+0x6c>)
 800d93a:	f7fe fbd8 	bl	800c0ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d93e:	480c      	ldr	r0, [pc, #48]	; (800d970 <prvInitialiseTaskLists+0x70>)
 800d940:	f7fe fbd5 	bl	800c0ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d944:	480b      	ldr	r0, [pc, #44]	; (800d974 <prvInitialiseTaskLists+0x74>)
 800d946:	f7fe fbd2 	bl	800c0ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d94a:	4b0b      	ldr	r3, [pc, #44]	; (800d978 <prvInitialiseTaskLists+0x78>)
 800d94c:	4a05      	ldr	r2, [pc, #20]	; (800d964 <prvInitialiseTaskLists+0x64>)
 800d94e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d950:	4b0a      	ldr	r3, [pc, #40]	; (800d97c <prvInitialiseTaskLists+0x7c>)
 800d952:	4a05      	ldr	r2, [pc, #20]	; (800d968 <prvInitialiseTaskLists+0x68>)
 800d954:	601a      	str	r2, [r3, #0]
}
 800d956:	bf00      	nop
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20000c30 	.word	0x20000c30
 800d964:	20000cbc 	.word	0x20000cbc
 800d968:	20000cd0 	.word	0x20000cd0
 800d96c:	20000cec 	.word	0x20000cec
 800d970:	20000d00 	.word	0x20000d00
 800d974:	20000d18 	.word	0x20000d18
 800d978:	20000ce4 	.word	0x20000ce4
 800d97c:	20000ce8 	.word	0x20000ce8

0800d980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d986:	e019      	b.n	800d9bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d988:	f000 fe9c 	bl	800e6c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d98c:	4b10      	ldr	r3, [pc, #64]	; (800d9d0 <prvCheckTasksWaitingTermination+0x50>)
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	3304      	adds	r3, #4
 800d998:	4618      	mov	r0, r3
 800d99a:	f7fe fc32 	bl	800c202 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d99e:	4b0d      	ldr	r3, [pc, #52]	; (800d9d4 <prvCheckTasksWaitingTermination+0x54>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	4a0b      	ldr	r2, [pc, #44]	; (800d9d4 <prvCheckTasksWaitingTermination+0x54>)
 800d9a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d9a8:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <prvCheckTasksWaitingTermination+0x58>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	4a0a      	ldr	r2, [pc, #40]	; (800d9d8 <prvCheckTasksWaitingTermination+0x58>)
 800d9b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d9b2:	f000 feb7 	bl	800e724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 f810 	bl	800d9dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9bc:	4b06      	ldr	r3, [pc, #24]	; (800d9d8 <prvCheckTasksWaitingTermination+0x58>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d1e1      	bne.n	800d988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d9c4:	bf00      	nop
 800d9c6:	bf00      	nop
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	20000d00 	.word	0x20000d00
 800d9d4:	20000d2c 	.word	0x20000d2c
 800d9d8:	20000d14 	.word	0x20000d14

0800d9dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d108      	bne.n	800da00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 ff9a 	bl	800e92c <vPortFree>
				vPortFree( pxTCB );
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 ff97 	bl	800e92c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9fe:	e018      	b.n	800da32 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800da06:	2b01      	cmp	r3, #1
 800da08:	d103      	bne.n	800da12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 ff8e 	bl	800e92c <vPortFree>
	}
 800da10:	e00f      	b.n	800da32 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800da18:	2b02      	cmp	r3, #2
 800da1a:	d00a      	beq.n	800da32 <prvDeleteTCB+0x56>
	__asm volatile
 800da1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da20:	f383 8811 	msr	BASEPRI, r3
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	60fb      	str	r3, [r7, #12]
}
 800da2e:	bf00      	nop
 800da30:	e7fe      	b.n	800da30 <prvDeleteTCB+0x54>
	}
 800da32:	bf00      	nop
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
	...

0800da3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da42:	4b0c      	ldr	r3, [pc, #48]	; (800da74 <prvResetNextTaskUnblockTime+0x38>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d104      	bne.n	800da56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da4c:	4b0a      	ldr	r3, [pc, #40]	; (800da78 <prvResetNextTaskUnblockTime+0x3c>)
 800da4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da54:	e008      	b.n	800da68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da56:	4b07      	ldr	r3, [pc, #28]	; (800da74 <prvResetNextTaskUnblockTime+0x38>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	4a04      	ldr	r2, [pc, #16]	; (800da78 <prvResetNextTaskUnblockTime+0x3c>)
 800da66:	6013      	str	r3, [r2, #0]
}
 800da68:	bf00      	nop
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	20000ce4 	.word	0x20000ce4
 800da78:	20000d4c 	.word	0x20000d4c

0800da7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da82:	4b0b      	ldr	r3, [pc, #44]	; (800dab0 <xTaskGetSchedulerState+0x34>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d102      	bne.n	800da90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da8a:	2301      	movs	r3, #1
 800da8c:	607b      	str	r3, [r7, #4]
 800da8e:	e008      	b.n	800daa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da90:	4b08      	ldr	r3, [pc, #32]	; (800dab4 <xTaskGetSchedulerState+0x38>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d102      	bne.n	800da9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800da98:	2302      	movs	r3, #2
 800da9a:	607b      	str	r3, [r7, #4]
 800da9c:	e001      	b.n	800daa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800da9e:	2300      	movs	r3, #0
 800daa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800daa2:	687b      	ldr	r3, [r7, #4]
	}
 800daa4:	4618      	mov	r0, r3
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr
 800dab0:	20000d38 	.word	0x20000d38
 800dab4:	20000d54 	.word	0x20000d54

0800dab8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dac4:	2300      	movs	r3, #0
 800dac6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d06e      	beq.n	800dbac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dace:	4b3a      	ldr	r3, [pc, #232]	; (800dbb8 <xTaskPriorityDisinherit+0x100>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	693a      	ldr	r2, [r7, #16]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d00a      	beq.n	800daee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dadc:	f383 8811 	msr	BASEPRI, r3
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	60fb      	str	r3, [r7, #12]
}
 800daea:	bf00      	nop
 800daec:	e7fe      	b.n	800daec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d10a      	bne.n	800db0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800daf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	60bb      	str	r3, [r7, #8]
}
 800db08:	bf00      	nop
 800db0a:	e7fe      	b.n	800db0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db10:	1e5a      	subs	r2, r3, #1
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db1e:	429a      	cmp	r2, r3
 800db20:	d044      	beq.n	800dbac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db26:	2b00      	cmp	r3, #0
 800db28:	d140      	bne.n	800dbac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	3304      	adds	r3, #4
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fe fb67 	bl	800c202 <uxListRemove>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d115      	bne.n	800db66 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3e:	491f      	ldr	r1, [pc, #124]	; (800dbbc <xTaskPriorityDisinherit+0x104>)
 800db40:	4613      	mov	r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4413      	add	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	440b      	add	r3, r1
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d10a      	bne.n	800db66 <xTaskPriorityDisinherit+0xae>
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db54:	2201      	movs	r2, #1
 800db56:	fa02 f303 	lsl.w	r3, r2, r3
 800db5a:	43da      	mvns	r2, r3
 800db5c:	4b18      	ldr	r3, [pc, #96]	; (800dbc0 <xTaskPriorityDisinherit+0x108>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4013      	ands	r3, r2
 800db62:	4a17      	ldr	r2, [pc, #92]	; (800dbc0 <xTaskPriorityDisinherit+0x108>)
 800db64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db72:	f1c3 0207 	rsb	r2, r3, #7
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db7e:	2201      	movs	r2, #1
 800db80:	409a      	lsls	r2, r3
 800db82:	4b0f      	ldr	r3, [pc, #60]	; (800dbc0 <xTaskPriorityDisinherit+0x108>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4313      	orrs	r3, r2
 800db88:	4a0d      	ldr	r2, [pc, #52]	; (800dbc0 <xTaskPriorityDisinherit+0x108>)
 800db8a:	6013      	str	r3, [r2, #0]
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db90:	4613      	mov	r3, r2
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	4413      	add	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	4a08      	ldr	r2, [pc, #32]	; (800dbbc <xTaskPriorityDisinherit+0x104>)
 800db9a:	441a      	add	r2, r3
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	3304      	adds	r3, #4
 800dba0:	4619      	mov	r1, r3
 800dba2:	4610      	mov	r0, r2
 800dba4:	f7fe fad0 	bl	800c148 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbac:	697b      	ldr	r3, [r7, #20]
	}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3718      	adds	r7, #24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20000c2c 	.word	0x20000c2c
 800dbbc:	20000c30 	.word	0x20000c30
 800dbc0:	20000d34 	.word	0x20000d34

0800dbc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbce:	4b29      	ldr	r3, [pc, #164]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbd4:	4b28      	ldr	r3, [pc, #160]	; (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fe fb11 	bl	800c202 <uxListRemove>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d10b      	bne.n	800dbfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dbe6:	4b24      	ldr	r3, [pc, #144]	; (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbec:	2201      	movs	r2, #1
 800dbee:	fa02 f303 	lsl.w	r3, r2, r3
 800dbf2:	43da      	mvns	r2, r3
 800dbf4:	4b21      	ldr	r3, [pc, #132]	; (800dc7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	4a20      	ldr	r2, [pc, #128]	; (800dc7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc04:	d10a      	bne.n	800dc1c <prvAddCurrentTaskToDelayedList+0x58>
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d007      	beq.n	800dc1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc0c:	4b1a      	ldr	r3, [pc, #104]	; (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	3304      	adds	r3, #4
 800dc12:	4619      	mov	r1, r3
 800dc14:	481a      	ldr	r0, [pc, #104]	; (800dc80 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dc16:	f7fe fa97 	bl	800c148 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc1a:	e026      	b.n	800dc6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4413      	add	r3, r2
 800dc22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc24:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d209      	bcs.n	800dc48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc34:	4b13      	ldr	r3, [pc, #76]	; (800dc84 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	4b0f      	ldr	r3, [pc, #60]	; (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	4619      	mov	r1, r3
 800dc40:	4610      	mov	r0, r2
 800dc42:	f7fe faa5 	bl	800c190 <vListInsert>
}
 800dc46:	e010      	b.n	800dc6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc48:	4b0f      	ldr	r3, [pc, #60]	; (800dc88 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	4b0a      	ldr	r3, [pc, #40]	; (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	3304      	adds	r3, #4
 800dc52:	4619      	mov	r1, r3
 800dc54:	4610      	mov	r0, r2
 800dc56:	f7fe fa9b 	bl	800c190 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc5a:	4b0c      	ldr	r3, [pc, #48]	; (800dc8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d202      	bcs.n	800dc6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dc64:	4a09      	ldr	r2, [pc, #36]	; (800dc8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	6013      	str	r3, [r2, #0]
}
 800dc6a:	bf00      	nop
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	20000d30 	.word	0x20000d30
 800dc78:	20000c2c 	.word	0x20000c2c
 800dc7c:	20000d34 	.word	0x20000d34
 800dc80:	20000d18 	.word	0x20000d18
 800dc84:	20000ce8 	.word	0x20000ce8
 800dc88:	20000ce4 	.word	0x20000ce4
 800dc8c:	20000d4c 	.word	0x20000d4c

0800dc90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08a      	sub	sp, #40	; 0x28
 800dc94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc96:	2300      	movs	r3, #0
 800dc98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc9a:	f000 fb63 	bl	800e364 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc9e:	4b1c      	ldr	r3, [pc, #112]	; (800dd10 <xTimerCreateTimerTask+0x80>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d021      	beq.n	800dcea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dca6:	2300      	movs	r3, #0
 800dca8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dcae:	1d3a      	adds	r2, r7, #4
 800dcb0:	f107 0108 	add.w	r1, r7, #8
 800dcb4:	f107 030c 	add.w	r3, r7, #12
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7f3 fdb9 	bl	8001830 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dcbe:	6879      	ldr	r1, [r7, #4]
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	9202      	str	r2, [sp, #8]
 800dcc6:	9301      	str	r3, [sp, #4]
 800dcc8:	2302      	movs	r3, #2
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	2300      	movs	r3, #0
 800dcce:	460a      	mov	r2, r1
 800dcd0:	4910      	ldr	r1, [pc, #64]	; (800dd14 <xTimerCreateTimerTask+0x84>)
 800dcd2:	4811      	ldr	r0, [pc, #68]	; (800dd18 <xTimerCreateTimerTask+0x88>)
 800dcd4:	f7fe ffa8 	bl	800cc28 <xTaskCreateStatic>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	4a10      	ldr	r2, [pc, #64]	; (800dd1c <xTimerCreateTimerTask+0x8c>)
 800dcdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dcde:	4b0f      	ldr	r3, [pc, #60]	; (800dd1c <xTimerCreateTimerTask+0x8c>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d001      	beq.n	800dcea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dce6:	2301      	movs	r3, #1
 800dce8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d10a      	bne.n	800dd06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	613b      	str	r3, [r7, #16]
}
 800dd02:	bf00      	nop
 800dd04:	e7fe      	b.n	800dd04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dd06:	697b      	ldr	r3, [r7, #20]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	20000d88 	.word	0x20000d88
 800dd14:	080123b4 	.word	0x080123b4
 800dd18:	0800df45 	.word	0x0800df45
 800dd1c:	20000d8c 	.word	0x20000d8c

0800dd20 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b088      	sub	sp, #32
 800dd24:	af02      	add	r7, sp, #8
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dd2e:	2028      	movs	r0, #40	; 0x28
 800dd30:	f000 fdea 	bl	800e908 <pvPortMalloc>
 800dd34:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00d      	beq.n	800dd58 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	9301      	str	r3, [sp, #4]
 800dd48:	6a3b      	ldr	r3, [r7, #32]
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	68b9      	ldr	r1, [r7, #8]
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f000 f805 	bl	800dd62 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800dd58:	697b      	ldr	r3, [r7, #20]
	}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3718      	adds	r7, #24
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b086      	sub	sp, #24
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	60f8      	str	r0, [r7, #12]
 800dd6a:	60b9      	str	r1, [r7, #8]
 800dd6c:	607a      	str	r2, [r7, #4]
 800dd6e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10a      	bne.n	800dd8c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800dd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7a:	f383 8811 	msr	BASEPRI, r3
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	617b      	str	r3, [r7, #20]
}
 800dd88:	bf00      	nop
 800dd8a:	e7fe      	b.n	800dd8a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d01e      	beq.n	800ddd0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dd92:	f000 fae7 	bl	800e364 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda4:	683a      	ldr	r2, [r7, #0]
 800dda6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	6a3a      	ldr	r2, [r7, #32]
 800ddac:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ddae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe f9bb 	bl	800c12e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d008      	beq.n	800ddd0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ddbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ddc4:	f043 0304 	orr.w	r3, r3, #4
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ddd0:	bf00      	nop
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08a      	sub	sp, #40	; 0x28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
 800dde4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dde6:	2300      	movs	r3, #0
 800dde8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d10a      	bne.n	800de06 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	623b      	str	r3, [r7, #32]
}
 800de02:	bf00      	nop
 800de04:	e7fe      	b.n	800de04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800de06:	4b1a      	ldr	r3, [pc, #104]	; (800de70 <xTimerGenericCommand+0x98>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d02a      	beq.n	800de64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	2b05      	cmp	r3, #5
 800de1e:	dc18      	bgt.n	800de52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de20:	f7ff fe2c 	bl	800da7c <xTaskGetSchedulerState>
 800de24:	4603      	mov	r3, r0
 800de26:	2b02      	cmp	r3, #2
 800de28:	d109      	bne.n	800de3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800de2a:	4b11      	ldr	r3, [pc, #68]	; (800de70 <xTimerGenericCommand+0x98>)
 800de2c:	6818      	ldr	r0, [r3, #0]
 800de2e:	f107 0114 	add.w	r1, r7, #20
 800de32:	2300      	movs	r3, #0
 800de34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de36:	f7fe fb0f 	bl	800c458 <xQueueGenericSend>
 800de3a:	6278      	str	r0, [r7, #36]	; 0x24
 800de3c:	e012      	b.n	800de64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de3e:	4b0c      	ldr	r3, [pc, #48]	; (800de70 <xTimerGenericCommand+0x98>)
 800de40:	6818      	ldr	r0, [r3, #0]
 800de42:	f107 0114 	add.w	r1, r7, #20
 800de46:	2300      	movs	r3, #0
 800de48:	2200      	movs	r2, #0
 800de4a:	f7fe fb05 	bl	800c458 <xQueueGenericSend>
 800de4e:	6278      	str	r0, [r7, #36]	; 0x24
 800de50:	e008      	b.n	800de64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800de52:	4b07      	ldr	r3, [pc, #28]	; (800de70 <xTimerGenericCommand+0x98>)
 800de54:	6818      	ldr	r0, [r3, #0]
 800de56:	f107 0114 	add.w	r1, r7, #20
 800de5a:	2300      	movs	r3, #0
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	f7fe fbf9 	bl	800c654 <xQueueGenericSendFromISR>
 800de62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de66:	4618      	mov	r0, r3
 800de68:	3728      	adds	r7, #40	; 0x28
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	20000d88 	.word	0x20000d88

0800de74 <xTimerGetPeriod>:
	return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d10a      	bne.n	800de9c <xTimerGetPeriod+0x28>
	__asm volatile
 800de86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8a:	f383 8811 	msr	BASEPRI, r3
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	60bb      	str	r3, [r7, #8]
}
 800de98:	bf00      	nop
 800de9a:	e7fe      	b.n	800de9a <xTimerGetPeriod+0x26>
	return pxTimer->xTimerPeriodInTicks;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	699b      	ldr	r3, [r3, #24]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b088      	sub	sp, #32
 800deb0:	af02      	add	r7, sp, #8
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deb6:	4b22      	ldr	r3, [pc, #136]	; (800df40 <prvProcessExpiredTimer+0x94>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	3304      	adds	r3, #4
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7fe f99c 	bl	800c202 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ded0:	f003 0304 	and.w	r3, r3, #4
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d022      	beq.n	800df1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	699a      	ldr	r2, [r3, #24]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	18d1      	adds	r1, r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	683a      	ldr	r2, [r7, #0]
 800dee4:	6978      	ldr	r0, [r7, #20]
 800dee6:	f000 f8d1 	bl	800e08c <prvInsertTimerInActiveList>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d01f      	beq.n	800df30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800def0:	2300      	movs	r3, #0
 800def2:	9300      	str	r3, [sp, #0]
 800def4:	2300      	movs	r3, #0
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	2100      	movs	r1, #0
 800defa:	6978      	ldr	r0, [r7, #20]
 800defc:	f7ff ff6c 	bl	800ddd8 <xTimerGenericCommand>
 800df00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d113      	bne.n	800df30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800df08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	60fb      	str	r3, [r7, #12]
}
 800df1a:	bf00      	nop
 800df1c:	e7fe      	b.n	800df1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df24:	f023 0301 	bic.w	r3, r3, #1
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	6a1b      	ldr	r3, [r3, #32]
 800df34:	6978      	ldr	r0, [r7, #20]
 800df36:	4798      	blx	r3
}
 800df38:	bf00      	nop
 800df3a:	3718      	adds	r7, #24
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	20000d80 	.word	0x20000d80

0800df44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df4c:	f107 0308 	add.w	r3, r7, #8
 800df50:	4618      	mov	r0, r3
 800df52:	f000 f857 	bl	800e004 <prvGetNextExpireTime>
 800df56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	4619      	mov	r1, r3
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f000 f803 	bl	800df68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800df62:	f000 f8d5 	bl	800e110 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df66:	e7f1      	b.n	800df4c <prvTimerTask+0x8>

0800df68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800df72:	f7ff f9a9 	bl	800d2c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df76:	f107 0308 	add.w	r3, r7, #8
 800df7a:	4618      	mov	r0, r3
 800df7c:	f000 f866 	bl	800e04c <prvSampleTimeNow>
 800df80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d130      	bne.n	800dfea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d10a      	bne.n	800dfa4 <prvProcessTimerOrBlockTask+0x3c>
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	429a      	cmp	r2, r3
 800df94:	d806      	bhi.n	800dfa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800df96:	f7ff f9a5 	bl	800d2e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df9a:	68f9      	ldr	r1, [r7, #12]
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff ff85 	bl	800deac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dfa2:	e024      	b.n	800dfee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d008      	beq.n	800dfbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dfaa:	4b13      	ldr	r3, [pc, #76]	; (800dff8 <prvProcessTimerOrBlockTask+0x90>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <prvProcessTimerOrBlockTask+0x50>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e000      	b.n	800dfba <prvProcessTimerOrBlockTask+0x52>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dfbc:	4b0f      	ldr	r3, [pc, #60]	; (800dffc <prvProcessTimerOrBlockTask+0x94>)
 800dfbe:	6818      	ldr	r0, [r3, #0]
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	4619      	mov	r1, r3
 800dfca:	f7fe fdf9 	bl	800cbc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dfce:	f7ff f989 	bl	800d2e4 <xTaskResumeAll>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dfd8:	4b09      	ldr	r3, [pc, #36]	; (800e000 <prvProcessTimerOrBlockTask+0x98>)
 800dfda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfde:	601a      	str	r2, [r3, #0]
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	f3bf 8f6f 	isb	sy
}
 800dfe8:	e001      	b.n	800dfee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dfea:	f7ff f97b 	bl	800d2e4 <xTaskResumeAll>
}
 800dfee:	bf00      	nop
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	20000d84 	.word	0x20000d84
 800dffc:	20000d88 	.word	0x20000d88
 800e000:	e000ed04 	.word	0xe000ed04

0800e004 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e00c:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <prvGetNextExpireTime+0x44>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d101      	bne.n	800e01a <prvGetNextExpireTime+0x16>
 800e016:	2201      	movs	r2, #1
 800e018:	e000      	b.n	800e01c <prvGetNextExpireTime+0x18>
 800e01a:	2200      	movs	r2, #0
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d105      	bne.n	800e034 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e028:	4b07      	ldr	r3, [pc, #28]	; (800e048 <prvGetNextExpireTime+0x44>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	60fb      	str	r3, [r7, #12]
 800e032:	e001      	b.n	800e038 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e034:	2300      	movs	r3, #0
 800e036:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e038:	68fb      	ldr	r3, [r7, #12]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3714      	adds	r7, #20
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	20000d80 	.word	0x20000d80

0800e04c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e054:	f7ff f9e2 	bl	800d41c <xTaskGetTickCount>
 800e058:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e05a:	4b0b      	ldr	r3, [pc, #44]	; (800e088 <prvSampleTimeNow+0x3c>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	429a      	cmp	r2, r3
 800e062:	d205      	bcs.n	800e070 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e064:	f000 f91a 	bl	800e29c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2201      	movs	r2, #1
 800e06c:	601a      	str	r2, [r3, #0]
 800e06e:	e002      	b.n	800e076 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e076:	4a04      	ldr	r2, [pc, #16]	; (800e088 <prvSampleTimeNow+0x3c>)
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e07c:	68fb      	ldr	r3, [r7, #12]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	20000d90 	.word	0x20000d90

0800e08c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b086      	sub	sp, #24
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
 800e098:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e09a:	2300      	movs	r3, #0
 800e09c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	68fa      	ldr	r2, [r7, #12]
 800e0a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e0aa:	68ba      	ldr	r2, [r7, #8]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d812      	bhi.n	800e0d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	1ad2      	subs	r2, r2, r3
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	699b      	ldr	r3, [r3, #24]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d302      	bcc.n	800e0c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	617b      	str	r3, [r7, #20]
 800e0c4:	e01b      	b.n	800e0fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e0c6:	4b10      	ldr	r3, [pc, #64]	; (800e108 <prvInsertTimerInActiveList+0x7c>)
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	4610      	mov	r0, r2
 800e0d2:	f7fe f85d 	bl	800c190 <vListInsert>
 800e0d6:	e012      	b.n	800e0fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d206      	bcs.n	800e0ee <prvInsertTimerInActiveList+0x62>
 800e0e0:	68ba      	ldr	r2, [r7, #8]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d302      	bcc.n	800e0ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	617b      	str	r3, [r7, #20]
 800e0ec:	e007      	b.n	800e0fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e0ee:	4b07      	ldr	r3, [pc, #28]	; (800e10c <prvInsertTimerInActiveList+0x80>)
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	3304      	adds	r3, #4
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	4610      	mov	r0, r2
 800e0fa:	f7fe f849 	bl	800c190 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e0fe:	697b      	ldr	r3, [r7, #20]
}
 800e100:	4618      	mov	r0, r3
 800e102:	3718      	adds	r7, #24
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	20000d84 	.word	0x20000d84
 800e10c:	20000d80 	.word	0x20000d80

0800e110 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b08c      	sub	sp, #48	; 0x30
 800e114:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e116:	e0ae      	b.n	800e276 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	f2c0 80ab 	blt.w	800e276 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d004      	beq.n	800e136 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12e:	3304      	adds	r3, #4
 800e130:	4618      	mov	r0, r3
 800e132:	f7fe f866 	bl	800c202 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e136:	1d3b      	adds	r3, r7, #4
 800e138:	4618      	mov	r0, r3
 800e13a:	f7ff ff87 	bl	800e04c <prvSampleTimeNow>
 800e13e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	2b09      	cmp	r3, #9
 800e144:	f200 8096 	bhi.w	800e274 <prvProcessReceivedCommands+0x164>
 800e148:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <prvProcessReceivedCommands+0x40>)
 800e14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e14e:	bf00      	nop
 800e150:	0800e179 	.word	0x0800e179
 800e154:	0800e179 	.word	0x0800e179
 800e158:	0800e179 	.word	0x0800e179
 800e15c:	0800e1ed 	.word	0x0800e1ed
 800e160:	0800e201 	.word	0x0800e201
 800e164:	0800e24b 	.word	0x0800e24b
 800e168:	0800e179 	.word	0x0800e179
 800e16c:	0800e179 	.word	0x0800e179
 800e170:	0800e1ed 	.word	0x0800e1ed
 800e174:	0800e201 	.word	0x0800e201
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e17e:	f043 0301 	orr.w	r3, r3, #1
 800e182:	b2da      	uxtb	r2, r3
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	18d1      	adds	r1, r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6a3a      	ldr	r2, [r7, #32]
 800e196:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e198:	f7ff ff78 	bl	800e08c <prvInsertTimerInActiveList>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d069      	beq.n	800e276 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a4:	6a1b      	ldr	r3, [r3, #32]
 800e1a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1b0:	f003 0304 	and.w	r3, r3, #4
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d05e      	beq.n	800e276 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1bc:	699b      	ldr	r3, [r3, #24]
 800e1be:	441a      	add	r2, r3
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ca:	f7ff fe05 	bl	800ddd8 <xTimerGenericCommand>
 800e1ce:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d14f      	bne.n	800e276 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	61bb      	str	r3, [r7, #24]
}
 800e1e8:	bf00      	nop
 800e1ea:	e7fe      	b.n	800e1ea <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1f2:	f023 0301 	bic.w	r3, r3, #1
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e1fe:	e03a      	b.n	800e276 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e206:	f043 0301 	orr.w	r3, r3, #1
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21a:	699b      	ldr	r3, [r3, #24]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10a      	bne.n	800e236 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800e220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e224:	f383 8811 	msr	BASEPRI, r3
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	617b      	str	r3, [r7, #20]
}
 800e232:	bf00      	nop
 800e234:	e7fe      	b.n	800e234 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e238:	699a      	ldr	r2, [r3, #24]
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	18d1      	adds	r1, r2, r3
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	6a3a      	ldr	r2, [r7, #32]
 800e242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e244:	f7ff ff22 	bl	800e08c <prvInsertTimerInActiveList>
					break;
 800e248:	e015      	b.n	800e276 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e250:	f003 0302 	and.w	r3, r3, #2
 800e254:	2b00      	cmp	r3, #0
 800e256:	d103      	bne.n	800e260 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800e258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e25a:	f000 fb67 	bl	800e92c <vPortFree>
 800e25e:	e00a      	b.n	800e276 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e266:	f023 0301 	bic.w	r3, r3, #1
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e272:	e000      	b.n	800e276 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800e274:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e276:	4b08      	ldr	r3, [pc, #32]	; (800e298 <prvProcessReceivedCommands+0x188>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f107 0108 	add.w	r1, r7, #8
 800e27e:	2200      	movs	r2, #0
 800e280:	4618      	mov	r0, r3
 800e282:	f7fe fa83 	bl	800c78c <xQueueReceive>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f47f af45 	bne.w	800e118 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e28e:	bf00      	nop
 800e290:	bf00      	nop
 800e292:	3728      	adds	r7, #40	; 0x28
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	20000d88 	.word	0x20000d88

0800e29c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b088      	sub	sp, #32
 800e2a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2a2:	e048      	b.n	800e336 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2a4:	4b2d      	ldr	r3, [pc, #180]	; (800e35c <prvSwitchTimerLists+0xc0>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ae:	4b2b      	ldr	r3, [pc, #172]	; (800e35c <prvSwitchTimerLists+0xc0>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fd ffa0 	bl	800c202 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e2d0:	f003 0304 	and.w	r3, r3, #4
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d02e      	beq.n	800e336 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	699b      	ldr	r3, [r3, #24]
 800e2dc:	693a      	ldr	r2, [r7, #16]
 800e2de:	4413      	add	r3, r2
 800e2e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d90e      	bls.n	800e308 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	68fa      	ldr	r2, [r7, #12]
 800e2f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e2f6:	4b19      	ldr	r3, [pc, #100]	; (800e35c <prvSwitchTimerLists+0xc0>)
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	3304      	adds	r3, #4
 800e2fe:	4619      	mov	r1, r3
 800e300:	4610      	mov	r0, r2
 800e302:	f7fd ff45 	bl	800c190 <vListInsert>
 800e306:	e016      	b.n	800e336 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e308:	2300      	movs	r3, #0
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	2300      	movs	r3, #0
 800e30e:	693a      	ldr	r2, [r7, #16]
 800e310:	2100      	movs	r1, #0
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f7ff fd60 	bl	800ddd8 <xTimerGenericCommand>
 800e318:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d10a      	bne.n	800e336 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	603b      	str	r3, [r7, #0]
}
 800e332:	bf00      	nop
 800e334:	e7fe      	b.n	800e334 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e336:	4b09      	ldr	r3, [pc, #36]	; (800e35c <prvSwitchTimerLists+0xc0>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d1b1      	bne.n	800e2a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e340:	4b06      	ldr	r3, [pc, #24]	; (800e35c <prvSwitchTimerLists+0xc0>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e346:	4b06      	ldr	r3, [pc, #24]	; (800e360 <prvSwitchTimerLists+0xc4>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a04      	ldr	r2, [pc, #16]	; (800e35c <prvSwitchTimerLists+0xc0>)
 800e34c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e34e:	4a04      	ldr	r2, [pc, #16]	; (800e360 <prvSwitchTimerLists+0xc4>)
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	6013      	str	r3, [r2, #0]
}
 800e354:	bf00      	nop
 800e356:	3718      	adds	r7, #24
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20000d80 	.word	0x20000d80
 800e360:	20000d84 	.word	0x20000d84

0800e364 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e36a:	f000 f9ab 	bl	800e6c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e36e:	4b15      	ldr	r3, [pc, #84]	; (800e3c4 <prvCheckForValidListAndQueue+0x60>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d120      	bne.n	800e3b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e376:	4814      	ldr	r0, [pc, #80]	; (800e3c8 <prvCheckForValidListAndQueue+0x64>)
 800e378:	f7fd feb9 	bl	800c0ee <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e37c:	4813      	ldr	r0, [pc, #76]	; (800e3cc <prvCheckForValidListAndQueue+0x68>)
 800e37e:	f7fd feb6 	bl	800c0ee <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e382:	4b13      	ldr	r3, [pc, #76]	; (800e3d0 <prvCheckForValidListAndQueue+0x6c>)
 800e384:	4a10      	ldr	r2, [pc, #64]	; (800e3c8 <prvCheckForValidListAndQueue+0x64>)
 800e386:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e388:	4b12      	ldr	r3, [pc, #72]	; (800e3d4 <prvCheckForValidListAndQueue+0x70>)
 800e38a:	4a10      	ldr	r2, [pc, #64]	; (800e3cc <prvCheckForValidListAndQueue+0x68>)
 800e38c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e38e:	2300      	movs	r3, #0
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	4b11      	ldr	r3, [pc, #68]	; (800e3d8 <prvCheckForValidListAndQueue+0x74>)
 800e394:	4a11      	ldr	r2, [pc, #68]	; (800e3dc <prvCheckForValidListAndQueue+0x78>)
 800e396:	210c      	movs	r1, #12
 800e398:	200a      	movs	r0, #10
 800e39a:	f7fd ffc5 	bl	800c328 <xQueueGenericCreateStatic>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	4a08      	ldr	r2, [pc, #32]	; (800e3c4 <prvCheckForValidListAndQueue+0x60>)
 800e3a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e3a4:	4b07      	ldr	r3, [pc, #28]	; (800e3c4 <prvCheckForValidListAndQueue+0x60>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d005      	beq.n	800e3b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e3ac:	4b05      	ldr	r3, [pc, #20]	; (800e3c4 <prvCheckForValidListAndQueue+0x60>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	490b      	ldr	r1, [pc, #44]	; (800e3e0 <prvCheckForValidListAndQueue+0x7c>)
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fe fbda 	bl	800cb6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3b8:	f000 f9b4 	bl	800e724 <vPortExitCritical>
}
 800e3bc:	bf00      	nop
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20000d88 	.word	0x20000d88
 800e3c8:	20000d58 	.word	0x20000d58
 800e3cc:	20000d6c 	.word	0x20000d6c
 800e3d0:	20000d80 	.word	0x20000d80
 800e3d4:	20000d84 	.word	0x20000d84
 800e3d8:	20000e0c 	.word	0x20000e0c
 800e3dc:	20000d94 	.word	0x20000d94
 800e3e0:	080123bc 	.word	0x080123bc

0800e3e4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b086      	sub	sp, #24
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10a      	bne.n	800e40c <pvTimerGetTimerID+0x28>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	60fb      	str	r3, [r7, #12]
}
 800e408:	bf00      	nop
 800e40a:	e7fe      	b.n	800e40a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800e40c:	f000 f95a 	bl	800e6c4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	69db      	ldr	r3, [r3, #28]
 800e414:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e416:	f000 f985 	bl	800e724 <vPortExitCritical>

	return pvReturn;
 800e41a:	693b      	ldr	r3, [r7, #16]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10a      	bne.n	800e44e <vTimerSetTimerID+0x2a>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43c:	f383 8811 	msr	BASEPRI, r3
 800e440:	f3bf 8f6f 	isb	sy
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	60bb      	str	r3, [r7, #8]
}
 800e44a:	bf00      	nop
 800e44c:	e7fe      	b.n	800e44c <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 800e44e:	f000 f939 	bl	800e6c4 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	683a      	ldr	r2, [r7, #0]
 800e456:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 800e458:	f000 f964 	bl	800e724 <vPortExitCritical>
}
 800e45c:	bf00      	nop
 800e45e:	3710      	adds	r7, #16
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e464:	b480      	push	{r7}
 800e466:	b085      	sub	sp, #20
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	3b04      	subs	r3, #4
 800e474:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	3b04      	subs	r3, #4
 800e482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f023 0201 	bic.w	r2, r3, #1
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	3b04      	subs	r3, #4
 800e492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e494:	4a0c      	ldr	r2, [pc, #48]	; (800e4c8 <pxPortInitialiseStack+0x64>)
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	3b14      	subs	r3, #20
 800e49e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	3b04      	subs	r3, #4
 800e4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f06f 0202 	mvn.w	r2, #2
 800e4b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	3b20      	subs	r3, #32
 800e4b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3714      	adds	r7, #20
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr
 800e4c8:	0800e4cd 	.word	0x0800e4cd

0800e4cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4d6:	4b12      	ldr	r3, [pc, #72]	; (800e520 <prvTaskExitError+0x54>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4de:	d00a      	beq.n	800e4f6 <prvTaskExitError+0x2a>
	__asm volatile
 800e4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	60fb      	str	r3, [r7, #12]
}
 800e4f2:	bf00      	nop
 800e4f4:	e7fe      	b.n	800e4f4 <prvTaskExitError+0x28>
	__asm volatile
 800e4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	60bb      	str	r3, [r7, #8]
}
 800e508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e50a:	bf00      	nop
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d0fc      	beq.n	800e50c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e512:	bf00      	nop
 800e514:	bf00      	nop
 800e516:	3714      	adds	r7, #20
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr
 800e520:	200000b8 	.word	0x200000b8
	...

0800e530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e530:	4b07      	ldr	r3, [pc, #28]	; (800e550 <pxCurrentTCBConst2>)
 800e532:	6819      	ldr	r1, [r3, #0]
 800e534:	6808      	ldr	r0, [r1, #0]
 800e536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53a:	f380 8809 	msr	PSP, r0
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f04f 0000 	mov.w	r0, #0
 800e546:	f380 8811 	msr	BASEPRI, r0
 800e54a:	4770      	bx	lr
 800e54c:	f3af 8000 	nop.w

0800e550 <pxCurrentTCBConst2>:
 800e550:	20000c2c 	.word	0x20000c2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e554:	bf00      	nop
 800e556:	bf00      	nop

0800e558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e558:	4808      	ldr	r0, [pc, #32]	; (800e57c <prvPortStartFirstTask+0x24>)
 800e55a:	6800      	ldr	r0, [r0, #0]
 800e55c:	6800      	ldr	r0, [r0, #0]
 800e55e:	f380 8808 	msr	MSP, r0
 800e562:	f04f 0000 	mov.w	r0, #0
 800e566:	f380 8814 	msr	CONTROL, r0
 800e56a:	b662      	cpsie	i
 800e56c:	b661      	cpsie	f
 800e56e:	f3bf 8f4f 	dsb	sy
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	df00      	svc	0
 800e578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e57a:	bf00      	nop
 800e57c:	e000ed08 	.word	0xe000ed08

0800e580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b086      	sub	sp, #24
 800e584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e586:	4b46      	ldr	r3, [pc, #280]	; (800e6a0 <xPortStartScheduler+0x120>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a46      	ldr	r2, [pc, #280]	; (800e6a4 <xPortStartScheduler+0x124>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d10a      	bne.n	800e5a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	613b      	str	r3, [r7, #16]
}
 800e5a2:	bf00      	nop
 800e5a4:	e7fe      	b.n	800e5a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e5a6:	4b3e      	ldr	r3, [pc, #248]	; (800e6a0 <xPortStartScheduler+0x120>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4a3f      	ldr	r2, [pc, #252]	; (800e6a8 <xPortStartScheduler+0x128>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d10a      	bne.n	800e5c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b4:	f383 8811 	msr	BASEPRI, r3
 800e5b8:	f3bf 8f6f 	isb	sy
 800e5bc:	f3bf 8f4f 	dsb	sy
 800e5c0:	60fb      	str	r3, [r7, #12]
}
 800e5c2:	bf00      	nop
 800e5c4:	e7fe      	b.n	800e5c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5c6:	4b39      	ldr	r3, [pc, #228]	; (800e6ac <xPortStartScheduler+0x12c>)
 800e5c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	22ff      	movs	r2, #255	; 0xff
 800e5d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5e0:	78fb      	ldrb	r3, [r7, #3]
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e5e8:	b2da      	uxtb	r2, r3
 800e5ea:	4b31      	ldr	r3, [pc, #196]	; (800e6b0 <xPortStartScheduler+0x130>)
 800e5ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5ee:	4b31      	ldr	r3, [pc, #196]	; (800e6b4 <xPortStartScheduler+0x134>)
 800e5f0:	2207      	movs	r2, #7
 800e5f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5f4:	e009      	b.n	800e60a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e5f6:	4b2f      	ldr	r3, [pc, #188]	; (800e6b4 <xPortStartScheduler+0x134>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	4a2d      	ldr	r2, [pc, #180]	; (800e6b4 <xPortStartScheduler+0x134>)
 800e5fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e600:	78fb      	ldrb	r3, [r7, #3]
 800e602:	b2db      	uxtb	r3, r3
 800e604:	005b      	lsls	r3, r3, #1
 800e606:	b2db      	uxtb	r3, r3
 800e608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e60a:	78fb      	ldrb	r3, [r7, #3]
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e612:	2b80      	cmp	r3, #128	; 0x80
 800e614:	d0ef      	beq.n	800e5f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e616:	4b27      	ldr	r3, [pc, #156]	; (800e6b4 <xPortStartScheduler+0x134>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f1c3 0307 	rsb	r3, r3, #7
 800e61e:	2b04      	cmp	r3, #4
 800e620:	d00a      	beq.n	800e638 <xPortStartScheduler+0xb8>
	__asm volatile
 800e622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e626:	f383 8811 	msr	BASEPRI, r3
 800e62a:	f3bf 8f6f 	isb	sy
 800e62e:	f3bf 8f4f 	dsb	sy
 800e632:	60bb      	str	r3, [r7, #8]
}
 800e634:	bf00      	nop
 800e636:	e7fe      	b.n	800e636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e638:	4b1e      	ldr	r3, [pc, #120]	; (800e6b4 <xPortStartScheduler+0x134>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	021b      	lsls	r3, r3, #8
 800e63e:	4a1d      	ldr	r2, [pc, #116]	; (800e6b4 <xPortStartScheduler+0x134>)
 800e640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e642:	4b1c      	ldr	r3, [pc, #112]	; (800e6b4 <xPortStartScheduler+0x134>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e64a:	4a1a      	ldr	r2, [pc, #104]	; (800e6b4 <xPortStartScheduler+0x134>)
 800e64c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	b2da      	uxtb	r2, r3
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e656:	4b18      	ldr	r3, [pc, #96]	; (800e6b8 <xPortStartScheduler+0x138>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a17      	ldr	r2, [pc, #92]	; (800e6b8 <xPortStartScheduler+0x138>)
 800e65c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e662:	4b15      	ldr	r3, [pc, #84]	; (800e6b8 <xPortStartScheduler+0x138>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	4a14      	ldr	r2, [pc, #80]	; (800e6b8 <xPortStartScheduler+0x138>)
 800e668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e66c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e66e:	f000 f8dd 	bl	800e82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e672:	4b12      	ldr	r3, [pc, #72]	; (800e6bc <xPortStartScheduler+0x13c>)
 800e674:	2200      	movs	r2, #0
 800e676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e678:	f000 f8fc 	bl	800e874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e67c:	4b10      	ldr	r3, [pc, #64]	; (800e6c0 <xPortStartScheduler+0x140>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a0f      	ldr	r2, [pc, #60]	; (800e6c0 <xPortStartScheduler+0x140>)
 800e682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e688:	f7ff ff66 	bl	800e558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e68c:	f7fe ff8e 	bl	800d5ac <vTaskSwitchContext>
	prvTaskExitError();
 800e690:	f7ff ff1c 	bl	800e4cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3718      	adds	r7, #24
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	e000ed00 	.word	0xe000ed00
 800e6a4:	410fc271 	.word	0x410fc271
 800e6a8:	410fc270 	.word	0x410fc270
 800e6ac:	e000e400 	.word	0xe000e400
 800e6b0:	20000e54 	.word	0x20000e54
 800e6b4:	20000e58 	.word	0x20000e58
 800e6b8:	e000ed20 	.word	0xe000ed20
 800e6bc:	200000b8 	.word	0x200000b8
 800e6c0:	e000ef34 	.word	0xe000ef34

0800e6c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	607b      	str	r3, [r7, #4]
}
 800e6dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6de:	4b0f      	ldr	r3, [pc, #60]	; (800e71c <vPortEnterCritical+0x58>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	4a0d      	ldr	r2, [pc, #52]	; (800e71c <vPortEnterCritical+0x58>)
 800e6e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6e8:	4b0c      	ldr	r3, [pc, #48]	; (800e71c <vPortEnterCritical+0x58>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d10f      	bne.n	800e710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6f0:	4b0b      	ldr	r3, [pc, #44]	; (800e720 <vPortEnterCritical+0x5c>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00a      	beq.n	800e710 <vPortEnterCritical+0x4c>
	__asm volatile
 800e6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fe:	f383 8811 	msr	BASEPRI, r3
 800e702:	f3bf 8f6f 	isb	sy
 800e706:	f3bf 8f4f 	dsb	sy
 800e70a:	603b      	str	r3, [r7, #0]
}
 800e70c:	bf00      	nop
 800e70e:	e7fe      	b.n	800e70e <vPortEnterCritical+0x4a>
	}
}
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	200000b8 	.word	0x200000b8
 800e720:	e000ed04 	.word	0xe000ed04

0800e724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e72a:	4b12      	ldr	r3, [pc, #72]	; (800e774 <vPortExitCritical+0x50>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10a      	bne.n	800e748 <vPortExitCritical+0x24>
	__asm volatile
 800e732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	607b      	str	r3, [r7, #4]
}
 800e744:	bf00      	nop
 800e746:	e7fe      	b.n	800e746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e748:	4b0a      	ldr	r3, [pc, #40]	; (800e774 <vPortExitCritical+0x50>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3b01      	subs	r3, #1
 800e74e:	4a09      	ldr	r2, [pc, #36]	; (800e774 <vPortExitCritical+0x50>)
 800e750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e752:	4b08      	ldr	r3, [pc, #32]	; (800e774 <vPortExitCritical+0x50>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d105      	bne.n	800e766 <vPortExitCritical+0x42>
 800e75a:	2300      	movs	r3, #0
 800e75c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	f383 8811 	msr	BASEPRI, r3
}
 800e764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e766:	bf00      	nop
 800e768:	370c      	adds	r7, #12
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	200000b8 	.word	0x200000b8
	...

0800e780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e780:	f3ef 8009 	mrs	r0, PSP
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	4b15      	ldr	r3, [pc, #84]	; (800e7e0 <pxCurrentTCBConst>)
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	f01e 0f10 	tst.w	lr, #16
 800e790:	bf08      	it	eq
 800e792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79a:	6010      	str	r0, [r2, #0]
 800e79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e7a4:	f380 8811 	msr	BASEPRI, r0
 800e7a8:	f3bf 8f4f 	dsb	sy
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f7fe fefc 	bl	800d5ac <vTaskSwitchContext>
 800e7b4:	f04f 0000 	mov.w	r0, #0
 800e7b8:	f380 8811 	msr	BASEPRI, r0
 800e7bc:	bc09      	pop	{r0, r3}
 800e7be:	6819      	ldr	r1, [r3, #0]
 800e7c0:	6808      	ldr	r0, [r1, #0]
 800e7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c6:	f01e 0f10 	tst.w	lr, #16
 800e7ca:	bf08      	it	eq
 800e7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e7d0:	f380 8809 	msr	PSP, r0
 800e7d4:	f3bf 8f6f 	isb	sy
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	f3af 8000 	nop.w

0800e7e0 <pxCurrentTCBConst>:
 800e7e0:	20000c2c 	.word	0x20000c2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7e4:	bf00      	nop
 800e7e6:	bf00      	nop

0800e7e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f2:	f383 8811 	msr	BASEPRI, r3
 800e7f6:	f3bf 8f6f 	isb	sy
 800e7fa:	f3bf 8f4f 	dsb	sy
 800e7fe:	607b      	str	r3, [r7, #4]
}
 800e800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e802:	f7fe fe1b 	bl	800d43c <xTaskIncrementTick>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d003      	beq.n	800e814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e80c:	4b06      	ldr	r3, [pc, #24]	; (800e828 <xPortSysTickHandler+0x40>)
 800e80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e812:	601a      	str	r2, [r3, #0]
 800e814:	2300      	movs	r3, #0
 800e816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	f383 8811 	msr	BASEPRI, r3
}
 800e81e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e820:	bf00      	nop
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	e000ed04 	.word	0xe000ed04

0800e82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e830:	4b0b      	ldr	r3, [pc, #44]	; (800e860 <vPortSetupTimerInterrupt+0x34>)
 800e832:	2200      	movs	r2, #0
 800e834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e836:	4b0b      	ldr	r3, [pc, #44]	; (800e864 <vPortSetupTimerInterrupt+0x38>)
 800e838:	2200      	movs	r2, #0
 800e83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e83c:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <vPortSetupTimerInterrupt+0x3c>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a0a      	ldr	r2, [pc, #40]	; (800e86c <vPortSetupTimerInterrupt+0x40>)
 800e842:	fba2 2303 	umull	r2, r3, r2, r3
 800e846:	099b      	lsrs	r3, r3, #6
 800e848:	4a09      	ldr	r2, [pc, #36]	; (800e870 <vPortSetupTimerInterrupt+0x44>)
 800e84a:	3b01      	subs	r3, #1
 800e84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e84e:	4b04      	ldr	r3, [pc, #16]	; (800e860 <vPortSetupTimerInterrupt+0x34>)
 800e850:	2207      	movs	r2, #7
 800e852:	601a      	str	r2, [r3, #0]
}
 800e854:	bf00      	nop
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	e000e010 	.word	0xe000e010
 800e864:	e000e018 	.word	0xe000e018
 800e868:	20000000 	.word	0x20000000
 800e86c:	10624dd3 	.word	0x10624dd3
 800e870:	e000e014 	.word	0xe000e014

0800e874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e884 <vPortEnableVFP+0x10>
 800e878:	6801      	ldr	r1, [r0, #0]
 800e87a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e87e:	6001      	str	r1, [r0, #0]
 800e880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e882:	bf00      	nop
 800e884:	e000ed88 	.word	0xe000ed88

0800e888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e88e:	f3ef 8305 	mrs	r3, IPSR
 800e892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2b0f      	cmp	r3, #15
 800e898:	d914      	bls.n	800e8c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e89a:	4a17      	ldr	r2, [pc, #92]	; (800e8f8 <vPortValidateInterruptPriority+0x70>)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	4413      	add	r3, r2
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8a4:	4b15      	ldr	r3, [pc, #84]	; (800e8fc <vPortValidateInterruptPriority+0x74>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	7afa      	ldrb	r2, [r7, #11]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d20a      	bcs.n	800e8c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	607b      	str	r3, [r7, #4]
}
 800e8c0:	bf00      	nop
 800e8c2:	e7fe      	b.n	800e8c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8c4:	4b0e      	ldr	r3, [pc, #56]	; (800e900 <vPortValidateInterruptPriority+0x78>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e8cc:	4b0d      	ldr	r3, [pc, #52]	; (800e904 <vPortValidateInterruptPriority+0x7c>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d90a      	bls.n	800e8ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d8:	f383 8811 	msr	BASEPRI, r3
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	603b      	str	r3, [r7, #0]
}
 800e8e6:	bf00      	nop
 800e8e8:	e7fe      	b.n	800e8e8 <vPortValidateInterruptPriority+0x60>
	}
 800e8ea:	bf00      	nop
 800e8ec:	3714      	adds	r7, #20
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	e000e3f0 	.word	0xe000e3f0
 800e8fc:	20000e54 	.word	0x20000e54
 800e900:	e000ed0c 	.word	0xe000ed0c
 800e904:	20000e58 	.word	0x20000e58

0800e908 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800e910:	f7fe fcda 	bl	800d2c8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 fd2b 	bl	800f370 <malloc>
 800e91a:	4603      	mov	r3, r0
 800e91c:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e91e:	f7fe fce1 	bl	800d2e4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800e922:	68fb      	ldr	r3, [r7, #12]
}
 800e924:	4618      	mov	r0, r3
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
	if( pv )
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d006      	beq.n	800e948 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800e93a:	f7fe fcc5 	bl	800d2c8 <vTaskSuspendAll>
		{
			free( pv );
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 fd1e 	bl	800f380 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800e944:	f7fe fcce 	bl	800d2e4 <xTaskResumeAll>
	}
}
 800e948:	bf00      	nop
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e954:	2200      	movs	r2, #0
 800e956:	4912      	ldr	r1, [pc, #72]	; (800e9a0 <MX_USB_DEVICE_Init+0x50>)
 800e958:	4812      	ldr	r0, [pc, #72]	; (800e9a4 <MX_USB_DEVICE_Init+0x54>)
 800e95a:	f7fc f857 	bl	800aa0c <USBD_Init>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d001      	beq.n	800e968 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e964:	f7f3 f9e2 	bl	8001d2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e968:	490f      	ldr	r1, [pc, #60]	; (800e9a8 <MX_USB_DEVICE_Init+0x58>)
 800e96a:	480e      	ldr	r0, [pc, #56]	; (800e9a4 <MX_USB_DEVICE_Init+0x54>)
 800e96c:	f7fc f87e 	bl	800aa6c <USBD_RegisterClass>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d001      	beq.n	800e97a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e976:	f7f3 f9d9 	bl	8001d2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e97a:	490c      	ldr	r1, [pc, #48]	; (800e9ac <MX_USB_DEVICE_Init+0x5c>)
 800e97c:	4809      	ldr	r0, [pc, #36]	; (800e9a4 <MX_USB_DEVICE_Init+0x54>)
 800e97e:	f7fb ff6f 	bl	800a860 <USBD_CDC_RegisterInterface>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d001      	beq.n	800e98c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e988:	f7f3 f9d0 	bl	8001d2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e98c:	4805      	ldr	r0, [pc, #20]	; (800e9a4 <MX_USB_DEVICE_Init+0x54>)
 800e98e:	f7fc f8a3 	bl	800aad8 <USBD_Start>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d001      	beq.n	800e99c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e998:	f7f3 f9c8 	bl	8001d2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e99c:	bf00      	nop
 800e99e:	bd80      	pop	{r7, pc}
 800e9a0:	200000d0 	.word	0x200000d0
 800e9a4:	20000e5c 	.word	0x20000e5c
 800e9a8:	20000038 	.word	0x20000038
 800e9ac:	200000bc 	.word	0x200000bc

0800e9b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	4905      	ldr	r1, [pc, #20]	; (800e9cc <CDC_Init_FS+0x1c>)
 800e9b8:	4805      	ldr	r0, [pc, #20]	; (800e9d0 <CDC_Init_FS+0x20>)
 800e9ba:	f7fb ff6b 	bl	800a894 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e9be:	4905      	ldr	r1, [pc, #20]	; (800e9d4 <CDC_Init_FS+0x24>)
 800e9c0:	4803      	ldr	r0, [pc, #12]	; (800e9d0 <CDC_Init_FS+0x20>)
 800e9c2:	f7fb ff89 	bl	800a8d8 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800e9c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	20001538 	.word	0x20001538
 800e9d0:	20000e5c 	.word	0x20000e5c
 800e9d4:	20001138 	.word	0x20001138

0800e9d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800e9dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	6039      	str	r1, [r7, #0]
 800e9f2:	71fb      	strb	r3, [r7, #7]
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 800e9f8:	79fb      	ldrb	r3, [r7, #7]
 800e9fa:	2b23      	cmp	r3, #35	; 0x23
 800e9fc:	d84a      	bhi.n	800ea94 <CDC_Control_FS+0xac>
 800e9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ea04 <CDC_Control_FS+0x1c>)
 800ea00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea04:	0800ea95 	.word	0x0800ea95
 800ea08:	0800ea95 	.word	0x0800ea95
 800ea0c:	0800ea95 	.word	0x0800ea95
 800ea10:	0800ea95 	.word	0x0800ea95
 800ea14:	0800ea95 	.word	0x0800ea95
 800ea18:	0800ea95 	.word	0x0800ea95
 800ea1c:	0800ea95 	.word	0x0800ea95
 800ea20:	0800ea95 	.word	0x0800ea95
 800ea24:	0800ea95 	.word	0x0800ea95
 800ea28:	0800ea95 	.word	0x0800ea95
 800ea2c:	0800ea95 	.word	0x0800ea95
 800ea30:	0800ea95 	.word	0x0800ea95
 800ea34:	0800ea95 	.word	0x0800ea95
 800ea38:	0800ea95 	.word	0x0800ea95
 800ea3c:	0800ea95 	.word	0x0800ea95
 800ea40:	0800ea95 	.word	0x0800ea95
 800ea44:	0800ea95 	.word	0x0800ea95
 800ea48:	0800ea95 	.word	0x0800ea95
 800ea4c:	0800ea95 	.word	0x0800ea95
 800ea50:	0800ea95 	.word	0x0800ea95
 800ea54:	0800ea95 	.word	0x0800ea95
 800ea58:	0800ea95 	.word	0x0800ea95
 800ea5c:	0800ea95 	.word	0x0800ea95
 800ea60:	0800ea95 	.word	0x0800ea95
 800ea64:	0800ea95 	.word	0x0800ea95
 800ea68:	0800ea95 	.word	0x0800ea95
 800ea6c:	0800ea95 	.word	0x0800ea95
 800ea70:	0800ea95 	.word	0x0800ea95
 800ea74:	0800ea95 	.word	0x0800ea95
 800ea78:	0800ea95 	.word	0x0800ea95
 800ea7c:	0800ea95 	.word	0x0800ea95
 800ea80:	0800ea95 	.word	0x0800ea95
 800ea84:	0800ea95 	.word	0x0800ea95
 800ea88:	0800ea95 	.word	0x0800ea95
 800ea8c:	0800ea95 	.word	0x0800ea95
 800ea90:	0800ea95 	.word	0x0800ea95
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800ea94:	bf00      	nop
    }

    return (USBD_OK);
 800ea96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eaae:	6879      	ldr	r1, [r7, #4]
 800eab0:	4805      	ldr	r0, [pc, #20]	; (800eac8 <CDC_Receive_FS+0x24>)
 800eab2:	f7fb ff11 	bl	800a8d8 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eab6:	4804      	ldr	r0, [pc, #16]	; (800eac8 <CDC_Receive_FS+0x24>)
 800eab8:	f7fb ff72 	bl	800a9a0 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800eabc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	20000e5c 	.word	0x20000e5c

0800eacc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	460b      	mov	r3, r1
 800ead6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ead8:	2300      	movs	r3, #0
 800eada:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800eadc:	4b0d      	ldr	r3, [pc, #52]	; (800eb14 <CDC_Transmit_FS+0x48>)
 800eade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eae2:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d001      	beq.n	800eaf2 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	e00b      	b.n	800eb0a <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eaf2:	887b      	ldrh	r3, [r7, #2]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	6879      	ldr	r1, [r7, #4]
 800eaf8:	4806      	ldr	r0, [pc, #24]	; (800eb14 <CDC_Transmit_FS+0x48>)
 800eafa:	f7fb fecb 	bl	800a894 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800eafe:	4805      	ldr	r0, [pc, #20]	; (800eb14 <CDC_Transmit_FS+0x48>)
 800eb00:	f7fb ff08 	bl	800a914 <USBD_CDC_TransmitPacket>
 800eb04:	4603      	mov	r3, r0
 800eb06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20000e5c 	.word	0x20000e5c

0800eb18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b087      	sub	sp, #28
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	4613      	mov	r3, r2
 800eb24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eb26:	2300      	movs	r3, #0
 800eb28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eb2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	371c      	adds	r7, #28
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
	...

0800eb3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	6039      	str	r1, [r7, #0]
 800eb46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	2212      	movs	r2, #18
 800eb4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eb4e:	4b03      	ldr	r3, [pc, #12]	; (800eb5c <USBD_FS_DeviceDescriptor+0x20>)
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr
 800eb5c:	200000ec 	.word	0x200000ec

0800eb60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	4603      	mov	r3, r0
 800eb68:	6039      	str	r1, [r7, #0]
 800eb6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	2204      	movs	r2, #4
 800eb70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb72:	4b03      	ldr	r3, [pc, #12]	; (800eb80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr
 800eb80:	20000100 	.word	0x20000100

0800eb84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	6039      	str	r1, [r7, #0]
 800eb8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb90:	79fb      	ldrb	r3, [r7, #7]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d105      	bne.n	800eba2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	4907      	ldr	r1, [pc, #28]	; (800ebb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb9a:	4808      	ldr	r0, [pc, #32]	; (800ebbc <USBD_FS_ProductStrDescriptor+0x38>)
 800eb9c:	f7fd f948 	bl	800be30 <USBD_GetString>
 800eba0:	e004      	b.n	800ebac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eba2:	683a      	ldr	r2, [r7, #0]
 800eba4:	4904      	ldr	r1, [pc, #16]	; (800ebb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800eba6:	4805      	ldr	r0, [pc, #20]	; (800ebbc <USBD_FS_ProductStrDescriptor+0x38>)
 800eba8:	f7fd f942 	bl	800be30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebac:	4b02      	ldr	r3, [pc, #8]	; (800ebb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3708      	adds	r7, #8
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20001938 	.word	0x20001938
 800ebbc:	080123c4 	.word	0x080123c4

0800ebc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	6039      	str	r1, [r7, #0]
 800ebca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ebcc:	683a      	ldr	r2, [r7, #0]
 800ebce:	4904      	ldr	r1, [pc, #16]	; (800ebe0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ebd0:	4804      	ldr	r0, [pc, #16]	; (800ebe4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ebd2:	f7fd f92d 	bl	800be30 <USBD_GetString>
  return USBD_StrDesc;
 800ebd6:	4b02      	ldr	r3, [pc, #8]	; (800ebe0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	20001938 	.word	0x20001938
 800ebe4:	080123dc 	.word	0x080123dc

0800ebe8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	6039      	str	r1, [r7, #0]
 800ebf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	221a      	movs	r2, #26
 800ebf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ebfa:	f000 f843 	bl	800ec84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ebfe:	4b02      	ldr	r3, [pc, #8]	; (800ec08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20000104 	.word	0x20000104

0800ec0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	4603      	mov	r3, r0
 800ec14:	6039      	str	r1, [r7, #0]
 800ec16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ec18:	79fb      	ldrb	r3, [r7, #7]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d105      	bne.n	800ec2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec1e:	683a      	ldr	r2, [r7, #0]
 800ec20:	4907      	ldr	r1, [pc, #28]	; (800ec40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec22:	4808      	ldr	r0, [pc, #32]	; (800ec44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec24:	f7fd f904 	bl	800be30 <USBD_GetString>
 800ec28:	e004      	b.n	800ec34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec2a:	683a      	ldr	r2, [r7, #0]
 800ec2c:	4904      	ldr	r1, [pc, #16]	; (800ec40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec2e:	4805      	ldr	r0, [pc, #20]	; (800ec44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec30:	f7fd f8fe 	bl	800be30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec34:	4b02      	ldr	r3, [pc, #8]	; (800ec40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	20001938 	.word	0x20001938
 800ec44:	080123f0 	.word	0x080123f0

0800ec48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	4603      	mov	r3, r0
 800ec50:	6039      	str	r1, [r7, #0]
 800ec52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d105      	bne.n	800ec66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	4907      	ldr	r1, [pc, #28]	; (800ec7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec5e:	4808      	ldr	r0, [pc, #32]	; (800ec80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec60:	f7fd f8e6 	bl	800be30 <USBD_GetString>
 800ec64:	e004      	b.n	800ec70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec66:	683a      	ldr	r2, [r7, #0]
 800ec68:	4904      	ldr	r1, [pc, #16]	; (800ec7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec6a:	4805      	ldr	r0, [pc, #20]	; (800ec80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec6c:	f7fd f8e0 	bl	800be30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec70:	4b02      	ldr	r3, [pc, #8]	; (800ec7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3708      	adds	r7, #8
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	20001938 	.word	0x20001938
 800ec80:	080123fc 	.word	0x080123fc

0800ec84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec8a:	4b0f      	ldr	r3, [pc, #60]	; (800ecc8 <Get_SerialNum+0x44>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec90:	4b0e      	ldr	r3, [pc, #56]	; (800eccc <Get_SerialNum+0x48>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec96:	4b0e      	ldr	r3, [pc, #56]	; (800ecd0 <Get_SerialNum+0x4c>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4413      	add	r3, r2
 800eca2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d009      	beq.n	800ecbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ecaa:	2208      	movs	r2, #8
 800ecac:	4909      	ldr	r1, [pc, #36]	; (800ecd4 <Get_SerialNum+0x50>)
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f000 f814 	bl	800ecdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ecb4:	2204      	movs	r2, #4
 800ecb6:	4908      	ldr	r1, [pc, #32]	; (800ecd8 <Get_SerialNum+0x54>)
 800ecb8:	68b8      	ldr	r0, [r7, #8]
 800ecba:	f000 f80f 	bl	800ecdc <IntToUnicode>
  }
}
 800ecbe:	bf00      	nop
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	1fff7a10 	.word	0x1fff7a10
 800eccc:	1fff7a14 	.word	0x1fff7a14
 800ecd0:	1fff7a18 	.word	0x1fff7a18
 800ecd4:	20000106 	.word	0x20000106
 800ecd8:	20000116 	.word	0x20000116

0800ecdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	4613      	mov	r3, r2
 800ece8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ecea:	2300      	movs	r3, #0
 800ecec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ecee:	2300      	movs	r3, #0
 800ecf0:	75fb      	strb	r3, [r7, #23]
 800ecf2:	e027      	b.n	800ed44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	0f1b      	lsrs	r3, r3, #28
 800ecf8:	2b09      	cmp	r3, #9
 800ecfa:	d80b      	bhi.n	800ed14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	0f1b      	lsrs	r3, r3, #28
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	4619      	mov	r1, r3
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	440b      	add	r3, r1
 800ed0c:	3230      	adds	r2, #48	; 0x30
 800ed0e:	b2d2      	uxtb	r2, r2
 800ed10:	701a      	strb	r2, [r3, #0]
 800ed12:	e00a      	b.n	800ed2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	0f1b      	lsrs	r3, r3, #28
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	7dfb      	ldrb	r3, [r7, #23]
 800ed1c:	005b      	lsls	r3, r3, #1
 800ed1e:	4619      	mov	r1, r3
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	440b      	add	r3, r1
 800ed24:	3237      	adds	r2, #55	; 0x37
 800ed26:	b2d2      	uxtb	r2, r2
 800ed28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	011b      	lsls	r3, r3, #4
 800ed2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ed30:	7dfb      	ldrb	r3, [r7, #23]
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	3301      	adds	r3, #1
 800ed36:	68ba      	ldr	r2, [r7, #8]
 800ed38:	4413      	add	r3, r2
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed3e:	7dfb      	ldrb	r3, [r7, #23]
 800ed40:	3301      	adds	r3, #1
 800ed42:	75fb      	strb	r3, [r7, #23]
 800ed44:	7dfa      	ldrb	r2, [r7, #23]
 800ed46:	79fb      	ldrb	r3, [r7, #7]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d3d3      	bcc.n	800ecf4 <IntToUnicode+0x18>
  }
}
 800ed4c:	bf00      	nop
 800ed4e:	bf00      	nop
 800ed50:	371c      	adds	r7, #28
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
	...

0800ed5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b08a      	sub	sp, #40	; 0x28
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed64:	f107 0314 	add.w	r3, r7, #20
 800ed68:	2200      	movs	r2, #0
 800ed6a:	601a      	str	r2, [r3, #0]
 800ed6c:	605a      	str	r2, [r3, #4]
 800ed6e:	609a      	str	r2, [r3, #8]
 800ed70:	60da      	str	r2, [r3, #12]
 800ed72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed7c:	d13a      	bne.n	800edf4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed7e:	2300      	movs	r3, #0
 800ed80:	613b      	str	r3, [r7, #16]
 800ed82:	4b1e      	ldr	r3, [pc, #120]	; (800edfc <HAL_PCD_MspInit+0xa0>)
 800ed84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed86:	4a1d      	ldr	r2, [pc, #116]	; (800edfc <HAL_PCD_MspInit+0xa0>)
 800ed88:	f043 0301 	orr.w	r3, r3, #1
 800ed8c:	6313      	str	r3, [r2, #48]	; 0x30
 800ed8e:	4b1b      	ldr	r3, [pc, #108]	; (800edfc <HAL_PCD_MspInit+0xa0>)
 800ed90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed92:	f003 0301 	and.w	r3, r3, #1
 800ed96:	613b      	str	r3, [r7, #16]
 800ed98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ed9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ed9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eda0:	2302      	movs	r3, #2
 800eda2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eda4:	2300      	movs	r3, #0
 800eda6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eda8:	2303      	movs	r3, #3
 800edaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800edac:	230a      	movs	r3, #10
 800edae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edb0:	f107 0314 	add.w	r3, r7, #20
 800edb4:	4619      	mov	r1, r3
 800edb6:	4812      	ldr	r0, [pc, #72]	; (800ee00 <HAL_PCD_MspInit+0xa4>)
 800edb8:	f7f5 fb1a 	bl	80043f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800edbc:	4b0f      	ldr	r3, [pc, #60]	; (800edfc <HAL_PCD_MspInit+0xa0>)
 800edbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edc0:	4a0e      	ldr	r2, [pc, #56]	; (800edfc <HAL_PCD_MspInit+0xa0>)
 800edc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edc6:	6353      	str	r3, [r2, #52]	; 0x34
 800edc8:	2300      	movs	r3, #0
 800edca:	60fb      	str	r3, [r7, #12]
 800edcc:	4b0b      	ldr	r3, [pc, #44]	; (800edfc <HAL_PCD_MspInit+0xa0>)
 800edce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edd0:	4a0a      	ldr	r2, [pc, #40]	; (800edfc <HAL_PCD_MspInit+0xa0>)
 800edd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800edd6:	6453      	str	r3, [r2, #68]	; 0x44
 800edd8:	4b08      	ldr	r3, [pc, #32]	; (800edfc <HAL_PCD_MspInit+0xa0>)
 800edda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ede0:	60fb      	str	r3, [r7, #12]
 800ede2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ede4:	2200      	movs	r2, #0
 800ede6:	2105      	movs	r1, #5
 800ede8:	2043      	movs	r0, #67	; 0x43
 800edea:	f7f5 f8e0 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800edee:	2043      	movs	r0, #67	; 0x43
 800edf0:	f7f5 f8f9 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800edf4:	bf00      	nop
 800edf6:	3728      	adds	r7, #40	; 0x28
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	40023800 	.word	0x40023800
 800ee00:	40020000 	.word	0x40020000

0800ee04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ee18:	4619      	mov	r1, r3
 800ee1a:	4610      	mov	r0, r2
 800ee1c:	f7fb fea9 	bl	800ab72 <USBD_LL_SetupStage>
}
 800ee20:	bf00      	nop
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	460b      	mov	r3, r1
 800ee32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee3a:	78fa      	ldrb	r2, [r7, #3]
 800ee3c:	6879      	ldr	r1, [r7, #4]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	00db      	lsls	r3, r3, #3
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	440b      	add	r3, r1
 800ee48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	78fb      	ldrb	r3, [r7, #3]
 800ee50:	4619      	mov	r1, r3
 800ee52:	f7fb fee3 	bl	800ac1c <USBD_LL_DataOutStage>
}
 800ee56:	bf00      	nop
 800ee58:	3708      	adds	r7, #8
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b082      	sub	sp, #8
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
 800ee66:	460b      	mov	r3, r1
 800ee68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee70:	78fa      	ldrb	r2, [r7, #3]
 800ee72:	6879      	ldr	r1, [r7, #4]
 800ee74:	4613      	mov	r3, r2
 800ee76:	00db      	lsls	r3, r3, #3
 800ee78:	4413      	add	r3, r2
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	440b      	add	r3, r1
 800ee7e:	334c      	adds	r3, #76	; 0x4c
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	78fb      	ldrb	r3, [r7, #3]
 800ee84:	4619      	mov	r1, r3
 800ee86:	f7fb ff7c 	bl	800ad82 <USBD_LL_DataInStage>
}
 800ee8a:	bf00      	nop
 800ee8c:	3708      	adds	r7, #8
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b082      	sub	sp, #8
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7fc f8b0 	bl	800b006 <USBD_LL_SOF>
}
 800eea6:	bf00      	nop
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeae:	b580      	push	{r7, lr}
 800eeb0:	b084      	sub	sp, #16
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	2b02      	cmp	r3, #2
 800eec0:	d001      	beq.n	800eec6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eec2:	f7f2 ff33 	bl	8001d2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eecc:	7bfa      	ldrb	r2, [r7, #15]
 800eece:	4611      	mov	r1, r2
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fc f85a 	bl	800af8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fc f802 	bl	800aee6 <USBD_LL_Reset>
}
 800eee2:	bf00      	nop
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
	...

0800eeec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fc f855 	bl	800afaa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	6812      	ldr	r2, [r2, #0]
 800ef0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ef12:	f043 0301 	orr.w	r3, r3, #1
 800ef16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6a1b      	ldr	r3, [r3, #32]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d005      	beq.n	800ef2c <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef20:	4b04      	ldr	r3, [pc, #16]	; (800ef34 <HAL_PCD_SuspendCallback+0x48>)
 800ef22:	691b      	ldr	r3, [r3, #16]
 800ef24:	4a03      	ldr	r2, [pc, #12]	; (800ef34 <HAL_PCD_SuspendCallback+0x48>)
 800ef26:	f043 0306 	orr.w	r3, r3, #6
 800ef2a:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800ef2c:	bf00      	nop
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	e000ed00 	.word	0xe000ed00

0800ef38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fc f845 	bl	800afd6 <USBD_LL_Resume>
}
 800ef4c:	bf00      	nop
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef66:	78fa      	ldrb	r2, [r7, #3]
 800ef68:	4611      	mov	r1, r2
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fc f89d 	bl	800b0aa <USBD_LL_IsoOUTIncomplete>
}
 800ef70:	bf00      	nop
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef8a:	78fa      	ldrb	r2, [r7, #3]
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7fc f859 	bl	800b046 <USBD_LL_IsoINIncomplete>
}
 800ef94:	bf00      	nop
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efaa:	4618      	mov	r0, r3
 800efac:	f7fc f8af 	bl	800b10e <USBD_LL_DevConnected>
}
 800efb0:	bf00      	nop
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7fc f8ac 	bl	800b124 <USBD_LL_DevDisconnected>
}
 800efcc:	bf00      	nop
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d13c      	bne.n	800f05e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800efe4:	4a20      	ldr	r2, [pc, #128]	; (800f068 <USBD_LL_Init+0x94>)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4a1e      	ldr	r2, [pc, #120]	; (800f068 <USBD_LL_Init+0x94>)
 800eff0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eff4:	4b1c      	ldr	r3, [pc, #112]	; (800f068 <USBD_LL_Init+0x94>)
 800eff6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800effa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800effc:	4b1a      	ldr	r3, [pc, #104]	; (800f068 <USBD_LL_Init+0x94>)
 800effe:	2204      	movs	r2, #4
 800f000:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f002:	4b19      	ldr	r3, [pc, #100]	; (800f068 <USBD_LL_Init+0x94>)
 800f004:	2202      	movs	r2, #2
 800f006:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f008:	4b17      	ldr	r3, [pc, #92]	; (800f068 <USBD_LL_Init+0x94>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f00e:	4b16      	ldr	r3, [pc, #88]	; (800f068 <USBD_LL_Init+0x94>)
 800f010:	2202      	movs	r2, #2
 800f012:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f014:	4b14      	ldr	r3, [pc, #80]	; (800f068 <USBD_LL_Init+0x94>)
 800f016:	2200      	movs	r2, #0
 800f018:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f01a:	4b13      	ldr	r3, [pc, #76]	; (800f068 <USBD_LL_Init+0x94>)
 800f01c:	2200      	movs	r2, #0
 800f01e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f020:	4b11      	ldr	r3, [pc, #68]	; (800f068 <USBD_LL_Init+0x94>)
 800f022:	2200      	movs	r2, #0
 800f024:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f026:	4b10      	ldr	r3, [pc, #64]	; (800f068 <USBD_LL_Init+0x94>)
 800f028:	2200      	movs	r2, #0
 800f02a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f02c:	4b0e      	ldr	r3, [pc, #56]	; (800f068 <USBD_LL_Init+0x94>)
 800f02e:	2200      	movs	r2, #0
 800f030:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f032:	480d      	ldr	r0, [pc, #52]	; (800f068 <USBD_LL_Init+0x94>)
 800f034:	f7f6 fb51 	bl	80056da <HAL_PCD_Init>
 800f038:	4603      	mov	r3, r0
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d001      	beq.n	800f042 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f03e:	f7f2 fe75 	bl	8001d2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f042:	2180      	movs	r1, #128	; 0x80
 800f044:	4808      	ldr	r0, [pc, #32]	; (800f068 <USBD_LL_Init+0x94>)
 800f046:	f7f7 fda8 	bl	8006b9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f04a:	2240      	movs	r2, #64	; 0x40
 800f04c:	2100      	movs	r1, #0
 800f04e:	4806      	ldr	r0, [pc, #24]	; (800f068 <USBD_LL_Init+0x94>)
 800f050:	f7f7 fd5c 	bl	8006b0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f054:	2280      	movs	r2, #128	; 0x80
 800f056:	2101      	movs	r1, #1
 800f058:	4803      	ldr	r0, [pc, #12]	; (800f068 <USBD_LL_Init+0x94>)
 800f05a:	f7f7 fd57 	bl	8006b0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f05e:	2300      	movs	r3, #0
}
 800f060:	4618      	mov	r0, r3
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	20001b38 	.word	0x20001b38

0800f06c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f078:	2300      	movs	r3, #0
 800f07a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f082:	4618      	mov	r0, r3
 800f084:	f7f6 fc46 	bl	8005914 <HAL_PCD_Start>
 800f088:	4603      	mov	r3, r0
 800f08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f08c:	7bfb      	ldrb	r3, [r7, #15]
 800f08e:	4618      	mov	r0, r3
 800f090:	f000 f942 	bl	800f318 <USBD_Get_USB_Status>
 800f094:	4603      	mov	r3, r0
 800f096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f098:	7bbb      	ldrb	r3, [r7, #14]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b084      	sub	sp, #16
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	4608      	mov	r0, r1
 800f0ac:	4611      	mov	r1, r2
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	70fb      	strb	r3, [r7, #3]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	70bb      	strb	r3, [r7, #2]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f0ca:	78bb      	ldrb	r3, [r7, #2]
 800f0cc:	883a      	ldrh	r2, [r7, #0]
 800f0ce:	78f9      	ldrb	r1, [r7, #3]
 800f0d0:	f7f7 f917 	bl	8006302 <HAL_PCD_EP_Open>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f000 f91c 	bl	800f318 <USBD_Get_USB_Status>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b084      	sub	sp, #16
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0fe:	2300      	movs	r3, #0
 800f100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f108:	78fa      	ldrb	r2, [r7, #3]
 800f10a:	4611      	mov	r1, r2
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7f7 f960 	bl	80063d2 <HAL_PCD_EP_Close>
 800f112:	4603      	mov	r3, r0
 800f114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f116:	7bfb      	ldrb	r3, [r7, #15]
 800f118:	4618      	mov	r0, r3
 800f11a:	f000 f8fd 	bl	800f318 <USBD_Get_USB_Status>
 800f11e:	4603      	mov	r3, r0
 800f120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f122:	7bbb      	ldrb	r3, [r7, #14]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	460b      	mov	r3, r1
 800f136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f138:	2300      	movs	r3, #0
 800f13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f13c:	2300      	movs	r3, #0
 800f13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f146:	78fa      	ldrb	r2, [r7, #3]
 800f148:	4611      	mov	r1, r2
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7f7 fa38 	bl	80065c0 <HAL_PCD_EP_SetStall>
 800f150:	4603      	mov	r3, r0
 800f152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f154:	7bfb      	ldrb	r3, [r7, #15]
 800f156:	4618      	mov	r0, r3
 800f158:	f000 f8de 	bl	800f318 <USBD_Get_USB_Status>
 800f15c:	4603      	mov	r3, r0
 800f15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f160:	7bbb      	ldrb	r3, [r7, #14]
}
 800f162:	4618      	mov	r0, r3
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}

0800f16a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b084      	sub	sp, #16
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
 800f172:	460b      	mov	r3, r1
 800f174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f176:	2300      	movs	r3, #0
 800f178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f17a:	2300      	movs	r3, #0
 800f17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f184:	78fa      	ldrb	r2, [r7, #3]
 800f186:	4611      	mov	r1, r2
 800f188:	4618      	mov	r0, r3
 800f18a:	f7f7 fa7d 	bl	8006688 <HAL_PCD_EP_ClrStall>
 800f18e:	4603      	mov	r3, r0
 800f190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f192:	7bfb      	ldrb	r3, [r7, #15]
 800f194:	4618      	mov	r0, r3
 800f196:	f000 f8bf 	bl	800f318 <USBD_Get_USB_Status>
 800f19a:	4603      	mov	r3, r0
 800f19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3710      	adds	r7, #16
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f1bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	da0b      	bge.n	800f1dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f1c4:	78fb      	ldrb	r3, [r7, #3]
 800f1c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1ca:	68f9      	ldr	r1, [r7, #12]
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	00db      	lsls	r3, r3, #3
 800f1d0:	4413      	add	r3, r2
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	440b      	add	r3, r1
 800f1d6:	333e      	adds	r3, #62	; 0x3e
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	e00b      	b.n	800f1f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f1dc:	78fb      	ldrb	r3, [r7, #3]
 800f1de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1e2:	68f9      	ldr	r1, [r7, #12]
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	4413      	add	r3, r2
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	440b      	add	r3, r1
 800f1ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f1f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	460b      	mov	r3, r1
 800f20a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f20c:	2300      	movs	r3, #0
 800f20e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f210:	2300      	movs	r3, #0
 800f212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f21a:	78fa      	ldrb	r2, [r7, #3]
 800f21c:	4611      	mov	r1, r2
 800f21e:	4618      	mov	r0, r3
 800f220:	f7f7 f84a 	bl	80062b8 <HAL_PCD_SetAddress>
 800f224:	4603      	mov	r3, r0
 800f226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f228:	7bfb      	ldrb	r3, [r7, #15]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f000 f874 	bl	800f318 <USBD_Get_USB_Status>
 800f230:	4603      	mov	r3, r0
 800f232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f234:	7bbb      	ldrb	r3, [r7, #14]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b086      	sub	sp, #24
 800f242:	af00      	add	r7, sp, #0
 800f244:	60f8      	str	r0, [r7, #12]
 800f246:	607a      	str	r2, [r7, #4]
 800f248:	603b      	str	r3, [r7, #0]
 800f24a:	460b      	mov	r3, r1
 800f24c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f24e:	2300      	movs	r3, #0
 800f250:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f252:	2300      	movs	r3, #0
 800f254:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f25c:	7af9      	ldrb	r1, [r7, #11]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	687a      	ldr	r2, [r7, #4]
 800f262:	f7f7 f963 	bl	800652c <HAL_PCD_EP_Transmit>
 800f266:	4603      	mov	r3, r0
 800f268:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f26a:	7dfb      	ldrb	r3, [r7, #23]
 800f26c:	4618      	mov	r0, r3
 800f26e:	f000 f853 	bl	800f318 <USBD_Get_USB_Status>
 800f272:	4603      	mov	r3, r0
 800f274:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f276:	7dbb      	ldrb	r3, [r7, #22]
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3718      	adds	r7, #24
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b086      	sub	sp, #24
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	607a      	str	r2, [r7, #4]
 800f28a:	603b      	str	r3, [r7, #0]
 800f28c:	460b      	mov	r3, r1
 800f28e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f290:	2300      	movs	r3, #0
 800f292:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f294:	2300      	movs	r3, #0
 800f296:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f29e:	7af9      	ldrb	r1, [r7, #11]
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	f7f7 f8df 	bl	8006466 <HAL_PCD_EP_Receive>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2ac:	7dfb      	ldrb	r3, [r7, #23]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f000 f832 	bl	800f318 <USBD_Get_USB_Status>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3718      	adds	r7, #24
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b082      	sub	sp, #8
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f2d4:	78fa      	ldrb	r2, [r7, #3]
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7f7 f90f 	bl	80064fc <HAL_PCD_EP_GetRxCount>
 800f2de:	4603      	mov	r3, r0
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f2f0:	4b03      	ldr	r3, [pc, #12]	; (800f300 <USBD_static_malloc+0x18>)
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	370c      	adds	r7, #12
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr
 800f2fe:	bf00      	nop
 800f300:	20002044 	.word	0x20002044

0800f304 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]

}
 800f30c:	bf00      	nop
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr

0800f318 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	4603      	mov	r3, r0
 800f320:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f322:	2300      	movs	r3, #0
 800f324:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f326:	79fb      	ldrb	r3, [r7, #7]
 800f328:	2b03      	cmp	r3, #3
 800f32a:	d817      	bhi.n	800f35c <USBD_Get_USB_Status+0x44>
 800f32c:	a201      	add	r2, pc, #4	; (adr r2, 800f334 <USBD_Get_USB_Status+0x1c>)
 800f32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f332:	bf00      	nop
 800f334:	0800f345 	.word	0x0800f345
 800f338:	0800f34b 	.word	0x0800f34b
 800f33c:	0800f351 	.word	0x0800f351
 800f340:	0800f357 	.word	0x0800f357
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f344:	2300      	movs	r3, #0
 800f346:	73fb      	strb	r3, [r7, #15]
    break;
 800f348:	e00b      	b.n	800f362 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f34a:	2303      	movs	r3, #3
 800f34c:	73fb      	strb	r3, [r7, #15]
    break;
 800f34e:	e008      	b.n	800f362 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f350:	2301      	movs	r3, #1
 800f352:	73fb      	strb	r3, [r7, #15]
    break;
 800f354:	e005      	b.n	800f362 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f356:	2303      	movs	r3, #3
 800f358:	73fb      	strb	r3, [r7, #15]
    break;
 800f35a:	e002      	b.n	800f362 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f35c:	2303      	movs	r3, #3
 800f35e:	73fb      	strb	r3, [r7, #15]
    break;
 800f360:	bf00      	nop
  }
  return usb_status;
 800f362:	7bfb      	ldrb	r3, [r7, #15]
}
 800f364:	4618      	mov	r0, r3
 800f366:	3714      	adds	r7, #20
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <malloc>:
 800f370:	4b02      	ldr	r3, [pc, #8]	; (800f37c <malloc+0xc>)
 800f372:	4601      	mov	r1, r0
 800f374:	6818      	ldr	r0, [r3, #0]
 800f376:	f000 b82b 	b.w	800f3d0 <_malloc_r>
 800f37a:	bf00      	nop
 800f37c:	20000178 	.word	0x20000178

0800f380 <free>:
 800f380:	4b02      	ldr	r3, [pc, #8]	; (800f38c <free+0xc>)
 800f382:	4601      	mov	r1, r0
 800f384:	6818      	ldr	r0, [r3, #0]
 800f386:	f001 bd2d 	b.w	8010de4 <_free_r>
 800f38a:	bf00      	nop
 800f38c:	20000178 	.word	0x20000178

0800f390 <sbrk_aligned>:
 800f390:	b570      	push	{r4, r5, r6, lr}
 800f392:	4e0e      	ldr	r6, [pc, #56]	; (800f3cc <sbrk_aligned+0x3c>)
 800f394:	460c      	mov	r4, r1
 800f396:	6831      	ldr	r1, [r6, #0]
 800f398:	4605      	mov	r5, r0
 800f39a:	b911      	cbnz	r1, 800f3a2 <sbrk_aligned+0x12>
 800f39c:	f000 fe4c 	bl	8010038 <_sbrk_r>
 800f3a0:	6030      	str	r0, [r6, #0]
 800f3a2:	4621      	mov	r1, r4
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	f000 fe47 	bl	8010038 <_sbrk_r>
 800f3aa:	1c43      	adds	r3, r0, #1
 800f3ac:	d00a      	beq.n	800f3c4 <sbrk_aligned+0x34>
 800f3ae:	1cc4      	adds	r4, r0, #3
 800f3b0:	f024 0403 	bic.w	r4, r4, #3
 800f3b4:	42a0      	cmp	r0, r4
 800f3b6:	d007      	beq.n	800f3c8 <sbrk_aligned+0x38>
 800f3b8:	1a21      	subs	r1, r4, r0
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	f000 fe3c 	bl	8010038 <_sbrk_r>
 800f3c0:	3001      	adds	r0, #1
 800f3c2:	d101      	bne.n	800f3c8 <sbrk_aligned+0x38>
 800f3c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	bd70      	pop	{r4, r5, r6, pc}
 800f3cc:	20002268 	.word	0x20002268

0800f3d0 <_malloc_r>:
 800f3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3d4:	1ccd      	adds	r5, r1, #3
 800f3d6:	f025 0503 	bic.w	r5, r5, #3
 800f3da:	3508      	adds	r5, #8
 800f3dc:	2d0c      	cmp	r5, #12
 800f3de:	bf38      	it	cc
 800f3e0:	250c      	movcc	r5, #12
 800f3e2:	2d00      	cmp	r5, #0
 800f3e4:	4607      	mov	r7, r0
 800f3e6:	db01      	blt.n	800f3ec <_malloc_r+0x1c>
 800f3e8:	42a9      	cmp	r1, r5
 800f3ea:	d905      	bls.n	800f3f8 <_malloc_r+0x28>
 800f3ec:	230c      	movs	r3, #12
 800f3ee:	603b      	str	r3, [r7, #0]
 800f3f0:	2600      	movs	r6, #0
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f4cc <_malloc_r+0xfc>
 800f3fc:	f000 f868 	bl	800f4d0 <__malloc_lock>
 800f400:	f8d8 3000 	ldr.w	r3, [r8]
 800f404:	461c      	mov	r4, r3
 800f406:	bb5c      	cbnz	r4, 800f460 <_malloc_r+0x90>
 800f408:	4629      	mov	r1, r5
 800f40a:	4638      	mov	r0, r7
 800f40c:	f7ff ffc0 	bl	800f390 <sbrk_aligned>
 800f410:	1c43      	adds	r3, r0, #1
 800f412:	4604      	mov	r4, r0
 800f414:	d155      	bne.n	800f4c2 <_malloc_r+0xf2>
 800f416:	f8d8 4000 	ldr.w	r4, [r8]
 800f41a:	4626      	mov	r6, r4
 800f41c:	2e00      	cmp	r6, #0
 800f41e:	d145      	bne.n	800f4ac <_malloc_r+0xdc>
 800f420:	2c00      	cmp	r4, #0
 800f422:	d048      	beq.n	800f4b6 <_malloc_r+0xe6>
 800f424:	6823      	ldr	r3, [r4, #0]
 800f426:	4631      	mov	r1, r6
 800f428:	4638      	mov	r0, r7
 800f42a:	eb04 0903 	add.w	r9, r4, r3
 800f42e:	f000 fe03 	bl	8010038 <_sbrk_r>
 800f432:	4581      	cmp	r9, r0
 800f434:	d13f      	bne.n	800f4b6 <_malloc_r+0xe6>
 800f436:	6821      	ldr	r1, [r4, #0]
 800f438:	1a6d      	subs	r5, r5, r1
 800f43a:	4629      	mov	r1, r5
 800f43c:	4638      	mov	r0, r7
 800f43e:	f7ff ffa7 	bl	800f390 <sbrk_aligned>
 800f442:	3001      	adds	r0, #1
 800f444:	d037      	beq.n	800f4b6 <_malloc_r+0xe6>
 800f446:	6823      	ldr	r3, [r4, #0]
 800f448:	442b      	add	r3, r5
 800f44a:	6023      	str	r3, [r4, #0]
 800f44c:	f8d8 3000 	ldr.w	r3, [r8]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d038      	beq.n	800f4c6 <_malloc_r+0xf6>
 800f454:	685a      	ldr	r2, [r3, #4]
 800f456:	42a2      	cmp	r2, r4
 800f458:	d12b      	bne.n	800f4b2 <_malloc_r+0xe2>
 800f45a:	2200      	movs	r2, #0
 800f45c:	605a      	str	r2, [r3, #4]
 800f45e:	e00f      	b.n	800f480 <_malloc_r+0xb0>
 800f460:	6822      	ldr	r2, [r4, #0]
 800f462:	1b52      	subs	r2, r2, r5
 800f464:	d41f      	bmi.n	800f4a6 <_malloc_r+0xd6>
 800f466:	2a0b      	cmp	r2, #11
 800f468:	d917      	bls.n	800f49a <_malloc_r+0xca>
 800f46a:	1961      	adds	r1, r4, r5
 800f46c:	42a3      	cmp	r3, r4
 800f46e:	6025      	str	r5, [r4, #0]
 800f470:	bf18      	it	ne
 800f472:	6059      	strne	r1, [r3, #4]
 800f474:	6863      	ldr	r3, [r4, #4]
 800f476:	bf08      	it	eq
 800f478:	f8c8 1000 	streq.w	r1, [r8]
 800f47c:	5162      	str	r2, [r4, r5]
 800f47e:	604b      	str	r3, [r1, #4]
 800f480:	4638      	mov	r0, r7
 800f482:	f104 060b 	add.w	r6, r4, #11
 800f486:	f000 f829 	bl	800f4dc <__malloc_unlock>
 800f48a:	f026 0607 	bic.w	r6, r6, #7
 800f48e:	1d23      	adds	r3, r4, #4
 800f490:	1af2      	subs	r2, r6, r3
 800f492:	d0ae      	beq.n	800f3f2 <_malloc_r+0x22>
 800f494:	1b9b      	subs	r3, r3, r6
 800f496:	50a3      	str	r3, [r4, r2]
 800f498:	e7ab      	b.n	800f3f2 <_malloc_r+0x22>
 800f49a:	42a3      	cmp	r3, r4
 800f49c:	6862      	ldr	r2, [r4, #4]
 800f49e:	d1dd      	bne.n	800f45c <_malloc_r+0x8c>
 800f4a0:	f8c8 2000 	str.w	r2, [r8]
 800f4a4:	e7ec      	b.n	800f480 <_malloc_r+0xb0>
 800f4a6:	4623      	mov	r3, r4
 800f4a8:	6864      	ldr	r4, [r4, #4]
 800f4aa:	e7ac      	b.n	800f406 <_malloc_r+0x36>
 800f4ac:	4634      	mov	r4, r6
 800f4ae:	6876      	ldr	r6, [r6, #4]
 800f4b0:	e7b4      	b.n	800f41c <_malloc_r+0x4c>
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	e7cc      	b.n	800f450 <_malloc_r+0x80>
 800f4b6:	230c      	movs	r3, #12
 800f4b8:	603b      	str	r3, [r7, #0]
 800f4ba:	4638      	mov	r0, r7
 800f4bc:	f000 f80e 	bl	800f4dc <__malloc_unlock>
 800f4c0:	e797      	b.n	800f3f2 <_malloc_r+0x22>
 800f4c2:	6025      	str	r5, [r4, #0]
 800f4c4:	e7dc      	b.n	800f480 <_malloc_r+0xb0>
 800f4c6:	605b      	str	r3, [r3, #4]
 800f4c8:	deff      	udf	#255	; 0xff
 800f4ca:	bf00      	nop
 800f4cc:	20002264 	.word	0x20002264

0800f4d0 <__malloc_lock>:
 800f4d0:	4801      	ldr	r0, [pc, #4]	; (800f4d8 <__malloc_lock+0x8>)
 800f4d2:	f000 bdfd 	b.w	80100d0 <__retarget_lock_acquire_recursive>
 800f4d6:	bf00      	nop
 800f4d8:	200023ac 	.word	0x200023ac

0800f4dc <__malloc_unlock>:
 800f4dc:	4801      	ldr	r0, [pc, #4]	; (800f4e4 <__malloc_unlock+0x8>)
 800f4de:	f000 bdf8 	b.w	80100d2 <__retarget_lock_release_recursive>
 800f4e2:	bf00      	nop
 800f4e4:	200023ac 	.word	0x200023ac

0800f4e8 <__cvt>:
 800f4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ec:	ec55 4b10 	vmov	r4, r5, d0
 800f4f0:	2d00      	cmp	r5, #0
 800f4f2:	460e      	mov	r6, r1
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	462b      	mov	r3, r5
 800f4f8:	bfbb      	ittet	lt
 800f4fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f4fe:	461d      	movlt	r5, r3
 800f500:	2300      	movge	r3, #0
 800f502:	232d      	movlt	r3, #45	; 0x2d
 800f504:	700b      	strb	r3, [r1, #0]
 800f506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f50c:	4691      	mov	r9, r2
 800f50e:	f023 0820 	bic.w	r8, r3, #32
 800f512:	bfbc      	itt	lt
 800f514:	4622      	movlt	r2, r4
 800f516:	4614      	movlt	r4, r2
 800f518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f51c:	d005      	beq.n	800f52a <__cvt+0x42>
 800f51e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f522:	d100      	bne.n	800f526 <__cvt+0x3e>
 800f524:	3601      	adds	r6, #1
 800f526:	2102      	movs	r1, #2
 800f528:	e000      	b.n	800f52c <__cvt+0x44>
 800f52a:	2103      	movs	r1, #3
 800f52c:	ab03      	add	r3, sp, #12
 800f52e:	9301      	str	r3, [sp, #4]
 800f530:	ab02      	add	r3, sp, #8
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	ec45 4b10 	vmov	d0, r4, r5
 800f538:	4653      	mov	r3, sl
 800f53a:	4632      	mov	r2, r6
 800f53c:	f000 fe60 	bl	8010200 <_dtoa_r>
 800f540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f544:	4607      	mov	r7, r0
 800f546:	d102      	bne.n	800f54e <__cvt+0x66>
 800f548:	f019 0f01 	tst.w	r9, #1
 800f54c:	d022      	beq.n	800f594 <__cvt+0xac>
 800f54e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f552:	eb07 0906 	add.w	r9, r7, r6
 800f556:	d110      	bne.n	800f57a <__cvt+0x92>
 800f558:	783b      	ldrb	r3, [r7, #0]
 800f55a:	2b30      	cmp	r3, #48	; 0x30
 800f55c:	d10a      	bne.n	800f574 <__cvt+0x8c>
 800f55e:	2200      	movs	r2, #0
 800f560:	2300      	movs	r3, #0
 800f562:	4620      	mov	r0, r4
 800f564:	4629      	mov	r1, r5
 800f566:	f7f1 fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800f56a:	b918      	cbnz	r0, 800f574 <__cvt+0x8c>
 800f56c:	f1c6 0601 	rsb	r6, r6, #1
 800f570:	f8ca 6000 	str.w	r6, [sl]
 800f574:	f8da 3000 	ldr.w	r3, [sl]
 800f578:	4499      	add	r9, r3
 800f57a:	2200      	movs	r2, #0
 800f57c:	2300      	movs	r3, #0
 800f57e:	4620      	mov	r0, r4
 800f580:	4629      	mov	r1, r5
 800f582:	f7f1 faa9 	bl	8000ad8 <__aeabi_dcmpeq>
 800f586:	b108      	cbz	r0, 800f58c <__cvt+0xa4>
 800f588:	f8cd 900c 	str.w	r9, [sp, #12]
 800f58c:	2230      	movs	r2, #48	; 0x30
 800f58e:	9b03      	ldr	r3, [sp, #12]
 800f590:	454b      	cmp	r3, r9
 800f592:	d307      	bcc.n	800f5a4 <__cvt+0xbc>
 800f594:	9b03      	ldr	r3, [sp, #12]
 800f596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f598:	1bdb      	subs	r3, r3, r7
 800f59a:	4638      	mov	r0, r7
 800f59c:	6013      	str	r3, [r2, #0]
 800f59e:	b004      	add	sp, #16
 800f5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5a4:	1c59      	adds	r1, r3, #1
 800f5a6:	9103      	str	r1, [sp, #12]
 800f5a8:	701a      	strb	r2, [r3, #0]
 800f5aa:	e7f0      	b.n	800f58e <__cvt+0xa6>

0800f5ac <__exponent>:
 800f5ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2900      	cmp	r1, #0
 800f5b2:	bfb8      	it	lt
 800f5b4:	4249      	neglt	r1, r1
 800f5b6:	f803 2b02 	strb.w	r2, [r3], #2
 800f5ba:	bfb4      	ite	lt
 800f5bc:	222d      	movlt	r2, #45	; 0x2d
 800f5be:	222b      	movge	r2, #43	; 0x2b
 800f5c0:	2909      	cmp	r1, #9
 800f5c2:	7042      	strb	r2, [r0, #1]
 800f5c4:	dd2a      	ble.n	800f61c <__exponent+0x70>
 800f5c6:	f10d 0207 	add.w	r2, sp, #7
 800f5ca:	4617      	mov	r7, r2
 800f5cc:	260a      	movs	r6, #10
 800f5ce:	4694      	mov	ip, r2
 800f5d0:	fb91 f5f6 	sdiv	r5, r1, r6
 800f5d4:	fb06 1415 	mls	r4, r6, r5, r1
 800f5d8:	3430      	adds	r4, #48	; 0x30
 800f5da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f5de:	460c      	mov	r4, r1
 800f5e0:	2c63      	cmp	r4, #99	; 0x63
 800f5e2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	dcf1      	bgt.n	800f5ce <__exponent+0x22>
 800f5ea:	3130      	adds	r1, #48	; 0x30
 800f5ec:	f1ac 0402 	sub.w	r4, ip, #2
 800f5f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f5f4:	1c41      	adds	r1, r0, #1
 800f5f6:	4622      	mov	r2, r4
 800f5f8:	42ba      	cmp	r2, r7
 800f5fa:	d30a      	bcc.n	800f612 <__exponent+0x66>
 800f5fc:	f10d 0209 	add.w	r2, sp, #9
 800f600:	eba2 020c 	sub.w	r2, r2, ip
 800f604:	42bc      	cmp	r4, r7
 800f606:	bf88      	it	hi
 800f608:	2200      	movhi	r2, #0
 800f60a:	4413      	add	r3, r2
 800f60c:	1a18      	subs	r0, r3, r0
 800f60e:	b003      	add	sp, #12
 800f610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f612:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f616:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f61a:	e7ed      	b.n	800f5f8 <__exponent+0x4c>
 800f61c:	2330      	movs	r3, #48	; 0x30
 800f61e:	3130      	adds	r1, #48	; 0x30
 800f620:	7083      	strb	r3, [r0, #2]
 800f622:	70c1      	strb	r1, [r0, #3]
 800f624:	1d03      	adds	r3, r0, #4
 800f626:	e7f1      	b.n	800f60c <__exponent+0x60>

0800f628 <_printf_float>:
 800f628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62c:	ed2d 8b02 	vpush	{d8}
 800f630:	b08d      	sub	sp, #52	; 0x34
 800f632:	460c      	mov	r4, r1
 800f634:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f638:	4616      	mov	r6, r2
 800f63a:	461f      	mov	r7, r3
 800f63c:	4605      	mov	r5, r0
 800f63e:	f000 fcc3 	bl	800ffc8 <_localeconv_r>
 800f642:	f8d0 a000 	ldr.w	sl, [r0]
 800f646:	4650      	mov	r0, sl
 800f648:	f7f0 fe1a 	bl	8000280 <strlen>
 800f64c:	2300      	movs	r3, #0
 800f64e:	930a      	str	r3, [sp, #40]	; 0x28
 800f650:	6823      	ldr	r3, [r4, #0]
 800f652:	9305      	str	r3, [sp, #20]
 800f654:	f8d8 3000 	ldr.w	r3, [r8]
 800f658:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f65c:	3307      	adds	r3, #7
 800f65e:	f023 0307 	bic.w	r3, r3, #7
 800f662:	f103 0208 	add.w	r2, r3, #8
 800f666:	f8c8 2000 	str.w	r2, [r8]
 800f66a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f66e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f672:	9307      	str	r3, [sp, #28]
 800f674:	f8cd 8018 	str.w	r8, [sp, #24]
 800f678:	ee08 0a10 	vmov	s16, r0
 800f67c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f684:	4b9e      	ldr	r3, [pc, #632]	; (800f900 <_printf_float+0x2d8>)
 800f686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f68a:	f7f1 fa57 	bl	8000b3c <__aeabi_dcmpun>
 800f68e:	bb88      	cbnz	r0, 800f6f4 <_printf_float+0xcc>
 800f690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f694:	4b9a      	ldr	r3, [pc, #616]	; (800f900 <_printf_float+0x2d8>)
 800f696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f69a:	f7f1 fa31 	bl	8000b00 <__aeabi_dcmple>
 800f69e:	bb48      	cbnz	r0, 800f6f4 <_printf_float+0xcc>
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	4640      	mov	r0, r8
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	f7f1 fa20 	bl	8000aec <__aeabi_dcmplt>
 800f6ac:	b110      	cbz	r0, 800f6b4 <_printf_float+0x8c>
 800f6ae:	232d      	movs	r3, #45	; 0x2d
 800f6b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6b4:	4a93      	ldr	r2, [pc, #588]	; (800f904 <_printf_float+0x2dc>)
 800f6b6:	4b94      	ldr	r3, [pc, #592]	; (800f908 <_printf_float+0x2e0>)
 800f6b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f6bc:	bf94      	ite	ls
 800f6be:	4690      	movls	r8, r2
 800f6c0:	4698      	movhi	r8, r3
 800f6c2:	2303      	movs	r3, #3
 800f6c4:	6123      	str	r3, [r4, #16]
 800f6c6:	9b05      	ldr	r3, [sp, #20]
 800f6c8:	f023 0304 	bic.w	r3, r3, #4
 800f6cc:	6023      	str	r3, [r4, #0]
 800f6ce:	f04f 0900 	mov.w	r9, #0
 800f6d2:	9700      	str	r7, [sp, #0]
 800f6d4:	4633      	mov	r3, r6
 800f6d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f6d8:	4621      	mov	r1, r4
 800f6da:	4628      	mov	r0, r5
 800f6dc:	f000 f9da 	bl	800fa94 <_printf_common>
 800f6e0:	3001      	adds	r0, #1
 800f6e2:	f040 8090 	bne.w	800f806 <_printf_float+0x1de>
 800f6e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6ea:	b00d      	add	sp, #52	; 0x34
 800f6ec:	ecbd 8b02 	vpop	{d8}
 800f6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f4:	4642      	mov	r2, r8
 800f6f6:	464b      	mov	r3, r9
 800f6f8:	4640      	mov	r0, r8
 800f6fa:	4649      	mov	r1, r9
 800f6fc:	f7f1 fa1e 	bl	8000b3c <__aeabi_dcmpun>
 800f700:	b140      	cbz	r0, 800f714 <_printf_float+0xec>
 800f702:	464b      	mov	r3, r9
 800f704:	2b00      	cmp	r3, #0
 800f706:	bfbc      	itt	lt
 800f708:	232d      	movlt	r3, #45	; 0x2d
 800f70a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f70e:	4a7f      	ldr	r2, [pc, #508]	; (800f90c <_printf_float+0x2e4>)
 800f710:	4b7f      	ldr	r3, [pc, #508]	; (800f910 <_printf_float+0x2e8>)
 800f712:	e7d1      	b.n	800f6b8 <_printf_float+0x90>
 800f714:	6863      	ldr	r3, [r4, #4]
 800f716:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f71a:	9206      	str	r2, [sp, #24]
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	d13f      	bne.n	800f7a0 <_printf_float+0x178>
 800f720:	2306      	movs	r3, #6
 800f722:	6063      	str	r3, [r4, #4]
 800f724:	9b05      	ldr	r3, [sp, #20]
 800f726:	6861      	ldr	r1, [r4, #4]
 800f728:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f72c:	2300      	movs	r3, #0
 800f72e:	9303      	str	r3, [sp, #12]
 800f730:	ab0a      	add	r3, sp, #40	; 0x28
 800f732:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f736:	ab09      	add	r3, sp, #36	; 0x24
 800f738:	ec49 8b10 	vmov	d0, r8, r9
 800f73c:	9300      	str	r3, [sp, #0]
 800f73e:	6022      	str	r2, [r4, #0]
 800f740:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f744:	4628      	mov	r0, r5
 800f746:	f7ff fecf 	bl	800f4e8 <__cvt>
 800f74a:	9b06      	ldr	r3, [sp, #24]
 800f74c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f74e:	2b47      	cmp	r3, #71	; 0x47
 800f750:	4680      	mov	r8, r0
 800f752:	d108      	bne.n	800f766 <_printf_float+0x13e>
 800f754:	1cc8      	adds	r0, r1, #3
 800f756:	db02      	blt.n	800f75e <_printf_float+0x136>
 800f758:	6863      	ldr	r3, [r4, #4]
 800f75a:	4299      	cmp	r1, r3
 800f75c:	dd41      	ble.n	800f7e2 <_printf_float+0x1ba>
 800f75e:	f1ab 0302 	sub.w	r3, fp, #2
 800f762:	fa5f fb83 	uxtb.w	fp, r3
 800f766:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f76a:	d820      	bhi.n	800f7ae <_printf_float+0x186>
 800f76c:	3901      	subs	r1, #1
 800f76e:	465a      	mov	r2, fp
 800f770:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f774:	9109      	str	r1, [sp, #36]	; 0x24
 800f776:	f7ff ff19 	bl	800f5ac <__exponent>
 800f77a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f77c:	1813      	adds	r3, r2, r0
 800f77e:	2a01      	cmp	r2, #1
 800f780:	4681      	mov	r9, r0
 800f782:	6123      	str	r3, [r4, #16]
 800f784:	dc02      	bgt.n	800f78c <_printf_float+0x164>
 800f786:	6822      	ldr	r2, [r4, #0]
 800f788:	07d2      	lsls	r2, r2, #31
 800f78a:	d501      	bpl.n	800f790 <_printf_float+0x168>
 800f78c:	3301      	adds	r3, #1
 800f78e:	6123      	str	r3, [r4, #16]
 800f790:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f794:	2b00      	cmp	r3, #0
 800f796:	d09c      	beq.n	800f6d2 <_printf_float+0xaa>
 800f798:	232d      	movs	r3, #45	; 0x2d
 800f79a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f79e:	e798      	b.n	800f6d2 <_printf_float+0xaa>
 800f7a0:	9a06      	ldr	r2, [sp, #24]
 800f7a2:	2a47      	cmp	r2, #71	; 0x47
 800f7a4:	d1be      	bne.n	800f724 <_printf_float+0xfc>
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d1bc      	bne.n	800f724 <_printf_float+0xfc>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	e7b9      	b.n	800f722 <_printf_float+0xfa>
 800f7ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f7b2:	d118      	bne.n	800f7e6 <_printf_float+0x1be>
 800f7b4:	2900      	cmp	r1, #0
 800f7b6:	6863      	ldr	r3, [r4, #4]
 800f7b8:	dd0b      	ble.n	800f7d2 <_printf_float+0x1aa>
 800f7ba:	6121      	str	r1, [r4, #16]
 800f7bc:	b913      	cbnz	r3, 800f7c4 <_printf_float+0x19c>
 800f7be:	6822      	ldr	r2, [r4, #0]
 800f7c0:	07d0      	lsls	r0, r2, #31
 800f7c2:	d502      	bpl.n	800f7ca <_printf_float+0x1a2>
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	440b      	add	r3, r1
 800f7c8:	6123      	str	r3, [r4, #16]
 800f7ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800f7cc:	f04f 0900 	mov.w	r9, #0
 800f7d0:	e7de      	b.n	800f790 <_printf_float+0x168>
 800f7d2:	b913      	cbnz	r3, 800f7da <_printf_float+0x1b2>
 800f7d4:	6822      	ldr	r2, [r4, #0]
 800f7d6:	07d2      	lsls	r2, r2, #31
 800f7d8:	d501      	bpl.n	800f7de <_printf_float+0x1b6>
 800f7da:	3302      	adds	r3, #2
 800f7dc:	e7f4      	b.n	800f7c8 <_printf_float+0x1a0>
 800f7de:	2301      	movs	r3, #1
 800f7e0:	e7f2      	b.n	800f7c8 <_printf_float+0x1a0>
 800f7e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7e8:	4299      	cmp	r1, r3
 800f7ea:	db05      	blt.n	800f7f8 <_printf_float+0x1d0>
 800f7ec:	6823      	ldr	r3, [r4, #0]
 800f7ee:	6121      	str	r1, [r4, #16]
 800f7f0:	07d8      	lsls	r0, r3, #31
 800f7f2:	d5ea      	bpl.n	800f7ca <_printf_float+0x1a2>
 800f7f4:	1c4b      	adds	r3, r1, #1
 800f7f6:	e7e7      	b.n	800f7c8 <_printf_float+0x1a0>
 800f7f8:	2900      	cmp	r1, #0
 800f7fa:	bfd4      	ite	le
 800f7fc:	f1c1 0202 	rsble	r2, r1, #2
 800f800:	2201      	movgt	r2, #1
 800f802:	4413      	add	r3, r2
 800f804:	e7e0      	b.n	800f7c8 <_printf_float+0x1a0>
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	055a      	lsls	r2, r3, #21
 800f80a:	d407      	bmi.n	800f81c <_printf_float+0x1f4>
 800f80c:	6923      	ldr	r3, [r4, #16]
 800f80e:	4642      	mov	r2, r8
 800f810:	4631      	mov	r1, r6
 800f812:	4628      	mov	r0, r5
 800f814:	47b8      	blx	r7
 800f816:	3001      	adds	r0, #1
 800f818:	d12c      	bne.n	800f874 <_printf_float+0x24c>
 800f81a:	e764      	b.n	800f6e6 <_printf_float+0xbe>
 800f81c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f820:	f240 80e0 	bls.w	800f9e4 <_printf_float+0x3bc>
 800f824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f828:	2200      	movs	r2, #0
 800f82a:	2300      	movs	r3, #0
 800f82c:	f7f1 f954 	bl	8000ad8 <__aeabi_dcmpeq>
 800f830:	2800      	cmp	r0, #0
 800f832:	d034      	beq.n	800f89e <_printf_float+0x276>
 800f834:	4a37      	ldr	r2, [pc, #220]	; (800f914 <_printf_float+0x2ec>)
 800f836:	2301      	movs	r3, #1
 800f838:	4631      	mov	r1, r6
 800f83a:	4628      	mov	r0, r5
 800f83c:	47b8      	blx	r7
 800f83e:	3001      	adds	r0, #1
 800f840:	f43f af51 	beq.w	800f6e6 <_printf_float+0xbe>
 800f844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f848:	429a      	cmp	r2, r3
 800f84a:	db02      	blt.n	800f852 <_printf_float+0x22a>
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	07d8      	lsls	r0, r3, #31
 800f850:	d510      	bpl.n	800f874 <_printf_float+0x24c>
 800f852:	ee18 3a10 	vmov	r3, s16
 800f856:	4652      	mov	r2, sl
 800f858:	4631      	mov	r1, r6
 800f85a:	4628      	mov	r0, r5
 800f85c:	47b8      	blx	r7
 800f85e:	3001      	adds	r0, #1
 800f860:	f43f af41 	beq.w	800f6e6 <_printf_float+0xbe>
 800f864:	f04f 0800 	mov.w	r8, #0
 800f868:	f104 091a 	add.w	r9, r4, #26
 800f86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f86e:	3b01      	subs	r3, #1
 800f870:	4543      	cmp	r3, r8
 800f872:	dc09      	bgt.n	800f888 <_printf_float+0x260>
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	079b      	lsls	r3, r3, #30
 800f878:	f100 8107 	bmi.w	800fa8a <_printf_float+0x462>
 800f87c:	68e0      	ldr	r0, [r4, #12]
 800f87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f880:	4298      	cmp	r0, r3
 800f882:	bfb8      	it	lt
 800f884:	4618      	movlt	r0, r3
 800f886:	e730      	b.n	800f6ea <_printf_float+0xc2>
 800f888:	2301      	movs	r3, #1
 800f88a:	464a      	mov	r2, r9
 800f88c:	4631      	mov	r1, r6
 800f88e:	4628      	mov	r0, r5
 800f890:	47b8      	blx	r7
 800f892:	3001      	adds	r0, #1
 800f894:	f43f af27 	beq.w	800f6e6 <_printf_float+0xbe>
 800f898:	f108 0801 	add.w	r8, r8, #1
 800f89c:	e7e6      	b.n	800f86c <_printf_float+0x244>
 800f89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	dc39      	bgt.n	800f918 <_printf_float+0x2f0>
 800f8a4:	4a1b      	ldr	r2, [pc, #108]	; (800f914 <_printf_float+0x2ec>)
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	4631      	mov	r1, r6
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	47b8      	blx	r7
 800f8ae:	3001      	adds	r0, #1
 800f8b0:	f43f af19 	beq.w	800f6e6 <_printf_float+0xbe>
 800f8b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	d102      	bne.n	800f8c2 <_printf_float+0x29a>
 800f8bc:	6823      	ldr	r3, [r4, #0]
 800f8be:	07d9      	lsls	r1, r3, #31
 800f8c0:	d5d8      	bpl.n	800f874 <_printf_float+0x24c>
 800f8c2:	ee18 3a10 	vmov	r3, s16
 800f8c6:	4652      	mov	r2, sl
 800f8c8:	4631      	mov	r1, r6
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	47b8      	blx	r7
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	f43f af09 	beq.w	800f6e6 <_printf_float+0xbe>
 800f8d4:	f04f 0900 	mov.w	r9, #0
 800f8d8:	f104 0a1a 	add.w	sl, r4, #26
 800f8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8de:	425b      	negs	r3, r3
 800f8e0:	454b      	cmp	r3, r9
 800f8e2:	dc01      	bgt.n	800f8e8 <_printf_float+0x2c0>
 800f8e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8e6:	e792      	b.n	800f80e <_printf_float+0x1e6>
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	4652      	mov	r2, sl
 800f8ec:	4631      	mov	r1, r6
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	47b8      	blx	r7
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	f43f aef7 	beq.w	800f6e6 <_printf_float+0xbe>
 800f8f8:	f109 0901 	add.w	r9, r9, #1
 800f8fc:	e7ee      	b.n	800f8dc <_printf_float+0x2b4>
 800f8fe:	bf00      	nop
 800f900:	7fefffff 	.word	0x7fefffff
 800f904:	0801242c 	.word	0x0801242c
 800f908:	08012430 	.word	0x08012430
 800f90c:	08012434 	.word	0x08012434
 800f910:	08012438 	.word	0x08012438
 800f914:	0801243c 	.word	0x0801243c
 800f918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f91a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f91c:	429a      	cmp	r2, r3
 800f91e:	bfa8      	it	ge
 800f920:	461a      	movge	r2, r3
 800f922:	2a00      	cmp	r2, #0
 800f924:	4691      	mov	r9, r2
 800f926:	dc37      	bgt.n	800f998 <_printf_float+0x370>
 800f928:	f04f 0b00 	mov.w	fp, #0
 800f92c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f930:	f104 021a 	add.w	r2, r4, #26
 800f934:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f936:	9305      	str	r3, [sp, #20]
 800f938:	eba3 0309 	sub.w	r3, r3, r9
 800f93c:	455b      	cmp	r3, fp
 800f93e:	dc33      	bgt.n	800f9a8 <_printf_float+0x380>
 800f940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f944:	429a      	cmp	r2, r3
 800f946:	db3b      	blt.n	800f9c0 <_printf_float+0x398>
 800f948:	6823      	ldr	r3, [r4, #0]
 800f94a:	07da      	lsls	r2, r3, #31
 800f94c:	d438      	bmi.n	800f9c0 <_printf_float+0x398>
 800f94e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f952:	eba2 0903 	sub.w	r9, r2, r3
 800f956:	9b05      	ldr	r3, [sp, #20]
 800f958:	1ad2      	subs	r2, r2, r3
 800f95a:	4591      	cmp	r9, r2
 800f95c:	bfa8      	it	ge
 800f95e:	4691      	movge	r9, r2
 800f960:	f1b9 0f00 	cmp.w	r9, #0
 800f964:	dc35      	bgt.n	800f9d2 <_printf_float+0x3aa>
 800f966:	f04f 0800 	mov.w	r8, #0
 800f96a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f96e:	f104 0a1a 	add.w	sl, r4, #26
 800f972:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f976:	1a9b      	subs	r3, r3, r2
 800f978:	eba3 0309 	sub.w	r3, r3, r9
 800f97c:	4543      	cmp	r3, r8
 800f97e:	f77f af79 	ble.w	800f874 <_printf_float+0x24c>
 800f982:	2301      	movs	r3, #1
 800f984:	4652      	mov	r2, sl
 800f986:	4631      	mov	r1, r6
 800f988:	4628      	mov	r0, r5
 800f98a:	47b8      	blx	r7
 800f98c:	3001      	adds	r0, #1
 800f98e:	f43f aeaa 	beq.w	800f6e6 <_printf_float+0xbe>
 800f992:	f108 0801 	add.w	r8, r8, #1
 800f996:	e7ec      	b.n	800f972 <_printf_float+0x34a>
 800f998:	4613      	mov	r3, r2
 800f99a:	4631      	mov	r1, r6
 800f99c:	4642      	mov	r2, r8
 800f99e:	4628      	mov	r0, r5
 800f9a0:	47b8      	blx	r7
 800f9a2:	3001      	adds	r0, #1
 800f9a4:	d1c0      	bne.n	800f928 <_printf_float+0x300>
 800f9a6:	e69e      	b.n	800f6e6 <_printf_float+0xbe>
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	4631      	mov	r1, r6
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	9205      	str	r2, [sp, #20]
 800f9b0:	47b8      	blx	r7
 800f9b2:	3001      	adds	r0, #1
 800f9b4:	f43f ae97 	beq.w	800f6e6 <_printf_float+0xbe>
 800f9b8:	9a05      	ldr	r2, [sp, #20]
 800f9ba:	f10b 0b01 	add.w	fp, fp, #1
 800f9be:	e7b9      	b.n	800f934 <_printf_float+0x30c>
 800f9c0:	ee18 3a10 	vmov	r3, s16
 800f9c4:	4652      	mov	r2, sl
 800f9c6:	4631      	mov	r1, r6
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	47b8      	blx	r7
 800f9cc:	3001      	adds	r0, #1
 800f9ce:	d1be      	bne.n	800f94e <_printf_float+0x326>
 800f9d0:	e689      	b.n	800f6e6 <_printf_float+0xbe>
 800f9d2:	9a05      	ldr	r2, [sp, #20]
 800f9d4:	464b      	mov	r3, r9
 800f9d6:	4442      	add	r2, r8
 800f9d8:	4631      	mov	r1, r6
 800f9da:	4628      	mov	r0, r5
 800f9dc:	47b8      	blx	r7
 800f9de:	3001      	adds	r0, #1
 800f9e0:	d1c1      	bne.n	800f966 <_printf_float+0x33e>
 800f9e2:	e680      	b.n	800f6e6 <_printf_float+0xbe>
 800f9e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9e6:	2a01      	cmp	r2, #1
 800f9e8:	dc01      	bgt.n	800f9ee <_printf_float+0x3c6>
 800f9ea:	07db      	lsls	r3, r3, #31
 800f9ec:	d53a      	bpl.n	800fa64 <_printf_float+0x43c>
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	4642      	mov	r2, r8
 800f9f2:	4631      	mov	r1, r6
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	47b8      	blx	r7
 800f9f8:	3001      	adds	r0, #1
 800f9fa:	f43f ae74 	beq.w	800f6e6 <_printf_float+0xbe>
 800f9fe:	ee18 3a10 	vmov	r3, s16
 800fa02:	4652      	mov	r2, sl
 800fa04:	4631      	mov	r1, r6
 800fa06:	4628      	mov	r0, r5
 800fa08:	47b8      	blx	r7
 800fa0a:	3001      	adds	r0, #1
 800fa0c:	f43f ae6b 	beq.w	800f6e6 <_printf_float+0xbe>
 800fa10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa14:	2200      	movs	r2, #0
 800fa16:	2300      	movs	r3, #0
 800fa18:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fa1c:	f7f1 f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa20:	b9d8      	cbnz	r0, 800fa5a <_printf_float+0x432>
 800fa22:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800fa26:	f108 0201 	add.w	r2, r8, #1
 800fa2a:	4631      	mov	r1, r6
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	47b8      	blx	r7
 800fa30:	3001      	adds	r0, #1
 800fa32:	d10e      	bne.n	800fa52 <_printf_float+0x42a>
 800fa34:	e657      	b.n	800f6e6 <_printf_float+0xbe>
 800fa36:	2301      	movs	r3, #1
 800fa38:	4652      	mov	r2, sl
 800fa3a:	4631      	mov	r1, r6
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	47b8      	blx	r7
 800fa40:	3001      	adds	r0, #1
 800fa42:	f43f ae50 	beq.w	800f6e6 <_printf_float+0xbe>
 800fa46:	f108 0801 	add.w	r8, r8, #1
 800fa4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	4543      	cmp	r3, r8
 800fa50:	dcf1      	bgt.n	800fa36 <_printf_float+0x40e>
 800fa52:	464b      	mov	r3, r9
 800fa54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fa58:	e6da      	b.n	800f810 <_printf_float+0x1e8>
 800fa5a:	f04f 0800 	mov.w	r8, #0
 800fa5e:	f104 0a1a 	add.w	sl, r4, #26
 800fa62:	e7f2      	b.n	800fa4a <_printf_float+0x422>
 800fa64:	2301      	movs	r3, #1
 800fa66:	4642      	mov	r2, r8
 800fa68:	e7df      	b.n	800fa2a <_printf_float+0x402>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	464a      	mov	r2, r9
 800fa6e:	4631      	mov	r1, r6
 800fa70:	4628      	mov	r0, r5
 800fa72:	47b8      	blx	r7
 800fa74:	3001      	adds	r0, #1
 800fa76:	f43f ae36 	beq.w	800f6e6 <_printf_float+0xbe>
 800fa7a:	f108 0801 	add.w	r8, r8, #1
 800fa7e:	68e3      	ldr	r3, [r4, #12]
 800fa80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa82:	1a5b      	subs	r3, r3, r1
 800fa84:	4543      	cmp	r3, r8
 800fa86:	dcf0      	bgt.n	800fa6a <_printf_float+0x442>
 800fa88:	e6f8      	b.n	800f87c <_printf_float+0x254>
 800fa8a:	f04f 0800 	mov.w	r8, #0
 800fa8e:	f104 0919 	add.w	r9, r4, #25
 800fa92:	e7f4      	b.n	800fa7e <_printf_float+0x456>

0800fa94 <_printf_common>:
 800fa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa98:	4616      	mov	r6, r2
 800fa9a:	4699      	mov	r9, r3
 800fa9c:	688a      	ldr	r2, [r1, #8]
 800fa9e:	690b      	ldr	r3, [r1, #16]
 800faa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800faa4:	4293      	cmp	r3, r2
 800faa6:	bfb8      	it	lt
 800faa8:	4613      	movlt	r3, r2
 800faaa:	6033      	str	r3, [r6, #0]
 800faac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fab0:	4607      	mov	r7, r0
 800fab2:	460c      	mov	r4, r1
 800fab4:	b10a      	cbz	r2, 800faba <_printf_common+0x26>
 800fab6:	3301      	adds	r3, #1
 800fab8:	6033      	str	r3, [r6, #0]
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	0699      	lsls	r1, r3, #26
 800fabe:	bf42      	ittt	mi
 800fac0:	6833      	ldrmi	r3, [r6, #0]
 800fac2:	3302      	addmi	r3, #2
 800fac4:	6033      	strmi	r3, [r6, #0]
 800fac6:	6825      	ldr	r5, [r4, #0]
 800fac8:	f015 0506 	ands.w	r5, r5, #6
 800facc:	d106      	bne.n	800fadc <_printf_common+0x48>
 800face:	f104 0a19 	add.w	sl, r4, #25
 800fad2:	68e3      	ldr	r3, [r4, #12]
 800fad4:	6832      	ldr	r2, [r6, #0]
 800fad6:	1a9b      	subs	r3, r3, r2
 800fad8:	42ab      	cmp	r3, r5
 800fada:	dc26      	bgt.n	800fb2a <_printf_common+0x96>
 800fadc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fae0:	1e13      	subs	r3, r2, #0
 800fae2:	6822      	ldr	r2, [r4, #0]
 800fae4:	bf18      	it	ne
 800fae6:	2301      	movne	r3, #1
 800fae8:	0692      	lsls	r2, r2, #26
 800faea:	d42b      	bmi.n	800fb44 <_printf_common+0xb0>
 800faec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800faf0:	4649      	mov	r1, r9
 800faf2:	4638      	mov	r0, r7
 800faf4:	47c0      	blx	r8
 800faf6:	3001      	adds	r0, #1
 800faf8:	d01e      	beq.n	800fb38 <_printf_common+0xa4>
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	6922      	ldr	r2, [r4, #16]
 800fafe:	f003 0306 	and.w	r3, r3, #6
 800fb02:	2b04      	cmp	r3, #4
 800fb04:	bf02      	ittt	eq
 800fb06:	68e5      	ldreq	r5, [r4, #12]
 800fb08:	6833      	ldreq	r3, [r6, #0]
 800fb0a:	1aed      	subeq	r5, r5, r3
 800fb0c:	68a3      	ldr	r3, [r4, #8]
 800fb0e:	bf0c      	ite	eq
 800fb10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb14:	2500      	movne	r5, #0
 800fb16:	4293      	cmp	r3, r2
 800fb18:	bfc4      	itt	gt
 800fb1a:	1a9b      	subgt	r3, r3, r2
 800fb1c:	18ed      	addgt	r5, r5, r3
 800fb1e:	2600      	movs	r6, #0
 800fb20:	341a      	adds	r4, #26
 800fb22:	42b5      	cmp	r5, r6
 800fb24:	d11a      	bne.n	800fb5c <_printf_common+0xc8>
 800fb26:	2000      	movs	r0, #0
 800fb28:	e008      	b.n	800fb3c <_printf_common+0xa8>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	4652      	mov	r2, sl
 800fb2e:	4649      	mov	r1, r9
 800fb30:	4638      	mov	r0, r7
 800fb32:	47c0      	blx	r8
 800fb34:	3001      	adds	r0, #1
 800fb36:	d103      	bne.n	800fb40 <_printf_common+0xac>
 800fb38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb40:	3501      	adds	r5, #1
 800fb42:	e7c6      	b.n	800fad2 <_printf_common+0x3e>
 800fb44:	18e1      	adds	r1, r4, r3
 800fb46:	1c5a      	adds	r2, r3, #1
 800fb48:	2030      	movs	r0, #48	; 0x30
 800fb4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb4e:	4422      	add	r2, r4
 800fb50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb58:	3302      	adds	r3, #2
 800fb5a:	e7c7      	b.n	800faec <_printf_common+0x58>
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	4622      	mov	r2, r4
 800fb60:	4649      	mov	r1, r9
 800fb62:	4638      	mov	r0, r7
 800fb64:	47c0      	blx	r8
 800fb66:	3001      	adds	r0, #1
 800fb68:	d0e6      	beq.n	800fb38 <_printf_common+0xa4>
 800fb6a:	3601      	adds	r6, #1
 800fb6c:	e7d9      	b.n	800fb22 <_printf_common+0x8e>
	...

0800fb70 <_printf_i>:
 800fb70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb74:	7e0f      	ldrb	r7, [r1, #24]
 800fb76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb78:	2f78      	cmp	r7, #120	; 0x78
 800fb7a:	4691      	mov	r9, r2
 800fb7c:	4680      	mov	r8, r0
 800fb7e:	460c      	mov	r4, r1
 800fb80:	469a      	mov	sl, r3
 800fb82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fb86:	d807      	bhi.n	800fb98 <_printf_i+0x28>
 800fb88:	2f62      	cmp	r7, #98	; 0x62
 800fb8a:	d80a      	bhi.n	800fba2 <_printf_i+0x32>
 800fb8c:	2f00      	cmp	r7, #0
 800fb8e:	f000 80d4 	beq.w	800fd3a <_printf_i+0x1ca>
 800fb92:	2f58      	cmp	r7, #88	; 0x58
 800fb94:	f000 80c0 	beq.w	800fd18 <_printf_i+0x1a8>
 800fb98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fba0:	e03a      	b.n	800fc18 <_printf_i+0xa8>
 800fba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fba6:	2b15      	cmp	r3, #21
 800fba8:	d8f6      	bhi.n	800fb98 <_printf_i+0x28>
 800fbaa:	a101      	add	r1, pc, #4	; (adr r1, 800fbb0 <_printf_i+0x40>)
 800fbac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbb0:	0800fc09 	.word	0x0800fc09
 800fbb4:	0800fc1d 	.word	0x0800fc1d
 800fbb8:	0800fb99 	.word	0x0800fb99
 800fbbc:	0800fb99 	.word	0x0800fb99
 800fbc0:	0800fb99 	.word	0x0800fb99
 800fbc4:	0800fb99 	.word	0x0800fb99
 800fbc8:	0800fc1d 	.word	0x0800fc1d
 800fbcc:	0800fb99 	.word	0x0800fb99
 800fbd0:	0800fb99 	.word	0x0800fb99
 800fbd4:	0800fb99 	.word	0x0800fb99
 800fbd8:	0800fb99 	.word	0x0800fb99
 800fbdc:	0800fd21 	.word	0x0800fd21
 800fbe0:	0800fc49 	.word	0x0800fc49
 800fbe4:	0800fcdb 	.word	0x0800fcdb
 800fbe8:	0800fb99 	.word	0x0800fb99
 800fbec:	0800fb99 	.word	0x0800fb99
 800fbf0:	0800fd43 	.word	0x0800fd43
 800fbf4:	0800fb99 	.word	0x0800fb99
 800fbf8:	0800fc49 	.word	0x0800fc49
 800fbfc:	0800fb99 	.word	0x0800fb99
 800fc00:	0800fb99 	.word	0x0800fb99
 800fc04:	0800fce3 	.word	0x0800fce3
 800fc08:	682b      	ldr	r3, [r5, #0]
 800fc0a:	1d1a      	adds	r2, r3, #4
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	602a      	str	r2, [r5, #0]
 800fc10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc18:	2301      	movs	r3, #1
 800fc1a:	e09f      	b.n	800fd5c <_printf_i+0x1ec>
 800fc1c:	6820      	ldr	r0, [r4, #0]
 800fc1e:	682b      	ldr	r3, [r5, #0]
 800fc20:	0607      	lsls	r7, r0, #24
 800fc22:	f103 0104 	add.w	r1, r3, #4
 800fc26:	6029      	str	r1, [r5, #0]
 800fc28:	d501      	bpl.n	800fc2e <_printf_i+0xbe>
 800fc2a:	681e      	ldr	r6, [r3, #0]
 800fc2c:	e003      	b.n	800fc36 <_printf_i+0xc6>
 800fc2e:	0646      	lsls	r6, r0, #25
 800fc30:	d5fb      	bpl.n	800fc2a <_printf_i+0xba>
 800fc32:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fc36:	2e00      	cmp	r6, #0
 800fc38:	da03      	bge.n	800fc42 <_printf_i+0xd2>
 800fc3a:	232d      	movs	r3, #45	; 0x2d
 800fc3c:	4276      	negs	r6, r6
 800fc3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc42:	485a      	ldr	r0, [pc, #360]	; (800fdac <_printf_i+0x23c>)
 800fc44:	230a      	movs	r3, #10
 800fc46:	e012      	b.n	800fc6e <_printf_i+0xfe>
 800fc48:	682b      	ldr	r3, [r5, #0]
 800fc4a:	6820      	ldr	r0, [r4, #0]
 800fc4c:	1d19      	adds	r1, r3, #4
 800fc4e:	6029      	str	r1, [r5, #0]
 800fc50:	0605      	lsls	r5, r0, #24
 800fc52:	d501      	bpl.n	800fc58 <_printf_i+0xe8>
 800fc54:	681e      	ldr	r6, [r3, #0]
 800fc56:	e002      	b.n	800fc5e <_printf_i+0xee>
 800fc58:	0641      	lsls	r1, r0, #25
 800fc5a:	d5fb      	bpl.n	800fc54 <_printf_i+0xe4>
 800fc5c:	881e      	ldrh	r6, [r3, #0]
 800fc5e:	4853      	ldr	r0, [pc, #332]	; (800fdac <_printf_i+0x23c>)
 800fc60:	2f6f      	cmp	r7, #111	; 0x6f
 800fc62:	bf0c      	ite	eq
 800fc64:	2308      	moveq	r3, #8
 800fc66:	230a      	movne	r3, #10
 800fc68:	2100      	movs	r1, #0
 800fc6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc6e:	6865      	ldr	r5, [r4, #4]
 800fc70:	60a5      	str	r5, [r4, #8]
 800fc72:	2d00      	cmp	r5, #0
 800fc74:	bfa2      	ittt	ge
 800fc76:	6821      	ldrge	r1, [r4, #0]
 800fc78:	f021 0104 	bicge.w	r1, r1, #4
 800fc7c:	6021      	strge	r1, [r4, #0]
 800fc7e:	b90e      	cbnz	r6, 800fc84 <_printf_i+0x114>
 800fc80:	2d00      	cmp	r5, #0
 800fc82:	d04b      	beq.n	800fd1c <_printf_i+0x1ac>
 800fc84:	4615      	mov	r5, r2
 800fc86:	fbb6 f1f3 	udiv	r1, r6, r3
 800fc8a:	fb03 6711 	mls	r7, r3, r1, r6
 800fc8e:	5dc7      	ldrb	r7, [r0, r7]
 800fc90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fc94:	4637      	mov	r7, r6
 800fc96:	42bb      	cmp	r3, r7
 800fc98:	460e      	mov	r6, r1
 800fc9a:	d9f4      	bls.n	800fc86 <_printf_i+0x116>
 800fc9c:	2b08      	cmp	r3, #8
 800fc9e:	d10b      	bne.n	800fcb8 <_printf_i+0x148>
 800fca0:	6823      	ldr	r3, [r4, #0]
 800fca2:	07de      	lsls	r6, r3, #31
 800fca4:	d508      	bpl.n	800fcb8 <_printf_i+0x148>
 800fca6:	6923      	ldr	r3, [r4, #16]
 800fca8:	6861      	ldr	r1, [r4, #4]
 800fcaa:	4299      	cmp	r1, r3
 800fcac:	bfde      	ittt	le
 800fcae:	2330      	movle	r3, #48	; 0x30
 800fcb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fcb4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fcb8:	1b52      	subs	r2, r2, r5
 800fcba:	6122      	str	r2, [r4, #16]
 800fcbc:	f8cd a000 	str.w	sl, [sp]
 800fcc0:	464b      	mov	r3, r9
 800fcc2:	aa03      	add	r2, sp, #12
 800fcc4:	4621      	mov	r1, r4
 800fcc6:	4640      	mov	r0, r8
 800fcc8:	f7ff fee4 	bl	800fa94 <_printf_common>
 800fccc:	3001      	adds	r0, #1
 800fcce:	d14a      	bne.n	800fd66 <_printf_i+0x1f6>
 800fcd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcd4:	b004      	add	sp, #16
 800fcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	f043 0320 	orr.w	r3, r3, #32
 800fce0:	6023      	str	r3, [r4, #0]
 800fce2:	4833      	ldr	r0, [pc, #204]	; (800fdb0 <_printf_i+0x240>)
 800fce4:	2778      	movs	r7, #120	; 0x78
 800fce6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	6829      	ldr	r1, [r5, #0]
 800fcee:	061f      	lsls	r7, r3, #24
 800fcf0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fcf4:	d402      	bmi.n	800fcfc <_printf_i+0x18c>
 800fcf6:	065f      	lsls	r7, r3, #25
 800fcf8:	bf48      	it	mi
 800fcfa:	b2b6      	uxthmi	r6, r6
 800fcfc:	07df      	lsls	r7, r3, #31
 800fcfe:	bf48      	it	mi
 800fd00:	f043 0320 	orrmi.w	r3, r3, #32
 800fd04:	6029      	str	r1, [r5, #0]
 800fd06:	bf48      	it	mi
 800fd08:	6023      	strmi	r3, [r4, #0]
 800fd0a:	b91e      	cbnz	r6, 800fd14 <_printf_i+0x1a4>
 800fd0c:	6823      	ldr	r3, [r4, #0]
 800fd0e:	f023 0320 	bic.w	r3, r3, #32
 800fd12:	6023      	str	r3, [r4, #0]
 800fd14:	2310      	movs	r3, #16
 800fd16:	e7a7      	b.n	800fc68 <_printf_i+0xf8>
 800fd18:	4824      	ldr	r0, [pc, #144]	; (800fdac <_printf_i+0x23c>)
 800fd1a:	e7e4      	b.n	800fce6 <_printf_i+0x176>
 800fd1c:	4615      	mov	r5, r2
 800fd1e:	e7bd      	b.n	800fc9c <_printf_i+0x12c>
 800fd20:	682b      	ldr	r3, [r5, #0]
 800fd22:	6826      	ldr	r6, [r4, #0]
 800fd24:	6961      	ldr	r1, [r4, #20]
 800fd26:	1d18      	adds	r0, r3, #4
 800fd28:	6028      	str	r0, [r5, #0]
 800fd2a:	0635      	lsls	r5, r6, #24
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	d501      	bpl.n	800fd34 <_printf_i+0x1c4>
 800fd30:	6019      	str	r1, [r3, #0]
 800fd32:	e002      	b.n	800fd3a <_printf_i+0x1ca>
 800fd34:	0670      	lsls	r0, r6, #25
 800fd36:	d5fb      	bpl.n	800fd30 <_printf_i+0x1c0>
 800fd38:	8019      	strh	r1, [r3, #0]
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	6123      	str	r3, [r4, #16]
 800fd3e:	4615      	mov	r5, r2
 800fd40:	e7bc      	b.n	800fcbc <_printf_i+0x14c>
 800fd42:	682b      	ldr	r3, [r5, #0]
 800fd44:	1d1a      	adds	r2, r3, #4
 800fd46:	602a      	str	r2, [r5, #0]
 800fd48:	681d      	ldr	r5, [r3, #0]
 800fd4a:	6862      	ldr	r2, [r4, #4]
 800fd4c:	2100      	movs	r1, #0
 800fd4e:	4628      	mov	r0, r5
 800fd50:	f7f0 fa46 	bl	80001e0 <memchr>
 800fd54:	b108      	cbz	r0, 800fd5a <_printf_i+0x1ea>
 800fd56:	1b40      	subs	r0, r0, r5
 800fd58:	6060      	str	r0, [r4, #4]
 800fd5a:	6863      	ldr	r3, [r4, #4]
 800fd5c:	6123      	str	r3, [r4, #16]
 800fd5e:	2300      	movs	r3, #0
 800fd60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd64:	e7aa      	b.n	800fcbc <_printf_i+0x14c>
 800fd66:	6923      	ldr	r3, [r4, #16]
 800fd68:	462a      	mov	r2, r5
 800fd6a:	4649      	mov	r1, r9
 800fd6c:	4640      	mov	r0, r8
 800fd6e:	47d0      	blx	sl
 800fd70:	3001      	adds	r0, #1
 800fd72:	d0ad      	beq.n	800fcd0 <_printf_i+0x160>
 800fd74:	6823      	ldr	r3, [r4, #0]
 800fd76:	079b      	lsls	r3, r3, #30
 800fd78:	d413      	bmi.n	800fda2 <_printf_i+0x232>
 800fd7a:	68e0      	ldr	r0, [r4, #12]
 800fd7c:	9b03      	ldr	r3, [sp, #12]
 800fd7e:	4298      	cmp	r0, r3
 800fd80:	bfb8      	it	lt
 800fd82:	4618      	movlt	r0, r3
 800fd84:	e7a6      	b.n	800fcd4 <_printf_i+0x164>
 800fd86:	2301      	movs	r3, #1
 800fd88:	4632      	mov	r2, r6
 800fd8a:	4649      	mov	r1, r9
 800fd8c:	4640      	mov	r0, r8
 800fd8e:	47d0      	blx	sl
 800fd90:	3001      	adds	r0, #1
 800fd92:	d09d      	beq.n	800fcd0 <_printf_i+0x160>
 800fd94:	3501      	adds	r5, #1
 800fd96:	68e3      	ldr	r3, [r4, #12]
 800fd98:	9903      	ldr	r1, [sp, #12]
 800fd9a:	1a5b      	subs	r3, r3, r1
 800fd9c:	42ab      	cmp	r3, r5
 800fd9e:	dcf2      	bgt.n	800fd86 <_printf_i+0x216>
 800fda0:	e7eb      	b.n	800fd7a <_printf_i+0x20a>
 800fda2:	2500      	movs	r5, #0
 800fda4:	f104 0619 	add.w	r6, r4, #25
 800fda8:	e7f5      	b.n	800fd96 <_printf_i+0x226>
 800fdaa:	bf00      	nop
 800fdac:	0801243e 	.word	0x0801243e
 800fdb0:	0801244f 	.word	0x0801244f

0800fdb4 <std>:
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	b510      	push	{r4, lr}
 800fdb8:	4604      	mov	r4, r0
 800fdba:	e9c0 3300 	strd	r3, r3, [r0]
 800fdbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdc2:	6083      	str	r3, [r0, #8]
 800fdc4:	8181      	strh	r1, [r0, #12]
 800fdc6:	6643      	str	r3, [r0, #100]	; 0x64
 800fdc8:	81c2      	strh	r2, [r0, #14]
 800fdca:	6183      	str	r3, [r0, #24]
 800fdcc:	4619      	mov	r1, r3
 800fdce:	2208      	movs	r2, #8
 800fdd0:	305c      	adds	r0, #92	; 0x5c
 800fdd2:	f000 f8e2 	bl	800ff9a <memset>
 800fdd6:	4b05      	ldr	r3, [pc, #20]	; (800fdec <std+0x38>)
 800fdd8:	6263      	str	r3, [r4, #36]	; 0x24
 800fdda:	4b05      	ldr	r3, [pc, #20]	; (800fdf0 <std+0x3c>)
 800fddc:	62a3      	str	r3, [r4, #40]	; 0x28
 800fdde:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <std+0x40>)
 800fde0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fde2:	4b05      	ldr	r3, [pc, #20]	; (800fdf8 <std+0x44>)
 800fde4:	6224      	str	r4, [r4, #32]
 800fde6:	6323      	str	r3, [r4, #48]	; 0x30
 800fde8:	bd10      	pop	{r4, pc}
 800fdea:	bf00      	nop
 800fdec:	0800ff15 	.word	0x0800ff15
 800fdf0:	0800ff37 	.word	0x0800ff37
 800fdf4:	0800ff6f 	.word	0x0800ff6f
 800fdf8:	0800ff93 	.word	0x0800ff93

0800fdfc <stdio_exit_handler>:
 800fdfc:	4a02      	ldr	r2, [pc, #8]	; (800fe08 <stdio_exit_handler+0xc>)
 800fdfe:	4903      	ldr	r1, [pc, #12]	; (800fe0c <stdio_exit_handler+0x10>)
 800fe00:	4803      	ldr	r0, [pc, #12]	; (800fe10 <stdio_exit_handler+0x14>)
 800fe02:	f000 b869 	b.w	800fed8 <_fwalk_sglue>
 800fe06:	bf00      	nop
 800fe08:	20000120 	.word	0x20000120
 800fe0c:	08011681 	.word	0x08011681
 800fe10:	2000012c 	.word	0x2000012c

0800fe14 <cleanup_stdio>:
 800fe14:	6841      	ldr	r1, [r0, #4]
 800fe16:	4b0c      	ldr	r3, [pc, #48]	; (800fe48 <cleanup_stdio+0x34>)
 800fe18:	4299      	cmp	r1, r3
 800fe1a:	b510      	push	{r4, lr}
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	d001      	beq.n	800fe24 <cleanup_stdio+0x10>
 800fe20:	f001 fc2e 	bl	8011680 <_fflush_r>
 800fe24:	68a1      	ldr	r1, [r4, #8]
 800fe26:	4b09      	ldr	r3, [pc, #36]	; (800fe4c <cleanup_stdio+0x38>)
 800fe28:	4299      	cmp	r1, r3
 800fe2a:	d002      	beq.n	800fe32 <cleanup_stdio+0x1e>
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f001 fc27 	bl	8011680 <_fflush_r>
 800fe32:	68e1      	ldr	r1, [r4, #12]
 800fe34:	4b06      	ldr	r3, [pc, #24]	; (800fe50 <cleanup_stdio+0x3c>)
 800fe36:	4299      	cmp	r1, r3
 800fe38:	d004      	beq.n	800fe44 <cleanup_stdio+0x30>
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe40:	f001 bc1e 	b.w	8011680 <_fflush_r>
 800fe44:	bd10      	pop	{r4, pc}
 800fe46:	bf00      	nop
 800fe48:	2000226c 	.word	0x2000226c
 800fe4c:	200022d4 	.word	0x200022d4
 800fe50:	2000233c 	.word	0x2000233c

0800fe54 <global_stdio_init.part.0>:
 800fe54:	b510      	push	{r4, lr}
 800fe56:	4b0b      	ldr	r3, [pc, #44]	; (800fe84 <global_stdio_init.part.0+0x30>)
 800fe58:	4c0b      	ldr	r4, [pc, #44]	; (800fe88 <global_stdio_init.part.0+0x34>)
 800fe5a:	4a0c      	ldr	r2, [pc, #48]	; (800fe8c <global_stdio_init.part.0+0x38>)
 800fe5c:	601a      	str	r2, [r3, #0]
 800fe5e:	4620      	mov	r0, r4
 800fe60:	2200      	movs	r2, #0
 800fe62:	2104      	movs	r1, #4
 800fe64:	f7ff ffa6 	bl	800fdb4 <std>
 800fe68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	2109      	movs	r1, #9
 800fe70:	f7ff ffa0 	bl	800fdb4 <std>
 800fe74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fe78:	2202      	movs	r2, #2
 800fe7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe7e:	2112      	movs	r1, #18
 800fe80:	f7ff bf98 	b.w	800fdb4 <std>
 800fe84:	200023a4 	.word	0x200023a4
 800fe88:	2000226c 	.word	0x2000226c
 800fe8c:	0800fdfd 	.word	0x0800fdfd

0800fe90 <__sfp_lock_acquire>:
 800fe90:	4801      	ldr	r0, [pc, #4]	; (800fe98 <__sfp_lock_acquire+0x8>)
 800fe92:	f000 b91d 	b.w	80100d0 <__retarget_lock_acquire_recursive>
 800fe96:	bf00      	nop
 800fe98:	200023ad 	.word	0x200023ad

0800fe9c <__sfp_lock_release>:
 800fe9c:	4801      	ldr	r0, [pc, #4]	; (800fea4 <__sfp_lock_release+0x8>)
 800fe9e:	f000 b918 	b.w	80100d2 <__retarget_lock_release_recursive>
 800fea2:	bf00      	nop
 800fea4:	200023ad 	.word	0x200023ad

0800fea8 <__sinit>:
 800fea8:	b510      	push	{r4, lr}
 800feaa:	4604      	mov	r4, r0
 800feac:	f7ff fff0 	bl	800fe90 <__sfp_lock_acquire>
 800feb0:	6a23      	ldr	r3, [r4, #32]
 800feb2:	b11b      	cbz	r3, 800febc <__sinit+0x14>
 800feb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feb8:	f7ff bff0 	b.w	800fe9c <__sfp_lock_release>
 800febc:	4b04      	ldr	r3, [pc, #16]	; (800fed0 <__sinit+0x28>)
 800febe:	6223      	str	r3, [r4, #32]
 800fec0:	4b04      	ldr	r3, [pc, #16]	; (800fed4 <__sinit+0x2c>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1f5      	bne.n	800feb4 <__sinit+0xc>
 800fec8:	f7ff ffc4 	bl	800fe54 <global_stdio_init.part.0>
 800fecc:	e7f2      	b.n	800feb4 <__sinit+0xc>
 800fece:	bf00      	nop
 800fed0:	0800fe15 	.word	0x0800fe15
 800fed4:	200023a4 	.word	0x200023a4

0800fed8 <_fwalk_sglue>:
 800fed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fedc:	4607      	mov	r7, r0
 800fede:	4688      	mov	r8, r1
 800fee0:	4614      	mov	r4, r2
 800fee2:	2600      	movs	r6, #0
 800fee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fee8:	f1b9 0901 	subs.w	r9, r9, #1
 800feec:	d505      	bpl.n	800fefa <_fwalk_sglue+0x22>
 800feee:	6824      	ldr	r4, [r4, #0]
 800fef0:	2c00      	cmp	r4, #0
 800fef2:	d1f7      	bne.n	800fee4 <_fwalk_sglue+0xc>
 800fef4:	4630      	mov	r0, r6
 800fef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fefa:	89ab      	ldrh	r3, [r5, #12]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d907      	bls.n	800ff10 <_fwalk_sglue+0x38>
 800ff00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff04:	3301      	adds	r3, #1
 800ff06:	d003      	beq.n	800ff10 <_fwalk_sglue+0x38>
 800ff08:	4629      	mov	r1, r5
 800ff0a:	4638      	mov	r0, r7
 800ff0c:	47c0      	blx	r8
 800ff0e:	4306      	orrs	r6, r0
 800ff10:	3568      	adds	r5, #104	; 0x68
 800ff12:	e7e9      	b.n	800fee8 <_fwalk_sglue+0x10>

0800ff14 <__sread>:
 800ff14:	b510      	push	{r4, lr}
 800ff16:	460c      	mov	r4, r1
 800ff18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff1c:	f000 f87a 	bl	8010014 <_read_r>
 800ff20:	2800      	cmp	r0, #0
 800ff22:	bfab      	itete	ge
 800ff24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff26:	89a3      	ldrhlt	r3, [r4, #12]
 800ff28:	181b      	addge	r3, r3, r0
 800ff2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff2e:	bfac      	ite	ge
 800ff30:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff32:	81a3      	strhlt	r3, [r4, #12]
 800ff34:	bd10      	pop	{r4, pc}

0800ff36 <__swrite>:
 800ff36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3a:	461f      	mov	r7, r3
 800ff3c:	898b      	ldrh	r3, [r1, #12]
 800ff3e:	05db      	lsls	r3, r3, #23
 800ff40:	4605      	mov	r5, r0
 800ff42:	460c      	mov	r4, r1
 800ff44:	4616      	mov	r6, r2
 800ff46:	d505      	bpl.n	800ff54 <__swrite+0x1e>
 800ff48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff4c:	2302      	movs	r3, #2
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f000 f84e 	bl	800fff0 <_lseek_r>
 800ff54:	89a3      	ldrh	r3, [r4, #12]
 800ff56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff5e:	81a3      	strh	r3, [r4, #12]
 800ff60:	4632      	mov	r2, r6
 800ff62:	463b      	mov	r3, r7
 800ff64:	4628      	mov	r0, r5
 800ff66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff6a:	f000 b875 	b.w	8010058 <_write_r>

0800ff6e <__sseek>:
 800ff6e:	b510      	push	{r4, lr}
 800ff70:	460c      	mov	r4, r1
 800ff72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff76:	f000 f83b 	bl	800fff0 <_lseek_r>
 800ff7a:	1c43      	adds	r3, r0, #1
 800ff7c:	89a3      	ldrh	r3, [r4, #12]
 800ff7e:	bf15      	itete	ne
 800ff80:	6560      	strne	r0, [r4, #84]	; 0x54
 800ff82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ff86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ff8a:	81a3      	strheq	r3, [r4, #12]
 800ff8c:	bf18      	it	ne
 800ff8e:	81a3      	strhne	r3, [r4, #12]
 800ff90:	bd10      	pop	{r4, pc}

0800ff92 <__sclose>:
 800ff92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff96:	f000 b81b 	b.w	800ffd0 <_close_r>

0800ff9a <memset>:
 800ff9a:	4402      	add	r2, r0
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d100      	bne.n	800ffa4 <memset+0xa>
 800ffa2:	4770      	bx	lr
 800ffa4:	f803 1b01 	strb.w	r1, [r3], #1
 800ffa8:	e7f9      	b.n	800ff9e <memset+0x4>

0800ffaa <strcat>:
 800ffaa:	b510      	push	{r4, lr}
 800ffac:	4602      	mov	r2, r0
 800ffae:	7814      	ldrb	r4, [r2, #0]
 800ffb0:	4613      	mov	r3, r2
 800ffb2:	3201      	adds	r2, #1
 800ffb4:	2c00      	cmp	r4, #0
 800ffb6:	d1fa      	bne.n	800ffae <strcat+0x4>
 800ffb8:	3b01      	subs	r3, #1
 800ffba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffc2:	2a00      	cmp	r2, #0
 800ffc4:	d1f9      	bne.n	800ffba <strcat+0x10>
 800ffc6:	bd10      	pop	{r4, pc}

0800ffc8 <_localeconv_r>:
 800ffc8:	4800      	ldr	r0, [pc, #0]	; (800ffcc <_localeconv_r+0x4>)
 800ffca:	4770      	bx	lr
 800ffcc:	2000026c 	.word	0x2000026c

0800ffd0 <_close_r>:
 800ffd0:	b538      	push	{r3, r4, r5, lr}
 800ffd2:	4d06      	ldr	r5, [pc, #24]	; (800ffec <_close_r+0x1c>)
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	4608      	mov	r0, r1
 800ffda:	602b      	str	r3, [r5, #0]
 800ffdc:	f7f2 f8e7 	bl	80021ae <_close>
 800ffe0:	1c43      	adds	r3, r0, #1
 800ffe2:	d102      	bne.n	800ffea <_close_r+0x1a>
 800ffe4:	682b      	ldr	r3, [r5, #0]
 800ffe6:	b103      	cbz	r3, 800ffea <_close_r+0x1a>
 800ffe8:	6023      	str	r3, [r4, #0]
 800ffea:	bd38      	pop	{r3, r4, r5, pc}
 800ffec:	200023a8 	.word	0x200023a8

0800fff0 <_lseek_r>:
 800fff0:	b538      	push	{r3, r4, r5, lr}
 800fff2:	4d07      	ldr	r5, [pc, #28]	; (8010010 <_lseek_r+0x20>)
 800fff4:	4604      	mov	r4, r0
 800fff6:	4608      	mov	r0, r1
 800fff8:	4611      	mov	r1, r2
 800fffa:	2200      	movs	r2, #0
 800fffc:	602a      	str	r2, [r5, #0]
 800fffe:	461a      	mov	r2, r3
 8010000:	f7f2 f8fc 	bl	80021fc <_lseek>
 8010004:	1c43      	adds	r3, r0, #1
 8010006:	d102      	bne.n	801000e <_lseek_r+0x1e>
 8010008:	682b      	ldr	r3, [r5, #0]
 801000a:	b103      	cbz	r3, 801000e <_lseek_r+0x1e>
 801000c:	6023      	str	r3, [r4, #0]
 801000e:	bd38      	pop	{r3, r4, r5, pc}
 8010010:	200023a8 	.word	0x200023a8

08010014 <_read_r>:
 8010014:	b538      	push	{r3, r4, r5, lr}
 8010016:	4d07      	ldr	r5, [pc, #28]	; (8010034 <_read_r+0x20>)
 8010018:	4604      	mov	r4, r0
 801001a:	4608      	mov	r0, r1
 801001c:	4611      	mov	r1, r2
 801001e:	2200      	movs	r2, #0
 8010020:	602a      	str	r2, [r5, #0]
 8010022:	461a      	mov	r2, r3
 8010024:	f7f2 f88a 	bl	800213c <_read>
 8010028:	1c43      	adds	r3, r0, #1
 801002a:	d102      	bne.n	8010032 <_read_r+0x1e>
 801002c:	682b      	ldr	r3, [r5, #0]
 801002e:	b103      	cbz	r3, 8010032 <_read_r+0x1e>
 8010030:	6023      	str	r3, [r4, #0]
 8010032:	bd38      	pop	{r3, r4, r5, pc}
 8010034:	200023a8 	.word	0x200023a8

08010038 <_sbrk_r>:
 8010038:	b538      	push	{r3, r4, r5, lr}
 801003a:	4d06      	ldr	r5, [pc, #24]	; (8010054 <_sbrk_r+0x1c>)
 801003c:	2300      	movs	r3, #0
 801003e:	4604      	mov	r4, r0
 8010040:	4608      	mov	r0, r1
 8010042:	602b      	str	r3, [r5, #0]
 8010044:	f7f2 f8e8 	bl	8002218 <_sbrk>
 8010048:	1c43      	adds	r3, r0, #1
 801004a:	d102      	bne.n	8010052 <_sbrk_r+0x1a>
 801004c:	682b      	ldr	r3, [r5, #0]
 801004e:	b103      	cbz	r3, 8010052 <_sbrk_r+0x1a>
 8010050:	6023      	str	r3, [r4, #0]
 8010052:	bd38      	pop	{r3, r4, r5, pc}
 8010054:	200023a8 	.word	0x200023a8

08010058 <_write_r>:
 8010058:	b538      	push	{r3, r4, r5, lr}
 801005a:	4d07      	ldr	r5, [pc, #28]	; (8010078 <_write_r+0x20>)
 801005c:	4604      	mov	r4, r0
 801005e:	4608      	mov	r0, r1
 8010060:	4611      	mov	r1, r2
 8010062:	2200      	movs	r2, #0
 8010064:	602a      	str	r2, [r5, #0]
 8010066:	461a      	mov	r2, r3
 8010068:	f7f2 f885 	bl	8002176 <_write>
 801006c:	1c43      	adds	r3, r0, #1
 801006e:	d102      	bne.n	8010076 <_write_r+0x1e>
 8010070:	682b      	ldr	r3, [r5, #0]
 8010072:	b103      	cbz	r3, 8010076 <_write_r+0x1e>
 8010074:	6023      	str	r3, [r4, #0]
 8010076:	bd38      	pop	{r3, r4, r5, pc}
 8010078:	200023a8 	.word	0x200023a8

0801007c <__errno>:
 801007c:	4b01      	ldr	r3, [pc, #4]	; (8010084 <__errno+0x8>)
 801007e:	6818      	ldr	r0, [r3, #0]
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	20000178 	.word	0x20000178

08010088 <__libc_init_array>:
 8010088:	b570      	push	{r4, r5, r6, lr}
 801008a:	4d0d      	ldr	r5, [pc, #52]	; (80100c0 <__libc_init_array+0x38>)
 801008c:	4c0d      	ldr	r4, [pc, #52]	; (80100c4 <__libc_init_array+0x3c>)
 801008e:	1b64      	subs	r4, r4, r5
 8010090:	10a4      	asrs	r4, r4, #2
 8010092:	2600      	movs	r6, #0
 8010094:	42a6      	cmp	r6, r4
 8010096:	d109      	bne.n	80100ac <__libc_init_array+0x24>
 8010098:	4d0b      	ldr	r5, [pc, #44]	; (80100c8 <__libc_init_array+0x40>)
 801009a:	4c0c      	ldr	r4, [pc, #48]	; (80100cc <__libc_init_array+0x44>)
 801009c:	f002 f89a 	bl	80121d4 <_init>
 80100a0:	1b64      	subs	r4, r4, r5
 80100a2:	10a4      	asrs	r4, r4, #2
 80100a4:	2600      	movs	r6, #0
 80100a6:	42a6      	cmp	r6, r4
 80100a8:	d105      	bne.n	80100b6 <__libc_init_array+0x2e>
 80100aa:	bd70      	pop	{r4, r5, r6, pc}
 80100ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80100b0:	4798      	blx	r3
 80100b2:	3601      	adds	r6, #1
 80100b4:	e7ee      	b.n	8010094 <__libc_init_array+0xc>
 80100b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80100ba:	4798      	blx	r3
 80100bc:	3601      	adds	r6, #1
 80100be:	e7f2      	b.n	80100a6 <__libc_init_array+0x1e>
 80100c0:	08012818 	.word	0x08012818
 80100c4:	08012818 	.word	0x08012818
 80100c8:	08012818 	.word	0x08012818
 80100cc:	0801281c 	.word	0x0801281c

080100d0 <__retarget_lock_acquire_recursive>:
 80100d0:	4770      	bx	lr

080100d2 <__retarget_lock_release_recursive>:
 80100d2:	4770      	bx	lr

080100d4 <memcpy>:
 80100d4:	440a      	add	r2, r1
 80100d6:	4291      	cmp	r1, r2
 80100d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80100dc:	d100      	bne.n	80100e0 <memcpy+0xc>
 80100de:	4770      	bx	lr
 80100e0:	b510      	push	{r4, lr}
 80100e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100ea:	4291      	cmp	r1, r2
 80100ec:	d1f9      	bne.n	80100e2 <memcpy+0xe>
 80100ee:	bd10      	pop	{r4, pc}

080100f0 <quorem>:
 80100f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f4:	6903      	ldr	r3, [r0, #16]
 80100f6:	690c      	ldr	r4, [r1, #16]
 80100f8:	42a3      	cmp	r3, r4
 80100fa:	4607      	mov	r7, r0
 80100fc:	db7e      	blt.n	80101fc <quorem+0x10c>
 80100fe:	3c01      	subs	r4, #1
 8010100:	f101 0814 	add.w	r8, r1, #20
 8010104:	f100 0514 	add.w	r5, r0, #20
 8010108:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801010c:	9301      	str	r3, [sp, #4]
 801010e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010116:	3301      	adds	r3, #1
 8010118:	429a      	cmp	r2, r3
 801011a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801011e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010122:	fbb2 f6f3 	udiv	r6, r2, r3
 8010126:	d331      	bcc.n	801018c <quorem+0x9c>
 8010128:	f04f 0e00 	mov.w	lr, #0
 801012c:	4640      	mov	r0, r8
 801012e:	46ac      	mov	ip, r5
 8010130:	46f2      	mov	sl, lr
 8010132:	f850 2b04 	ldr.w	r2, [r0], #4
 8010136:	b293      	uxth	r3, r2
 8010138:	fb06 e303 	mla	r3, r6, r3, lr
 801013c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010140:	0c1a      	lsrs	r2, r3, #16
 8010142:	b29b      	uxth	r3, r3
 8010144:	ebaa 0303 	sub.w	r3, sl, r3
 8010148:	f8dc a000 	ldr.w	sl, [ip]
 801014c:	fa13 f38a 	uxtah	r3, r3, sl
 8010150:	fb06 220e 	mla	r2, r6, lr, r2
 8010154:	9300      	str	r3, [sp, #0]
 8010156:	9b00      	ldr	r3, [sp, #0]
 8010158:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801015c:	b292      	uxth	r2, r2
 801015e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010162:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010166:	f8bd 3000 	ldrh.w	r3, [sp]
 801016a:	4581      	cmp	r9, r0
 801016c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010170:	f84c 3b04 	str.w	r3, [ip], #4
 8010174:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010178:	d2db      	bcs.n	8010132 <quorem+0x42>
 801017a:	f855 300b 	ldr.w	r3, [r5, fp]
 801017e:	b92b      	cbnz	r3, 801018c <quorem+0x9c>
 8010180:	9b01      	ldr	r3, [sp, #4]
 8010182:	3b04      	subs	r3, #4
 8010184:	429d      	cmp	r5, r3
 8010186:	461a      	mov	r2, r3
 8010188:	d32c      	bcc.n	80101e4 <quorem+0xf4>
 801018a:	613c      	str	r4, [r7, #16]
 801018c:	4638      	mov	r0, r7
 801018e:	f001 f8f1 	bl	8011374 <__mcmp>
 8010192:	2800      	cmp	r0, #0
 8010194:	db22      	blt.n	80101dc <quorem+0xec>
 8010196:	3601      	adds	r6, #1
 8010198:	4629      	mov	r1, r5
 801019a:	2000      	movs	r0, #0
 801019c:	f858 2b04 	ldr.w	r2, [r8], #4
 80101a0:	f8d1 c000 	ldr.w	ip, [r1]
 80101a4:	b293      	uxth	r3, r2
 80101a6:	1ac3      	subs	r3, r0, r3
 80101a8:	0c12      	lsrs	r2, r2, #16
 80101aa:	fa13 f38c 	uxtah	r3, r3, ip
 80101ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80101b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101bc:	45c1      	cmp	r9, r8
 80101be:	f841 3b04 	str.w	r3, [r1], #4
 80101c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80101c6:	d2e9      	bcs.n	801019c <quorem+0xac>
 80101c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101d0:	b922      	cbnz	r2, 80101dc <quorem+0xec>
 80101d2:	3b04      	subs	r3, #4
 80101d4:	429d      	cmp	r5, r3
 80101d6:	461a      	mov	r2, r3
 80101d8:	d30a      	bcc.n	80101f0 <quorem+0x100>
 80101da:	613c      	str	r4, [r7, #16]
 80101dc:	4630      	mov	r0, r6
 80101de:	b003      	add	sp, #12
 80101e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e4:	6812      	ldr	r2, [r2, #0]
 80101e6:	3b04      	subs	r3, #4
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	d1ce      	bne.n	801018a <quorem+0x9a>
 80101ec:	3c01      	subs	r4, #1
 80101ee:	e7c9      	b.n	8010184 <quorem+0x94>
 80101f0:	6812      	ldr	r2, [r2, #0]
 80101f2:	3b04      	subs	r3, #4
 80101f4:	2a00      	cmp	r2, #0
 80101f6:	d1f0      	bne.n	80101da <quorem+0xea>
 80101f8:	3c01      	subs	r4, #1
 80101fa:	e7eb      	b.n	80101d4 <quorem+0xe4>
 80101fc:	2000      	movs	r0, #0
 80101fe:	e7ee      	b.n	80101de <quorem+0xee>

08010200 <_dtoa_r>:
 8010200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	ed2d 8b04 	vpush	{d8-d9}
 8010208:	69c5      	ldr	r5, [r0, #28]
 801020a:	b093      	sub	sp, #76	; 0x4c
 801020c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010210:	ec57 6b10 	vmov	r6, r7, d0
 8010214:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010218:	9107      	str	r1, [sp, #28]
 801021a:	4604      	mov	r4, r0
 801021c:	920a      	str	r2, [sp, #40]	; 0x28
 801021e:	930d      	str	r3, [sp, #52]	; 0x34
 8010220:	b975      	cbnz	r5, 8010240 <_dtoa_r+0x40>
 8010222:	2010      	movs	r0, #16
 8010224:	f7ff f8a4 	bl	800f370 <malloc>
 8010228:	4602      	mov	r2, r0
 801022a:	61e0      	str	r0, [r4, #28]
 801022c:	b920      	cbnz	r0, 8010238 <_dtoa_r+0x38>
 801022e:	4bae      	ldr	r3, [pc, #696]	; (80104e8 <_dtoa_r+0x2e8>)
 8010230:	21ef      	movs	r1, #239	; 0xef
 8010232:	48ae      	ldr	r0, [pc, #696]	; (80104ec <_dtoa_r+0x2ec>)
 8010234:	f001 fa4c 	bl	80116d0 <__assert_func>
 8010238:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801023c:	6005      	str	r5, [r0, #0]
 801023e:	60c5      	str	r5, [r0, #12]
 8010240:	69e3      	ldr	r3, [r4, #28]
 8010242:	6819      	ldr	r1, [r3, #0]
 8010244:	b151      	cbz	r1, 801025c <_dtoa_r+0x5c>
 8010246:	685a      	ldr	r2, [r3, #4]
 8010248:	604a      	str	r2, [r1, #4]
 801024a:	2301      	movs	r3, #1
 801024c:	4093      	lsls	r3, r2
 801024e:	608b      	str	r3, [r1, #8]
 8010250:	4620      	mov	r0, r4
 8010252:	f000 fe53 	bl	8010efc <_Bfree>
 8010256:	69e3      	ldr	r3, [r4, #28]
 8010258:	2200      	movs	r2, #0
 801025a:	601a      	str	r2, [r3, #0]
 801025c:	1e3b      	subs	r3, r7, #0
 801025e:	bfbb      	ittet	lt
 8010260:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010264:	9303      	strlt	r3, [sp, #12]
 8010266:	2300      	movge	r3, #0
 8010268:	2201      	movlt	r2, #1
 801026a:	bfac      	ite	ge
 801026c:	f8c8 3000 	strge.w	r3, [r8]
 8010270:	f8c8 2000 	strlt.w	r2, [r8]
 8010274:	4b9e      	ldr	r3, [pc, #632]	; (80104f0 <_dtoa_r+0x2f0>)
 8010276:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801027a:	ea33 0308 	bics.w	r3, r3, r8
 801027e:	d11b      	bne.n	80102b8 <_dtoa_r+0xb8>
 8010280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010282:	f242 730f 	movw	r3, #9999	; 0x270f
 8010286:	6013      	str	r3, [r2, #0]
 8010288:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801028c:	4333      	orrs	r3, r6
 801028e:	f000 8593 	beq.w	8010db8 <_dtoa_r+0xbb8>
 8010292:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010294:	b963      	cbnz	r3, 80102b0 <_dtoa_r+0xb0>
 8010296:	4b97      	ldr	r3, [pc, #604]	; (80104f4 <_dtoa_r+0x2f4>)
 8010298:	e027      	b.n	80102ea <_dtoa_r+0xea>
 801029a:	4b97      	ldr	r3, [pc, #604]	; (80104f8 <_dtoa_r+0x2f8>)
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	3308      	adds	r3, #8
 80102a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80102a2:	6013      	str	r3, [r2, #0]
 80102a4:	9800      	ldr	r0, [sp, #0]
 80102a6:	b013      	add	sp, #76	; 0x4c
 80102a8:	ecbd 8b04 	vpop	{d8-d9}
 80102ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102b0:	4b90      	ldr	r3, [pc, #576]	; (80104f4 <_dtoa_r+0x2f4>)
 80102b2:	9300      	str	r3, [sp, #0]
 80102b4:	3303      	adds	r3, #3
 80102b6:	e7f3      	b.n	80102a0 <_dtoa_r+0xa0>
 80102b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102bc:	2200      	movs	r2, #0
 80102be:	ec51 0b17 	vmov	r0, r1, d7
 80102c2:	eeb0 8a47 	vmov.f32	s16, s14
 80102c6:	eef0 8a67 	vmov.f32	s17, s15
 80102ca:	2300      	movs	r3, #0
 80102cc:	f7f0 fc04 	bl	8000ad8 <__aeabi_dcmpeq>
 80102d0:	4681      	mov	r9, r0
 80102d2:	b160      	cbz	r0, 80102ee <_dtoa_r+0xee>
 80102d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102d6:	2301      	movs	r3, #1
 80102d8:	6013      	str	r3, [r2, #0]
 80102da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f000 8568 	beq.w	8010db2 <_dtoa_r+0xbb2>
 80102e2:	4b86      	ldr	r3, [pc, #536]	; (80104fc <_dtoa_r+0x2fc>)
 80102e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80102e6:	6013      	str	r3, [r2, #0]
 80102e8:	3b01      	subs	r3, #1
 80102ea:	9300      	str	r3, [sp, #0]
 80102ec:	e7da      	b.n	80102a4 <_dtoa_r+0xa4>
 80102ee:	aa10      	add	r2, sp, #64	; 0x40
 80102f0:	a911      	add	r1, sp, #68	; 0x44
 80102f2:	4620      	mov	r0, r4
 80102f4:	eeb0 0a48 	vmov.f32	s0, s16
 80102f8:	eef0 0a68 	vmov.f32	s1, s17
 80102fc:	f001 f8e0 	bl	80114c0 <__d2b>
 8010300:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010304:	4682      	mov	sl, r0
 8010306:	2d00      	cmp	r5, #0
 8010308:	d07f      	beq.n	801040a <_dtoa_r+0x20a>
 801030a:	ee18 3a90 	vmov	r3, s17
 801030e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010312:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010316:	ec51 0b18 	vmov	r0, r1, d8
 801031a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801031e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010322:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010326:	4619      	mov	r1, r3
 8010328:	2200      	movs	r2, #0
 801032a:	4b75      	ldr	r3, [pc, #468]	; (8010500 <_dtoa_r+0x300>)
 801032c:	f7ef ffb4 	bl	8000298 <__aeabi_dsub>
 8010330:	a367      	add	r3, pc, #412	; (adr r3, 80104d0 <_dtoa_r+0x2d0>)
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	f7f0 f967 	bl	8000608 <__aeabi_dmul>
 801033a:	a367      	add	r3, pc, #412	; (adr r3, 80104d8 <_dtoa_r+0x2d8>)
 801033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010340:	f7ef ffac 	bl	800029c <__adddf3>
 8010344:	4606      	mov	r6, r0
 8010346:	4628      	mov	r0, r5
 8010348:	460f      	mov	r7, r1
 801034a:	f7f0 f8f3 	bl	8000534 <__aeabi_i2d>
 801034e:	a364      	add	r3, pc, #400	; (adr r3, 80104e0 <_dtoa_r+0x2e0>)
 8010350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010354:	f7f0 f958 	bl	8000608 <__aeabi_dmul>
 8010358:	4602      	mov	r2, r0
 801035a:	460b      	mov	r3, r1
 801035c:	4630      	mov	r0, r6
 801035e:	4639      	mov	r1, r7
 8010360:	f7ef ff9c 	bl	800029c <__adddf3>
 8010364:	4606      	mov	r6, r0
 8010366:	460f      	mov	r7, r1
 8010368:	f7f0 fbfe 	bl	8000b68 <__aeabi_d2iz>
 801036c:	2200      	movs	r2, #0
 801036e:	4683      	mov	fp, r0
 8010370:	2300      	movs	r3, #0
 8010372:	4630      	mov	r0, r6
 8010374:	4639      	mov	r1, r7
 8010376:	f7f0 fbb9 	bl	8000aec <__aeabi_dcmplt>
 801037a:	b148      	cbz	r0, 8010390 <_dtoa_r+0x190>
 801037c:	4658      	mov	r0, fp
 801037e:	f7f0 f8d9 	bl	8000534 <__aeabi_i2d>
 8010382:	4632      	mov	r2, r6
 8010384:	463b      	mov	r3, r7
 8010386:	f7f0 fba7 	bl	8000ad8 <__aeabi_dcmpeq>
 801038a:	b908      	cbnz	r0, 8010390 <_dtoa_r+0x190>
 801038c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010390:	f1bb 0f16 	cmp.w	fp, #22
 8010394:	d857      	bhi.n	8010446 <_dtoa_r+0x246>
 8010396:	4b5b      	ldr	r3, [pc, #364]	; (8010504 <_dtoa_r+0x304>)
 8010398:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801039c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a0:	ec51 0b18 	vmov	r0, r1, d8
 80103a4:	f7f0 fba2 	bl	8000aec <__aeabi_dcmplt>
 80103a8:	2800      	cmp	r0, #0
 80103aa:	d04e      	beq.n	801044a <_dtoa_r+0x24a>
 80103ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80103b0:	2300      	movs	r3, #0
 80103b2:	930c      	str	r3, [sp, #48]	; 0x30
 80103b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103b6:	1b5b      	subs	r3, r3, r5
 80103b8:	1e5a      	subs	r2, r3, #1
 80103ba:	bf45      	ittet	mi
 80103bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80103c0:	9305      	strmi	r3, [sp, #20]
 80103c2:	2300      	movpl	r3, #0
 80103c4:	2300      	movmi	r3, #0
 80103c6:	9206      	str	r2, [sp, #24]
 80103c8:	bf54      	ite	pl
 80103ca:	9305      	strpl	r3, [sp, #20]
 80103cc:	9306      	strmi	r3, [sp, #24]
 80103ce:	f1bb 0f00 	cmp.w	fp, #0
 80103d2:	db3c      	blt.n	801044e <_dtoa_r+0x24e>
 80103d4:	9b06      	ldr	r3, [sp, #24]
 80103d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80103da:	445b      	add	r3, fp
 80103dc:	9306      	str	r3, [sp, #24]
 80103de:	2300      	movs	r3, #0
 80103e0:	9308      	str	r3, [sp, #32]
 80103e2:	9b07      	ldr	r3, [sp, #28]
 80103e4:	2b09      	cmp	r3, #9
 80103e6:	d868      	bhi.n	80104ba <_dtoa_r+0x2ba>
 80103e8:	2b05      	cmp	r3, #5
 80103ea:	bfc4      	itt	gt
 80103ec:	3b04      	subgt	r3, #4
 80103ee:	9307      	strgt	r3, [sp, #28]
 80103f0:	9b07      	ldr	r3, [sp, #28]
 80103f2:	f1a3 0302 	sub.w	r3, r3, #2
 80103f6:	bfcc      	ite	gt
 80103f8:	2500      	movgt	r5, #0
 80103fa:	2501      	movle	r5, #1
 80103fc:	2b03      	cmp	r3, #3
 80103fe:	f200 8085 	bhi.w	801050c <_dtoa_r+0x30c>
 8010402:	e8df f003 	tbb	[pc, r3]
 8010406:	3b2e      	.short	0x3b2e
 8010408:	5839      	.short	0x5839
 801040a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801040e:	441d      	add	r5, r3
 8010410:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010414:	2b20      	cmp	r3, #32
 8010416:	bfc1      	itttt	gt
 8010418:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801041c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010420:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010424:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010428:	bfd6      	itet	le
 801042a:	f1c3 0320 	rsble	r3, r3, #32
 801042e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010432:	fa06 f003 	lslle.w	r0, r6, r3
 8010436:	f7f0 f86d 	bl	8000514 <__aeabi_ui2d>
 801043a:	2201      	movs	r2, #1
 801043c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010440:	3d01      	subs	r5, #1
 8010442:	920e      	str	r2, [sp, #56]	; 0x38
 8010444:	e76f      	b.n	8010326 <_dtoa_r+0x126>
 8010446:	2301      	movs	r3, #1
 8010448:	e7b3      	b.n	80103b2 <_dtoa_r+0x1b2>
 801044a:	900c      	str	r0, [sp, #48]	; 0x30
 801044c:	e7b2      	b.n	80103b4 <_dtoa_r+0x1b4>
 801044e:	9b05      	ldr	r3, [sp, #20]
 8010450:	eba3 030b 	sub.w	r3, r3, fp
 8010454:	9305      	str	r3, [sp, #20]
 8010456:	f1cb 0300 	rsb	r3, fp, #0
 801045a:	9308      	str	r3, [sp, #32]
 801045c:	2300      	movs	r3, #0
 801045e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010460:	e7bf      	b.n	80103e2 <_dtoa_r+0x1e2>
 8010462:	2300      	movs	r3, #0
 8010464:	9309      	str	r3, [sp, #36]	; 0x24
 8010466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010468:	2b00      	cmp	r3, #0
 801046a:	dc52      	bgt.n	8010512 <_dtoa_r+0x312>
 801046c:	2301      	movs	r3, #1
 801046e:	9301      	str	r3, [sp, #4]
 8010470:	9304      	str	r3, [sp, #16]
 8010472:	461a      	mov	r2, r3
 8010474:	920a      	str	r2, [sp, #40]	; 0x28
 8010476:	e00b      	b.n	8010490 <_dtoa_r+0x290>
 8010478:	2301      	movs	r3, #1
 801047a:	e7f3      	b.n	8010464 <_dtoa_r+0x264>
 801047c:	2300      	movs	r3, #0
 801047e:	9309      	str	r3, [sp, #36]	; 0x24
 8010480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010482:	445b      	add	r3, fp
 8010484:	9301      	str	r3, [sp, #4]
 8010486:	3301      	adds	r3, #1
 8010488:	2b01      	cmp	r3, #1
 801048a:	9304      	str	r3, [sp, #16]
 801048c:	bfb8      	it	lt
 801048e:	2301      	movlt	r3, #1
 8010490:	69e0      	ldr	r0, [r4, #28]
 8010492:	2100      	movs	r1, #0
 8010494:	2204      	movs	r2, #4
 8010496:	f102 0614 	add.w	r6, r2, #20
 801049a:	429e      	cmp	r6, r3
 801049c:	d93d      	bls.n	801051a <_dtoa_r+0x31a>
 801049e:	6041      	str	r1, [r0, #4]
 80104a0:	4620      	mov	r0, r4
 80104a2:	f000 fceb 	bl	8010e7c <_Balloc>
 80104a6:	9000      	str	r0, [sp, #0]
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d139      	bne.n	8010520 <_dtoa_r+0x320>
 80104ac:	4b16      	ldr	r3, [pc, #88]	; (8010508 <_dtoa_r+0x308>)
 80104ae:	4602      	mov	r2, r0
 80104b0:	f240 11af 	movw	r1, #431	; 0x1af
 80104b4:	e6bd      	b.n	8010232 <_dtoa_r+0x32>
 80104b6:	2301      	movs	r3, #1
 80104b8:	e7e1      	b.n	801047e <_dtoa_r+0x27e>
 80104ba:	2501      	movs	r5, #1
 80104bc:	2300      	movs	r3, #0
 80104be:	9307      	str	r3, [sp, #28]
 80104c0:	9509      	str	r5, [sp, #36]	; 0x24
 80104c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104c6:	9301      	str	r3, [sp, #4]
 80104c8:	9304      	str	r3, [sp, #16]
 80104ca:	2200      	movs	r2, #0
 80104cc:	2312      	movs	r3, #18
 80104ce:	e7d1      	b.n	8010474 <_dtoa_r+0x274>
 80104d0:	636f4361 	.word	0x636f4361
 80104d4:	3fd287a7 	.word	0x3fd287a7
 80104d8:	8b60c8b3 	.word	0x8b60c8b3
 80104dc:	3fc68a28 	.word	0x3fc68a28
 80104e0:	509f79fb 	.word	0x509f79fb
 80104e4:	3fd34413 	.word	0x3fd34413
 80104e8:	0801246d 	.word	0x0801246d
 80104ec:	08012484 	.word	0x08012484
 80104f0:	7ff00000 	.word	0x7ff00000
 80104f4:	08012469 	.word	0x08012469
 80104f8:	08012460 	.word	0x08012460
 80104fc:	0801243d 	.word	0x0801243d
 8010500:	3ff80000 	.word	0x3ff80000
 8010504:	08012570 	.word	0x08012570
 8010508:	080124dc 	.word	0x080124dc
 801050c:	2301      	movs	r3, #1
 801050e:	9309      	str	r3, [sp, #36]	; 0x24
 8010510:	e7d7      	b.n	80104c2 <_dtoa_r+0x2c2>
 8010512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010514:	9301      	str	r3, [sp, #4]
 8010516:	9304      	str	r3, [sp, #16]
 8010518:	e7ba      	b.n	8010490 <_dtoa_r+0x290>
 801051a:	3101      	adds	r1, #1
 801051c:	0052      	lsls	r2, r2, #1
 801051e:	e7ba      	b.n	8010496 <_dtoa_r+0x296>
 8010520:	69e3      	ldr	r3, [r4, #28]
 8010522:	9a00      	ldr	r2, [sp, #0]
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	9b04      	ldr	r3, [sp, #16]
 8010528:	2b0e      	cmp	r3, #14
 801052a:	f200 80a8 	bhi.w	801067e <_dtoa_r+0x47e>
 801052e:	2d00      	cmp	r5, #0
 8010530:	f000 80a5 	beq.w	801067e <_dtoa_r+0x47e>
 8010534:	f1bb 0f00 	cmp.w	fp, #0
 8010538:	dd38      	ble.n	80105ac <_dtoa_r+0x3ac>
 801053a:	4bc0      	ldr	r3, [pc, #768]	; (801083c <_dtoa_r+0x63c>)
 801053c:	f00b 020f 	and.w	r2, fp, #15
 8010540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010544:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010548:	e9d3 6700 	ldrd	r6, r7, [r3]
 801054c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010550:	d019      	beq.n	8010586 <_dtoa_r+0x386>
 8010552:	4bbb      	ldr	r3, [pc, #748]	; (8010840 <_dtoa_r+0x640>)
 8010554:	ec51 0b18 	vmov	r0, r1, d8
 8010558:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801055c:	f7f0 f97e 	bl	800085c <__aeabi_ddiv>
 8010560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010564:	f008 080f 	and.w	r8, r8, #15
 8010568:	2503      	movs	r5, #3
 801056a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010840 <_dtoa_r+0x640>
 801056e:	f1b8 0f00 	cmp.w	r8, #0
 8010572:	d10a      	bne.n	801058a <_dtoa_r+0x38a>
 8010574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010578:	4632      	mov	r2, r6
 801057a:	463b      	mov	r3, r7
 801057c:	f7f0 f96e 	bl	800085c <__aeabi_ddiv>
 8010580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010584:	e02b      	b.n	80105de <_dtoa_r+0x3de>
 8010586:	2502      	movs	r5, #2
 8010588:	e7ef      	b.n	801056a <_dtoa_r+0x36a>
 801058a:	f018 0f01 	tst.w	r8, #1
 801058e:	d008      	beq.n	80105a2 <_dtoa_r+0x3a2>
 8010590:	4630      	mov	r0, r6
 8010592:	4639      	mov	r1, r7
 8010594:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010598:	f7f0 f836 	bl	8000608 <__aeabi_dmul>
 801059c:	3501      	adds	r5, #1
 801059e:	4606      	mov	r6, r0
 80105a0:	460f      	mov	r7, r1
 80105a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80105a6:	f109 0908 	add.w	r9, r9, #8
 80105aa:	e7e0      	b.n	801056e <_dtoa_r+0x36e>
 80105ac:	f000 809f 	beq.w	80106ee <_dtoa_r+0x4ee>
 80105b0:	f1cb 0600 	rsb	r6, fp, #0
 80105b4:	4ba1      	ldr	r3, [pc, #644]	; (801083c <_dtoa_r+0x63c>)
 80105b6:	4fa2      	ldr	r7, [pc, #648]	; (8010840 <_dtoa_r+0x640>)
 80105b8:	f006 020f 	and.w	r2, r6, #15
 80105bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c4:	ec51 0b18 	vmov	r0, r1, d8
 80105c8:	f7f0 f81e 	bl	8000608 <__aeabi_dmul>
 80105cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105d0:	1136      	asrs	r6, r6, #4
 80105d2:	2300      	movs	r3, #0
 80105d4:	2502      	movs	r5, #2
 80105d6:	2e00      	cmp	r6, #0
 80105d8:	d17e      	bne.n	80106d8 <_dtoa_r+0x4d8>
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d1d0      	bne.n	8010580 <_dtoa_r+0x380>
 80105de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f000 8084 	beq.w	80106f2 <_dtoa_r+0x4f2>
 80105ea:	4b96      	ldr	r3, [pc, #600]	; (8010844 <_dtoa_r+0x644>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	4640      	mov	r0, r8
 80105f0:	4649      	mov	r1, r9
 80105f2:	f7f0 fa7b 	bl	8000aec <__aeabi_dcmplt>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d07b      	beq.n	80106f2 <_dtoa_r+0x4f2>
 80105fa:	9b04      	ldr	r3, [sp, #16]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d078      	beq.n	80106f2 <_dtoa_r+0x4f2>
 8010600:	9b01      	ldr	r3, [sp, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	dd39      	ble.n	801067a <_dtoa_r+0x47a>
 8010606:	4b90      	ldr	r3, [pc, #576]	; (8010848 <_dtoa_r+0x648>)
 8010608:	2200      	movs	r2, #0
 801060a:	4640      	mov	r0, r8
 801060c:	4649      	mov	r1, r9
 801060e:	f7ef fffb 	bl	8000608 <__aeabi_dmul>
 8010612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010616:	9e01      	ldr	r6, [sp, #4]
 8010618:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801061c:	3501      	adds	r5, #1
 801061e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010622:	4628      	mov	r0, r5
 8010624:	f7ef ff86 	bl	8000534 <__aeabi_i2d>
 8010628:	4642      	mov	r2, r8
 801062a:	464b      	mov	r3, r9
 801062c:	f7ef ffec 	bl	8000608 <__aeabi_dmul>
 8010630:	4b86      	ldr	r3, [pc, #536]	; (801084c <_dtoa_r+0x64c>)
 8010632:	2200      	movs	r2, #0
 8010634:	f7ef fe32 	bl	800029c <__adddf3>
 8010638:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801063c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010640:	9303      	str	r3, [sp, #12]
 8010642:	2e00      	cmp	r6, #0
 8010644:	d158      	bne.n	80106f8 <_dtoa_r+0x4f8>
 8010646:	4b82      	ldr	r3, [pc, #520]	; (8010850 <_dtoa_r+0x650>)
 8010648:	2200      	movs	r2, #0
 801064a:	4640      	mov	r0, r8
 801064c:	4649      	mov	r1, r9
 801064e:	f7ef fe23 	bl	8000298 <__aeabi_dsub>
 8010652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010656:	4680      	mov	r8, r0
 8010658:	4689      	mov	r9, r1
 801065a:	f7f0 fa65 	bl	8000b28 <__aeabi_dcmpgt>
 801065e:	2800      	cmp	r0, #0
 8010660:	f040 8296 	bne.w	8010b90 <_dtoa_r+0x990>
 8010664:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010668:	4640      	mov	r0, r8
 801066a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801066e:	4649      	mov	r1, r9
 8010670:	f7f0 fa3c 	bl	8000aec <__aeabi_dcmplt>
 8010674:	2800      	cmp	r0, #0
 8010676:	f040 8289 	bne.w	8010b8c <_dtoa_r+0x98c>
 801067a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801067e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010680:	2b00      	cmp	r3, #0
 8010682:	f2c0 814e 	blt.w	8010922 <_dtoa_r+0x722>
 8010686:	f1bb 0f0e 	cmp.w	fp, #14
 801068a:	f300 814a 	bgt.w	8010922 <_dtoa_r+0x722>
 801068e:	4b6b      	ldr	r3, [pc, #428]	; (801083c <_dtoa_r+0x63c>)
 8010690:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801069a:	2b00      	cmp	r3, #0
 801069c:	f280 80dc 	bge.w	8010858 <_dtoa_r+0x658>
 80106a0:	9b04      	ldr	r3, [sp, #16]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	f300 80d8 	bgt.w	8010858 <_dtoa_r+0x658>
 80106a8:	f040 826f 	bne.w	8010b8a <_dtoa_r+0x98a>
 80106ac:	4b68      	ldr	r3, [pc, #416]	; (8010850 <_dtoa_r+0x650>)
 80106ae:	2200      	movs	r2, #0
 80106b0:	4640      	mov	r0, r8
 80106b2:	4649      	mov	r1, r9
 80106b4:	f7ef ffa8 	bl	8000608 <__aeabi_dmul>
 80106b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106bc:	f7f0 fa2a 	bl	8000b14 <__aeabi_dcmpge>
 80106c0:	9e04      	ldr	r6, [sp, #16]
 80106c2:	4637      	mov	r7, r6
 80106c4:	2800      	cmp	r0, #0
 80106c6:	f040 8245 	bne.w	8010b54 <_dtoa_r+0x954>
 80106ca:	9d00      	ldr	r5, [sp, #0]
 80106cc:	2331      	movs	r3, #49	; 0x31
 80106ce:	f805 3b01 	strb.w	r3, [r5], #1
 80106d2:	f10b 0b01 	add.w	fp, fp, #1
 80106d6:	e241      	b.n	8010b5c <_dtoa_r+0x95c>
 80106d8:	07f2      	lsls	r2, r6, #31
 80106da:	d505      	bpl.n	80106e8 <_dtoa_r+0x4e8>
 80106dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106e0:	f7ef ff92 	bl	8000608 <__aeabi_dmul>
 80106e4:	3501      	adds	r5, #1
 80106e6:	2301      	movs	r3, #1
 80106e8:	1076      	asrs	r6, r6, #1
 80106ea:	3708      	adds	r7, #8
 80106ec:	e773      	b.n	80105d6 <_dtoa_r+0x3d6>
 80106ee:	2502      	movs	r5, #2
 80106f0:	e775      	b.n	80105de <_dtoa_r+0x3de>
 80106f2:	9e04      	ldr	r6, [sp, #16]
 80106f4:	465f      	mov	r7, fp
 80106f6:	e792      	b.n	801061e <_dtoa_r+0x41e>
 80106f8:	9900      	ldr	r1, [sp, #0]
 80106fa:	4b50      	ldr	r3, [pc, #320]	; (801083c <_dtoa_r+0x63c>)
 80106fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010700:	4431      	add	r1, r6
 8010702:	9102      	str	r1, [sp, #8]
 8010704:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010706:	eeb0 9a47 	vmov.f32	s18, s14
 801070a:	eef0 9a67 	vmov.f32	s19, s15
 801070e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010712:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010716:	2900      	cmp	r1, #0
 8010718:	d044      	beq.n	80107a4 <_dtoa_r+0x5a4>
 801071a:	494e      	ldr	r1, [pc, #312]	; (8010854 <_dtoa_r+0x654>)
 801071c:	2000      	movs	r0, #0
 801071e:	f7f0 f89d 	bl	800085c <__aeabi_ddiv>
 8010722:	ec53 2b19 	vmov	r2, r3, d9
 8010726:	f7ef fdb7 	bl	8000298 <__aeabi_dsub>
 801072a:	9d00      	ldr	r5, [sp, #0]
 801072c:	ec41 0b19 	vmov	d9, r0, r1
 8010730:	4649      	mov	r1, r9
 8010732:	4640      	mov	r0, r8
 8010734:	f7f0 fa18 	bl	8000b68 <__aeabi_d2iz>
 8010738:	4606      	mov	r6, r0
 801073a:	f7ef fefb 	bl	8000534 <__aeabi_i2d>
 801073e:	4602      	mov	r2, r0
 8010740:	460b      	mov	r3, r1
 8010742:	4640      	mov	r0, r8
 8010744:	4649      	mov	r1, r9
 8010746:	f7ef fda7 	bl	8000298 <__aeabi_dsub>
 801074a:	3630      	adds	r6, #48	; 0x30
 801074c:	f805 6b01 	strb.w	r6, [r5], #1
 8010750:	ec53 2b19 	vmov	r2, r3, d9
 8010754:	4680      	mov	r8, r0
 8010756:	4689      	mov	r9, r1
 8010758:	f7f0 f9c8 	bl	8000aec <__aeabi_dcmplt>
 801075c:	2800      	cmp	r0, #0
 801075e:	d164      	bne.n	801082a <_dtoa_r+0x62a>
 8010760:	4642      	mov	r2, r8
 8010762:	464b      	mov	r3, r9
 8010764:	4937      	ldr	r1, [pc, #220]	; (8010844 <_dtoa_r+0x644>)
 8010766:	2000      	movs	r0, #0
 8010768:	f7ef fd96 	bl	8000298 <__aeabi_dsub>
 801076c:	ec53 2b19 	vmov	r2, r3, d9
 8010770:	f7f0 f9bc 	bl	8000aec <__aeabi_dcmplt>
 8010774:	2800      	cmp	r0, #0
 8010776:	f040 80b6 	bne.w	80108e6 <_dtoa_r+0x6e6>
 801077a:	9b02      	ldr	r3, [sp, #8]
 801077c:	429d      	cmp	r5, r3
 801077e:	f43f af7c 	beq.w	801067a <_dtoa_r+0x47a>
 8010782:	4b31      	ldr	r3, [pc, #196]	; (8010848 <_dtoa_r+0x648>)
 8010784:	ec51 0b19 	vmov	r0, r1, d9
 8010788:	2200      	movs	r2, #0
 801078a:	f7ef ff3d 	bl	8000608 <__aeabi_dmul>
 801078e:	4b2e      	ldr	r3, [pc, #184]	; (8010848 <_dtoa_r+0x648>)
 8010790:	ec41 0b19 	vmov	d9, r0, r1
 8010794:	2200      	movs	r2, #0
 8010796:	4640      	mov	r0, r8
 8010798:	4649      	mov	r1, r9
 801079a:	f7ef ff35 	bl	8000608 <__aeabi_dmul>
 801079e:	4680      	mov	r8, r0
 80107a0:	4689      	mov	r9, r1
 80107a2:	e7c5      	b.n	8010730 <_dtoa_r+0x530>
 80107a4:	ec51 0b17 	vmov	r0, r1, d7
 80107a8:	f7ef ff2e 	bl	8000608 <__aeabi_dmul>
 80107ac:	9b02      	ldr	r3, [sp, #8]
 80107ae:	9d00      	ldr	r5, [sp, #0]
 80107b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80107b2:	ec41 0b19 	vmov	d9, r0, r1
 80107b6:	4649      	mov	r1, r9
 80107b8:	4640      	mov	r0, r8
 80107ba:	f7f0 f9d5 	bl	8000b68 <__aeabi_d2iz>
 80107be:	4606      	mov	r6, r0
 80107c0:	f7ef feb8 	bl	8000534 <__aeabi_i2d>
 80107c4:	3630      	adds	r6, #48	; 0x30
 80107c6:	4602      	mov	r2, r0
 80107c8:	460b      	mov	r3, r1
 80107ca:	4640      	mov	r0, r8
 80107cc:	4649      	mov	r1, r9
 80107ce:	f7ef fd63 	bl	8000298 <__aeabi_dsub>
 80107d2:	f805 6b01 	strb.w	r6, [r5], #1
 80107d6:	9b02      	ldr	r3, [sp, #8]
 80107d8:	429d      	cmp	r5, r3
 80107da:	4680      	mov	r8, r0
 80107dc:	4689      	mov	r9, r1
 80107de:	f04f 0200 	mov.w	r2, #0
 80107e2:	d124      	bne.n	801082e <_dtoa_r+0x62e>
 80107e4:	4b1b      	ldr	r3, [pc, #108]	; (8010854 <_dtoa_r+0x654>)
 80107e6:	ec51 0b19 	vmov	r0, r1, d9
 80107ea:	f7ef fd57 	bl	800029c <__adddf3>
 80107ee:	4602      	mov	r2, r0
 80107f0:	460b      	mov	r3, r1
 80107f2:	4640      	mov	r0, r8
 80107f4:	4649      	mov	r1, r9
 80107f6:	f7f0 f997 	bl	8000b28 <__aeabi_dcmpgt>
 80107fa:	2800      	cmp	r0, #0
 80107fc:	d173      	bne.n	80108e6 <_dtoa_r+0x6e6>
 80107fe:	ec53 2b19 	vmov	r2, r3, d9
 8010802:	4914      	ldr	r1, [pc, #80]	; (8010854 <_dtoa_r+0x654>)
 8010804:	2000      	movs	r0, #0
 8010806:	f7ef fd47 	bl	8000298 <__aeabi_dsub>
 801080a:	4602      	mov	r2, r0
 801080c:	460b      	mov	r3, r1
 801080e:	4640      	mov	r0, r8
 8010810:	4649      	mov	r1, r9
 8010812:	f7f0 f96b 	bl	8000aec <__aeabi_dcmplt>
 8010816:	2800      	cmp	r0, #0
 8010818:	f43f af2f 	beq.w	801067a <_dtoa_r+0x47a>
 801081c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801081e:	1e6b      	subs	r3, r5, #1
 8010820:	930f      	str	r3, [sp, #60]	; 0x3c
 8010822:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010826:	2b30      	cmp	r3, #48	; 0x30
 8010828:	d0f8      	beq.n	801081c <_dtoa_r+0x61c>
 801082a:	46bb      	mov	fp, r7
 801082c:	e04a      	b.n	80108c4 <_dtoa_r+0x6c4>
 801082e:	4b06      	ldr	r3, [pc, #24]	; (8010848 <_dtoa_r+0x648>)
 8010830:	f7ef feea 	bl	8000608 <__aeabi_dmul>
 8010834:	4680      	mov	r8, r0
 8010836:	4689      	mov	r9, r1
 8010838:	e7bd      	b.n	80107b6 <_dtoa_r+0x5b6>
 801083a:	bf00      	nop
 801083c:	08012570 	.word	0x08012570
 8010840:	08012548 	.word	0x08012548
 8010844:	3ff00000 	.word	0x3ff00000
 8010848:	40240000 	.word	0x40240000
 801084c:	401c0000 	.word	0x401c0000
 8010850:	40140000 	.word	0x40140000
 8010854:	3fe00000 	.word	0x3fe00000
 8010858:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801085c:	9d00      	ldr	r5, [sp, #0]
 801085e:	4642      	mov	r2, r8
 8010860:	464b      	mov	r3, r9
 8010862:	4630      	mov	r0, r6
 8010864:	4639      	mov	r1, r7
 8010866:	f7ef fff9 	bl	800085c <__aeabi_ddiv>
 801086a:	f7f0 f97d 	bl	8000b68 <__aeabi_d2iz>
 801086e:	9001      	str	r0, [sp, #4]
 8010870:	f7ef fe60 	bl	8000534 <__aeabi_i2d>
 8010874:	4642      	mov	r2, r8
 8010876:	464b      	mov	r3, r9
 8010878:	f7ef fec6 	bl	8000608 <__aeabi_dmul>
 801087c:	4602      	mov	r2, r0
 801087e:	460b      	mov	r3, r1
 8010880:	4630      	mov	r0, r6
 8010882:	4639      	mov	r1, r7
 8010884:	f7ef fd08 	bl	8000298 <__aeabi_dsub>
 8010888:	9e01      	ldr	r6, [sp, #4]
 801088a:	9f04      	ldr	r7, [sp, #16]
 801088c:	3630      	adds	r6, #48	; 0x30
 801088e:	f805 6b01 	strb.w	r6, [r5], #1
 8010892:	9e00      	ldr	r6, [sp, #0]
 8010894:	1bae      	subs	r6, r5, r6
 8010896:	42b7      	cmp	r7, r6
 8010898:	4602      	mov	r2, r0
 801089a:	460b      	mov	r3, r1
 801089c:	d134      	bne.n	8010908 <_dtoa_r+0x708>
 801089e:	f7ef fcfd 	bl	800029c <__adddf3>
 80108a2:	4642      	mov	r2, r8
 80108a4:	464b      	mov	r3, r9
 80108a6:	4606      	mov	r6, r0
 80108a8:	460f      	mov	r7, r1
 80108aa:	f7f0 f93d 	bl	8000b28 <__aeabi_dcmpgt>
 80108ae:	b9c8      	cbnz	r0, 80108e4 <_dtoa_r+0x6e4>
 80108b0:	4642      	mov	r2, r8
 80108b2:	464b      	mov	r3, r9
 80108b4:	4630      	mov	r0, r6
 80108b6:	4639      	mov	r1, r7
 80108b8:	f7f0 f90e 	bl	8000ad8 <__aeabi_dcmpeq>
 80108bc:	b110      	cbz	r0, 80108c4 <_dtoa_r+0x6c4>
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	07db      	lsls	r3, r3, #31
 80108c2:	d40f      	bmi.n	80108e4 <_dtoa_r+0x6e4>
 80108c4:	4651      	mov	r1, sl
 80108c6:	4620      	mov	r0, r4
 80108c8:	f000 fb18 	bl	8010efc <_Bfree>
 80108cc:	2300      	movs	r3, #0
 80108ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108d0:	702b      	strb	r3, [r5, #0]
 80108d2:	f10b 0301 	add.w	r3, fp, #1
 80108d6:	6013      	str	r3, [r2, #0]
 80108d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f43f ace2 	beq.w	80102a4 <_dtoa_r+0xa4>
 80108e0:	601d      	str	r5, [r3, #0]
 80108e2:	e4df      	b.n	80102a4 <_dtoa_r+0xa4>
 80108e4:	465f      	mov	r7, fp
 80108e6:	462b      	mov	r3, r5
 80108e8:	461d      	mov	r5, r3
 80108ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108ee:	2a39      	cmp	r2, #57	; 0x39
 80108f0:	d106      	bne.n	8010900 <_dtoa_r+0x700>
 80108f2:	9a00      	ldr	r2, [sp, #0]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d1f7      	bne.n	80108e8 <_dtoa_r+0x6e8>
 80108f8:	9900      	ldr	r1, [sp, #0]
 80108fa:	2230      	movs	r2, #48	; 0x30
 80108fc:	3701      	adds	r7, #1
 80108fe:	700a      	strb	r2, [r1, #0]
 8010900:	781a      	ldrb	r2, [r3, #0]
 8010902:	3201      	adds	r2, #1
 8010904:	701a      	strb	r2, [r3, #0]
 8010906:	e790      	b.n	801082a <_dtoa_r+0x62a>
 8010908:	4ba3      	ldr	r3, [pc, #652]	; (8010b98 <_dtoa_r+0x998>)
 801090a:	2200      	movs	r2, #0
 801090c:	f7ef fe7c 	bl	8000608 <__aeabi_dmul>
 8010910:	2200      	movs	r2, #0
 8010912:	2300      	movs	r3, #0
 8010914:	4606      	mov	r6, r0
 8010916:	460f      	mov	r7, r1
 8010918:	f7f0 f8de 	bl	8000ad8 <__aeabi_dcmpeq>
 801091c:	2800      	cmp	r0, #0
 801091e:	d09e      	beq.n	801085e <_dtoa_r+0x65e>
 8010920:	e7d0      	b.n	80108c4 <_dtoa_r+0x6c4>
 8010922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010924:	2a00      	cmp	r2, #0
 8010926:	f000 80ca 	beq.w	8010abe <_dtoa_r+0x8be>
 801092a:	9a07      	ldr	r2, [sp, #28]
 801092c:	2a01      	cmp	r2, #1
 801092e:	f300 80ad 	bgt.w	8010a8c <_dtoa_r+0x88c>
 8010932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010934:	2a00      	cmp	r2, #0
 8010936:	f000 80a5 	beq.w	8010a84 <_dtoa_r+0x884>
 801093a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801093e:	9e08      	ldr	r6, [sp, #32]
 8010940:	9d05      	ldr	r5, [sp, #20]
 8010942:	9a05      	ldr	r2, [sp, #20]
 8010944:	441a      	add	r2, r3
 8010946:	9205      	str	r2, [sp, #20]
 8010948:	9a06      	ldr	r2, [sp, #24]
 801094a:	2101      	movs	r1, #1
 801094c:	441a      	add	r2, r3
 801094e:	4620      	mov	r0, r4
 8010950:	9206      	str	r2, [sp, #24]
 8010952:	f000 fb89 	bl	8011068 <__i2b>
 8010956:	4607      	mov	r7, r0
 8010958:	b165      	cbz	r5, 8010974 <_dtoa_r+0x774>
 801095a:	9b06      	ldr	r3, [sp, #24]
 801095c:	2b00      	cmp	r3, #0
 801095e:	dd09      	ble.n	8010974 <_dtoa_r+0x774>
 8010960:	42ab      	cmp	r3, r5
 8010962:	9a05      	ldr	r2, [sp, #20]
 8010964:	bfa8      	it	ge
 8010966:	462b      	movge	r3, r5
 8010968:	1ad2      	subs	r2, r2, r3
 801096a:	9205      	str	r2, [sp, #20]
 801096c:	9a06      	ldr	r2, [sp, #24]
 801096e:	1aed      	subs	r5, r5, r3
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	9306      	str	r3, [sp, #24]
 8010974:	9b08      	ldr	r3, [sp, #32]
 8010976:	b1f3      	cbz	r3, 80109b6 <_dtoa_r+0x7b6>
 8010978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801097a:	2b00      	cmp	r3, #0
 801097c:	f000 80a3 	beq.w	8010ac6 <_dtoa_r+0x8c6>
 8010980:	2e00      	cmp	r6, #0
 8010982:	dd10      	ble.n	80109a6 <_dtoa_r+0x7a6>
 8010984:	4639      	mov	r1, r7
 8010986:	4632      	mov	r2, r6
 8010988:	4620      	mov	r0, r4
 801098a:	f000 fc2d 	bl	80111e8 <__pow5mult>
 801098e:	4652      	mov	r2, sl
 8010990:	4601      	mov	r1, r0
 8010992:	4607      	mov	r7, r0
 8010994:	4620      	mov	r0, r4
 8010996:	f000 fb7d 	bl	8011094 <__multiply>
 801099a:	4651      	mov	r1, sl
 801099c:	4680      	mov	r8, r0
 801099e:	4620      	mov	r0, r4
 80109a0:	f000 faac 	bl	8010efc <_Bfree>
 80109a4:	46c2      	mov	sl, r8
 80109a6:	9b08      	ldr	r3, [sp, #32]
 80109a8:	1b9a      	subs	r2, r3, r6
 80109aa:	d004      	beq.n	80109b6 <_dtoa_r+0x7b6>
 80109ac:	4651      	mov	r1, sl
 80109ae:	4620      	mov	r0, r4
 80109b0:	f000 fc1a 	bl	80111e8 <__pow5mult>
 80109b4:	4682      	mov	sl, r0
 80109b6:	2101      	movs	r1, #1
 80109b8:	4620      	mov	r0, r4
 80109ba:	f000 fb55 	bl	8011068 <__i2b>
 80109be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	4606      	mov	r6, r0
 80109c4:	f340 8081 	ble.w	8010aca <_dtoa_r+0x8ca>
 80109c8:	461a      	mov	r2, r3
 80109ca:	4601      	mov	r1, r0
 80109cc:	4620      	mov	r0, r4
 80109ce:	f000 fc0b 	bl	80111e8 <__pow5mult>
 80109d2:	9b07      	ldr	r3, [sp, #28]
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	4606      	mov	r6, r0
 80109d8:	dd7a      	ble.n	8010ad0 <_dtoa_r+0x8d0>
 80109da:	f04f 0800 	mov.w	r8, #0
 80109de:	6933      	ldr	r3, [r6, #16]
 80109e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80109e4:	6918      	ldr	r0, [r3, #16]
 80109e6:	f000 faf1 	bl	8010fcc <__hi0bits>
 80109ea:	f1c0 0020 	rsb	r0, r0, #32
 80109ee:	9b06      	ldr	r3, [sp, #24]
 80109f0:	4418      	add	r0, r3
 80109f2:	f010 001f 	ands.w	r0, r0, #31
 80109f6:	f000 8094 	beq.w	8010b22 <_dtoa_r+0x922>
 80109fa:	f1c0 0320 	rsb	r3, r0, #32
 80109fe:	2b04      	cmp	r3, #4
 8010a00:	f340 8085 	ble.w	8010b0e <_dtoa_r+0x90e>
 8010a04:	9b05      	ldr	r3, [sp, #20]
 8010a06:	f1c0 001c 	rsb	r0, r0, #28
 8010a0a:	4403      	add	r3, r0
 8010a0c:	9305      	str	r3, [sp, #20]
 8010a0e:	9b06      	ldr	r3, [sp, #24]
 8010a10:	4403      	add	r3, r0
 8010a12:	4405      	add	r5, r0
 8010a14:	9306      	str	r3, [sp, #24]
 8010a16:	9b05      	ldr	r3, [sp, #20]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	dd05      	ble.n	8010a28 <_dtoa_r+0x828>
 8010a1c:	4651      	mov	r1, sl
 8010a1e:	461a      	mov	r2, r3
 8010a20:	4620      	mov	r0, r4
 8010a22:	f000 fc3b 	bl	801129c <__lshift>
 8010a26:	4682      	mov	sl, r0
 8010a28:	9b06      	ldr	r3, [sp, #24]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	dd05      	ble.n	8010a3a <_dtoa_r+0x83a>
 8010a2e:	4631      	mov	r1, r6
 8010a30:	461a      	mov	r2, r3
 8010a32:	4620      	mov	r0, r4
 8010a34:	f000 fc32 	bl	801129c <__lshift>
 8010a38:	4606      	mov	r6, r0
 8010a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d072      	beq.n	8010b26 <_dtoa_r+0x926>
 8010a40:	4631      	mov	r1, r6
 8010a42:	4650      	mov	r0, sl
 8010a44:	f000 fc96 	bl	8011374 <__mcmp>
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	da6c      	bge.n	8010b26 <_dtoa_r+0x926>
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	4651      	mov	r1, sl
 8010a50:	220a      	movs	r2, #10
 8010a52:	4620      	mov	r0, r4
 8010a54:	f000 fa74 	bl	8010f40 <__multadd>
 8010a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a5a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010a5e:	4682      	mov	sl, r0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	f000 81b0 	beq.w	8010dc6 <_dtoa_r+0xbc6>
 8010a66:	2300      	movs	r3, #0
 8010a68:	4639      	mov	r1, r7
 8010a6a:	220a      	movs	r2, #10
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f000 fa67 	bl	8010f40 <__multadd>
 8010a72:	9b01      	ldr	r3, [sp, #4]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	4607      	mov	r7, r0
 8010a78:	f300 8096 	bgt.w	8010ba8 <_dtoa_r+0x9a8>
 8010a7c:	9b07      	ldr	r3, [sp, #28]
 8010a7e:	2b02      	cmp	r3, #2
 8010a80:	dc59      	bgt.n	8010b36 <_dtoa_r+0x936>
 8010a82:	e091      	b.n	8010ba8 <_dtoa_r+0x9a8>
 8010a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010a8a:	e758      	b.n	801093e <_dtoa_r+0x73e>
 8010a8c:	9b04      	ldr	r3, [sp, #16]
 8010a8e:	1e5e      	subs	r6, r3, #1
 8010a90:	9b08      	ldr	r3, [sp, #32]
 8010a92:	42b3      	cmp	r3, r6
 8010a94:	bfbf      	itttt	lt
 8010a96:	9b08      	ldrlt	r3, [sp, #32]
 8010a98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010a9a:	9608      	strlt	r6, [sp, #32]
 8010a9c:	1af3      	sublt	r3, r6, r3
 8010a9e:	bfb4      	ite	lt
 8010aa0:	18d2      	addlt	r2, r2, r3
 8010aa2:	1b9e      	subge	r6, r3, r6
 8010aa4:	9b04      	ldr	r3, [sp, #16]
 8010aa6:	bfbc      	itt	lt
 8010aa8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010aaa:	2600      	movlt	r6, #0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	bfb7      	itett	lt
 8010ab0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010ab4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010ab8:	1a9d      	sublt	r5, r3, r2
 8010aba:	2300      	movlt	r3, #0
 8010abc:	e741      	b.n	8010942 <_dtoa_r+0x742>
 8010abe:	9e08      	ldr	r6, [sp, #32]
 8010ac0:	9d05      	ldr	r5, [sp, #20]
 8010ac2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010ac4:	e748      	b.n	8010958 <_dtoa_r+0x758>
 8010ac6:	9a08      	ldr	r2, [sp, #32]
 8010ac8:	e770      	b.n	80109ac <_dtoa_r+0x7ac>
 8010aca:	9b07      	ldr	r3, [sp, #28]
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	dc19      	bgt.n	8010b04 <_dtoa_r+0x904>
 8010ad0:	9b02      	ldr	r3, [sp, #8]
 8010ad2:	b9bb      	cbnz	r3, 8010b04 <_dtoa_r+0x904>
 8010ad4:	9b03      	ldr	r3, [sp, #12]
 8010ad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ada:	b99b      	cbnz	r3, 8010b04 <_dtoa_r+0x904>
 8010adc:	9b03      	ldr	r3, [sp, #12]
 8010ade:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ae2:	0d1b      	lsrs	r3, r3, #20
 8010ae4:	051b      	lsls	r3, r3, #20
 8010ae6:	b183      	cbz	r3, 8010b0a <_dtoa_r+0x90a>
 8010ae8:	9b05      	ldr	r3, [sp, #20]
 8010aea:	3301      	adds	r3, #1
 8010aec:	9305      	str	r3, [sp, #20]
 8010aee:	9b06      	ldr	r3, [sp, #24]
 8010af0:	3301      	adds	r3, #1
 8010af2:	9306      	str	r3, [sp, #24]
 8010af4:	f04f 0801 	mov.w	r8, #1
 8010af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	f47f af6f 	bne.w	80109de <_dtoa_r+0x7de>
 8010b00:	2001      	movs	r0, #1
 8010b02:	e774      	b.n	80109ee <_dtoa_r+0x7ee>
 8010b04:	f04f 0800 	mov.w	r8, #0
 8010b08:	e7f6      	b.n	8010af8 <_dtoa_r+0x8f8>
 8010b0a:	4698      	mov	r8, r3
 8010b0c:	e7f4      	b.n	8010af8 <_dtoa_r+0x8f8>
 8010b0e:	d082      	beq.n	8010a16 <_dtoa_r+0x816>
 8010b10:	9a05      	ldr	r2, [sp, #20]
 8010b12:	331c      	adds	r3, #28
 8010b14:	441a      	add	r2, r3
 8010b16:	9205      	str	r2, [sp, #20]
 8010b18:	9a06      	ldr	r2, [sp, #24]
 8010b1a:	441a      	add	r2, r3
 8010b1c:	441d      	add	r5, r3
 8010b1e:	9206      	str	r2, [sp, #24]
 8010b20:	e779      	b.n	8010a16 <_dtoa_r+0x816>
 8010b22:	4603      	mov	r3, r0
 8010b24:	e7f4      	b.n	8010b10 <_dtoa_r+0x910>
 8010b26:	9b04      	ldr	r3, [sp, #16]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	dc37      	bgt.n	8010b9c <_dtoa_r+0x99c>
 8010b2c:	9b07      	ldr	r3, [sp, #28]
 8010b2e:	2b02      	cmp	r3, #2
 8010b30:	dd34      	ble.n	8010b9c <_dtoa_r+0x99c>
 8010b32:	9b04      	ldr	r3, [sp, #16]
 8010b34:	9301      	str	r3, [sp, #4]
 8010b36:	9b01      	ldr	r3, [sp, #4]
 8010b38:	b963      	cbnz	r3, 8010b54 <_dtoa_r+0x954>
 8010b3a:	4631      	mov	r1, r6
 8010b3c:	2205      	movs	r2, #5
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f000 f9fe 	bl	8010f40 <__multadd>
 8010b44:	4601      	mov	r1, r0
 8010b46:	4606      	mov	r6, r0
 8010b48:	4650      	mov	r0, sl
 8010b4a:	f000 fc13 	bl	8011374 <__mcmp>
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	f73f adbb 	bgt.w	80106ca <_dtoa_r+0x4ca>
 8010b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b56:	9d00      	ldr	r5, [sp, #0]
 8010b58:	ea6f 0b03 	mvn.w	fp, r3
 8010b5c:	f04f 0800 	mov.w	r8, #0
 8010b60:	4631      	mov	r1, r6
 8010b62:	4620      	mov	r0, r4
 8010b64:	f000 f9ca 	bl	8010efc <_Bfree>
 8010b68:	2f00      	cmp	r7, #0
 8010b6a:	f43f aeab 	beq.w	80108c4 <_dtoa_r+0x6c4>
 8010b6e:	f1b8 0f00 	cmp.w	r8, #0
 8010b72:	d005      	beq.n	8010b80 <_dtoa_r+0x980>
 8010b74:	45b8      	cmp	r8, r7
 8010b76:	d003      	beq.n	8010b80 <_dtoa_r+0x980>
 8010b78:	4641      	mov	r1, r8
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f000 f9be 	bl	8010efc <_Bfree>
 8010b80:	4639      	mov	r1, r7
 8010b82:	4620      	mov	r0, r4
 8010b84:	f000 f9ba 	bl	8010efc <_Bfree>
 8010b88:	e69c      	b.n	80108c4 <_dtoa_r+0x6c4>
 8010b8a:	2600      	movs	r6, #0
 8010b8c:	4637      	mov	r7, r6
 8010b8e:	e7e1      	b.n	8010b54 <_dtoa_r+0x954>
 8010b90:	46bb      	mov	fp, r7
 8010b92:	4637      	mov	r7, r6
 8010b94:	e599      	b.n	80106ca <_dtoa_r+0x4ca>
 8010b96:	bf00      	nop
 8010b98:	40240000 	.word	0x40240000
 8010b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f000 80c8 	beq.w	8010d34 <_dtoa_r+0xb34>
 8010ba4:	9b04      	ldr	r3, [sp, #16]
 8010ba6:	9301      	str	r3, [sp, #4]
 8010ba8:	2d00      	cmp	r5, #0
 8010baa:	dd05      	ble.n	8010bb8 <_dtoa_r+0x9b8>
 8010bac:	4639      	mov	r1, r7
 8010bae:	462a      	mov	r2, r5
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f000 fb73 	bl	801129c <__lshift>
 8010bb6:	4607      	mov	r7, r0
 8010bb8:	f1b8 0f00 	cmp.w	r8, #0
 8010bbc:	d05b      	beq.n	8010c76 <_dtoa_r+0xa76>
 8010bbe:	6879      	ldr	r1, [r7, #4]
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	f000 f95b 	bl	8010e7c <_Balloc>
 8010bc6:	4605      	mov	r5, r0
 8010bc8:	b928      	cbnz	r0, 8010bd6 <_dtoa_r+0x9d6>
 8010bca:	4b83      	ldr	r3, [pc, #524]	; (8010dd8 <_dtoa_r+0xbd8>)
 8010bcc:	4602      	mov	r2, r0
 8010bce:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010bd2:	f7ff bb2e 	b.w	8010232 <_dtoa_r+0x32>
 8010bd6:	693a      	ldr	r2, [r7, #16]
 8010bd8:	3202      	adds	r2, #2
 8010bda:	0092      	lsls	r2, r2, #2
 8010bdc:	f107 010c 	add.w	r1, r7, #12
 8010be0:	300c      	adds	r0, #12
 8010be2:	f7ff fa77 	bl	80100d4 <memcpy>
 8010be6:	2201      	movs	r2, #1
 8010be8:	4629      	mov	r1, r5
 8010bea:	4620      	mov	r0, r4
 8010bec:	f000 fb56 	bl	801129c <__lshift>
 8010bf0:	9b00      	ldr	r3, [sp, #0]
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	9304      	str	r3, [sp, #16]
 8010bf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bfa:	4413      	add	r3, r2
 8010bfc:	9308      	str	r3, [sp, #32]
 8010bfe:	9b02      	ldr	r3, [sp, #8]
 8010c00:	f003 0301 	and.w	r3, r3, #1
 8010c04:	46b8      	mov	r8, r7
 8010c06:	9306      	str	r3, [sp, #24]
 8010c08:	4607      	mov	r7, r0
 8010c0a:	9b04      	ldr	r3, [sp, #16]
 8010c0c:	4631      	mov	r1, r6
 8010c0e:	3b01      	subs	r3, #1
 8010c10:	4650      	mov	r0, sl
 8010c12:	9301      	str	r3, [sp, #4]
 8010c14:	f7ff fa6c 	bl	80100f0 <quorem>
 8010c18:	4641      	mov	r1, r8
 8010c1a:	9002      	str	r0, [sp, #8]
 8010c1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010c20:	4650      	mov	r0, sl
 8010c22:	f000 fba7 	bl	8011374 <__mcmp>
 8010c26:	463a      	mov	r2, r7
 8010c28:	9005      	str	r0, [sp, #20]
 8010c2a:	4631      	mov	r1, r6
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	f000 fbbd 	bl	80113ac <__mdiff>
 8010c32:	68c2      	ldr	r2, [r0, #12]
 8010c34:	4605      	mov	r5, r0
 8010c36:	bb02      	cbnz	r2, 8010c7a <_dtoa_r+0xa7a>
 8010c38:	4601      	mov	r1, r0
 8010c3a:	4650      	mov	r0, sl
 8010c3c:	f000 fb9a 	bl	8011374 <__mcmp>
 8010c40:	4602      	mov	r2, r0
 8010c42:	4629      	mov	r1, r5
 8010c44:	4620      	mov	r0, r4
 8010c46:	9209      	str	r2, [sp, #36]	; 0x24
 8010c48:	f000 f958 	bl	8010efc <_Bfree>
 8010c4c:	9b07      	ldr	r3, [sp, #28]
 8010c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c50:	9d04      	ldr	r5, [sp, #16]
 8010c52:	ea43 0102 	orr.w	r1, r3, r2
 8010c56:	9b06      	ldr	r3, [sp, #24]
 8010c58:	4319      	orrs	r1, r3
 8010c5a:	d110      	bne.n	8010c7e <_dtoa_r+0xa7e>
 8010c5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010c60:	d029      	beq.n	8010cb6 <_dtoa_r+0xab6>
 8010c62:	9b05      	ldr	r3, [sp, #20]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	dd02      	ble.n	8010c6e <_dtoa_r+0xa6e>
 8010c68:	9b02      	ldr	r3, [sp, #8]
 8010c6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010c6e:	9b01      	ldr	r3, [sp, #4]
 8010c70:	f883 9000 	strb.w	r9, [r3]
 8010c74:	e774      	b.n	8010b60 <_dtoa_r+0x960>
 8010c76:	4638      	mov	r0, r7
 8010c78:	e7ba      	b.n	8010bf0 <_dtoa_r+0x9f0>
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	e7e1      	b.n	8010c42 <_dtoa_r+0xa42>
 8010c7e:	9b05      	ldr	r3, [sp, #20]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	db04      	blt.n	8010c8e <_dtoa_r+0xa8e>
 8010c84:	9907      	ldr	r1, [sp, #28]
 8010c86:	430b      	orrs	r3, r1
 8010c88:	9906      	ldr	r1, [sp, #24]
 8010c8a:	430b      	orrs	r3, r1
 8010c8c:	d120      	bne.n	8010cd0 <_dtoa_r+0xad0>
 8010c8e:	2a00      	cmp	r2, #0
 8010c90:	dded      	ble.n	8010c6e <_dtoa_r+0xa6e>
 8010c92:	4651      	mov	r1, sl
 8010c94:	2201      	movs	r2, #1
 8010c96:	4620      	mov	r0, r4
 8010c98:	f000 fb00 	bl	801129c <__lshift>
 8010c9c:	4631      	mov	r1, r6
 8010c9e:	4682      	mov	sl, r0
 8010ca0:	f000 fb68 	bl	8011374 <__mcmp>
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	dc03      	bgt.n	8010cb0 <_dtoa_r+0xab0>
 8010ca8:	d1e1      	bne.n	8010c6e <_dtoa_r+0xa6e>
 8010caa:	f019 0f01 	tst.w	r9, #1
 8010cae:	d0de      	beq.n	8010c6e <_dtoa_r+0xa6e>
 8010cb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010cb4:	d1d8      	bne.n	8010c68 <_dtoa_r+0xa68>
 8010cb6:	9a01      	ldr	r2, [sp, #4]
 8010cb8:	2339      	movs	r3, #57	; 0x39
 8010cba:	7013      	strb	r3, [r2, #0]
 8010cbc:	462b      	mov	r3, r5
 8010cbe:	461d      	mov	r5, r3
 8010cc0:	3b01      	subs	r3, #1
 8010cc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010cc6:	2a39      	cmp	r2, #57	; 0x39
 8010cc8:	d06c      	beq.n	8010da4 <_dtoa_r+0xba4>
 8010cca:	3201      	adds	r2, #1
 8010ccc:	701a      	strb	r2, [r3, #0]
 8010cce:	e747      	b.n	8010b60 <_dtoa_r+0x960>
 8010cd0:	2a00      	cmp	r2, #0
 8010cd2:	dd07      	ble.n	8010ce4 <_dtoa_r+0xae4>
 8010cd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010cd8:	d0ed      	beq.n	8010cb6 <_dtoa_r+0xab6>
 8010cda:	9a01      	ldr	r2, [sp, #4]
 8010cdc:	f109 0301 	add.w	r3, r9, #1
 8010ce0:	7013      	strb	r3, [r2, #0]
 8010ce2:	e73d      	b.n	8010b60 <_dtoa_r+0x960>
 8010ce4:	9b04      	ldr	r3, [sp, #16]
 8010ce6:	9a08      	ldr	r2, [sp, #32]
 8010ce8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d043      	beq.n	8010d78 <_dtoa_r+0xb78>
 8010cf0:	4651      	mov	r1, sl
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	220a      	movs	r2, #10
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f000 f922 	bl	8010f40 <__multadd>
 8010cfc:	45b8      	cmp	r8, r7
 8010cfe:	4682      	mov	sl, r0
 8010d00:	f04f 0300 	mov.w	r3, #0
 8010d04:	f04f 020a 	mov.w	r2, #10
 8010d08:	4641      	mov	r1, r8
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	d107      	bne.n	8010d1e <_dtoa_r+0xb1e>
 8010d0e:	f000 f917 	bl	8010f40 <__multadd>
 8010d12:	4680      	mov	r8, r0
 8010d14:	4607      	mov	r7, r0
 8010d16:	9b04      	ldr	r3, [sp, #16]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	9304      	str	r3, [sp, #16]
 8010d1c:	e775      	b.n	8010c0a <_dtoa_r+0xa0a>
 8010d1e:	f000 f90f 	bl	8010f40 <__multadd>
 8010d22:	4639      	mov	r1, r7
 8010d24:	4680      	mov	r8, r0
 8010d26:	2300      	movs	r3, #0
 8010d28:	220a      	movs	r2, #10
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	f000 f908 	bl	8010f40 <__multadd>
 8010d30:	4607      	mov	r7, r0
 8010d32:	e7f0      	b.n	8010d16 <_dtoa_r+0xb16>
 8010d34:	9b04      	ldr	r3, [sp, #16]
 8010d36:	9301      	str	r3, [sp, #4]
 8010d38:	9d00      	ldr	r5, [sp, #0]
 8010d3a:	4631      	mov	r1, r6
 8010d3c:	4650      	mov	r0, sl
 8010d3e:	f7ff f9d7 	bl	80100f0 <quorem>
 8010d42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010d46:	9b00      	ldr	r3, [sp, #0]
 8010d48:	f805 9b01 	strb.w	r9, [r5], #1
 8010d4c:	1aea      	subs	r2, r5, r3
 8010d4e:	9b01      	ldr	r3, [sp, #4]
 8010d50:	4293      	cmp	r3, r2
 8010d52:	dd07      	ble.n	8010d64 <_dtoa_r+0xb64>
 8010d54:	4651      	mov	r1, sl
 8010d56:	2300      	movs	r3, #0
 8010d58:	220a      	movs	r2, #10
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	f000 f8f0 	bl	8010f40 <__multadd>
 8010d60:	4682      	mov	sl, r0
 8010d62:	e7ea      	b.n	8010d3a <_dtoa_r+0xb3a>
 8010d64:	9b01      	ldr	r3, [sp, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	bfc8      	it	gt
 8010d6a:	461d      	movgt	r5, r3
 8010d6c:	9b00      	ldr	r3, [sp, #0]
 8010d6e:	bfd8      	it	le
 8010d70:	2501      	movle	r5, #1
 8010d72:	441d      	add	r5, r3
 8010d74:	f04f 0800 	mov.w	r8, #0
 8010d78:	4651      	mov	r1, sl
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	f000 fa8d 	bl	801129c <__lshift>
 8010d82:	4631      	mov	r1, r6
 8010d84:	4682      	mov	sl, r0
 8010d86:	f000 faf5 	bl	8011374 <__mcmp>
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	dc96      	bgt.n	8010cbc <_dtoa_r+0xabc>
 8010d8e:	d102      	bne.n	8010d96 <_dtoa_r+0xb96>
 8010d90:	f019 0f01 	tst.w	r9, #1
 8010d94:	d192      	bne.n	8010cbc <_dtoa_r+0xabc>
 8010d96:	462b      	mov	r3, r5
 8010d98:	461d      	mov	r5, r3
 8010d9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d9e:	2a30      	cmp	r2, #48	; 0x30
 8010da0:	d0fa      	beq.n	8010d98 <_dtoa_r+0xb98>
 8010da2:	e6dd      	b.n	8010b60 <_dtoa_r+0x960>
 8010da4:	9a00      	ldr	r2, [sp, #0]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d189      	bne.n	8010cbe <_dtoa_r+0xabe>
 8010daa:	f10b 0b01 	add.w	fp, fp, #1
 8010dae:	2331      	movs	r3, #49	; 0x31
 8010db0:	e796      	b.n	8010ce0 <_dtoa_r+0xae0>
 8010db2:	4b0a      	ldr	r3, [pc, #40]	; (8010ddc <_dtoa_r+0xbdc>)
 8010db4:	f7ff ba99 	b.w	80102ea <_dtoa_r+0xea>
 8010db8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f47f aa6d 	bne.w	801029a <_dtoa_r+0x9a>
 8010dc0:	4b07      	ldr	r3, [pc, #28]	; (8010de0 <_dtoa_r+0xbe0>)
 8010dc2:	f7ff ba92 	b.w	80102ea <_dtoa_r+0xea>
 8010dc6:	9b01      	ldr	r3, [sp, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	dcb5      	bgt.n	8010d38 <_dtoa_r+0xb38>
 8010dcc:	9b07      	ldr	r3, [sp, #28]
 8010dce:	2b02      	cmp	r3, #2
 8010dd0:	f73f aeb1 	bgt.w	8010b36 <_dtoa_r+0x936>
 8010dd4:	e7b0      	b.n	8010d38 <_dtoa_r+0xb38>
 8010dd6:	bf00      	nop
 8010dd8:	080124dc 	.word	0x080124dc
 8010ddc:	0801243c 	.word	0x0801243c
 8010de0:	08012460 	.word	0x08012460

08010de4 <_free_r>:
 8010de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010de6:	2900      	cmp	r1, #0
 8010de8:	d044      	beq.n	8010e74 <_free_r+0x90>
 8010dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dee:	9001      	str	r0, [sp, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	f1a1 0404 	sub.w	r4, r1, #4
 8010df6:	bfb8      	it	lt
 8010df8:	18e4      	addlt	r4, r4, r3
 8010dfa:	f7fe fb69 	bl	800f4d0 <__malloc_lock>
 8010dfe:	4a1e      	ldr	r2, [pc, #120]	; (8010e78 <_free_r+0x94>)
 8010e00:	9801      	ldr	r0, [sp, #4]
 8010e02:	6813      	ldr	r3, [r2, #0]
 8010e04:	b933      	cbnz	r3, 8010e14 <_free_r+0x30>
 8010e06:	6063      	str	r3, [r4, #4]
 8010e08:	6014      	str	r4, [r2, #0]
 8010e0a:	b003      	add	sp, #12
 8010e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e10:	f7fe bb64 	b.w	800f4dc <__malloc_unlock>
 8010e14:	42a3      	cmp	r3, r4
 8010e16:	d908      	bls.n	8010e2a <_free_r+0x46>
 8010e18:	6825      	ldr	r5, [r4, #0]
 8010e1a:	1961      	adds	r1, r4, r5
 8010e1c:	428b      	cmp	r3, r1
 8010e1e:	bf01      	itttt	eq
 8010e20:	6819      	ldreq	r1, [r3, #0]
 8010e22:	685b      	ldreq	r3, [r3, #4]
 8010e24:	1949      	addeq	r1, r1, r5
 8010e26:	6021      	streq	r1, [r4, #0]
 8010e28:	e7ed      	b.n	8010e06 <_free_r+0x22>
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	b10b      	cbz	r3, 8010e34 <_free_r+0x50>
 8010e30:	42a3      	cmp	r3, r4
 8010e32:	d9fa      	bls.n	8010e2a <_free_r+0x46>
 8010e34:	6811      	ldr	r1, [r2, #0]
 8010e36:	1855      	adds	r5, r2, r1
 8010e38:	42a5      	cmp	r5, r4
 8010e3a:	d10b      	bne.n	8010e54 <_free_r+0x70>
 8010e3c:	6824      	ldr	r4, [r4, #0]
 8010e3e:	4421      	add	r1, r4
 8010e40:	1854      	adds	r4, r2, r1
 8010e42:	42a3      	cmp	r3, r4
 8010e44:	6011      	str	r1, [r2, #0]
 8010e46:	d1e0      	bne.n	8010e0a <_free_r+0x26>
 8010e48:	681c      	ldr	r4, [r3, #0]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	6053      	str	r3, [r2, #4]
 8010e4e:	440c      	add	r4, r1
 8010e50:	6014      	str	r4, [r2, #0]
 8010e52:	e7da      	b.n	8010e0a <_free_r+0x26>
 8010e54:	d902      	bls.n	8010e5c <_free_r+0x78>
 8010e56:	230c      	movs	r3, #12
 8010e58:	6003      	str	r3, [r0, #0]
 8010e5a:	e7d6      	b.n	8010e0a <_free_r+0x26>
 8010e5c:	6825      	ldr	r5, [r4, #0]
 8010e5e:	1961      	adds	r1, r4, r5
 8010e60:	428b      	cmp	r3, r1
 8010e62:	bf04      	itt	eq
 8010e64:	6819      	ldreq	r1, [r3, #0]
 8010e66:	685b      	ldreq	r3, [r3, #4]
 8010e68:	6063      	str	r3, [r4, #4]
 8010e6a:	bf04      	itt	eq
 8010e6c:	1949      	addeq	r1, r1, r5
 8010e6e:	6021      	streq	r1, [r4, #0]
 8010e70:	6054      	str	r4, [r2, #4]
 8010e72:	e7ca      	b.n	8010e0a <_free_r+0x26>
 8010e74:	b003      	add	sp, #12
 8010e76:	bd30      	pop	{r4, r5, pc}
 8010e78:	20002264 	.word	0x20002264

08010e7c <_Balloc>:
 8010e7c:	b570      	push	{r4, r5, r6, lr}
 8010e7e:	69c6      	ldr	r6, [r0, #28]
 8010e80:	4604      	mov	r4, r0
 8010e82:	460d      	mov	r5, r1
 8010e84:	b976      	cbnz	r6, 8010ea4 <_Balloc+0x28>
 8010e86:	2010      	movs	r0, #16
 8010e88:	f7fe fa72 	bl	800f370 <malloc>
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	61e0      	str	r0, [r4, #28]
 8010e90:	b920      	cbnz	r0, 8010e9c <_Balloc+0x20>
 8010e92:	4b18      	ldr	r3, [pc, #96]	; (8010ef4 <_Balloc+0x78>)
 8010e94:	4818      	ldr	r0, [pc, #96]	; (8010ef8 <_Balloc+0x7c>)
 8010e96:	216b      	movs	r1, #107	; 0x6b
 8010e98:	f000 fc1a 	bl	80116d0 <__assert_func>
 8010e9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ea0:	6006      	str	r6, [r0, #0]
 8010ea2:	60c6      	str	r6, [r0, #12]
 8010ea4:	69e6      	ldr	r6, [r4, #28]
 8010ea6:	68f3      	ldr	r3, [r6, #12]
 8010ea8:	b183      	cbz	r3, 8010ecc <_Balloc+0x50>
 8010eaa:	69e3      	ldr	r3, [r4, #28]
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010eb2:	b9b8      	cbnz	r0, 8010ee4 <_Balloc+0x68>
 8010eb4:	2101      	movs	r1, #1
 8010eb6:	fa01 f605 	lsl.w	r6, r1, r5
 8010eba:	1d72      	adds	r2, r6, #5
 8010ebc:	0092      	lsls	r2, r2, #2
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f000 fc24 	bl	801170c <_calloc_r>
 8010ec4:	b160      	cbz	r0, 8010ee0 <_Balloc+0x64>
 8010ec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010eca:	e00e      	b.n	8010eea <_Balloc+0x6e>
 8010ecc:	2221      	movs	r2, #33	; 0x21
 8010ece:	2104      	movs	r1, #4
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	f000 fc1b 	bl	801170c <_calloc_r>
 8010ed6:	69e3      	ldr	r3, [r4, #28]
 8010ed8:	60f0      	str	r0, [r6, #12]
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d1e4      	bne.n	8010eaa <_Balloc+0x2e>
 8010ee0:	2000      	movs	r0, #0
 8010ee2:	bd70      	pop	{r4, r5, r6, pc}
 8010ee4:	6802      	ldr	r2, [r0, #0]
 8010ee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010eea:	2300      	movs	r3, #0
 8010eec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ef0:	e7f7      	b.n	8010ee2 <_Balloc+0x66>
 8010ef2:	bf00      	nop
 8010ef4:	0801246d 	.word	0x0801246d
 8010ef8:	080124ed 	.word	0x080124ed

08010efc <_Bfree>:
 8010efc:	b570      	push	{r4, r5, r6, lr}
 8010efe:	69c6      	ldr	r6, [r0, #28]
 8010f00:	4605      	mov	r5, r0
 8010f02:	460c      	mov	r4, r1
 8010f04:	b976      	cbnz	r6, 8010f24 <_Bfree+0x28>
 8010f06:	2010      	movs	r0, #16
 8010f08:	f7fe fa32 	bl	800f370 <malloc>
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	61e8      	str	r0, [r5, #28]
 8010f10:	b920      	cbnz	r0, 8010f1c <_Bfree+0x20>
 8010f12:	4b09      	ldr	r3, [pc, #36]	; (8010f38 <_Bfree+0x3c>)
 8010f14:	4809      	ldr	r0, [pc, #36]	; (8010f3c <_Bfree+0x40>)
 8010f16:	218f      	movs	r1, #143	; 0x8f
 8010f18:	f000 fbda 	bl	80116d0 <__assert_func>
 8010f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f20:	6006      	str	r6, [r0, #0]
 8010f22:	60c6      	str	r6, [r0, #12]
 8010f24:	b13c      	cbz	r4, 8010f36 <_Bfree+0x3a>
 8010f26:	69eb      	ldr	r3, [r5, #28]
 8010f28:	6862      	ldr	r2, [r4, #4]
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f30:	6021      	str	r1, [r4, #0]
 8010f32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f36:	bd70      	pop	{r4, r5, r6, pc}
 8010f38:	0801246d 	.word	0x0801246d
 8010f3c:	080124ed 	.word	0x080124ed

08010f40 <__multadd>:
 8010f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f44:	690d      	ldr	r5, [r1, #16]
 8010f46:	4607      	mov	r7, r0
 8010f48:	460c      	mov	r4, r1
 8010f4a:	461e      	mov	r6, r3
 8010f4c:	f101 0c14 	add.w	ip, r1, #20
 8010f50:	2000      	movs	r0, #0
 8010f52:	f8dc 3000 	ldr.w	r3, [ip]
 8010f56:	b299      	uxth	r1, r3
 8010f58:	fb02 6101 	mla	r1, r2, r1, r6
 8010f5c:	0c1e      	lsrs	r6, r3, #16
 8010f5e:	0c0b      	lsrs	r3, r1, #16
 8010f60:	fb02 3306 	mla	r3, r2, r6, r3
 8010f64:	b289      	uxth	r1, r1
 8010f66:	3001      	adds	r0, #1
 8010f68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f6c:	4285      	cmp	r5, r0
 8010f6e:	f84c 1b04 	str.w	r1, [ip], #4
 8010f72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f76:	dcec      	bgt.n	8010f52 <__multadd+0x12>
 8010f78:	b30e      	cbz	r6, 8010fbe <__multadd+0x7e>
 8010f7a:	68a3      	ldr	r3, [r4, #8]
 8010f7c:	42ab      	cmp	r3, r5
 8010f7e:	dc19      	bgt.n	8010fb4 <__multadd+0x74>
 8010f80:	6861      	ldr	r1, [r4, #4]
 8010f82:	4638      	mov	r0, r7
 8010f84:	3101      	adds	r1, #1
 8010f86:	f7ff ff79 	bl	8010e7c <_Balloc>
 8010f8a:	4680      	mov	r8, r0
 8010f8c:	b928      	cbnz	r0, 8010f9a <__multadd+0x5a>
 8010f8e:	4602      	mov	r2, r0
 8010f90:	4b0c      	ldr	r3, [pc, #48]	; (8010fc4 <__multadd+0x84>)
 8010f92:	480d      	ldr	r0, [pc, #52]	; (8010fc8 <__multadd+0x88>)
 8010f94:	21ba      	movs	r1, #186	; 0xba
 8010f96:	f000 fb9b 	bl	80116d0 <__assert_func>
 8010f9a:	6922      	ldr	r2, [r4, #16]
 8010f9c:	3202      	adds	r2, #2
 8010f9e:	f104 010c 	add.w	r1, r4, #12
 8010fa2:	0092      	lsls	r2, r2, #2
 8010fa4:	300c      	adds	r0, #12
 8010fa6:	f7ff f895 	bl	80100d4 <memcpy>
 8010faa:	4621      	mov	r1, r4
 8010fac:	4638      	mov	r0, r7
 8010fae:	f7ff ffa5 	bl	8010efc <_Bfree>
 8010fb2:	4644      	mov	r4, r8
 8010fb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010fb8:	3501      	adds	r5, #1
 8010fba:	615e      	str	r6, [r3, #20]
 8010fbc:	6125      	str	r5, [r4, #16]
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc4:	080124dc 	.word	0x080124dc
 8010fc8:	080124ed 	.word	0x080124ed

08010fcc <__hi0bits>:
 8010fcc:	0c03      	lsrs	r3, r0, #16
 8010fce:	041b      	lsls	r3, r3, #16
 8010fd0:	b9d3      	cbnz	r3, 8011008 <__hi0bits+0x3c>
 8010fd2:	0400      	lsls	r0, r0, #16
 8010fd4:	2310      	movs	r3, #16
 8010fd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010fda:	bf04      	itt	eq
 8010fdc:	0200      	lsleq	r0, r0, #8
 8010fde:	3308      	addeq	r3, #8
 8010fe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010fe4:	bf04      	itt	eq
 8010fe6:	0100      	lsleq	r0, r0, #4
 8010fe8:	3304      	addeq	r3, #4
 8010fea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010fee:	bf04      	itt	eq
 8010ff0:	0080      	lsleq	r0, r0, #2
 8010ff2:	3302      	addeq	r3, #2
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	db05      	blt.n	8011004 <__hi0bits+0x38>
 8010ff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010ffc:	f103 0301 	add.w	r3, r3, #1
 8011000:	bf08      	it	eq
 8011002:	2320      	moveq	r3, #32
 8011004:	4618      	mov	r0, r3
 8011006:	4770      	bx	lr
 8011008:	2300      	movs	r3, #0
 801100a:	e7e4      	b.n	8010fd6 <__hi0bits+0xa>

0801100c <__lo0bits>:
 801100c:	6803      	ldr	r3, [r0, #0]
 801100e:	f013 0207 	ands.w	r2, r3, #7
 8011012:	d00c      	beq.n	801102e <__lo0bits+0x22>
 8011014:	07d9      	lsls	r1, r3, #31
 8011016:	d422      	bmi.n	801105e <__lo0bits+0x52>
 8011018:	079a      	lsls	r2, r3, #30
 801101a:	bf49      	itett	mi
 801101c:	085b      	lsrmi	r3, r3, #1
 801101e:	089b      	lsrpl	r3, r3, #2
 8011020:	6003      	strmi	r3, [r0, #0]
 8011022:	2201      	movmi	r2, #1
 8011024:	bf5c      	itt	pl
 8011026:	6003      	strpl	r3, [r0, #0]
 8011028:	2202      	movpl	r2, #2
 801102a:	4610      	mov	r0, r2
 801102c:	4770      	bx	lr
 801102e:	b299      	uxth	r1, r3
 8011030:	b909      	cbnz	r1, 8011036 <__lo0bits+0x2a>
 8011032:	0c1b      	lsrs	r3, r3, #16
 8011034:	2210      	movs	r2, #16
 8011036:	b2d9      	uxtb	r1, r3
 8011038:	b909      	cbnz	r1, 801103e <__lo0bits+0x32>
 801103a:	3208      	adds	r2, #8
 801103c:	0a1b      	lsrs	r3, r3, #8
 801103e:	0719      	lsls	r1, r3, #28
 8011040:	bf04      	itt	eq
 8011042:	091b      	lsreq	r3, r3, #4
 8011044:	3204      	addeq	r2, #4
 8011046:	0799      	lsls	r1, r3, #30
 8011048:	bf04      	itt	eq
 801104a:	089b      	lsreq	r3, r3, #2
 801104c:	3202      	addeq	r2, #2
 801104e:	07d9      	lsls	r1, r3, #31
 8011050:	d403      	bmi.n	801105a <__lo0bits+0x4e>
 8011052:	085b      	lsrs	r3, r3, #1
 8011054:	f102 0201 	add.w	r2, r2, #1
 8011058:	d003      	beq.n	8011062 <__lo0bits+0x56>
 801105a:	6003      	str	r3, [r0, #0]
 801105c:	e7e5      	b.n	801102a <__lo0bits+0x1e>
 801105e:	2200      	movs	r2, #0
 8011060:	e7e3      	b.n	801102a <__lo0bits+0x1e>
 8011062:	2220      	movs	r2, #32
 8011064:	e7e1      	b.n	801102a <__lo0bits+0x1e>
	...

08011068 <__i2b>:
 8011068:	b510      	push	{r4, lr}
 801106a:	460c      	mov	r4, r1
 801106c:	2101      	movs	r1, #1
 801106e:	f7ff ff05 	bl	8010e7c <_Balloc>
 8011072:	4602      	mov	r2, r0
 8011074:	b928      	cbnz	r0, 8011082 <__i2b+0x1a>
 8011076:	4b05      	ldr	r3, [pc, #20]	; (801108c <__i2b+0x24>)
 8011078:	4805      	ldr	r0, [pc, #20]	; (8011090 <__i2b+0x28>)
 801107a:	f240 1145 	movw	r1, #325	; 0x145
 801107e:	f000 fb27 	bl	80116d0 <__assert_func>
 8011082:	2301      	movs	r3, #1
 8011084:	6144      	str	r4, [r0, #20]
 8011086:	6103      	str	r3, [r0, #16]
 8011088:	bd10      	pop	{r4, pc}
 801108a:	bf00      	nop
 801108c:	080124dc 	.word	0x080124dc
 8011090:	080124ed 	.word	0x080124ed

08011094 <__multiply>:
 8011094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011098:	4691      	mov	r9, r2
 801109a:	690a      	ldr	r2, [r1, #16]
 801109c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	bfb8      	it	lt
 80110a4:	460b      	movlt	r3, r1
 80110a6:	460c      	mov	r4, r1
 80110a8:	bfbc      	itt	lt
 80110aa:	464c      	movlt	r4, r9
 80110ac:	4699      	movlt	r9, r3
 80110ae:	6927      	ldr	r7, [r4, #16]
 80110b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80110b4:	68a3      	ldr	r3, [r4, #8]
 80110b6:	6861      	ldr	r1, [r4, #4]
 80110b8:	eb07 060a 	add.w	r6, r7, sl
 80110bc:	42b3      	cmp	r3, r6
 80110be:	b085      	sub	sp, #20
 80110c0:	bfb8      	it	lt
 80110c2:	3101      	addlt	r1, #1
 80110c4:	f7ff feda 	bl	8010e7c <_Balloc>
 80110c8:	b930      	cbnz	r0, 80110d8 <__multiply+0x44>
 80110ca:	4602      	mov	r2, r0
 80110cc:	4b44      	ldr	r3, [pc, #272]	; (80111e0 <__multiply+0x14c>)
 80110ce:	4845      	ldr	r0, [pc, #276]	; (80111e4 <__multiply+0x150>)
 80110d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80110d4:	f000 fafc 	bl	80116d0 <__assert_func>
 80110d8:	f100 0514 	add.w	r5, r0, #20
 80110dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80110e0:	462b      	mov	r3, r5
 80110e2:	2200      	movs	r2, #0
 80110e4:	4543      	cmp	r3, r8
 80110e6:	d321      	bcc.n	801112c <__multiply+0x98>
 80110e8:	f104 0314 	add.w	r3, r4, #20
 80110ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80110f0:	f109 0314 	add.w	r3, r9, #20
 80110f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80110f8:	9202      	str	r2, [sp, #8]
 80110fa:	1b3a      	subs	r2, r7, r4
 80110fc:	3a15      	subs	r2, #21
 80110fe:	f022 0203 	bic.w	r2, r2, #3
 8011102:	3204      	adds	r2, #4
 8011104:	f104 0115 	add.w	r1, r4, #21
 8011108:	428f      	cmp	r7, r1
 801110a:	bf38      	it	cc
 801110c:	2204      	movcc	r2, #4
 801110e:	9201      	str	r2, [sp, #4]
 8011110:	9a02      	ldr	r2, [sp, #8]
 8011112:	9303      	str	r3, [sp, #12]
 8011114:	429a      	cmp	r2, r3
 8011116:	d80c      	bhi.n	8011132 <__multiply+0x9e>
 8011118:	2e00      	cmp	r6, #0
 801111a:	dd03      	ble.n	8011124 <__multiply+0x90>
 801111c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011120:	2b00      	cmp	r3, #0
 8011122:	d05b      	beq.n	80111dc <__multiply+0x148>
 8011124:	6106      	str	r6, [r0, #16]
 8011126:	b005      	add	sp, #20
 8011128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112c:	f843 2b04 	str.w	r2, [r3], #4
 8011130:	e7d8      	b.n	80110e4 <__multiply+0x50>
 8011132:	f8b3 a000 	ldrh.w	sl, [r3]
 8011136:	f1ba 0f00 	cmp.w	sl, #0
 801113a:	d024      	beq.n	8011186 <__multiply+0xf2>
 801113c:	f104 0e14 	add.w	lr, r4, #20
 8011140:	46a9      	mov	r9, r5
 8011142:	f04f 0c00 	mov.w	ip, #0
 8011146:	f85e 2b04 	ldr.w	r2, [lr], #4
 801114a:	f8d9 1000 	ldr.w	r1, [r9]
 801114e:	fa1f fb82 	uxth.w	fp, r2
 8011152:	b289      	uxth	r1, r1
 8011154:	fb0a 110b 	mla	r1, sl, fp, r1
 8011158:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801115c:	f8d9 2000 	ldr.w	r2, [r9]
 8011160:	4461      	add	r1, ip
 8011162:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011166:	fb0a c20b 	mla	r2, sl, fp, ip
 801116a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801116e:	b289      	uxth	r1, r1
 8011170:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011174:	4577      	cmp	r7, lr
 8011176:	f849 1b04 	str.w	r1, [r9], #4
 801117a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801117e:	d8e2      	bhi.n	8011146 <__multiply+0xb2>
 8011180:	9a01      	ldr	r2, [sp, #4]
 8011182:	f845 c002 	str.w	ip, [r5, r2]
 8011186:	9a03      	ldr	r2, [sp, #12]
 8011188:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801118c:	3304      	adds	r3, #4
 801118e:	f1b9 0f00 	cmp.w	r9, #0
 8011192:	d021      	beq.n	80111d8 <__multiply+0x144>
 8011194:	6829      	ldr	r1, [r5, #0]
 8011196:	f104 0c14 	add.w	ip, r4, #20
 801119a:	46ae      	mov	lr, r5
 801119c:	f04f 0a00 	mov.w	sl, #0
 80111a0:	f8bc b000 	ldrh.w	fp, [ip]
 80111a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80111a8:	fb09 220b 	mla	r2, r9, fp, r2
 80111ac:	4452      	add	r2, sl
 80111ae:	b289      	uxth	r1, r1
 80111b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80111b4:	f84e 1b04 	str.w	r1, [lr], #4
 80111b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80111bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80111c0:	f8be 1000 	ldrh.w	r1, [lr]
 80111c4:	fb09 110a 	mla	r1, r9, sl, r1
 80111c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80111cc:	4567      	cmp	r7, ip
 80111ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80111d2:	d8e5      	bhi.n	80111a0 <__multiply+0x10c>
 80111d4:	9a01      	ldr	r2, [sp, #4]
 80111d6:	50a9      	str	r1, [r5, r2]
 80111d8:	3504      	adds	r5, #4
 80111da:	e799      	b.n	8011110 <__multiply+0x7c>
 80111dc:	3e01      	subs	r6, #1
 80111de:	e79b      	b.n	8011118 <__multiply+0x84>
 80111e0:	080124dc 	.word	0x080124dc
 80111e4:	080124ed 	.word	0x080124ed

080111e8 <__pow5mult>:
 80111e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111ec:	4615      	mov	r5, r2
 80111ee:	f012 0203 	ands.w	r2, r2, #3
 80111f2:	4606      	mov	r6, r0
 80111f4:	460f      	mov	r7, r1
 80111f6:	d007      	beq.n	8011208 <__pow5mult+0x20>
 80111f8:	4c25      	ldr	r4, [pc, #148]	; (8011290 <__pow5mult+0xa8>)
 80111fa:	3a01      	subs	r2, #1
 80111fc:	2300      	movs	r3, #0
 80111fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011202:	f7ff fe9d 	bl	8010f40 <__multadd>
 8011206:	4607      	mov	r7, r0
 8011208:	10ad      	asrs	r5, r5, #2
 801120a:	d03d      	beq.n	8011288 <__pow5mult+0xa0>
 801120c:	69f4      	ldr	r4, [r6, #28]
 801120e:	b97c      	cbnz	r4, 8011230 <__pow5mult+0x48>
 8011210:	2010      	movs	r0, #16
 8011212:	f7fe f8ad 	bl	800f370 <malloc>
 8011216:	4602      	mov	r2, r0
 8011218:	61f0      	str	r0, [r6, #28]
 801121a:	b928      	cbnz	r0, 8011228 <__pow5mult+0x40>
 801121c:	4b1d      	ldr	r3, [pc, #116]	; (8011294 <__pow5mult+0xac>)
 801121e:	481e      	ldr	r0, [pc, #120]	; (8011298 <__pow5mult+0xb0>)
 8011220:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011224:	f000 fa54 	bl	80116d0 <__assert_func>
 8011228:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801122c:	6004      	str	r4, [r0, #0]
 801122e:	60c4      	str	r4, [r0, #12]
 8011230:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011234:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011238:	b94c      	cbnz	r4, 801124e <__pow5mult+0x66>
 801123a:	f240 2171 	movw	r1, #625	; 0x271
 801123e:	4630      	mov	r0, r6
 8011240:	f7ff ff12 	bl	8011068 <__i2b>
 8011244:	2300      	movs	r3, #0
 8011246:	f8c8 0008 	str.w	r0, [r8, #8]
 801124a:	4604      	mov	r4, r0
 801124c:	6003      	str	r3, [r0, #0]
 801124e:	f04f 0900 	mov.w	r9, #0
 8011252:	07eb      	lsls	r3, r5, #31
 8011254:	d50a      	bpl.n	801126c <__pow5mult+0x84>
 8011256:	4639      	mov	r1, r7
 8011258:	4622      	mov	r2, r4
 801125a:	4630      	mov	r0, r6
 801125c:	f7ff ff1a 	bl	8011094 <__multiply>
 8011260:	4639      	mov	r1, r7
 8011262:	4680      	mov	r8, r0
 8011264:	4630      	mov	r0, r6
 8011266:	f7ff fe49 	bl	8010efc <_Bfree>
 801126a:	4647      	mov	r7, r8
 801126c:	106d      	asrs	r5, r5, #1
 801126e:	d00b      	beq.n	8011288 <__pow5mult+0xa0>
 8011270:	6820      	ldr	r0, [r4, #0]
 8011272:	b938      	cbnz	r0, 8011284 <__pow5mult+0x9c>
 8011274:	4622      	mov	r2, r4
 8011276:	4621      	mov	r1, r4
 8011278:	4630      	mov	r0, r6
 801127a:	f7ff ff0b 	bl	8011094 <__multiply>
 801127e:	6020      	str	r0, [r4, #0]
 8011280:	f8c0 9000 	str.w	r9, [r0]
 8011284:	4604      	mov	r4, r0
 8011286:	e7e4      	b.n	8011252 <__pow5mult+0x6a>
 8011288:	4638      	mov	r0, r7
 801128a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801128e:	bf00      	nop
 8011290:	08012638 	.word	0x08012638
 8011294:	0801246d 	.word	0x0801246d
 8011298:	080124ed 	.word	0x080124ed

0801129c <__lshift>:
 801129c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112a0:	460c      	mov	r4, r1
 80112a2:	6849      	ldr	r1, [r1, #4]
 80112a4:	6923      	ldr	r3, [r4, #16]
 80112a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80112aa:	68a3      	ldr	r3, [r4, #8]
 80112ac:	4607      	mov	r7, r0
 80112ae:	4691      	mov	r9, r2
 80112b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80112b4:	f108 0601 	add.w	r6, r8, #1
 80112b8:	42b3      	cmp	r3, r6
 80112ba:	db0b      	blt.n	80112d4 <__lshift+0x38>
 80112bc:	4638      	mov	r0, r7
 80112be:	f7ff fddd 	bl	8010e7c <_Balloc>
 80112c2:	4605      	mov	r5, r0
 80112c4:	b948      	cbnz	r0, 80112da <__lshift+0x3e>
 80112c6:	4602      	mov	r2, r0
 80112c8:	4b28      	ldr	r3, [pc, #160]	; (801136c <__lshift+0xd0>)
 80112ca:	4829      	ldr	r0, [pc, #164]	; (8011370 <__lshift+0xd4>)
 80112cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80112d0:	f000 f9fe 	bl	80116d0 <__assert_func>
 80112d4:	3101      	adds	r1, #1
 80112d6:	005b      	lsls	r3, r3, #1
 80112d8:	e7ee      	b.n	80112b8 <__lshift+0x1c>
 80112da:	2300      	movs	r3, #0
 80112dc:	f100 0114 	add.w	r1, r0, #20
 80112e0:	f100 0210 	add.w	r2, r0, #16
 80112e4:	4618      	mov	r0, r3
 80112e6:	4553      	cmp	r3, sl
 80112e8:	db33      	blt.n	8011352 <__lshift+0xb6>
 80112ea:	6920      	ldr	r0, [r4, #16]
 80112ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112f0:	f104 0314 	add.w	r3, r4, #20
 80112f4:	f019 091f 	ands.w	r9, r9, #31
 80112f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011300:	d02b      	beq.n	801135a <__lshift+0xbe>
 8011302:	f1c9 0e20 	rsb	lr, r9, #32
 8011306:	468a      	mov	sl, r1
 8011308:	2200      	movs	r2, #0
 801130a:	6818      	ldr	r0, [r3, #0]
 801130c:	fa00 f009 	lsl.w	r0, r0, r9
 8011310:	4310      	orrs	r0, r2
 8011312:	f84a 0b04 	str.w	r0, [sl], #4
 8011316:	f853 2b04 	ldr.w	r2, [r3], #4
 801131a:	459c      	cmp	ip, r3
 801131c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011320:	d8f3      	bhi.n	801130a <__lshift+0x6e>
 8011322:	ebac 0304 	sub.w	r3, ip, r4
 8011326:	3b15      	subs	r3, #21
 8011328:	f023 0303 	bic.w	r3, r3, #3
 801132c:	3304      	adds	r3, #4
 801132e:	f104 0015 	add.w	r0, r4, #21
 8011332:	4584      	cmp	ip, r0
 8011334:	bf38      	it	cc
 8011336:	2304      	movcc	r3, #4
 8011338:	50ca      	str	r2, [r1, r3]
 801133a:	b10a      	cbz	r2, 8011340 <__lshift+0xa4>
 801133c:	f108 0602 	add.w	r6, r8, #2
 8011340:	3e01      	subs	r6, #1
 8011342:	4638      	mov	r0, r7
 8011344:	612e      	str	r6, [r5, #16]
 8011346:	4621      	mov	r1, r4
 8011348:	f7ff fdd8 	bl	8010efc <_Bfree>
 801134c:	4628      	mov	r0, r5
 801134e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011352:	f842 0f04 	str.w	r0, [r2, #4]!
 8011356:	3301      	adds	r3, #1
 8011358:	e7c5      	b.n	80112e6 <__lshift+0x4a>
 801135a:	3904      	subs	r1, #4
 801135c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011360:	f841 2f04 	str.w	r2, [r1, #4]!
 8011364:	459c      	cmp	ip, r3
 8011366:	d8f9      	bhi.n	801135c <__lshift+0xc0>
 8011368:	e7ea      	b.n	8011340 <__lshift+0xa4>
 801136a:	bf00      	nop
 801136c:	080124dc 	.word	0x080124dc
 8011370:	080124ed 	.word	0x080124ed

08011374 <__mcmp>:
 8011374:	b530      	push	{r4, r5, lr}
 8011376:	6902      	ldr	r2, [r0, #16]
 8011378:	690c      	ldr	r4, [r1, #16]
 801137a:	1b12      	subs	r2, r2, r4
 801137c:	d10e      	bne.n	801139c <__mcmp+0x28>
 801137e:	f100 0314 	add.w	r3, r0, #20
 8011382:	3114      	adds	r1, #20
 8011384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801138c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011394:	42a5      	cmp	r5, r4
 8011396:	d003      	beq.n	80113a0 <__mcmp+0x2c>
 8011398:	d305      	bcc.n	80113a6 <__mcmp+0x32>
 801139a:	2201      	movs	r2, #1
 801139c:	4610      	mov	r0, r2
 801139e:	bd30      	pop	{r4, r5, pc}
 80113a0:	4283      	cmp	r3, r0
 80113a2:	d3f3      	bcc.n	801138c <__mcmp+0x18>
 80113a4:	e7fa      	b.n	801139c <__mcmp+0x28>
 80113a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80113aa:	e7f7      	b.n	801139c <__mcmp+0x28>

080113ac <__mdiff>:
 80113ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b0:	460c      	mov	r4, r1
 80113b2:	4606      	mov	r6, r0
 80113b4:	4611      	mov	r1, r2
 80113b6:	4620      	mov	r0, r4
 80113b8:	4690      	mov	r8, r2
 80113ba:	f7ff ffdb 	bl	8011374 <__mcmp>
 80113be:	1e05      	subs	r5, r0, #0
 80113c0:	d110      	bne.n	80113e4 <__mdiff+0x38>
 80113c2:	4629      	mov	r1, r5
 80113c4:	4630      	mov	r0, r6
 80113c6:	f7ff fd59 	bl	8010e7c <_Balloc>
 80113ca:	b930      	cbnz	r0, 80113da <__mdiff+0x2e>
 80113cc:	4b3a      	ldr	r3, [pc, #232]	; (80114b8 <__mdiff+0x10c>)
 80113ce:	4602      	mov	r2, r0
 80113d0:	f240 2137 	movw	r1, #567	; 0x237
 80113d4:	4839      	ldr	r0, [pc, #228]	; (80114bc <__mdiff+0x110>)
 80113d6:	f000 f97b 	bl	80116d0 <__assert_func>
 80113da:	2301      	movs	r3, #1
 80113dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80113e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e4:	bfa4      	itt	ge
 80113e6:	4643      	movge	r3, r8
 80113e8:	46a0      	movge	r8, r4
 80113ea:	4630      	mov	r0, r6
 80113ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80113f0:	bfa6      	itte	ge
 80113f2:	461c      	movge	r4, r3
 80113f4:	2500      	movge	r5, #0
 80113f6:	2501      	movlt	r5, #1
 80113f8:	f7ff fd40 	bl	8010e7c <_Balloc>
 80113fc:	b920      	cbnz	r0, 8011408 <__mdiff+0x5c>
 80113fe:	4b2e      	ldr	r3, [pc, #184]	; (80114b8 <__mdiff+0x10c>)
 8011400:	4602      	mov	r2, r0
 8011402:	f240 2145 	movw	r1, #581	; 0x245
 8011406:	e7e5      	b.n	80113d4 <__mdiff+0x28>
 8011408:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801140c:	6926      	ldr	r6, [r4, #16]
 801140e:	60c5      	str	r5, [r0, #12]
 8011410:	f104 0914 	add.w	r9, r4, #20
 8011414:	f108 0514 	add.w	r5, r8, #20
 8011418:	f100 0e14 	add.w	lr, r0, #20
 801141c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011424:	f108 0210 	add.w	r2, r8, #16
 8011428:	46f2      	mov	sl, lr
 801142a:	2100      	movs	r1, #0
 801142c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011430:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011434:	fa11 f88b 	uxtah	r8, r1, fp
 8011438:	b299      	uxth	r1, r3
 801143a:	0c1b      	lsrs	r3, r3, #16
 801143c:	eba8 0801 	sub.w	r8, r8, r1
 8011440:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011444:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011448:	fa1f f888 	uxth.w	r8, r8
 801144c:	1419      	asrs	r1, r3, #16
 801144e:	454e      	cmp	r6, r9
 8011450:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011454:	f84a 3b04 	str.w	r3, [sl], #4
 8011458:	d8e8      	bhi.n	801142c <__mdiff+0x80>
 801145a:	1b33      	subs	r3, r6, r4
 801145c:	3b15      	subs	r3, #21
 801145e:	f023 0303 	bic.w	r3, r3, #3
 8011462:	3304      	adds	r3, #4
 8011464:	3415      	adds	r4, #21
 8011466:	42a6      	cmp	r6, r4
 8011468:	bf38      	it	cc
 801146a:	2304      	movcc	r3, #4
 801146c:	441d      	add	r5, r3
 801146e:	4473      	add	r3, lr
 8011470:	469e      	mov	lr, r3
 8011472:	462e      	mov	r6, r5
 8011474:	4566      	cmp	r6, ip
 8011476:	d30e      	bcc.n	8011496 <__mdiff+0xea>
 8011478:	f10c 0203 	add.w	r2, ip, #3
 801147c:	1b52      	subs	r2, r2, r5
 801147e:	f022 0203 	bic.w	r2, r2, #3
 8011482:	3d03      	subs	r5, #3
 8011484:	45ac      	cmp	ip, r5
 8011486:	bf38      	it	cc
 8011488:	2200      	movcc	r2, #0
 801148a:	4413      	add	r3, r2
 801148c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011490:	b17a      	cbz	r2, 80114b2 <__mdiff+0x106>
 8011492:	6107      	str	r7, [r0, #16]
 8011494:	e7a4      	b.n	80113e0 <__mdiff+0x34>
 8011496:	f856 8b04 	ldr.w	r8, [r6], #4
 801149a:	fa11 f288 	uxtah	r2, r1, r8
 801149e:	1414      	asrs	r4, r2, #16
 80114a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80114a4:	b292      	uxth	r2, r2
 80114a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80114aa:	f84e 2b04 	str.w	r2, [lr], #4
 80114ae:	1421      	asrs	r1, r4, #16
 80114b0:	e7e0      	b.n	8011474 <__mdiff+0xc8>
 80114b2:	3f01      	subs	r7, #1
 80114b4:	e7ea      	b.n	801148c <__mdiff+0xe0>
 80114b6:	bf00      	nop
 80114b8:	080124dc 	.word	0x080124dc
 80114bc:	080124ed 	.word	0x080124ed

080114c0 <__d2b>:
 80114c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114c4:	460f      	mov	r7, r1
 80114c6:	2101      	movs	r1, #1
 80114c8:	ec59 8b10 	vmov	r8, r9, d0
 80114cc:	4616      	mov	r6, r2
 80114ce:	f7ff fcd5 	bl	8010e7c <_Balloc>
 80114d2:	4604      	mov	r4, r0
 80114d4:	b930      	cbnz	r0, 80114e4 <__d2b+0x24>
 80114d6:	4602      	mov	r2, r0
 80114d8:	4b24      	ldr	r3, [pc, #144]	; (801156c <__d2b+0xac>)
 80114da:	4825      	ldr	r0, [pc, #148]	; (8011570 <__d2b+0xb0>)
 80114dc:	f240 310f 	movw	r1, #783	; 0x30f
 80114e0:	f000 f8f6 	bl	80116d0 <__assert_func>
 80114e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80114e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114ec:	bb2d      	cbnz	r5, 801153a <__d2b+0x7a>
 80114ee:	9301      	str	r3, [sp, #4]
 80114f0:	f1b8 0300 	subs.w	r3, r8, #0
 80114f4:	d026      	beq.n	8011544 <__d2b+0x84>
 80114f6:	4668      	mov	r0, sp
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	f7ff fd87 	bl	801100c <__lo0bits>
 80114fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011502:	b1e8      	cbz	r0, 8011540 <__d2b+0x80>
 8011504:	f1c0 0320 	rsb	r3, r0, #32
 8011508:	fa02 f303 	lsl.w	r3, r2, r3
 801150c:	430b      	orrs	r3, r1
 801150e:	40c2      	lsrs	r2, r0
 8011510:	6163      	str	r3, [r4, #20]
 8011512:	9201      	str	r2, [sp, #4]
 8011514:	9b01      	ldr	r3, [sp, #4]
 8011516:	61a3      	str	r3, [r4, #24]
 8011518:	2b00      	cmp	r3, #0
 801151a:	bf14      	ite	ne
 801151c:	2202      	movne	r2, #2
 801151e:	2201      	moveq	r2, #1
 8011520:	6122      	str	r2, [r4, #16]
 8011522:	b1bd      	cbz	r5, 8011554 <__d2b+0x94>
 8011524:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011528:	4405      	add	r5, r0
 801152a:	603d      	str	r5, [r7, #0]
 801152c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011530:	6030      	str	r0, [r6, #0]
 8011532:	4620      	mov	r0, r4
 8011534:	b003      	add	sp, #12
 8011536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801153a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801153e:	e7d6      	b.n	80114ee <__d2b+0x2e>
 8011540:	6161      	str	r1, [r4, #20]
 8011542:	e7e7      	b.n	8011514 <__d2b+0x54>
 8011544:	a801      	add	r0, sp, #4
 8011546:	f7ff fd61 	bl	801100c <__lo0bits>
 801154a:	9b01      	ldr	r3, [sp, #4]
 801154c:	6163      	str	r3, [r4, #20]
 801154e:	3020      	adds	r0, #32
 8011550:	2201      	movs	r2, #1
 8011552:	e7e5      	b.n	8011520 <__d2b+0x60>
 8011554:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011558:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801155c:	6038      	str	r0, [r7, #0]
 801155e:	6918      	ldr	r0, [r3, #16]
 8011560:	f7ff fd34 	bl	8010fcc <__hi0bits>
 8011564:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011568:	e7e2      	b.n	8011530 <__d2b+0x70>
 801156a:	bf00      	nop
 801156c:	080124dc 	.word	0x080124dc
 8011570:	080124ed 	.word	0x080124ed

08011574 <__sflush_r>:
 8011574:	898a      	ldrh	r2, [r1, #12]
 8011576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801157a:	4605      	mov	r5, r0
 801157c:	0710      	lsls	r0, r2, #28
 801157e:	460c      	mov	r4, r1
 8011580:	d458      	bmi.n	8011634 <__sflush_r+0xc0>
 8011582:	684b      	ldr	r3, [r1, #4]
 8011584:	2b00      	cmp	r3, #0
 8011586:	dc05      	bgt.n	8011594 <__sflush_r+0x20>
 8011588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801158a:	2b00      	cmp	r3, #0
 801158c:	dc02      	bgt.n	8011594 <__sflush_r+0x20>
 801158e:	2000      	movs	r0, #0
 8011590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011596:	2e00      	cmp	r6, #0
 8011598:	d0f9      	beq.n	801158e <__sflush_r+0x1a>
 801159a:	2300      	movs	r3, #0
 801159c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80115a0:	682f      	ldr	r7, [r5, #0]
 80115a2:	6a21      	ldr	r1, [r4, #32]
 80115a4:	602b      	str	r3, [r5, #0]
 80115a6:	d032      	beq.n	801160e <__sflush_r+0x9a>
 80115a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80115aa:	89a3      	ldrh	r3, [r4, #12]
 80115ac:	075a      	lsls	r2, r3, #29
 80115ae:	d505      	bpl.n	80115bc <__sflush_r+0x48>
 80115b0:	6863      	ldr	r3, [r4, #4]
 80115b2:	1ac0      	subs	r0, r0, r3
 80115b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115b6:	b10b      	cbz	r3, 80115bc <__sflush_r+0x48>
 80115b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115ba:	1ac0      	subs	r0, r0, r3
 80115bc:	2300      	movs	r3, #0
 80115be:	4602      	mov	r2, r0
 80115c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115c2:	6a21      	ldr	r1, [r4, #32]
 80115c4:	4628      	mov	r0, r5
 80115c6:	47b0      	blx	r6
 80115c8:	1c43      	adds	r3, r0, #1
 80115ca:	89a3      	ldrh	r3, [r4, #12]
 80115cc:	d106      	bne.n	80115dc <__sflush_r+0x68>
 80115ce:	6829      	ldr	r1, [r5, #0]
 80115d0:	291d      	cmp	r1, #29
 80115d2:	d82b      	bhi.n	801162c <__sflush_r+0xb8>
 80115d4:	4a29      	ldr	r2, [pc, #164]	; (801167c <__sflush_r+0x108>)
 80115d6:	410a      	asrs	r2, r1
 80115d8:	07d6      	lsls	r6, r2, #31
 80115da:	d427      	bmi.n	801162c <__sflush_r+0xb8>
 80115dc:	2200      	movs	r2, #0
 80115de:	6062      	str	r2, [r4, #4]
 80115e0:	04d9      	lsls	r1, r3, #19
 80115e2:	6922      	ldr	r2, [r4, #16]
 80115e4:	6022      	str	r2, [r4, #0]
 80115e6:	d504      	bpl.n	80115f2 <__sflush_r+0x7e>
 80115e8:	1c42      	adds	r2, r0, #1
 80115ea:	d101      	bne.n	80115f0 <__sflush_r+0x7c>
 80115ec:	682b      	ldr	r3, [r5, #0]
 80115ee:	b903      	cbnz	r3, 80115f2 <__sflush_r+0x7e>
 80115f0:	6560      	str	r0, [r4, #84]	; 0x54
 80115f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115f4:	602f      	str	r7, [r5, #0]
 80115f6:	2900      	cmp	r1, #0
 80115f8:	d0c9      	beq.n	801158e <__sflush_r+0x1a>
 80115fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115fe:	4299      	cmp	r1, r3
 8011600:	d002      	beq.n	8011608 <__sflush_r+0x94>
 8011602:	4628      	mov	r0, r5
 8011604:	f7ff fbee 	bl	8010de4 <_free_r>
 8011608:	2000      	movs	r0, #0
 801160a:	6360      	str	r0, [r4, #52]	; 0x34
 801160c:	e7c0      	b.n	8011590 <__sflush_r+0x1c>
 801160e:	2301      	movs	r3, #1
 8011610:	4628      	mov	r0, r5
 8011612:	47b0      	blx	r6
 8011614:	1c41      	adds	r1, r0, #1
 8011616:	d1c8      	bne.n	80115aa <__sflush_r+0x36>
 8011618:	682b      	ldr	r3, [r5, #0]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d0c5      	beq.n	80115aa <__sflush_r+0x36>
 801161e:	2b1d      	cmp	r3, #29
 8011620:	d001      	beq.n	8011626 <__sflush_r+0xb2>
 8011622:	2b16      	cmp	r3, #22
 8011624:	d101      	bne.n	801162a <__sflush_r+0xb6>
 8011626:	602f      	str	r7, [r5, #0]
 8011628:	e7b1      	b.n	801158e <__sflush_r+0x1a>
 801162a:	89a3      	ldrh	r3, [r4, #12]
 801162c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011630:	81a3      	strh	r3, [r4, #12]
 8011632:	e7ad      	b.n	8011590 <__sflush_r+0x1c>
 8011634:	690f      	ldr	r7, [r1, #16]
 8011636:	2f00      	cmp	r7, #0
 8011638:	d0a9      	beq.n	801158e <__sflush_r+0x1a>
 801163a:	0793      	lsls	r3, r2, #30
 801163c:	680e      	ldr	r6, [r1, #0]
 801163e:	bf08      	it	eq
 8011640:	694b      	ldreq	r3, [r1, #20]
 8011642:	600f      	str	r7, [r1, #0]
 8011644:	bf18      	it	ne
 8011646:	2300      	movne	r3, #0
 8011648:	eba6 0807 	sub.w	r8, r6, r7
 801164c:	608b      	str	r3, [r1, #8]
 801164e:	f1b8 0f00 	cmp.w	r8, #0
 8011652:	dd9c      	ble.n	801158e <__sflush_r+0x1a>
 8011654:	6a21      	ldr	r1, [r4, #32]
 8011656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011658:	4643      	mov	r3, r8
 801165a:	463a      	mov	r2, r7
 801165c:	4628      	mov	r0, r5
 801165e:	47b0      	blx	r6
 8011660:	2800      	cmp	r0, #0
 8011662:	dc06      	bgt.n	8011672 <__sflush_r+0xfe>
 8011664:	89a3      	ldrh	r3, [r4, #12]
 8011666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801166a:	81a3      	strh	r3, [r4, #12]
 801166c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011670:	e78e      	b.n	8011590 <__sflush_r+0x1c>
 8011672:	4407      	add	r7, r0
 8011674:	eba8 0800 	sub.w	r8, r8, r0
 8011678:	e7e9      	b.n	801164e <__sflush_r+0xda>
 801167a:	bf00      	nop
 801167c:	dfbffffe 	.word	0xdfbffffe

08011680 <_fflush_r>:
 8011680:	b538      	push	{r3, r4, r5, lr}
 8011682:	690b      	ldr	r3, [r1, #16]
 8011684:	4605      	mov	r5, r0
 8011686:	460c      	mov	r4, r1
 8011688:	b913      	cbnz	r3, 8011690 <_fflush_r+0x10>
 801168a:	2500      	movs	r5, #0
 801168c:	4628      	mov	r0, r5
 801168e:	bd38      	pop	{r3, r4, r5, pc}
 8011690:	b118      	cbz	r0, 801169a <_fflush_r+0x1a>
 8011692:	6a03      	ldr	r3, [r0, #32]
 8011694:	b90b      	cbnz	r3, 801169a <_fflush_r+0x1a>
 8011696:	f7fe fc07 	bl	800fea8 <__sinit>
 801169a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d0f3      	beq.n	801168a <_fflush_r+0xa>
 80116a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80116a4:	07d0      	lsls	r0, r2, #31
 80116a6:	d404      	bmi.n	80116b2 <_fflush_r+0x32>
 80116a8:	0599      	lsls	r1, r3, #22
 80116aa:	d402      	bmi.n	80116b2 <_fflush_r+0x32>
 80116ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116ae:	f7fe fd0f 	bl	80100d0 <__retarget_lock_acquire_recursive>
 80116b2:	4628      	mov	r0, r5
 80116b4:	4621      	mov	r1, r4
 80116b6:	f7ff ff5d 	bl	8011574 <__sflush_r>
 80116ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116bc:	07da      	lsls	r2, r3, #31
 80116be:	4605      	mov	r5, r0
 80116c0:	d4e4      	bmi.n	801168c <_fflush_r+0xc>
 80116c2:	89a3      	ldrh	r3, [r4, #12]
 80116c4:	059b      	lsls	r3, r3, #22
 80116c6:	d4e1      	bmi.n	801168c <_fflush_r+0xc>
 80116c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116ca:	f7fe fd02 	bl	80100d2 <__retarget_lock_release_recursive>
 80116ce:	e7dd      	b.n	801168c <_fflush_r+0xc>

080116d0 <__assert_func>:
 80116d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116d2:	4614      	mov	r4, r2
 80116d4:	461a      	mov	r2, r3
 80116d6:	4b09      	ldr	r3, [pc, #36]	; (80116fc <__assert_func+0x2c>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	4605      	mov	r5, r0
 80116dc:	68d8      	ldr	r0, [r3, #12]
 80116de:	b14c      	cbz	r4, 80116f4 <__assert_func+0x24>
 80116e0:	4b07      	ldr	r3, [pc, #28]	; (8011700 <__assert_func+0x30>)
 80116e2:	9100      	str	r1, [sp, #0]
 80116e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80116e8:	4906      	ldr	r1, [pc, #24]	; (8011704 <__assert_func+0x34>)
 80116ea:	462b      	mov	r3, r5
 80116ec:	f000 f844 	bl	8011778 <fiprintf>
 80116f0:	f000 f854 	bl	801179c <abort>
 80116f4:	4b04      	ldr	r3, [pc, #16]	; (8011708 <__assert_func+0x38>)
 80116f6:	461c      	mov	r4, r3
 80116f8:	e7f3      	b.n	80116e2 <__assert_func+0x12>
 80116fa:	bf00      	nop
 80116fc:	20000178 	.word	0x20000178
 8011700:	0801264e 	.word	0x0801264e
 8011704:	0801265b 	.word	0x0801265b
 8011708:	08012689 	.word	0x08012689

0801170c <_calloc_r>:
 801170c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801170e:	fba1 2402 	umull	r2, r4, r1, r2
 8011712:	b94c      	cbnz	r4, 8011728 <_calloc_r+0x1c>
 8011714:	4611      	mov	r1, r2
 8011716:	9201      	str	r2, [sp, #4]
 8011718:	f7fd fe5a 	bl	800f3d0 <_malloc_r>
 801171c:	9a01      	ldr	r2, [sp, #4]
 801171e:	4605      	mov	r5, r0
 8011720:	b930      	cbnz	r0, 8011730 <_calloc_r+0x24>
 8011722:	4628      	mov	r0, r5
 8011724:	b003      	add	sp, #12
 8011726:	bd30      	pop	{r4, r5, pc}
 8011728:	220c      	movs	r2, #12
 801172a:	6002      	str	r2, [r0, #0]
 801172c:	2500      	movs	r5, #0
 801172e:	e7f8      	b.n	8011722 <_calloc_r+0x16>
 8011730:	4621      	mov	r1, r4
 8011732:	f7fe fc32 	bl	800ff9a <memset>
 8011736:	e7f4      	b.n	8011722 <_calloc_r+0x16>

08011738 <__ascii_mbtowc>:
 8011738:	b082      	sub	sp, #8
 801173a:	b901      	cbnz	r1, 801173e <__ascii_mbtowc+0x6>
 801173c:	a901      	add	r1, sp, #4
 801173e:	b142      	cbz	r2, 8011752 <__ascii_mbtowc+0x1a>
 8011740:	b14b      	cbz	r3, 8011756 <__ascii_mbtowc+0x1e>
 8011742:	7813      	ldrb	r3, [r2, #0]
 8011744:	600b      	str	r3, [r1, #0]
 8011746:	7812      	ldrb	r2, [r2, #0]
 8011748:	1e10      	subs	r0, r2, #0
 801174a:	bf18      	it	ne
 801174c:	2001      	movne	r0, #1
 801174e:	b002      	add	sp, #8
 8011750:	4770      	bx	lr
 8011752:	4610      	mov	r0, r2
 8011754:	e7fb      	b.n	801174e <__ascii_mbtowc+0x16>
 8011756:	f06f 0001 	mvn.w	r0, #1
 801175a:	e7f8      	b.n	801174e <__ascii_mbtowc+0x16>

0801175c <__ascii_wctomb>:
 801175c:	b149      	cbz	r1, 8011772 <__ascii_wctomb+0x16>
 801175e:	2aff      	cmp	r2, #255	; 0xff
 8011760:	bf85      	ittet	hi
 8011762:	238a      	movhi	r3, #138	; 0x8a
 8011764:	6003      	strhi	r3, [r0, #0]
 8011766:	700a      	strbls	r2, [r1, #0]
 8011768:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801176c:	bf98      	it	ls
 801176e:	2001      	movls	r0, #1
 8011770:	4770      	bx	lr
 8011772:	4608      	mov	r0, r1
 8011774:	4770      	bx	lr
	...

08011778 <fiprintf>:
 8011778:	b40e      	push	{r1, r2, r3}
 801177a:	b503      	push	{r0, r1, lr}
 801177c:	4601      	mov	r1, r0
 801177e:	ab03      	add	r3, sp, #12
 8011780:	4805      	ldr	r0, [pc, #20]	; (8011798 <fiprintf+0x20>)
 8011782:	f853 2b04 	ldr.w	r2, [r3], #4
 8011786:	6800      	ldr	r0, [r0, #0]
 8011788:	9301      	str	r3, [sp, #4]
 801178a:	f000 f837 	bl	80117fc <_vfiprintf_r>
 801178e:	b002      	add	sp, #8
 8011790:	f85d eb04 	ldr.w	lr, [sp], #4
 8011794:	b003      	add	sp, #12
 8011796:	4770      	bx	lr
 8011798:	20000178 	.word	0x20000178

0801179c <abort>:
 801179c:	b508      	push	{r3, lr}
 801179e:	2006      	movs	r0, #6
 80117a0:	f000 fa04 	bl	8011bac <raise>
 80117a4:	2001      	movs	r0, #1
 80117a6:	f7f0 fcbf 	bl	8002128 <_exit>

080117aa <__sfputc_r>:
 80117aa:	6893      	ldr	r3, [r2, #8]
 80117ac:	3b01      	subs	r3, #1
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	b410      	push	{r4}
 80117b2:	6093      	str	r3, [r2, #8]
 80117b4:	da08      	bge.n	80117c8 <__sfputc_r+0x1e>
 80117b6:	6994      	ldr	r4, [r2, #24]
 80117b8:	42a3      	cmp	r3, r4
 80117ba:	db01      	blt.n	80117c0 <__sfputc_r+0x16>
 80117bc:	290a      	cmp	r1, #10
 80117be:	d103      	bne.n	80117c8 <__sfputc_r+0x1e>
 80117c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117c4:	f000 b934 	b.w	8011a30 <__swbuf_r>
 80117c8:	6813      	ldr	r3, [r2, #0]
 80117ca:	1c58      	adds	r0, r3, #1
 80117cc:	6010      	str	r0, [r2, #0]
 80117ce:	7019      	strb	r1, [r3, #0]
 80117d0:	4608      	mov	r0, r1
 80117d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117d6:	4770      	bx	lr

080117d8 <__sfputs_r>:
 80117d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117da:	4606      	mov	r6, r0
 80117dc:	460f      	mov	r7, r1
 80117de:	4614      	mov	r4, r2
 80117e0:	18d5      	adds	r5, r2, r3
 80117e2:	42ac      	cmp	r4, r5
 80117e4:	d101      	bne.n	80117ea <__sfputs_r+0x12>
 80117e6:	2000      	movs	r0, #0
 80117e8:	e007      	b.n	80117fa <__sfputs_r+0x22>
 80117ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117ee:	463a      	mov	r2, r7
 80117f0:	4630      	mov	r0, r6
 80117f2:	f7ff ffda 	bl	80117aa <__sfputc_r>
 80117f6:	1c43      	adds	r3, r0, #1
 80117f8:	d1f3      	bne.n	80117e2 <__sfputs_r+0xa>
 80117fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080117fc <_vfiprintf_r>:
 80117fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011800:	460d      	mov	r5, r1
 8011802:	b09d      	sub	sp, #116	; 0x74
 8011804:	4614      	mov	r4, r2
 8011806:	4698      	mov	r8, r3
 8011808:	4606      	mov	r6, r0
 801180a:	b118      	cbz	r0, 8011814 <_vfiprintf_r+0x18>
 801180c:	6a03      	ldr	r3, [r0, #32]
 801180e:	b90b      	cbnz	r3, 8011814 <_vfiprintf_r+0x18>
 8011810:	f7fe fb4a 	bl	800fea8 <__sinit>
 8011814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011816:	07d9      	lsls	r1, r3, #31
 8011818:	d405      	bmi.n	8011826 <_vfiprintf_r+0x2a>
 801181a:	89ab      	ldrh	r3, [r5, #12]
 801181c:	059a      	lsls	r2, r3, #22
 801181e:	d402      	bmi.n	8011826 <_vfiprintf_r+0x2a>
 8011820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011822:	f7fe fc55 	bl	80100d0 <__retarget_lock_acquire_recursive>
 8011826:	89ab      	ldrh	r3, [r5, #12]
 8011828:	071b      	lsls	r3, r3, #28
 801182a:	d501      	bpl.n	8011830 <_vfiprintf_r+0x34>
 801182c:	692b      	ldr	r3, [r5, #16]
 801182e:	b99b      	cbnz	r3, 8011858 <_vfiprintf_r+0x5c>
 8011830:	4629      	mov	r1, r5
 8011832:	4630      	mov	r0, r6
 8011834:	f000 f93a 	bl	8011aac <__swsetup_r>
 8011838:	b170      	cbz	r0, 8011858 <_vfiprintf_r+0x5c>
 801183a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801183c:	07dc      	lsls	r4, r3, #31
 801183e:	d504      	bpl.n	801184a <_vfiprintf_r+0x4e>
 8011840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011844:	b01d      	add	sp, #116	; 0x74
 8011846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801184a:	89ab      	ldrh	r3, [r5, #12]
 801184c:	0598      	lsls	r0, r3, #22
 801184e:	d4f7      	bmi.n	8011840 <_vfiprintf_r+0x44>
 8011850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011852:	f7fe fc3e 	bl	80100d2 <__retarget_lock_release_recursive>
 8011856:	e7f3      	b.n	8011840 <_vfiprintf_r+0x44>
 8011858:	2300      	movs	r3, #0
 801185a:	9309      	str	r3, [sp, #36]	; 0x24
 801185c:	2320      	movs	r3, #32
 801185e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011862:	f8cd 800c 	str.w	r8, [sp, #12]
 8011866:	2330      	movs	r3, #48	; 0x30
 8011868:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011a1c <_vfiprintf_r+0x220>
 801186c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011870:	f04f 0901 	mov.w	r9, #1
 8011874:	4623      	mov	r3, r4
 8011876:	469a      	mov	sl, r3
 8011878:	f813 2b01 	ldrb.w	r2, [r3], #1
 801187c:	b10a      	cbz	r2, 8011882 <_vfiprintf_r+0x86>
 801187e:	2a25      	cmp	r2, #37	; 0x25
 8011880:	d1f9      	bne.n	8011876 <_vfiprintf_r+0x7a>
 8011882:	ebba 0b04 	subs.w	fp, sl, r4
 8011886:	d00b      	beq.n	80118a0 <_vfiprintf_r+0xa4>
 8011888:	465b      	mov	r3, fp
 801188a:	4622      	mov	r2, r4
 801188c:	4629      	mov	r1, r5
 801188e:	4630      	mov	r0, r6
 8011890:	f7ff ffa2 	bl	80117d8 <__sfputs_r>
 8011894:	3001      	adds	r0, #1
 8011896:	f000 80a9 	beq.w	80119ec <_vfiprintf_r+0x1f0>
 801189a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801189c:	445a      	add	r2, fp
 801189e:	9209      	str	r2, [sp, #36]	; 0x24
 80118a0:	f89a 3000 	ldrb.w	r3, [sl]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f000 80a1 	beq.w	80119ec <_vfiprintf_r+0x1f0>
 80118aa:	2300      	movs	r3, #0
 80118ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118b4:	f10a 0a01 	add.w	sl, sl, #1
 80118b8:	9304      	str	r3, [sp, #16]
 80118ba:	9307      	str	r3, [sp, #28]
 80118bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80118c0:	931a      	str	r3, [sp, #104]	; 0x68
 80118c2:	4654      	mov	r4, sl
 80118c4:	2205      	movs	r2, #5
 80118c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118ca:	4854      	ldr	r0, [pc, #336]	; (8011a1c <_vfiprintf_r+0x220>)
 80118cc:	f7ee fc88 	bl	80001e0 <memchr>
 80118d0:	9a04      	ldr	r2, [sp, #16]
 80118d2:	b9d8      	cbnz	r0, 801190c <_vfiprintf_r+0x110>
 80118d4:	06d1      	lsls	r1, r2, #27
 80118d6:	bf44      	itt	mi
 80118d8:	2320      	movmi	r3, #32
 80118da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118de:	0713      	lsls	r3, r2, #28
 80118e0:	bf44      	itt	mi
 80118e2:	232b      	movmi	r3, #43	; 0x2b
 80118e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118e8:	f89a 3000 	ldrb.w	r3, [sl]
 80118ec:	2b2a      	cmp	r3, #42	; 0x2a
 80118ee:	d015      	beq.n	801191c <_vfiprintf_r+0x120>
 80118f0:	9a07      	ldr	r2, [sp, #28]
 80118f2:	4654      	mov	r4, sl
 80118f4:	2000      	movs	r0, #0
 80118f6:	f04f 0c0a 	mov.w	ip, #10
 80118fa:	4621      	mov	r1, r4
 80118fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011900:	3b30      	subs	r3, #48	; 0x30
 8011902:	2b09      	cmp	r3, #9
 8011904:	d94d      	bls.n	80119a2 <_vfiprintf_r+0x1a6>
 8011906:	b1b0      	cbz	r0, 8011936 <_vfiprintf_r+0x13a>
 8011908:	9207      	str	r2, [sp, #28]
 801190a:	e014      	b.n	8011936 <_vfiprintf_r+0x13a>
 801190c:	eba0 0308 	sub.w	r3, r0, r8
 8011910:	fa09 f303 	lsl.w	r3, r9, r3
 8011914:	4313      	orrs	r3, r2
 8011916:	9304      	str	r3, [sp, #16]
 8011918:	46a2      	mov	sl, r4
 801191a:	e7d2      	b.n	80118c2 <_vfiprintf_r+0xc6>
 801191c:	9b03      	ldr	r3, [sp, #12]
 801191e:	1d19      	adds	r1, r3, #4
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	9103      	str	r1, [sp, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	bfbb      	ittet	lt
 8011928:	425b      	neglt	r3, r3
 801192a:	f042 0202 	orrlt.w	r2, r2, #2
 801192e:	9307      	strge	r3, [sp, #28]
 8011930:	9307      	strlt	r3, [sp, #28]
 8011932:	bfb8      	it	lt
 8011934:	9204      	strlt	r2, [sp, #16]
 8011936:	7823      	ldrb	r3, [r4, #0]
 8011938:	2b2e      	cmp	r3, #46	; 0x2e
 801193a:	d10c      	bne.n	8011956 <_vfiprintf_r+0x15a>
 801193c:	7863      	ldrb	r3, [r4, #1]
 801193e:	2b2a      	cmp	r3, #42	; 0x2a
 8011940:	d134      	bne.n	80119ac <_vfiprintf_r+0x1b0>
 8011942:	9b03      	ldr	r3, [sp, #12]
 8011944:	1d1a      	adds	r2, r3, #4
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	9203      	str	r2, [sp, #12]
 801194a:	2b00      	cmp	r3, #0
 801194c:	bfb8      	it	lt
 801194e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011952:	3402      	adds	r4, #2
 8011954:	9305      	str	r3, [sp, #20]
 8011956:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011a2c <_vfiprintf_r+0x230>
 801195a:	7821      	ldrb	r1, [r4, #0]
 801195c:	2203      	movs	r2, #3
 801195e:	4650      	mov	r0, sl
 8011960:	f7ee fc3e 	bl	80001e0 <memchr>
 8011964:	b138      	cbz	r0, 8011976 <_vfiprintf_r+0x17a>
 8011966:	9b04      	ldr	r3, [sp, #16]
 8011968:	eba0 000a 	sub.w	r0, r0, sl
 801196c:	2240      	movs	r2, #64	; 0x40
 801196e:	4082      	lsls	r2, r0
 8011970:	4313      	orrs	r3, r2
 8011972:	3401      	adds	r4, #1
 8011974:	9304      	str	r3, [sp, #16]
 8011976:	f814 1b01 	ldrb.w	r1, [r4], #1
 801197a:	4829      	ldr	r0, [pc, #164]	; (8011a20 <_vfiprintf_r+0x224>)
 801197c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011980:	2206      	movs	r2, #6
 8011982:	f7ee fc2d 	bl	80001e0 <memchr>
 8011986:	2800      	cmp	r0, #0
 8011988:	d03f      	beq.n	8011a0a <_vfiprintf_r+0x20e>
 801198a:	4b26      	ldr	r3, [pc, #152]	; (8011a24 <_vfiprintf_r+0x228>)
 801198c:	bb1b      	cbnz	r3, 80119d6 <_vfiprintf_r+0x1da>
 801198e:	9b03      	ldr	r3, [sp, #12]
 8011990:	3307      	adds	r3, #7
 8011992:	f023 0307 	bic.w	r3, r3, #7
 8011996:	3308      	adds	r3, #8
 8011998:	9303      	str	r3, [sp, #12]
 801199a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801199c:	443b      	add	r3, r7
 801199e:	9309      	str	r3, [sp, #36]	; 0x24
 80119a0:	e768      	b.n	8011874 <_vfiprintf_r+0x78>
 80119a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80119a6:	460c      	mov	r4, r1
 80119a8:	2001      	movs	r0, #1
 80119aa:	e7a6      	b.n	80118fa <_vfiprintf_r+0xfe>
 80119ac:	2300      	movs	r3, #0
 80119ae:	3401      	adds	r4, #1
 80119b0:	9305      	str	r3, [sp, #20]
 80119b2:	4619      	mov	r1, r3
 80119b4:	f04f 0c0a 	mov.w	ip, #10
 80119b8:	4620      	mov	r0, r4
 80119ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119be:	3a30      	subs	r2, #48	; 0x30
 80119c0:	2a09      	cmp	r2, #9
 80119c2:	d903      	bls.n	80119cc <_vfiprintf_r+0x1d0>
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d0c6      	beq.n	8011956 <_vfiprintf_r+0x15a>
 80119c8:	9105      	str	r1, [sp, #20]
 80119ca:	e7c4      	b.n	8011956 <_vfiprintf_r+0x15a>
 80119cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80119d0:	4604      	mov	r4, r0
 80119d2:	2301      	movs	r3, #1
 80119d4:	e7f0      	b.n	80119b8 <_vfiprintf_r+0x1bc>
 80119d6:	ab03      	add	r3, sp, #12
 80119d8:	9300      	str	r3, [sp, #0]
 80119da:	462a      	mov	r2, r5
 80119dc:	4b12      	ldr	r3, [pc, #72]	; (8011a28 <_vfiprintf_r+0x22c>)
 80119de:	a904      	add	r1, sp, #16
 80119e0:	4630      	mov	r0, r6
 80119e2:	f7fd fe21 	bl	800f628 <_printf_float>
 80119e6:	4607      	mov	r7, r0
 80119e8:	1c78      	adds	r0, r7, #1
 80119ea:	d1d6      	bne.n	801199a <_vfiprintf_r+0x19e>
 80119ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119ee:	07d9      	lsls	r1, r3, #31
 80119f0:	d405      	bmi.n	80119fe <_vfiprintf_r+0x202>
 80119f2:	89ab      	ldrh	r3, [r5, #12]
 80119f4:	059a      	lsls	r2, r3, #22
 80119f6:	d402      	bmi.n	80119fe <_vfiprintf_r+0x202>
 80119f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119fa:	f7fe fb6a 	bl	80100d2 <__retarget_lock_release_recursive>
 80119fe:	89ab      	ldrh	r3, [r5, #12]
 8011a00:	065b      	lsls	r3, r3, #25
 8011a02:	f53f af1d 	bmi.w	8011840 <_vfiprintf_r+0x44>
 8011a06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a08:	e71c      	b.n	8011844 <_vfiprintf_r+0x48>
 8011a0a:	ab03      	add	r3, sp, #12
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	462a      	mov	r2, r5
 8011a10:	4b05      	ldr	r3, [pc, #20]	; (8011a28 <_vfiprintf_r+0x22c>)
 8011a12:	a904      	add	r1, sp, #16
 8011a14:	4630      	mov	r0, r6
 8011a16:	f7fe f8ab 	bl	800fb70 <_printf_i>
 8011a1a:	e7e4      	b.n	80119e6 <_vfiprintf_r+0x1ea>
 8011a1c:	0801278b 	.word	0x0801278b
 8011a20:	08012795 	.word	0x08012795
 8011a24:	0800f629 	.word	0x0800f629
 8011a28:	080117d9 	.word	0x080117d9
 8011a2c:	08012791 	.word	0x08012791

08011a30 <__swbuf_r>:
 8011a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a32:	460e      	mov	r6, r1
 8011a34:	4614      	mov	r4, r2
 8011a36:	4605      	mov	r5, r0
 8011a38:	b118      	cbz	r0, 8011a42 <__swbuf_r+0x12>
 8011a3a:	6a03      	ldr	r3, [r0, #32]
 8011a3c:	b90b      	cbnz	r3, 8011a42 <__swbuf_r+0x12>
 8011a3e:	f7fe fa33 	bl	800fea8 <__sinit>
 8011a42:	69a3      	ldr	r3, [r4, #24]
 8011a44:	60a3      	str	r3, [r4, #8]
 8011a46:	89a3      	ldrh	r3, [r4, #12]
 8011a48:	071a      	lsls	r2, r3, #28
 8011a4a:	d525      	bpl.n	8011a98 <__swbuf_r+0x68>
 8011a4c:	6923      	ldr	r3, [r4, #16]
 8011a4e:	b31b      	cbz	r3, 8011a98 <__swbuf_r+0x68>
 8011a50:	6823      	ldr	r3, [r4, #0]
 8011a52:	6922      	ldr	r2, [r4, #16]
 8011a54:	1a98      	subs	r0, r3, r2
 8011a56:	6963      	ldr	r3, [r4, #20]
 8011a58:	b2f6      	uxtb	r6, r6
 8011a5a:	4283      	cmp	r3, r0
 8011a5c:	4637      	mov	r7, r6
 8011a5e:	dc04      	bgt.n	8011a6a <__swbuf_r+0x3a>
 8011a60:	4621      	mov	r1, r4
 8011a62:	4628      	mov	r0, r5
 8011a64:	f7ff fe0c 	bl	8011680 <_fflush_r>
 8011a68:	b9e0      	cbnz	r0, 8011aa4 <__swbuf_r+0x74>
 8011a6a:	68a3      	ldr	r3, [r4, #8]
 8011a6c:	3b01      	subs	r3, #1
 8011a6e:	60a3      	str	r3, [r4, #8]
 8011a70:	6823      	ldr	r3, [r4, #0]
 8011a72:	1c5a      	adds	r2, r3, #1
 8011a74:	6022      	str	r2, [r4, #0]
 8011a76:	701e      	strb	r6, [r3, #0]
 8011a78:	6962      	ldr	r2, [r4, #20]
 8011a7a:	1c43      	adds	r3, r0, #1
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d004      	beq.n	8011a8a <__swbuf_r+0x5a>
 8011a80:	89a3      	ldrh	r3, [r4, #12]
 8011a82:	07db      	lsls	r3, r3, #31
 8011a84:	d506      	bpl.n	8011a94 <__swbuf_r+0x64>
 8011a86:	2e0a      	cmp	r6, #10
 8011a88:	d104      	bne.n	8011a94 <__swbuf_r+0x64>
 8011a8a:	4621      	mov	r1, r4
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	f7ff fdf7 	bl	8011680 <_fflush_r>
 8011a92:	b938      	cbnz	r0, 8011aa4 <__swbuf_r+0x74>
 8011a94:	4638      	mov	r0, r7
 8011a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a98:	4621      	mov	r1, r4
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f000 f806 	bl	8011aac <__swsetup_r>
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d0d5      	beq.n	8011a50 <__swbuf_r+0x20>
 8011aa4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011aa8:	e7f4      	b.n	8011a94 <__swbuf_r+0x64>
	...

08011aac <__swsetup_r>:
 8011aac:	b538      	push	{r3, r4, r5, lr}
 8011aae:	4b2a      	ldr	r3, [pc, #168]	; (8011b58 <__swsetup_r+0xac>)
 8011ab0:	4605      	mov	r5, r0
 8011ab2:	6818      	ldr	r0, [r3, #0]
 8011ab4:	460c      	mov	r4, r1
 8011ab6:	b118      	cbz	r0, 8011ac0 <__swsetup_r+0x14>
 8011ab8:	6a03      	ldr	r3, [r0, #32]
 8011aba:	b90b      	cbnz	r3, 8011ac0 <__swsetup_r+0x14>
 8011abc:	f7fe f9f4 	bl	800fea8 <__sinit>
 8011ac0:	89a3      	ldrh	r3, [r4, #12]
 8011ac2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ac6:	0718      	lsls	r0, r3, #28
 8011ac8:	d422      	bmi.n	8011b10 <__swsetup_r+0x64>
 8011aca:	06d9      	lsls	r1, r3, #27
 8011acc:	d407      	bmi.n	8011ade <__swsetup_r+0x32>
 8011ace:	2309      	movs	r3, #9
 8011ad0:	602b      	str	r3, [r5, #0]
 8011ad2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011ad6:	81a3      	strh	r3, [r4, #12]
 8011ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011adc:	e034      	b.n	8011b48 <__swsetup_r+0x9c>
 8011ade:	0758      	lsls	r0, r3, #29
 8011ae0:	d512      	bpl.n	8011b08 <__swsetup_r+0x5c>
 8011ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ae4:	b141      	cbz	r1, 8011af8 <__swsetup_r+0x4c>
 8011ae6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011aea:	4299      	cmp	r1, r3
 8011aec:	d002      	beq.n	8011af4 <__swsetup_r+0x48>
 8011aee:	4628      	mov	r0, r5
 8011af0:	f7ff f978 	bl	8010de4 <_free_r>
 8011af4:	2300      	movs	r3, #0
 8011af6:	6363      	str	r3, [r4, #52]	; 0x34
 8011af8:	89a3      	ldrh	r3, [r4, #12]
 8011afa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011afe:	81a3      	strh	r3, [r4, #12]
 8011b00:	2300      	movs	r3, #0
 8011b02:	6063      	str	r3, [r4, #4]
 8011b04:	6923      	ldr	r3, [r4, #16]
 8011b06:	6023      	str	r3, [r4, #0]
 8011b08:	89a3      	ldrh	r3, [r4, #12]
 8011b0a:	f043 0308 	orr.w	r3, r3, #8
 8011b0e:	81a3      	strh	r3, [r4, #12]
 8011b10:	6923      	ldr	r3, [r4, #16]
 8011b12:	b94b      	cbnz	r3, 8011b28 <__swsetup_r+0x7c>
 8011b14:	89a3      	ldrh	r3, [r4, #12]
 8011b16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b1e:	d003      	beq.n	8011b28 <__swsetup_r+0x7c>
 8011b20:	4621      	mov	r1, r4
 8011b22:	4628      	mov	r0, r5
 8011b24:	f000 f884 	bl	8011c30 <__smakebuf_r>
 8011b28:	89a0      	ldrh	r0, [r4, #12]
 8011b2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b2e:	f010 0301 	ands.w	r3, r0, #1
 8011b32:	d00a      	beq.n	8011b4a <__swsetup_r+0x9e>
 8011b34:	2300      	movs	r3, #0
 8011b36:	60a3      	str	r3, [r4, #8]
 8011b38:	6963      	ldr	r3, [r4, #20]
 8011b3a:	425b      	negs	r3, r3
 8011b3c:	61a3      	str	r3, [r4, #24]
 8011b3e:	6923      	ldr	r3, [r4, #16]
 8011b40:	b943      	cbnz	r3, 8011b54 <__swsetup_r+0xa8>
 8011b42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b46:	d1c4      	bne.n	8011ad2 <__swsetup_r+0x26>
 8011b48:	bd38      	pop	{r3, r4, r5, pc}
 8011b4a:	0781      	lsls	r1, r0, #30
 8011b4c:	bf58      	it	pl
 8011b4e:	6963      	ldrpl	r3, [r4, #20]
 8011b50:	60a3      	str	r3, [r4, #8]
 8011b52:	e7f4      	b.n	8011b3e <__swsetup_r+0x92>
 8011b54:	2000      	movs	r0, #0
 8011b56:	e7f7      	b.n	8011b48 <__swsetup_r+0x9c>
 8011b58:	20000178 	.word	0x20000178

08011b5c <_raise_r>:
 8011b5c:	291f      	cmp	r1, #31
 8011b5e:	b538      	push	{r3, r4, r5, lr}
 8011b60:	4604      	mov	r4, r0
 8011b62:	460d      	mov	r5, r1
 8011b64:	d904      	bls.n	8011b70 <_raise_r+0x14>
 8011b66:	2316      	movs	r3, #22
 8011b68:	6003      	str	r3, [r0, #0]
 8011b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b6e:	bd38      	pop	{r3, r4, r5, pc}
 8011b70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011b72:	b112      	cbz	r2, 8011b7a <_raise_r+0x1e>
 8011b74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b78:	b94b      	cbnz	r3, 8011b8e <_raise_r+0x32>
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f000 f830 	bl	8011be0 <_getpid_r>
 8011b80:	462a      	mov	r2, r5
 8011b82:	4601      	mov	r1, r0
 8011b84:	4620      	mov	r0, r4
 8011b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b8a:	f000 b817 	b.w	8011bbc <_kill_r>
 8011b8e:	2b01      	cmp	r3, #1
 8011b90:	d00a      	beq.n	8011ba8 <_raise_r+0x4c>
 8011b92:	1c59      	adds	r1, r3, #1
 8011b94:	d103      	bne.n	8011b9e <_raise_r+0x42>
 8011b96:	2316      	movs	r3, #22
 8011b98:	6003      	str	r3, [r0, #0]
 8011b9a:	2001      	movs	r0, #1
 8011b9c:	e7e7      	b.n	8011b6e <_raise_r+0x12>
 8011b9e:	2400      	movs	r4, #0
 8011ba0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	4798      	blx	r3
 8011ba8:	2000      	movs	r0, #0
 8011baa:	e7e0      	b.n	8011b6e <_raise_r+0x12>

08011bac <raise>:
 8011bac:	4b02      	ldr	r3, [pc, #8]	; (8011bb8 <raise+0xc>)
 8011bae:	4601      	mov	r1, r0
 8011bb0:	6818      	ldr	r0, [r3, #0]
 8011bb2:	f7ff bfd3 	b.w	8011b5c <_raise_r>
 8011bb6:	bf00      	nop
 8011bb8:	20000178 	.word	0x20000178

08011bbc <_kill_r>:
 8011bbc:	b538      	push	{r3, r4, r5, lr}
 8011bbe:	4d07      	ldr	r5, [pc, #28]	; (8011bdc <_kill_r+0x20>)
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	4608      	mov	r0, r1
 8011bc6:	4611      	mov	r1, r2
 8011bc8:	602b      	str	r3, [r5, #0]
 8011bca:	f7f0 fa9d 	bl	8002108 <_kill>
 8011bce:	1c43      	adds	r3, r0, #1
 8011bd0:	d102      	bne.n	8011bd8 <_kill_r+0x1c>
 8011bd2:	682b      	ldr	r3, [r5, #0]
 8011bd4:	b103      	cbz	r3, 8011bd8 <_kill_r+0x1c>
 8011bd6:	6023      	str	r3, [r4, #0]
 8011bd8:	bd38      	pop	{r3, r4, r5, pc}
 8011bda:	bf00      	nop
 8011bdc:	200023a8 	.word	0x200023a8

08011be0 <_getpid_r>:
 8011be0:	f7f0 ba8a 	b.w	80020f8 <_getpid>

08011be4 <__swhatbuf_r>:
 8011be4:	b570      	push	{r4, r5, r6, lr}
 8011be6:	460c      	mov	r4, r1
 8011be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bec:	2900      	cmp	r1, #0
 8011bee:	b096      	sub	sp, #88	; 0x58
 8011bf0:	4615      	mov	r5, r2
 8011bf2:	461e      	mov	r6, r3
 8011bf4:	da0d      	bge.n	8011c12 <__swhatbuf_r+0x2e>
 8011bf6:	89a3      	ldrh	r3, [r4, #12]
 8011bf8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011bfc:	f04f 0100 	mov.w	r1, #0
 8011c00:	bf0c      	ite	eq
 8011c02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011c06:	2340      	movne	r3, #64	; 0x40
 8011c08:	2000      	movs	r0, #0
 8011c0a:	6031      	str	r1, [r6, #0]
 8011c0c:	602b      	str	r3, [r5, #0]
 8011c0e:	b016      	add	sp, #88	; 0x58
 8011c10:	bd70      	pop	{r4, r5, r6, pc}
 8011c12:	466a      	mov	r2, sp
 8011c14:	f000 f848 	bl	8011ca8 <_fstat_r>
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	dbec      	blt.n	8011bf6 <__swhatbuf_r+0x12>
 8011c1c:	9901      	ldr	r1, [sp, #4]
 8011c1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011c22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011c26:	4259      	negs	r1, r3
 8011c28:	4159      	adcs	r1, r3
 8011c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c2e:	e7eb      	b.n	8011c08 <__swhatbuf_r+0x24>

08011c30 <__smakebuf_r>:
 8011c30:	898b      	ldrh	r3, [r1, #12]
 8011c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c34:	079d      	lsls	r5, r3, #30
 8011c36:	4606      	mov	r6, r0
 8011c38:	460c      	mov	r4, r1
 8011c3a:	d507      	bpl.n	8011c4c <__smakebuf_r+0x1c>
 8011c3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c40:	6023      	str	r3, [r4, #0]
 8011c42:	6123      	str	r3, [r4, #16]
 8011c44:	2301      	movs	r3, #1
 8011c46:	6163      	str	r3, [r4, #20]
 8011c48:	b002      	add	sp, #8
 8011c4a:	bd70      	pop	{r4, r5, r6, pc}
 8011c4c:	ab01      	add	r3, sp, #4
 8011c4e:	466a      	mov	r2, sp
 8011c50:	f7ff ffc8 	bl	8011be4 <__swhatbuf_r>
 8011c54:	9900      	ldr	r1, [sp, #0]
 8011c56:	4605      	mov	r5, r0
 8011c58:	4630      	mov	r0, r6
 8011c5a:	f7fd fbb9 	bl	800f3d0 <_malloc_r>
 8011c5e:	b948      	cbnz	r0, 8011c74 <__smakebuf_r+0x44>
 8011c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c64:	059a      	lsls	r2, r3, #22
 8011c66:	d4ef      	bmi.n	8011c48 <__smakebuf_r+0x18>
 8011c68:	f023 0303 	bic.w	r3, r3, #3
 8011c6c:	f043 0302 	orr.w	r3, r3, #2
 8011c70:	81a3      	strh	r3, [r4, #12]
 8011c72:	e7e3      	b.n	8011c3c <__smakebuf_r+0xc>
 8011c74:	89a3      	ldrh	r3, [r4, #12]
 8011c76:	6020      	str	r0, [r4, #0]
 8011c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c7c:	81a3      	strh	r3, [r4, #12]
 8011c7e:	9b00      	ldr	r3, [sp, #0]
 8011c80:	6163      	str	r3, [r4, #20]
 8011c82:	9b01      	ldr	r3, [sp, #4]
 8011c84:	6120      	str	r0, [r4, #16]
 8011c86:	b15b      	cbz	r3, 8011ca0 <__smakebuf_r+0x70>
 8011c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	f000 f81d 	bl	8011ccc <_isatty_r>
 8011c92:	b128      	cbz	r0, 8011ca0 <__smakebuf_r+0x70>
 8011c94:	89a3      	ldrh	r3, [r4, #12]
 8011c96:	f023 0303 	bic.w	r3, r3, #3
 8011c9a:	f043 0301 	orr.w	r3, r3, #1
 8011c9e:	81a3      	strh	r3, [r4, #12]
 8011ca0:	89a3      	ldrh	r3, [r4, #12]
 8011ca2:	431d      	orrs	r5, r3
 8011ca4:	81a5      	strh	r5, [r4, #12]
 8011ca6:	e7cf      	b.n	8011c48 <__smakebuf_r+0x18>

08011ca8 <_fstat_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4d07      	ldr	r5, [pc, #28]	; (8011cc8 <_fstat_r+0x20>)
 8011cac:	2300      	movs	r3, #0
 8011cae:	4604      	mov	r4, r0
 8011cb0:	4608      	mov	r0, r1
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	602b      	str	r3, [r5, #0]
 8011cb6:	f7f0 fa86 	bl	80021c6 <_fstat>
 8011cba:	1c43      	adds	r3, r0, #1
 8011cbc:	d102      	bne.n	8011cc4 <_fstat_r+0x1c>
 8011cbe:	682b      	ldr	r3, [r5, #0]
 8011cc0:	b103      	cbz	r3, 8011cc4 <_fstat_r+0x1c>
 8011cc2:	6023      	str	r3, [r4, #0]
 8011cc4:	bd38      	pop	{r3, r4, r5, pc}
 8011cc6:	bf00      	nop
 8011cc8:	200023a8 	.word	0x200023a8

08011ccc <_isatty_r>:
 8011ccc:	b538      	push	{r3, r4, r5, lr}
 8011cce:	4d06      	ldr	r5, [pc, #24]	; (8011ce8 <_isatty_r+0x1c>)
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	4604      	mov	r4, r0
 8011cd4:	4608      	mov	r0, r1
 8011cd6:	602b      	str	r3, [r5, #0]
 8011cd8:	f7f0 fa85 	bl	80021e6 <_isatty>
 8011cdc:	1c43      	adds	r3, r0, #1
 8011cde:	d102      	bne.n	8011ce6 <_isatty_r+0x1a>
 8011ce0:	682b      	ldr	r3, [r5, #0]
 8011ce2:	b103      	cbz	r3, 8011ce6 <_isatty_r+0x1a>
 8011ce4:	6023      	str	r3, [r4, #0]
 8011ce6:	bd38      	pop	{r3, r4, r5, pc}
 8011ce8:	200023a8 	.word	0x200023a8

08011cec <atan2>:
 8011cec:	f000 b800 	b.w	8011cf0 <__ieee754_atan2>

08011cf0 <__ieee754_atan2>:
 8011cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cf4:	ec57 6b11 	vmov	r6, r7, d1
 8011cf8:	4273      	negs	r3, r6
 8011cfa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8011e78 <__ieee754_atan2+0x188>
 8011cfe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011d02:	4333      	orrs	r3, r6
 8011d04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011d08:	4543      	cmp	r3, r8
 8011d0a:	ec51 0b10 	vmov	r0, r1, d0
 8011d0e:	ee11 5a10 	vmov	r5, s2
 8011d12:	d80a      	bhi.n	8011d2a <__ieee754_atan2+0x3a>
 8011d14:	4244      	negs	r4, r0
 8011d16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d1a:	4304      	orrs	r4, r0
 8011d1c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011d20:	4544      	cmp	r4, r8
 8011d22:	ee10 9a10 	vmov	r9, s0
 8011d26:	468e      	mov	lr, r1
 8011d28:	d907      	bls.n	8011d3a <__ieee754_atan2+0x4a>
 8011d2a:	4632      	mov	r2, r6
 8011d2c:	463b      	mov	r3, r7
 8011d2e:	f7ee fab5 	bl	800029c <__adddf3>
 8011d32:	ec41 0b10 	vmov	d0, r0, r1
 8011d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d3a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011d3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011d42:	4334      	orrs	r4, r6
 8011d44:	d103      	bne.n	8011d4e <__ieee754_atan2+0x5e>
 8011d46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d4a:	f000 b899 	b.w	8011e80 <atan>
 8011d4e:	17bc      	asrs	r4, r7, #30
 8011d50:	f004 0402 	and.w	r4, r4, #2
 8011d54:	ea53 0909 	orrs.w	r9, r3, r9
 8011d58:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011d5c:	d107      	bne.n	8011d6e <__ieee754_atan2+0x7e>
 8011d5e:	2c02      	cmp	r4, #2
 8011d60:	d05f      	beq.n	8011e22 <__ieee754_atan2+0x132>
 8011d62:	2c03      	cmp	r4, #3
 8011d64:	d1e5      	bne.n	8011d32 <__ieee754_atan2+0x42>
 8011d66:	a140      	add	r1, pc, #256	; (adr r1, 8011e68 <__ieee754_atan2+0x178>)
 8011d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d6c:	e7e1      	b.n	8011d32 <__ieee754_atan2+0x42>
 8011d6e:	4315      	orrs	r5, r2
 8011d70:	d106      	bne.n	8011d80 <__ieee754_atan2+0x90>
 8011d72:	f1be 0f00 	cmp.w	lr, #0
 8011d76:	da5f      	bge.n	8011e38 <__ieee754_atan2+0x148>
 8011d78:	a13d      	add	r1, pc, #244	; (adr r1, 8011e70 <__ieee754_atan2+0x180>)
 8011d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d7e:	e7d8      	b.n	8011d32 <__ieee754_atan2+0x42>
 8011d80:	4542      	cmp	r2, r8
 8011d82:	d10f      	bne.n	8011da4 <__ieee754_atan2+0xb4>
 8011d84:	4293      	cmp	r3, r2
 8011d86:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011d8a:	d107      	bne.n	8011d9c <__ieee754_atan2+0xac>
 8011d8c:	2c02      	cmp	r4, #2
 8011d8e:	d84c      	bhi.n	8011e2a <__ieee754_atan2+0x13a>
 8011d90:	4b33      	ldr	r3, [pc, #204]	; (8011e60 <__ieee754_atan2+0x170>)
 8011d92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d9a:	e7ca      	b.n	8011d32 <__ieee754_atan2+0x42>
 8011d9c:	2c02      	cmp	r4, #2
 8011d9e:	d848      	bhi.n	8011e32 <__ieee754_atan2+0x142>
 8011da0:	4b30      	ldr	r3, [pc, #192]	; (8011e64 <__ieee754_atan2+0x174>)
 8011da2:	e7f6      	b.n	8011d92 <__ieee754_atan2+0xa2>
 8011da4:	4543      	cmp	r3, r8
 8011da6:	d0e4      	beq.n	8011d72 <__ieee754_atan2+0x82>
 8011da8:	1a9b      	subs	r3, r3, r2
 8011daa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011dae:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011db2:	da1e      	bge.n	8011df2 <__ieee754_atan2+0x102>
 8011db4:	2f00      	cmp	r7, #0
 8011db6:	da01      	bge.n	8011dbc <__ieee754_atan2+0xcc>
 8011db8:	323c      	adds	r2, #60	; 0x3c
 8011dba:	db1e      	blt.n	8011dfa <__ieee754_atan2+0x10a>
 8011dbc:	4632      	mov	r2, r6
 8011dbe:	463b      	mov	r3, r7
 8011dc0:	f7ee fd4c 	bl	800085c <__aeabi_ddiv>
 8011dc4:	ec41 0b10 	vmov	d0, r0, r1
 8011dc8:	f000 f9fa 	bl	80121c0 <fabs>
 8011dcc:	f000 f858 	bl	8011e80 <atan>
 8011dd0:	ec51 0b10 	vmov	r0, r1, d0
 8011dd4:	2c01      	cmp	r4, #1
 8011dd6:	d013      	beq.n	8011e00 <__ieee754_atan2+0x110>
 8011dd8:	2c02      	cmp	r4, #2
 8011dda:	d015      	beq.n	8011e08 <__ieee754_atan2+0x118>
 8011ddc:	2c00      	cmp	r4, #0
 8011dde:	d0a8      	beq.n	8011d32 <__ieee754_atan2+0x42>
 8011de0:	a317      	add	r3, pc, #92	; (adr r3, 8011e40 <__ieee754_atan2+0x150>)
 8011de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de6:	f7ee fa57 	bl	8000298 <__aeabi_dsub>
 8011dea:	a317      	add	r3, pc, #92	; (adr r3, 8011e48 <__ieee754_atan2+0x158>)
 8011dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df0:	e014      	b.n	8011e1c <__ieee754_atan2+0x12c>
 8011df2:	a117      	add	r1, pc, #92	; (adr r1, 8011e50 <__ieee754_atan2+0x160>)
 8011df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011df8:	e7ec      	b.n	8011dd4 <__ieee754_atan2+0xe4>
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	2100      	movs	r1, #0
 8011dfe:	e7e9      	b.n	8011dd4 <__ieee754_atan2+0xe4>
 8011e00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e04:	4619      	mov	r1, r3
 8011e06:	e794      	b.n	8011d32 <__ieee754_atan2+0x42>
 8011e08:	a30d      	add	r3, pc, #52	; (adr r3, 8011e40 <__ieee754_atan2+0x150>)
 8011e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e0e:	f7ee fa43 	bl	8000298 <__aeabi_dsub>
 8011e12:	4602      	mov	r2, r0
 8011e14:	460b      	mov	r3, r1
 8011e16:	a10c      	add	r1, pc, #48	; (adr r1, 8011e48 <__ieee754_atan2+0x158>)
 8011e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e1c:	f7ee fa3c 	bl	8000298 <__aeabi_dsub>
 8011e20:	e787      	b.n	8011d32 <__ieee754_atan2+0x42>
 8011e22:	a109      	add	r1, pc, #36	; (adr r1, 8011e48 <__ieee754_atan2+0x158>)
 8011e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e28:	e783      	b.n	8011d32 <__ieee754_atan2+0x42>
 8011e2a:	a10b      	add	r1, pc, #44	; (adr r1, 8011e58 <__ieee754_atan2+0x168>)
 8011e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e30:	e77f      	b.n	8011d32 <__ieee754_atan2+0x42>
 8011e32:	2000      	movs	r0, #0
 8011e34:	2100      	movs	r1, #0
 8011e36:	e77c      	b.n	8011d32 <__ieee754_atan2+0x42>
 8011e38:	a105      	add	r1, pc, #20	; (adr r1, 8011e50 <__ieee754_atan2+0x160>)
 8011e3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e3e:	e778      	b.n	8011d32 <__ieee754_atan2+0x42>
 8011e40:	33145c07 	.word	0x33145c07
 8011e44:	3ca1a626 	.word	0x3ca1a626
 8011e48:	54442d18 	.word	0x54442d18
 8011e4c:	400921fb 	.word	0x400921fb
 8011e50:	54442d18 	.word	0x54442d18
 8011e54:	3ff921fb 	.word	0x3ff921fb
 8011e58:	54442d18 	.word	0x54442d18
 8011e5c:	3fe921fb 	.word	0x3fe921fb
 8011e60:	080127a0 	.word	0x080127a0
 8011e64:	080127b8 	.word	0x080127b8
 8011e68:	54442d18 	.word	0x54442d18
 8011e6c:	c00921fb 	.word	0xc00921fb
 8011e70:	54442d18 	.word	0x54442d18
 8011e74:	bff921fb 	.word	0xbff921fb
 8011e78:	7ff00000 	.word	0x7ff00000
 8011e7c:	00000000 	.word	0x00000000

08011e80 <atan>:
 8011e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e84:	ec55 4b10 	vmov	r4, r5, d0
 8011e88:	4bc3      	ldr	r3, [pc, #780]	; (8012198 <atan+0x318>)
 8011e8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011e8e:	429e      	cmp	r6, r3
 8011e90:	46ab      	mov	fp, r5
 8011e92:	dd18      	ble.n	8011ec6 <atan+0x46>
 8011e94:	4bc1      	ldr	r3, [pc, #772]	; (801219c <atan+0x31c>)
 8011e96:	429e      	cmp	r6, r3
 8011e98:	dc01      	bgt.n	8011e9e <atan+0x1e>
 8011e9a:	d109      	bne.n	8011eb0 <atan+0x30>
 8011e9c:	b144      	cbz	r4, 8011eb0 <atan+0x30>
 8011e9e:	4622      	mov	r2, r4
 8011ea0:	462b      	mov	r3, r5
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	f7ee f9f9 	bl	800029c <__adddf3>
 8011eaa:	4604      	mov	r4, r0
 8011eac:	460d      	mov	r5, r1
 8011eae:	e006      	b.n	8011ebe <atan+0x3e>
 8011eb0:	f1bb 0f00 	cmp.w	fp, #0
 8011eb4:	f300 8131 	bgt.w	801211a <atan+0x29a>
 8011eb8:	a59b      	add	r5, pc, #620	; (adr r5, 8012128 <atan+0x2a8>)
 8011eba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011ebe:	ec45 4b10 	vmov	d0, r4, r5
 8011ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec6:	4bb6      	ldr	r3, [pc, #728]	; (80121a0 <atan+0x320>)
 8011ec8:	429e      	cmp	r6, r3
 8011eca:	dc14      	bgt.n	8011ef6 <atan+0x76>
 8011ecc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011ed0:	429e      	cmp	r6, r3
 8011ed2:	dc0d      	bgt.n	8011ef0 <atan+0x70>
 8011ed4:	a396      	add	r3, pc, #600	; (adr r3, 8012130 <atan+0x2b0>)
 8011ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eda:	ee10 0a10 	vmov	r0, s0
 8011ede:	4629      	mov	r1, r5
 8011ee0:	f7ee f9dc 	bl	800029c <__adddf3>
 8011ee4:	4baf      	ldr	r3, [pc, #700]	; (80121a4 <atan+0x324>)
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	f7ee fe1e 	bl	8000b28 <__aeabi_dcmpgt>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	d1e6      	bne.n	8011ebe <atan+0x3e>
 8011ef0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011ef4:	e02b      	b.n	8011f4e <atan+0xce>
 8011ef6:	f000 f963 	bl	80121c0 <fabs>
 8011efa:	4bab      	ldr	r3, [pc, #684]	; (80121a8 <atan+0x328>)
 8011efc:	429e      	cmp	r6, r3
 8011efe:	ec55 4b10 	vmov	r4, r5, d0
 8011f02:	f300 80bf 	bgt.w	8012084 <atan+0x204>
 8011f06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011f0a:	429e      	cmp	r6, r3
 8011f0c:	f300 80a0 	bgt.w	8012050 <atan+0x1d0>
 8011f10:	ee10 2a10 	vmov	r2, s0
 8011f14:	ee10 0a10 	vmov	r0, s0
 8011f18:	462b      	mov	r3, r5
 8011f1a:	4629      	mov	r1, r5
 8011f1c:	f7ee f9be 	bl	800029c <__adddf3>
 8011f20:	4ba0      	ldr	r3, [pc, #640]	; (80121a4 <atan+0x324>)
 8011f22:	2200      	movs	r2, #0
 8011f24:	f7ee f9b8 	bl	8000298 <__aeabi_dsub>
 8011f28:	2200      	movs	r2, #0
 8011f2a:	4606      	mov	r6, r0
 8011f2c:	460f      	mov	r7, r1
 8011f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f32:	4620      	mov	r0, r4
 8011f34:	4629      	mov	r1, r5
 8011f36:	f7ee f9b1 	bl	800029c <__adddf3>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	4630      	mov	r0, r6
 8011f40:	4639      	mov	r1, r7
 8011f42:	f7ee fc8b 	bl	800085c <__aeabi_ddiv>
 8011f46:	f04f 0a00 	mov.w	sl, #0
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	460d      	mov	r5, r1
 8011f4e:	4622      	mov	r2, r4
 8011f50:	462b      	mov	r3, r5
 8011f52:	4620      	mov	r0, r4
 8011f54:	4629      	mov	r1, r5
 8011f56:	f7ee fb57 	bl	8000608 <__aeabi_dmul>
 8011f5a:	4602      	mov	r2, r0
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	4680      	mov	r8, r0
 8011f60:	4689      	mov	r9, r1
 8011f62:	f7ee fb51 	bl	8000608 <__aeabi_dmul>
 8011f66:	a374      	add	r3, pc, #464	; (adr r3, 8012138 <atan+0x2b8>)
 8011f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6c:	4606      	mov	r6, r0
 8011f6e:	460f      	mov	r7, r1
 8011f70:	f7ee fb4a 	bl	8000608 <__aeabi_dmul>
 8011f74:	a372      	add	r3, pc, #456	; (adr r3, 8012140 <atan+0x2c0>)
 8011f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7a:	f7ee f98f 	bl	800029c <__adddf3>
 8011f7e:	4632      	mov	r2, r6
 8011f80:	463b      	mov	r3, r7
 8011f82:	f7ee fb41 	bl	8000608 <__aeabi_dmul>
 8011f86:	a370      	add	r3, pc, #448	; (adr r3, 8012148 <atan+0x2c8>)
 8011f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8c:	f7ee f986 	bl	800029c <__adddf3>
 8011f90:	4632      	mov	r2, r6
 8011f92:	463b      	mov	r3, r7
 8011f94:	f7ee fb38 	bl	8000608 <__aeabi_dmul>
 8011f98:	a36d      	add	r3, pc, #436	; (adr r3, 8012150 <atan+0x2d0>)
 8011f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9e:	f7ee f97d 	bl	800029c <__adddf3>
 8011fa2:	4632      	mov	r2, r6
 8011fa4:	463b      	mov	r3, r7
 8011fa6:	f7ee fb2f 	bl	8000608 <__aeabi_dmul>
 8011faa:	a36b      	add	r3, pc, #428	; (adr r3, 8012158 <atan+0x2d8>)
 8011fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb0:	f7ee f974 	bl	800029c <__adddf3>
 8011fb4:	4632      	mov	r2, r6
 8011fb6:	463b      	mov	r3, r7
 8011fb8:	f7ee fb26 	bl	8000608 <__aeabi_dmul>
 8011fbc:	a368      	add	r3, pc, #416	; (adr r3, 8012160 <atan+0x2e0>)
 8011fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc2:	f7ee f96b 	bl	800029c <__adddf3>
 8011fc6:	4642      	mov	r2, r8
 8011fc8:	464b      	mov	r3, r9
 8011fca:	f7ee fb1d 	bl	8000608 <__aeabi_dmul>
 8011fce:	a366      	add	r3, pc, #408	; (adr r3, 8012168 <atan+0x2e8>)
 8011fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd4:	4680      	mov	r8, r0
 8011fd6:	4689      	mov	r9, r1
 8011fd8:	4630      	mov	r0, r6
 8011fda:	4639      	mov	r1, r7
 8011fdc:	f7ee fb14 	bl	8000608 <__aeabi_dmul>
 8011fe0:	a363      	add	r3, pc, #396	; (adr r3, 8012170 <atan+0x2f0>)
 8011fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe6:	f7ee f957 	bl	8000298 <__aeabi_dsub>
 8011fea:	4632      	mov	r2, r6
 8011fec:	463b      	mov	r3, r7
 8011fee:	f7ee fb0b 	bl	8000608 <__aeabi_dmul>
 8011ff2:	a361      	add	r3, pc, #388	; (adr r3, 8012178 <atan+0x2f8>)
 8011ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff8:	f7ee f94e 	bl	8000298 <__aeabi_dsub>
 8011ffc:	4632      	mov	r2, r6
 8011ffe:	463b      	mov	r3, r7
 8012000:	f7ee fb02 	bl	8000608 <__aeabi_dmul>
 8012004:	a35e      	add	r3, pc, #376	; (adr r3, 8012180 <atan+0x300>)
 8012006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200a:	f7ee f945 	bl	8000298 <__aeabi_dsub>
 801200e:	4632      	mov	r2, r6
 8012010:	463b      	mov	r3, r7
 8012012:	f7ee faf9 	bl	8000608 <__aeabi_dmul>
 8012016:	a35c      	add	r3, pc, #368	; (adr r3, 8012188 <atan+0x308>)
 8012018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801201c:	f7ee f93c 	bl	8000298 <__aeabi_dsub>
 8012020:	4632      	mov	r2, r6
 8012022:	463b      	mov	r3, r7
 8012024:	f7ee faf0 	bl	8000608 <__aeabi_dmul>
 8012028:	4602      	mov	r2, r0
 801202a:	460b      	mov	r3, r1
 801202c:	4640      	mov	r0, r8
 801202e:	4649      	mov	r1, r9
 8012030:	f7ee f934 	bl	800029c <__adddf3>
 8012034:	4622      	mov	r2, r4
 8012036:	462b      	mov	r3, r5
 8012038:	f7ee fae6 	bl	8000608 <__aeabi_dmul>
 801203c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8012040:	4602      	mov	r2, r0
 8012042:	460b      	mov	r3, r1
 8012044:	d14b      	bne.n	80120de <atan+0x25e>
 8012046:	4620      	mov	r0, r4
 8012048:	4629      	mov	r1, r5
 801204a:	f7ee f925 	bl	8000298 <__aeabi_dsub>
 801204e:	e72c      	b.n	8011eaa <atan+0x2a>
 8012050:	ee10 0a10 	vmov	r0, s0
 8012054:	4b53      	ldr	r3, [pc, #332]	; (80121a4 <atan+0x324>)
 8012056:	2200      	movs	r2, #0
 8012058:	4629      	mov	r1, r5
 801205a:	f7ee f91d 	bl	8000298 <__aeabi_dsub>
 801205e:	4b51      	ldr	r3, [pc, #324]	; (80121a4 <atan+0x324>)
 8012060:	4606      	mov	r6, r0
 8012062:	460f      	mov	r7, r1
 8012064:	2200      	movs	r2, #0
 8012066:	4620      	mov	r0, r4
 8012068:	4629      	mov	r1, r5
 801206a:	f7ee f917 	bl	800029c <__adddf3>
 801206e:	4602      	mov	r2, r0
 8012070:	460b      	mov	r3, r1
 8012072:	4630      	mov	r0, r6
 8012074:	4639      	mov	r1, r7
 8012076:	f7ee fbf1 	bl	800085c <__aeabi_ddiv>
 801207a:	f04f 0a01 	mov.w	sl, #1
 801207e:	4604      	mov	r4, r0
 8012080:	460d      	mov	r5, r1
 8012082:	e764      	b.n	8011f4e <atan+0xce>
 8012084:	4b49      	ldr	r3, [pc, #292]	; (80121ac <atan+0x32c>)
 8012086:	429e      	cmp	r6, r3
 8012088:	da1d      	bge.n	80120c6 <atan+0x246>
 801208a:	ee10 0a10 	vmov	r0, s0
 801208e:	4b48      	ldr	r3, [pc, #288]	; (80121b0 <atan+0x330>)
 8012090:	2200      	movs	r2, #0
 8012092:	4629      	mov	r1, r5
 8012094:	f7ee f900 	bl	8000298 <__aeabi_dsub>
 8012098:	4b45      	ldr	r3, [pc, #276]	; (80121b0 <atan+0x330>)
 801209a:	4606      	mov	r6, r0
 801209c:	460f      	mov	r7, r1
 801209e:	2200      	movs	r2, #0
 80120a0:	4620      	mov	r0, r4
 80120a2:	4629      	mov	r1, r5
 80120a4:	f7ee fab0 	bl	8000608 <__aeabi_dmul>
 80120a8:	4b3e      	ldr	r3, [pc, #248]	; (80121a4 <atan+0x324>)
 80120aa:	2200      	movs	r2, #0
 80120ac:	f7ee f8f6 	bl	800029c <__adddf3>
 80120b0:	4602      	mov	r2, r0
 80120b2:	460b      	mov	r3, r1
 80120b4:	4630      	mov	r0, r6
 80120b6:	4639      	mov	r1, r7
 80120b8:	f7ee fbd0 	bl	800085c <__aeabi_ddiv>
 80120bc:	f04f 0a02 	mov.w	sl, #2
 80120c0:	4604      	mov	r4, r0
 80120c2:	460d      	mov	r5, r1
 80120c4:	e743      	b.n	8011f4e <atan+0xce>
 80120c6:	462b      	mov	r3, r5
 80120c8:	ee10 2a10 	vmov	r2, s0
 80120cc:	4939      	ldr	r1, [pc, #228]	; (80121b4 <atan+0x334>)
 80120ce:	2000      	movs	r0, #0
 80120d0:	f7ee fbc4 	bl	800085c <__aeabi_ddiv>
 80120d4:	f04f 0a03 	mov.w	sl, #3
 80120d8:	4604      	mov	r4, r0
 80120da:	460d      	mov	r5, r1
 80120dc:	e737      	b.n	8011f4e <atan+0xce>
 80120de:	4b36      	ldr	r3, [pc, #216]	; (80121b8 <atan+0x338>)
 80120e0:	4e36      	ldr	r6, [pc, #216]	; (80121bc <atan+0x33c>)
 80120e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80120e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ea:	f7ee f8d5 	bl	8000298 <__aeabi_dsub>
 80120ee:	4622      	mov	r2, r4
 80120f0:	462b      	mov	r3, r5
 80120f2:	f7ee f8d1 	bl	8000298 <__aeabi_dsub>
 80120f6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80120fa:	4602      	mov	r2, r0
 80120fc:	460b      	mov	r3, r1
 80120fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012102:	f7ee f8c9 	bl	8000298 <__aeabi_dsub>
 8012106:	f1bb 0f00 	cmp.w	fp, #0
 801210a:	4604      	mov	r4, r0
 801210c:	460d      	mov	r5, r1
 801210e:	f6bf aed6 	bge.w	8011ebe <atan+0x3e>
 8012112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012116:	461d      	mov	r5, r3
 8012118:	e6d1      	b.n	8011ebe <atan+0x3e>
 801211a:	a51d      	add	r5, pc, #116	; (adr r5, 8012190 <atan+0x310>)
 801211c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012120:	e6cd      	b.n	8011ebe <atan+0x3e>
 8012122:	bf00      	nop
 8012124:	f3af 8000 	nop.w
 8012128:	54442d18 	.word	0x54442d18
 801212c:	bff921fb 	.word	0xbff921fb
 8012130:	8800759c 	.word	0x8800759c
 8012134:	7e37e43c 	.word	0x7e37e43c
 8012138:	e322da11 	.word	0xe322da11
 801213c:	3f90ad3a 	.word	0x3f90ad3a
 8012140:	24760deb 	.word	0x24760deb
 8012144:	3fa97b4b 	.word	0x3fa97b4b
 8012148:	a0d03d51 	.word	0xa0d03d51
 801214c:	3fb10d66 	.word	0x3fb10d66
 8012150:	c54c206e 	.word	0xc54c206e
 8012154:	3fb745cd 	.word	0x3fb745cd
 8012158:	920083ff 	.word	0x920083ff
 801215c:	3fc24924 	.word	0x3fc24924
 8012160:	5555550d 	.word	0x5555550d
 8012164:	3fd55555 	.word	0x3fd55555
 8012168:	2c6a6c2f 	.word	0x2c6a6c2f
 801216c:	bfa2b444 	.word	0xbfa2b444
 8012170:	52defd9a 	.word	0x52defd9a
 8012174:	3fadde2d 	.word	0x3fadde2d
 8012178:	af749a6d 	.word	0xaf749a6d
 801217c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012180:	fe231671 	.word	0xfe231671
 8012184:	3fbc71c6 	.word	0x3fbc71c6
 8012188:	9998ebc4 	.word	0x9998ebc4
 801218c:	3fc99999 	.word	0x3fc99999
 8012190:	54442d18 	.word	0x54442d18
 8012194:	3ff921fb 	.word	0x3ff921fb
 8012198:	440fffff 	.word	0x440fffff
 801219c:	7ff00000 	.word	0x7ff00000
 80121a0:	3fdbffff 	.word	0x3fdbffff
 80121a4:	3ff00000 	.word	0x3ff00000
 80121a8:	3ff2ffff 	.word	0x3ff2ffff
 80121ac:	40038000 	.word	0x40038000
 80121b0:	3ff80000 	.word	0x3ff80000
 80121b4:	bff00000 	.word	0xbff00000
 80121b8:	080127f0 	.word	0x080127f0
 80121bc:	080127d0 	.word	0x080127d0

080121c0 <fabs>:
 80121c0:	ec51 0b10 	vmov	r0, r1, d0
 80121c4:	ee10 2a10 	vmov	r2, s0
 80121c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80121cc:	ec43 2b10 	vmov	d0, r2, r3
 80121d0:	4770      	bx	lr
	...

080121d4 <_init>:
 80121d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d6:	bf00      	nop
 80121d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121da:	bc08      	pop	{r3}
 80121dc:	469e      	mov	lr, r3
 80121de:	4770      	bx	lr

080121e0 <_fini>:
 80121e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121e2:	bf00      	nop
 80121e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121e6:	bc08      	pop	{r3}
 80121e8:	469e      	mov	lr, r3
 80121ea:	4770      	bx	lr
